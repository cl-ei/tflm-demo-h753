
H753_OV2640_lite.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00020c1c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00051d48  08020ec0  08020ec0  00030ec0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08072c08  08072c08  00082c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08072c10  08072c10  00082c10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08072c14  08072c14  00082c14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  24000000  08072c18  00090000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ram_d2       00002400  30000000  08072c8c  000a0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          0004f144  24000080  24000080  000b0080  2**4
                  ALLOC
  9 ._user_heap_stack 00000604  2404f1c4  2404f1c4  000b0080  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  000a2400  2**0
                  CONTENTS, READONLY
 11 .comment      00000043  00000000  00000000  000a242e  2**0
                  CONTENTS, READONLY
 12 .debug_info   004b9df1  00000000  00000000  000a2471  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000274eb  00000000  00000000  0055c262  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 0000b188  00000000  00000000  00583750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000868c  00000000  00000000  0058e8d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0005e8a1  00000000  00000000  00596f64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000b38ad  00000000  00000000  005f5805  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0026d538  00000000  00000000  006a90b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  00032f64  00000000  00000000  009165ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000005b  00000000  00000000  00949550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000080 	.word	0x24000080
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08020ea4 	.word	0x08020ea4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000084 	.word	0x24000084
 80002dc:	08020ea4 	.word	0x08020ea4

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr
	...

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <__aeabi_drsub>:
 80003a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a4:	e002      	b.n	80003ac <__adddf3>
 80003a6:	bf00      	nop

080003a8 <__aeabi_dsub>:
 80003a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003ac <__adddf3>:
 80003ac:	b530      	push	{r4, r5, lr}
 80003ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003b6:	ea94 0f05 	teq	r4, r5
 80003ba:	bf08      	it	eq
 80003bc:	ea90 0f02 	teqeq	r0, r2
 80003c0:	bf1f      	itttt	ne
 80003c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d2:	f000 80e2 	beq.w	800059a <__adddf3+0x1ee>
 80003d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003de:	bfb8      	it	lt
 80003e0:	426d      	neglt	r5, r5
 80003e2:	dd0c      	ble.n	80003fe <__adddf3+0x52>
 80003e4:	442c      	add	r4, r5
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	ea82 0000 	eor.w	r0, r2, r0
 80003f2:	ea83 0101 	eor.w	r1, r3, r1
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	2d36      	cmp	r5, #54	; 0x36
 8000400:	bf88      	it	hi
 8000402:	bd30      	pophi	{r4, r5, pc}
 8000404:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000408:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800040c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000410:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000414:	d002      	beq.n	800041c <__adddf3+0x70>
 8000416:	4240      	negs	r0, r0
 8000418:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800041c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000420:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000424:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x84>
 800042a:	4252      	negs	r2, r2
 800042c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000430:	ea94 0f05 	teq	r4, r5
 8000434:	f000 80a7 	beq.w	8000586 <__adddf3+0x1da>
 8000438:	f1a4 0401 	sub.w	r4, r4, #1
 800043c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000440:	db0d      	blt.n	800045e <__adddf3+0xb2>
 8000442:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000446:	fa22 f205 	lsr.w	r2, r2, r5
 800044a:	1880      	adds	r0, r0, r2
 800044c:	f141 0100 	adc.w	r1, r1, #0
 8000450:	fa03 f20e 	lsl.w	r2, r3, lr
 8000454:	1880      	adds	r0, r0, r2
 8000456:	fa43 f305 	asr.w	r3, r3, r5
 800045a:	4159      	adcs	r1, r3
 800045c:	e00e      	b.n	800047c <__adddf3+0xd0>
 800045e:	f1a5 0520 	sub.w	r5, r5, #32
 8000462:	f10e 0e20 	add.w	lr, lr, #32
 8000466:	2a01      	cmp	r2, #1
 8000468:	fa03 fc0e 	lsl.w	ip, r3, lr
 800046c:	bf28      	it	cs
 800046e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000472:	fa43 f305 	asr.w	r3, r3, r5
 8000476:	18c0      	adds	r0, r0, r3
 8000478:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800047c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000480:	d507      	bpl.n	8000492 <__adddf3+0xe6>
 8000482:	f04f 0e00 	mov.w	lr, #0
 8000486:	f1dc 0c00 	rsbs	ip, ip, #0
 800048a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800048e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000492:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000496:	d31b      	bcc.n	80004d0 <__adddf3+0x124>
 8000498:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800049c:	d30c      	bcc.n	80004b8 <__adddf3+0x10c>
 800049e:	0849      	lsrs	r1, r1, #1
 80004a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004a8:	f104 0401 	add.w	r4, r4, #1
 80004ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b4:	f080 809a 	bcs.w	80005ec <__adddf3+0x240>
 80004b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004bc:	bf08      	it	eq
 80004be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c2:	f150 0000 	adcs.w	r0, r0, #0
 80004c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ca:	ea41 0105 	orr.w	r1, r1, r5
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d4:	4140      	adcs	r0, r0
 80004d6:	eb41 0101 	adc.w	r1, r1, r1
 80004da:	3c01      	subs	r4, #1
 80004dc:	bf28      	it	cs
 80004de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e2:	d2e9      	bcs.n	80004b8 <__adddf3+0x10c>
 80004e4:	f091 0f00 	teq	r1, #0
 80004e8:	bf04      	itt	eq
 80004ea:	4601      	moveq	r1, r0
 80004ec:	2000      	moveq	r0, #0
 80004ee:	fab1 f381 	clz	r3, r1
 80004f2:	bf08      	it	eq
 80004f4:	3320      	addeq	r3, #32
 80004f6:	f1a3 030b 	sub.w	r3, r3, #11
 80004fa:	f1b3 0220 	subs.w	r2, r3, #32
 80004fe:	da0c      	bge.n	800051a <__adddf3+0x16e>
 8000500:	320c      	adds	r2, #12
 8000502:	dd08      	ble.n	8000516 <__adddf3+0x16a>
 8000504:	f102 0c14 	add.w	ip, r2, #20
 8000508:	f1c2 020c 	rsb	r2, r2, #12
 800050c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000510:	fa21 f102 	lsr.w	r1, r1, r2
 8000514:	e00c      	b.n	8000530 <__adddf3+0x184>
 8000516:	f102 0214 	add.w	r2, r2, #20
 800051a:	bfd8      	it	le
 800051c:	f1c2 0c20 	rsble	ip, r2, #32
 8000520:	fa01 f102 	lsl.w	r1, r1, r2
 8000524:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000528:	bfdc      	itt	le
 800052a:	ea41 010c 	orrle.w	r1, r1, ip
 800052e:	4090      	lslle	r0, r2
 8000530:	1ae4      	subs	r4, r4, r3
 8000532:	bfa2      	ittt	ge
 8000534:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000538:	4329      	orrge	r1, r5
 800053a:	bd30      	popge	{r4, r5, pc}
 800053c:	ea6f 0404 	mvn.w	r4, r4
 8000540:	3c1f      	subs	r4, #31
 8000542:	da1c      	bge.n	800057e <__adddf3+0x1d2>
 8000544:	340c      	adds	r4, #12
 8000546:	dc0e      	bgt.n	8000566 <__adddf3+0x1ba>
 8000548:	f104 0414 	add.w	r4, r4, #20
 800054c:	f1c4 0220 	rsb	r2, r4, #32
 8000550:	fa20 f004 	lsr.w	r0, r0, r4
 8000554:	fa01 f302 	lsl.w	r3, r1, r2
 8000558:	ea40 0003 	orr.w	r0, r0, r3
 800055c:	fa21 f304 	lsr.w	r3, r1, r4
 8000560:	ea45 0103 	orr.w	r1, r5, r3
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f1c4 040c 	rsb	r4, r4, #12
 800056a:	f1c4 0220 	rsb	r2, r4, #32
 800056e:	fa20 f002 	lsr.w	r0, r0, r2
 8000572:	fa01 f304 	lsl.w	r3, r1, r4
 8000576:	ea40 0003 	orr.w	r0, r0, r3
 800057a:	4629      	mov	r1, r5
 800057c:	bd30      	pop	{r4, r5, pc}
 800057e:	fa21 f004 	lsr.w	r0, r1, r4
 8000582:	4629      	mov	r1, r5
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f094 0f00 	teq	r4, #0
 800058a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800058e:	bf06      	itte	eq
 8000590:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000594:	3401      	addeq	r4, #1
 8000596:	3d01      	subne	r5, #1
 8000598:	e74e      	b.n	8000438 <__adddf3+0x8c>
 800059a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800059e:	bf18      	it	ne
 80005a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a4:	d029      	beq.n	80005fa <__adddf3+0x24e>
 80005a6:	ea94 0f05 	teq	r4, r5
 80005aa:	bf08      	it	eq
 80005ac:	ea90 0f02 	teqeq	r0, r2
 80005b0:	d005      	beq.n	80005be <__adddf3+0x212>
 80005b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005b6:	bf04      	itt	eq
 80005b8:	4619      	moveq	r1, r3
 80005ba:	4610      	moveq	r0, r2
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	ea91 0f03 	teq	r1, r3
 80005c2:	bf1e      	ittt	ne
 80005c4:	2100      	movne	r1, #0
 80005c6:	2000      	movne	r0, #0
 80005c8:	bd30      	popne	{r4, r5, pc}
 80005ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ce:	d105      	bne.n	80005dc <__adddf3+0x230>
 80005d0:	0040      	lsls	r0, r0, #1
 80005d2:	4149      	adcs	r1, r1
 80005d4:	bf28      	it	cs
 80005d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd30      	pop	{r4, r5, pc}
 80005dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e0:	bf3c      	itt	cc
 80005e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005e6:	bd30      	popcc	{r4, r5, pc}
 80005e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f4:	f04f 0000 	mov.w	r0, #0
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005fe:	bf1a      	itte	ne
 8000600:	4619      	movne	r1, r3
 8000602:	4610      	movne	r0, r2
 8000604:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000608:	bf1c      	itt	ne
 800060a:	460b      	movne	r3, r1
 800060c:	4602      	movne	r2, r0
 800060e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000612:	bf06      	itte	eq
 8000614:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000618:	ea91 0f03 	teqeq	r1, r3
 800061c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	bf00      	nop

08000624 <__aeabi_ui2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000638:	f04f 0500 	mov.w	r5, #0
 800063c:	f04f 0100 	mov.w	r1, #0
 8000640:	e750      	b.n	80004e4 <__adddf3+0x138>
 8000642:	bf00      	nop

08000644 <__aeabi_i2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000658:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800065c:	bf48      	it	mi
 800065e:	4240      	negmi	r0, r0
 8000660:	f04f 0100 	mov.w	r1, #0
 8000664:	e73e      	b.n	80004e4 <__adddf3+0x138>
 8000666:	bf00      	nop

08000668 <__aeabi_f2d>:
 8000668:	0042      	lsls	r2, r0, #1
 800066a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800066e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000672:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000676:	bf1f      	itttt	ne
 8000678:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800067c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000680:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000684:	4770      	bxne	lr
 8000686:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068a:	bf08      	it	eq
 800068c:	4770      	bxeq	lr
 800068e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000692:	bf04      	itt	eq
 8000694:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000698:	4770      	bxeq	lr
 800069a:	b530      	push	{r4, r5, lr}
 800069c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	e71c      	b.n	80004e4 <__adddf3+0x138>
 80006aa:	bf00      	nop

080006ac <__aeabi_ul2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f04f 0500 	mov.w	r5, #0
 80006ba:	e00a      	b.n	80006d2 <__aeabi_l2d+0x16>

080006bc <__aeabi_l2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ca:	d502      	bpl.n	80006d2 <__aeabi_l2d+0x16>
 80006cc:	4240      	negs	r0, r0
 80006ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006de:	f43f aed8 	beq.w	8000492 <__adddf3+0xe6>
 80006e2:	f04f 0203 	mov.w	r2, #3
 80006e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ea:	bf18      	it	ne
 80006ec:	3203      	addne	r2, #3
 80006ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f2:	bf18      	it	ne
 80006f4:	3203      	addne	r2, #3
 80006f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fa:	f1c2 0320 	rsb	r3, r2, #32
 80006fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000702:	fa20 f002 	lsr.w	r0, r0, r2
 8000706:	fa01 fe03 	lsl.w	lr, r1, r3
 800070a:	ea40 000e 	orr.w	r0, r0, lr
 800070e:	fa21 f102 	lsr.w	r1, r1, r2
 8000712:	4414      	add	r4, r2
 8000714:	e6bd      	b.n	8000492 <__adddf3+0xe6>
 8000716:	bf00      	nop

08000718 <__aeabi_ldivmod>:
 8000718:	b97b      	cbnz	r3, 800073a <__aeabi_ldivmod+0x22>
 800071a:	b972      	cbnz	r2, 800073a <__aeabi_ldivmod+0x22>
 800071c:	2900      	cmp	r1, #0
 800071e:	bfbe      	ittt	lt
 8000720:	2000      	movlt	r0, #0
 8000722:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000726:	e006      	blt.n	8000736 <__aeabi_ldivmod+0x1e>
 8000728:	bf08      	it	eq
 800072a:	2800      	cmpeq	r0, #0
 800072c:	bf1c      	itt	ne
 800072e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000732:	f04f 30ff 	movne.w	r0, #4294967295
 8000736:	f000 b9f3 	b.w	8000b20 <__aeabi_idiv0>
 800073a:	f1ad 0c08 	sub.w	ip, sp, #8
 800073e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000742:	2900      	cmp	r1, #0
 8000744:	db09      	blt.n	800075a <__aeabi_ldivmod+0x42>
 8000746:	2b00      	cmp	r3, #0
 8000748:	db1a      	blt.n	8000780 <__aeabi_ldivmod+0x68>
 800074a:	f000 f885 	bl	8000858 <__udivmoddi4>
 800074e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000752:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000756:	b004      	add	sp, #16
 8000758:	4770      	bx	lr
 800075a:	4240      	negs	r0, r0
 800075c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000760:	2b00      	cmp	r3, #0
 8000762:	db1b      	blt.n	800079c <__aeabi_ldivmod+0x84>
 8000764:	f000 f878 	bl	8000858 <__udivmoddi4>
 8000768:	f8dd e004 	ldr.w	lr, [sp, #4]
 800076c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000770:	b004      	add	sp, #16
 8000772:	4240      	negs	r0, r0
 8000774:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000778:	4252      	negs	r2, r2
 800077a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800077e:	4770      	bx	lr
 8000780:	4252      	negs	r2, r2
 8000782:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000786:	f000 f867 	bl	8000858 <__udivmoddi4>
 800078a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800078e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000792:	b004      	add	sp, #16
 8000794:	4240      	negs	r0, r0
 8000796:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800079a:	4770      	bx	lr
 800079c:	4252      	negs	r2, r2
 800079e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007a2:	f000 f859 	bl	8000858 <__udivmoddi4>
 80007a6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007ae:	b004      	add	sp, #16
 80007b0:	4252      	negs	r2, r2
 80007b2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007b6:	4770      	bx	lr

080007b8 <__aeabi_uldivmod>:
 80007b8:	b953      	cbnz	r3, 80007d0 <__aeabi_uldivmod+0x18>
 80007ba:	b94a      	cbnz	r2, 80007d0 <__aeabi_uldivmod+0x18>
 80007bc:	2900      	cmp	r1, #0
 80007be:	bf08      	it	eq
 80007c0:	2800      	cmpeq	r0, #0
 80007c2:	bf1c      	itt	ne
 80007c4:	f04f 31ff 	movne.w	r1, #4294967295
 80007c8:	f04f 30ff 	movne.w	r0, #4294967295
 80007cc:	f000 b9a8 	b.w	8000b20 <__aeabi_idiv0>
 80007d0:	f1ad 0c08 	sub.w	ip, sp, #8
 80007d4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007d8:	f000 f83e 	bl	8000858 <__udivmoddi4>
 80007dc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007e4:	b004      	add	sp, #16
 80007e6:	4770      	bx	lr

080007e8 <__aeabi_d2lz>:
 80007e8:	b508      	push	{r3, lr}
 80007ea:	4602      	mov	r2, r0
 80007ec:	460b      	mov	r3, r1
 80007ee:	ec43 2b17 	vmov	d7, r2, r3
 80007f2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80007f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007fa:	d403      	bmi.n	8000804 <__aeabi_d2lz+0x1c>
 80007fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000800:	f000 b80a 	b.w	8000818 <__aeabi_d2ulz>
 8000804:	eeb1 7b47 	vneg.f64	d7, d7
 8000808:	ec51 0b17 	vmov	r0, r1, d7
 800080c:	f000 f804 	bl	8000818 <__aeabi_d2ulz>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	bd08      	pop	{r3, pc}

08000818 <__aeabi_d2ulz>:
 8000818:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000848 <__aeabi_d2ulz+0x30>
 800081c:	ec41 0b17 	vmov	d7, r0, r1
 8000820:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000850 <__aeabi_d2ulz+0x38>
 8000824:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000828:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800082c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000830:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000834:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000838:	ee16 1a10 	vmov	r1, s12
 800083c:	ee17 0a90 	vmov	r0, s15
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	f3af 8000 	nop.w
 8000848:	00000000 	.word	0x00000000
 800084c:	3df00000 	.word	0x3df00000
 8000850:	00000000 	.word	0x00000000
 8000854:	41f00000 	.word	0x41f00000

08000858 <__udivmoddi4>:
 8000858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800085c:	9e08      	ldr	r6, [sp, #32]
 800085e:	460d      	mov	r5, r1
 8000860:	4604      	mov	r4, r0
 8000862:	460f      	mov	r7, r1
 8000864:	2b00      	cmp	r3, #0
 8000866:	d14a      	bne.n	80008fe <__udivmoddi4+0xa6>
 8000868:	428a      	cmp	r2, r1
 800086a:	4694      	mov	ip, r2
 800086c:	d965      	bls.n	800093a <__udivmoddi4+0xe2>
 800086e:	fab2 f382 	clz	r3, r2
 8000872:	b143      	cbz	r3, 8000886 <__udivmoddi4+0x2e>
 8000874:	fa02 fc03 	lsl.w	ip, r2, r3
 8000878:	f1c3 0220 	rsb	r2, r3, #32
 800087c:	409f      	lsls	r7, r3
 800087e:	fa20 f202 	lsr.w	r2, r0, r2
 8000882:	4317      	orrs	r7, r2
 8000884:	409c      	lsls	r4, r3
 8000886:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800088a:	fa1f f58c 	uxth.w	r5, ip
 800088e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000892:	0c22      	lsrs	r2, r4, #16
 8000894:	fb0e 7711 	mls	r7, lr, r1, r7
 8000898:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800089c:	fb01 f005 	mul.w	r0, r1, r5
 80008a0:	4290      	cmp	r0, r2
 80008a2:	d90a      	bls.n	80008ba <__udivmoddi4+0x62>
 80008a4:	eb1c 0202 	adds.w	r2, ip, r2
 80008a8:	f101 37ff 	add.w	r7, r1, #4294967295
 80008ac:	f080 811c 	bcs.w	8000ae8 <__udivmoddi4+0x290>
 80008b0:	4290      	cmp	r0, r2
 80008b2:	f240 8119 	bls.w	8000ae8 <__udivmoddi4+0x290>
 80008b6:	3902      	subs	r1, #2
 80008b8:	4462      	add	r2, ip
 80008ba:	1a12      	subs	r2, r2, r0
 80008bc:	b2a4      	uxth	r4, r4
 80008be:	fbb2 f0fe 	udiv	r0, r2, lr
 80008c2:	fb0e 2210 	mls	r2, lr, r0, r2
 80008c6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80008ca:	fb00 f505 	mul.w	r5, r0, r5
 80008ce:	42a5      	cmp	r5, r4
 80008d0:	d90a      	bls.n	80008e8 <__udivmoddi4+0x90>
 80008d2:	eb1c 0404 	adds.w	r4, ip, r4
 80008d6:	f100 32ff 	add.w	r2, r0, #4294967295
 80008da:	f080 8107 	bcs.w	8000aec <__udivmoddi4+0x294>
 80008de:	42a5      	cmp	r5, r4
 80008e0:	f240 8104 	bls.w	8000aec <__udivmoddi4+0x294>
 80008e4:	4464      	add	r4, ip
 80008e6:	3802      	subs	r0, #2
 80008e8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80008ec:	1b64      	subs	r4, r4, r5
 80008ee:	2100      	movs	r1, #0
 80008f0:	b11e      	cbz	r6, 80008fa <__udivmoddi4+0xa2>
 80008f2:	40dc      	lsrs	r4, r3
 80008f4:	2300      	movs	r3, #0
 80008f6:	e9c6 4300 	strd	r4, r3, [r6]
 80008fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008fe:	428b      	cmp	r3, r1
 8000900:	d908      	bls.n	8000914 <__udivmoddi4+0xbc>
 8000902:	2e00      	cmp	r6, #0
 8000904:	f000 80ed 	beq.w	8000ae2 <__udivmoddi4+0x28a>
 8000908:	2100      	movs	r1, #0
 800090a:	e9c6 0500 	strd	r0, r5, [r6]
 800090e:	4608      	mov	r0, r1
 8000910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000914:	fab3 f183 	clz	r1, r3
 8000918:	2900      	cmp	r1, #0
 800091a:	d149      	bne.n	80009b0 <__udivmoddi4+0x158>
 800091c:	42ab      	cmp	r3, r5
 800091e:	d302      	bcc.n	8000926 <__udivmoddi4+0xce>
 8000920:	4282      	cmp	r2, r0
 8000922:	f200 80f8 	bhi.w	8000b16 <__udivmoddi4+0x2be>
 8000926:	1a84      	subs	r4, r0, r2
 8000928:	eb65 0203 	sbc.w	r2, r5, r3
 800092c:	2001      	movs	r0, #1
 800092e:	4617      	mov	r7, r2
 8000930:	2e00      	cmp	r6, #0
 8000932:	d0e2      	beq.n	80008fa <__udivmoddi4+0xa2>
 8000934:	e9c6 4700 	strd	r4, r7, [r6]
 8000938:	e7df      	b.n	80008fa <__udivmoddi4+0xa2>
 800093a:	b902      	cbnz	r2, 800093e <__udivmoddi4+0xe6>
 800093c:	deff      	udf	#255	; 0xff
 800093e:	fab2 f382 	clz	r3, r2
 8000942:	2b00      	cmp	r3, #0
 8000944:	f040 8090 	bne.w	8000a68 <__udivmoddi4+0x210>
 8000948:	1a8a      	subs	r2, r1, r2
 800094a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800094e:	fa1f fe8c 	uxth.w	lr, ip
 8000952:	2101      	movs	r1, #1
 8000954:	fbb2 f5f7 	udiv	r5, r2, r7
 8000958:	fb07 2015 	mls	r0, r7, r5, r2
 800095c:	0c22      	lsrs	r2, r4, #16
 800095e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000962:	fb0e f005 	mul.w	r0, lr, r5
 8000966:	4290      	cmp	r0, r2
 8000968:	d908      	bls.n	800097c <__udivmoddi4+0x124>
 800096a:	eb1c 0202 	adds.w	r2, ip, r2
 800096e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000972:	d202      	bcs.n	800097a <__udivmoddi4+0x122>
 8000974:	4290      	cmp	r0, r2
 8000976:	f200 80cb 	bhi.w	8000b10 <__udivmoddi4+0x2b8>
 800097a:	4645      	mov	r5, r8
 800097c:	1a12      	subs	r2, r2, r0
 800097e:	b2a4      	uxth	r4, r4
 8000980:	fbb2 f0f7 	udiv	r0, r2, r7
 8000984:	fb07 2210 	mls	r2, r7, r0, r2
 8000988:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800098c:	fb0e fe00 	mul.w	lr, lr, r0
 8000990:	45a6      	cmp	lr, r4
 8000992:	d908      	bls.n	80009a6 <__udivmoddi4+0x14e>
 8000994:	eb1c 0404 	adds.w	r4, ip, r4
 8000998:	f100 32ff 	add.w	r2, r0, #4294967295
 800099c:	d202      	bcs.n	80009a4 <__udivmoddi4+0x14c>
 800099e:	45a6      	cmp	lr, r4
 80009a0:	f200 80bb 	bhi.w	8000b1a <__udivmoddi4+0x2c2>
 80009a4:	4610      	mov	r0, r2
 80009a6:	eba4 040e 	sub.w	r4, r4, lr
 80009aa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80009ae:	e79f      	b.n	80008f0 <__udivmoddi4+0x98>
 80009b0:	f1c1 0720 	rsb	r7, r1, #32
 80009b4:	408b      	lsls	r3, r1
 80009b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80009ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80009be:	fa05 f401 	lsl.w	r4, r5, r1
 80009c2:	fa20 f307 	lsr.w	r3, r0, r7
 80009c6:	40fd      	lsrs	r5, r7
 80009c8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80009cc:	4323      	orrs	r3, r4
 80009ce:	fbb5 f8f9 	udiv	r8, r5, r9
 80009d2:	fa1f fe8c 	uxth.w	lr, ip
 80009d6:	fb09 5518 	mls	r5, r9, r8, r5
 80009da:	0c1c      	lsrs	r4, r3, #16
 80009dc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80009e0:	fb08 f50e 	mul.w	r5, r8, lr
 80009e4:	42a5      	cmp	r5, r4
 80009e6:	fa02 f201 	lsl.w	r2, r2, r1
 80009ea:	fa00 f001 	lsl.w	r0, r0, r1
 80009ee:	d90b      	bls.n	8000a08 <__udivmoddi4+0x1b0>
 80009f0:	eb1c 0404 	adds.w	r4, ip, r4
 80009f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80009f8:	f080 8088 	bcs.w	8000b0c <__udivmoddi4+0x2b4>
 80009fc:	42a5      	cmp	r5, r4
 80009fe:	f240 8085 	bls.w	8000b0c <__udivmoddi4+0x2b4>
 8000a02:	f1a8 0802 	sub.w	r8, r8, #2
 8000a06:	4464      	add	r4, ip
 8000a08:	1b64      	subs	r4, r4, r5
 8000a0a:	b29d      	uxth	r5, r3
 8000a0c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a10:	fb09 4413 	mls	r4, r9, r3, r4
 8000a14:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000a18:	fb03 fe0e 	mul.w	lr, r3, lr
 8000a1c:	45a6      	cmp	lr, r4
 8000a1e:	d908      	bls.n	8000a32 <__udivmoddi4+0x1da>
 8000a20:	eb1c 0404 	adds.w	r4, ip, r4
 8000a24:	f103 35ff 	add.w	r5, r3, #4294967295
 8000a28:	d26c      	bcs.n	8000b04 <__udivmoddi4+0x2ac>
 8000a2a:	45a6      	cmp	lr, r4
 8000a2c:	d96a      	bls.n	8000b04 <__udivmoddi4+0x2ac>
 8000a2e:	3b02      	subs	r3, #2
 8000a30:	4464      	add	r4, ip
 8000a32:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a36:	fba3 9502 	umull	r9, r5, r3, r2
 8000a3a:	eba4 040e 	sub.w	r4, r4, lr
 8000a3e:	42ac      	cmp	r4, r5
 8000a40:	46c8      	mov	r8, r9
 8000a42:	46ae      	mov	lr, r5
 8000a44:	d356      	bcc.n	8000af4 <__udivmoddi4+0x29c>
 8000a46:	d053      	beq.n	8000af0 <__udivmoddi4+0x298>
 8000a48:	b156      	cbz	r6, 8000a60 <__udivmoddi4+0x208>
 8000a4a:	ebb0 0208 	subs.w	r2, r0, r8
 8000a4e:	eb64 040e 	sbc.w	r4, r4, lr
 8000a52:	fa04 f707 	lsl.w	r7, r4, r7
 8000a56:	40ca      	lsrs	r2, r1
 8000a58:	40cc      	lsrs	r4, r1
 8000a5a:	4317      	orrs	r7, r2
 8000a5c:	e9c6 7400 	strd	r7, r4, [r6]
 8000a60:	4618      	mov	r0, r3
 8000a62:	2100      	movs	r1, #0
 8000a64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a68:	f1c3 0120 	rsb	r1, r3, #32
 8000a6c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a70:	fa20 f201 	lsr.w	r2, r0, r1
 8000a74:	fa25 f101 	lsr.w	r1, r5, r1
 8000a78:	409d      	lsls	r5, r3
 8000a7a:	432a      	orrs	r2, r5
 8000a7c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a80:	fa1f fe8c 	uxth.w	lr, ip
 8000a84:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a88:	fb07 1510 	mls	r5, r7, r0, r1
 8000a8c:	0c11      	lsrs	r1, r2, #16
 8000a8e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000a92:	fb00 f50e 	mul.w	r5, r0, lr
 8000a96:	428d      	cmp	r5, r1
 8000a98:	fa04 f403 	lsl.w	r4, r4, r3
 8000a9c:	d908      	bls.n	8000ab0 <__udivmoddi4+0x258>
 8000a9e:	eb1c 0101 	adds.w	r1, ip, r1
 8000aa2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000aa6:	d22f      	bcs.n	8000b08 <__udivmoddi4+0x2b0>
 8000aa8:	428d      	cmp	r5, r1
 8000aaa:	d92d      	bls.n	8000b08 <__udivmoddi4+0x2b0>
 8000aac:	3802      	subs	r0, #2
 8000aae:	4461      	add	r1, ip
 8000ab0:	1b49      	subs	r1, r1, r5
 8000ab2:	b292      	uxth	r2, r2
 8000ab4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ab8:	fb07 1115 	mls	r1, r7, r5, r1
 8000abc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ac0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ac4:	4291      	cmp	r1, r2
 8000ac6:	d908      	bls.n	8000ada <__udivmoddi4+0x282>
 8000ac8:	eb1c 0202 	adds.w	r2, ip, r2
 8000acc:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ad0:	d216      	bcs.n	8000b00 <__udivmoddi4+0x2a8>
 8000ad2:	4291      	cmp	r1, r2
 8000ad4:	d914      	bls.n	8000b00 <__udivmoddi4+0x2a8>
 8000ad6:	3d02      	subs	r5, #2
 8000ad8:	4462      	add	r2, ip
 8000ada:	1a52      	subs	r2, r2, r1
 8000adc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ae0:	e738      	b.n	8000954 <__udivmoddi4+0xfc>
 8000ae2:	4631      	mov	r1, r6
 8000ae4:	4630      	mov	r0, r6
 8000ae6:	e708      	b.n	80008fa <__udivmoddi4+0xa2>
 8000ae8:	4639      	mov	r1, r7
 8000aea:	e6e6      	b.n	80008ba <__udivmoddi4+0x62>
 8000aec:	4610      	mov	r0, r2
 8000aee:	e6fb      	b.n	80008e8 <__udivmoddi4+0x90>
 8000af0:	4548      	cmp	r0, r9
 8000af2:	d2a9      	bcs.n	8000a48 <__udivmoddi4+0x1f0>
 8000af4:	ebb9 0802 	subs.w	r8, r9, r2
 8000af8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000afc:	3b01      	subs	r3, #1
 8000afe:	e7a3      	b.n	8000a48 <__udivmoddi4+0x1f0>
 8000b00:	4645      	mov	r5, r8
 8000b02:	e7ea      	b.n	8000ada <__udivmoddi4+0x282>
 8000b04:	462b      	mov	r3, r5
 8000b06:	e794      	b.n	8000a32 <__udivmoddi4+0x1da>
 8000b08:	4640      	mov	r0, r8
 8000b0a:	e7d1      	b.n	8000ab0 <__udivmoddi4+0x258>
 8000b0c:	46d0      	mov	r8, sl
 8000b0e:	e77b      	b.n	8000a08 <__udivmoddi4+0x1b0>
 8000b10:	3d02      	subs	r5, #2
 8000b12:	4462      	add	r2, ip
 8000b14:	e732      	b.n	800097c <__udivmoddi4+0x124>
 8000b16:	4608      	mov	r0, r1
 8000b18:	e70a      	b.n	8000930 <__udivmoddi4+0xd8>
 8000b1a:	4464      	add	r4, ip
 8000b1c:	3802      	subs	r0, #2
 8000b1e:	e742      	b.n	80009a6 <__udivmoddi4+0x14e>

08000b20 <__aeabi_idiv0>:
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <Camera_WriteReg>:
	{1280, 960},  /* 960P      */
	{2592, 1944}, /* 5MP       */
};

int32_t Camera_WriteReg(Camera_HandleTypeDef *hov, uint8_t regAddr, const uint8_t *pData)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b088      	sub	sp, #32
 8000b28:	af02      	add	r7, sp, #8
 8000b2a:	60f8      	str	r0, [r7, #12]
 8000b2c:	460b      	mov	r3, r1
 8000b2e:	607a      	str	r2, [r7, #4]
 8000b30:	72fb      	strb	r3, [r7, #11]
	uint8_t tt[2];
	tt[0] = regAddr;
 8000b32:	7afb      	ldrb	r3, [r7, #11]
 8000b34:	753b      	strb	r3, [r7, #20]
	tt[1] = pData[0];
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	757b      	strb	r3, [r7, #21]
	if (HAL_I2C_Master_Transmit(hov->hi2c, hov->addr, tt, 2, hov->timeout) == HAL_OK)
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	6818      	ldr	r0, [r3, #0]
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	791b      	ldrb	r3, [r3, #4]
 8000b44:	b299      	uxth	r1, r3
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	689b      	ldr	r3, [r3, #8]
 8000b4a:	f107 0214 	add.w	r2, r7, #20
 8000b4e:	9300      	str	r3, [sp, #0]
 8000b50:	2302      	movs	r3, #2
 8000b52:	f018 ffe3 	bl	8019b1c <HAL_I2C_Master_Transmit>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d101      	bne.n	8000b60 <Camera_WriteReg+0x3c>
	{
		return Camera_OK;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	e000      	b.n	8000b62 <Camera_WriteReg+0x3e>
	}
	else
	{
		return camera_ERROR;
 8000b60:	2301      	movs	r3, #1
	}
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3718      	adds	r7, #24
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <Camera_ReadReg>:

int32_t Camera_ReadReg(Camera_HandleTypeDef *hov, uint8_t regAddr, uint8_t *pData)
{
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	b086      	sub	sp, #24
 8000b6e:	af02      	add	r7, sp, #8
 8000b70:	60f8      	str	r0, [r7, #12]
 8000b72:	460b      	mov	r3, r1
 8000b74:	607a      	str	r2, [r7, #4]
 8000b76:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(hov->hi2c, hov->addr + 1, &regAddr, 1, hov->timeout);
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	6818      	ldr	r0, [r3, #0]
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	791b      	ldrb	r3, [r3, #4]
 8000b80:	b29b      	uxth	r3, r3
 8000b82:	3301      	adds	r3, #1
 8000b84:	b299      	uxth	r1, r3
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	689b      	ldr	r3, [r3, #8]
 8000b8a:	f107 020b 	add.w	r2, r7, #11
 8000b8e:	9300      	str	r3, [sp, #0]
 8000b90:	2301      	movs	r3, #1
 8000b92:	f018 ffc3 	bl	8019b1c <HAL_I2C_Master_Transmit>
	if (HAL_I2C_Master_Receive(hov->hi2c, hov->addr + 1, pData, 1, hov->timeout) == HAL_OK)
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	6818      	ldr	r0, [r3, #0]
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	791b      	ldrb	r3, [r3, #4]
 8000b9e:	b29b      	uxth	r3, r3
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	b299      	uxth	r1, r3
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	689b      	ldr	r3, [r3, #8]
 8000ba8:	9300      	str	r3, [sp, #0]
 8000baa:	2301      	movs	r3, #1
 8000bac:	687a      	ldr	r2, [r7, #4]
 8000bae:	f019 f8a9 	bl	8019d04 <HAL_I2C_Master_Receive>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d101      	bne.n	8000bbc <Camera_ReadReg+0x52>
	{
		return Camera_OK;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	e000      	b.n	8000bbe <Camera_ReadReg+0x54>
	}
	else
	{
		return camera_ERROR;
 8000bbc:	2301      	movs	r3, #1
	}
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3710      	adds	r7, #16
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <Camera_ReadRegb2>:
		return camera_ERROR;
	}
}

int32_t Camera_ReadRegb2(Camera_HandleTypeDef *hov, uint16_t reg_addr, uint8_t *reg_data)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b088      	sub	sp, #32
 8000bca:	af04      	add	r7, sp, #16
 8000bcc:	60f8      	str	r0, [r7, #12]
 8000bce:	460b      	mov	r3, r1
 8000bd0:	607a      	str	r2, [r7, #4]
 8000bd2:	817b      	strh	r3, [r7, #10]
	if (HAL_I2C_Mem_Read(hov->hi2c, hov->addr + 1, reg_addr,
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	6818      	ldr	r0, [r3, #0]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	791b      	ldrb	r3, [r3, #4]
 8000bdc:	b29b      	uxth	r3, r3
 8000bde:	3301      	adds	r3, #1
 8000be0:	b299      	uxth	r1, r3
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	689b      	ldr	r3, [r3, #8]
 8000be6:	897a      	ldrh	r2, [r7, #10]
 8000be8:	9302      	str	r3, [sp, #8]
 8000bea:	2301      	movs	r3, #1
 8000bec:	9301      	str	r3, [sp, #4]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	9300      	str	r3, [sp, #0]
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	f019 f97c 	bl	8019ef0 <HAL_I2C_Mem_Read>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d101      	bne.n	8000c02 <Camera_ReadRegb2+0x3c>
						 I2C_MEMADD_SIZE_16BIT, reg_data, 1, hov->timeout) == HAL_OK)
	{
		return Camera_OK;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	e000      	b.n	8000c04 <Camera_ReadRegb2+0x3e>
	}
	else
	{
		return camera_ERROR;
 8000c02:	2301      	movs	r3, #1
	}
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	3710      	adds	r7, #16
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <Camera_read_id>:
	}
	return Camera_OK;
}

int32_t Camera_read_id(Camera_HandleTypeDef *hov)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
	uint8_t temp[2];
	temp[0] = 0x01;
 8000c14:	2301      	movs	r3, #1
 8000c16:	733b      	strb	r3, [r7, #12]
	if (hov->addr != OV5640_ADDRESS)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	791b      	ldrb	r3, [r3, #4]
 8000c1c:	2b78      	cmp	r3, #120	; 0x78
 8000c1e:	d02f      	beq.n	8000c80 <Camera_read_id+0x74>
	{
		Camera_WriteReg(hov, 0xFF, temp);
 8000c20:	f107 030c 	add.w	r3, r7, #12
 8000c24:	461a      	mov	r2, r3
 8000c26:	21ff      	movs	r1, #255	; 0xff
 8000c28:	6878      	ldr	r0, [r7, #4]
 8000c2a:	f7ff ff7b 	bl	8000b24 <Camera_WriteReg>
		Camera_ReadReg(hov, 0x1C, &temp[0]);
 8000c2e:	f107 030c 	add.w	r3, r7, #12
 8000c32:	461a      	mov	r2, r3
 8000c34:	211c      	movs	r1, #28
 8000c36:	6878      	ldr	r0, [r7, #4]
 8000c38:	f7ff ff97 	bl	8000b6a <Camera_ReadReg>
		Camera_ReadReg(hov, 0x1D, &temp[1]);
 8000c3c:	f107 030c 	add.w	r3, r7, #12
 8000c40:	3301      	adds	r3, #1
 8000c42:	461a      	mov	r2, r3
 8000c44:	211d      	movs	r1, #29
 8000c46:	6878      	ldr	r0, [r7, #4]
 8000c48:	f7ff ff8f 	bl	8000b6a <Camera_ReadReg>
		hov->manuf_id = ((uint16_t)temp[0] << 8) | temp[1];
 8000c4c:	7b3b      	ldrb	r3, [r7, #12]
 8000c4e:	021b      	lsls	r3, r3, #8
 8000c50:	b21a      	sxth	r2, r3
 8000c52:	7b7b      	ldrb	r3, [r7, #13]
 8000c54:	b21b      	sxth	r3, r3
 8000c56:	4313      	orrs	r3, r2
 8000c58:	b21b      	sxth	r3, r3
 8000c5a:	b29a      	uxth	r2, r3
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	819a      	strh	r2, [r3, #12]
		Camera_ReadReg(hov, 0x0A, &temp[0]);
 8000c60:	f107 030c 	add.w	r3, r7, #12
 8000c64:	461a      	mov	r2, r3
 8000c66:	210a      	movs	r1, #10
 8000c68:	6878      	ldr	r0, [r7, #4]
 8000c6a:	f7ff ff7e 	bl	8000b6a <Camera_ReadReg>
		Camera_ReadReg(hov, 0x0B, &temp[1]);
 8000c6e:	f107 030c 	add.w	r3, r7, #12
 8000c72:	3301      	adds	r3, #1
 8000c74:	461a      	mov	r2, r3
 8000c76:	210b      	movs	r1, #11
 8000c78:	6878      	ldr	r0, [r7, #4]
 8000c7a:	f7ff ff76 	bl	8000b6a <Camera_ReadReg>
 8000c7e:	e013      	b.n	8000ca8 <Camera_read_id+0x9c>
	}
	else
	{
#define OV5640_CHIP_IDH 0x300A
#define OV5640_CHIP_IDL 0x300B
		Camera_ReadRegb2(&hcamera, OV5640_CHIP_IDH, &temp[0]);
 8000c80:	f107 030c 	add.w	r3, r7, #12
 8000c84:	461a      	mov	r2, r3
 8000c86:	f243 010a 	movw	r1, #12298	; 0x300a
 8000c8a:	480f      	ldr	r0, [pc, #60]	; (8000cc8 <Camera_read_id+0xbc>)
 8000c8c:	f7ff ff9b 	bl	8000bc6 <Camera_ReadRegb2>
		Camera_ReadRegb2(&hcamera, OV5640_CHIP_IDL, &temp[1]);
 8000c90:	f107 030c 	add.w	r3, r7, #12
 8000c94:	3301      	adds	r3, #1
 8000c96:	461a      	mov	r2, r3
 8000c98:	f243 010b 	movw	r1, #12299	; 0x300b
 8000c9c:	480a      	ldr	r0, [pc, #40]	; (8000cc8 <Camera_read_id+0xbc>)
 8000c9e:	f7ff ff92 	bl	8000bc6 <Camera_ReadRegb2>
		hov->manuf_id = 0;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	819a      	strh	r2, [r3, #12]
	}
	hov->device_id = ((uint16_t)temp[0] << 8) | temp[1];
 8000ca8:	7b3b      	ldrb	r3, [r7, #12]
 8000caa:	021b      	lsls	r3, r3, #8
 8000cac:	b21a      	sxth	r2, r3
 8000cae:	7b7b      	ldrb	r3, [r7, #13]
 8000cb0:	b21b      	sxth	r3, r3
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	b21b      	sxth	r3, r3
 8000cb6:	b29a      	uxth	r2, r3
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	81da      	strh	r2, [r3, #14]
	return 0;
 8000cbc:	2300      	movs	r3, #0
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3710      	adds	r7, #16
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	2400009c 	.word	0x2400009c

08000ccc <DCMI_OV2640_Init>:
// fanke

    {0,    0},	// 结束
};

int8_t DCMI_OV2640_Init(I2C_HandleTypeDef *hi2c, uint16_t width, uint16_t height) {
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
 8000cd4:	460b      	mov	r3, r1
 8000cd6:	807b      	strh	r3, [r7, #2]
 8000cd8:	4613      	mov	r3, r2
 8000cda:	803b      	strh	r3, [r7, #0]
    hcamera.hi2c = hi2c;
 8000cdc:	4a15      	ldr	r2, [pc, #84]	; (8000d34 <DCMI_OV2640_Init+0x68>)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6013      	str	r3, [r2, #0]
    hcamera.timeout = 100;
 8000ce2:	4b14      	ldr	r3, [pc, #80]	; (8000d34 <DCMI_OV2640_Init+0x68>)
 8000ce4:	2264      	movs	r2, #100	; 0x64
 8000ce6:	609a      	str	r2, [r3, #8]

    hcamera.addr = OV2640_ADDRESS;
 8000ce8:	4b12      	ldr	r3, [pc, #72]	; (8000d34 <DCMI_OV2640_Init+0x68>)
 8000cea:	2260      	movs	r2, #96	; 0x60
 8000cec:	711a      	strb	r2, [r3, #4]
    Camera_read_id(&hcamera);
 8000cee:	4811      	ldr	r0, [pc, #68]	; (8000d34 <DCMI_OV2640_Init+0x68>)
 8000cf0:	f7ff ff8c 	bl	8000c0c <Camera_read_id>
    if (hcamera.manuf_id == 0x7fa2 && ((hcamera.device_id - 0x2641) <= 2)) {
 8000cf4:	4b0f      	ldr	r3, [pc, #60]	; (8000d34 <DCMI_OV2640_Init+0x68>)
 8000cf6:	899b      	ldrh	r3, [r3, #12]
 8000cf8:	f647 72a2 	movw	r2, #32674	; 0x7fa2
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d113      	bne.n	8000d28 <DCMI_OV2640_Init+0x5c>
 8000d00:	4b0c      	ldr	r3, [pc, #48]	; (8000d34 <DCMI_OV2640_Init+0x68>)
 8000d02:	89db      	ldrh	r3, [r3, #14]
 8000d04:	f242 6243 	movw	r2, #9795	; 0x2643
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d80d      	bhi.n	8000d28 <DCMI_OV2640_Init+0x5c>
        print("init 0v2640 fanke wawy.");
 8000d0c:	480a      	ldr	r0, [pc, #40]	; (8000d38 <DCMI_OV2640_Init+0x6c>)
 8000d0e:	f000 f89d 	bl	8000e4c <print>

        OV2640_Config( OV2640_SVGA_Config );             		// 配置 SVGA模式  ------>  800*600，  最大帧率30帧
 8000d12:	480a      	ldr	r0, [pc, #40]	; (8000d3c <DCMI_OV2640_Init+0x70>)
 8000d14:	f000 f82a 	bl	8000d6c <OV2640_Config>
//		OV2640_Config( OV2640_UXGA_Config );                  // 配置 UXGA模式  ------>  1600*1200，最大帧率15帧

        OV2640_Set_Framesize(width, height);		// 设置OV2640输出的图像大小
 8000d18:	883a      	ldrh	r2, [r7, #0]
 8000d1a:	887b      	ldrh	r3, [r7, #2]
 8000d1c:	4611      	mov	r1, r2
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f000 f847 	bl	8000db2 <OV2640_Set_Framesize>
        return 1;	 // 返回成功标志
 8000d24:	2301      	movs	r3, #1
 8000d26:	e001      	b.n	8000d2c <DCMI_OV2640_Init+0x60>
    }
    return -1;
 8000d28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3708      	adds	r7, #8
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	2400009c 	.word	0x2400009c
 8000d38:	08020ecc 	.word	0x08020ecc
 8000d3c:	08027f7c 	.word	0x08027f7c

08000d40 <OV2640_WR_Reg>:
    {0x00, 0x80, 0x80}, // Normal
};

//-----------------------------------------------------
static uint8_t OV2640_WR_Reg(uint8_t reg, uint8_t data)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	460a      	mov	r2, r1
 8000d4a:	71fb      	strb	r3, [r7, #7]
 8000d4c:	4613      	mov	r3, r2
 8000d4e:	71bb      	strb	r3, [r7, #6]
    Camera_WriteReg(&hcamera, reg, &data);
 8000d50:	1dba      	adds	r2, r7, #6
 8000d52:	79fb      	ldrb	r3, [r7, #7]
 8000d54:	4619      	mov	r1, r3
 8000d56:	4804      	ldr	r0, [pc, #16]	; (8000d68 <OV2640_WR_Reg+0x28>)
 8000d58:	f7ff fee4 	bl	8000b24 <Camera_WriteReg>
    return 0;
 8000d5c:	2300      	movs	r3, #0
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	2400009c 	.word	0x2400009c

08000d6c <OV2640_Config>:
	set_vflip(0);
  return 0;
}

// ------ copy from fanke
void OV2640_Config(const uint8_t (*ConfigData)[2]) {
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
    uint32_t i; // 计数变量

    for( i=0; ConfigData[i][0] ; i++) {
 8000d74:	2300      	movs	r3, #0
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	e00f      	b.n	8000d9a <OV2640_Config+0x2e>
        OV2640_WR_Reg( ConfigData[i][0], ConfigData[i][1]);  // 进行参数配置
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	687a      	ldr	r2, [r7, #4]
 8000d80:	4413      	add	r3, r2
 8000d82:	7818      	ldrb	r0, [r3, #0]
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	005b      	lsls	r3, r3, #1
 8000d88:	687a      	ldr	r2, [r7, #4]
 8000d8a:	4413      	add	r3, r2
 8000d8c:	785b      	ldrb	r3, [r3, #1]
 8000d8e:	4619      	mov	r1, r3
 8000d90:	f7ff ffd6 	bl	8000d40 <OV2640_WR_Reg>
    for( i=0; ConfigData[i][0] ; i++) {
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	3301      	adds	r3, #1
 8000d98:	60fb      	str	r3, [r7, #12]
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	005b      	lsls	r3, r3, #1
 8000d9e:	687a      	ldr	r2, [r7, #4]
 8000da0:	4413      	add	r3, r2
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d1e8      	bne.n	8000d7a <OV2640_Config+0xe>
    }
}
 8000da8:	bf00      	nop
 8000daa:	bf00      	nop
 8000dac:	3710      	adds	r7, #16
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <OV2640_Set_Framesize>:
#define 	OV2640_DSP_RESET           0xE0	// 可选择复位 控制器、SCCB单元、JPEG单元、DVP接口单元等
#define 	OV2640_DSP_BPADDR          0x7C	// 间接寄存器访问:地址
#define 	OV2640_DSP_BPDATA          0x7D	// 间接寄存器访问:数据


int8_t OV2640_Set_Framesize(uint16_t width,uint16_t height) {
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b082      	sub	sp, #8
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	4603      	mov	r3, r0
 8000dba:	460a      	mov	r2, r1
 8000dbc:	80fb      	strh	r3, [r7, #6]
 8000dbe:	4613      	mov	r3, r2
 8000dc0:	80bb      	strh	r3, [r7, #4]
    if( (width%4)||(height%4) )   // 输出图像的大小一定要能被4整除
 8000dc2:	88fb      	ldrh	r3, [r7, #6]
 8000dc4:	f003 0303 	and.w	r3, r3, #3
 8000dc8:	b29b      	uxth	r3, r3
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d105      	bne.n	8000dda <OV2640_Set_Framesize+0x28>
 8000dce:	88bb      	ldrh	r3, [r7, #4]
 8000dd0:	f003 0303 	and.w	r3, r3, #3
 8000dd4:	b29b      	uxth	r3, r3
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d002      	beq.n	8000de0 <OV2640_Set_Framesize+0x2e>
    {
        return -1;  // 返回错误标志
 8000dda:	f04f 33ff 	mov.w	r3, #4294967295
 8000dde:	e031      	b.n	8000e44 <OV2640_Set_Framesize+0x92>
    }

    OV2640_WR_Reg(OV2640_SEL_Registers,OV2640_SEL_DSP);	// 选择 DSP寄存器组
 8000de0:	2100      	movs	r1, #0
 8000de2:	20ff      	movs	r0, #255	; 0xff
 8000de4:	f7ff ffac 	bl	8000d40 <OV2640_WR_Reg>

    OV2640_WR_Reg(0X5A, width/4  &0XFF);		// 实际图像输出的宽度（OUTW），7~0 bit，寄存器的值等于实际值/4
 8000de8:	88fb      	ldrh	r3, [r7, #6]
 8000dea:	089b      	lsrs	r3, r3, #2
 8000dec:	b29b      	uxth	r3, r3
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	4619      	mov	r1, r3
 8000df2:	205a      	movs	r0, #90	; 0x5a
 8000df4:	f7ff ffa4 	bl	8000d40 <OV2640_WR_Reg>
    OV2640_WR_Reg(0X5B, height/4 &0XFF);		// 实际图像输出的高度（OUTH），7~0 bit，寄存器的值等于实际值/4
 8000df8:	88bb      	ldrh	r3, [r7, #4]
 8000dfa:	089b      	lsrs	r3, r3, #2
 8000dfc:	b29b      	uxth	r3, r3
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	4619      	mov	r1, r3
 8000e02:	205b      	movs	r0, #91	; 0x5b
 8000e04:	f7ff ff9c 	bl	8000d40 <OV2640_WR_Reg>
    OV2640_WR_Reg(0X5C, (width/4>>8&0X03)|(height/4>>6&0x04) );	 // 设置ZMHH的Bit[2:0]，也就是OUTH 的第 8 bit，OUTW 的第 9~8 bit，
 8000e08:	88fb      	ldrh	r3, [r7, #6]
 8000e0a:	089b      	lsrs	r3, r3, #2
 8000e0c:	b29b      	uxth	r3, r3
 8000e0e:	0a1b      	lsrs	r3, r3, #8
 8000e10:	b29b      	uxth	r3, r3
 8000e12:	b25b      	sxtb	r3, r3
 8000e14:	f003 0303 	and.w	r3, r3, #3
 8000e18:	b25a      	sxtb	r2, r3
 8000e1a:	88bb      	ldrh	r3, [r7, #4]
 8000e1c:	089b      	lsrs	r3, r3, #2
 8000e1e:	b29b      	uxth	r3, r3
 8000e20:	099b      	lsrs	r3, r3, #6
 8000e22:	b29b      	uxth	r3, r3
 8000e24:	b25b      	sxtb	r3, r3
 8000e26:	f003 0304 	and.w	r3, r3, #4
 8000e2a:	b25b      	sxtb	r3, r3
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	b25b      	sxtb	r3, r3
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	4619      	mov	r1, r3
 8000e34:	205c      	movs	r0, #92	; 0x5c
 8000e36:	f7ff ff83 	bl	8000d40 <OV2640_WR_Reg>

    OV2640_WR_Reg(OV2640_DSP_RESET,0X00);	   // 复位
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	20e0      	movs	r0, #224	; 0xe0
 8000e3e:	f7ff ff7f 	bl	8000d40 <OV2640_WR_Reg>

    return 0;  // 成功
 8000e42:	2300      	movs	r3, #0
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	3708      	adds	r7, #8
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <print>:

uint8_t CL_formatBuff[CL_FORMAT_BUFF_LEN];
uint8_t CL_printBuff[CL_PRINT_BUFF_LEN];
extern UART_HandleTypeDef huart1;

void print(const char *format,...) {
 8000e4c:	b40f      	push	{r0, r1, r2, r3}
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b082      	sub	sp, #8
 8000e52:	af00      	add	r7, sp, #0
	uint16_t length;
	va_list args;

	uint16_t i;
	for(i = 0; i < CL_FORMAT_BUFF_LEN - 1; i++){
 8000e54:	2300      	movs	r3, #0
 8000e56:	80fb      	strh	r3, [r7, #6]
 8000e58:	e00f      	b.n	8000e7a <print+0x2e>
		if(*(format + i) == '\0') {
 8000e5a:	88fb      	ldrh	r3, [r7, #6]
 8000e5c:	693a      	ldr	r2, [r7, #16]
 8000e5e:	4413      	add	r3, r2
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d00e      	beq.n	8000e84 <print+0x38>
			break;
		}
		CL_formatBuff[i] = *(format + i);
 8000e66:	88fb      	ldrh	r3, [r7, #6]
 8000e68:	693a      	ldr	r2, [r7, #16]
 8000e6a:	441a      	add	r2, r3
 8000e6c:	88fb      	ldrh	r3, [r7, #6]
 8000e6e:	7811      	ldrb	r1, [r2, #0]
 8000e70:	4a17      	ldr	r2, [pc, #92]	; (8000ed0 <print+0x84>)
 8000e72:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < CL_FORMAT_BUFF_LEN - 1; i++){
 8000e74:	88fb      	ldrh	r3, [r7, #6]
 8000e76:	3301      	adds	r3, #1
 8000e78:	80fb      	strh	r3, [r7, #6]
 8000e7a:	88fb      	ldrh	r3, [r7, #6]
 8000e7c:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8000e80:	d9eb      	bls.n	8000e5a <print+0xe>
 8000e82:	e000      	b.n	8000e86 <print+0x3a>
			break;
 8000e84:	bf00      	nop
	}
	CL_formatBuff[i++] = '\n';
 8000e86:	88fb      	ldrh	r3, [r7, #6]
 8000e88:	1c5a      	adds	r2, r3, #1
 8000e8a:	80fa      	strh	r2, [r7, #6]
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	4b10      	ldr	r3, [pc, #64]	; (8000ed0 <print+0x84>)
 8000e90:	210a      	movs	r1, #10
 8000e92:	5499      	strb	r1, [r3, r2]
	CL_formatBuff[i] = '\0';
 8000e94:	88fb      	ldrh	r3, [r7, #6]
 8000e96:	4a0e      	ldr	r2, [pc, #56]	; (8000ed0 <print+0x84>)
 8000e98:	2100      	movs	r1, #0
 8000e9a:	54d1      	strb	r1, [r2, r3]

	va_start(args, format);
 8000e9c:	f107 0314 	add.w	r3, r7, #20
 8000ea0:	603b      	str	r3, [r7, #0]
	length = vsnprintf((char*)CL_printBuff, sizeof(CL_printBuff)+1, (char*)CL_formatBuff, args);
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	4a0a      	ldr	r2, [pc, #40]	; (8000ed0 <print+0x84>)
 8000ea6:	f240 4101 	movw	r1, #1025	; 0x401
 8000eaa:	480a      	ldr	r0, [pc, #40]	; (8000ed4 <print+0x88>)
 8000eac:	f01f fae0 	bl	8020470 <vsniprintf>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	80bb      	strh	r3, [r7, #4]
	va_end(args);
	HAL_UART_Transmit(&huart1, CL_printBuff, length, 0xFFFF);
 8000eb4:	88ba      	ldrh	r2, [r7, #4]
 8000eb6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000eba:	4906      	ldr	r1, [pc, #24]	; (8000ed4 <print+0x88>)
 8000ebc:	4806      	ldr	r0, [pc, #24]	; (8000ed8 <print+0x8c>)
 8000ebe:	f01d fb16 	bl	801e4ee <HAL_UART_Transmit>
}
 8000ec2:	bf00      	nop
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ecc:	b004      	add	sp, #16
 8000ece:	4770      	bx	lr
 8000ed0:	240000b0 	.word	0x240000b0
 8000ed4:	240002b0 	.word	0x240002b0
 8000ed8:	2404ef4c 	.word	0x2404ef4c

08000edc <setLed>:


extern I2C_HandleTypeDef hi2c2;
extern DCMI_HandleTypeDef hdcmi;

void setLed(int8_t state) {
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, state ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	bf14      	ite	ne
 8000eee:	2301      	movne	r3, #1
 8000ef0:	2300      	moveq	r3, #0
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000efa:	4803      	ldr	r0, [pc, #12]	; (8000f08 <setLed+0x2c>)
 8000efc:	f018 fd4a 	bl	8019994 <HAL_GPIO_WritePin>
}
 8000f00:	bf00      	nop
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	58020c00 	.word	0x58020c00

08000f0c <HAL_SPI_TxCpltCallback>:
void toggleLed(){
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
}

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
	// SPI 传输完成中断，触发 LCD 传输完成回调
	LCD_SPI_TxCallback(hspi);
 8000f14:	6878      	ldr	r0, [r7, #4]
 8000f16:	f000 fae9 	bl	80014ec <LCD_SPI_TxCallback>
}
 8000f1a:	bf00      	nop
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
	...

08000f24 <HAL_GPIO_EXTI_Callback>:

int8_t lcdFps = 0;
int8_t keyMode = 0;
uint32_t lastPress = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	80fb      	strh	r3, [r7, #6]
	// TE 信号中断，触发帧传输 LCD 传输完成回调
	static uint32_t count = 0, tick = 0;

    if (GPIO_Pin == GPIO_PIN_4) {
 8000f2e:	88fb      	ldrh	r3, [r7, #6]
 8000f30:	2b10      	cmp	r3, #16
 8000f32:	d116      	bne.n	8000f62 <HAL_GPIO_EXTI_Callback+0x3e>
        if ((HAL_GetTick() - lastPress) < 15) {
 8000f34:	f014 ffcc 	bl	8015ed0 <HAL_GetTick>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	4b1d      	ldr	r3, [pc, #116]	; (8000fb0 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	1ad3      	subs	r3, r2, r3
 8000f40:	2b0e      	cmp	r3, #14
 8000f42:	d904      	bls.n	8000f4e <HAL_GPIO_EXTI_Callback+0x2a>
        	// do nothing
        } else {
        	lastPress = HAL_GetTick();
 8000f44:	f014 ffc4 	bl	8015ed0 <HAL_GetTick>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	4a19      	ldr	r2, [pc, #100]	; (8000fb0 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000f4c:	6013      	str	r3, [r2, #0]
        }
    	keyMode += 1;
 8000f4e:	4b19      	ldr	r3, [pc, #100]	; (8000fb4 <HAL_GPIO_EXTI_Callback+0x90>)
 8000f50:	f993 3000 	ldrsb.w	r3, [r3]
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	3301      	adds	r3, #1
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	b25a      	sxtb	r2, r3
 8000f5c:	4b15      	ldr	r3, [pc, #84]	; (8000fb4 <HAL_GPIO_EXTI_Callback+0x90>)
 8000f5e:	701a      	strb	r2, [r3, #0]
			tick = HAL_GetTick();
			lcdFps = count;
			count = 0;
		}
    }
}
 8000f60:	e022      	b.n	8000fa8 <HAL_GPIO_EXTI_Callback+0x84>
    } else if (GPIO_Pin == GPIO_PIN_6) {
 8000f62:	88fb      	ldrh	r3, [r7, #6]
 8000f64:	2b40      	cmp	r3, #64	; 0x40
 8000f66:	d11f      	bne.n	8000fa8 <HAL_GPIO_EXTI_Callback+0x84>
    	if(LCD_OnTE() == 0){
 8000f68:	f000 fa9c 	bl	80014a4 <LCD_OnTE>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d104      	bne.n	8000f7c <HAL_GPIO_EXTI_Callback+0x58>
    		count ++;
 8000f72:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <HAL_GPIO_EXTI_Callback+0x94>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	3301      	adds	r3, #1
 8000f78:	4a0f      	ldr	r2, [pc, #60]	; (8000fb8 <HAL_GPIO_EXTI_Callback+0x94>)
 8000f7a:	6013      	str	r3, [r2, #0]
    	if(HAL_GetTick() - tick >= 1000) {
 8000f7c:	f014 ffa8 	bl	8015ed0 <HAL_GetTick>
 8000f80:	4602      	mov	r2, r0
 8000f82:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <HAL_GPIO_EXTI_Callback+0x98>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	1ad3      	subs	r3, r2, r3
 8000f88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f8c:	d30c      	bcc.n	8000fa8 <HAL_GPIO_EXTI_Callback+0x84>
			tick = HAL_GetTick();
 8000f8e:	f014 ff9f 	bl	8015ed0 <HAL_GetTick>
 8000f92:	4603      	mov	r3, r0
 8000f94:	4a09      	ldr	r2, [pc, #36]	; (8000fbc <HAL_GPIO_EXTI_Callback+0x98>)
 8000f96:	6013      	str	r3, [r2, #0]
			lcdFps = count;
 8000f98:	4b07      	ldr	r3, [pc, #28]	; (8000fb8 <HAL_GPIO_EXTI_Callback+0x94>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	b25a      	sxtb	r2, r3
 8000f9e:	4b08      	ldr	r3, [pc, #32]	; (8000fc0 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000fa0:	701a      	strb	r2, [r3, #0]
			count = 0;
 8000fa2:	4b05      	ldr	r3, [pc, #20]	; (8000fb8 <HAL_GPIO_EXTI_Callback+0x94>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
}
 8000fa8:	bf00      	nop
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	240006b4 	.word	0x240006b4
 8000fb4:	240006b1 	.word	0x240006b1
 8000fb8:	240066c4 	.word	0x240066c4
 8000fbc:	240066c8 	.word	0x240066c8
 8000fc0:	240006b0 	.word	0x240006b0

08000fc4 <HAL_DCMI_FrameEventCallback>:

uint16_t camBuff[CAM_WIDTH][CAM_HEIGHT];
int8_t camBuffUpdated = 0;
uint32_t Camera_FPS = 0;

void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi) {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
	static uint32_t count = 0, tick = 0;
	camBuffUpdated = 1;
 8000fcc:	4b10      	ldr	r3, [pc, #64]	; (8001010 <HAL_DCMI_FrameEventCallback+0x4c>)
 8000fce:	2201      	movs	r2, #1
 8000fd0:	701a      	strb	r2, [r3, #0]

	if(HAL_GetTick() - tick >= 1000) {
 8000fd2:	f014 ff7d 	bl	8015ed0 <HAL_GetTick>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	4b0e      	ldr	r3, [pc, #56]	; (8001014 <HAL_DCMI_FrameEventCallback+0x50>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000fe2:	d30b      	bcc.n	8000ffc <HAL_DCMI_FrameEventCallback+0x38>
		tick = HAL_GetTick();
 8000fe4:	f014 ff74 	bl	8015ed0 <HAL_GetTick>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	4a0a      	ldr	r2, [pc, #40]	; (8001014 <HAL_DCMI_FrameEventCallback+0x50>)
 8000fec:	6013      	str	r3, [r2, #0]
		Camera_FPS = count;
 8000fee:	4b0a      	ldr	r3, [pc, #40]	; (8001018 <HAL_DCMI_FrameEventCallback+0x54>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a0a      	ldr	r2, [pc, #40]	; (800101c <HAL_DCMI_FrameEventCallback+0x58>)
 8000ff4:	6013      	str	r3, [r2, #0]
		count = 0;
 8000ff6:	4b08      	ldr	r3, [pc, #32]	; (8001018 <HAL_DCMI_FrameEventCallback+0x54>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
	}
	count ++;
 8000ffc:	4b06      	ldr	r3, [pc, #24]	; (8001018 <HAL_DCMI_FrameEventCallback+0x54>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	3301      	adds	r3, #1
 8001002:	4a05      	ldr	r2, [pc, #20]	; (8001018 <HAL_DCMI_FrameEventCallback+0x54>)
 8001004:	6013      	str	r3, [r2, #0]
}
 8001006:	bf00      	nop
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	240066b8 	.word	0x240066b8
 8001014:	240066cc 	.word	0x240066cc
 8001018:	240066d0 	.word	0x240066d0
 800101c:	240066bc 	.word	0x240066bc

08001020 <renderSineWave>:

uint16_t *distAddr;

void renderSineWave() {
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
	// 初始化模型
	LoadFloatModel();
 8001026:	f000 fd3d 	bl	8001aa4 <LoadFloatModel>
	print("model loaded.");
 800102a:	4837      	ldr	r0, [pc, #220]	; (8001108 <renderSineWave+0xe8>)
 800102c:	f7ff ff0e 	bl	8000e4c <print>

	while (1) {
		LCD_ResetGram(0x91F1);
 8001030:	f249 10f1 	movw	r0, #37361	; 0x91f1
 8001034:	f000 fa88 	bl	8001548 <LCD_ResetGram>
		HAL_Delay(100);
 8001038:	2064      	movs	r0, #100	; 0x64
 800103a:	f014 ff55 	bl	8015ee8 <HAL_Delay>

		for (uint16_t x = 0; x < 240; x++) {
 800103e:	2300      	movs	r3, #0
 8001040:	81fb      	strh	r3, [r7, #14]
 8001042:	e048      	b.n	80010d6 <renderSineWave+0xb6>
			float_t input = (float)x / 240 * 2*3.14;
 8001044:	89fb      	ldrh	r3, [r7, #14]
 8001046:	ee07 3a90 	vmov	s15, r3
 800104a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800104e:	eddf 6a2f 	vldr	s13, [pc, #188]	; 800110c <renderSineWave+0xec>
 8001052:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001056:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800105a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800105e:	ed9f 6b22 	vldr	d6, [pc, #136]	; 80010e8 <renderSineWave+0xc8>
 8001062:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001066:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800106a:	edc7 7a02 	vstr	s15, [r7, #8]
			float_t pred = Invoke(input);
 800106e:	ed97 0a02 	vldr	s0, [r7, #8]
 8001072:	f000 fdbf 	bl	8001bf4 <Invoke>
 8001076:	ed87 0a01 	vstr	s0, [r7, #4]
			uint16_t y = (pred + 1.1) * 320 / 2.2;
 800107a:	edd7 7a01 	vldr	s15, [r7, #4]
 800107e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001082:	ed9f 6b1b 	vldr	d6, [pc, #108]	; 80010f0 <renderSineWave+0xd0>
 8001086:	ee37 7b06 	vadd.f64	d7, d7, d6
 800108a:	ed9f 6b1b 	vldr	d6, [pc, #108]	; 80010f8 <renderSineWave+0xd8>
 800108e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001092:	ed9f 5b1b 	vldr	d5, [pc, #108]	; 8001100 <renderSineWave+0xe0>
 8001096:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800109a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800109e:	ee17 3a90 	vmov	r3, s15
 80010a2:	807b      	strh	r3, [r7, #2]

			distAddr = LCD_GetBackGRAMAddr();
 80010a4:	f000 fa46 	bl	8001534 <LCD_GetBackGRAMAddr>
 80010a8:	4603      	mov	r3, r0
 80010aa:	4a19      	ldr	r2, [pc, #100]	; (8001110 <renderSineWave+0xf0>)
 80010ac:	6013      	str	r3, [r2, #0]
			*(distAddr + x + 240*y) = 0xFFFF;
 80010ae:	4b18      	ldr	r3, [pc, #96]	; (8001110 <renderSineWave+0xf0>)
 80010b0:	6819      	ldr	r1, [r3, #0]
 80010b2:	89f8      	ldrh	r0, [r7, #14]
 80010b4:	887a      	ldrh	r2, [r7, #2]
 80010b6:	4613      	mov	r3, r2
 80010b8:	011b      	lsls	r3, r3, #4
 80010ba:	1a9b      	subs	r3, r3, r2
 80010bc:	011b      	lsls	r3, r3, #4
 80010be:	4403      	add	r3, r0
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	440b      	add	r3, r1
 80010c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010c8:	801a      	strh	r2, [r3, #0]
			HAL_Delay(5);
 80010ca:	2005      	movs	r0, #5
 80010cc:	f014 ff0c 	bl	8015ee8 <HAL_Delay>
		for (uint16_t x = 0; x < 240; x++) {
 80010d0:	89fb      	ldrh	r3, [r7, #14]
 80010d2:	3301      	adds	r3, #1
 80010d4:	81fb      	strh	r3, [r7, #14]
 80010d6:	89fb      	ldrh	r3, [r7, #14]
 80010d8:	2bef      	cmp	r3, #239	; 0xef
 80010da:	d9b3      	bls.n	8001044 <renderSineWave+0x24>
		}
		HAL_Delay(700);
 80010dc:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80010e0:	f014 ff02 	bl	8015ee8 <HAL_Delay>
	while (1) {
 80010e4:	e7a4      	b.n	8001030 <renderSineWave+0x10>
 80010e6:	bf00      	nop
 80010e8:	51eb851f 	.word	0x51eb851f
 80010ec:	40091eb8 	.word	0x40091eb8
 80010f0:	9999999a 	.word	0x9999999a
 80010f4:	3ff19999 	.word	0x3ff19999
 80010f8:	00000000 	.word	0x00000000
 80010fc:	40740000 	.word	0x40740000
 8001100:	9999999a 	.word	0x9999999a
 8001104:	40019999 	.word	0x40019999
 8001108:	08020ee4 	.word	0x08020ee4
 800110c:	43700000 	.word	0x43700000
 8001110:	240066c0 	.word	0x240066c0

08001114 <renderCamera>:
	}
}

__attribute__((section(".ram_d2"))) uint8_t grayData[96][96];

void renderCamera() {
 8001114:	b580      	push	{r7, lr}
 8001116:	b08a      	sub	sp, #40	; 0x28
 8001118:	af00      	add	r7, sp, #0
	setup();
 800111a:	f001 f88f 	bl	800223c <setup>
	print("person_detection inited.");
 800111e:	48af      	ldr	r0, [pc, #700]	; (80013dc <renderCamera+0x2c8>)
 8001120:	f7ff fe94 	bl	8000e4c <print>

	// InvokePersonDetection();
	// OPEN POWER DN (Down n) for camera
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001124:	2200      	movs	r2, #0
 8001126:	2101      	movs	r1, #1
 8001128:	48ad      	ldr	r0, [pc, #692]	; (80013e0 <renderCamera+0x2cc>)
 800112a:	f018 fc33 	bl	8019994 <HAL_GPIO_WritePin>
    DCMI_OV2640_Init(&hi2c2, CAM_WIDTH, CAM_HEIGHT);
 800112e:	2260      	movs	r2, #96	; 0x60
 8001130:	2180      	movs	r1, #128	; 0x80
 8001132:	48ac      	ldr	r0, [pc, #688]	; (80013e4 <renderCamera+0x2d0>)
 8001134:	f7ff fdca 	bl	8000ccc <DCMI_OV2640_Init>
	print("camera init finished. hcamera.manuf_id: %x", hcamera.manuf_id);
 8001138:	4bab      	ldr	r3, [pc, #684]	; (80013e8 <renderCamera+0x2d4>)
 800113a:	899b      	ldrh	r3, [r3, #12]
 800113c:	4619      	mov	r1, r3
 800113e:	48ab      	ldr	r0, [pc, #684]	; (80013ec <renderCamera+0x2d8>)
 8001140:	f7ff fe84 	bl	8000e4c <print>

	HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_CONTINUOUS, (uint32_t)&camBuff, CAM_WIDTH * CAM_HEIGHT * 2 / 4);
 8001144:	4aaa      	ldr	r2, [pc, #680]	; (80013f0 <renderCamera+0x2dc>)
 8001146:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800114a:	2100      	movs	r1, #0
 800114c:	48a9      	ldr	r0, [pc, #676]	; (80013f4 <renderCamera+0x2e0>)
 800114e:	f015 f885 	bl	801625c <HAL_DCMI_Start_DMA>
	uint32_t lastPrint = HAL_GetTick();
 8001152:	f014 febd 	bl	8015ed0 <HAL_GetTick>
 8001156:	6178      	str	r0, [r7, #20]

	uint16_t r, g, b, p;
	uint8_t gray;
	int8_t lastkeyMode = keyMode;
 8001158:	4ba7      	ldr	r3, [pc, #668]	; (80013f8 <renderCamera+0x2e4>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	setLed(0);
 8001160:	2000      	movs	r0, #0
 8001162:	f7ff febb 	bl	8000edc <setLed>

	while(1) {
		while(camBuffUpdated == 0);
 8001166:	bf00      	nop
 8001168:	4ba4      	ldr	r3, [pc, #656]	; (80013fc <renderCamera+0x2e8>)
 800116a:	f993 3000 	ldrsb.w	r3, [r3]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d0fa      	beq.n	8001168 <renderCamera+0x54>

		distAddr = LCD_GetBackGRAMAddr();
 8001172:	f000 f9df 	bl	8001534 <LCD_GetBackGRAMAddr>
 8001176:	4603      	mov	r3, r0
 8001178:	4aa1      	ldr	r2, [pc, #644]	; (8001400 <renderCamera+0x2ec>)
 800117a:	6013      	str	r3, [r2, #0]
		for (uint32_t x = 0; x < CAM_WIDTH; x++) {
 800117c:	2300      	movs	r3, #0
 800117e:	623b      	str	r3, [r7, #32]
 8001180:	e0a8      	b.n	80012d4 <renderCamera+0x1c0>
			for (uint32_t y = 0; y < CAM_HEIGHT; y++) {
 8001182:	2300      	movs	r3, #0
 8001184:	61fb      	str	r3, [r7, #28]
 8001186:	e09e      	b.n	80012c6 <renderCamera+0x1b2>
				if (x >=16 && x < (CAM_WIDTH - 16)) {
 8001188:	6a3b      	ldr	r3, [r7, #32]
 800118a:	2b0f      	cmp	r3, #15
 800118c:	f240 8098 	bls.w	80012c0 <renderCamera+0x1ac>
 8001190:	6a3b      	ldr	r3, [r7, #32]
 8001192:	2b6f      	cmp	r3, #111	; 0x6f
 8001194:	f200 8094 	bhi.w	80012c0 <renderCamera+0x1ac>
					p = *((uint16_t *)camBuff + x + 128*y);
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	01da      	lsls	r2, r3, #7
 800119c:	6a3b      	ldr	r3, [r7, #32]
 800119e:	4413      	add	r3, r2
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	4a93      	ldr	r2, [pc, #588]	; (80013f0 <renderCamera+0x2dc>)
 80011a4:	4413      	add	r3, r2
 80011a6:	881b      	ldrh	r3, [r3, #0]
 80011a8:	81fb      	strh	r3, [r7, #14]

					// 转换为灰度图
					r = (p & 0xf800) >> 8;
 80011aa:	89fb      	ldrh	r3, [r7, #14]
 80011ac:	121b      	asrs	r3, r3, #8
 80011ae:	b29b      	uxth	r3, r3
 80011b0:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80011b4:	81bb      	strh	r3, [r7, #12]
					g = (p & 0x07e0) >> 3;
 80011b6:	89fb      	ldrh	r3, [r7, #14]
 80011b8:	10db      	asrs	r3, r3, #3
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80011c0:	817b      	strh	r3, [r7, #10]
					b = (p & 0x001f) << 3;
 80011c2:	89fb      	ldrh	r3, [r7, #14]
 80011c4:	00db      	lsls	r3, r3, #3
 80011c6:	b29b      	uxth	r3, r3
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	813b      	strh	r3, [r7, #8]
					gray = (r*76 + g*150 + b*29) >> 8;
 80011cc:	89bb      	ldrh	r3, [r7, #12]
 80011ce:	224c      	movs	r2, #76	; 0x4c
 80011d0:	fb03 f202 	mul.w	r2, r3, r2
 80011d4:	897b      	ldrh	r3, [r7, #10]
 80011d6:	2196      	movs	r1, #150	; 0x96
 80011d8:	fb01 f303 	mul.w	r3, r1, r3
 80011dc:	18d1      	adds	r1, r2, r3
 80011de:	893a      	ldrh	r2, [r7, #8]
 80011e0:	4613      	mov	r3, r2
 80011e2:	00db      	lsls	r3, r3, #3
 80011e4:	1a9b      	subs	r3, r3, r2
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	4413      	add	r3, r2
 80011ea:	440b      	add	r3, r1
 80011ec:	121b      	asrs	r3, r3, #8
 80011ee:	71fb      	strb	r3, [r7, #7]

					grayData[y][x-16] = gray;
 80011f0:	6a3b      	ldr	r3, [r7, #32]
 80011f2:	f1a3 0110 	sub.w	r1, r3, #16
 80011f6:	4883      	ldr	r0, [pc, #524]	; (8001404 <renderCamera+0x2f0>)
 80011f8:	69fa      	ldr	r2, [r7, #28]
 80011fa:	4613      	mov	r3, r2
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	4413      	add	r3, r2
 8001200:	015b      	lsls	r3, r3, #5
 8001202:	4403      	add	r3, r0
 8001204:	440b      	add	r3, r1
 8001206:	79fa      	ldrb	r2, [r7, #7]
 8001208:	701a      	strb	r2, [r3, #0]

					// 转成rgb565
					r = gray >> 3;
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	08db      	lsrs	r3, r3, #3
 800120e:	b2db      	uxtb	r3, r3
 8001210:	81bb      	strh	r3, [r7, #12]
					g = gray >> 2;
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	089b      	lsrs	r3, r3, #2
 8001216:	b2db      	uxtb	r3, r3
 8001218:	817b      	strh	r3, [r7, #10]
					b = gray >> 3;
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	08db      	lsrs	r3, r3, #3
 800121e:	b2db      	uxtb	r3, r3
 8001220:	813b      	strh	r3, [r7, #8]
					p = (r << 11) | (g << 5) | b;
 8001222:	89bb      	ldrh	r3, [r7, #12]
 8001224:	02db      	lsls	r3, r3, #11
 8001226:	b21a      	sxth	r2, r3
 8001228:	897b      	ldrh	r3, [r7, #10]
 800122a:	015b      	lsls	r3, r3, #5
 800122c:	b21b      	sxth	r3, r3
 800122e:	4313      	orrs	r3, r2
 8001230:	b21a      	sxth	r2, r3
 8001232:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001236:	4313      	orrs	r3, r2
 8001238:	b21b      	sxth	r3, r3
 800123a:	81fb      	strh	r3, [r7, #14]

					*(distAddr + (x*2 + 4) + 240*(y*2 + 12)) = p;
 800123c:	4b70      	ldr	r3, [pc, #448]	; (8001400 <renderCamera+0x2ec>)
 800123e:	6819      	ldr	r1, [r3, #0]
 8001240:	69fa      	ldr	r2, [r7, #28]
 8001242:	4613      	mov	r3, r2
 8001244:	011b      	lsls	r3, r3, #4
 8001246:	1a9b      	subs	r3, r3, r2
 8001248:	011b      	lsls	r3, r3, #4
 800124a:	461a      	mov	r2, r3
 800124c:	6a3b      	ldr	r3, [r7, #32]
 800124e:	4413      	add	r3, r2
 8001250:	f203 53a2 	addw	r3, r3, #1442	; 0x5a2
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	440b      	add	r3, r1
 8001258:	89fa      	ldrh	r2, [r7, #14]
 800125a:	801a      	strh	r2, [r3, #0]
					*(distAddr + (x*2 + 4) + 240*(y*2 + 1 + 12)) = p;
 800125c:	4b68      	ldr	r3, [pc, #416]	; (8001400 <renderCamera+0x2ec>)
 800125e:	6819      	ldr	r1, [r3, #0]
 8001260:	69fa      	ldr	r2, [r7, #28]
 8001262:	4613      	mov	r3, r2
 8001264:	011b      	lsls	r3, r3, #4
 8001266:	1a9b      	subs	r3, r3, r2
 8001268:	011b      	lsls	r3, r3, #4
 800126a:	461a      	mov	r2, r3
 800126c:	6a3b      	ldr	r3, [r7, #32]
 800126e:	4413      	add	r3, r2
 8001270:	f203 631a 	addw	r3, r3, #1562	; 0x61a
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	440b      	add	r3, r1
 8001278:	89fa      	ldrh	r2, [r7, #14]
 800127a:	801a      	strh	r2, [r3, #0]
					*(distAddr + (x*2 + 1 + 4) + 240*(y*2 + 12)) = p;
 800127c:	4b60      	ldr	r3, [pc, #384]	; (8001400 <renderCamera+0x2ec>)
 800127e:	6819      	ldr	r1, [r3, #0]
 8001280:	69fa      	ldr	r2, [r7, #28]
 8001282:	4613      	mov	r3, r2
 8001284:	011b      	lsls	r3, r3, #4
 8001286:	1a9b      	subs	r3, r3, r2
 8001288:	011b      	lsls	r3, r3, #4
 800128a:	461a      	mov	r2, r3
 800128c:	6a3b      	ldr	r3, [r7, #32]
 800128e:	4413      	add	r3, r2
 8001290:	009a      	lsls	r2, r3, #2
 8001292:	f241 638a 	movw	r3, #5770	; 0x168a
 8001296:	4413      	add	r3, r2
 8001298:	440b      	add	r3, r1
 800129a:	89fa      	ldrh	r2, [r7, #14]
 800129c:	801a      	strh	r2, [r3, #0]
					*(distAddr + (x*2 + 1 + 4) + 240*(y*2 + 1 + 12)) = p;
 800129e:	4b58      	ldr	r3, [pc, #352]	; (8001400 <renderCamera+0x2ec>)
 80012a0:	6819      	ldr	r1, [r3, #0]
 80012a2:	69fa      	ldr	r2, [r7, #28]
 80012a4:	4613      	mov	r3, r2
 80012a6:	011b      	lsls	r3, r3, #4
 80012a8:	1a9b      	subs	r3, r3, r2
 80012aa:	011b      	lsls	r3, r3, #4
 80012ac:	461a      	mov	r2, r3
 80012ae:	6a3b      	ldr	r3, [r7, #32]
 80012b0:	4413      	add	r3, r2
 80012b2:	009a      	lsls	r2, r3, #2
 80012b4:	f641 036a 	movw	r3, #6250	; 0x186a
 80012b8:	4413      	add	r3, r2
 80012ba:	440b      	add	r3, r1
 80012bc:	89fa      	ldrh	r2, [r7, #14]
 80012be:	801a      	strh	r2, [r3, #0]
			for (uint32_t y = 0; y < CAM_HEIGHT; y++) {
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	3301      	adds	r3, #1
 80012c4:	61fb      	str	r3, [r7, #28]
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	2b5f      	cmp	r3, #95	; 0x5f
 80012ca:	f67f af5d 	bls.w	8001188 <renderCamera+0x74>
		for (uint32_t x = 0; x < CAM_WIDTH; x++) {
 80012ce:	6a3b      	ldr	r3, [r7, #32]
 80012d0:	3301      	adds	r3, #1
 80012d2:	623b      	str	r3, [r7, #32]
 80012d4:	6a3b      	ldr	r3, [r7, #32]
 80012d6:	2b7f      	cmp	r3, #127	; 0x7f
 80012d8:	f67f af53 	bls.w	8001182 <renderCamera+0x6e>
				}
			}
		}
		camBuffUpdated = 0;
 80012dc:	4b47      	ldr	r3, [pc, #284]	; (80013fc <renderCamera+0x2e8>)
 80012de:	2200      	movs	r2, #0
 80012e0:	701a      	strb	r2, [r3, #0]
//		LCD_Flush();

		if (lastkeyMode != keyMode) {
 80012e2:	4b45      	ldr	r3, [pc, #276]	; (80013f8 <renderCamera+0x2e4>)
 80012e4:	f993 3000 	ldrsb.w	r3, [r3]
 80012e8:	f997 2027 	ldrsb.w	r2, [r7, #39]	; 0x27
 80012ec:	429a      	cmp	r2, r3
 80012ee:	f000 80ae 	beq.w	800144e <renderCamera+0x33a>
			lastkeyMode = keyMode;
 80012f2:	4b41      	ldr	r3, [pc, #260]	; (80013f8 <renderCamera+0x2e4>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			setLed(1);
 80012fa:	2001      	movs	r0, #1
 80012fc:	f7ff fdee 	bl	8000edc <setLed>

			int8_t *result = InvokePersonDetection(grayData);
 8001300:	4840      	ldr	r0, [pc, #256]	; (8001404 <renderCamera+0x2f0>)
 8001302:	f001 f875 	bl	80023f0 <InvokePersonDetection>
 8001306:	6138      	str	r0, [r7, #16]
			setLed(0);
 8001308:	2000      	movs	r0, #0
 800130a:	f7ff fde7 	bl	8000edc <setLed>

//			print("invoke result, person: %d, no person: %d", *result, *(result + 1));
			for(uint16_t x = 0; x < 240; x++) {
 800130e:	2300      	movs	r3, #0
 8001310:	837b      	strh	r3, [r7, #26]
 8001312:	e03a      	b.n	800138a <renderCamera+0x276>
				if (x >= result[0]){
 8001314:	8b7b      	ldrh	r3, [r7, #26]
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	f992 2000 	ldrsb.w	r2, [r2]
 800131c:	4293      	cmp	r3, r2
 800131e:	da38      	bge.n	8001392 <renderCamera+0x27e>
					break;
				}
				*(distAddr + x + 240*(309)) = 0xF000;
 8001320:	4b37      	ldr	r3, [pc, #220]	; (8001400 <renderCamera+0x2ec>)
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	8b79      	ldrh	r1, [r7, #26]
 8001326:	4b38      	ldr	r3, [pc, #224]	; (8001408 <renderCamera+0x2f4>)
 8001328:	440b      	add	r3, r1
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	4413      	add	r3, r2
 800132e:	f44f 4270 	mov.w	r2, #61440	; 0xf000
 8001332:	801a      	strh	r2, [r3, #0]
				*(distAddr + x + 240*(310)) = 0xF000;
 8001334:	4b32      	ldr	r3, [pc, #200]	; (8001400 <renderCamera+0x2ec>)
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	8b79      	ldrh	r1, [r7, #26]
 800133a:	4b34      	ldr	r3, [pc, #208]	; (800140c <renderCamera+0x2f8>)
 800133c:	440b      	add	r3, r1
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	4413      	add	r3, r2
 8001342:	f44f 4270 	mov.w	r2, #61440	; 0xf000
 8001346:	801a      	strh	r2, [r3, #0]
				*(distAddr + x + 240*(311)) = 0xF000;
 8001348:	4b2d      	ldr	r3, [pc, #180]	; (8001400 <renderCamera+0x2ec>)
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	8b79      	ldrh	r1, [r7, #26]
 800134e:	4b30      	ldr	r3, [pc, #192]	; (8001410 <renderCamera+0x2fc>)
 8001350:	440b      	add	r3, r1
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	4413      	add	r3, r2
 8001356:	f44f 4270 	mov.w	r2, #61440	; 0xf000
 800135a:	801a      	strh	r2, [r3, #0]
				*(distAddr + x + 240*(312)) = 0xF000;
 800135c:	4b28      	ldr	r3, [pc, #160]	; (8001400 <renderCamera+0x2ec>)
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	8b79      	ldrh	r1, [r7, #26]
 8001362:	4b2c      	ldr	r3, [pc, #176]	; (8001414 <renderCamera+0x300>)
 8001364:	440b      	add	r3, r1
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	4413      	add	r3, r2
 800136a:	f44f 4270 	mov.w	r2, #61440	; 0xf000
 800136e:	801a      	strh	r2, [r3, #0]
				*(distAddr + x + 240*(313)) = 0xF000;
 8001370:	4b23      	ldr	r3, [pc, #140]	; (8001400 <renderCamera+0x2ec>)
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	8b79      	ldrh	r1, [r7, #26]
 8001376:	4b28      	ldr	r3, [pc, #160]	; (8001418 <renderCamera+0x304>)
 8001378:	440b      	add	r3, r1
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	4413      	add	r3, r2
 800137e:	f44f 4270 	mov.w	r2, #61440	; 0xf000
 8001382:	801a      	strh	r2, [r3, #0]
			for(uint16_t x = 0; x < 240; x++) {
 8001384:	8b7b      	ldrh	r3, [r7, #26]
 8001386:	3301      	adds	r3, #1
 8001388:	837b      	strh	r3, [r7, #26]
 800138a:	8b7b      	ldrh	r3, [r7, #26]
 800138c:	2bef      	cmp	r3, #239	; 0xef
 800138e:	d9c1      	bls.n	8001314 <renderCamera+0x200>
 8001390:	e000      	b.n	8001394 <renderCamera+0x280>
					break;
 8001392:	bf00      	nop
			}
			for(uint16_t x = 0; x < 240; x++) {
 8001394:	2300      	movs	r3, #0
 8001396:	833b      	strh	r3, [r7, #24]
 8001398:	e01b      	b.n	80013d2 <renderCamera+0x2be>
				if (x >= result[1]){
 800139a:	8b3b      	ldrh	r3, [r7, #24]
 800139c:	693a      	ldr	r2, [r7, #16]
 800139e:	3201      	adds	r2, #1
 80013a0:	f992 2000 	ldrsb.w	r2, [r2]
 80013a4:	4293      	cmp	r3, r2
 80013a6:	da3d      	bge.n	8001424 <renderCamera+0x310>
					break;
				}
				*(distAddr + x + 240*(315)) = 0x00FF;
 80013a8:	4b15      	ldr	r3, [pc, #84]	; (8001400 <renderCamera+0x2ec>)
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	8b39      	ldrh	r1, [r7, #24]
 80013ae:	4b1b      	ldr	r3, [pc, #108]	; (800141c <renderCamera+0x308>)
 80013b0:	440b      	add	r3, r1
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	4413      	add	r3, r2
 80013b6:	22ff      	movs	r2, #255	; 0xff
 80013b8:	801a      	strh	r2, [r3, #0]
				*(distAddr + x + 240*(316)) = 0x00FF;
 80013ba:	4b11      	ldr	r3, [pc, #68]	; (8001400 <renderCamera+0x2ec>)
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	8b39      	ldrh	r1, [r7, #24]
 80013c0:	4b17      	ldr	r3, [pc, #92]	; (8001420 <renderCamera+0x30c>)
 80013c2:	440b      	add	r3, r1
 80013c4:	005b      	lsls	r3, r3, #1
 80013c6:	4413      	add	r3, r2
 80013c8:	22ff      	movs	r2, #255	; 0xff
 80013ca:	801a      	strh	r2, [r3, #0]
			for(uint16_t x = 0; x < 240; x++) {
 80013cc:	8b3b      	ldrh	r3, [r7, #24]
 80013ce:	3301      	adds	r3, #1
 80013d0:	833b      	strh	r3, [r7, #24]
 80013d2:	8b3b      	ldrh	r3, [r7, #24]
 80013d4:	2bef      	cmp	r3, #239	; 0xef
 80013d6:	d9e0      	bls.n	800139a <renderCamera+0x286>
 80013d8:	e025      	b.n	8001426 <renderCamera+0x312>
 80013da:	bf00      	nop
 80013dc:	08020ef4 	.word	0x08020ef4
 80013e0:	58020400 	.word	0x58020400
 80013e4:	2404edf8 	.word	0x2404edf8
 80013e8:	2400009c 	.word	0x2400009c
 80013ec:	08020f10 	.word	0x08020f10
 80013f0:	240006b8 	.word	0x240006b8
 80013f4:	2404ed30 	.word	0x2404ed30
 80013f8:	240006b1 	.word	0x240006b1
 80013fc:	240066b8 	.word	0x240066b8
 8001400:	240066c0 	.word	0x240066c0
 8001404:	30000000 	.word	0x30000000
 8001408:	000121b0 	.word	0x000121b0
 800140c:	000122a0 	.word	0x000122a0
 8001410:	00012390 	.word	0x00012390
 8001414:	00012480 	.word	0x00012480
 8001418:	00012570 	.word	0x00012570
 800141c:	00012750 	.word	0x00012750
 8001420:	00012840 	.word	0x00012840
					break;
 8001424:	bf00      	nop
			}
			LCD_Flush(1);
 8001426:	2001      	movs	r0, #1
 8001428:	f000 f8ac 	bl	8001584 <LCD_Flush>
			while (lastkeyMode == keyMode);
 800142c:	bf00      	nop
 800142e:	4b0a      	ldr	r3, [pc, #40]	; (8001458 <renderCamera+0x344>)
 8001430:	f993 3000 	ldrsb.w	r3, [r3]
 8001434:	f997 2027 	ldrsb.w	r2, [r7, #39]	; 0x27
 8001438:	429a      	cmp	r2, r3
 800143a:	d0f8      	beq.n	800142e <renderCamera+0x31a>
			lastkeyMode = keyMode;
 800143c:	4b06      	ldr	r3, [pc, #24]	; (8001458 <renderCamera+0x344>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			LCD_ResetGram(0x91F1);
 8001444:	f249 10f1 	movw	r0, #37361	; 0x91f1
 8001448:	f000 f87e 	bl	8001548 <LCD_ResetGram>
 800144c:	e68b      	b.n	8001166 <renderCamera+0x52>
		} else {
			LCD_Flush(1);
 800144e:	2001      	movs	r0, #1
 8001450:	f000 f898 	bl	8001584 <LCD_Flush>
		while(camBuffUpdated == 0);
 8001454:	e687      	b.n	8001166 <renderCamera+0x52>
 8001456:	bf00      	nop
 8001458:	240006b1 	.word	0x240006b1

0800145c <myMain>:
		}
	}
}

void myMain() {
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
	print("enter inner main.");
 8001460:	480d      	ldr	r0, [pc, #52]	; (8001498 <myMain+0x3c>)
 8001462:	f7ff fcf3 	bl	8000e4c <print>

	setLed(0);
 8001466:	2000      	movs	r0, #0
 8001468:	f7ff fd38 	bl	8000edc <setLed>
	SPI_LCD_Init();
 800146c:	f000 f94e 	bl	800170c <SPI_LCD_Init>
	print("lcd init complete.");
 8001470:	480a      	ldr	r0, [pc, #40]	; (800149c <myMain+0x40>)
 8001472:	f7ff fceb 	bl	8000e4c <print>

	HAL_Delay(1000);
 8001476:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800147a:	f014 fd35 	bl	8015ee8 <HAL_Delay>
	if (keyMode == 0) {
 800147e:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <myMain+0x44>)
 8001480:	f993 3000 	ldrsb.w	r3, [r3]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d102      	bne.n	800148e <myMain+0x32>
		// render sine
		renderSineWave();
 8001488:	f7ff fdca 	bl	8001020 <renderSineWave>
	} else {
		renderCamera();
	}
}
 800148c:	e001      	b.n	8001492 <myMain+0x36>
		renderCamera();
 800148e:	f7ff fe41 	bl	8001114 <renderCamera>
}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	08020f3c 	.word	0x08020f3c
 800149c:	08020f50 	.word	0x08020f50
 80014a0:	240006b1 	.word	0x240006b1

080014a4 <LCD_OnTE>:
static uint8_t LCD_targetIndex = 0;
static uint8_t LCD_FlushPart = 100;  // 0 空闲, 1 上半区, 2下半区, 100 未初始化
static uint16_t LCD_GRAM[LCD_WIDTH*LCD_HEIGHT];

// TE 信号中断，用于触发帧传输
int8_t LCD_OnTE() {
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
//	if ((LCD_CurrIndex != LCD_targetIndex) && (LCD_FlushPart == 0)) {
	if (LCD_FlushPart == 0) {
 80014a8:	4b0b      	ldr	r3, [pc, #44]	; (80014d8 <LCD_OnTE+0x34>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d10f      	bne.n	80014d0 <LCD_OnTE+0x2c>
		LCD_FlushPart = 1;
 80014b0:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <LCD_OnTE+0x34>)
 80014b2:	2201      	movs	r2, #1
 80014b4:	701a      	strb	r2, [r3, #0]
		LCD_CurrIndex = LCD_targetIndex;
 80014b6:	4b09      	ldr	r3, [pc, #36]	; (80014dc <LCD_OnTE+0x38>)
 80014b8:	781a      	ldrb	r2, [r3, #0]
 80014ba:	4b09      	ldr	r3, [pc, #36]	; (80014e0 <LCD_OnTE+0x3c>)
 80014bc:	701a      	strb	r2, [r3, #0]
		return HAL_SPI_Transmit_DMA(&LCD_SPI, LCD_GRAM, LCD_WIDTH*LCD_HEIGHT/2);
 80014be:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80014c2:	4908      	ldr	r1, [pc, #32]	; (80014e4 <LCD_OnTE+0x40>)
 80014c4:	4808      	ldr	r0, [pc, #32]	; (80014e8 <LCD_OnTE+0x44>)
 80014c6:	f01c fb17 	bl	801daf8 <HAL_SPI_Transmit_DMA>
 80014ca:	4603      	mov	r3, r0
 80014cc:	b25b      	sxtb	r3, r3
 80014ce:	e000      	b.n	80014d2 <LCD_OnTE+0x2e>
	}
	return 0;
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	24000000 	.word	0x24000000
 80014dc:	240066d5 	.word	0x240066d5
 80014e0:	240066d4 	.word	0x240066d4
 80014e4:	240066d8 	.word	0x240066d8
 80014e8:	2404ee4c 	.word	0x2404ee4c

080014ec <LCD_SPI_TxCallback>:

// 单次传输完成回调
void LCD_SPI_TxCallback(SPI_HandleTypeDef *hspi) {
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
	if (LCD_FlushPart == 1){
 80014f4:	4b0c      	ldr	r3, [pc, #48]	; (8001528 <LCD_SPI_TxCallback+0x3c>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d10a      	bne.n	8001512 <LCD_SPI_TxCallback+0x26>
		// 上次 SPI 传输的是上半部分，此时需要启动下半部分的传输
		LCD_FlushPart = 2;
 80014fc:	4b0a      	ldr	r3, [pc, #40]	; (8001528 <LCD_SPI_TxCallback+0x3c>)
 80014fe:	2202      	movs	r2, #2
 8001500:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit_DMA(&LCD_SPI, (uint8_t *)LCD_GRAM + LCD_WIDTH*LCD_HEIGHT, LCD_WIDTH*LCD_HEIGHT/2);
 8001502:	4b0a      	ldr	r3, [pc, #40]	; (800152c <LCD_SPI_TxCallback+0x40>)
 8001504:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001508:	4619      	mov	r1, r3
 800150a:	4809      	ldr	r0, [pc, #36]	; (8001530 <LCD_SPI_TxCallback+0x44>)
 800150c:	f01c faf4 	bl	801daf8 <HAL_SPI_Transmit_DMA>
	} else if (LCD_FlushPart == 2) {
		// 下半部分的传输已经完成，重置标记
		LCD_FlushPart = 0;
	}
}
 8001510:	e006      	b.n	8001520 <LCD_SPI_TxCallback+0x34>
	} else if (LCD_FlushPart == 2) {
 8001512:	4b05      	ldr	r3, [pc, #20]	; (8001528 <LCD_SPI_TxCallback+0x3c>)
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	2b02      	cmp	r3, #2
 8001518:	d102      	bne.n	8001520 <LCD_SPI_TxCallback+0x34>
		LCD_FlushPart = 0;
 800151a:	4b03      	ldr	r3, [pc, #12]	; (8001528 <LCD_SPI_TxCallback+0x3c>)
 800151c:	2200      	movs	r2, #0
 800151e:	701a      	strb	r2, [r3, #0]
}
 8001520:	bf00      	nop
 8001522:	3708      	adds	r7, #8
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	24000000 	.word	0x24000000
 800152c:	240192d8 	.word	0x240192d8
 8001530:	2404ee4c 	.word	0x2404ee4c

08001534 <LCD_GetBackGRAMAddr>:

// 获取绘制层 GRAM 首地址
uint16_t* LCD_GetBackGRAMAddr() {
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
    return LCD_GRAM;
 8001538:	4b02      	ldr	r3, [pc, #8]	; (8001544 <LCD_GetBackGRAMAddr+0x10>)
}
 800153a:	4618      	mov	r0, r3
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	240066d8 	.word	0x240066d8

08001548 <LCD_ResetGram>:


void LCD_ResetGram(uint16_t value) {
 8001548:	b480      	push	{r7}
 800154a:	b085      	sub	sp, #20
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	80fb      	strh	r3, [r7, #6]
    for (uint32_t i = 0; i < LCD_WIDTH*LCD_HEIGHT; i++){
 8001552:	2300      	movs	r3, #0
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	e007      	b.n	8001568 <LCD_ResetGram+0x20>
    	LCD_GRAM[i] = value;
 8001558:	4909      	ldr	r1, [pc, #36]	; (8001580 <LCD_ResetGram+0x38>)
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	88fa      	ldrh	r2, [r7, #6]
 800155e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for (uint32_t i = 0; i < LCD_WIDTH*LCD_HEIGHT; i++){
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	3301      	adds	r3, #1
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
 800156e:	d3f3      	bcc.n	8001558 <LCD_ResetGram+0x10>
    }
}
 8001570:	bf00      	nop
 8001572:	bf00      	nop
 8001574:	3714      	adds	r7, #20
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	240066d8 	.word	0x240066d8

08001584 <LCD_Flush>:

// 执行 LCD 刷新。在更新完GRAM之后调用此函数
void LCD_Flush(uint8_t block) {
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	71fb      	strb	r3, [r7, #7]
    // 等待刷新完成
	if (block == 1) {
 800158e:	79fb      	ldrb	r3, [r7, #7]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d104      	bne.n	800159e <LCD_Flush+0x1a>
		while (LCD_FlushPart != 0);
 8001594:	bf00      	nop
 8001596:	4b08      	ldr	r3, [pc, #32]	; (80015b8 <LCD_Flush+0x34>)
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d1fb      	bne.n	8001596 <LCD_Flush+0x12>
	}
	LCD_targetIndex++;
 800159e:	4b07      	ldr	r3, [pc, #28]	; (80015bc <LCD_Flush+0x38>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	3301      	adds	r3, #1
 80015a4:	b2da      	uxtb	r2, r3
 80015a6:	4b05      	ldr	r3, [pc, #20]	; (80015bc <LCD_Flush+0x38>)
 80015a8:	701a      	strb	r2, [r3, #0]
}
 80015aa:	bf00      	nop
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	24000000 	.word	0x24000000
 80015bc:	240066d5 	.word	0x240066d5

080015c0 <LCD_WriteCommand>:


void  LCD_WriteCommand(uint8_t lcd_command) {
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4603      	mov	r3, r0
 80015c8:	71fb      	strb	r3, [r7, #7]
	LCD_DC_Command;     // 数据指令选择 引脚输出低电平，代表本次传输 指令
 80015ca:	2200      	movs	r2, #0
 80015cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015d0:	4806      	ldr	r0, [pc, #24]	; (80015ec <LCD_WriteCommand+0x2c>)
 80015d2:	f018 f9df 	bl	8019994 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&LCD_SPI, &lcd_command, 1, 1000); // 启动SPI传输
 80015d6:	1df9      	adds	r1, r7, #7
 80015d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015dc:	2201      	movs	r2, #1
 80015de:	4804      	ldr	r0, [pc, #16]	; (80015f0 <LCD_WriteCommand+0x30>)
 80015e0:	f01c f88e 	bl	801d700 <HAL_SPI_Transmit>
}
 80015e4:	bf00      	nop
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	58022400 	.word	0x58022400
 80015f0:	2404ee4c 	.word	0x2404ee4c

080015f4 <LCD_WriteData_8bit>:

void  LCD_WriteData_8bit(uint8_t lcd_data) {
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4603      	mov	r3, r0
 80015fc:	71fb      	strb	r3, [r7, #7]
   LCD_DC_Data;     // 数据指令选择 引脚输出高电平，代表本次传输 数据
 80015fe:	2201      	movs	r2, #1
 8001600:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001604:	4806      	ldr	r0, [pc, #24]	; (8001620 <LCD_WriteData_8bit+0x2c>)
 8001606:	f018 f9c5 	bl	8019994 <HAL_GPIO_WritePin>

   HAL_SPI_Transmit(&LCD_SPI, &lcd_data, 1, 1000) ; // 启动SPI传输
 800160a:	1df9      	adds	r1, r7, #7
 800160c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001610:	2201      	movs	r2, #1
 8001612:	4804      	ldr	r0, [pc, #16]	; (8001624 <LCD_WriteData_8bit+0x30>)
 8001614:	f01c f874 	bl	801d700 <HAL_SPI_Transmit>
}
 8001618:	bf00      	nop
 800161a:	3708      	adds	r7, #8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	58022400 	.word	0x58022400
 8001624:	2404ee4c 	.word	0x2404ee4c

08001628 <LCD_WriteData_16bit>:

void  LCD_WriteData_16bit(uint16_t lcd_data) {
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	4603      	mov	r3, r0
 8001630:	80fb      	strh	r3, [r7, #6]
   uint8_t lcd_data_buff[2];    // 数据发送区
   LCD_DC_Data;      // 数据指令选择 引脚输出高电平，代表本次传输 数据
 8001632:	2201      	movs	r2, #1
 8001634:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001638:	480b      	ldr	r0, [pc, #44]	; (8001668 <LCD_WriteData_16bit+0x40>)
 800163a:	f018 f9ab 	bl	8019994 <HAL_GPIO_WritePin>
 
   lcd_data_buff[0] = lcd_data>>8;  // 将数据拆分
 800163e:	88fb      	ldrh	r3, [r7, #6]
 8001640:	0a1b      	lsrs	r3, r3, #8
 8001642:	b29b      	uxth	r3, r3
 8001644:	b2db      	uxtb	r3, r3
 8001646:	733b      	strb	r3, [r7, #12]
   lcd_data_buff[1] = lcd_data;
 8001648:	88fb      	ldrh	r3, [r7, #6]
 800164a:	b2db      	uxtb	r3, r3
 800164c:	737b      	strb	r3, [r7, #13]
		
	HAL_SPI_Transmit(&LCD_SPI, lcd_data_buff, 2, 1000) ;   // 启动SPI传输
 800164e:	f107 010c 	add.w	r1, r7, #12
 8001652:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001656:	2202      	movs	r2, #2
 8001658:	4804      	ldr	r0, [pc, #16]	; (800166c <LCD_WriteData_16bit+0x44>)
 800165a:	f01c f851 	bl	801d700 <HAL_SPI_Transmit>
}
 800165e:	bf00      	nop
 8001660:	3710      	adds	r7, #16
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	58022400 	.word	0x58022400
 800166c:	2404ee4c 	.word	0x2404ee4c

08001670 <LCD_SetAddress>:

void LCD_SetAddress(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8001670:	b590      	push	{r4, r7, lr}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	4604      	mov	r4, r0
 8001678:	4608      	mov	r0, r1
 800167a:	4611      	mov	r1, r2
 800167c:	461a      	mov	r2, r3
 800167e:	4623      	mov	r3, r4
 8001680:	80fb      	strh	r3, [r7, #6]
 8001682:	4603      	mov	r3, r0
 8001684:	80bb      	strh	r3, [r7, #4]
 8001686:	460b      	mov	r3, r1
 8001688:	807b      	strh	r3, [r7, #2]
 800168a:	4613      	mov	r3, r2
 800168c:	803b      	strh	r3, [r7, #0]
	LCD_WriteCommand(0x2a);			//	列地址设置，即X坐标
 800168e:	202a      	movs	r0, #42	; 0x2a
 8001690:	f7ff ff96 	bl	80015c0 <LCD_WriteCommand>
	LCD_WriteData_16bit(x1);
 8001694:	88fb      	ldrh	r3, [r7, #6]
 8001696:	4618      	mov	r0, r3
 8001698:	f7ff ffc6 	bl	8001628 <LCD_WriteData_16bit>
	LCD_WriteData_16bit(x2);
 800169c:	887b      	ldrh	r3, [r7, #2]
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff ffc2 	bl	8001628 <LCD_WriteData_16bit>

	LCD_WriteCommand(0x2b);			//	行地址设置，即Y坐标
 80016a4:	202b      	movs	r0, #43	; 0x2b
 80016a6:	f7ff ff8b 	bl	80015c0 <LCD_WriteCommand>
	LCD_WriteData_16bit(y1);
 80016aa:	88bb      	ldrh	r3, [r7, #4]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff ffbb 	bl	8001628 <LCD_WriteData_16bit>
	LCD_WriteData_16bit(y2);
 80016b2:	883b      	ldrh	r3, [r7, #0]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff ffb7 	bl	8001628 <LCD_WriteData_16bit>

	LCD_WriteCommand(0x2c);			//	开始写入显存，即要显示的颜色数据
 80016ba:	202c      	movs	r0, #44	; 0x2c
 80016bc:	f7ff ff80 	bl	80015c0 <LCD_WriteCommand>
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd90      	pop	{r4, r7, pc}

080016c8 <LCD_SetAddrGlobal>:

void LCD_SetAddrGlobal(){
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
	LCD_SPI.Init.DataSize = SPI_DATASIZE_8BIT;
 80016cc:	4b0d      	ldr	r3, [pc, #52]	; (8001704 <LCD_SetAddrGlobal+0x3c>)
 80016ce:	2207      	movs	r2, #7
 80016d0:	60da      	str	r2, [r3, #12]
	HAL_SPI_Init(&LCD_SPI);
 80016d2:	480c      	ldr	r0, [pc, #48]	; (8001704 <LCD_SetAddrGlobal+0x3c>)
 80016d4:	f01b fef0 	bl	801d4b8 <HAL_SPI_Init>
	LCD_SetAddress(0, 0, LCD_WIDTH - 1, LCD_HEIGHT - 1);
 80016d8:	f240 133f 	movw	r3, #319	; 0x13f
 80016dc:	22ef      	movs	r2, #239	; 0xef
 80016de:	2100      	movs	r1, #0
 80016e0:	2000      	movs	r0, #0
 80016e2:	f7ff ffc5 	bl	8001670 <LCD_SetAddress>

	LCD_DC_Data;
 80016e6:	2201      	movs	r2, #1
 80016e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016ec:	4806      	ldr	r0, [pc, #24]	; (8001708 <LCD_SetAddrGlobal+0x40>)
 80016ee:	f018 f951 	bl	8019994 <HAL_GPIO_WritePin>
	LCD_SPI.Init.DataSize = SPI_DATASIZE_16BIT;
 80016f2:	4b04      	ldr	r3, [pc, #16]	; (8001704 <LCD_SetAddrGlobal+0x3c>)
 80016f4:	220f      	movs	r2, #15
 80016f6:	60da      	str	r2, [r3, #12]
	HAL_SPI_Init(&LCD_SPI);
 80016f8:	4802      	ldr	r0, [pc, #8]	; (8001704 <LCD_SetAddrGlobal+0x3c>)
 80016fa:	f01b fedd 	bl	801d4b8 <HAL_SPI_Init>
}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	2404ee4c 	.word	0x2404ee4c
 8001708:	58022400 	.word	0x58022400

0800170c <SPI_LCD_Init>:

void SPI_LCD_Init(void) {
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
	HAL_Delay(10);               	// 屏幕刚完成复位时（包括上电复位），需要等待至少5ms才能发送指令
 8001710:	200a      	movs	r0, #10
 8001712:	f014 fbe9 	bl	8015ee8 <HAL_Delay>

 	LCD_WriteCommand(0x36);       // 显存访问控制 指令，用于设置访问显存的方式
 8001716:	2036      	movs	r0, #54	; 0x36
 8001718:	f7ff ff52 	bl	80015c0 <LCD_WriteCommand>
	LCD_WriteData_8bit(0x00);     // 配置成 从上到下、从左到右，RGB像素格式
 800171c:	2000      	movs	r0, #0
 800171e:	f7ff ff69 	bl	80015f4 <LCD_WriteData_8bit>

	LCD_WriteCommand(0x3A);			// 接口像素格式 指令，用于设置使用 12位、16位还是18位色
 8001722:	203a      	movs	r0, #58	; 0x3a
 8001724:	f7ff ff4c 	bl	80015c0 <LCD_WriteCommand>
	LCD_WriteData_8bit(0x05);     // 此处配置成 16位 像素格式
 8001728:	2005      	movs	r0, #5
 800172a:	f7ff ff63 	bl	80015f4 <LCD_WriteData_8bit>

	// 接下来很多都是电压设置指令，直接使用厂家给设定值
 	LCD_WriteCommand(0xB2);			
 800172e:	20b2      	movs	r0, #178	; 0xb2
 8001730:	f7ff ff46 	bl	80015c0 <LCD_WriteCommand>
	LCD_WriteData_8bit(0x0C);
 8001734:	200c      	movs	r0, #12
 8001736:	f7ff ff5d 	bl	80015f4 <LCD_WriteData_8bit>
	LCD_WriteData_8bit(0x0C); 
 800173a:	200c      	movs	r0, #12
 800173c:	f7ff ff5a 	bl	80015f4 <LCD_WriteData_8bit>
	LCD_WriteData_8bit(0x00); 
 8001740:	2000      	movs	r0, #0
 8001742:	f7ff ff57 	bl	80015f4 <LCD_WriteData_8bit>
	LCD_WriteData_8bit(0x33); 
 8001746:	2033      	movs	r0, #51	; 0x33
 8001748:	f7ff ff54 	bl	80015f4 <LCD_WriteData_8bit>
	LCD_WriteData_8bit(0x33); 			
 800174c:	2033      	movs	r0, #51	; 0x33
 800174e:	f7ff ff51 	bl	80015f4 <LCD_WriteData_8bit>
	LCD_WriteCommand(0xB7);		   // 栅极电压设置指令
 8001752:	20b7      	movs	r0, #183	; 0xb7
 8001754:	f7ff ff34 	bl	80015c0 <LCD_WriteCommand>
	LCD_WriteData_8bit(0x35);     // VGH = 13.26V，VGL = -10.43V
 8001758:	2035      	movs	r0, #53	; 0x35
 800175a:	f7ff ff4b 	bl	80015f4 <LCD_WriteData_8bit>
	LCD_WriteCommand(0xBB);			// 公共电压设置指令
 800175e:	20bb      	movs	r0, #187	; 0xbb
 8001760:	f7ff ff2e 	bl	80015c0 <LCD_WriteCommand>
	LCD_WriteData_8bit(0x19);     // VCOM = 1.35V
 8001764:	2019      	movs	r0, #25
 8001766:	f7ff ff45 	bl	80015f4 <LCD_WriteData_8bit>
	LCD_WriteCommand(0xC0);
 800176a:	20c0      	movs	r0, #192	; 0xc0
 800176c:	f7ff ff28 	bl	80015c0 <LCD_WriteCommand>
	LCD_WriteData_8bit(0x2C);
 8001770:	202c      	movs	r0, #44	; 0x2c
 8001772:	f7ff ff3f 	bl	80015f4 <LCD_WriteData_8bit>
	LCD_WriteCommand(0xC2);       // VDV 和 VRH 来源设置
 8001776:	20c2      	movs	r0, #194	; 0xc2
 8001778:	f7ff ff22 	bl	80015c0 <LCD_WriteCommand>
	LCD_WriteData_8bit(0x01);     // VDV 和 VRH 由用户自由配置
 800177c:	2001      	movs	r0, #1
 800177e:	f7ff ff39 	bl	80015f4 <LCD_WriteData_8bit>
	LCD_WriteCommand(0xC3);			// VRH电压 设置指令
 8001782:	20c3      	movs	r0, #195	; 0xc3
 8001784:	f7ff ff1c 	bl	80015c0 <LCD_WriteCommand>
	LCD_WriteData_8bit(0x12);     // VRH电压 = 4.6+( vcom+vcom offset+vdv)
 8001788:	2012      	movs	r0, #18
 800178a:	f7ff ff33 	bl	80015f4 <LCD_WriteData_8bit>
	LCD_WriteCommand(0xC4);		   // VDV电压 设置指令
 800178e:	20c4      	movs	r0, #196	; 0xc4
 8001790:	f7ff ff16 	bl	80015c0 <LCD_WriteCommand>
	LCD_WriteData_8bit(0x20);     // VDV电压 = 0v
 8001794:	2020      	movs	r0, #32
 8001796:	f7ff ff2d 	bl	80015f4 <LCD_WriteData_8bit>
	LCD_WriteCommand(0xC6); 		// 正常模式的帧率控制指令
 800179a:	20c6      	movs	r0, #198	; 0xc6
 800179c:	f7ff ff10 	bl	80015c0 <LCD_WriteCommand>
	LCD_WriteData_8bit(0x0F);   	// 设置屏幕控制器的刷新帧率为60帧
 80017a0:	200f      	movs	r0, #15
 80017a2:	f7ff ff27 	bl	80015f4 <LCD_WriteData_8bit>
	LCD_WriteCommand(0xD0);			// 电源控制指令
 80017a6:	20d0      	movs	r0, #208	; 0xd0
 80017a8:	f7ff ff0a 	bl	80015c0 <LCD_WriteCommand>
	LCD_WriteData_8bit(0xA4);     // 无效数据，固定写入0xA4
 80017ac:	20a4      	movs	r0, #164	; 0xa4
 80017ae:	f7ff ff21 	bl	80015f4 <LCD_WriteData_8bit>
	LCD_WriteData_8bit(0xA1);     // AVDD = 6.8V ，AVDD = -4.8V ，VDS = 2.3V
 80017b2:	20a1      	movs	r0, #161	; 0xa1
 80017b4:	f7ff ff1e 	bl	80015f4 <LCD_WriteData_8bit>
	LCD_WriteCommand(0xE0);       // 正极电压伽马值设定
 80017b8:	20e0      	movs	r0, #224	; 0xe0
 80017ba:	f7ff ff01 	bl	80015c0 <LCD_WriteCommand>
	LCD_WriteData_8bit(0xD0);
 80017be:	20d0      	movs	r0, #208	; 0xd0
 80017c0:	f7ff ff18 	bl	80015f4 <LCD_WriteData_8bit>
	LCD_WriteData_8bit(0x04);
 80017c4:	2004      	movs	r0, #4
 80017c6:	f7ff ff15 	bl	80015f4 <LCD_WriteData_8bit>
	LCD_WriteData_8bit(0x0D);
 80017ca:	200d      	movs	r0, #13
 80017cc:	f7ff ff12 	bl	80015f4 <LCD_WriteData_8bit>
	LCD_WriteData_8bit(0x11);
 80017d0:	2011      	movs	r0, #17
 80017d2:	f7ff ff0f 	bl	80015f4 <LCD_WriteData_8bit>
	LCD_WriteData_8bit(0x13);
 80017d6:	2013      	movs	r0, #19
 80017d8:	f7ff ff0c 	bl	80015f4 <LCD_WriteData_8bit>
	LCD_WriteData_8bit(0x2B);
 80017dc:	202b      	movs	r0, #43	; 0x2b
 80017de:	f7ff ff09 	bl	80015f4 <LCD_WriteData_8bit>
	LCD_WriteData_8bit(0x3F);
 80017e2:	203f      	movs	r0, #63	; 0x3f
 80017e4:	f7ff ff06 	bl	80015f4 <LCD_WriteData_8bit>
	LCD_WriteData_8bit(0x54);
 80017e8:	2054      	movs	r0, #84	; 0x54
 80017ea:	f7ff ff03 	bl	80015f4 <LCD_WriteData_8bit>
	LCD_WriteData_8bit(0x4C);
 80017ee:	204c      	movs	r0, #76	; 0x4c
 80017f0:	f7ff ff00 	bl	80015f4 <LCD_WriteData_8bit>
	LCD_WriteData_8bit(0x18);
 80017f4:	2018      	movs	r0, #24
 80017f6:	f7ff fefd 	bl	80015f4 <LCD_WriteData_8bit>
	LCD_WriteData_8bit(0x0D);
 80017fa:	200d      	movs	r0, #13
 80017fc:	f7ff fefa 	bl	80015f4 <LCD_WriteData_8bit>
	LCD_WriteData_8bit(0x0B);
 8001800:	200b      	movs	r0, #11
 8001802:	f7ff fef7 	bl	80015f4 <LCD_WriteData_8bit>
	LCD_WriteData_8bit(0x1F);
 8001806:	201f      	movs	r0, #31
 8001808:	f7ff fef4 	bl	80015f4 <LCD_WriteData_8bit>
	LCD_WriteData_8bit(0x23);
 800180c:	2023      	movs	r0, #35	; 0x23
 800180e:	f7ff fef1 	bl	80015f4 <LCD_WriteData_8bit>
	LCD_WriteCommand(0xE1);      // 负极电压伽马值设定
 8001812:	20e1      	movs	r0, #225	; 0xe1
 8001814:	f7ff fed4 	bl	80015c0 <LCD_WriteCommand>
	LCD_WriteData_8bit(0xD0);
 8001818:	20d0      	movs	r0, #208	; 0xd0
 800181a:	f7ff feeb 	bl	80015f4 <LCD_WriteData_8bit>
	LCD_WriteData_8bit(0x04);
 800181e:	2004      	movs	r0, #4
 8001820:	f7ff fee8 	bl	80015f4 <LCD_WriteData_8bit>
	LCD_WriteData_8bit(0x0C);
 8001824:	200c      	movs	r0, #12
 8001826:	f7ff fee5 	bl	80015f4 <LCD_WriteData_8bit>
	LCD_WriteData_8bit(0x11);
 800182a:	2011      	movs	r0, #17
 800182c:	f7ff fee2 	bl	80015f4 <LCD_WriteData_8bit>
	LCD_WriteData_8bit(0x13);
 8001830:	2013      	movs	r0, #19
 8001832:	f7ff fedf 	bl	80015f4 <LCD_WriteData_8bit>
	LCD_WriteData_8bit(0x2C);
 8001836:	202c      	movs	r0, #44	; 0x2c
 8001838:	f7ff fedc 	bl	80015f4 <LCD_WriteData_8bit>
	LCD_WriteData_8bit(0x3F);
 800183c:	203f      	movs	r0, #63	; 0x3f
 800183e:	f7ff fed9 	bl	80015f4 <LCD_WriteData_8bit>
	LCD_WriteData_8bit(0x44);
 8001842:	2044      	movs	r0, #68	; 0x44
 8001844:	f7ff fed6 	bl	80015f4 <LCD_WriteData_8bit>
	LCD_WriteData_8bit(0x51);
 8001848:	2051      	movs	r0, #81	; 0x51
 800184a:	f7ff fed3 	bl	80015f4 <LCD_WriteData_8bit>
	LCD_WriteData_8bit(0x2F);
 800184e:	202f      	movs	r0, #47	; 0x2f
 8001850:	f7ff fed0 	bl	80015f4 <LCD_WriteData_8bit>
	LCD_WriteData_8bit(0x1F);
 8001854:	201f      	movs	r0, #31
 8001856:	f7ff fecd 	bl	80015f4 <LCD_WriteData_8bit>
	LCD_WriteData_8bit(0x1F);
 800185a:	201f      	movs	r0, #31
 800185c:	f7ff feca 	bl	80015f4 <LCD_WriteData_8bit>
	LCD_WriteData_8bit(0x20);
 8001860:	2020      	movs	r0, #32
 8001862:	f7ff fec7 	bl	80015f4 <LCD_WriteData_8bit>
	LCD_WriteData_8bit(0x23);
 8001866:	2023      	movs	r0, #35	; 0x23
 8001868:	f7ff fec4 	bl	80015f4 <LCD_WriteData_8bit>

	// 打开反显，因为面板是常黑型，操作需要反过来
	LCD_WriteCommand(0x21);
 800186c:	2021      	movs	r0, #33	; 0x21
 800186e:	f7ff fea7 	bl	80015c0 <LCD_WriteCommand>

	// 开启TE信号输出，V-Blanking模式
	LCD_WriteCommand(0x35);
 8001872:	2035      	movs	r0, #53	; 0x35
 8001874:	f7ff fea4 	bl	80015c0 <LCD_WriteCommand>
	LCD_WriteData_8bit(0);
 8001878:	2000      	movs	r0, #0
 800187a:	f7ff febb 	bl	80015f4 <LCD_WriteData_8bit>

	// 退出休眠指令，LCD控制器在刚上电、复位时，会自动进入休眠模式 ，因此操作屏幕之前，需要退出休眠
	LCD_WriteCommand(0x11);       // 退出休眠 指令
 800187e:	2011      	movs	r0, #17
 8001880:	f7ff fe9e 	bl	80015c0 <LCD_WriteCommand>
	HAL_Delay(120);               // 需要等待120ms，让电源电压和时钟电路稳定下来
 8001884:	2078      	movs	r0, #120	; 0x78
 8001886:	f014 fb2f 	bl	8015ee8 <HAL_Delay>

	// 打开显示指令，LCD控制器在刚上电、复位时，会自动关闭显示
	LCD_WriteCommand(0x29);       // 打开显示
 800188a:	2029      	movs	r0, #41	; 0x29
 800188c:	f7ff fe98 	bl	80015c0 <LCD_WriteCommand>
    #define direction Direction_V
    if( direction == Direction_H ) {
        LCD_WriteCommand(0x36);    		// 显存访问控制 指令，用于设置访问显存的方式
        LCD_WriteData_8bit(0x70);        // 横屏显示
    } else if( direction == Direction_V ) {
        LCD_WriteCommand(0x36);    		// 显存访问控制 指令，用于设置访问显存的方式
 8001890:	2036      	movs	r0, #54	; 0x36
 8001892:	f7ff fe95 	bl	80015c0 <LCD_WriteCommand>
        LCD_WriteData_8bit(0x00);        // 垂直显示
 8001896:	2000      	movs	r0, #0
 8001898:	f7ff feac 	bl	80015f4 <LCD_WriteData_8bit>
    } else if( direction == Direction_V_Flip ) {
        LCD_WriteCommand(0x36);    		// 显存访问控制 指令，用于设置访问显存的方式
        LCD_WriteData_8bit(0xC0);        // 垂直显示 ，并上下翻转，RGB像素格式
    }

	LCD_SetAddrGlobal();
 800189c:	f7ff ff14 	bl	80016c8 <LCD_SetAddrGlobal>

    // 将两页layer都刷成背景色
    LCD_ResetGram(0x91F1);
 80018a0:	f249 10f1 	movw	r0, #37361	; 0x91f1
 80018a4:	f7ff fe50 	bl	8001548 <LCD_ResetGram>
    LCD_FlushPart = 0;
 80018a8:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <SPI_LCD_Init+0x1b8>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	701a      	strb	r2, [r3, #0]

    LCD_Flush(1);
 80018ae:	2001      	movs	r0, #1
 80018b0:	f7ff fe68 	bl	8001584 <LCD_Flush>

    // 全部设置完毕之后，打开背光
	LCD_Backlight_ON;
 80018b4:	2201      	movs	r2, #1
 80018b6:	2101      	movs	r1, #1
 80018b8:	4803      	ldr	r0, [pc, #12]	; (80018c8 <SPI_LCD_Init+0x1bc>)
 80018ba:	f018 f86b 	bl	8019994 <HAL_GPIO_WritePin>
}
 80018be:	bf00      	nop
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	24000000 	.word	0x24000000
 80018c8:	58022400 	.word	0x58022400

080018cc <_ZN11flatbuffers11EndianCheckEv>:

// Litmus check for ensuring the Offsets are the expected size.
static_assert(sizeof(Offset<>) == 4, "Offset has wrong size");
static_assert(sizeof(Offset64<>) == 8, "Offset64 has wrong size");

inline void EndianCheck() {
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
  int endiantest = 1;
 80018d2:	2301      	movs	r3, #1
 80018d4:	607b      	str	r3, [r7, #4]
  // If this fails, see FLATBUFFERS_LITTLEENDIAN above.
  FLATBUFFERS_ASSERT(*reinterpret_cast<char *>(&endiantest) ==
 80018d6:	1d3b      	adds	r3, r7, #4
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d005      	beq.n	80018ea <_ZN11flatbuffers11EndianCheckEv+0x1e>
 80018de:	4b05      	ldr	r3, [pc, #20]	; (80018f4 <_ZN11flatbuffers11EndianCheckEv+0x28>)
 80018e0:	4a05      	ldr	r2, [pc, #20]	; (80018f8 <_ZN11flatbuffers11EndianCheckEv+0x2c>)
 80018e2:	213a      	movs	r1, #58	; 0x3a
 80018e4:	4805      	ldr	r0, [pc, #20]	; (80018fc <_ZN11flatbuffers11EndianCheckEv+0x30>)
 80018e6:	f01e f8c3 	bl	801fa70 <__assert_func>
                     FLATBUFFERS_LITTLEENDIAN);
  (void)endiantest;
}
 80018ea:	bf00      	nop
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	08020f64 	.word	0x08020f64
 80018f8:	08020fa8 	.word	0x08020fa8
 80018fc:	08020fc8 	.word	0x08020fc8

08001900 <_ZNK11flatbuffers5Table9GetVTableEv>:

// "tables" use an offset table (possibly shared) that allows fields to be
// omitted and added at will, but uses an extra indirection to read.
class Table {
 public:
  const uint8_t *GetVTable() const {
 8001900:	b590      	push	{r4, r7, lr}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
    return data_ - ReadScalar<soffset_t>(data_);
 8001908:	687c      	ldr	r4, [r7, #4]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4618      	mov	r0, r3
 800190e:	f000 f9a6 	bl	8001c5e <_ZN11flatbuffers10ReadScalarIlEET_PKv>
 8001912:	4603      	mov	r3, r0
 8001914:	425b      	negs	r3, r3
 8001916:	4423      	add	r3, r4
  }
 8001918:	4618      	mov	r0, r3
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	bd90      	pop	{r4, r7, pc}

08001920 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>:

  // This gets the field offset for any of the functions below it, or 0
  // if the field was not present.
  voffset_t GetOptionalFieldOffset(voffset_t field) const {
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	460b      	mov	r3, r1
 800192a:	807b      	strh	r3, [r7, #2]
    // The vtable offset is always at the start.
    auto vtable = GetVTable();
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f7ff ffe7 	bl	8001900 <_ZNK11flatbuffers5Table9GetVTableEv>
 8001932:	60f8      	str	r0, [r7, #12]
    // The first element is the size of the vtable (fields + type id + itself).
    auto vtsize = ReadScalar<voffset_t>(vtable);
 8001934:	68f8      	ldr	r0, [r7, #12]
 8001936:	f000 f9a0 	bl	8001c7a <_ZN11flatbuffers10ReadScalarItEET_PKv>
 800193a:	4603      	mov	r3, r0
 800193c:	817b      	strh	r3, [r7, #10]
    // If the field we're accessing is outside the vtable, we're reading older
    // data, so it's the same as if the offset was 0 (not present).
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 800193e:	887a      	ldrh	r2, [r7, #2]
 8001940:	897b      	ldrh	r3, [r7, #10]
 8001942:	429a      	cmp	r2, r3
 8001944:	d207      	bcs.n	8001956 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt+0x36>
 8001946:	887b      	ldrh	r3, [r7, #2]
 8001948:	68fa      	ldr	r2, [r7, #12]
 800194a:	4413      	add	r3, r2
 800194c:	4618      	mov	r0, r3
 800194e:	f000 f994 	bl	8001c7a <_ZN11flatbuffers10ReadScalarItEET_PKv>
 8001952:	4603      	mov	r3, r0
 8001954:	e000      	b.n	8001958 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt+0x38>
 8001956:	2300      	movs	r3, #0
  }
 8001958:	4618      	mov	r0, r3
 800195a:	3710      	adds	r7, #16
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}

08001960 <_ZNK6tflite8SubGraph6inputsEv>:
    VT_NAME = 12
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<tflite::Tensor>> *tensors() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<tflite::Tensor>> *>(VT_TENSORS);
  }
  const ::flatbuffers::Vector<int32_t> *inputs() const {
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
    return GetPointer<const ::flatbuffers::Vector<int32_t> *>(VT_INPUTS);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2106      	movs	r1, #6
 800196c:	4618      	mov	r0, r3
 800196e:	f000 f9a0 	bl	8001cb2 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlmEEmEET_t>
 8001972:	4603      	mov	r3, r0
  }
 8001974:	4618      	mov	r0, r3
 8001976:	3708      	adds	r7, #8
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}

0800197c <_ZNK6tflite5Model7versionEv>:
    VT_BUFFERS = 12,
    VT_METADATA_BUFFER = 14,
    VT_METADATA = 16,
    VT_SIGNATURE_DEFS = 18
  };
  uint32_t version() const {
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_VERSION, 0);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2200      	movs	r2, #0
 8001988:	2104      	movs	r1, #4
 800198a:	4618      	mov	r0, r3
 800198c:	f000 f9a1 	bl	8001cd2 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 8001990:	4603      	mov	r3, r0
  }
 8001992:	4618      	mov	r0, r3
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <_ZNK6tflite5Model9subgraphsEv>:
  const ::flatbuffers::Vector<::flatbuffers::Offset<tflite::OperatorCode>> *operator_codes() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<tflite::OperatorCode>> *>(VT_OPERATOR_CODES);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<tflite::SubGraph>> *subgraphs() const {
 800199a:	b580      	push	{r7, lr}
 800199c:	b082      	sub	sp, #8
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<tflite::SubGraph>> *>(VT_SUBGRAPHS);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2108      	movs	r1, #8
 80019a6:	4618      	mov	r0, r3
 80019a8:	f000 f9b1 	bl	8001d0e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEmEEmEET_t>
 80019ac:	4603      	mov	r3, r0
  }
 80019ae:	4618      	mov	r0, r3
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <_ZN6tflite8GetModelEPKv>:
  }
  value = nullptr;
  type = BuiltinOptions2_NONE;
}

inline const tflite::Model *GetModel(const void *buf) {
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b082      	sub	sp, #8
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
  return ::flatbuffers::GetRoot<tflite::Model>(buf);
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f000 f9f8 	bl	8001db4 <_ZN11flatbuffers7GetRootIN6tflite5ModelEEEPKT_PKv>
 80019c4:	4603      	mov	r3, r0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
	...

080019d0 <_ZN6tflite15MicroOpResolverD1Ev>:
  // Returns the operator specific parsing function for the OpData for a
  // BuiltinOperator (if registered), else nullptr.
  virtual TfLiteBridgeBuiltinParseFunction GetOpDataParser(
      BuiltinOperator op) const = 0;

  virtual ~MicroOpResolver() {}
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	4a04      	ldr	r2, [pc, #16]	; (80019ec <_ZN6tflite15MicroOpResolverD1Ev+0x1c>)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4618      	mov	r0, r3
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr
 80019ec:	08028100 	.word	0x08028100

080019f0 <_ZN6tflite15MicroOpResolverD0Ev>:
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f7ff ffe9 	bl	80019d0 <_ZN6tflite15MicroOpResolverD1Ev>
 80019fe:	2104      	movs	r1, #4
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f01d fe89 	bl	801f718 <_ZdlPvj>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3708      	adds	r7, #8
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>:
  // pointer should be at least as long as this interpreter. TFLM supports only
  // one external context.
  TfLiteStatus SetMicroExternalContext(void* external_context_payload);

  TfLiteTensor* input(size_t index);
  size_t inputs_size() const {
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
    return model_->subgraphs()->Get(0)->inputs()->size();
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7ff ffbc 	bl	800199a <_ZNK6tflite5Model9subgraphsEv>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2100      	movs	r1, #0
 8001a26:	4618      	mov	r0, r3
 8001a28:	f000 f99e 	bl	8001d68 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmE3GetEm>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7ff ff96 	bl	8001960 <_ZNK6tflite8SubGraph6inputsEv>
 8001a34:	4603      	mov	r3, r0
 8001a36:	4618      	mov	r0, r3
 8001a38:	f000 f979 	bl	8001d2e <_ZNK11flatbuffers6VectorIlmE4sizeEv>
 8001a3c:	4603      	mov	r3, r0
  }
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <_ZN12_GLOBAL__N_111RegisterOpsERN6tflite22MicroMutableOpResolverILj1EEE>:
#include "hello_world_test.h"

namespace {
using HelloWorldOpResolver = tflite::MicroMutableOpResolver<1>;

TfLiteStatus RegisterOps(HelloWorldOpResolver& op_resolver) {
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b08a      	sub	sp, #40	; 0x28
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
  TF_LITE_ENSURE_STATUS(op_resolver.AddFullyConnected());
 8001a4e:	f107 0308 	add.w	r3, r7, #8
 8001a52:	4618      	mov	r0, r3
 8001a54:	f00e fbee 	bl	8010234 <_ZN6tflite24Register_FULLY_CONNECTEDEv>
 8001a58:	f107 0308 	add.w	r3, r7, #8
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f000 f9b4 	bl	8001dcc <_ZN6tflite22MicroMutableOpResolverILj1EE17AddFullyConnectedERK16TFLMRegistration>
 8001a64:	4603      	mov	r3, r0
 8001a66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001a6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d002      	beq.n	8001a78 <_ZN12_GLOBAL__N_111RegisterOpsERN6tflite22MicroMutableOpResolverILj1EEE+0x32>
 8001a72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a76:	e000      	b.n	8001a7a <_ZN12_GLOBAL__N_111RegisterOpsERN6tflite22MicroMutableOpResolverILj1EEE+0x34>
  return kTfLiteOk;
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3728      	adds	r7, #40	; 0x28
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
	...

08001a84 <__tcf_0>:

int LoadFloatModel() {
	static const tflite::Model* model = ::tflite::GetModel(g_hello_world_float_model_data);
	TFLITE_CHECK_EQ(model->version(), TFLITE_SCHEMA_VERSION);

	static HelloWorldOpResolver op_resolver;
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	4801      	ldr	r0, [pc, #4]	; (8001a90 <__tcf_0+0xc>)
 8001a8a:	f000 fb11 	bl	80020b0 <_ZN6tflite22MicroMutableOpResolverILj1EED1Ev>
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	2402ca9c 	.word	0x2402ca9c

08001a94 <__tcf_1>:

	// Arena size just a round number. The exact arena usage can be determined
	// using the RecordingMicroInterpreter.

	static tflite::MicroInterpreter interpreter(model, op_resolver, tensor_arena,
									   kTensorArenaSize);
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	4801      	ldr	r0, [pc, #4]	; (8001aa0 <__tcf_1+0xc>)
 8001a9a:	f008 fc77 	bl	800a38c <_ZN6tflite16MicroInterpreterD1Ev>
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	2402cad0 	.word	0x2402cad0

08001aa4 <LoadFloatModel>:
int LoadFloatModel() {
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b086      	sub	sp, #24
 8001aa8:	af04      	add	r7, sp, #16
	static const tflite::Model* model = ::tflite::GetModel(g_hello_world_float_model_data);
 8001aaa:	4b47      	ldr	r3, [pc, #284]	; (8001bc8 <LoadFloatModel+0x124>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f3bf 8f5b 	dmb	ish
 8001ab2:	f003 0301 	and.w	r3, r3, #1
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	bf0c      	ite	eq
 8001aba:	2301      	moveq	r3, #1
 8001abc:	2300      	movne	r3, #0
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d013      	beq.n	8001aec <LoadFloatModel+0x48>
 8001ac4:	4840      	ldr	r0, [pc, #256]	; (8001bc8 <LoadFloatModel+0x124>)
 8001ac6:	f01d fe29 	bl	801f71c <__cxa_guard_acquire>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	bf14      	ite	ne
 8001ad0:	2301      	movne	r3, #1
 8001ad2:	2300      	moveq	r3, #0
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d008      	beq.n	8001aec <LoadFloatModel+0x48>
 8001ada:	483c      	ldr	r0, [pc, #240]	; (8001bcc <LoadFloatModel+0x128>)
 8001adc:	f7ff ff6b 	bl	80019b6 <_ZN6tflite8GetModelEPKv>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	4a3b      	ldr	r2, [pc, #236]	; (8001bd0 <LoadFloatModel+0x12c>)
 8001ae4:	6013      	str	r3, [r2, #0]
 8001ae6:	4838      	ldr	r0, [pc, #224]	; (8001bc8 <LoadFloatModel+0x124>)
 8001ae8:	f01d fe24 	bl	801f734 <__cxa_guard_release>
	TFLITE_CHECK_EQ(model->version(), TFLITE_SCHEMA_VERSION);
 8001aec:	4b38      	ldr	r3, [pc, #224]	; (8001bd0 <LoadFloatModel+0x12c>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff ff43 	bl	800197c <_ZNK6tflite5Model7versionEv>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b03      	cmp	r3, #3
 8001afa:	d001      	beq.n	8001b00 <LoadFloatModel+0x5c>
 8001afc:	f01d ffb0 	bl	801fa60 <abort>
	static HelloWorldOpResolver op_resolver;
 8001b00:	4b34      	ldr	r3, [pc, #208]	; (8001bd4 <LoadFloatModel+0x130>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f3bf 8f5b 	dmb	ish
 8001b08:	f003 0301 	and.w	r3, r3, #1
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	bf0c      	ite	eq
 8001b10:	2301      	moveq	r3, #1
 8001b12:	2300      	movne	r3, #0
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d013      	beq.n	8001b42 <LoadFloatModel+0x9e>
 8001b1a:	482e      	ldr	r0, [pc, #184]	; (8001bd4 <LoadFloatModel+0x130>)
 8001b1c:	f01d fdfe 	bl	801f71c <__cxa_guard_acquire>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	bf14      	ite	ne
 8001b26:	2301      	movne	r3, #1
 8001b28:	2300      	moveq	r3, #0
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d008      	beq.n	8001b42 <LoadFloatModel+0x9e>
 8001b30:	4829      	ldr	r0, [pc, #164]	; (8001bd8 <LoadFloatModel+0x134>)
 8001b32:	f000 f96d 	bl	8001e10 <_ZN6tflite22MicroMutableOpResolverILj1EEC1Ev>
 8001b36:	4829      	ldr	r0, [pc, #164]	; (8001bdc <LoadFloatModel+0x138>)
 8001b38:	f01d ffb8 	bl	801faac <atexit>
 8001b3c:	4825      	ldr	r0, [pc, #148]	; (8001bd4 <LoadFloatModel+0x130>)
 8001b3e:	f01d fdf9 	bl	801f734 <__cxa_guard_release>
	TF_LITE_ENSURE_STATUS(RegisterOps(op_resolver));
 8001b42:	4825      	ldr	r0, [pc, #148]	; (8001bd8 <LoadFloatModel+0x134>)
 8001b44:	f7ff ff7f 	bl	8001a46 <_ZN12_GLOBAL__N_111RegisterOpsERN6tflite22MicroMutableOpResolverILj1EEE>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	71fb      	strb	r3, [r7, #7]
 8001b4c:	79fb      	ldrb	r3, [r7, #7]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <LoadFloatModel+0xb2>
 8001b52:	79fb      	ldrb	r3, [r7, #7]
 8001b54:	e034      	b.n	8001bc0 <LoadFloatModel+0x11c>
									   kTensorArenaSize);
 8001b56:	4b22      	ldr	r3, [pc, #136]	; (8001be0 <LoadFloatModel+0x13c>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f3bf 8f5b 	dmb	ish
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	bf0c      	ite	eq
 8001b66:	2301      	moveq	r3, #1
 8001b68:	2300      	movne	r3, #0
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d020      	beq.n	8001bb2 <LoadFloatModel+0x10e>
 8001b70:	481b      	ldr	r0, [pc, #108]	; (8001be0 <LoadFloatModel+0x13c>)
 8001b72:	f01d fdd3 	bl	801f71c <__cxa_guard_acquire>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	bf14      	ite	ne
 8001b7c:	2301      	movne	r3, #1
 8001b7e:	2300      	moveq	r3, #0
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d015      	beq.n	8001bb2 <LoadFloatModel+0x10e>
 8001b86:	4b12      	ldr	r3, [pc, #72]	; (8001bd0 <LoadFloatModel+0x12c>)
 8001b88:	6819      	ldr	r1, [r3, #0]
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	9303      	str	r3, [sp, #12]
 8001b8e:	2300      	movs	r3, #0
 8001b90:	9302      	str	r3, [sp, #8]
 8001b92:	2300      	movs	r3, #0
 8001b94:	9301      	str	r3, [sp, #4]
 8001b96:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001b9a:	9300      	str	r3, [sp, #0]
 8001b9c:	4b11      	ldr	r3, [pc, #68]	; (8001be4 <LoadFloatModel+0x140>)
 8001b9e:	4a0e      	ldr	r2, [pc, #56]	; (8001bd8 <LoadFloatModel+0x134>)
 8001ba0:	4811      	ldr	r0, [pc, #68]	; (8001be8 <LoadFloatModel+0x144>)
 8001ba2:	f008 fb9b 	bl	800a2dc <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_22MicroResourceVariablesEPNS_22MicroProfilerInterfaceEb>
 8001ba6:	4811      	ldr	r0, [pc, #68]	; (8001bec <LoadFloatModel+0x148>)
 8001ba8:	f01d ff80 	bl	801faac <atexit>
 8001bac:	480c      	ldr	r0, [pc, #48]	; (8001be0 <LoadFloatModel+0x13c>)
 8001bae:	f01d fdc1 	bl	801f734 <__cxa_guard_release>
	interpreter.AllocateTensors();
 8001bb2:	480d      	ldr	r0, [pc, #52]	; (8001be8 <LoadFloatModel+0x144>)
 8001bb4:	f008 fdc2 	bl	800a73c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>

//	TF_LITE_ENSURE_STATUS(interpreter.AllocateTensors());
//	pInterpreter = &interpreter;
	pInterpreter = &interpreter;
 8001bb8:	4b0d      	ldr	r3, [pc, #52]	; (8001bf0 <LoadFloatModel+0x14c>)
 8001bba:	4a0b      	ldr	r2, [pc, #44]	; (8001be8 <LoadFloatModel+0x144>)
 8001bbc:	601a      	str	r2, [r3, #0]
	return 0;
 8001bbe:	2300      	movs	r3, #0
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3708      	adds	r7, #8
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	2402ca98 	.word	0x2402ca98
 8001bcc:	08028120 	.word	0x08028120
 8001bd0:	2402ca94 	.word	0x2402ca94
 8001bd4:	2402cacc 	.word	0x2402cacc
 8001bd8:	2402ca9c 	.word	0x2402ca9c
 8001bdc:	08001a85 	.word	0x08001a85
 8001be0:	2402cb8c 	.word	0x2402cb8c
 8001be4:	2402bedc 	.word	0x2402bedc
 8001be8:	2402cad0 	.word	0x2402cad0
 8001bec:	08001a95 	.word	0x08001a95
 8001bf0:	2402bed8 	.word	0x2402bed8

08001bf4 <Invoke>:

float_t Invoke(float_t i) {
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	ed87 0a01 	vstr	s0, [r7, #4]
	(*pInterpreter).input(0)->data.f[0] = i;
 8001bfe:	4b11      	ldr	r3, [pc, #68]	; (8001c44 <Invoke+0x50>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2100      	movs	r1, #0
 8001c04:	4618      	mov	r0, r3
 8001c06:	f008 ff37 	bl	800aa78 <_ZN6tflite16MicroInterpreter5inputEj>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	691b      	ldr	r3, [r3, #16]
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	601a      	str	r2, [r3, #0]
	TfLiteStatus s = (*pInterpreter).Invoke();
 8001c12:	4b0c      	ldr	r3, [pc, #48]	; (8001c44 <Invoke+0x50>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f008 ff00 	bl	800aa1c <_ZN6tflite16MicroInterpreter6InvokeEv>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	73fb      	strb	r3, [r7, #15]
	TfLiteStatus b = s;
 8001c20:	7bfb      	ldrb	r3, [r7, #15]
 8001c22:	73bb      	strb	r3, [r7, #14]
	return (*pInterpreter).output(0)->data.f[0];
 8001c24:	4b07      	ldr	r3, [pc, #28]	; (8001c44 <Invoke+0x50>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2100      	movs	r1, #0
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f008 ff46 	bl	800aabc <_ZN6tflite16MicroInterpreter6outputEj>
 8001c30:	4603      	mov	r3, r0
 8001c32:	691b      	ldr	r3, [r3, #16]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	ee07 3a90 	vmov	s15, r3
}
 8001c3a:	eeb0 0a67 	vmov.f32	s0, s15
 8001c3e:	3710      	adds	r7, #16
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	2402bed8 	.word	0x2402bed8

08001c48 <_ZN11flatbuffers12EndianScalarImEET_S1_>:
#if defined(_MSC_VER)
  #pragma warning(pop)
#endif


template<typename T> T EndianScalar(T t) {
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  #if FLATBUFFERS_LITTLEENDIAN
    return t;
 8001c50:	687b      	ldr	r3, [r7, #4]
  #else
    return EndianSwap(t);
  #endif
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr

08001c5e <_ZN11flatbuffers10ReadScalarIlEET_PKv>:

template<typename T>
// UBSAN: C++ aliasing type rules, see std::bit_cast<> for details.
FLATBUFFERS_SUPPRESS_UBSAN("alignment")
T ReadScalar(const void *p) {
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b082      	sub	sp, #8
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f000 f8e8 	bl	8001e40 <_ZN11flatbuffers12EndianScalarIlEET_S1_>
 8001c70:	4603      	mov	r3, r0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <_ZN11flatbuffers10ReadScalarItEET_PKv>:
T ReadScalar(const void *p) {
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b082      	sub	sp, #8
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	881b      	ldrh	r3, [r3, #0]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f000 f8e5 	bl	8001e56 <_ZN11flatbuffers12EndianScalarItEET_S1_>
 8001c8c:	4603      	mov	r3, r0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <_ZN11flatbuffers10ReadScalarImEET_PKv>:
T ReadScalar(const void *p) {
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b082      	sub	sp, #8
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7ff ffd0 	bl	8001c48 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8001ca8:	4603      	mov	r3, r0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlmEEmEET_t>:
    auto p = data_ + field_offset;
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
                        : nullptr;
  }
  template<typename P, typename OffsetSize = uoffset_t>
  P GetPointer(voffset_t field) const {
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b082      	sub	sp, #8
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
 8001cba:	460b      	mov	r3, r1
 8001cbc:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P, OffsetSize>(field);
 8001cbe:	887b      	ldrh	r3, [r7, #2]
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f000 f8d3 	bl	8001e6e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlmEEmEET_t>
 8001cc8:	4603      	mov	r3, r0
  }
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b086      	sub	sp, #24
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	60f8      	str	r0, [r7, #12]
 8001cda:	460b      	mov	r3, r1
 8001cdc:	607a      	str	r2, [r7, #4]
 8001cde:	817b      	strh	r3, [r7, #10]
    auto field_offset = GetOptionalFieldOffset(field);
 8001ce0:	897b      	ldrh	r3, [r7, #10]
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	68f8      	ldr	r0, [r7, #12]
 8001ce6:	f7ff fe1b 	bl	8001920 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8001cea:	4603      	mov	r3, r0
 8001cec:	82fb      	strh	r3, [r7, #22]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8001cee:	8afb      	ldrh	r3, [r7, #22]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d007      	beq.n	8001d04 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_+0x32>
 8001cf4:	68fa      	ldr	r2, [r7, #12]
 8001cf6:	8afb      	ldrh	r3, [r7, #22]
 8001cf8:	4413      	add	r3, r2
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7ff ffcb 	bl	8001c96 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8001d00:	4603      	mov	r3, r0
 8001d02:	e000      	b.n	8001d06 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_+0x34>
 8001d04:	687b      	ldr	r3, [r7, #4]
  }
 8001d06:	4618      	mov	r0, r3
 8001d08:	3718      	adds	r7, #24
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEmEEmEET_t>:
  P GetPointer(voffset_t field) const {
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b082      	sub	sp, #8
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
 8001d16:	460b      	mov	r3, r1
 8001d18:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P, OffsetSize>(field);
 8001d1a:	887b      	ldrh	r3, [r7, #2]
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f000 f8c5 	bl	8001eae <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEmEEmEET_t>
 8001d24:	4603      	mov	r3, r0
  }
 8001d26:	4618      	mov	r0, r3
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <_ZNK11flatbuffers6VectorIlmE4sizeEv>:
      scalar_tag;

  static FLATBUFFERS_CONSTEXPR bool is_span_observable =
      scalar_tag::value && (FLATBUFFERS_LITTLEENDIAN || sizeof(T) == 1);

  SizeT size() const { return EndianScalar(length_); }
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b082      	sub	sp, #8
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7ff ff84 	bl	8001c48 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8001d40:	4603      	mov	r3, r0
 8001d42:	4618      	mov	r0, r3
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmE4sizeEv>:
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b082      	sub	sp, #8
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7ff ff76 	bl	8001c48 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
	...

08001d68 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmE3GetEm>:
  typedef SizeT size_type;
  typedef typename IndirectHelper<T>::return_type return_type;
  typedef typename IndirectHelper<T>::mutable_return_type mutable_return_type;
  typedef return_type value_type;

  return_type Get(SizeT i) const {
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f7ff ffe9 	bl	8001d4a <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmE4sizeEv>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d305      	bcc.n	8001d8c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmE3GetEm+0x24>
 8001d80:	4b09      	ldr	r3, [pc, #36]	; (8001da8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmE3GetEm+0x40>)
 8001d82:	4a0a      	ldr	r2, [pc, #40]	; (8001dac <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmE3GetEm+0x44>)
 8001d84:	21b0      	movs	r1, #176	; 0xb0
 8001d86:	480a      	ldr	r0, [pc, #40]	; (8001db0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmE3GetEm+0x48>)
 8001d88:	f01d fe72 	bl	801fa70 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f000 f8ae 	bl	8001eee <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmE4DataEv>
 8001d92:	4603      	mov	r3, r0
 8001d94:	6839      	ldr	r1, [r7, #0]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f000 f8b5 	bl	8001f06 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8SubGraphEEEE4ReadEPKhm>
 8001d9c:	4603      	mov	r3, r0
  }
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	08021024 	.word	0x08021024
 8001dac:	08021030 	.word	0x08021030
 8001db0:	08021120 	.word	0x08021120

08001db4 <_ZN11flatbuffers7GetRootIN6tflite5ModelEEEPKT_PKv>:
template<typename T, typename SizeT = uoffset_t>
T *GetMutableSizePrefixedRoot(void *buf) {
  return GetMutableRoot<T>(reinterpret_cast<uint8_t *>(buf) + sizeof(SizeT));
}

template<typename T> const T *GetRoot(const void *buf) {
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  return GetMutableRoot<T>(const_cast<void *>(buf));
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f000 f8b6 	bl	8001f2e <_ZN11flatbuffers14GetMutableRootIN6tflite5ModelEEEPT_Pv>
 8001dc2:	4603      	mov	r3, r0
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3708      	adds	r7, #8
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <_ZN6tflite22MicroMutableOpResolverILj1EE17AddFullyConnectedERK16TFLMRegistration>:
  TfLiteStatus AddFramer() {
    // TODO(b/286250473): change back name to "Framer" and remove namespace
    return AddCustom("SignalFramer", tflite::tflm_signal::Register_FRAMER());
  }

  TfLiteStatus AddFullyConnected(
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
      const TFLMRegistration& registration = Register_FULLY_CONNECTED()) {
    return AddBuiltin(BuiltinOperator_FULLY_CONNECTED, registration,
 8001dd6:	4b05      	ldr	r3, [pc, #20]	; (8001dec <_ZN6tflite22MicroMutableOpResolverILj1EE17AddFullyConnectedERK16TFLMRegistration+0x20>)
 8001dd8:	683a      	ldr	r2, [r7, #0]
 8001dda:	2109      	movs	r1, #9
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f000 f8bd 	bl	8001f5c <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
 8001de2:	4603      	mov	r3, r0
                      ParseFullyConnected);
  }
 8001de4:	4618      	mov	r0, r3
 8001de6:	3708      	adds	r7, #8
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	080035e5 	.word	0x080035e5

08001df0 <_ZN6tflite15MicroOpResolverC1Ev>:
class MicroOpResolver {
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	4a04      	ldr	r2, [pc, #16]	; (8001e0c <_ZN6tflite15MicroOpResolverC1Ev+0x1c>)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	601a      	str	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4618      	mov	r0, r3
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr
 8001e0c:	08028100 	.word	0x08028100

08001e10 <_ZN6tflite22MicroMutableOpResolverILj1EEC1Ev>:
  explicit MicroMutableOpResolver() {}
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7ff ffe8 	bl	8001df0 <_ZN6tflite15MicroOpResolverC1Ev>
 8001e20:	4a06      	ldr	r2, [pc, #24]	; (8001e3c <_ZN6tflite22MicroMutableOpResolverILj1EEC1Ev+0x2c>)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	601a      	str	r2, [r3, #0]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	621a      	str	r2, [r3, #32]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	62da      	str	r2, [r3, #44]	; 0x2c
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4618      	mov	r0, r3
 8001e36:	3708      	adds	r7, #8
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	080280e4 	.word	0x080280e4

08001e40 <_ZN11flatbuffers12EndianScalarIlEET_S1_>:
template<typename T> T EndianScalar(T t) {
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
    return t;
 8001e48:	687b      	ldr	r3, [r7, #4]
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr

08001e56 <_ZN11flatbuffers12EndianScalarItEET_S1_>:
template<typename T> T EndianScalar(T t) {
 8001e56:	b480      	push	{r7}
 8001e58:	b083      	sub	sp, #12
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	80fb      	strh	r3, [r7, #6]
    return t;
 8001e60:	88fb      	ldrh	r3, [r7, #6]
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr

08001e6e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlmEEmEET_t>:
  P GetPointer(voffset_t field) {
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b084      	sub	sp, #16
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
 8001e76:	460b      	mov	r3, r1
 8001e78:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8001e7a:	887b      	ldrh	r3, [r7, #2]
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f7ff fd4e 	bl	8001920 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8001e84:	4603      	mov	r3, r0
 8001e86:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	89fb      	ldrh	r3, [r7, #14]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8001e90:	89fb      	ldrh	r3, [r7, #14]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d006      	beq.n	8001ea4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlmEEmEET_t+0x36>
 8001e96:	68b8      	ldr	r0, [r7, #8]
 8001e98:	f7ff fefd 	bl	8001c96 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	4413      	add	r3, r2
                        : nullptr;
 8001ea2:	e000      	b.n	8001ea6 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlmEEmEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8001ea4:	2300      	movs	r3, #0
  }
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3710      	adds	r7, #16
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEmEEmEET_t>:
  P GetPointer(voffset_t field) {
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b084      	sub	sp, #16
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8001eba:	887b      	ldrh	r3, [r7, #2]
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f7ff fd2e 	bl	8001920 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	89fb      	ldrh	r3, [r7, #14]
 8001ecc:	4413      	add	r3, r2
 8001ece:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8001ed0:	89fb      	ldrh	r3, [r7, #14]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d006      	beq.n	8001ee4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEmEEmEET_t+0x36>
 8001ed6:	68b8      	ldr	r0, [r7, #8]
 8001ed8:	f7ff fedd 	bl	8001c96 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8001edc:	4602      	mov	r2, r0
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	4413      	add	r3, r2
                        : nullptr;
 8001ee2:	e000      	b.n	8001ee6 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEmEEmEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8001ee4:	2300      	movs	r3, #0
  }
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmE4DataEv>:
    FLATBUFFERS_ASSERT(i < size());
    return const_cast<mutable_return_type>(IndirectHelper<T>::Read(Data(), i));
  }

  // The raw data in little endian format. Use with care.
  const uint8_t *Data() const {
 8001eee:	b480      	push	{r7}
 8001ef0:	b083      	sub	sp, #12
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	3304      	adds	r3, #4
  }
 8001efa:	4618      	mov	r0, r3
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr

08001f06 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8SubGraphEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *const p, const offset_type i) {
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b084      	sub	sp, #16
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
 8001f0e:	6039      	str	r1, [r7, #0]
    const uint8_t *const offset_location = p + i * element_stride;
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	4413      	add	r3, r2
 8001f18:	60fb      	str	r3, [r7, #12]
        offset_location + ReadScalar<offset_type>(offset_location));
 8001f1a:	68f8      	ldr	r0, [r7, #12]
 8001f1c:	f7ff febb 	bl	8001c96 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8001f20:	4602      	mov	r2, r0
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	4413      	add	r3, r2
  }
 8001f26:	4618      	mov	r0, r3
 8001f28:	3710      	adds	r7, #16
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <_ZN11flatbuffers14GetMutableRootIN6tflite5ModelEEEPT_Pv>:
template<typename T> T *GetMutableRoot(void *buf) {
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b082      	sub	sp, #8
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
  if (!buf) return nullptr;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d101      	bne.n	8001f40 <_ZN11flatbuffers14GetMutableRootIN6tflite5ModelEEEPT_Pv+0x12>
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	e009      	b.n	8001f54 <_ZN11flatbuffers14GetMutableRootIN6tflite5ModelEEEPT_Pv+0x26>
  EndianCheck();
 8001f40:	f7ff fcc4 	bl	80018cc <_ZN11flatbuffers11EndianCheckEv>
      EndianScalar(*reinterpret_cast<uoffset_t *>(buf)));
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff fe7d 	bl	8001c48 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	4413      	add	r3, r2
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3708      	adds	r7, #8
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>:
  }

  unsigned int GetRegistrationLength() { return registrations_len_; }

 private:
  TfLiteStatus AddBuiltin(tflite::BuiltinOperator op,
 8001f5c:	b5b0      	push	{r4, r5, r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	60b9      	str	r1, [r7, #8]
 8001f66:	607a      	str	r2, [r7, #4]
 8001f68:	603b      	str	r3, [r7, #0]
                          const TFLMRegistration& registration,
                          TfLiteBridgeBuiltinParseFunction parser) {
    if (op == BuiltinOperator_CUSTOM) {
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	2b20      	cmp	r3, #32
 8001f6e:	d107      	bne.n	8001f80 <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x24>
      MicroPrintf("Invalid parameter BuiltinOperator_CUSTOM to the ");
 8001f70:	4833      	ldr	r0, [pc, #204]	; (8002040 <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xe4>)
 8001f72:	f009 fc4d 	bl	800b810 <_Z11MicroPrintfPKcz>
      MicroPrintf("AddBuiltin function.");
 8001f76:	4833      	ldr	r0, [pc, #204]	; (8002044 <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xe8>)
 8001f78:	f009 fc4a 	bl	800b810 <_Z11MicroPrintfPKcz>
      return kTfLiteError;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e05a      	b.n	8002036 <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xda>
    }

    if (FindOp(op) != nullptr) {
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	68b9      	ldr	r1, [r7, #8]
 8001f88:	68f8      	ldr	r0, [r7, #12]
 8001f8a:	4798      	blx	r3
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	bf14      	ite	ne
 8001f92:	2301      	movne	r3, #1
 8001f94:	2300      	moveq	r3, #0
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d008      	beq.n	8001fae <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x52>
      MicroPrintf("Calling AddBuiltin with the same op more than ");
 8001f9c:	482a      	ldr	r0, [pc, #168]	; (8002048 <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xec>)
 8001f9e:	f009 fc37 	bl	800b810 <_Z11MicroPrintfPKcz>
      MicroPrintf("once is not supported (Op: #%d).", op);
 8001fa2:	68b9      	ldr	r1, [r7, #8]
 8001fa4:	4829      	ldr	r0, [pc, #164]	; (800204c <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xf0>)
 8001fa6:	f009 fc33 	bl	800b810 <_Z11MicroPrintfPKcz>
      return kTfLiteError;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e043      	b.n	8002036 <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xda>
    }

    if (registrations_len_ >= tOpCount) {
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	6a1b      	ldr	r3, [r3, #32]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d009      	beq.n	8001fca <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x6e>
      MicroPrintf("Couldn't register builtin op #%d, resolver size ", op);
 8001fb6:	68b9      	ldr	r1, [r7, #8]
 8001fb8:	4825      	ldr	r0, [pc, #148]	; (8002050 <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xf4>)
 8001fba:	f009 fc29 	bl	800b810 <_Z11MicroPrintfPKcz>
      MicroPrintf("is too small (%d).", tOpCount);
 8001fbe:	2101      	movs	r1, #1
 8001fc0:	4824      	ldr	r0, [pc, #144]	; (8002054 <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xf8>)
 8001fc2:	f009 fc25 	bl	800b810 <_Z11MicroPrintfPKcz>
      return kTfLiteError;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e035      	b.n	8002036 <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xda>
    }

    registrations_[registrations_len_] = registration;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	6a1a      	ldr	r2, [r3, #32]
 8001fce:	68f9      	ldr	r1, [r7, #12]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	00db      	lsls	r3, r3, #3
 8001fd4:	1a9b      	subs	r3, r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	440b      	add	r3, r1
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	1d1c      	adds	r4, r3, #4
 8001fde:	4615      	mov	r5, r2
 8001fe0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fe2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fe4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001fe8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    // Strictly speaking, the builtin_code is not necessary for TFLM but filling
    // it in regardless.
    registrations_[registrations_len_].builtin_code = op;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	6a1a      	ldr	r2, [r3, #32]
 8001ff0:	68f9      	ldr	r1, [r7, #12]
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	00db      	lsls	r3, r3, #3
 8001ff6:	1a9b      	subs	r3, r3, r2
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	440b      	add	r3, r1
 8001ffc:	3318      	adds	r3, #24
 8001ffe:	68ba      	ldr	r2, [r7, #8]
 8002000:	601a      	str	r2, [r3, #0]
    registrations_len_++;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	6a1b      	ldr	r3, [r3, #32]
 8002006:	1c5a      	adds	r2, r3, #1
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	621a      	str	r2, [r3, #32]

    builtin_codes_[num_buitin_ops_] = op;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002010:	68fa      	ldr	r2, [r7, #12]
 8002012:	3308      	adds	r3, #8
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	4413      	add	r3, r2
 8002018:	68ba      	ldr	r2, [r7, #8]
 800201a:	605a      	str	r2, [r3, #4]
    builtin_parsers_[num_buitin_ops_] = parser;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	320a      	adds	r2, #10
 8002024:	6839      	ldr	r1, [r7, #0]
 8002026:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    num_buitin_ops_++;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800202e:	1c5a      	adds	r2, r3, #1
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	62da      	str	r2, [r3, #44]	; 0x2c

    return kTfLiteOk;
 8002034:	2300      	movs	r3, #0
  }
 8002036:	4618      	mov	r0, r3
 8002038:	3710      	adds	r7, #16
 800203a:	46bd      	mov	sp, r7
 800203c:	bdb0      	pop	{r4, r5, r7, pc}
 800203e:	bf00      	nop
 8002040:	08021144 	.word	0x08021144
 8002044:	08021178 	.word	0x08021178
 8002048:	08021190 	.word	0x08021190
 800204c:	080211c0 	.word	0x080211c0
 8002050:	080211e4 	.word	0x080211e4
 8002054:	08021218 	.word	0x08021218

08002058 <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpENS_15BuiltinOperatorE>:
  const TFLMRegistration* FindOp(tflite::BuiltinOperator op) const override {
 8002058:	b480      	push	{r7}
 800205a:	b085      	sub	sp, #20
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
    if (op == BuiltinOperator_CUSTOM) return nullptr;
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	2b20      	cmp	r3, #32
 8002066:	d101      	bne.n	800206c <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpENS_15BuiltinOperatorE+0x14>
 8002068:	2300      	movs	r3, #0
 800206a:	e01b      	b.n	80020a4 <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpENS_15BuiltinOperatorE+0x4c>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 800206c:	2300      	movs	r3, #0
 800206e:	60fb      	str	r3, [r7, #12]
 8002070:	e012      	b.n	8002098 <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpENS_15BuiltinOperatorE+0x40>
      const TFLMRegistration& registration = registrations_[i];
 8002072:	68fa      	ldr	r2, [r7, #12]
 8002074:	4613      	mov	r3, r2
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	1a9b      	subs	r3, r3, r2
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	4413      	add	r3, r2
 8002080:	3304      	adds	r3, #4
 8002082:	60bb      	str	r3, [r7, #8]
      if (registration.builtin_code == op) {
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	695b      	ldr	r3, [r3, #20]
 8002088:	683a      	ldr	r2, [r7, #0]
 800208a:	429a      	cmp	r2, r3
 800208c:	d101      	bne.n	8002092 <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpENS_15BuiltinOperatorE+0x3a>
        return &registration;
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	e008      	b.n	80020a4 <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpENS_15BuiltinOperatorE+0x4c>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	3301      	adds	r3, #1
 8002096:	60fb      	str	r3, [r7, #12]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6a1b      	ldr	r3, [r3, #32]
 800209c:	68fa      	ldr	r2, [r7, #12]
 800209e:	429a      	cmp	r2, r3
 80020a0:	d3e7      	bcc.n	8002072 <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpENS_15BuiltinOperatorE+0x1a>
    return nullptr;
 80020a2:	2300      	movs	r3, #0
  }
 80020a4:	4618      	mov	r0, r3
 80020a6:	3714      	adds	r7, #20
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <_ZN6tflite22MicroMutableOpResolverILj1EED1Ev>:
class MicroMutableOpResolver : public MicroOpResolver {
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	4a05      	ldr	r2, [pc, #20]	; (80020d0 <_ZN6tflite22MicroMutableOpResolverILj1EED1Ev+0x20>)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	601a      	str	r2, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7ff fc85 	bl	80019d0 <_ZN6tflite15MicroOpResolverD1Ev>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4618      	mov	r0, r3
 80020ca:	3708      	adds	r7, #8
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	080280e4 	.word	0x080280e4

080020d4 <_ZN6tflite22MicroMutableOpResolverILj1EED0Ev>:
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f7ff ffe7 	bl	80020b0 <_ZN6tflite22MicroMutableOpResolverILj1EED1Ev>
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f000 f85c 	bl	80021a0 <_ZN6tflite22MicroMutableOpResolverILj1EEdlEPv>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4618      	mov	r0, r3
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpEPKc>:
  const TFLMRegistration* FindOp(const char* op) const override {
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b084      	sub	sp, #16
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
 80020fa:	6039      	str	r1, [r7, #0]
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 80020fc:	2300      	movs	r3, #0
 80020fe:	60fb      	str	r3, [r7, #12]
 8002100:	e01a      	b.n	8002138 <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpEPKc+0x46>
      const TFLMRegistration& registration = registrations_[i];
 8002102:	68fa      	ldr	r2, [r7, #12]
 8002104:	4613      	mov	r3, r2
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	1a9b      	subs	r3, r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	4413      	add	r3, r2
 8002110:	3304      	adds	r3, #4
 8002112:	60bb      	str	r3, [r7, #8]
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	695b      	ldr	r3, [r3, #20]
 8002118:	2b20      	cmp	r3, #32
 800211a:	d10a      	bne.n	8002132 <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpEPKc+0x40>
          (strcmp(registration.custom_name, op) == 0)) {
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	699b      	ldr	r3, [r3, #24]
 8002120:	6839      	ldr	r1, [r7, #0]
 8002122:	4618      	mov	r0, r3
 8002124:	f7fe f8dc 	bl	80002e0 <strcmp>
 8002128:	4603      	mov	r3, r0
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 800212a:	2b00      	cmp	r3, #0
 800212c:	d101      	bne.n	8002132 <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpEPKc+0x40>
        return &registration;
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	e008      	b.n	8002144 <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpEPKc+0x52>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	3301      	adds	r3, #1
 8002136:	60fb      	str	r3, [r7, #12]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6a1b      	ldr	r3, [r3, #32]
 800213c:	68fa      	ldr	r2, [r7, #12]
 800213e:	429a      	cmp	r2, r3
 8002140:	d3df      	bcc.n	8002102 <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpEPKc+0x10>
    return nullptr;
 8002142:	2300      	movs	r3, #0
  }
 8002144:	4618      	mov	r0, r3
 8002146:	3710      	adds	r7, #16
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <_ZNK6tflite22MicroMutableOpResolverILj1EE15GetOpDataParserENS_15BuiltinOperatorE>:
  TfLiteBridgeBuiltinParseFunction GetOpDataParser(
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	6039      	str	r1, [r7, #0]
    TFLITE_DCHECK(num_buitin_ops_ <= tOpCount);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800215a:	2b01      	cmp	r3, #1
 800215c:	d901      	bls.n	8002162 <_ZNK6tflite22MicroMutableOpResolverILj1EE15GetOpDataParserENS_15BuiltinOperatorE+0x16>
 800215e:	f01d fc7f 	bl	801fa60 <abort>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
 8002162:	2300      	movs	r3, #0
 8002164:	60fb      	str	r3, [r7, #12]
 8002166:	e011      	b.n	800218c <_ZNK6tflite22MicroMutableOpResolverILj1EE15GetOpDataParserENS_15BuiltinOperatorE+0x40>
      if (builtin_codes_[i] == op) return builtin_parsers_[i];
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	3308      	adds	r3, #8
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	4413      	add	r3, r2
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	683a      	ldr	r2, [r7, #0]
 8002176:	429a      	cmp	r2, r3
 8002178:	d105      	bne.n	8002186 <_ZNK6tflite22MicroMutableOpResolverILj1EE15GetOpDataParserENS_15BuiltinOperatorE+0x3a>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	68fa      	ldr	r2, [r7, #12]
 800217e:	320a      	adds	r2, #10
 8002180:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002184:	e008      	b.n	8002198 <_ZNK6tflite22MicroMutableOpResolverILj1EE15GetOpDataParserENS_15BuiltinOperatorE+0x4c>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	3301      	adds	r3, #1
 800218a:	60fb      	str	r3, [r7, #12]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002190:	68fa      	ldr	r2, [r7, #12]
 8002192:	429a      	cmp	r2, r3
 8002194:	d3e8      	bcc.n	8002168 <_ZNK6tflite22MicroMutableOpResolverILj1EE15GetOpDataParserENS_15BuiltinOperatorE+0x1c>
    return nullptr;
 8002196:	2300      	movs	r3, #0
  }
 8002198:	4618      	mov	r0, r3
 800219a:	3710      	adds	r7, #16
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <_ZN6tflite22MicroMutableOpResolverILj1EEdlEPv>:
  TF_LITE_REMOVE_VIRTUAL_DELETE
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	bf00      	nop
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <_ZN6tflite21Register_CONV_2D_INT8Ev>:
// int16 activations and int8 weights and uses the latency optimized
// implementations.
TFLMRegistration Register_CONV_2D_INT16();

#else
inline TFLMRegistration Register_CONV_2D_INT8() { return Register_CONV_2D(); }
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4618      	mov	r0, r3
 80021c0:	f00a fcf6 	bl	800cbb0 <_ZN6tflite16Register_CONV_2DEv>
 80021c4:	bf00      	nop
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <_ZN6tflite31Register_DEPTHWISE_CONV_2D_INT8Ev>:
// int8 activations and int4 weights and uses the latency optimized
// implementations.
TFLMRegistration Register_DEPTHWISE_CONV_2D_INT4();

#else
inline TFLMRegistration Register_DEPTHWISE_CONV_2D_INT8() {
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b082      	sub	sp, #8
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
  return Register_DEPTHWISE_CONV_2D();
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4618      	mov	r0, r3
 80021da:	f00c fd1b 	bl	800ec14 <_ZN6tflite26Register_DEPTHWISE_CONV_2DEv>
 80021de:	bf00      	nop
}
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	3708      	adds	r7, #8
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <_ZN6tflite29Register_AVERAGE_POOL_2D_INT8Ev>:

TFLMRegistration Register_AVERAGE_POOL_2D_INT16();

TFLMRegistration Register_MAX_POOL_2D_INT16();
#else
inline TFLMRegistration Register_AVERAGE_POOL_2D_INT8() {
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  return tflite::Register_AVERAGE_POOL_2D();
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f00f fb70 	bl	80118d8 <_ZN6tflite24Register_AVERAGE_POOL_2DEv>
 80021f8:	bf00      	nop
}
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <_ZN6tflite21Register_SOFTMAX_INT8Ev>:
// Returns a TFLMRegistration struct for kernel variant that only supports
// int16 input/output and uses the latency optimized implementations.
TFLMRegistration Register_SOFTMAX_INT16();

#else
inline TFLMRegistration Register_SOFTMAX_INT8() { return Register_SOFTMAX(); }
 8002202:	b580      	push	{r7, lr}
 8002204:	b082      	sub	sp, #8
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4618      	mov	r0, r3
 800220e:	f010 fc69 	bl	8012ae4 <_ZN6tflite16Register_SOFTMAXEv>
 8002212:	bf00      	nop
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	3708      	adds	r7, #8
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <__tcf_0>:

  // Pull in only the operation implementations we need.
  // This relies on a complete list of all the ops needed by this graph.

  // NOLINTNEXTLINE(runtime-global-variables)
  static tflite::MicroMutableOpResolver<5> micro_op_resolver;
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
 8002220:	4801      	ldr	r0, [pc, #4]	; (8002228 <__tcf_0+0xc>)
 8002222:	f000 fa6d 	bl	8002700 <_ZN6tflite22MicroMutableOpResolverILj5EED1Ev>
 8002226:	bd80      	pop	{r7, pc}
 8002228:	2404eba0 	.word	0x2404eba0

0800222c <__tcf_1>:
  micro_op_resolver.AddSoftmax(tflite::Register_SOFTMAX_INT8());

  // Build an interpreter to run the model with.
  // NOLINTNEXTLINE(runtime-global-variables)
  static tflite::MicroInterpreter static_interpreter(
      model, micro_op_resolver, tensor_arena, kTensorArenaSize);
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
 8002230:	4801      	ldr	r0, [pc, #4]	; (8002238 <__tcf_1+0xc>)
 8002232:	f008 f8ab 	bl	800a38c <_ZN6tflite16MicroInterpreterD1Ev>
 8002236:	bd80      	pop	{r7, pc}
 8002238:	2404ec64 	.word	0x2404ec64

0800223c <setup>:
void setup() {
 800223c:	b580      	push	{r7, lr}
 800223e:	b0a2      	sub	sp, #136	; 0x88
 8002240:	af04      	add	r7, sp, #16
  tflite::InitializeTarget();
 8002242:	f009 fbb9 	bl	800b9b8 <_ZN6tflite16InitializeTargetEv>
  model = tflite::GetModel(g_person_detect_model_data);
 8002246:	485d      	ldr	r0, [pc, #372]	; (80023bc <setup+0x180>)
 8002248:	f7ff fbb5 	bl	80019b6 <_ZN6tflite8GetModelEPKv>
 800224c:	4603      	mov	r3, r0
 800224e:	4a5c      	ldr	r2, [pc, #368]	; (80023c0 <setup+0x184>)
 8002250:	6013      	str	r3, [r2, #0]
  if (model->version() != TFLITE_SCHEMA_VERSION) {
 8002252:	4b5b      	ldr	r3, [pc, #364]	; (80023c0 <setup+0x184>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4618      	mov	r0, r3
 8002258:	f7ff fb90 	bl	800197c <_ZNK6tflite5Model7versionEv>
 800225c:	4603      	mov	r3, r0
 800225e:	2b03      	cmp	r3, #3
 8002260:	bf14      	ite	ne
 8002262:	2301      	movne	r3, #1
 8002264:	2300      	moveq	r3, #0
 8002266:	b2db      	uxtb	r3, r3
 8002268:	2b00      	cmp	r3, #0
 800226a:	d00b      	beq.n	8002284 <setup+0x48>
    MicroPrintf(
 800226c:	4b54      	ldr	r3, [pc, #336]	; (80023c0 <setup+0x184>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff fb83 	bl	800197c <_ZNK6tflite5Model7versionEv>
 8002276:	4603      	mov	r3, r0
 8002278:	2203      	movs	r2, #3
 800227a:	4619      	mov	r1, r3
 800227c:	4851      	ldr	r0, [pc, #324]	; (80023c4 <setup+0x188>)
 800227e:	f009 fac7 	bl	800b810 <_Z11MicroPrintfPKcz>
    return;
 8002282:	e097      	b.n	80023b4 <setup+0x178>
  static tflite::MicroMutableOpResolver<5> micro_op_resolver;
 8002284:	4b50      	ldr	r3, [pc, #320]	; (80023c8 <setup+0x18c>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f3bf 8f5b 	dmb	ish
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	2b00      	cmp	r3, #0
 8002292:	bf0c      	ite	eq
 8002294:	2301      	moveq	r3, #1
 8002296:	2300      	movne	r3, #0
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b00      	cmp	r3, #0
 800229c:	d013      	beq.n	80022c6 <setup+0x8a>
 800229e:	484a      	ldr	r0, [pc, #296]	; (80023c8 <setup+0x18c>)
 80022a0:	f01d fa3c 	bl	801f71c <__cxa_guard_acquire>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	bf14      	ite	ne
 80022aa:	2301      	movne	r3, #1
 80022ac:	2300      	moveq	r3, #0
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d008      	beq.n	80022c6 <setup+0x8a>
 80022b4:	4845      	ldr	r0, [pc, #276]	; (80023cc <setup+0x190>)
 80022b6:	f000 f8f5 	bl	80024a4 <_ZN6tflite22MicroMutableOpResolverILj5EEC1Ev>
 80022ba:	4845      	ldr	r0, [pc, #276]	; (80023d0 <setup+0x194>)
 80022bc:	f01d fbf6 	bl	801faac <atexit>
 80022c0:	4841      	ldr	r0, [pc, #260]	; (80023c8 <setup+0x18c>)
 80022c2:	f01d fa37 	bl	801f734 <__cxa_guard_release>
  micro_op_resolver.AddAveragePool2D(tflite::Register_AVERAGE_POOL_2D_INT8());
 80022c6:	1d3b      	adds	r3, r7, #4
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7ff ff8d 	bl	80021e8 <_ZN6tflite29Register_AVERAGE_POOL_2D_INT8Ev>
 80022ce:	1d3b      	adds	r3, r7, #4
 80022d0:	4619      	mov	r1, r3
 80022d2:	483e      	ldr	r0, [pc, #248]	; (80023cc <setup+0x190>)
 80022d4:	f000 f900 	bl	80024d8 <_ZN6tflite22MicroMutableOpResolverILj5EE16AddAveragePool2DERK16TFLMRegistration>
  micro_op_resolver.AddConv2D(tflite::Register_CONV_2D_INT8());
 80022d8:	f107 0320 	add.w	r3, r7, #32
 80022dc:	4618      	mov	r0, r3
 80022de:	f7ff ff69 	bl	80021b4 <_ZN6tflite21Register_CONV_2D_INT8Ev>
 80022e2:	f107 0320 	add.w	r3, r7, #32
 80022e6:	4619      	mov	r1, r3
 80022e8:	4838      	ldr	r0, [pc, #224]	; (80023cc <setup+0x190>)
 80022ea:	f000 f907 	bl	80024fc <_ZN6tflite22MicroMutableOpResolverILj5EE9AddConv2DERK16TFLMRegistration>
      tflite::Register_DEPTHWISE_CONV_2D_INT8());
 80022ee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7ff ff6b 	bl	80021ce <_ZN6tflite31Register_DEPTHWISE_CONV_2D_INT8Ev>
  micro_op_resolver.AddDepthwiseConv2D(
 80022f8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80022fc:	4619      	mov	r1, r3
 80022fe:	4833      	ldr	r0, [pc, #204]	; (80023cc <setup+0x190>)
 8002300:	f000 f90e 	bl	8002520 <_ZN6tflite22MicroMutableOpResolverILj5EE18AddDepthwiseConv2DERK16TFLMRegistration>
  micro_op_resolver.AddReshape();
 8002304:	4831      	ldr	r0, [pc, #196]	; (80023cc <setup+0x190>)
 8002306:	f000 f91d 	bl	8002544 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddReshapeEv>
  micro_op_resolver.AddSoftmax(tflite::Register_SOFTMAX_INT8());
 800230a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800230e:	4618      	mov	r0, r3
 8002310:	f7ff ff77 	bl	8002202 <_ZN6tflite21Register_SOFTMAX_INT8Ev>
 8002314:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002318:	4619      	mov	r1, r3
 800231a:	482c      	ldr	r0, [pc, #176]	; (80023cc <setup+0x190>)
 800231c:	f000 f92a 	bl	8002574 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddSoftmaxERK16TFLMRegistration>
      model, micro_op_resolver, tensor_arena, kTensorArenaSize);
 8002320:	4b2c      	ldr	r3, [pc, #176]	; (80023d4 <setup+0x198>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f3bf 8f5b 	dmb	ish
 8002328:	f003 0301 	and.w	r3, r3, #1
 800232c:	2b00      	cmp	r3, #0
 800232e:	bf0c      	ite	eq
 8002330:	2301      	moveq	r3, #1
 8002332:	2300      	movne	r3, #0
 8002334:	b2db      	uxtb	r3, r3
 8002336:	2b00      	cmp	r3, #0
 8002338:	d020      	beq.n	800237c <setup+0x140>
 800233a:	4826      	ldr	r0, [pc, #152]	; (80023d4 <setup+0x198>)
 800233c:	f01d f9ee 	bl	801f71c <__cxa_guard_acquire>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	bf14      	ite	ne
 8002346:	2301      	movne	r3, #1
 8002348:	2300      	moveq	r3, #0
 800234a:	b2db      	uxtb	r3, r3
 800234c:	2b00      	cmp	r3, #0
 800234e:	d015      	beq.n	800237c <setup+0x140>
 8002350:	4b1b      	ldr	r3, [pc, #108]	; (80023c0 <setup+0x184>)
 8002352:	6819      	ldr	r1, [r3, #0]
 8002354:	2300      	movs	r3, #0
 8002356:	9303      	str	r3, [sp, #12]
 8002358:	2300      	movs	r3, #0
 800235a:	9302      	str	r3, [sp, #8]
 800235c:	2300      	movs	r3, #0
 800235e:	9301      	str	r3, [sp, #4]
 8002360:	f44f 3308 	mov.w	r3, #139264	; 0x22000
 8002364:	9300      	str	r3, [sp, #0]
 8002366:	4b1c      	ldr	r3, [pc, #112]	; (80023d8 <setup+0x19c>)
 8002368:	4a18      	ldr	r2, [pc, #96]	; (80023cc <setup+0x190>)
 800236a:	481c      	ldr	r0, [pc, #112]	; (80023dc <setup+0x1a0>)
 800236c:	f007 ffb6 	bl	800a2dc <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_22MicroResourceVariablesEPNS_22MicroProfilerInterfaceEb>
 8002370:	481b      	ldr	r0, [pc, #108]	; (80023e0 <setup+0x1a4>)
 8002372:	f01d fb9b 	bl	801faac <atexit>
 8002376:	4817      	ldr	r0, [pc, #92]	; (80023d4 <setup+0x198>)
 8002378:	f01d f9dc 	bl	801f734 <__cxa_guard_release>
  interpreter = &static_interpreter;
 800237c:	4b19      	ldr	r3, [pc, #100]	; (80023e4 <setup+0x1a8>)
 800237e:	4a17      	ldr	r2, [pc, #92]	; (80023dc <setup+0x1a0>)
 8002380:	601a      	str	r2, [r3, #0]

  // Allocate memory from the tensor_arena for the model's tensors.
  TfLiteStatus allocate_status = interpreter->AllocateTensors();
 8002382:	4b18      	ldr	r3, [pc, #96]	; (80023e4 <setup+0x1a8>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4618      	mov	r0, r3
 8002388:	f008 f9d8 	bl	800a73c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
 800238c:	4603      	mov	r3, r0
 800238e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if (allocate_status != kTfLiteOk) {
 8002392:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8002396:	2b00      	cmp	r3, #0
 8002398:	d003      	beq.n	80023a2 <setup+0x166>
    MicroPrintf("AllocateTensors() failed");
 800239a:	4813      	ldr	r0, [pc, #76]	; (80023e8 <setup+0x1ac>)
 800239c:	f009 fa38 	bl	800b810 <_Z11MicroPrintfPKcz>
    return;
 80023a0:	e008      	b.n	80023b4 <setup+0x178>
  }

  // Get information about the memory area to use for the model's input.
  input = interpreter->input(0);
 80023a2:	4b10      	ldr	r3, [pc, #64]	; (80023e4 <setup+0x1a8>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	2100      	movs	r1, #0
 80023a8:	4618      	mov	r0, r3
 80023aa:	f008 fb65 	bl	800aa78 <_ZN6tflite16MicroInterpreter5inputEj>
 80023ae:	4603      	mov	r3, r0
 80023b0:	4a0e      	ldr	r2, [pc, #56]	; (80023ec <setup+0x1b0>)
 80023b2:	6013      	str	r3, [r2, #0]
}
 80023b4:	3778      	adds	r7, #120	; 0x78
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	080293d0 	.word	0x080293d0
 80023c0:	2402cb90 	.word	0x2402cb90
 80023c4:	080212b4 	.word	0x080212b4
 80023c8:	2404ec60 	.word	0x2404ec60
 80023cc:	2404eba0 	.word	0x2404eba0
 80023d0:	0800221d 	.word	0x0800221d
 80023d4:	2404ed20 	.word	0x2404ed20
 80023d8:	2402cba0 	.word	0x2402cba0
 80023dc:	2404ec64 	.word	0x2404ec64
 80023e0:	0800222d 	.word	0x0800222d
 80023e4:	2402cb94 	.word	0x2402cb94
 80023e8:	080212fc 	.word	0x080212fc
 80023ec:	2402cb98 	.word	0x2402cb98

080023f0 <InvokePersonDetection>:
}


int8_t invokeResult[2] = {};

void* InvokePersonDetection(void *data) {
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 96 * 96; ++i) {
 80023f8:	2300      	movs	r3, #0
 80023fa:	617b      	str	r3, [r7, #20]
 80023fc:	e00d      	b.n	800241a <InvokePersonDetection+0x2a>
		input->data.int8[i] = ((uint8_t *)data)[i];
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	4413      	add	r3, r2
 8002404:	7819      	ldrb	r1, [r3, #0]
 8002406:	4b22      	ldr	r3, [pc, #136]	; (8002490 <InvokePersonDetection+0xa0>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	691a      	ldr	r2, [r3, #16]
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	4413      	add	r3, r2
 8002410:	b24a      	sxtb	r2, r1
 8002412:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 96 * 96; ++i) {
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	3301      	adds	r3, #1
 8002418:	617b      	str	r3, [r7, #20]
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	f5b3 5f10 	cmp.w	r3, #9216	; 0x2400
 8002420:	dbed      	blt.n	80023fe <InvokePersonDetection+0xe>
	}

	if (kTfLiteOk != interpreter->Invoke()) {
 8002422:	4b1c      	ldr	r3, [pc, #112]	; (8002494 <InvokePersonDetection+0xa4>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4618      	mov	r0, r3
 8002428:	f008 faf8 	bl	800aa1c <_ZN6tflite16MicroInterpreter6InvokeEv>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	bf14      	ite	ne
 8002432:	2301      	movne	r3, #1
 8002434:	2300      	moveq	r3, #0
 8002436:	b2db      	uxtb	r3, r3
 8002438:	2b00      	cmp	r3, #0
 800243a:	d005      	beq.n	8002448 <InvokePersonDetection+0x58>
		MicroPrintf("Invoke failed.");
 800243c:	4816      	ldr	r0, [pc, #88]	; (8002498 <InvokePersonDetection+0xa8>)
 800243e:	f009 f9e7 	bl	800b810 <_Z11MicroPrintfPKcz>
		print("Invoke failed.");
 8002442:	4815      	ldr	r0, [pc, #84]	; (8002498 <InvokePersonDetection+0xa8>)
 8002444:	f7fe fd02 	bl	8000e4c <print>
	}
	TfLiteTensor* output = interpreter->output(0);
 8002448:	4b12      	ldr	r3, [pc, #72]	; (8002494 <InvokePersonDetection+0xa4>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2100      	movs	r1, #0
 800244e:	4618      	mov	r0, r3
 8002450:	f008 fb34 	bl	800aabc <_ZN6tflite16MicroInterpreter6outputEj>
 8002454:	6138      	str	r0, [r7, #16]
	int8_t person_score = output->data.uint8[kPersonIndex];
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	691b      	ldr	r3, [r3, #16]
 800245a:	3301      	adds	r3, #1
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	73fb      	strb	r3, [r7, #15]
	int8_t no_person_score = output->data.uint8[kNotAPersonIndex];
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	691b      	ldr	r3, [r3, #16]
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	73bb      	strb	r3, [r7, #14]
	print("Invoke report person score: %d, no_person_score: %d", person_score, no_person_score);
 8002468:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800246c:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8002470:	4619      	mov	r1, r3
 8002472:	480a      	ldr	r0, [pc, #40]	; (800249c <InvokePersonDetection+0xac>)
 8002474:	f7fe fcea 	bl	8000e4c <print>
	invokeResult[0] = person_score;
 8002478:	4a09      	ldr	r2, [pc, #36]	; (80024a0 <InvokePersonDetection+0xb0>)
 800247a:	7bfb      	ldrb	r3, [r7, #15]
 800247c:	7013      	strb	r3, [r2, #0]
	invokeResult[1] = no_person_score;
 800247e:	4a08      	ldr	r2, [pc, #32]	; (80024a0 <InvokePersonDetection+0xb0>)
 8002480:	7bbb      	ldrb	r3, [r7, #14]
 8002482:	7053      	strb	r3, [r2, #1]
	return (void*)invokeResult;
 8002484:	4b06      	ldr	r3, [pc, #24]	; (80024a0 <InvokePersonDetection+0xb0>)
}
 8002486:	4618      	mov	r0, r3
 8002488:	3718      	adds	r7, #24
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	2402cb98 	.word	0x2402cb98
 8002494:	2402cb94 	.word	0x2402cb94
 8002498:	08021330 	.word	0x08021330
 800249c:	08021340 	.word	0x08021340
 80024a0:	2404ed24 	.word	0x2404ed24

080024a4 <_ZN6tflite22MicroMutableOpResolverILj5EEC1Ev>:
  explicit MicroMutableOpResolver() {}
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7ff fc9e 	bl	8001df0 <_ZN6tflite15MicroOpResolverC1Ev>
 80024b4:	4a07      	ldr	r2, [pc, #28]	; (80024d4 <_ZN6tflite22MicroMutableOpResolverILj5EEC1Ev+0x30>)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	601a      	str	r2, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4618      	mov	r0, r3
 80024ce:	3708      	adds	r7, #8
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	08028d84 	.word	0x08028d84

080024d8 <_ZN6tflite22MicroMutableOpResolverILj5EE16AddAveragePool2DERK16TFLMRegistration>:
  TfLiteStatus AddAveragePool2D(
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
    return AddBuiltin(BuiltinOperator_AVERAGE_POOL_2D, registration, ParsePool);
 80024e2:	4b05      	ldr	r3, [pc, #20]	; (80024f8 <_ZN6tflite22MicroMutableOpResolverILj5EE16AddAveragePool2DERK16TFLMRegistration+0x20>)
 80024e4:	683a      	ldr	r2, [r7, #0]
 80024e6:	2101      	movs	r1, #1
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f000 f855 	bl	8002598 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
 80024ee:	4603      	mov	r3, r0
  }
 80024f0:	4618      	mov	r0, r3
 80024f2:	3708      	adds	r7, #8
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	08003755 	.word	0x08003755

080024fc <_ZN6tflite22MicroMutableOpResolverILj5EE9AddConv2DERK16TFLMRegistration>:
  TfLiteStatus AddConv2D(
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
    return AddBuiltin(BuiltinOperator_CONV_2D, registration, ParseConv2D);
 8002506:	4b05      	ldr	r3, [pc, #20]	; (800251c <_ZN6tflite22MicroMutableOpResolverILj5EE9AddConv2DERK16TFLMRegistration+0x20>)
 8002508:	683a      	ldr	r2, [r7, #0]
 800250a:	2103      	movs	r1, #3
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f000 f843 	bl	8002598 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
 8002512:	4603      	mov	r3, r0
  }
 8002514:	4618      	mov	r0, r3
 8002516:	3708      	adds	r7, #8
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	08003315 	.word	0x08003315

08002520 <_ZN6tflite22MicroMutableOpResolverILj5EE18AddDepthwiseConv2DERK16TFLMRegistration>:
  TfLiteStatus AddDepthwiseConv2D(
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]
    return AddBuiltin(BuiltinOperator_DEPTHWISE_CONV_2D, registration,
 800252a:	4b05      	ldr	r3, [pc, #20]	; (8002540 <_ZN6tflite22MicroMutableOpResolverILj5EE18AddDepthwiseConv2DERK16TFLMRegistration+0x20>)
 800252c:	683a      	ldr	r2, [r7, #0]
 800252e:	2104      	movs	r1, #4
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f000 f831 	bl	8002598 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
 8002536:	4603      	mov	r3, r0
  }
 8002538:	4618      	mov	r0, r3
 800253a:	3708      	adds	r7, #8
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	0800348d 	.word	0x0800348d

08002544 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddReshapeEv>:
  TfLiteStatus AddReshape() {
 8002544:	b580      	push	{r7, lr}
 8002546:	b08a      	sub	sp, #40	; 0x28
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
    return AddBuiltin(BuiltinOperator_RESHAPE, Register_RESHAPE(),
 800254c:	f107 030c 	add.w	r3, r7, #12
 8002550:	4618      	mov	r0, r3
 8002552:	f00f fd4f 	bl	8011ff4 <_ZN6tflite16Register_RESHAPEEv>
 8002556:	f107 020c 	add.w	r2, r7, #12
 800255a:	4b05      	ldr	r3, [pc, #20]	; (8002570 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddReshapeEv+0x2c>)
 800255c:	2116      	movs	r1, #22
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f000 f81a 	bl	8002598 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
 8002564:	4603      	mov	r3, r0
  }
 8002566:	4618      	mov	r0, r3
 8002568:	3728      	adds	r7, #40	; 0x28
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	08003895 	.word	0x08003895

08002574 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddSoftmaxERK16TFLMRegistration>:
  TfLiteStatus AddSoftmax(
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
    return AddBuiltin(BuiltinOperator_SOFTMAX, registration, ParseSoftmax);
 800257e:	4b05      	ldr	r3, [pc, #20]	; (8002594 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddSoftmaxERK16TFLMRegistration+0x20>)
 8002580:	683a      	ldr	r2, [r7, #0]
 8002582:	2119      	movs	r1, #25
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f000 f807 	bl	8002598 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
 800258a:	4603      	mov	r3, r0
  }
 800258c:	4618      	mov	r0, r3
 800258e:	3708      	adds	r7, #8
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	08003991 	.word	0x08003991

08002598 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>:
  TfLiteStatus AddBuiltin(tflite::BuiltinOperator op,
 8002598:	b5b0      	push	{r4, r5, r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	607a      	str	r2, [r7, #4]
 80025a4:	603b      	str	r3, [r7, #0]
    if (op == BuiltinOperator_CUSTOM) {
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	2b20      	cmp	r3, #32
 80025aa:	d107      	bne.n	80025bc <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x24>
      MicroPrintf("Invalid parameter BuiltinOperator_CUSTOM to the ");
 80025ac:	4837      	ldr	r0, [pc, #220]	; (800268c <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xf4>)
 80025ae:	f009 f92f 	bl	800b810 <_Z11MicroPrintfPKcz>
      MicroPrintf("AddBuiltin function.");
 80025b2:	4837      	ldr	r0, [pc, #220]	; (8002690 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xf8>)
 80025b4:	f009 f92c 	bl	800b810 <_Z11MicroPrintfPKcz>
      return kTfLiteError;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e063      	b.n	8002684 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xec>
    if (FindOp(op) != nullptr) {
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	68b9      	ldr	r1, [r7, #8]
 80025c4:	68f8      	ldr	r0, [r7, #12]
 80025c6:	4798      	blx	r3
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	bf14      	ite	ne
 80025ce:	2301      	movne	r3, #1
 80025d0:	2300      	moveq	r3, #0
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d008      	beq.n	80025ea <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x52>
      MicroPrintf("Calling AddBuiltin with the same op more than ");
 80025d8:	482e      	ldr	r0, [pc, #184]	; (8002694 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xfc>)
 80025da:	f009 f919 	bl	800b810 <_Z11MicroPrintfPKcz>
      MicroPrintf("once is not supported (Op: #%d).", op);
 80025de:	68b9      	ldr	r1, [r7, #8]
 80025e0:	482d      	ldr	r0, [pc, #180]	; (8002698 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x100>)
 80025e2:	f009 f915 	bl	800b810 <_Z11MicroPrintfPKcz>
      return kTfLiteError;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e04c      	b.n	8002684 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xec>
    if (registrations_len_ >= tOpCount) {
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025f0:	2b04      	cmp	r3, #4
 80025f2:	d909      	bls.n	8002608 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x70>
      MicroPrintf("Couldn't register builtin op #%d, resolver size ", op);
 80025f4:	68b9      	ldr	r1, [r7, #8]
 80025f6:	4829      	ldr	r0, [pc, #164]	; (800269c <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x104>)
 80025f8:	f009 f90a 	bl	800b810 <_Z11MicroPrintfPKcz>
      MicroPrintf("is too small (%d).", tOpCount);
 80025fc:	2105      	movs	r1, #5
 80025fe:	4828      	ldr	r0, [pc, #160]	; (80026a0 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x108>)
 8002600:	f009 f906 	bl	800b810 <_Z11MicroPrintfPKcz>
      return kTfLiteError;
 8002604:	2301      	movs	r3, #1
 8002606:	e03d      	b.n	8002684 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK16TFLMRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xec>
    registrations_[registrations_len_] = registration;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800260e:	68f9      	ldr	r1, [r7, #12]
 8002610:	4613      	mov	r3, r2
 8002612:	00db      	lsls	r3, r3, #3
 8002614:	1a9b      	subs	r3, r3, r2
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	440b      	add	r3, r1
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	1d1c      	adds	r4, r3, #4
 800261e:	4615      	mov	r5, r2
 8002620:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002622:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002624:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002628:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    registrations_[registrations_len_].builtin_code = op;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002632:	68f9      	ldr	r1, [r7, #12]
 8002634:	4613      	mov	r3, r2
 8002636:	00db      	lsls	r3, r3, #3
 8002638:	1a9b      	subs	r3, r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	440b      	add	r3, r1
 800263e:	3318      	adds	r3, #24
 8002640:	68ba      	ldr	r2, [r7, #8]
 8002642:	601a      	str	r2, [r3, #0]
    registrations_len_++;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800264a:	1c5a      	adds	r2, r3, #1
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    builtin_codes_[num_buitin_ops_] = op;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002658:	68fa      	ldr	r2, [r7, #12]
 800265a:	3324      	adds	r3, #36	; 0x24
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	4413      	add	r3, r2
 8002660:	68ba      	ldr	r2, [r7, #8]
 8002662:	605a      	str	r2, [r3, #4]
    builtin_parsers_[num_buitin_ops_] = parser;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	322a      	adds	r2, #42	; 0x2a
 800266e:	6839      	ldr	r1, [r7, #0]
 8002670:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    num_buitin_ops_++;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800267a:	1c5a      	adds	r2, r3, #1
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    return kTfLiteOk;
 8002682:	2300      	movs	r3, #0
  }
 8002684:	4618      	mov	r0, r3
 8002686:	3710      	adds	r7, #16
 8002688:	46bd      	mov	sp, r7
 800268a:	bdb0      	pop	{r4, r5, r7, pc}
 800268c:	08021374 	.word	0x08021374
 8002690:	080213a8 	.word	0x080213a8
 8002694:	080213c0 	.word	0x080213c0
 8002698:	080213f0 	.word	0x080213f0
 800269c:	08021414 	.word	0x08021414
 80026a0:	08021448 	.word	0x08021448

080026a4 <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpENS_15BuiltinOperatorE>:
  const TFLMRegistration* FindOp(tflite::BuiltinOperator op) const override {
 80026a4:	b480      	push	{r7}
 80026a6:	b085      	sub	sp, #20
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
    if (op == BuiltinOperator_CUSTOM) return nullptr;
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	2b20      	cmp	r3, #32
 80026b2:	d101      	bne.n	80026b8 <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpENS_15BuiltinOperatorE+0x14>
 80026b4:	2300      	movs	r3, #0
 80026b6:	e01c      	b.n	80026f2 <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpENS_15BuiltinOperatorE+0x4e>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 80026b8:	2300      	movs	r3, #0
 80026ba:	60fb      	str	r3, [r7, #12]
 80026bc:	e012      	b.n	80026e4 <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpENS_15BuiltinOperatorE+0x40>
      const TFLMRegistration& registration = registrations_[i];
 80026be:	68fa      	ldr	r2, [r7, #12]
 80026c0:	4613      	mov	r3, r2
 80026c2:	00db      	lsls	r3, r3, #3
 80026c4:	1a9b      	subs	r3, r3, r2
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	4413      	add	r3, r2
 80026cc:	3304      	adds	r3, #4
 80026ce:	60bb      	str	r3, [r7, #8]
      if (registration.builtin_code == op) {
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	695b      	ldr	r3, [r3, #20]
 80026d4:	683a      	ldr	r2, [r7, #0]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d101      	bne.n	80026de <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpENS_15BuiltinOperatorE+0x3a>
        return &registration;
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	e009      	b.n	80026f2 <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpENS_15BuiltinOperatorE+0x4e>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	3301      	adds	r3, #1
 80026e2:	60fb      	str	r3, [r7, #12]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ea:	68fa      	ldr	r2, [r7, #12]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d3e6      	bcc.n	80026be <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpENS_15BuiltinOperatorE+0x1a>
    return nullptr;
 80026f0:	2300      	movs	r3, #0
  }
 80026f2:	4618      	mov	r0, r3
 80026f4:	3714      	adds	r7, #20
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
	...

08002700 <_ZN6tflite22MicroMutableOpResolverILj5EED1Ev>:
class MicroMutableOpResolver : public MicroOpResolver {
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	4a05      	ldr	r2, [pc, #20]	; (8002720 <_ZN6tflite22MicroMutableOpResolverILj5EED1Ev+0x20>)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	601a      	str	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4618      	mov	r0, r3
 8002712:	f7ff f95d 	bl	80019d0 <_ZN6tflite15MicroOpResolverD1Ev>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4618      	mov	r0, r3
 800271a:	3708      	adds	r7, #8
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	08028d84 	.word	0x08028d84

08002724 <_ZN6tflite22MicroMutableOpResolverILj5EED0Ev>:
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f7ff ffe7 	bl	8002700 <_ZN6tflite22MicroMutableOpResolverILj5EED1Ev>
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f000 f85f 	bl	80027f6 <_ZN6tflite22MicroMutableOpResolverILj5EEdlEPv>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	4618      	mov	r0, r3
 800273c:	3708      	adds	r7, #8
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}

08002742 <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpEPKc>:
  const TFLMRegistration* FindOp(const char* op) const override {
 8002742:	b580      	push	{r7, lr}
 8002744:	b084      	sub	sp, #16
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
 800274a:	6039      	str	r1, [r7, #0]
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 800274c:	2300      	movs	r3, #0
 800274e:	60fb      	str	r3, [r7, #12]
 8002750:	e01a      	b.n	8002788 <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpEPKc+0x46>
      const TFLMRegistration& registration = registrations_[i];
 8002752:	68fa      	ldr	r2, [r7, #12]
 8002754:	4613      	mov	r3, r2
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	1a9b      	subs	r3, r3, r2
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	4413      	add	r3, r2
 8002760:	3304      	adds	r3, #4
 8002762:	60bb      	str	r3, [r7, #8]
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	695b      	ldr	r3, [r3, #20]
 8002768:	2b20      	cmp	r3, #32
 800276a:	d10a      	bne.n	8002782 <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpEPKc+0x40>
          (strcmp(registration.custom_name, op) == 0)) {
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	6839      	ldr	r1, [r7, #0]
 8002772:	4618      	mov	r0, r3
 8002774:	f7fd fdb4 	bl	80002e0 <strcmp>
 8002778:	4603      	mov	r3, r0
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 800277a:	2b00      	cmp	r3, #0
 800277c:	d101      	bne.n	8002782 <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpEPKc+0x40>
        return &registration;
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	e009      	b.n	8002796 <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpEPKc+0x54>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	3301      	adds	r3, #1
 8002786:	60fb      	str	r3, [r7, #12]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800278e:	68fa      	ldr	r2, [r7, #12]
 8002790:	429a      	cmp	r2, r3
 8002792:	d3de      	bcc.n	8002752 <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpEPKc+0x10>
    return nullptr;
 8002794:	2300      	movs	r3, #0
  }
 8002796:	4618      	mov	r0, r3
 8002798:	3710      	adds	r7, #16
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <_ZNK6tflite22MicroMutableOpResolverILj5EE15GetOpDataParserENS_15BuiltinOperatorE>:
  TfLiteBridgeBuiltinParseFunction GetOpDataParser(
 800279e:	b580      	push	{r7, lr}
 80027a0:	b084      	sub	sp, #16
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
 80027a6:	6039      	str	r1, [r7, #0]
    TFLITE_DCHECK(num_buitin_ops_ <= tOpCount);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80027ae:	2b05      	cmp	r3, #5
 80027b0:	d901      	bls.n	80027b6 <_ZNK6tflite22MicroMutableOpResolverILj5EE15GetOpDataParserENS_15BuiltinOperatorE+0x18>
 80027b2:	f01d f955 	bl	801fa60 <abort>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
 80027b6:	2300      	movs	r3, #0
 80027b8:	60fb      	str	r3, [r7, #12]
 80027ba:	e011      	b.n	80027e0 <_ZNK6tflite22MicroMutableOpResolverILj5EE15GetOpDataParserENS_15BuiltinOperatorE+0x42>
      if (builtin_codes_[i] == op) return builtin_parsers_[i];
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	3324      	adds	r3, #36	; 0x24
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	4413      	add	r3, r2
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	683a      	ldr	r2, [r7, #0]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d105      	bne.n	80027da <_ZNK6tflite22MicroMutableOpResolverILj5EE15GetOpDataParserENS_15BuiltinOperatorE+0x3c>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	68fa      	ldr	r2, [r7, #12]
 80027d2:	322a      	adds	r2, #42	; 0x2a
 80027d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027d8:	e009      	b.n	80027ee <_ZNK6tflite22MicroMutableOpResolverILj5EE15GetOpDataParserENS_15BuiltinOperatorE+0x50>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	3301      	adds	r3, #1
 80027de:	60fb      	str	r3, [r7, #12]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80027e6:	68fa      	ldr	r2, [r7, #12]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d3e7      	bcc.n	80027bc <_ZNK6tflite22MicroMutableOpResolverILj5EE15GetOpDataParserENS_15BuiltinOperatorE+0x1e>
    return nullptr;
 80027ec:	2300      	movs	r3, #0
  }
 80027ee:	4618      	mov	r0, r3
 80027f0:	3710      	adds	r7, #16
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <_ZN6tflite22MicroMutableOpResolverILj5EEdlEPv>:
  TF_LITE_REMOVE_VIRTUAL_DELETE
 80027f6:	b480      	push	{r7}
 80027f8:	b083      	sub	sp, #12
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
 80027fe:	bf00      	nop
 8002800:	370c      	adds	r7, #12
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr

0800280a <_ZN6tflite12RuntimeShapeD1Ev>:
    return this->size_ == comp.size_ &&
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32_t)) ==
               0;
  }

  ~RuntimeShape() {}
 800280a:	b480      	push	{r7}
 800280c:	b083      	sub	sp, #12
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4618      	mov	r0, r3
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>:

  int32_t DimensionsCount() const { return size_; }
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4618      	mov	r0, r3
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr

08002838 <_ZNK6tflite12RuntimeShape4DimsEi>:
  int32_t Dims(int i) const {
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]
    TFLITE_DCHECK_GE(i, 0);
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	2b00      	cmp	r3, #0
 8002846:	da01      	bge.n	800284c <_ZNK6tflite12RuntimeShape4DimsEi+0x14>
 8002848:	f01d f90a 	bl	801fa60 <abort>
    TFLITE_DCHECK_LT(i, size_);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	683a      	ldr	r2, [r7, #0]
 8002852:	429a      	cmp	r2, r3
 8002854:	db01      	blt.n	800285a <_ZNK6tflite12RuntimeShape4DimsEi+0x22>
 8002856:	f01d f903 	bl	801fa60 <abort>
    return dims_[i];
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	4413      	add	r3, r2
 8002862:	685b      	ldr	r3, [r3, #4]
  }
 8002864:	4618      	mov	r0, r3
 8002866:	3708      	adds	r7, #8
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <_ZNK6tflite12RuntimeShape8DimsDataEv>:
                                    const RuntimeShape& shape) {
    TFLITE_DCHECK_LE(new_shape_size, kMaxSmallSize);
    return RuntimeShape(new_shape_size, shape, 1);
  }
  int32_t* DimsData() { return dims_; }
  const int32_t* DimsData() const { return dims_; }
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	3304      	adds	r3, #4
 8002878:	4618      	mov	r0, r3
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <_ZNK6tflite12RuntimeShape8FlatSizeEv>:
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
  }

  // Returns the total count of elements, that is the size when flattened into a
  // vector.
  int FlatSize() const {
 8002884:	b580      	push	{r7, lr}
 8002886:	b086      	sub	sp, #24
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
    int buffer_size = 1;
 800288c:	2301      	movs	r3, #1
 800288e:	617b      	str	r3, [r7, #20]
    const int* dims_data = reinterpret_cast<const int*>(DimsData());
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f7ff ffeb 	bl	800286c <_ZNK6tflite12RuntimeShape8DimsDataEv>
 8002896:	60f8      	str	r0, [r7, #12]
    for (int i = 0; i < size_; i++) {
 8002898:	2300      	movs	r3, #0
 800289a:	613b      	str	r3, [r7, #16]
 800289c:	e00b      	b.n	80028b6 <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x32>
      buffer_size *= dims_data[i];
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	68fa      	ldr	r2, [r7, #12]
 80028a4:	4413      	add	r3, r2
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	fb02 f303 	mul.w	r3, r2, r3
 80028ae:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < size_; i++) {
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	3301      	adds	r3, #1
 80028b4:	613b      	str	r3, [r7, #16]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	693a      	ldr	r2, [r7, #16]
 80028bc:	429a      	cmp	r2, r3
 80028be:	dbee      	blt.n	800289e <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x1a>
    }
    return buffer_size;
 80028c0:	697b      	ldr	r3, [r7, #20]
  }
 80028c2:	4618      	mov	r0, r3
 80028c4:	3718      	adds	r7, #24
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}

080028ca <_ZN6tflite9NumInputsEPK10TfLiteNode>:
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
inline int SizeOfDimension(const TfLiteTensor* t, int dim) {
  return t->dims->data[dim];
}

inline int NumInputs(const TfLiteNode* node) {
 80028ca:	b480      	push	{r7}
 80028cc:	b083      	sub	sp, #12
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
  return node->inputs == nullptr ? 0 : node->inputs->size;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d003      	beq.n	80028e2 <_ZN6tflite9NumInputsEPK10TfLiteNode+0x18>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	e000      	b.n	80028e4 <_ZN6tflite9NumInputsEPK10TfLiteNode+0x1a>
 80028e2:	2300      	movs	r3, #0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	370c      	adds	r7, #12
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <_ZN6tflite10NumOutputsEPK10TfLiteNode>:
inline int NumOutputs(const TfLiteNode* node) {
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  return node->outputs == nullptr ? 0 : node->outputs->size;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d003      	beq.n	8002908 <_ZN6tflite10NumOutputsEPK10TfLiteNode+0x18>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	e000      	b.n	800290a <_ZN6tflite10NumOutputsEPK10TfLiteNode+0x1a>
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	370c      	adds	r7, #12
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr

08002916 <_ZN6tflite15GetMicroContextEPK13TfLiteContext>:

 private:
  TF_LITE_REMOVE_VIRTUAL_DELETE
};

inline MicroContext* GetMicroContext(const struct TfLiteContext* context) {
 8002916:	b480      	push	{r7}
 8002918:	b083      	sub	sp, #12
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
  return reinterpret_cast<MicroContext*>(context->impl_);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	68db      	ldr	r3, [r3, #12]
}
 8002922:	4618      	mov	r0, r3
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr

0800292e <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>:
  return reinterpret_cast<T*>(tensor->data.raw);
}

// Returns const data for a TfLiteEvalTensor struct that are expected to exist.
template <typename T>
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 800292e:	b580      	push	{r7, lr}
 8002930:	b082      	sub	sp, #8
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d101      	bne.n	8002940 <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor+0x12>
 800293c:	f01d f890 	bl	801fa60 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
}
 8002944:	4618      	mov	r0, r3
 8002946:	3708      	adds	r7, #8
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d101      	bne.n	800295e <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor+0x12>
 800295a:	f01d f881 	bl	801fa60 <abort>
  return reinterpret_cast<T*>(tensor->data.raw);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
}
 8002962:	4618      	mov	r0, r3
 8002964:	3708      	adds	r7, #8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}

0800296a <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>:
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
 800296a:	b480      	push	{r7}
 800296c:	b083      	sub	sp, #12
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	695b      	ldr	r3, [r3, #20]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4618      	mov	r0, r3
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <_ZN11flatbuffers10ReadScalarIhEET_PKv>:
T ReadScalar(const void *p) {
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	4618      	mov	r0, r3
 8002992:	f000 f805 	bl	80029a0 <_ZN11flatbuffers12EndianScalarIhEET_S1_>
 8002996:	4603      	mov	r3, r0
}
 8002998:	4618      	mov	r0, r3
 800299a:	3708      	adds	r7, #8
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <_ZN11flatbuffers12EndianScalarIhEET_S1_>:
template<typename T> T EndianScalar(T t) {
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	4603      	mov	r3, r0
 80029a8:	71fb      	strb	r3, [r7, #7]
    return t;
 80029aa:	79fb      	ldrb	r3, [r7, #7]
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <_ZN11flatbuffers10ReadScalarIaEET_PKv>:
T ReadScalar(const void *p) {
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f993 3000 	ldrsb.w	r3, [r3]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f000 f843 	bl	8002a52 <_ZN11flatbuffers12EndianScalarIaEET_S1_>
 80029cc:	4603      	mov	r3, r0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <_ZN11flatbuffers10ReadScalarIfEET_PKv>:
T ReadScalar(const void *p) {
 80029d6:	b580      	push	{r7, lr}
 80029d8:	b082      	sub	sp, #8
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	edd3 7a00 	vldr	s15, [r3]
 80029e4:	eeb0 0a67 	vmov.f32	s0, s15
 80029e8:	f000 f815 	bl	8002a16 <_ZN11flatbuffers12EndianScalarIfEET_S1_>
 80029ec:	eef0 7a40 	vmov.f32	s15, s0
}
 80029f0:	eeb0 0a67 	vmov.f32	s0, s15
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <_ZN11flatbuffers12EndianScalarIxEET_S1_>:
template<typename T> T EndianScalar(T t) {
 80029fa:	b480      	push	{r7}
 80029fc:	b083      	sub	sp, #12
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	e9c7 0100 	strd	r0, r1, [r7]
    return t;
 8002a04:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8002a08:	4610      	mov	r0, r2
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	370c      	adds	r7, #12
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr

08002a16 <_ZN11flatbuffers12EndianScalarIfEET_S1_>:
template<typename T> T EndianScalar(T t) {
 8002a16:	b480      	push	{r7}
 8002a18:	b083      	sub	sp, #12
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	ed87 0a01 	vstr	s0, [r7, #4]
    return t;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	ee07 3a90 	vmov	s15, r3
}
 8002a26:	eeb0 0a67 	vmov.f32	s0, s15
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d101      	bne.n	8002a46 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor+0x12>
 8002a42:	f01d f80d 	bl	801fa60 <abort>
  return reinterpret_cast<T*>(tensor->data.raw);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3708      	adds	r7, #8
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}

08002a52 <_ZN11flatbuffers12EndianScalarIaEET_S1_>:
template<typename T> T EndianScalar(T t) {
 8002a52:	b480      	push	{r7}
 8002a54:	b083      	sub	sp, #12
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	4603      	mov	r3, r0
 8002a5a:	71fb      	strb	r3, [r7, #7]
    return t;
 8002a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d101      	bne.n	8002a7e <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor+0x12>
 8002a7a:	f01c fff1 	bl	801fa60 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3708      	adds	r7, #8
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <_ZN6tflite13ErrorReporter6ReportEPKcz>:
#include "tensorflow/lite/core/api/error_reporter.h"
#include <cstdarg>

namespace tflite {

int ErrorReporter::Report(const char* format, ...) {
 8002a8a:	b40e      	push	{r1, r2, r3}
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b085      	sub	sp, #20
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  va_list args;
  va_start(args, format);
 8002a94:	f107 0320 	add.w	r3, r7, #32
 8002a98:	60bb      	str	r3, [r7, #8]
  int code = Report(format, args);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	3308      	adds	r3, #8
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	68ba      	ldr	r2, [r7, #8]
 8002aa4:	69f9      	ldr	r1, [r7, #28]
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	4798      	blx	r3
 8002aaa:	60f8      	str	r0, [r7, #12]
  va_end(args);
  return code;
 8002aac:	68fb      	ldr	r3, [r7, #12]
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3714      	adds	r7, #20
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002ab8:	b003      	add	sp, #12
 8002aba:	4770      	bx	lr

08002abc <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>:

// TODO(aselle): Make the name of ReportError on context the same, so
// we can use the ensure functions w/o a context and w/ a reporter.
int ErrorReporter::ReportError(void*, const char* format, ...) {
 8002abc:	b40c      	push	{r2, r3}
 8002abe:	b580      	push	{r7, lr}
 8002ac0:	b084      	sub	sp, #16
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
 8002ac6:	6039      	str	r1, [r7, #0]
  va_list args;
  va_start(args, format);
 8002ac8:	f107 031c 	add.w	r3, r7, #28
 8002acc:	60bb      	str	r3, [r7, #8]
  int code = Report(format, args);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	3308      	adds	r3, #8
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	68ba      	ldr	r2, [r7, #8]
 8002ad8:	69b9      	ldr	r1, [r7, #24]
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	4798      	blx	r3
 8002ade:	60f8      	str	r0, [r7, #12]
  va_end(args);
  return code;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3710      	adds	r7, #16
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002aec:	b002      	add	sp, #8
 8002aee:	4770      	bx	lr

08002af0 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	4618      	mov	r0, r3
 8002afe:	370c      	adds	r7, #12
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <_ZNK11flatbuffers6String5c_strEv>:
#include "flatbuffers/vector.h"

namespace flatbuffers {

struct String : public Vector<char> {
  const char *c_str() const { return reinterpret_cast<const char *>(Data()); }
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f000 ff9e 	bl	8003a54 <_ZNK11flatbuffers6VectorIcmE4DataEv>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3708      	adds	r7, #8
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <_ZNK6tflite13Conv2DOptions7paddingEv>:
  tflite::Padding padding() const {
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b082      	sub	sp, #8
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::Padding>(GetField<int8_t>(VT_PADDING, 0));
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	2104      	movs	r1, #4
 8002b30:	4618      	mov	r0, r3
 8002b32:	f001 f808 	bl	8003b46 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8002b36:	4603      	mov	r3, r0
  }
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3708      	adds	r7, #8
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <_ZNK6tflite13Conv2DOptions8stride_wEv>:
  int32_t stride_w() const {
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_STRIDE_W, 0);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	2106      	movs	r1, #6
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f000 ffdb 	bl	8003b0a <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8002b54:	4603      	mov	r3, r0
  }
 8002b56:	4618      	mov	r0, r3
 8002b58:	3708      	adds	r7, #8
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <_ZNK6tflite13Conv2DOptions8stride_hEv>:
  int32_t stride_h() const {
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b082      	sub	sp, #8
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_STRIDE_H, 0);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	2108      	movs	r1, #8
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f000 ffcc 	bl	8003b0a <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8002b72:	4603      	mov	r3, r0
  }
 8002b74:	4618      	mov	r0, r3
 8002b76:	3708      	adds	r7, #8
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <_ZNK6tflite13Conv2DOptions25fused_activation_functionEv>:
  tflite::ActivationFunctionType fused_activation_function() const {
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	210a      	movs	r1, #10
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f000 ffdb 	bl	8003b46 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8002b90:	4603      	mov	r3, r0
  }
 8002b92:	4618      	mov	r0, r3
 8002b94:	3708      	adds	r7, #8
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <_ZNK6tflite13Conv2DOptions17dilation_w_factorEv>:
  int32_t dilation_w_factor() const {
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	b082      	sub	sp, #8
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_DILATION_W_FACTOR, 1);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	210c      	movs	r1, #12
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f000 ffae 	bl	8003b0a <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8002bae:	4603      	mov	r3, r0
  }
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3708      	adds	r7, #8
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <_ZNK6tflite13Conv2DOptions17dilation_h_factorEv>:
  int32_t dilation_h_factor() const {
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_DILATION_H_FACTOR, 1);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	210e      	movs	r1, #14
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f000 ff9f 	bl	8003b0a <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8002bcc:	4603      	mov	r3, r0
  }
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3708      	adds	r7, #8
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <_ZNK6tflite13Conv2DOptions19quantized_bias_typeEv>:
  tflite::TensorType quantized_bias_type() const {
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	b082      	sub	sp, #8
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::TensorType>(GetField<int8_t>(VT_QUANTIZED_BIAS_TYPE, 0));
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	2110      	movs	r1, #16
 8002be4:	4618      	mov	r0, r3
 8002be6:	f000 ffae 	bl	8003b46 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8002bea:	4603      	mov	r3, r0
  }
 8002bec:	4618      	mov	r0, r3
 8002bee:	3708      	adds	r7, #8
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <_ZNK6tflite13Pool2DOptions7paddingEv>:
  tflite::Padding padding() const {
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::Padding>(GetField<int8_t>(VT_PADDING, 0));
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	2104      	movs	r1, #4
 8002c02:	4618      	mov	r0, r3
 8002c04:	f000 ff9f 	bl	8003b46 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8002c08:	4603      	mov	r3, r0
  }
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3708      	adds	r7, #8
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <_ZNK6tflite13Pool2DOptions8stride_wEv>:
  int32_t stride_w() const {
 8002c12:	b580      	push	{r7, lr}
 8002c14:	b082      	sub	sp, #8
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_STRIDE_W, 0);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	2106      	movs	r1, #6
 8002c20:	4618      	mov	r0, r3
 8002c22:	f000 ff72 	bl	8003b0a <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8002c26:	4603      	mov	r3, r0
  }
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3708      	adds	r7, #8
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <_ZNK6tflite13Pool2DOptions8stride_hEv>:
  int32_t stride_h() const {
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_STRIDE_H, 0);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	2108      	movs	r1, #8
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f000 ff63 	bl	8003b0a <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8002c44:	4603      	mov	r3, r0
  }
 8002c46:	4618      	mov	r0, r3
 8002c48:	3708      	adds	r7, #8
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}

08002c4e <_ZNK6tflite13Pool2DOptions12filter_widthEv>:
  int32_t filter_width() const {
 8002c4e:	b580      	push	{r7, lr}
 8002c50:	b082      	sub	sp, #8
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_FILTER_WIDTH, 0);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	210a      	movs	r1, #10
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f000 ff54 	bl	8003b0a <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8002c62:	4603      	mov	r3, r0
  }
 8002c64:	4618      	mov	r0, r3
 8002c66:	3708      	adds	r7, #8
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <_ZNK6tflite13Pool2DOptions13filter_heightEv>:
  int32_t filter_height() const {
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_FILTER_HEIGHT, 0);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	210c      	movs	r1, #12
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f000 ff45 	bl	8003b0a <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8002c80:	4603      	mov	r3, r0
  }
 8002c82:	4618      	mov	r0, r3
 8002c84:	3708      	adds	r7, #8
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <_ZNK6tflite13Pool2DOptions25fused_activation_functionEv>:
  tflite::ActivationFunctionType fused_activation_function() const {
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b082      	sub	sp, #8
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	210e      	movs	r1, #14
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f000 ff54 	bl	8003b46 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8002c9e:	4603      	mov	r3, r0
  }
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3708      	adds	r7, #8
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <_ZNK6tflite22DepthwiseConv2DOptions7paddingEv>:
  tflite::Padding padding() const {
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::Padding>(GetField<int8_t>(VT_PADDING, 0));
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	2104      	movs	r1, #4
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f000 ff45 	bl	8003b46 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8002cbc:	4603      	mov	r3, r0
  }
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3708      	adds	r7, #8
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <_ZNK6tflite22DepthwiseConv2DOptions8stride_wEv>:
  int32_t stride_w() const {
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b082      	sub	sp, #8
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_STRIDE_W, 0);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	2106      	movs	r1, #6
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f000 ff18 	bl	8003b0a <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8002cda:	4603      	mov	r3, r0
  }
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3708      	adds	r7, #8
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <_ZNK6tflite22DepthwiseConv2DOptions8stride_hEv>:
  int32_t stride_h() const {
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_STRIDE_H, 0);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	2108      	movs	r1, #8
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f000 ff09 	bl	8003b0a <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8002cf8:	4603      	mov	r3, r0
  }
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3708      	adds	r7, #8
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}

08002d02 <_ZNK6tflite22DepthwiseConv2DOptions16depth_multiplierEv>:
  int32_t depth_multiplier() const {
 8002d02:	b580      	push	{r7, lr}
 8002d04:	b082      	sub	sp, #8
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_DEPTH_MULTIPLIER, 0);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	210a      	movs	r1, #10
 8002d10:	4618      	mov	r0, r3
 8002d12:	f000 fefa 	bl	8003b0a <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8002d16:	4603      	mov	r3, r0
  }
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3708      	adds	r7, #8
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <_ZNK6tflite22DepthwiseConv2DOptions25fused_activation_functionEv>:
  tflite::ActivationFunctionType fused_activation_function() const {
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	210c      	movs	r1, #12
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f000 ff09 	bl	8003b46 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8002d34:	4603      	mov	r3, r0
  }
 8002d36:	4618      	mov	r0, r3
 8002d38:	3708      	adds	r7, #8
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <_ZNK6tflite22DepthwiseConv2DOptions17dilation_w_factorEv>:
  int32_t dilation_w_factor() const {
 8002d3e:	b580      	push	{r7, lr}
 8002d40:	b082      	sub	sp, #8
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_DILATION_W_FACTOR, 1);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2201      	movs	r2, #1
 8002d4a:	210e      	movs	r1, #14
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f000 fedc 	bl	8003b0a <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8002d52:	4603      	mov	r3, r0
  }
 8002d54:	4618      	mov	r0, r3
 8002d56:	3708      	adds	r7, #8
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <_ZNK6tflite22DepthwiseConv2DOptions17dilation_h_factorEv>:
  int32_t dilation_h_factor() const {
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_DILATION_H_FACTOR, 1);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	2110      	movs	r1, #16
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f000 fecd 	bl	8003b0a <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8002d70:	4603      	mov	r3, r0
  }
 8002d72:	4618      	mov	r0, r3
 8002d74:	3708      	adds	r7, #8
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}

08002d7a <_ZNK6tflite21FullyConnectedOptions25fused_activation_functionEv>:
  tflite::ActivationFunctionType fused_activation_function() const {
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	b082      	sub	sp, #8
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	2104      	movs	r1, #4
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f000 fedc 	bl	8003b46 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8002d8e:	4603      	mov	r3, r0
  }
 8002d90:	4618      	mov	r0, r3
 8002d92:	3708      	adds	r7, #8
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <_ZNK6tflite21FullyConnectedOptions14weights_formatEv>:
  tflite::FullyConnectedOptionsWeightsFormat weights_format() const {
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::FullyConnectedOptionsWeightsFormat>(GetField<int8_t>(VT_WEIGHTS_FORMAT, 0));
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	2106      	movs	r1, #6
 8002da6:	4618      	mov	r0, r3
 8002da8:	f000 fecd 	bl	8003b46 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8002dac:	4603      	mov	r3, r0
  }
 8002dae:	4618      	mov	r0, r3
 8002db0:	3708      	adds	r7, #8
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <_ZNK6tflite21FullyConnectedOptions13keep_num_dimsEv>:
  bool keep_num_dims() const {
 8002db6:	b580      	push	{r7, lr}
 8002db8:	b082      	sub	sp, #8
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
    return GetField<uint8_t>(VT_KEEP_NUM_DIMS, 0) != 0;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	2108      	movs	r1, #8
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f000 fe71 	bl	8003aac <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	bf14      	ite	ne
 8002dd0:	2301      	movne	r3, #1
 8002dd2:	2300      	moveq	r3, #0
 8002dd4:	b2db      	uxtb	r3, r3
  }
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3708      	adds	r7, #8
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <_ZNK6tflite21FullyConnectedOptions26asymmetric_quantize_inputsEv>:
  bool asymmetric_quantize_inputs() const {
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b082      	sub	sp, #8
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
    return GetField<uint8_t>(VT_ASYMMETRIC_QUANTIZE_INPUTS, 0) != 0;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	210a      	movs	r1, #10
 8002dec:	4618      	mov	r0, r3
 8002dee:	f000 fe5d 	bl	8003aac <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	bf14      	ite	ne
 8002df8:	2301      	movne	r3, #1
 8002dfa:	2300      	moveq	r3, #0
 8002dfc:	b2db      	uxtb	r3, r3
  }
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3708      	adds	r7, #8
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <_ZNK6tflite21FullyConnectedOptions19quantized_bias_typeEv>:
  tflite::TensorType quantized_bias_type() const {
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b082      	sub	sp, #8
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::TensorType>(GetField<int8_t>(VT_QUANTIZED_BIAS_TYPE, 0));
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	210c      	movs	r1, #12
 8002e14:	4618      	mov	r0, r3
 8002e16:	f000 fe96 	bl	8003b46 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8002e1a:	4603      	mov	r3, r0
  }
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3708      	adds	r7, #8
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <_ZNK6tflite14SoftmaxOptions4betaEv>:
  float beta() const {
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
    return GetField<float>(VT_BETA, 0.0f);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8002e48 <_ZNK6tflite14SoftmaxOptions4betaEv+0x24>
 8002e32:	2104      	movs	r1, #4
 8002e34:	4618      	mov	r0, r3
 8002e36:	f000 feb6 	bl	8003ba6 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>
 8002e3a:	eef0 7a40 	vmov.f32	s15, s0
  }
 8002e3e:	eeb0 0a67 	vmov.f32	s0, s15
 8002e42:	3708      	adds	r7, #8
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	00000000 	.word	0x00000000

08002e4c <_ZNK6tflite14ReshapeOptions9new_shapeEv>:
  const ::flatbuffers::Vector<int32_t> *new_shape() const {
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
    return GetPointer<const ::flatbuffers::Vector<int32_t> *>(VT_NEW_SHAPE);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2104      	movs	r1, #4
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7fe ff2a 	bl	8001cb2 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlmEEmEET_t>
 8002e5e:	4603      	mov	r3, r0
  }
 8002e60:	4618      	mov	r0, r3
 8002e62:	3708      	adds	r7, #8
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <_ZNK6tflite9IfOptions19then_subgraph_indexEv>:
  int32_t then_subgraph_index() const {
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_THEN_SUBGRAPH_INDEX, 0);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	2104      	movs	r1, #4
 8002e76:	4618      	mov	r0, r3
 8002e78:	f000 fe47 	bl	8003b0a <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8002e7c:	4603      	mov	r3, r0
  }
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3708      	adds	r7, #8
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}

08002e86 <_ZNK6tflite9IfOptions19else_subgraph_indexEv>:
  int32_t else_subgraph_index() const {
 8002e86:	b580      	push	{r7, lr}
 8002e88:	b082      	sub	sp, #8
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_ELSE_SUBGRAPH_INDEX, 0);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	2106      	movs	r1, #6
 8002e94:	4618      	mov	r0, r3
 8002e96:	f000 fe38 	bl	8003b0a <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8002e9a:	4603      	mov	r3, r0
  }
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3708      	adds	r7, #8
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <_ZNK6tflite15CallOnceOptions19init_subgraph_indexEv>:
  int32_t init_subgraph_index() const {
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_INIT_SUBGRAPH_INDEX, 0);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	2104      	movs	r1, #4
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f000 fe29 	bl	8003b0a <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8002eb8:	4603      	mov	r3, r0
  }
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3708      	adds	r7, #8
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}

08002ec2 <_ZNK6tflite12WhileOptions19cond_subgraph_indexEv>:
  int32_t cond_subgraph_index() const {
 8002ec2:	b580      	push	{r7, lr}
 8002ec4:	b082      	sub	sp, #8
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_COND_SUBGRAPH_INDEX, 0);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	2104      	movs	r1, #4
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f000 fe1a 	bl	8003b0a <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8002ed6:	4603      	mov	r3, r0
  }
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3708      	adds	r7, #8
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <_ZNK6tflite12WhileOptions19body_subgraph_indexEv>:
  int32_t body_subgraph_index() const {
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_BODY_SUBGRAPH_INDEX, 0);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	2106      	movs	r1, #6
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f000 fe0b 	bl	8003b0a <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8002ef4:	4603      	mov	r3, r0
  }
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3708      	adds	r7, #8
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}

08002efe <_ZNK6tflite8Operator20builtin_options_typeEv>:
  tflite::BuiltinOptions builtin_options_type() const {
 8002efe:	b580      	push	{r7, lr}
 8002f00:	b082      	sub	sp, #8
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::BuiltinOptions>(GetField<uint8_t>(VT_BUILTIN_OPTIONS_TYPE, 0));
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	210a      	movs	r1, #10
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f000 fdcd 	bl	8003aac <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 8002f12:	4603      	mov	r3, r0
  }
 8002f14:	4618      	mov	r0, r3
 8002f16:	3708      	adds	r7, #8
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <_ZNK6tflite8Operator15builtin_optionsEv>:
  const void *builtin_options() const {
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
    return GetPointer<const void *>(VT_BUILTIN_OPTIONS);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	210c      	movs	r1, #12
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f000 fdde 	bl	8003aea <_ZNK11flatbuffers5Table10GetPointerIPKvmEET_t>
 8002f2e:	4603      	mov	r3, r0
  }
 8002f30:	4618      	mov	r0, r3
 8002f32:	3708      	adds	r7, #8
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <_ZNK6tflite8Operator32builtin_options_as_Conv2DOptionsEv>:
  const tflite::Conv2DOptions *builtin_options_as_Conv2DOptions() const {
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_Conv2DOptions ? static_cast<const tflite::Conv2DOptions *>(builtin_options()) : nullptr;
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f7ff ffdc 	bl	8002efe <_ZNK6tflite8Operator20builtin_options_typeEv>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d104      	bne.n	8002f56 <_ZNK6tflite8Operator32builtin_options_as_Conv2DOptionsEv+0x1e>
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f7ff ffe5 	bl	8002f1c <_ZNK6tflite8Operator15builtin_optionsEv>
 8002f52:	4603      	mov	r3, r0
 8002f54:	e000      	b.n	8002f58 <_ZNK6tflite8Operator32builtin_options_as_Conv2DOptionsEv+0x20>
 8002f56:	2300      	movs	r3, #0
  }
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3708      	adds	r7, #8
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <_ZNK6tflite8Operator41builtin_options_as_DepthwiseConv2DOptionsEv>:
  const tflite::DepthwiseConv2DOptions *builtin_options_as_DepthwiseConv2DOptions() const {
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_DepthwiseConv2DOptions ? static_cast<const tflite::DepthwiseConv2DOptions *>(builtin_options()) : nullptr;
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f7ff ffc8 	bl	8002efe <_ZNK6tflite8Operator20builtin_options_typeEv>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d104      	bne.n	8002f7e <_ZNK6tflite8Operator41builtin_options_as_DepthwiseConv2DOptionsEv+0x1e>
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f7ff ffd1 	bl	8002f1c <_ZNK6tflite8Operator15builtin_optionsEv>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	e000      	b.n	8002f80 <_ZNK6tflite8Operator41builtin_options_as_DepthwiseConv2DOptionsEv+0x20>
 8002f7e:	2300      	movs	r3, #0
  }
 8002f80:	4618      	mov	r0, r3
 8002f82:	3708      	adds	r7, #8
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <_ZNK6tflite8Operator32builtin_options_as_Pool2DOptionsEv>:
  const tflite::Pool2DOptions *builtin_options_as_Pool2DOptions() const {
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_Pool2DOptions ? static_cast<const tflite::Pool2DOptions *>(builtin_options()) : nullptr;
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f7ff ffb4 	bl	8002efe <_ZNK6tflite8Operator20builtin_options_typeEv>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b05      	cmp	r3, #5
 8002f9a:	d104      	bne.n	8002fa6 <_ZNK6tflite8Operator32builtin_options_as_Pool2DOptionsEv+0x1e>
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f7ff ffbd 	bl	8002f1c <_ZNK6tflite8Operator15builtin_optionsEv>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	e000      	b.n	8002fa8 <_ZNK6tflite8Operator32builtin_options_as_Pool2DOptionsEv+0x20>
 8002fa6:	2300      	movs	r3, #0
  }
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3708      	adds	r7, #8
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <_ZNK6tflite8Operator40builtin_options_as_FullyConnectedOptionsEv>:
  const tflite::FullyConnectedOptions *builtin_options_as_FullyConnectedOptions() const {
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_FullyConnectedOptions ? static_cast<const tflite::FullyConnectedOptions *>(builtin_options()) : nullptr;
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f7ff ffa0 	bl	8002efe <_ZNK6tflite8Operator20builtin_options_typeEv>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b08      	cmp	r3, #8
 8002fc2:	d104      	bne.n	8002fce <_ZNK6tflite8Operator40builtin_options_as_FullyConnectedOptionsEv+0x1e>
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f7ff ffa9 	bl	8002f1c <_ZNK6tflite8Operator15builtin_optionsEv>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	e000      	b.n	8002fd0 <_ZNK6tflite8Operator40builtin_options_as_FullyConnectedOptionsEv+0x20>
 8002fce:	2300      	movs	r3, #0
  }
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3708      	adds	r7, #8
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <_ZNK6tflite8Operator33builtin_options_as_SoftmaxOptionsEv>:
  const tflite::SoftmaxOptions *builtin_options_as_SoftmaxOptions() const {
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_SoftmaxOptions ? static_cast<const tflite::SoftmaxOptions *>(builtin_options()) : nullptr;
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f7ff ff8c 	bl	8002efe <_ZNK6tflite8Operator20builtin_options_typeEv>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b09      	cmp	r3, #9
 8002fea:	d104      	bne.n	8002ff6 <_ZNK6tflite8Operator33builtin_options_as_SoftmaxOptionsEv+0x1e>
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f7ff ff95 	bl	8002f1c <_ZNK6tflite8Operator15builtin_optionsEv>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	e000      	b.n	8002ff8 <_ZNK6tflite8Operator33builtin_options_as_SoftmaxOptionsEv+0x20>
 8002ff6:	2300      	movs	r3, #0
  }
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3708      	adds	r7, #8
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <_ZNK6tflite8Operator33builtin_options_as_ReshapeOptionsEv>:
  const tflite::ReshapeOptions *builtin_options_as_ReshapeOptions() const {
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_ReshapeOptions ? static_cast<const tflite::ReshapeOptions *>(builtin_options()) : nullptr;
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f7ff ff78 	bl	8002efe <_ZNK6tflite8Operator20builtin_options_typeEv>
 800300e:	4603      	mov	r3, r0
 8003010:	2b11      	cmp	r3, #17
 8003012:	d104      	bne.n	800301e <_ZNK6tflite8Operator33builtin_options_as_ReshapeOptionsEv+0x1e>
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f7ff ff81 	bl	8002f1c <_ZNK6tflite8Operator15builtin_optionsEv>
 800301a:	4603      	mov	r3, r0
 800301c:	e000      	b.n	8003020 <_ZNK6tflite8Operator33builtin_options_as_ReshapeOptionsEv+0x20>
 800301e:	2300      	movs	r3, #0
  }
 8003020:	4618      	mov	r0, r3
 8003022:	3708      	adds	r7, #8
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <_ZNK6tflite8Operator28builtin_options_as_IfOptionsEv>:
  const tflite::IfOptions *builtin_options_as_IfOptions() const {
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_IfOptions ? static_cast<const tflite::IfOptions *>(builtin_options()) : nullptr;
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f7ff ff64 	bl	8002efe <_ZNK6tflite8Operator20builtin_options_typeEv>
 8003036:	4603      	mov	r3, r0
 8003038:	2b5c      	cmp	r3, #92	; 0x5c
 800303a:	d104      	bne.n	8003046 <_ZNK6tflite8Operator28builtin_options_as_IfOptionsEv+0x1e>
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f7ff ff6d 	bl	8002f1c <_ZNK6tflite8Operator15builtin_optionsEv>
 8003042:	4603      	mov	r3, r0
 8003044:	e000      	b.n	8003048 <_ZNK6tflite8Operator28builtin_options_as_IfOptionsEv+0x20>
 8003046:	2300      	movs	r3, #0
  }
 8003048:	4618      	mov	r0, r3
 800304a:	3708      	adds	r7, #8
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}

08003050 <_ZNK6tflite8Operator31builtin_options_as_WhileOptionsEv>:
  const tflite::WhileOptions *builtin_options_as_WhileOptions() const {
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_WhileOptions ? static_cast<const tflite::WhileOptions *>(builtin_options()) : nullptr;
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f7ff ff50 	bl	8002efe <_ZNK6tflite8Operator20builtin_options_typeEv>
 800305e:	4603      	mov	r3, r0
 8003060:	2b5d      	cmp	r3, #93	; 0x5d
 8003062:	d104      	bne.n	800306e <_ZNK6tflite8Operator31builtin_options_as_WhileOptionsEv+0x1e>
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f7ff ff59 	bl	8002f1c <_ZNK6tflite8Operator15builtin_optionsEv>
 800306a:	4603      	mov	r3, r0
 800306c:	e000      	b.n	8003070 <_ZNK6tflite8Operator31builtin_options_as_WhileOptionsEv+0x20>
 800306e:	2300      	movs	r3, #0
  }
 8003070:	4618      	mov	r0, r3
 8003072:	3708      	adds	r7, #8
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <_ZNK6tflite8Operator34builtin_options_as_CallOnceOptionsEv>:
  const tflite::CallOnceOptions *builtin_options_as_CallOnceOptions() const {
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_CallOnceOptions ? static_cast<const tflite::CallOnceOptions *>(builtin_options()) : nullptr;
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f7ff ff3c 	bl	8002efe <_ZNK6tflite8Operator20builtin_options_typeEv>
 8003086:	4603      	mov	r3, r0
 8003088:	2b67      	cmp	r3, #103	; 0x67
 800308a:	d104      	bne.n	8003096 <_ZNK6tflite8Operator34builtin_options_as_CallOnceOptionsEv+0x1e>
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f7ff ff45 	bl	8002f1c <_ZNK6tflite8Operator15builtin_optionsEv>
 8003092:	4603      	mov	r3, r0
 8003094:	e000      	b.n	8003098 <_ZNK6tflite8Operator34builtin_options_as_CallOnceOptionsEv+0x20>
 8003096:	2300      	movs	r3, #0
  }
 8003098:	4618      	mov	r0, r3
 800309a:	3708      	adds	r7, #8
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>:
// parsed op data (e.g., when model parameters are invalid).
class SafeBuiltinDataAllocator {
 public:
  class BuiltinDataDeleter {
   public:
    explicit BuiltinDataDeleter(BuiltinDataAllocator* allocator)
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
        : allocator_(allocator) {}
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	683a      	ldr	r2, [r7, #0]
 80030ae:	601a      	str	r2, [r3, #0]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	4618      	mov	r0, r3
 80030b4:	370c      	adds	r7, #12
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr

080030be <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>:

    void operator()(void* data) { allocator_->Deallocate(data); }
 80030be:	b580      	push	{r7, lr}
 80030c0:	b082      	sub	sp, #8
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
 80030c6:	6039      	str	r1, [r7, #0]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	3304      	adds	r3, #4
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	6839      	ldr	r1, [r7, #0]
 80030d8:	4610      	mov	r0, r2
 80030da:	4798      	blx	r3
 80030dc:	bf00      	nop
 80030de:	3708      	adds	r7, #8
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>:
  };

  template <typename T>
  using BuiltinDataPtr = std::unique_ptr<T, BuiltinDataDeleter>;

  explicit SafeBuiltinDataAllocator(BuiltinDataAllocator* allocator)
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
      : allocator_(allocator) {}
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	683a      	ldr	r2, [r7, #0]
 80030f2:	601a      	str	r2, [r3, #0]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	4618      	mov	r0, r3
 80030f8:	370c      	adds	r7, #12
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr

08003102 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:

// All the Parse functions take some pointers as params and this function has
// the common DCHECKs to catch if any of those are nullptr.
void CheckParsePointerParams(const Operator* op, ErrorReporter* error_reporter,
                             BuiltinDataAllocator* allocator,
                             void** builtin_data) {
 8003102:	b580      	push	{r7, lr}
 8003104:	b084      	sub	sp, #16
 8003106:	af00      	add	r7, sp, #0
 8003108:	60f8      	str	r0, [r7, #12]
 800310a:	60b9      	str	r1, [r7, #8]
 800310c:	607a      	str	r2, [r7, #4]
 800310e:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(op != nullptr);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d101      	bne.n	800311a <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x18>
 8003116:	f01c fca3 	bl	801fa60 <abort>
  TFLITE_DCHECK(error_reporter != nullptr);
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d101      	bne.n	8003124 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x22>
 8003120:	f01c fc9e 	bl	801fa60 <abort>
  TFLITE_DCHECK(allocator != nullptr);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d101      	bne.n	800312e <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2c>
 800312a:	f01c fc99 	bl	801fa60 <abort>
  TFLITE_DCHECK(builtin_data != nullptr);
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d101      	bne.n	8003138 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x36>
 8003134:	f01c fc94 	bl	801fa60 <abort>
}
 8003138:	bf00      	nop
 800313a:	3710      	adds	r7, #16
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}

08003140 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>:
  }
  return kTfLiteOk;
}

// Converts the flatbuffer activation to what is used at runtime.
TfLiteFusedActivation ConvertActivation(ActivationFunctionType activation) {
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	4603      	mov	r3, r0
 8003148:	71fb      	strb	r3, [r7, #7]
  switch (activation) {
 800314a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800314e:	2b05      	cmp	r3, #5
 8003150:	d81a      	bhi.n	8003188 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x48>
 8003152:	a201      	add	r2, pc, #4	; (adr r2, 8003158 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x18>)
 8003154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003158:	08003171 	.word	0x08003171
 800315c:	08003175 	.word	0x08003175
 8003160:	08003179 	.word	0x08003179
 8003164:	0800317d 	.word	0x0800317d
 8003168:	08003181 	.word	0x08003181
 800316c:	08003185 	.word	0x08003185
    case ActivationFunctionType_NONE:
      return kTfLiteActNone;
 8003170:	2300      	movs	r3, #0
 8003172:	e00a      	b.n	800318a <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_RELU:
      return kTfLiteActRelu;
 8003174:	2301      	movs	r3, #1
 8003176:	e008      	b.n	800318a <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_RELU_N1_TO_1:
      return kTfLiteActReluN1To1;
 8003178:	2302      	movs	r3, #2
 800317a:	e006      	b.n	800318a <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_RELU6:
      return kTfLiteActRelu6;
 800317c:	2303      	movs	r3, #3
 800317e:	e004      	b.n	800318a <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_TANH:
      return kTfLiteActTanh;
 8003180:	2304      	movs	r3, #4
 8003182:	e002      	b.n	800318a <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_SIGN_BIT:
      return kTfLiteActSignBit;
 8003184:	2305      	movs	r3, #5
 8003186:	e000      	b.n	800318a <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
  }
  return kTfLiteActNone;
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	370c      	adds	r7, #12
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop

08003198 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>:

// Converts the flatbuffer padding enum to what is used at runtime.
TfLitePadding ConvertPadding(Padding padding) {
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	4603      	mov	r3, r0
 80031a0:	71fb      	strb	r3, [r7, #7]
  switch (padding) {
 80031a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d002      	beq.n	80031b0 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0x18>
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d002      	beq.n	80031b4 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0x1c>
 80031ae:	e003      	b.n	80031b8 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0x20>
    case Padding_SAME:
      return kTfLitePaddingSame;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e002      	b.n	80031ba <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0x22>
    case Padding_VALID:
      return kTfLitePaddingValid;
 80031b4:	2302      	movs	r3, #2
 80031b6:	e000      	b.n	80031ba <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0x22>
  }
  return kTfLitePaddingUnknown;
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	370c      	adds	r7, #12
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
	...

080031c8 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>:
}  // NOLINT[readability/fn_size]
#endif  // !defined(TF_LITE_STATIC_MEMORY)
}  // namespace

TfLiteStatus ConvertTensorType(TensorType tensor_type, TfLiteType* type,
                               ErrorReporter* error_reporter) {
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	4603      	mov	r3, r0
 80031d0:	60b9      	str	r1, [r7, #8]
 80031d2:	607a      	str	r2, [r7, #4]
 80031d4:	73fb      	strb	r3, [r7, #15]
  switch (tensor_type) {
 80031d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031da:	2b12      	cmp	r3, #18
 80031dc:	f200 8089 	bhi.w	80032f2 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x12a>
 80031e0:	a201      	add	r2, pc, #4	; (adr r2, 80031e8 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x20>)
 80031e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031e6:	bf00      	nop
 80031e8:	08003249 	.word	0x08003249
 80031ec:	08003235 	.word	0x08003235
 80031f0:	08003271 	.word	0x08003271
 80031f4:	08003285 	.word	0x08003285
 80031f8:	08003299 	.word	0x08003299
 80031fc:	080032ad 	.word	0x080032ad
 8003200:	080032b7 	.word	0x080032b7
 8003204:	0800325d 	.word	0x0800325d
 8003208:	080032c1 	.word	0x080032c1
 800320c:	0800328f 	.word	0x0800328f
 8003210:	08003253 	.word	0x08003253
 8003214:	080032cb 	.word	0x080032cb
 8003218:	080032a3 	.word	0x080032a3
 800321c:	080032d5 	.word	0x080032d5
 8003220:	080032df 	.word	0x080032df
 8003224:	0800327b 	.word	0x0800327b
 8003228:	08003267 	.word	0x08003267
 800322c:	080032e9 	.word	0x080032e9
 8003230:	0800323f 	.word	0x0800323f
    case TensorType_FLOAT16:
      *type = kTfLiteFloat16;
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	220a      	movs	r2, #10
 8003238:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 800323a:	2300      	movs	r3, #0
 800323c:	e064      	b.n	8003308 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x140>
    case TensorType_BFLOAT16:
      *type = kTfLiteBFloat16;
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	2213      	movs	r2, #19
 8003242:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8003244:	2300      	movs	r3, #0
 8003246:	e05f      	b.n	8003308 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x140>
    case TensorType_FLOAT32:
      *type = kTfLiteFloat32;
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	2201      	movs	r2, #1
 800324c:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 800324e:	2300      	movs	r3, #0
 8003250:	e05a      	b.n	8003308 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x140>
    case TensorType_FLOAT64:
      *type = kTfLiteFloat64;
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	220b      	movs	r2, #11
 8003256:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8003258:	2300      	movs	r3, #0
 800325a:	e055      	b.n	8003308 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x140>
    case TensorType_INT16:
      *type = kTfLiteInt16;
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	2207      	movs	r2, #7
 8003260:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8003262:	2300      	movs	r3, #0
 8003264:	e050      	b.n	8003308 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x140>
    case TensorType_UINT16:
      *type = kTfLiteUInt16;
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	2211      	movs	r2, #17
 800326a:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 800326c:	2300      	movs	r3, #0
 800326e:	e04b      	b.n	8003308 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x140>
    case TensorType_INT32:
      *type = kTfLiteInt32;
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	2202      	movs	r2, #2
 8003274:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8003276:	2300      	movs	r3, #0
 8003278:	e046      	b.n	8003308 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x140>
    case TensorType_UINT32:
      *type = kTfLiteUInt32;
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	2210      	movs	r2, #16
 800327e:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8003280:	2300      	movs	r3, #0
 8003282:	e041      	b.n	8003308 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x140>
    case TensorType_UINT8:
      *type = kTfLiteUInt8;
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	2203      	movs	r2, #3
 8003288:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 800328a:	2300      	movs	r3, #0
 800328c:	e03c      	b.n	8003308 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x140>
    case TensorType_INT8:
      *type = kTfLiteInt8;
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	2209      	movs	r2, #9
 8003292:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8003294:	2300      	movs	r3, #0
 8003296:	e037      	b.n	8003308 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x140>
    case TensorType_INT64:
      *type = kTfLiteInt64;
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	2204      	movs	r2, #4
 800329c:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 800329e:	2300      	movs	r3, #0
 80032a0:	e032      	b.n	8003308 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x140>
    case TensorType_UINT64:
      *type = kTfLiteUInt64;
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	220d      	movs	r2, #13
 80032a6:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 80032a8:	2300      	movs	r3, #0
 80032aa:	e02d      	b.n	8003308 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x140>
    case TensorType_STRING:
      *type = kTfLiteString;
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	2205      	movs	r2, #5
 80032b0:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 80032b2:	2300      	movs	r3, #0
 80032b4:	e028      	b.n	8003308 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x140>
    case TensorType_BOOL:
      *type = kTfLiteBool;
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	2206      	movs	r2, #6
 80032ba:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 80032bc:	2300      	movs	r3, #0
 80032be:	e023      	b.n	8003308 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x140>
    case TensorType_COMPLEX64:
      *type = kTfLiteComplex64;
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	2208      	movs	r2, #8
 80032c4:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 80032c6:	2300      	movs	r3, #0
 80032c8:	e01e      	b.n	8003308 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x140>
    case TensorType_COMPLEX128:
      *type = kTfLiteComplex128;
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	220c      	movs	r2, #12
 80032ce:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 80032d0:	2300      	movs	r3, #0
 80032d2:	e019      	b.n	8003308 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x140>
    case TensorType_RESOURCE:
      *type = kTfLiteResource;
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	220e      	movs	r2, #14
 80032d8:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 80032da:	2300      	movs	r3, #0
 80032dc:	e014      	b.n	8003308 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x140>
    case TensorType_VARIANT:
      *type = kTfLiteVariant;
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	220f      	movs	r2, #15
 80032e2:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 80032e4:	2300      	movs	r3, #0
 80032e6:	e00f      	b.n	8003308 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x140>
    case TensorType_INT4:
      *type = kTfLiteInt4;
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	2212      	movs	r2, #18
 80032ec:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 80032ee:	2300      	movs	r3, #0
 80032f0:	e00a      	b.n	8003308 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x140>
    default:
      *type = kTfLiteNoType;
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	2200      	movs	r2, #0
 80032f6:	701a      	strb	r2, [r3, #0]
      TF_LITE_REPORT_ERROR(error_reporter,
 80032f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032fc:	461a      	mov	r2, r3
 80032fe:	4904      	ldr	r1, [pc, #16]	; (8003310 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x148>)
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f7ff fbc2 	bl	8002a8a <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Unsupported data type %d in tensor\n", tensor_type);
      return kTfLiteError;
 8003306:	2301      	movs	r3, #1
  }
}
 8003308:	4618      	mov	r0, r3
 800330a:	3710      	adds	r7, #16
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	0802145c 	.word	0x0802145c

08003314 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
  *builtin_data = params.release();
  return kTfLiteOk;
}

TfLiteStatus ParseConv2D(const Operator* op, ErrorReporter* error_reporter,
                         BuiltinDataAllocator* allocator, void** builtin_data) {
 8003314:	b5b0      	push	{r4, r5, r7, lr}
 8003316:	b08c      	sub	sp, #48	; 0x30
 8003318:	af02      	add	r7, sp, #8
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	60b9      	str	r1, [r7, #8]
 800331e:	607a      	str	r2, [r7, #4]
 8003320:	603b      	str	r3, [r7, #0]
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	68b9      	ldr	r1, [r7, #8]
 8003328:	68f8      	ldr	r0, [r7, #12]
 800332a:	f7ff feea 	bl	8003102 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>

  SafeBuiltinDataAllocator safe_allocator(allocator);
 800332e:	f107 031c 	add.w	r3, r7, #28
 8003332:	6879      	ldr	r1, [r7, #4]
 8003334:	4618      	mov	r0, r3
 8003336:	f7ff fed5 	bl	80030e4 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>
  std::unique_ptr<TfLiteConvParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteConvParams>();
 800333a:	f107 0314 	add.w	r3, r7, #20
 800333e:	f107 021c 	add.w	r2, r7, #28
 8003342:	4611      	mov	r1, r2
 8003344:	4618      	mov	r0, r3
 8003346:	f000 fcbb 	bl	8003cc0 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI16TfLiteConvParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 800334a:	f107 0314 	add.w	r3, r7, #20
 800334e:	2100      	movs	r1, #0
 8003350:	4618      	mov	r0, r3
 8003352:	f000 fcf5 	bl	8003d40 <_ZStneI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 8003356:	4603      	mov	r3, r0
 8003358:	f083 0301 	eor.w	r3, r3, #1
 800335c:	b2db      	uxtb	r3, r3
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00c      	beq.n	800337c <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>
 8003362:	4b47      	ldr	r3, [pc, #284]	; (8003480 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x16c>)
 8003364:	9301      	str	r3, [sp, #4]
 8003366:	f44f 63a5 	mov.w	r3, #1320	; 0x528
 800336a:	9300      	str	r3, [sp, #0]
 800336c:	4b45      	ldr	r3, [pc, #276]	; (8003484 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x170>)
 800336e:	4a46      	ldr	r2, [pc, #280]	; (8003488 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x174>)
 8003370:	68b9      	ldr	r1, [r7, #8]
 8003372:	68b8      	ldr	r0, [r7, #8]
 8003374:	f7ff fba2 	bl	8002abc <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 8003378:	2401      	movs	r4, #1
 800337a:	e076      	b.n	800346a <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x156>

  const Conv2DOptions* schema_params = op->builtin_options_as_Conv2DOptions();
 800337c:	68f8      	ldr	r0, [r7, #12]
 800337e:	f7ff fddb 	bl	8002f38 <_ZNK6tflite8Operator32builtin_options_as_Conv2DOptionsEv>
 8003382:	6278      	str	r0, [r7, #36]	; 0x24

  if (schema_params != nullptr) {
 8003384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003386:	2b00      	cmp	r3, #0
 8003388:	d066      	beq.n	8003458 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x144>
    params->padding = ConvertPadding(schema_params->padding());
 800338a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800338c:	f7ff fbc9 	bl	8002b22 <_ZNK6tflite13Conv2DOptions7paddingEv>
 8003390:	4603      	mov	r3, r0
 8003392:	461d      	mov	r5, r3
 8003394:	f107 0314 	add.w	r3, r7, #20
 8003398:	4618      	mov	r0, r3
 800339a:	f000 fcde 	bl	8003d5a <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800339e:	4604      	mov	r4, r0
 80033a0:	4628      	mov	r0, r5
 80033a2:	f7ff fef9 	bl	8003198 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>
 80033a6:	4603      	mov	r3, r0
 80033a8:	7023      	strb	r3, [r4, #0]
    params->stride_width = schema_params->stride_w();
 80033aa:	f107 0314 	add.w	r3, r7, #20
 80033ae:	4618      	mov	r0, r3
 80033b0:	f000 fcd3 	bl	8003d5a <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80033b4:	4604      	mov	r4, r0
 80033b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80033b8:	f7ff fbc2 	bl	8002b40 <_ZNK6tflite13Conv2DOptions8stride_wEv>
 80033bc:	4603      	mov	r3, r0
 80033be:	6063      	str	r3, [r4, #4]
    params->stride_height = schema_params->stride_h();
 80033c0:	f107 0314 	add.w	r3, r7, #20
 80033c4:	4618      	mov	r0, r3
 80033c6:	f000 fcc8 	bl	8003d5a <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80033ca:	4604      	mov	r4, r0
 80033cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80033ce:	f7ff fbc6 	bl	8002b5e <_ZNK6tflite13Conv2DOptions8stride_hEv>
 80033d2:	4603      	mov	r3, r0
 80033d4:	60a3      	str	r3, [r4, #8]
    params->activation =
        ConvertActivation(schema_params->fused_activation_function());
 80033d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80033d8:	f7ff fbd0 	bl	8002b7c <_ZNK6tflite13Conv2DOptions25fused_activation_functionEv>
 80033dc:	4603      	mov	r3, r0
 80033de:	461d      	mov	r5, r3
    params->activation =
 80033e0:	f107 0314 	add.w	r3, r7, #20
 80033e4:	4618      	mov	r0, r3
 80033e6:	f000 fcb8 	bl	8003d5a <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80033ea:	4604      	mov	r4, r0
        ConvertActivation(schema_params->fused_activation_function());
 80033ec:	4628      	mov	r0, r5
 80033ee:	f7ff fea7 	bl	8003140 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>
 80033f2:	4603      	mov	r3, r0
    params->activation =
 80033f4:	7323      	strb	r3, [r4, #12]

    params->dilation_width_factor = schema_params->dilation_w_factor();
 80033f6:	f107 0314 	add.w	r3, r7, #20
 80033fa:	4618      	mov	r0, r3
 80033fc:	f000 fcad 	bl	8003d5a <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8003400:	4604      	mov	r4, r0
 8003402:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003404:	f7ff fbc9 	bl	8002b9a <_ZNK6tflite13Conv2DOptions17dilation_w_factorEv>
 8003408:	4603      	mov	r3, r0
 800340a:	6123      	str	r3, [r4, #16]
    params->dilation_height_factor = schema_params->dilation_h_factor();
 800340c:	f107 0314 	add.w	r3, r7, #20
 8003410:	4618      	mov	r0, r3
 8003412:	f000 fca2 	bl	8003d5a <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8003416:	4604      	mov	r4, r0
 8003418:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800341a:	f7ff fbcd 	bl	8002bb8 <_ZNK6tflite13Conv2DOptions17dilation_h_factorEv>
 800341e:	4603      	mov	r3, r0
 8003420:	6163      	str	r3, [r4, #20]
    TF_LITE_ENSURE_STATUS(
 8003422:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003424:	f7ff fbd7 	bl	8002bd6 <_ZNK6tflite13Conv2DOptions19quantized_bias_typeEv>
 8003428:	4603      	mov	r3, r0
 800342a:	461c      	mov	r4, r3
 800342c:	f107 0314 	add.w	r3, r7, #20
 8003430:	4618      	mov	r0, r3
 8003432:	f000 fc92 	bl	8003d5a <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8003436:	4603      	mov	r3, r0
 8003438:	3318      	adds	r3, #24
 800343a:	68ba      	ldr	r2, [r7, #8]
 800343c:	4619      	mov	r1, r3
 800343e:	4620      	mov	r0, r4
 8003440:	f7ff fec2 	bl	80031c8 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
 8003444:	4603      	mov	r3, r0
 8003446:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800344a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800344e:	2b00      	cmp	r3, #0
 8003450:	d002      	beq.n	8003458 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x144>
 8003452:	f897 4023 	ldrb.w	r4, [r7, #35]	; 0x23
 8003456:	e008      	b.n	800346a <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x156>
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better understand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 8003458:	f107 0314 	add.w	r3, r7, #20
 800345c:	4618      	mov	r0, r3
 800345e:	f000 fc88 	bl	8003d72 <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 8003462:	4602      	mov	r2, r0
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8003468:	2400      	movs	r4, #0
}
 800346a:	f107 0314 	add.w	r3, r7, #20
 800346e:	4618      	mov	r0, r3
 8003470:	f000 fc44 	bl	8003cfc <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 8003474:	4623      	mov	r3, r4
 8003476:	4618      	mov	r0, r3
 8003478:	3728      	adds	r7, #40	; 0x28
 800347a:	46bd      	mov	sp, r7
 800347c:	bdb0      	pop	{r4, r5, r7, pc}
 800347e:	bf00      	nop
 8003480:	080214d8 	.word	0x080214d8
 8003484:	08021480 	.word	0x08021480
 8003488:	080214c0 	.word	0x080214c0

0800348c <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
}

TfLiteStatus ParseDepthwiseConv2D(const Operator* op,
                                  ErrorReporter* error_reporter,
                                  BuiltinDataAllocator* allocator,
                                  void** builtin_data) {
 800348c:	b5b0      	push	{r4, r5, r7, lr}
 800348e:	b08a      	sub	sp, #40	; 0x28
 8003490:	af02      	add	r7, sp, #8
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	607a      	str	r2, [r7, #4]
 8003498:	603b      	str	r3, [r7, #0]
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	68b9      	ldr	r1, [r7, #8]
 80034a0:	68f8      	ldr	r0, [r7, #12]
 80034a2:	f7ff fe2e 	bl	8003102 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>

  SafeBuiltinDataAllocator safe_allocator(allocator);
 80034a6:	f107 0318 	add.w	r3, r7, #24
 80034aa:	6879      	ldr	r1, [r7, #4]
 80034ac:	4618      	mov	r0, r3
 80034ae:	f7ff fe19 	bl	80030e4 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>

  std::unique_ptr<TfLiteDepthwiseConvParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteDepthwiseConvParams>();
 80034b2:	f107 0310 	add.w	r3, r7, #16
 80034b6:	f107 0218 	add.w	r2, r7, #24
 80034ba:	4611      	mov	r1, r2
 80034bc:	4618      	mov	r0, r3
 80034be:	f000 fc65 	bl	8003d8c <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI25TfLiteDepthwiseConvParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 80034c2:	f107 0310 	add.w	r3, r7, #16
 80034c6:	2100      	movs	r1, #0
 80034c8:	4618      	mov	r0, r3
 80034ca:	f000 fc9f 	bl	8003e0c <_ZStneI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 80034ce:	4603      	mov	r3, r0
 80034d0:	f083 0301 	eor.w	r3, r3, #1
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d00c      	beq.n	80034f4 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>
 80034da:	4b3f      	ldr	r3, [pc, #252]	; (80035d8 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x14c>)
 80034dc:	9301      	str	r3, [sp, #4]
 80034de:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 80034e2:	9300      	str	r3, [sp, #0]
 80034e4:	4b3d      	ldr	r3, [pc, #244]	; (80035dc <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x150>)
 80034e6:	4a3e      	ldr	r2, [pc, #248]	; (80035e0 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x154>)
 80034e8:	68b9      	ldr	r1, [r7, #8]
 80034ea:	68b8      	ldr	r0, [r7, #8]
 80034ec:	f7ff fae6 	bl	8002abc <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 80034f0:	2401      	movs	r4, #1
 80034f2:	e066      	b.n	80035c2 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x136>

  const DepthwiseConv2DOptions* schema_params =
      op->builtin_options_as_DepthwiseConv2DOptions();
 80034f4:	68f8      	ldr	r0, [r7, #12]
 80034f6:	f7ff fd33 	bl	8002f60 <_ZNK6tflite8Operator41builtin_options_as_DepthwiseConv2DOptionsEv>
 80034fa:	61f8      	str	r0, [r7, #28]

  if (schema_params != nullptr) {
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d056      	beq.n	80035b0 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x124>
    params->padding = ConvertPadding(schema_params->padding());
 8003502:	69f8      	ldr	r0, [r7, #28]
 8003504:	f7ff fbd0 	bl	8002ca8 <_ZNK6tflite22DepthwiseConv2DOptions7paddingEv>
 8003508:	4603      	mov	r3, r0
 800350a:	461d      	mov	r5, r3
 800350c:	f107 0310 	add.w	r3, r7, #16
 8003510:	4618      	mov	r0, r3
 8003512:	f000 fc88 	bl	8003e26 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8003516:	4604      	mov	r4, r0
 8003518:	4628      	mov	r0, r5
 800351a:	f7ff fe3d 	bl	8003198 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>
 800351e:	4603      	mov	r3, r0
 8003520:	7023      	strb	r3, [r4, #0]
    params->stride_width = schema_params->stride_w();
 8003522:	f107 0310 	add.w	r3, r7, #16
 8003526:	4618      	mov	r0, r3
 8003528:	f000 fc7d 	bl	8003e26 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800352c:	4604      	mov	r4, r0
 800352e:	69f8      	ldr	r0, [r7, #28]
 8003530:	f7ff fbc9 	bl	8002cc6 <_ZNK6tflite22DepthwiseConv2DOptions8stride_wEv>
 8003534:	4603      	mov	r3, r0
 8003536:	6063      	str	r3, [r4, #4]
    params->stride_height = schema_params->stride_h();
 8003538:	f107 0310 	add.w	r3, r7, #16
 800353c:	4618      	mov	r0, r3
 800353e:	f000 fc72 	bl	8003e26 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8003542:	4604      	mov	r4, r0
 8003544:	69f8      	ldr	r0, [r7, #28]
 8003546:	f7ff fbcd 	bl	8002ce4 <_ZNK6tflite22DepthwiseConv2DOptions8stride_hEv>
 800354a:	4603      	mov	r3, r0
 800354c:	60a3      	str	r3, [r4, #8]
    params->depth_multiplier = schema_params->depth_multiplier();
 800354e:	f107 0310 	add.w	r3, r7, #16
 8003552:	4618      	mov	r0, r3
 8003554:	f000 fc67 	bl	8003e26 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8003558:	4604      	mov	r4, r0
 800355a:	69f8      	ldr	r0, [r7, #28]
 800355c:	f7ff fbd1 	bl	8002d02 <_ZNK6tflite22DepthwiseConv2DOptions16depth_multiplierEv>
 8003560:	4603      	mov	r3, r0
 8003562:	60e3      	str	r3, [r4, #12]
    params->activation =
        ConvertActivation(schema_params->fused_activation_function());
 8003564:	69f8      	ldr	r0, [r7, #28]
 8003566:	f7ff fbdb 	bl	8002d20 <_ZNK6tflite22DepthwiseConv2DOptions25fused_activation_functionEv>
 800356a:	4603      	mov	r3, r0
 800356c:	461d      	mov	r5, r3
    params->activation =
 800356e:	f107 0310 	add.w	r3, r7, #16
 8003572:	4618      	mov	r0, r3
 8003574:	f000 fc57 	bl	8003e26 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8003578:	4604      	mov	r4, r0
        ConvertActivation(schema_params->fused_activation_function());
 800357a:	4628      	mov	r0, r5
 800357c:	f7ff fde0 	bl	8003140 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>
 8003580:	4603      	mov	r3, r0
    params->activation =
 8003582:	7423      	strb	r3, [r4, #16]

    params->dilation_width_factor = schema_params->dilation_w_factor();
 8003584:	f107 0310 	add.w	r3, r7, #16
 8003588:	4618      	mov	r0, r3
 800358a:	f000 fc4c 	bl	8003e26 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800358e:	4604      	mov	r4, r0
 8003590:	69f8      	ldr	r0, [r7, #28]
 8003592:	f7ff fbd4 	bl	8002d3e <_ZNK6tflite22DepthwiseConv2DOptions17dilation_w_factorEv>
 8003596:	4603      	mov	r3, r0
 8003598:	6163      	str	r3, [r4, #20]
    params->dilation_height_factor = schema_params->dilation_h_factor();
 800359a:	f107 0310 	add.w	r3, r7, #16
 800359e:	4618      	mov	r0, r3
 80035a0:	f000 fc41 	bl	8003e26 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80035a4:	4604      	mov	r4, r0
 80035a6:	69f8      	ldr	r0, [r7, #28]
 80035a8:	f7ff fbd8 	bl	8002d5c <_ZNK6tflite22DepthwiseConv2DOptions17dilation_h_factorEv>
 80035ac:	4603      	mov	r3, r0
 80035ae:	61a3      	str	r3, [r4, #24]
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better understand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 80035b0:	f107 0310 	add.w	r3, r7, #16
 80035b4:	4618      	mov	r0, r3
 80035b6:	f000 fc42 	bl	8003e3e <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 80035ba:	4602      	mov	r2, r0
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 80035c0:	2400      	movs	r4, #0
}
 80035c2:	f107 0310 	add.w	r3, r7, #16
 80035c6:	4618      	mov	r0, r3
 80035c8:	f000 fbfe 	bl	8003dc8 <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 80035cc:	4623      	mov	r3, r4
 80035ce:	4618      	mov	r0, r3
 80035d0:	3720      	adds	r7, #32
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bdb0      	pop	{r4, r5, r7, pc}
 80035d6:	bf00      	nop
 80035d8:	080214d8 	.word	0x080214d8
 80035dc:	08021480 	.word	0x08021480
 80035e0:	080214c0 	.word	0x080214c0

080035e4 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
}

TfLiteStatus ParseFullyConnected(const Operator* op,
                                 ErrorReporter* error_reporter,
                                 BuiltinDataAllocator* allocator,
                                 void** builtin_data) {
 80035e4:	b5b0      	push	{r4, r5, r7, lr}
 80035e6:	b08c      	sub	sp, #48	; 0x30
 80035e8:	af02      	add	r7, sp, #8
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	607a      	str	r2, [r7, #4]
 80035f0:	603b      	str	r3, [r7, #0]
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	68b9      	ldr	r1, [r7, #8]
 80035f8:	68f8      	ldr	r0, [r7, #12]
 80035fa:	f7ff fd82 	bl	8003102 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>

  SafeBuiltinDataAllocator safe_allocator(allocator);
 80035fe:	f107 031c 	add.w	r3, r7, #28
 8003602:	6879      	ldr	r1, [r7, #4]
 8003604:	4618      	mov	r0, r3
 8003606:	f7ff fd6d 	bl	80030e4 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>

  std::unique_ptr<TfLiteFullyConnectedParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteFullyConnectedParams>();
 800360a:	f107 0314 	add.w	r3, r7, #20
 800360e:	f107 021c 	add.w	r2, r7, #28
 8003612:	4611      	mov	r1, r2
 8003614:	4618      	mov	r0, r3
 8003616:	f000 fc1f 	bl	8003e58 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI26TfLiteFullyConnectedParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 800361a:	f107 0314 	add.w	r3, r7, #20
 800361e:	2100      	movs	r1, #0
 8003620:	4618      	mov	r0, r3
 8003622:	f000 fc59 	bl	8003ed8 <_ZStneI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 8003626:	4603      	mov	r3, r0
 8003628:	f083 0301 	eor.w	r3, r3, #1
 800362c:	b2db      	uxtb	r3, r3
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00c      	beq.n	800364c <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>
 8003632:	4b44      	ldr	r3, [pc, #272]	; (8003744 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x160>)
 8003634:	9301      	str	r3, [sp, #4]
 8003636:	f240 6303 	movw	r3, #1539	; 0x603
 800363a:	9300      	str	r3, [sp, #0]
 800363c:	4b42      	ldr	r3, [pc, #264]	; (8003748 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x164>)
 800363e:	4a43      	ldr	r2, [pc, #268]	; (800374c <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x168>)
 8003640:	68b9      	ldr	r1, [r7, #8]
 8003642:	68b8      	ldr	r0, [r7, #8]
 8003644:	f7ff fa3a 	bl	8002abc <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 8003648:	2401      	movs	r4, #1
 800364a:	e071      	b.n	8003730 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x14c>

  const FullyConnectedOptions* schema_params =
      op->builtin_options_as_FullyConnectedOptions();
 800364c:	68f8      	ldr	r0, [r7, #12]
 800364e:	f7ff fcaf 	bl	8002fb0 <_ZNK6tflite8Operator40builtin_options_as_FullyConnectedOptionsEv>
 8003652:	6278      	str	r0, [r7, #36]	; 0x24

  if (schema_params != nullptr) {
 8003654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003656:	2b00      	cmp	r3, #0
 8003658:	d061      	beq.n	800371e <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x13a>
    params->activation =
        ConvertActivation(schema_params->fused_activation_function());
 800365a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800365c:	f7ff fb8d 	bl	8002d7a <_ZNK6tflite21FullyConnectedOptions25fused_activation_functionEv>
 8003660:	4603      	mov	r3, r0
 8003662:	461d      	mov	r5, r3
    params->activation =
 8003664:	f107 0314 	add.w	r3, r7, #20
 8003668:	4618      	mov	r0, r3
 800366a:	f000 fc42 	bl	8003ef2 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800366e:	4604      	mov	r4, r0
        ConvertActivation(schema_params->fused_activation_function());
 8003670:	4628      	mov	r0, r5
 8003672:	f7ff fd65 	bl	8003140 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>
 8003676:	4603      	mov	r3, r0
    params->activation =
 8003678:	7023      	strb	r3, [r4, #0]
    params->keep_num_dims = schema_params->keep_num_dims();
 800367a:	f107 0314 	add.w	r3, r7, #20
 800367e:	4618      	mov	r0, r3
 8003680:	f000 fc37 	bl	8003ef2 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8003684:	4604      	mov	r4, r0
 8003686:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003688:	f7ff fb95 	bl	8002db6 <_ZNK6tflite21FullyConnectedOptions13keep_num_dimsEv>
 800368c:	4603      	mov	r3, r0
 800368e:	70a3      	strb	r3, [r4, #2]
    params->asymmetric_quantize_inputs =
 8003690:	f107 0314 	add.w	r3, r7, #20
 8003694:	4618      	mov	r0, r3
 8003696:	f000 fc2c 	bl	8003ef2 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800369a:	4604      	mov	r4, r0
        schema_params->asymmetric_quantize_inputs();
 800369c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800369e:	f7ff fb9e 	bl	8002dde <_ZNK6tflite21FullyConnectedOptions26asymmetric_quantize_inputsEv>
 80036a2:	4603      	mov	r3, r0
    params->asymmetric_quantize_inputs =
 80036a4:	70e3      	strb	r3, [r4, #3]
    TF_LITE_ENSURE_STATUS(
 80036a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80036a8:	f7ff fbad 	bl	8002e06 <_ZNK6tflite21FullyConnectedOptions19quantized_bias_typeEv>
 80036ac:	4603      	mov	r3, r0
 80036ae:	461c      	mov	r4, r3
 80036b0:	f107 0314 	add.w	r3, r7, #20
 80036b4:	4618      	mov	r0, r3
 80036b6:	f000 fc1c 	bl	8003ef2 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80036ba:	4603      	mov	r3, r0
 80036bc:	3304      	adds	r3, #4
 80036be:	68ba      	ldr	r2, [r7, #8]
 80036c0:	4619      	mov	r1, r3
 80036c2:	4620      	mov	r0, r4
 80036c4:	f7ff fd80 	bl	80031c8 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
 80036c8:	4603      	mov	r3, r0
 80036ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d002      	beq.n	80036dc <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf8>
 80036d6:	f897 4023 	ldrb.w	r4, [r7, #35]	; 0x23
 80036da:	e029      	b.n	8003730 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x14c>
        ConvertTensorType(schema_params->quantized_bias_type(),
                          &params->quantized_bias_type, error_reporter));
    switch (schema_params->weights_format()) {
 80036dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80036de:	f7ff fb5b 	bl	8002d98 <_ZNK6tflite21FullyConnectedOptions14weights_formatEv>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d002      	beq.n	80036ee <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x10a>
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d009      	beq.n	8003700 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x11c>
 80036ec:	e011      	b.n	8003712 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x12e>
      case FullyConnectedOptionsWeightsFormat_DEFAULT:
        params->weights_format = kTfLiteFullyConnectedWeightsFormatDefault;
 80036ee:	f107 0314 	add.w	r3, r7, #20
 80036f2:	4618      	mov	r0, r3
 80036f4:	f000 fbfd 	bl	8003ef2 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2200      	movs	r2, #0
 80036fc:	705a      	strb	r2, [r3, #1]
        break;
 80036fe:	e00e      	b.n	800371e <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x13a>
      case FullyConnectedOptionsWeightsFormat_SHUFFLED4x16INT8:
        params->weights_format =
 8003700:	f107 0314 	add.w	r3, r7, #20
 8003704:	4618      	mov	r0, r3
 8003706:	f000 fbf4 	bl	8003ef2 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800370a:	4603      	mov	r3, r0
 800370c:	2201      	movs	r2, #1
 800370e:	705a      	strb	r2, [r3, #1]
            kTfLiteFullyConnectedWeightsFormatShuffled4x16Int8;
        break;
 8003710:	e005      	b.n	800371e <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x13a>
      default:
        TF_LITE_REPORT_ERROR(error_reporter,
 8003712:	490f      	ldr	r1, [pc, #60]	; (8003750 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x16c>)
 8003714:	68b8      	ldr	r0, [r7, #8]
 8003716:	f7ff f9b8 	bl	8002a8a <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Unhandled fully-connected weights format.");
        return kTfLiteError;
 800371a:	2401      	movs	r4, #1
 800371c:	e008      	b.n	8003730 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x14c>
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better understand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 800371e:	f107 0314 	add.w	r3, r7, #20
 8003722:	4618      	mov	r0, r3
 8003724:	f000 fbf1 	bl	8003f0a <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 8003728:	4602      	mov	r2, r0
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800372e:	2400      	movs	r4, #0
}
 8003730:	f107 0314 	add.w	r3, r7, #20
 8003734:	4618      	mov	r0, r3
 8003736:	f000 fbad 	bl	8003e94 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 800373a:	4623      	mov	r3, r4
 800373c:	4618      	mov	r0, r3
 800373e:	3728      	adds	r7, #40	; 0x28
 8003740:	46bd      	mov	sp, r7
 8003742:	bdb0      	pop	{r4, r5, r7, pc}
 8003744:	080214d8 	.word	0x080214d8
 8003748:	08021480 	.word	0x08021480
 800374c:	080214c0 	.word	0x080214c0
 8003750:	080214ec 	.word	0x080214ec

08003754 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                        void**) {
  return kTfLiteOk;
}

TfLiteStatus ParsePool(const Operator* op, ErrorReporter* error_reporter,
                       BuiltinDataAllocator* allocator, void** builtin_data) {
 8003754:	b5b0      	push	{r4, r5, r7, lr}
 8003756:	b08a      	sub	sp, #40	; 0x28
 8003758:	af02      	add	r7, sp, #8
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	607a      	str	r2, [r7, #4]
 8003760:	603b      	str	r3, [r7, #0]
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	68b9      	ldr	r1, [r7, #8]
 8003768:	68f8      	ldr	r0, [r7, #12]
 800376a:	f7ff fcca 	bl	8003102 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>

  SafeBuiltinDataAllocator safe_allocator(allocator);
 800376e:	f107 0318 	add.w	r3, r7, #24
 8003772:	6879      	ldr	r1, [r7, #4]
 8003774:	4618      	mov	r0, r3
 8003776:	f7ff fcb5 	bl	80030e4 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>
  std::unique_ptr<TfLitePoolParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLitePoolParams>();
 800377a:	f107 0310 	add.w	r3, r7, #16
 800377e:	f107 0218 	add.w	r2, r7, #24
 8003782:	4611      	mov	r1, r2
 8003784:	4618      	mov	r0, r3
 8003786:	f000 fbcd 	bl	8003f24 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI16TfLitePoolParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 800378a:	f107 0310 	add.w	r3, r7, #16
 800378e:	2100      	movs	r1, #0
 8003790:	4618      	mov	r0, r3
 8003792:	f000 fc07 	bl	8003fa4 <_ZStneI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 8003796:	4603      	mov	r3, r0
 8003798:	f083 0301 	eor.w	r3, r3, #1
 800379c:	b2db      	uxtb	r3, r3
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d00c      	beq.n	80037bc <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>
 80037a2:	4b39      	ldr	r3, [pc, #228]	; (8003888 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x134>)
 80037a4:	9301      	str	r3, [sp, #4]
 80037a6:	f240 7385 	movw	r3, #1925	; 0x785
 80037aa:	9300      	str	r3, [sp, #0]
 80037ac:	4b37      	ldr	r3, [pc, #220]	; (800388c <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x138>)
 80037ae:	4a38      	ldr	r2, [pc, #224]	; (8003890 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x13c>)
 80037b0:	68b9      	ldr	r1, [r7, #8]
 80037b2:	68b8      	ldr	r0, [r7, #8]
 80037b4:	f7ff f982 	bl	8002abc <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 80037b8:	2401      	movs	r4, #1
 80037ba:	e05b      	b.n	8003874 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x120>

  const Pool2DOptions* schema_params = op->builtin_options_as_Pool2DOptions();
 80037bc:	68f8      	ldr	r0, [r7, #12]
 80037be:	f7ff fbe3 	bl	8002f88 <_ZNK6tflite8Operator32builtin_options_as_Pool2DOptionsEv>
 80037c2:	61f8      	str	r0, [r7, #28]

  if (schema_params != nullptr) {
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d04b      	beq.n	8003862 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x10e>
    params->padding = ConvertPadding(schema_params->padding());
 80037ca:	69f8      	ldr	r0, [r7, #28]
 80037cc:	f7ff fa12 	bl	8002bf4 <_ZNK6tflite13Pool2DOptions7paddingEv>
 80037d0:	4603      	mov	r3, r0
 80037d2:	461d      	mov	r5, r3
 80037d4:	f107 0310 	add.w	r3, r7, #16
 80037d8:	4618      	mov	r0, r3
 80037da:	f000 fbf0 	bl	8003fbe <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80037de:	4604      	mov	r4, r0
 80037e0:	4628      	mov	r0, r5
 80037e2:	f7ff fcd9 	bl	8003198 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>
 80037e6:	4603      	mov	r3, r0
 80037e8:	7023      	strb	r3, [r4, #0]
    params->stride_width = schema_params->stride_w();
 80037ea:	f107 0310 	add.w	r3, r7, #16
 80037ee:	4618      	mov	r0, r3
 80037f0:	f000 fbe5 	bl	8003fbe <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80037f4:	4604      	mov	r4, r0
 80037f6:	69f8      	ldr	r0, [r7, #28]
 80037f8:	f7ff fa0b 	bl	8002c12 <_ZNK6tflite13Pool2DOptions8stride_wEv>
 80037fc:	4603      	mov	r3, r0
 80037fe:	6063      	str	r3, [r4, #4]
    params->stride_height = schema_params->stride_h();
 8003800:	f107 0310 	add.w	r3, r7, #16
 8003804:	4618      	mov	r0, r3
 8003806:	f000 fbda 	bl	8003fbe <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800380a:	4604      	mov	r4, r0
 800380c:	69f8      	ldr	r0, [r7, #28]
 800380e:	f7ff fa0f 	bl	8002c30 <_ZNK6tflite13Pool2DOptions8stride_hEv>
 8003812:	4603      	mov	r3, r0
 8003814:	60a3      	str	r3, [r4, #8]
    params->filter_width = schema_params->filter_width();
 8003816:	f107 0310 	add.w	r3, r7, #16
 800381a:	4618      	mov	r0, r3
 800381c:	f000 fbcf 	bl	8003fbe <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8003820:	4604      	mov	r4, r0
 8003822:	69f8      	ldr	r0, [r7, #28]
 8003824:	f7ff fa13 	bl	8002c4e <_ZNK6tflite13Pool2DOptions12filter_widthEv>
 8003828:	4603      	mov	r3, r0
 800382a:	60e3      	str	r3, [r4, #12]
    params->filter_height = schema_params->filter_height();
 800382c:	f107 0310 	add.w	r3, r7, #16
 8003830:	4618      	mov	r0, r3
 8003832:	f000 fbc4 	bl	8003fbe <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8003836:	4604      	mov	r4, r0
 8003838:	69f8      	ldr	r0, [r7, #28]
 800383a:	f7ff fa17 	bl	8002c6c <_ZNK6tflite13Pool2DOptions13filter_heightEv>
 800383e:	4603      	mov	r3, r0
 8003840:	6123      	str	r3, [r4, #16]
    params->activation =
        ConvertActivation(schema_params->fused_activation_function());
 8003842:	69f8      	ldr	r0, [r7, #28]
 8003844:	f7ff fa21 	bl	8002c8a <_ZNK6tflite13Pool2DOptions25fused_activation_functionEv>
 8003848:	4603      	mov	r3, r0
 800384a:	461d      	mov	r5, r3
    params->activation =
 800384c:	f107 0310 	add.w	r3, r7, #16
 8003850:	4618      	mov	r0, r3
 8003852:	f000 fbb4 	bl	8003fbe <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8003856:	4604      	mov	r4, r0
        ConvertActivation(schema_params->fused_activation_function());
 8003858:	4628      	mov	r0, r5
 800385a:	f7ff fc71 	bl	8003140 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>
 800385e:	4603      	mov	r3, r0
    params->activation =
 8003860:	7523      	strb	r3, [r4, #20]
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better understand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 8003862:	f107 0310 	add.w	r3, r7, #16
 8003866:	4618      	mov	r0, r3
 8003868:	f000 fbb5 	bl	8003fd6 <_ZNSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 800386c:	4602      	mov	r2, r0
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8003872:	2400      	movs	r4, #0
}
 8003874:	f107 0310 	add.w	r3, r7, #16
 8003878:	4618      	mov	r0, r3
 800387a:	f000 fb71 	bl	8003f60 <_ZNSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 800387e:	4623      	mov	r3, r4
 8003880:	4618      	mov	r0, r3
 8003882:	3720      	adds	r7, #32
 8003884:	46bd      	mov	sp, r7
 8003886:	bdb0      	pop	{r4, r5, r7, pc}
 8003888:	080214d8 	.word	0x080214d8
 800388c:	08021480 	.word	0x08021480
 8003890:	080214c0 	.word	0x080214c0

08003894 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
  return kTfLiteOk;
}

TfLiteStatus ParseReshape(const Operator* op, ErrorReporter* error_reporter,
                          BuiltinDataAllocator* allocator,
                          void** builtin_data) {
 8003894:	b590      	push	{r4, r7, lr}
 8003896:	b08d      	sub	sp, #52	; 0x34
 8003898:	af02      	add	r7, sp, #8
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	607a      	str	r2, [r7, #4]
 80038a0:	603b      	str	r3, [r7, #0]
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	68b9      	ldr	r1, [r7, #8]
 80038a8:	68f8      	ldr	r0, [r7, #12]
 80038aa:	f7ff fc2a 	bl	8003102 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>

  SafeBuiltinDataAllocator safe_allocator(allocator);
 80038ae:	f107 0318 	add.w	r3, r7, #24
 80038b2:	6879      	ldr	r1, [r7, #4]
 80038b4:	4618      	mov	r0, r3
 80038b6:	f7ff fc15 	bl	80030e4 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>

  std::unique_ptr<TfLiteReshapeParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteReshapeParams>();
 80038ba:	f107 0310 	add.w	r3, r7, #16
 80038be:	f107 0218 	add.w	r2, r7, #24
 80038c2:	4611      	mov	r1, r2
 80038c4:	4618      	mov	r0, r3
 80038c6:	f000 fb93 	bl	8003ff0 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI19TfLiteReshapeParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 80038ca:	f107 0310 	add.w	r3, r7, #16
 80038ce:	2100      	movs	r1, #0
 80038d0:	4618      	mov	r0, r3
 80038d2:	f000 fbcd 	bl	8004070 <_ZStneI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 80038d6:	4603      	mov	r3, r0
 80038d8:	f083 0301 	eor.w	r3, r3, #1
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d00c      	beq.n	80038fc <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>
 80038e2:	4b27      	ldr	r3, [pc, #156]	; (8003980 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xec>)
 80038e4:	9301      	str	r3, [sp, #4]
 80038e6:	f240 73ef 	movw	r3, #2031	; 0x7ef
 80038ea:	9300      	str	r3, [sp, #0]
 80038ec:	4b25      	ldr	r3, [pc, #148]	; (8003984 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf0>)
 80038ee:	4a26      	ldr	r2, [pc, #152]	; (8003988 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf4>)
 80038f0:	68b9      	ldr	r1, [r7, #8]
 80038f2:	68b8      	ldr	r0, [r7, #8]
 80038f4:	f7ff f8e2 	bl	8002abc <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 80038f8:	2401      	movs	r4, #1
 80038fa:	e037      	b.n	800396c <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd8>

  const ReshapeOptions* schema_params = op->builtin_options_as_ReshapeOptions();
 80038fc:	68f8      	ldr	r0, [r7, #12]
 80038fe:	f7ff fb7f 	bl	8003000 <_ZNK6tflite8Operator33builtin_options_as_ReshapeOptionsEv>
 8003902:	6278      	str	r0, [r7, #36]	; 0x24

  if (schema_params != nullptr) {
 8003904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003906:	2b00      	cmp	r3, #0
 8003908:	d027      	beq.n	800395a <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc6>
    const flatbuffers::Vector<int32_t>* new_shape = schema_params->new_shape();
 800390a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800390c:	f7ff fa9e 	bl	8002e4c <_ZNK6tflite14ReshapeOptions9new_shapeEv>
 8003910:	6238      	str	r0, [r7, #32]
    if (new_shape != nullptr) {
 8003912:	6a3b      	ldr	r3, [r7, #32]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d020      	beq.n	800395a <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc6>
      TF_LITE_ENSURE_STATUS(
 8003918:	f107 0310 	add.w	r3, r7, #16
 800391c:	4618      	mov	r0, r3
 800391e:	f000 fbb4 	bl	800408a <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8003922:	4603      	mov	r3, r0
 8003924:	461a      	mov	r2, r3
 8003926:	4b19      	ldr	r3, [pc, #100]	; (800398c <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf8>)
 8003928:	9300      	str	r3, [sp, #0]
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	6a39      	ldr	r1, [r7, #32]
 800392e:	2020      	movs	r0, #32
 8003930:	f000 fbb8 	bl	80040a4 <_ZN6tflite12_GLOBAL__N_1L26FlatBufferIntVectorToArrayIlEE12TfLiteStatusiPKN11flatbuffers6VectorIT_mEEPS5_PNS_13ErrorReporterEPKc>
 8003934:	4603      	mov	r3, r0
 8003936:	77fb      	strb	r3, [r7, #31]
 8003938:	7ffb      	ldrb	r3, [r7, #31]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d001      	beq.n	8003942 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xae>
 800393e:	7ffc      	ldrb	r4, [r7, #31]
 8003940:	e014      	b.n	800396c <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd8>
          FlatBufferIntVectorToArray(sizeof(params->shape), new_shape,
                                     params->shape, error_reporter, "reshape"));
      params->num_dimensions = new_shape->size();
 8003942:	6a38      	ldr	r0, [r7, #32]
 8003944:	f7fe f9f3 	bl	8001d2e <_ZNK11flatbuffers6VectorIlmE4sizeEv>
 8003948:	4604      	mov	r4, r0
 800394a:	f107 0310 	add.w	r3, r7, #16
 800394e:	4618      	mov	r0, r3
 8003950:	f000 fb9b 	bl	800408a <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8003954:	4603      	mov	r3, r0
 8003956:	4622      	mov	r2, r4
 8003958:	621a      	str	r2, [r3, #32]
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better understand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 800395a:	f107 0310 	add.w	r3, r7, #16
 800395e:	4618      	mov	r0, r3
 8003960:	f000 fbde 	bl	8004120 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 8003964:	4602      	mov	r2, r0
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800396a:	2400      	movs	r4, #0
}
 800396c:	f107 0310 	add.w	r3, r7, #16
 8003970:	4618      	mov	r0, r3
 8003972:	f000 fb5b 	bl	800402c <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 8003976:	4623      	mov	r3, r4
 8003978:	4618      	mov	r0, r3
 800397a:	372c      	adds	r7, #44	; 0x2c
 800397c:	46bd      	mov	sp, r7
 800397e:	bd90      	pop	{r4, r7, pc}
 8003980:	080214d8 	.word	0x080214d8
 8003984:	08021480 	.word	0x08021480
 8003988:	080214c0 	.word	0x080214c0
 800398c:	0802155c 	.word	0x0802155c

08003990 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
  return kTfLiteOk;
}

TfLiteStatus ParseSoftmax(const Operator* op, ErrorReporter* error_reporter,
                          BuiltinDataAllocator* allocator,
                          void** builtin_data) {
 8003990:	b590      	push	{r4, r7, lr}
 8003992:	b08b      	sub	sp, #44	; 0x2c
 8003994:	af02      	add	r7, sp, #8
 8003996:	60f8      	str	r0, [r7, #12]
 8003998:	60b9      	str	r1, [r7, #8]
 800399a:	607a      	str	r2, [r7, #4]
 800399c:	603b      	str	r3, [r7, #0]
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	68b9      	ldr	r1, [r7, #8]
 80039a4:	68f8      	ldr	r0, [r7, #12]
 80039a6:	f7ff fbac 	bl	8003102 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>

  SafeBuiltinDataAllocator safe_allocator(allocator);
 80039aa:	f107 0318 	add.w	r3, r7, #24
 80039ae:	6879      	ldr	r1, [r7, #4]
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7ff fb97 	bl	80030e4 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>
  std::unique_ptr<TfLiteSoftmaxParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteSoftmaxParams>();
 80039b6:	f107 0310 	add.w	r3, r7, #16
 80039ba:	f107 0218 	add.w	r2, r7, #24
 80039be:	4611      	mov	r1, r2
 80039c0:	4618      	mov	r0, r3
 80039c2:	f000 fbc6 	bl	8004152 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI19TfLiteSoftmaxParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 80039c6:	f107 0310 	add.w	r3, r7, #16
 80039ca:	2100      	movs	r1, #0
 80039cc:	4618      	mov	r0, r3
 80039ce:	f000 fc00 	bl	80041d2 <_ZStneI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 80039d2:	4603      	mov	r3, r0
 80039d4:	f083 0301 	eor.w	r3, r3, #1
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00c      	beq.n	80039f8 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>
 80039de:	4b1a      	ldr	r3, [pc, #104]	; (8003a48 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb8>)
 80039e0:	9301      	str	r3, [sp, #4]
 80039e2:	f640 13b5 	movw	r3, #2485	; 0x9b5
 80039e6:	9300      	str	r3, [sp, #0]
 80039e8:	4b18      	ldr	r3, [pc, #96]	; (8003a4c <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xbc>)
 80039ea:	4a19      	ldr	r2, [pc, #100]	; (8003a50 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc0>)
 80039ec:	68b9      	ldr	r1, [r7, #8]
 80039ee:	68b8      	ldr	r0, [r7, #8]
 80039f0:	f7ff f864 	bl	8002abc <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 80039f4:	2401      	movs	r4, #1
 80039f6:	e01c      	b.n	8003a32 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa2>

  const SoftmaxOptions* schema_params = op->builtin_options_as_SoftmaxOptions();
 80039f8:	68f8      	ldr	r0, [r7, #12]
 80039fa:	f7ff faed 	bl	8002fd8 <_ZNK6tflite8Operator33builtin_options_as_SoftmaxOptionsEv>
 80039fe:	61f8      	str	r0, [r7, #28]

  if (schema_params != nullptr) {
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d00c      	beq.n	8003a20 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x90>
    params->beta = schema_params->beta();
 8003a06:	f107 0310 	add.w	r3, r7, #16
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f000 fbee 	bl	80041ec <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8003a10:	4604      	mov	r4, r0
 8003a12:	69f8      	ldr	r0, [r7, #28]
 8003a14:	f7ff fa06 	bl	8002e24 <_ZNK6tflite14SoftmaxOptions4betaEv>
 8003a18:	eef0 7a40 	vmov.f32	s15, s0
 8003a1c:	edc4 7a00 	vstr	s15, [r4]
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better understand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 8003a20:	f107 0310 	add.w	r3, r7, #16
 8003a24:	4618      	mov	r0, r3
 8003a26:	f000 fbed 	bl	8004204 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8003a30:	2400      	movs	r4, #0
}
 8003a32:	f107 0310 	add.w	r3, r7, #16
 8003a36:	4618      	mov	r0, r3
 8003a38:	f000 fba9 	bl	800418e <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 8003a3c:	4623      	mov	r3, r4
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3724      	adds	r7, #36	; 0x24
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd90      	pop	{r4, r7, pc}
 8003a46:	bf00      	nop
 8003a48:	080214d8 	.word	0x080214d8
 8003a4c:	08021480 	.word	0x08021480
 8003a50:	080214c0 	.word	0x080214c0

08003a54 <_ZNK11flatbuffers6VectorIcmE4DataEv>:
  const uint8_t *Data() const {
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	3304      	adds	r3, #4
  }
 8003a60:	4618      	mov	r0, r3
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIhmEEmEET_t>:
  P GetPointer(voffset_t field) const {
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	460b      	mov	r3, r1
 8003a76:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P, OffsetSize>(field);
 8003a78:	887b      	ldrh	r3, [r7, #2]
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f000 fbce 	bl	800421e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhmEEmEET_t>
 8003a82:	4603      	mov	r3, r0
  }
 8003a84:	4618      	mov	r0, r3
 8003a86:	3708      	adds	r7, #8
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIxmEEmEET_t>:
  P GetPointer(voffset_t field) const {
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	460b      	mov	r3, r1
 8003a96:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P, OffsetSize>(field);
 8003a98:	887b      	ldrh	r3, [r7, #2]
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f000 fbde 	bl	800425e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxmEEmEET_t>
 8003aa2:	4603      	mov	r3, r0
  }
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3708      	adds	r7, #8
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	807b      	strh	r3, [r7, #2]
 8003ab8:	4613      	mov	r3, r2
 8003aba:	707b      	strb	r3, [r7, #1]
    auto field_offset = GetOptionalFieldOffset(field);
 8003abc:	887b      	ldrh	r3, [r7, #2]
 8003abe:	4619      	mov	r1, r3
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f7fd ff2d 	bl	8001920 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	81fb      	strh	r3, [r7, #14]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8003aca:	89fb      	ldrh	r3, [r7, #14]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d007      	beq.n	8003ae0 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_+0x34>
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	89fb      	ldrh	r3, [r7, #14]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7fe ff54 	bl	8002984 <_ZN11flatbuffers10ReadScalarIhEET_PKv>
 8003adc:	4603      	mov	r3, r0
 8003ade:	e000      	b.n	8003ae2 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_+0x36>
 8003ae0:	787b      	ldrb	r3, [r7, #1]
  }
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3710      	adds	r7, #16
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}

08003aea <_ZNK11flatbuffers5Table10GetPointerIPKvmEET_t>:
  P GetPointer(voffset_t field) const {
 8003aea:	b580      	push	{r7, lr}
 8003aec:	b082      	sub	sp, #8
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]
 8003af2:	460b      	mov	r3, r1
 8003af4:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P, OffsetSize>(field);
 8003af6:	887b      	ldrh	r3, [r7, #2]
 8003af8:	4619      	mov	r1, r3
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f000 fbcf 	bl	800429e <_ZN11flatbuffers5Table10GetPointerIPKvmEET_t>
 8003b00:	4603      	mov	r3, r0
  }
 8003b02:	4618      	mov	r0, r3
 8003b04:	3708      	adds	r7, #8
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}

08003b0a <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 8003b0a:	b580      	push	{r7, lr}
 8003b0c:	b086      	sub	sp, #24
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	60f8      	str	r0, [r7, #12]
 8003b12:	460b      	mov	r3, r1
 8003b14:	607a      	str	r2, [r7, #4]
 8003b16:	817b      	strh	r3, [r7, #10]
    auto field_offset = GetOptionalFieldOffset(field);
 8003b18:	897b      	ldrh	r3, [r7, #10]
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	68f8      	ldr	r0, [r7, #12]
 8003b1e:	f7fd feff 	bl	8001920 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8003b22:	4603      	mov	r3, r0
 8003b24:	82fb      	strh	r3, [r7, #22]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8003b26:	8afb      	ldrh	r3, [r7, #22]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d007      	beq.n	8003b3c <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_+0x32>
 8003b2c:	68fa      	ldr	r2, [r7, #12]
 8003b2e:	8afb      	ldrh	r3, [r7, #22]
 8003b30:	4413      	add	r3, r2
 8003b32:	4618      	mov	r0, r3
 8003b34:	f7fe f893 	bl	8001c5e <_ZN11flatbuffers10ReadScalarIlEET_PKv>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	e000      	b.n	8003b3e <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_+0x34>
 8003b3c:	687b      	ldr	r3, [r7, #4]
  }
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3718      	adds	r7, #24
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}

08003b46 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 8003b46:	b580      	push	{r7, lr}
 8003b48:	b084      	sub	sp, #16
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
 8003b4e:	460b      	mov	r3, r1
 8003b50:	807b      	strh	r3, [r7, #2]
 8003b52:	4613      	mov	r3, r2
 8003b54:	707b      	strb	r3, [r7, #1]
    auto field_offset = GetOptionalFieldOffset(field);
 8003b56:	887b      	ldrh	r3, [r7, #2]
 8003b58:	4619      	mov	r1, r3
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f7fd fee0 	bl	8001920 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8003b60:	4603      	mov	r3, r0
 8003b62:	81fb      	strh	r3, [r7, #14]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8003b64:	89fb      	ldrh	r3, [r7, #14]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d007      	beq.n	8003b7a <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_+0x34>
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	89fb      	ldrh	r3, [r7, #14]
 8003b6e:	4413      	add	r3, r2
 8003b70:	4618      	mov	r0, r3
 8003b72:	f7fe ff21 	bl	80029b8 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
 8003b76:	4603      	mov	r3, r0
 8003b78:	e001      	b.n	8003b7e <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_+0x38>
 8003b7a:	f997 3001 	ldrsb.w	r3, [r7, #1]
  }
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3710      	adds	r7, #16
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}

08003b86 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6StringEmEET_t>:
  P GetPointer(voffset_t field) const {
 8003b86:	b580      	push	{r7, lr}
 8003b88:	b082      	sub	sp, #8
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
 8003b8e:	460b      	mov	r3, r1
 8003b90:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P, OffsetSize>(field);
 8003b92:	887b      	ldrh	r3, [r7, #2]
 8003b94:	4619      	mov	r1, r3
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f000 fba1 	bl	80042de <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEmEET_t>
 8003b9c:	4603      	mov	r3, r0
  }
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3708      	adds	r7, #8
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}

08003ba6 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 8003ba6:	b580      	push	{r7, lr}
 8003ba8:	b086      	sub	sp, #24
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	60f8      	str	r0, [r7, #12]
 8003bae:	460b      	mov	r3, r1
 8003bb0:	ed87 0a01 	vstr	s0, [r7, #4]
 8003bb4:	817b      	strh	r3, [r7, #10]
    auto field_offset = GetOptionalFieldOffset(field);
 8003bb6:	897b      	ldrh	r3, [r7, #10]
 8003bb8:	4619      	mov	r1, r3
 8003bba:	68f8      	ldr	r0, [r7, #12]
 8003bbc:	f7fd feb0 	bl	8001920 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	82fb      	strh	r3, [r7, #22]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8003bc4:	8afb      	ldrh	r3, [r7, #22]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d008      	beq.n	8003bdc <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_+0x36>
 8003bca:	68fa      	ldr	r2, [r7, #12]
 8003bcc:	8afb      	ldrh	r3, [r7, #22]
 8003bce:	4413      	add	r3, r2
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f7fe ff00 	bl	80029d6 <_ZN11flatbuffers10ReadScalarIfEET_PKv>
 8003bd6:	eef0 7a40 	vmov.f32	s15, s0
 8003bda:	e001      	b.n	8003be0 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_+0x3a>
 8003bdc:	edd7 7a01 	vldr	s15, [r7, #4]
  }
 8003be0:	eeb0 0a67 	vmov.f32	s0, s15
 8003be4:	3718      	adds	r7, #24
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}

08003bea <_ZNK11flatbuffers6VectorIhmE4sizeEv>:
  SizeT size() const { return EndianScalar(length_); }
 8003bea:	b580      	push	{r7, lr}
 8003bec:	b082      	sub	sp, #8
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	6078      	str	r0, [r7, #4]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f7fe f826 	bl	8001c48 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3708      	adds	r7, #8
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}

08003c06 <_ZNK11flatbuffers6VectorIxmE4sizeEv>:
 8003c06:	b580      	push	{r7, lr}
 8003c08:	b082      	sub	sp, #8
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	6078      	str	r0, [r7, #4]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7fe f818 	bl	8001c48 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3708      	adds	r7, #8
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
	...

08003c24 <_ZNK11flatbuffers6VectorIxmE3GetEm>:
  return_type Get(SizeT i) const {
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b082      	sub	sp, #8
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f7ff ffe9 	bl	8003c06 <_ZNK11flatbuffers6VectorIxmE4sizeEv>
 8003c34:	4602      	mov	r2, r0
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d305      	bcc.n	8003c48 <_ZNK11flatbuffers6VectorIxmE3GetEm+0x24>
 8003c3c:	4b0a      	ldr	r3, [pc, #40]	; (8003c68 <_ZNK11flatbuffers6VectorIxmE3GetEm+0x44>)
 8003c3e:	4a0b      	ldr	r2, [pc, #44]	; (8003c6c <_ZNK11flatbuffers6VectorIxmE3GetEm+0x48>)
 8003c40:	21b0      	movs	r1, #176	; 0xb0
 8003c42:	480b      	ldr	r0, [pc, #44]	; (8003c70 <_ZNK11flatbuffers6VectorIxmE3GetEm+0x4c>)
 8003c44:	f01b ff14 	bl	801fa70 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f000 fb74 	bl	8004336 <_ZNK11flatbuffers6VectorIxmE4DataEv>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	6839      	ldr	r1, [r7, #0]
 8003c52:	4618      	mov	r0, r3
 8003c54:	f000 fb7b 	bl	800434e <_ZN11flatbuffers14IndirectHelperIxE4ReadEPKhj>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	460b      	mov	r3, r1
  }
 8003c5c:	4610      	mov	r0, r2
 8003c5e:	4619      	mov	r1, r3
 8003c60:	3708      	adds	r7, #8
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	0802188c 	.word	0x0802188c
 8003c6c:	08021898 	.word	0x08021898
 8003c70:	08021964 	.word	0x08021964

08003c74 <_ZNK11flatbuffers6VectorIlmE3GetEm>:
  return_type Get(SizeT i) const {
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b082      	sub	sp, #8
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f7fe f855 	bl	8001d2e <_ZNK11flatbuffers6VectorIlmE4sizeEv>
 8003c84:	4602      	mov	r2, r0
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d305      	bcc.n	8003c98 <_ZNK11flatbuffers6VectorIlmE3GetEm+0x24>
 8003c8c:	4b09      	ldr	r3, [pc, #36]	; (8003cb4 <_ZNK11flatbuffers6VectorIlmE3GetEm+0x40>)
 8003c8e:	4a0a      	ldr	r2, [pc, #40]	; (8003cb8 <_ZNK11flatbuffers6VectorIlmE3GetEm+0x44>)
 8003c90:	21b0      	movs	r1, #176	; 0xb0
 8003c92:	480a      	ldr	r0, [pc, #40]	; (8003cbc <_ZNK11flatbuffers6VectorIlmE3GetEm+0x48>)
 8003c94:	f01b feec 	bl	801fa70 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f000 fb6e 	bl	800437a <_ZNK11flatbuffers6VectorIlmE4DataEv>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	6839      	ldr	r1, [r7, #0]
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f000 fb75 	bl	8004392 <_ZN11flatbuffers14IndirectHelperIlE4ReadEPKhj>
 8003ca8:	4603      	mov	r3, r0
  }
 8003caa:	4618      	mov	r0, r3
 8003cac:	3708      	adds	r7, #8
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	0802188c 	.word	0x0802188c
 8003cb8:	08021988 	.word	0x08021988
 8003cbc:	08021964 	.word	0x08021964

08003cc0 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI16TfLiteConvParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 8003cc0:	b590      	push	{r4, r7, lr}
 8003cc2:	b085      	sub	sp, #20
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f000 fb71 	bl	80043b6 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI16TfLiteConvParamsEEPT_v>
 8003cd4:	4604      	mov	r4, r0
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	f107 030c 	add.w	r3, r7, #12
 8003cde:	4611      	mov	r1, r2
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f7ff f9dd 	bl	80030a0 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 8003ce6:	f107 030c 	add.w	r3, r7, #12
 8003cea:	461a      	mov	r2, r3
 8003cec:	4621      	mov	r1, r4
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f000 fb92 	bl	8004418 <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>
  }
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	3714      	adds	r7, #20
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd90      	pop	{r4, r7, pc}

08003cfc <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
	unique_ptr(auto_ptr<_Up>&& __u) noexcept;
#pragma GCC diagnostic pop
#endif

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
 8003cfc:	b590      	push	{r4, r7, lr}
 8003cfe:	b085      	sub	sp, #20
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	4618      	mov	r0, r3
 8003d08:	f000 fb9b 	bl	8004442 <_ZNSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8003d0c:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00c      	beq.n	8003d30 <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f000 fba0 	bl	800445c <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 8003d1c:	4604      	mov	r4, r0
 8003d1e:	68f8      	ldr	r0, [r7, #12]
 8003d20:	f000 fba9 	bl	8004476 <_ZSt4moveIRP16TfLiteConvParamsEONSt16remove_referenceIT_E4typeEOS4_>
 8003d24:	4603      	mov	r3, r0
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4619      	mov	r1, r3
 8003d2a:	4620      	mov	r0, r4
 8003d2c:	f7ff f9c7 	bl	80030be <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2200      	movs	r2, #0
 8003d34:	601a      	str	r2, [r3, #0]
      }
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3714      	adds	r7, #20
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd90      	pop	{r4, r7, pc}

08003d40 <_ZStneI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    { return __x.get() != __y.get(); }

  /// unique_ptr comparison with nullptr
  template<typename _Tp, typename _Dp>
    _GLIBCXX_NODISCARD inline bool
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f000 fb9e 	bl	800448c <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 8003d50:	4603      	mov	r3, r0
 8003d52:	4618      	mov	r0, r3
 8003d54:	3708      	adds	r7, #8
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}

08003d5a <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 8003d5a:	b580      	push	{r7, lr}
 8003d5c:	b082      	sub	sp, #8
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
	return get();
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f000 fba3 	bl	80044ae <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8003d68:	4603      	mov	r3, r0
      }
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3708      	adds	r7, #8
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}

08003d72 <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 8003d72:	b580      	push	{r7, lr}
 8003d74:	b082      	sub	sp, #8
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f000 fba3 	bl	80044c8 <_ZNSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 8003d82:	4603      	mov	r3, r0
 8003d84:	4618      	mov	r0, r3
 8003d86:	3708      	adds	r7, #8
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI25TfLiteDepthwiseConvParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 8003d8c:	b590      	push	{r4, r7, lr}
 8003d8e:	b085      	sub	sp, #20
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f000 fba9 	bl	80044f2 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI25TfLiteDepthwiseConvParamsEEPT_v>
 8003da0:	4604      	mov	r4, r0
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	f107 030c 	add.w	r3, r7, #12
 8003daa:	4611      	mov	r1, r2
 8003dac:	4618      	mov	r0, r3
 8003dae:	f7ff f977 	bl	80030a0 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 8003db2:	f107 030c 	add.w	r3, r7, #12
 8003db6:	461a      	mov	r2, r3
 8003db8:	4621      	mov	r1, r4
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f000 fbca 	bl	8004554 <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>
  }
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	3714      	adds	r7, #20
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd90      	pop	{r4, r7, pc}

08003dc8 <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 8003dc8:	b590      	push	{r4, r7, lr}
 8003dca:	b085      	sub	sp, #20
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f000 fbd3 	bl	800457e <_ZNSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8003dd8:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d00c      	beq.n	8003dfc <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f000 fbd8 	bl	8004598 <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 8003de8:	4604      	mov	r4, r0
 8003dea:	68f8      	ldr	r0, [r7, #12]
 8003dec:	f000 fbe1 	bl	80045b2 <_ZSt4moveIRP25TfLiteDepthwiseConvParamsEONSt16remove_referenceIT_E4typeEOS4_>
 8003df0:	4603      	mov	r3, r0
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4619      	mov	r1, r3
 8003df6:	4620      	mov	r0, r4
 8003df8:	f7ff f961 	bl	80030be <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	601a      	str	r2, [r3, #0]
      }
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4618      	mov	r0, r3
 8003e06:	3714      	adds	r7, #20
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd90      	pop	{r4, r7, pc}

08003e0c <_ZStneI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b082      	sub	sp, #8
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 fbd6 	bl	80045c8 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3708      	adds	r7, #8
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}

08003e26 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 8003e26:	b580      	push	{r7, lr}
 8003e28:	b082      	sub	sp, #8
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
	return get();
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 fbdb 	bl	80045ea <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8003e34:	4603      	mov	r3, r0
      }
 8003e36:	4618      	mov	r0, r3
 8003e38:	3708      	adds	r7, #8
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}

08003e3e <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 8003e3e:	b580      	push	{r7, lr}
 8003e40:	b082      	sub	sp, #8
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f000 fbdb 	bl	8004604 <_ZNSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	4618      	mov	r0, r3
 8003e52:	3708      	adds	r7, #8
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}

08003e58 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI26TfLiteFullyConnectedParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 8003e58:	b590      	push	{r4, r7, lr}
 8003e5a:	b085      	sub	sp, #20
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 8003e66:	4618      	mov	r0, r3
 8003e68:	f000 fbe1 	bl	800462e <_ZN6tflite20BuiltinDataAllocator11AllocatePODI26TfLiteFullyConnectedParamsEEPT_v>
 8003e6c:	4604      	mov	r4, r0
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	f107 030c 	add.w	r3, r7, #12
 8003e76:	4611      	mov	r1, r2
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f7ff f911 	bl	80030a0 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 8003e7e:	f107 030c 	add.w	r3, r7, #12
 8003e82:	461a      	mov	r2, r3
 8003e84:	4621      	mov	r1, r4
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f000 fbfd 	bl	8004686 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>
  }
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	3714      	adds	r7, #20
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd90      	pop	{r4, r7, pc}

08003e94 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 8003e94:	b590      	push	{r4, r7, lr}
 8003e96:	b085      	sub	sp, #20
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f000 fc06 	bl	80046b0 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8003ea4:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d00c      	beq.n	8003ec8 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 fc0b 	bl	80046ca <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 8003eb4:	4604      	mov	r4, r0
 8003eb6:	68f8      	ldr	r0, [r7, #12]
 8003eb8:	f000 fc14 	bl	80046e4 <_ZSt4moveIRP26TfLiteFullyConnectedParamsEONSt16remove_referenceIT_E4typeEOS4_>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	4620      	mov	r0, r4
 8003ec4:	f7ff f8fb 	bl	80030be <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	601a      	str	r2, [r3, #0]
      }
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3714      	adds	r7, #20
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd90      	pop	{r4, r7, pc}

08003ed8 <_ZStneI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f000 fc09 	bl	80046fa <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	4618      	mov	r0, r3
 8003eec:	3708      	adds	r7, #8
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}

08003ef2 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 8003ef2:	b580      	push	{r7, lr}
 8003ef4:	b082      	sub	sp, #8
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
	return get();
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 fc0e 	bl	800471c <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8003f00:	4603      	mov	r3, r0
      }
 8003f02:	4618      	mov	r0, r3
 8003f04:	3708      	adds	r7, #8
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}

08003f0a <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 8003f0a:	b580      	push	{r7, lr}
 8003f0c:	b082      	sub	sp, #8
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4618      	mov	r0, r3
 8003f16:	f000 fc0e 	bl	8004736 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3708      	adds	r7, #8
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI16TfLitePoolParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 8003f24:	b590      	push	{r4, r7, lr}
 8003f26:	b085      	sub	sp, #20
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 8003f32:	4618      	mov	r0, r3
 8003f34:	f000 fc14 	bl	8004760 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI16TfLitePoolParamsEEPT_v>
 8003f38:	4604      	mov	r4, r0
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	f107 030c 	add.w	r3, r7, #12
 8003f42:	4611      	mov	r1, r2
 8003f44:	4618      	mov	r0, r3
 8003f46:	f7ff f8ab 	bl	80030a0 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 8003f4a:	f107 030c 	add.w	r3, r7, #12
 8003f4e:	461a      	mov	r2, r3
 8003f50:	4621      	mov	r1, r4
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 fc32 	bl	80047bc <_ZNSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>
  }
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	3714      	adds	r7, #20
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd90      	pop	{r4, r7, pc}

08003f60 <_ZNSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 8003f60:	b590      	push	{r4, r7, lr}
 8003f62:	b085      	sub	sp, #20
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f000 fc3b 	bl	80047e6 <_ZNSt15__uniq_ptr_implI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8003f70:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d00c      	beq.n	8003f94 <_ZNSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 fc40 	bl	8004800 <_ZNSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 8003f80:	4604      	mov	r4, r0
 8003f82:	68f8      	ldr	r0, [r7, #12]
 8003f84:	f000 fc49 	bl	800481a <_ZSt4moveIRP16TfLitePoolParamsEONSt16remove_referenceIT_E4typeEOS4_>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4619      	mov	r1, r3
 8003f8e:	4620      	mov	r0, r4
 8003f90:	f7ff f895 	bl	80030be <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2200      	movs	r2, #0
 8003f98:	601a      	str	r2, [r3, #0]
      }
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3714      	adds	r7, #20
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd90      	pop	{r4, r7, pc}

08003fa4 <_ZStneI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b082      	sub	sp, #8
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f000 fc3e 	bl	8004830 <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3708      	adds	r7, #8
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}

08003fbe <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 8003fbe:	b580      	push	{r7, lr}
 8003fc0:	b082      	sub	sp, #8
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
	return get();
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f000 fc43 	bl	8004852 <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8003fcc:	4603      	mov	r3, r0
      }
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3708      	adds	r7, #8
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}

08003fd6 <_ZNSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 8003fd6:	b580      	push	{r7, lr}
 8003fd8:	b082      	sub	sp, #8
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f000 fc43 	bl	800486c <_ZNSt15__uniq_ptr_implI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3708      	adds	r7, #8
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI19TfLiteReshapeParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 8003ff0:	b590      	push	{r4, r7, lr}
 8003ff2:	b085      	sub	sp, #20
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 8003ffe:	4618      	mov	r0, r3
 8004000:	f000 fc49 	bl	8004896 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI19TfLiteReshapeParamsEEPT_v>
 8004004:	4604      	mov	r4, r0
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	f107 030c 	add.w	r3, r7, #12
 800400e:	4611      	mov	r1, r2
 8004010:	4618      	mov	r0, r3
 8004012:	f7ff f845 	bl	80030a0 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 8004016:	f107 030c 	add.w	r3, r7, #12
 800401a:	461a      	mov	r2, r3
 800401c:	4621      	mov	r1, r4
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 fc67 	bl	80048f2 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>
  }
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	3714      	adds	r7, #20
 8004028:	46bd      	mov	sp, r7
 800402a:	bd90      	pop	{r4, r7, pc}

0800402c <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 800402c:	b590      	push	{r4, r7, lr}
 800402e:	b085      	sub	sp, #20
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	4618      	mov	r0, r3
 8004038:	f000 fc70 	bl	800491c <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800403c:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d00c      	beq.n	8004060 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f000 fc75 	bl	8004936 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 800404c:	4604      	mov	r4, r0
 800404e:	68f8      	ldr	r0, [r7, #12]
 8004050:	f000 fc7e 	bl	8004950 <_ZSt4moveIRP19TfLiteReshapeParamsEONSt16remove_referenceIT_E4typeEOS4_>
 8004054:	4603      	mov	r3, r0
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4619      	mov	r1, r3
 800405a:	4620      	mov	r0, r4
 800405c:	f7ff f82f 	bl	80030be <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2200      	movs	r2, #0
 8004064:	601a      	str	r2, [r3, #0]
      }
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4618      	mov	r0, r3
 800406a:	3714      	adds	r7, #20
 800406c:	46bd      	mov	sp, r7
 800406e:	bd90      	pop	{r4, r7, pc}

08004070 <_ZStneI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 8004070:	b580      	push	{r7, lr}
 8004072:	b082      	sub	sp, #8
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f000 fc73 	bl	8004966 <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 8004080:	4603      	mov	r3, r0
 8004082:	4618      	mov	r0, r3
 8004084:	3708      	adds	r7, #8
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}

0800408a <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 800408a:	b580      	push	{r7, lr}
 800408c:	b082      	sub	sp, #8
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
	return get();
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f000 fc78 	bl	8004988 <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8004098:	4603      	mov	r3, r0
      }
 800409a:	4618      	mov	r0, r3
 800409c:	3708      	adds	r7, #8
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
	...

080040a4 <_ZN6tflite12_GLOBAL__N_1L26FlatBufferIntVectorToArrayIlEE12TfLiteStatusiPKN11flatbuffers6VectorIT_mEEPS5_PNS_13ErrorReporterEPKc>:
static TfLiteStatus FlatBufferIntVectorToArray(
 80040a4:	b590      	push	{r4, r7, lr}
 80040a6:	b087      	sub	sp, #28
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	60f8      	str	r0, [r7, #12]
 80040ac:	60b9      	str	r1, [r7, #8]
 80040ae:	607a      	str	r2, [r7, #4]
 80040b0:	603b      	str	r3, [r7, #0]
  if (!flat_vector) {
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d106      	bne.n	80040c6 <_ZN6tflite12_GLOBAL__N_1L26FlatBufferIntVectorToArrayIlEE12TfLiteStatusiPKN11flatbuffers6VectorIT_mEEPS5_PNS_13ErrorReporterEPKc+0x22>
    TF_LITE_REPORT_ERROR(error_reporter,
 80040b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040ba:	4917      	ldr	r1, [pc, #92]	; (8004118 <_ZN6tflite12_GLOBAL__N_1L26FlatBufferIntVectorToArrayIlEE12TfLiteStatusiPKN11flatbuffers6VectorIT_mEEPS5_PNS_13ErrorReporterEPKc+0x74>)
 80040bc:	6838      	ldr	r0, [r7, #0]
 80040be:	f7fe fce4 	bl	8002a8a <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e024      	b.n	8004110 <_ZN6tflite12_GLOBAL__N_1L26FlatBufferIntVectorToArrayIlEE12TfLiteStatusiPKN11flatbuffers6VectorIT_mEEPS5_PNS_13ErrorReporterEPKc+0x6c>
    size_t num_dimensions = flat_vector->size();
 80040c6:	68b8      	ldr	r0, [r7, #8]
 80040c8:	f7fd fe31 	bl	8001d2e <_ZNK11flatbuffers6VectorIlmE4sizeEv>
 80040cc:	6138      	str	r0, [r7, #16]
    if (num_dimensions > max_size_of_buffer / sizeof(DataType)) {
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	089b      	lsrs	r3, r3, #2
 80040d2:	693a      	ldr	r2, [r7, #16]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d906      	bls.n	80040e6 <_ZN6tflite12_GLOBAL__N_1L26FlatBufferIntVectorToArrayIlEE12TfLiteStatusiPKN11flatbuffers6VectorIT_mEEPS5_PNS_13ErrorReporterEPKc+0x42>
      TF_LITE_REPORT_ERROR(
 80040d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040da:	4910      	ldr	r1, [pc, #64]	; (800411c <_ZN6tflite12_GLOBAL__N_1L26FlatBufferIntVectorToArrayIlEE12TfLiteStatusiPKN11flatbuffers6VectorIT_mEEPS5_PNS_13ErrorReporterEPKc+0x78>)
 80040dc:	6838      	ldr	r0, [r7, #0]
 80040de:	f7fe fcd4 	bl	8002a8a <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e014      	b.n	8004110 <_ZN6tflite12_GLOBAL__N_1L26FlatBufferIntVectorToArrayIlEE12TfLiteStatusiPKN11flatbuffers6VectorIT_mEEPS5_PNS_13ErrorReporterEPKc+0x6c>
      for (size_t i = 0; i < num_dimensions; ++i) {
 80040e6:	2300      	movs	r3, #0
 80040e8:	617b      	str	r3, [r7, #20]
 80040ea:	e00c      	b.n	8004106 <_ZN6tflite12_GLOBAL__N_1L26FlatBufferIntVectorToArrayIlEE12TfLiteStatusiPKN11flatbuffers6VectorIT_mEEPS5_PNS_13ErrorReporterEPKc+0x62>
        buffer[i] = flat_vector->Get(i);
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	18d4      	adds	r4, r2, r3
 80040f4:	6979      	ldr	r1, [r7, #20]
 80040f6:	68b8      	ldr	r0, [r7, #8]
 80040f8:	f7ff fdbc 	bl	8003c74 <_ZNK11flatbuffers6VectorIlmE3GetEm>
 80040fc:	4603      	mov	r3, r0
 80040fe:	6023      	str	r3, [r4, #0]
      for (size_t i = 0; i < num_dimensions; ++i) {
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	3301      	adds	r3, #1
 8004104:	617b      	str	r3, [r7, #20]
 8004106:	697a      	ldr	r2, [r7, #20]
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	429a      	cmp	r2, r3
 800410c:	d3ee      	bcc.n	80040ec <_ZN6tflite12_GLOBAL__N_1L26FlatBufferIntVectorToArrayIlEE12TfLiteStatusiPKN11flatbuffers6VectorIT_mEEPS5_PNS_13ErrorReporterEPKc+0x48>
  return kTfLiteOk;
 800410e:	2300      	movs	r3, #0
}
 8004110:	4618      	mov	r0, r3
 8004112:	371c      	adds	r7, #28
 8004114:	46bd      	mov	sp, r7
 8004116:	bd90      	pop	{r4, r7, pc}
 8004118:	08021a4c 	.word	0x08021a4c
 800411c:	08021a7c 	.word	0x08021a7c

08004120 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 8004120:	b580      	push	{r7, lr}
 8004122:	b082      	sub	sp, #8
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4618      	mov	r0, r3
 800412c:	f000 fc39 	bl	80049a2 <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 8004130:	4603      	mov	r3, r0
 8004132:	4618      	mov	r0, r3
 8004134:	3708      	adds	r7, #8
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}

0800413a <_ZNK11flatbuffers6VectorIhmE4dataEv>:

  uint8_t *Data() { return reinterpret_cast<uint8_t *>(&length_ + 1); }

  // Similarly, but typed, much like std::vector::data
  const T *data() const { return reinterpret_cast<const T *>(Data()); }
 800413a:	b580      	push	{r7, lr}
 800413c:	b082      	sub	sp, #8
 800413e:	af00      	add	r7, sp, #0
 8004140:	6078      	str	r0, [r7, #4]
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f000 f8eb 	bl	800431e <_ZNK11flatbuffers6VectorIhmE4DataEv>
 8004148:	4603      	mov	r3, r0
 800414a:	4618      	mov	r0, r3
 800414c:	3708      	adds	r7, #8
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}

08004152 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI19TfLiteSoftmaxParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 8004152:	b590      	push	{r4, r7, lr}
 8004154:	b085      	sub	sp, #20
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]
 800415a:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 8004160:	4618      	mov	r0, r3
 8004162:	f000 fc33 	bl	80049cc <_ZN6tflite20BuiltinDataAllocator11AllocatePODI19TfLiteSoftmaxParamsEEPT_v>
 8004166:	4604      	mov	r4, r0
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	f107 030c 	add.w	r3, r7, #12
 8004170:	4611      	mov	r1, r2
 8004172:	4618      	mov	r0, r3
 8004174:	f7fe ff94 	bl	80030a0 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 8004178:	f107 030c 	add.w	r3, r7, #12
 800417c:	461a      	mov	r2, r3
 800417e:	4621      	mov	r1, r4
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f000 fc4d 	bl	8004a20 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>
  }
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	3714      	adds	r7, #20
 800418a:	46bd      	mov	sp, r7
 800418c:	bd90      	pop	{r4, r7, pc}

0800418e <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 800418e:	b590      	push	{r4, r7, lr}
 8004190:	b085      	sub	sp, #20
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4618      	mov	r0, r3
 800419a:	f000 fc56 	bl	8004a4a <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800419e:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d00c      	beq.n	80041c2 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f000 fc5b 	bl	8004a64 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 80041ae:	4604      	mov	r4, r0
 80041b0:	68f8      	ldr	r0, [r7, #12]
 80041b2:	f000 fc64 	bl	8004a7e <_ZSt4moveIRP19TfLiteSoftmaxParamsEONSt16remove_referenceIT_E4typeEOS4_>
 80041b6:	4603      	mov	r3, r0
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4619      	mov	r1, r3
 80041bc:	4620      	mov	r0, r4
 80041be:	f7fe ff7e 	bl	80030be <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2200      	movs	r2, #0
 80041c6:	601a      	str	r2, [r3, #0]
      }
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	4618      	mov	r0, r3
 80041cc:	3714      	adds	r7, #20
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd90      	pop	{r4, r7, pc}

080041d2 <_ZStneI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 80041d2:	b580      	push	{r7, lr}
 80041d4:	b082      	sub	sp, #8
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
 80041da:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f000 fc59 	bl	8004a94 <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 80041e2:	4603      	mov	r3, r0
 80041e4:	4618      	mov	r0, r3
 80041e6:	3708      	adds	r7, #8
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}

080041ec <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b082      	sub	sp, #8
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
	return get();
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f000 fc5e 	bl	8004ab6 <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 80041fa:	4603      	mov	r3, r0
      }
 80041fc:	4618      	mov	r0, r3
 80041fe:	3708      	adds	r7, #8
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 8004204:	b580      	push	{r7, lr}
 8004206:	b082      	sub	sp, #8
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	4618      	mov	r0, r3
 8004210:	f000 fc5e 	bl	8004ad0 <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 8004214:	4603      	mov	r3, r0
 8004216:	4618      	mov	r0, r3
 8004218:	3708      	adds	r7, #8
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}

0800421e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhmEEmEET_t>:
  P GetPointer(voffset_t field) {
 800421e:	b580      	push	{r7, lr}
 8004220:	b084      	sub	sp, #16
 8004222:	af00      	add	r7, sp, #0
 8004224:	6078      	str	r0, [r7, #4]
 8004226:	460b      	mov	r3, r1
 8004228:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800422a:	887b      	ldrh	r3, [r7, #2]
 800422c:	4619      	mov	r1, r3
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f7fd fb76 	bl	8001920 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8004234:	4603      	mov	r3, r0
 8004236:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	89fb      	ldrh	r3, [r7, #14]
 800423c:	4413      	add	r3, r2
 800423e:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8004240:	89fb      	ldrh	r3, [r7, #14]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d006      	beq.n	8004254 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhmEEmEET_t+0x36>
 8004246:	68b8      	ldr	r0, [r7, #8]
 8004248:	f7fd fd25 	bl	8001c96 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800424c:	4602      	mov	r2, r0
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	4413      	add	r3, r2
                        : nullptr;
 8004252:	e000      	b.n	8004256 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhmEEmEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8004254:	2300      	movs	r3, #0
  }
 8004256:	4618      	mov	r0, r3
 8004258:	3710      	adds	r7, #16
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}

0800425e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxmEEmEET_t>:
  P GetPointer(voffset_t field) {
 800425e:	b580      	push	{r7, lr}
 8004260:	b084      	sub	sp, #16
 8004262:	af00      	add	r7, sp, #0
 8004264:	6078      	str	r0, [r7, #4]
 8004266:	460b      	mov	r3, r1
 8004268:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800426a:	887b      	ldrh	r3, [r7, #2]
 800426c:	4619      	mov	r1, r3
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f7fd fb56 	bl	8001920 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8004274:	4603      	mov	r3, r0
 8004276:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	89fb      	ldrh	r3, [r7, #14]
 800427c:	4413      	add	r3, r2
 800427e:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8004280:	89fb      	ldrh	r3, [r7, #14]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d006      	beq.n	8004294 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxmEEmEET_t+0x36>
 8004286:	68b8      	ldr	r0, [r7, #8]
 8004288:	f7fd fd05 	bl	8001c96 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800428c:	4602      	mov	r2, r0
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	4413      	add	r3, r2
                        : nullptr;
 8004292:	e000      	b.n	8004296 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxmEEmEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8004294:	2300      	movs	r3, #0
  }
 8004296:	4618      	mov	r0, r3
 8004298:	3710      	adds	r7, #16
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}

0800429e <_ZN11flatbuffers5Table10GetPointerIPKvmEET_t>:
  P GetPointer(voffset_t field) {
 800429e:	b580      	push	{r7, lr}
 80042a0:	b084      	sub	sp, #16
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
 80042a6:	460b      	mov	r3, r1
 80042a8:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 80042aa:	887b      	ldrh	r3, [r7, #2]
 80042ac:	4619      	mov	r1, r3
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f7fd fb36 	bl	8001920 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 80042b4:	4603      	mov	r3, r0
 80042b6:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	89fb      	ldrh	r3, [r7, #14]
 80042bc:	4413      	add	r3, r2
 80042be:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 80042c0:	89fb      	ldrh	r3, [r7, #14]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d006      	beq.n	80042d4 <_ZN11flatbuffers5Table10GetPointerIPKvmEET_t+0x36>
 80042c6:	68b8      	ldr	r0, [r7, #8]
 80042c8:	f7fd fce5 	bl	8001c96 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 80042cc:	4602      	mov	r2, r0
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	4413      	add	r3, r2
                        : nullptr;
 80042d2:	e000      	b.n	80042d6 <_ZN11flatbuffers5Table10GetPointerIPKvmEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 80042d4:	2300      	movs	r3, #0
  }
 80042d6:	4618      	mov	r0, r3
 80042d8:	3710      	adds	r7, #16
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}

080042de <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEmEET_t>:
  P GetPointer(voffset_t field) {
 80042de:	b580      	push	{r7, lr}
 80042e0:	b084      	sub	sp, #16
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
 80042e6:	460b      	mov	r3, r1
 80042e8:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 80042ea:	887b      	ldrh	r3, [r7, #2]
 80042ec:	4619      	mov	r1, r3
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f7fd fb16 	bl	8001920 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 80042f4:	4603      	mov	r3, r0
 80042f6:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	89fb      	ldrh	r3, [r7, #14]
 80042fc:	4413      	add	r3, r2
 80042fe:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8004300:	89fb      	ldrh	r3, [r7, #14]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d006      	beq.n	8004314 <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEmEET_t+0x36>
 8004306:	68b8      	ldr	r0, [r7, #8]
 8004308:	f7fd fcc5 	bl	8001c96 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800430c:	4602      	mov	r2, r0
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	4413      	add	r3, r2
                        : nullptr;
 8004312:	e000      	b.n	8004316 <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEmEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8004314:	2300      	movs	r3, #0
  }
 8004316:	4618      	mov	r0, r3
 8004318:	3710      	adds	r7, #16
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}

0800431e <_ZNK11flatbuffers6VectorIhmE4DataEv>:
  const uint8_t *Data() const {
 800431e:	b480      	push	{r7}
 8004320:	b083      	sub	sp, #12
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	3304      	adds	r3, #4
  }
 800432a:	4618      	mov	r0, r3
 800432c:	370c      	adds	r7, #12
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr

08004336 <_ZNK11flatbuffers6VectorIxmE4DataEv>:
  const uint8_t *Data() const {
 8004336:	b480      	push	{r7}
 8004338:	b083      	sub	sp, #12
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	3304      	adds	r3, #4
  }
 8004342:	4618      	mov	r0, r3
 8004344:	370c      	adds	r7, #12
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr

0800434e <_ZN11flatbuffers14IndirectHelperIxE4ReadEPKhj>:
  static return_type Read(const uint8_t *p, const size_t i) {
 800434e:	b580      	push	{r7, lr}
 8004350:	b082      	sub	sp, #8
 8004352:	af00      	add	r7, sp, #0
 8004354:	6078      	str	r0, [r7, #4]
 8004356:	6039      	str	r1, [r7, #0]
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	00db      	lsls	r3, r3, #3
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	4413      	add	r3, r2
 8004360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004364:	4610      	mov	r0, r2
 8004366:	4619      	mov	r1, r3
 8004368:	f7fe fb47 	bl	80029fa <_ZN11flatbuffers12EndianScalarIxEET_S1_>
 800436c:	4602      	mov	r2, r0
 800436e:	460b      	mov	r3, r1
  }
 8004370:	4610      	mov	r0, r2
 8004372:	4619      	mov	r1, r3
 8004374:	3708      	adds	r7, #8
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}

0800437a <_ZNK11flatbuffers6VectorIlmE4DataEv>:
  const uint8_t *Data() const {
 800437a:	b480      	push	{r7}
 800437c:	b083      	sub	sp, #12
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	3304      	adds	r3, #4
  }
 8004386:	4618      	mov	r0, r3
 8004388:	370c      	adds	r7, #12
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr

08004392 <_ZN11flatbuffers14IndirectHelperIlE4ReadEPKhj>:
  static return_type Read(const uint8_t *p, const size_t i) {
 8004392:	b580      	push	{r7, lr}
 8004394:	b082      	sub	sp, #8
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
 800439a:	6039      	str	r1, [r7, #0]
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	4413      	add	r3, r2
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4618      	mov	r0, r3
 80043a8:	f7fd fd4a 	bl	8001e40 <_ZN11flatbuffers12EndianScalarIlEET_S1_>
 80043ac:	4603      	mov	r3, r0
  }
 80043ae:	4618      	mov	r0, r3
 80043b0:	3708      	adds	r7, #8
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}

080043b6 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI16TfLiteConvParamsEEPT_v>:
  // Allocate a structure, but make sure it is a POD structure that doesn't
  // require constructors to run. The reason we do this, is that Interpreter's C
  // extension part will take ownership so destructors  will not be run during
  // deallocation.
  template <typename T>
  T* AllocatePOD() {
 80043b6:	b580      	push	{r7, lr}
 80043b8:	b084      	sub	sp, #16
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	6078      	str	r0, [r7, #4]
    // TODO(b/154346074): Change this to is_trivially_destructible when all
    // platform targets support that properly.
    static_assert(std::is_pod<T>::value, "Builtin data structure must be POD.");
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2204      	movs	r2, #4
 80043c6:	211c      	movs	r1, #28
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	4798      	blx	r3
 80043cc:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T();
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	4619      	mov	r1, r3
 80043d2:	201c      	movs	r0, #28
 80043d4:	f7fe fb8c 	bl	8002af0 <_ZnwjPv>
 80043d8:	4601      	mov	r1, r0
 80043da:	460a      	mov	r2, r1
 80043dc:	2300      	movs	r3, #0
 80043de:	6013      	str	r3, [r2, #0]
 80043e0:	6053      	str	r3, [r2, #4]
 80043e2:	6093      	str	r3, [r2, #8]
 80043e4:	60d3      	str	r3, [r2, #12]
 80043e6:	6113      	str	r3, [r2, #16]
 80043e8:	6153      	str	r3, [r2, #20]
 80043ea:	6193      	str	r3, [r2, #24]
 80043ec:	460b      	mov	r3, r1
  }
 80043ee:	4618      	mov	r0, r3
 80043f0:	3710      	adds	r7, #16
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}

080043f6 <_ZNSt15__uniq_ptr_dataI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb1ELb1EECI1St15__uniq_ptr_implIS0_S4_EIS4_EEPS0_OT_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 80043f6:	b580      	push	{r7, lr}
 80043f8:	b084      	sub	sp, #16
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	60f8      	str	r0, [r7, #12]
 80043fe:	60b9      	str	r1, [r7, #8]
 8004400:	607a      	str	r2, [r7, #4]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	68b9      	ldr	r1, [r7, #8]
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	4618      	mov	r0, r3
 800440a:	f000 fb81 	bl	8004b10 <_ZNSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC2IS4_EEPS0_OT_>
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	4618      	mov	r0, r3
 8004412:	3710      	adds	r7, #16
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}

08004418 <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>:
	unique_ptr(pointer __p,
 8004418:	b590      	push	{r4, r7, lr}
 800441a:	b085      	sub	sp, #20
 800441c:	af00      	add	r7, sp, #0
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::move(__d))
 8004424:	68fc      	ldr	r4, [r7, #12]
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 fb67 	bl	8004afa <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 800442c:	4603      	mov	r3, r0
 800442e:	461a      	mov	r2, r3
 8004430:	68b9      	ldr	r1, [r7, #8]
 8004432:	4620      	mov	r0, r4
 8004434:	f7ff ffdf 	bl	80043f6 <_ZNSt15__uniq_ptr_dataI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb1ELb1EECI1St15__uniq_ptr_implIS0_S4_EIS4_EEPS0_OT_>
	{ }
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	4618      	mov	r0, r3
 800443c:	3714      	adds	r7, #20
 800443e:	46bd      	mov	sp, r7
 8004440:	bd90      	pop	{r4, r7, pc}

08004442 <_ZNSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8004442:	b580      	push	{r7, lr}
 8004444:	b082      	sub	sp, #8
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4618      	mov	r0, r3
 800444e:	f000 fb75 	bl	8004b3c <_ZSt3getILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8004452:	4603      	mov	r3, r0
 8004454:	4618      	mov	r0, r3
 8004456:	3708      	adds	r7, #8
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4618      	mov	r0, r3
 8004468:	f000 fb75 	bl	8004b56 <_ZNSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 800446c:	4603      	mov	r3, r0
 800446e:	4618      	mov	r0, r3
 8004470:	3708      	adds	r7, #8
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}

08004476 <_ZSt4moveIRP16TfLiteConvParamsEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8004476:	b480      	push	{r7}
 8004478:	b083      	sub	sp, #12
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4618      	mov	r0, r3
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr

0800448c <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 800448c:	b580      	push	{r7, lr}
 800448e:	b082      	sub	sp, #8
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f000 f80a 	bl	80044ae <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	bf14      	ite	ne
 80044a0:	2301      	movne	r3, #1
 80044a2:	2300      	moveq	r3, #0
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	4618      	mov	r0, r3
 80044a8:	3708      	adds	r7, #8
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}

080044ae <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 80044ae:	b580      	push	{r7, lr}
 80044b0:	b082      	sub	sp, #8
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4618      	mov	r0, r3
 80044ba:	f000 fb59 	bl	8004b70 <_ZNKSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 80044be:	4603      	mov	r3, r0
 80044c0:	4618      	mov	r0, r3
 80044c2:	3708      	adds	r7, #8
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <_ZNSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      pointer release() noexcept
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b084      	sub	sp, #16
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f7ff ffb6 	bl	8004442 <_ZNSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 80044d6:	4603      	mov	r3, r0
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f7ff ffb0 	bl	8004442 <_ZNSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2200      	movs	r2, #0
 80044e6:	601a      	str	r2, [r3, #0]
	return __p;
 80044e8:	68fb      	ldr	r3, [r7, #12]
      }
 80044ea:	4618      	mov	r0, r3
 80044ec:	3710      	adds	r7, #16
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}

080044f2 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI25TfLiteDepthwiseConvParamsEEPT_v>:
  T* AllocatePOD() {
 80044f2:	b580      	push	{r7, lr}
 80044f4:	b084      	sub	sp, #16
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	2204      	movs	r2, #4
 8004502:	211c      	movs	r1, #28
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	4798      	blx	r3
 8004508:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T();
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	4619      	mov	r1, r3
 800450e:	201c      	movs	r0, #28
 8004510:	f7fe faee 	bl	8002af0 <_ZnwjPv>
 8004514:	4601      	mov	r1, r0
 8004516:	460a      	mov	r2, r1
 8004518:	2300      	movs	r3, #0
 800451a:	6013      	str	r3, [r2, #0]
 800451c:	6053      	str	r3, [r2, #4]
 800451e:	6093      	str	r3, [r2, #8]
 8004520:	60d3      	str	r3, [r2, #12]
 8004522:	6113      	str	r3, [r2, #16]
 8004524:	6153      	str	r3, [r2, #20]
 8004526:	6193      	str	r3, [r2, #24]
 8004528:	460b      	mov	r3, r1
  }
 800452a:	4618      	mov	r0, r3
 800452c:	3710      	adds	r7, #16
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}

08004532 <_ZNSt15__uniq_ptr_dataI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb1ELb1EECI1St15__uniq_ptr_implIS0_S4_EIS4_EEPS0_OT_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8004532:	b580      	push	{r7, lr}
 8004534:	b084      	sub	sp, #16
 8004536:	af00      	add	r7, sp, #0
 8004538:	60f8      	str	r0, [r7, #12]
 800453a:	60b9      	str	r1, [r7, #8]
 800453c:	607a      	str	r2, [r7, #4]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	68b9      	ldr	r1, [r7, #8]
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	4618      	mov	r0, r3
 8004546:	f000 fb21 	bl	8004b8c <_ZNSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC2IS4_EEPS0_OT_>
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	4618      	mov	r0, r3
 800454e:	3710      	adds	r7, #16
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}

08004554 <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>:
	unique_ptr(pointer __p,
 8004554:	b590      	push	{r4, r7, lr}
 8004556:	b085      	sub	sp, #20
 8004558:	af00      	add	r7, sp, #0
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	60b9      	str	r1, [r7, #8]
 800455e:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::move(__d))
 8004560:	68fc      	ldr	r4, [r7, #12]
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 fac9 	bl	8004afa <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 8004568:	4603      	mov	r3, r0
 800456a:	461a      	mov	r2, r3
 800456c:	68b9      	ldr	r1, [r7, #8]
 800456e:	4620      	mov	r0, r4
 8004570:	f7ff ffdf 	bl	8004532 <_ZNSt15__uniq_ptr_dataI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb1ELb1EECI1St15__uniq_ptr_implIS0_S4_EIS4_EEPS0_OT_>
	{ }
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	4618      	mov	r0, r3
 8004578:	3714      	adds	r7, #20
 800457a:	46bd      	mov	sp, r7
 800457c:	bd90      	pop	{r4, r7, pc}

0800457e <_ZNSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800457e:	b580      	push	{r7, lr}
 8004580:	b082      	sub	sp, #8
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4618      	mov	r0, r3
 800458a:	f000 fb15 	bl	8004bb8 <_ZSt3getILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800458e:	4603      	mov	r3, r0
 8004590:	4618      	mov	r0, r3
 8004592:	3708      	adds	r7, #8
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}

08004598 <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 8004598:	b580      	push	{r7, lr}
 800459a:	b082      	sub	sp, #8
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	4618      	mov	r0, r3
 80045a4:	f000 fb15 	bl	8004bd2 <_ZNSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 80045a8:	4603      	mov	r3, r0
 80045aa:	4618      	mov	r0, r3
 80045ac:	3708      	adds	r7, #8
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}

080045b2 <_ZSt4moveIRP25TfLiteDepthwiseConvParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 80045b2:	b480      	push	{r7}
 80045b4:	b083      	sub	sp, #12
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4618      	mov	r0, r3
 80045be:	370c      	adds	r7, #12
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b082      	sub	sp, #8
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f000 f80a 	bl	80045ea <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	bf14      	ite	ne
 80045dc:	2301      	movne	r3, #1
 80045de:	2300      	moveq	r3, #0
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	4618      	mov	r0, r3
 80045e4:	3708      	adds	r7, #8
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}

080045ea <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 80045ea:	b580      	push	{r7, lr}
 80045ec:	b082      	sub	sp, #8
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4618      	mov	r0, r3
 80045f6:	f000 faf9 	bl	8004bec <_ZNKSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 80045fa:	4603      	mov	r3, r0
 80045fc:	4618      	mov	r0, r3
 80045fe:	3708      	adds	r7, #8
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}

08004604 <_ZNSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      pointer release() noexcept
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f7ff ffb6 	bl	800457e <_ZNSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8004612:	4603      	mov	r3, r0
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f7ff ffb0 	bl	800457e <_ZNSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800461e:	4603      	mov	r3, r0
 8004620:	2200      	movs	r2, #0
 8004622:	601a      	str	r2, [r3, #0]
	return __p;
 8004624:	68fb      	ldr	r3, [r7, #12]
      }
 8004626:	4618      	mov	r0, r3
 8004628:	3710      	adds	r7, #16
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}

0800462e <_ZN6tflite20BuiltinDataAllocator11AllocatePODI26TfLiteFullyConnectedParamsEEPT_v>:
  T* AllocatePOD() {
 800462e:	b580      	push	{r7, lr}
 8004630:	b084      	sub	sp, #16
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2201      	movs	r2, #1
 800463e:	2105      	movs	r1, #5
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	4798      	blx	r3
 8004644:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T();
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	4619      	mov	r1, r3
 800464a:	2005      	movs	r0, #5
 800464c:	f7fe fa50 	bl	8002af0 <_ZnwjPv>
 8004650:	4601      	mov	r1, r0
 8004652:	460b      	mov	r3, r1
 8004654:	2200      	movs	r2, #0
 8004656:	601a      	str	r2, [r3, #0]
 8004658:	711a      	strb	r2, [r3, #4]
 800465a:	460b      	mov	r3, r1
  }
 800465c:	4618      	mov	r0, r3
 800465e:	3710      	adds	r7, #16
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}

08004664 <_ZNSt15__uniq_ptr_dataI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb1ELb1EECI1St15__uniq_ptr_implIS0_S4_EIS4_EEPS0_OT_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8004664:	b580      	push	{r7, lr}
 8004666:	b084      	sub	sp, #16
 8004668:	af00      	add	r7, sp, #0
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	60b9      	str	r1, [r7, #8]
 800466e:	607a      	str	r2, [r7, #4]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	68b9      	ldr	r1, [r7, #8]
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	4618      	mov	r0, r3
 8004678:	f000 fac6 	bl	8004c08 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC2IS4_EEPS0_OT_>
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	4618      	mov	r0, r3
 8004680:	3710      	adds	r7, #16
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}

08004686 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>:
	unique_ptr(pointer __p,
 8004686:	b590      	push	{r4, r7, lr}
 8004688:	b085      	sub	sp, #20
 800468a:	af00      	add	r7, sp, #0
 800468c:	60f8      	str	r0, [r7, #12]
 800468e:	60b9      	str	r1, [r7, #8]
 8004690:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::move(__d))
 8004692:	68fc      	ldr	r4, [r7, #12]
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f000 fa30 	bl	8004afa <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 800469a:	4603      	mov	r3, r0
 800469c:	461a      	mov	r2, r3
 800469e:	68b9      	ldr	r1, [r7, #8]
 80046a0:	4620      	mov	r0, r4
 80046a2:	f7ff ffdf 	bl	8004664 <_ZNSt15__uniq_ptr_dataI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb1ELb1EECI1St15__uniq_ptr_implIS0_S4_EIS4_EEPS0_OT_>
	{ }
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	4618      	mov	r0, r3
 80046aa:	3714      	adds	r7, #20
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd90      	pop	{r4, r7, pc}

080046b0 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b082      	sub	sp, #8
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4618      	mov	r0, r3
 80046bc:	f000 faba 	bl	8004c34 <_ZSt3getILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 80046c0:	4603      	mov	r3, r0
 80046c2:	4618      	mov	r0, r3
 80046c4:	3708      	adds	r7, #8
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}

080046ca <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 80046ca:	b580      	push	{r7, lr}
 80046cc:	b082      	sub	sp, #8
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4618      	mov	r0, r3
 80046d6:	f000 faba 	bl	8004c4e <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 80046da:	4603      	mov	r3, r0
 80046dc:	4618      	mov	r0, r3
 80046de:	3708      	adds	r7, #8
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}

080046e4 <_ZSt4moveIRP26TfLiteFullyConnectedParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	4618      	mov	r0, r3
 80046f0:	370c      	adds	r7, #12
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr

080046fa <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 80046fa:	b580      	push	{r7, lr}
 80046fc:	b082      	sub	sp, #8
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f000 f80a 	bl	800471c <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8004708:	4603      	mov	r3, r0
 800470a:	2b00      	cmp	r3, #0
 800470c:	bf14      	ite	ne
 800470e:	2301      	movne	r3, #1
 8004710:	2300      	moveq	r3, #0
 8004712:	b2db      	uxtb	r3, r3
 8004714:	4618      	mov	r0, r3
 8004716:	3708      	adds	r7, #8
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}

0800471c <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 800471c:	b580      	push	{r7, lr}
 800471e:	b082      	sub	sp, #8
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	4618      	mov	r0, r3
 8004728:	f000 fa9e 	bl	8004c68 <_ZNKSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800472c:	4603      	mov	r3, r0
 800472e:	4618      	mov	r0, r3
 8004730:	3708      	adds	r7, #8
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}

08004736 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      pointer release() noexcept
 8004736:	b580      	push	{r7, lr}
 8004738:	b084      	sub	sp, #16
 800473a:	af00      	add	r7, sp, #0
 800473c:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f7ff ffb6 	bl	80046b0 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8004744:	4603      	mov	r3, r0
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f7ff ffb0 	bl	80046b0 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8004750:	4603      	mov	r3, r0
 8004752:	2200      	movs	r2, #0
 8004754:	601a      	str	r2, [r3, #0]
	return __p;
 8004756:	68fb      	ldr	r3, [r7, #12]
      }
 8004758:	4618      	mov	r0, r3
 800475a:	3710      	adds	r7, #16
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}

08004760 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI16TfLitePoolParamsEEPT_v>:
  T* AllocatePOD() {
 8004760:	b590      	push	{r4, r7, lr}
 8004762:	b085      	sub	sp, #20
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	2204      	movs	r2, #4
 8004770:	2128      	movs	r1, #40	; 0x28
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	4798      	blx	r3
 8004776:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T();
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	4619      	mov	r1, r3
 800477c:	2028      	movs	r0, #40	; 0x28
 800477e:	f7fe f9b7 	bl	8002af0 <_ZnwjPv>
 8004782:	4604      	mov	r4, r0
 8004784:	4620      	mov	r0, r4
 8004786:	2328      	movs	r3, #40	; 0x28
 8004788:	461a      	mov	r2, r3
 800478a:	2100      	movs	r1, #0
 800478c:	f01b ff2e 	bl	80205ec <memset>
 8004790:	4623      	mov	r3, r4
  }
 8004792:	4618      	mov	r0, r3
 8004794:	3714      	adds	r7, #20
 8004796:	46bd      	mov	sp, r7
 8004798:	bd90      	pop	{r4, r7, pc}

0800479a <_ZNSt15__uniq_ptr_dataI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb1ELb1EECI1St15__uniq_ptr_implIS0_S4_EIS4_EEPS0_OT_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800479a:	b580      	push	{r7, lr}
 800479c:	b084      	sub	sp, #16
 800479e:	af00      	add	r7, sp, #0
 80047a0:	60f8      	str	r0, [r7, #12]
 80047a2:	60b9      	str	r1, [r7, #8]
 80047a4:	607a      	str	r2, [r7, #4]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	68b9      	ldr	r1, [r7, #8]
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	4618      	mov	r0, r3
 80047ae:	f000 fa69 	bl	8004c84 <_ZNSt15__uniq_ptr_implI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC2IS4_EEPS0_OT_>
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	4618      	mov	r0, r3
 80047b6:	3710      	adds	r7, #16
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}

080047bc <_ZNSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>:
	unique_ptr(pointer __p,
 80047bc:	b590      	push	{r4, r7, lr}
 80047be:	b085      	sub	sp, #20
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	60b9      	str	r1, [r7, #8]
 80047c6:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::move(__d))
 80047c8:	68fc      	ldr	r4, [r7, #12]
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f000 f995 	bl	8004afa <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 80047d0:	4603      	mov	r3, r0
 80047d2:	461a      	mov	r2, r3
 80047d4:	68b9      	ldr	r1, [r7, #8]
 80047d6:	4620      	mov	r0, r4
 80047d8:	f7ff ffdf 	bl	800479a <_ZNSt15__uniq_ptr_dataI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb1ELb1EECI1St15__uniq_ptr_implIS0_S4_EIS4_EEPS0_OT_>
	{ }
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	4618      	mov	r0, r3
 80047e0:	3714      	adds	r7, #20
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd90      	pop	{r4, r7, pc}

080047e6 <_ZNSt15__uniq_ptr_implI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 80047e6:	b580      	push	{r7, lr}
 80047e8:	b082      	sub	sp, #8
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4618      	mov	r0, r3
 80047f2:	f000 fa5d 	bl	8004cb0 <_ZSt3getILj0EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 80047f6:	4603      	mov	r3, r0
 80047f8:	4618      	mov	r0, r3
 80047fa:	3708      	adds	r7, #8
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}

08004800 <_ZNSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 8004800:	b580      	push	{r7, lr}
 8004802:	b082      	sub	sp, #8
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	4618      	mov	r0, r3
 800480c:	f000 fa5d 	bl	8004cca <_ZNSt15__uniq_ptr_implI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 8004810:	4603      	mov	r3, r0
 8004812:	4618      	mov	r0, r3
 8004814:	3708      	adds	r7, #8
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}

0800481a <_ZSt4moveIRP16TfLitePoolParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800481a:	b480      	push	{r7}
 800481c:	b083      	sub	sp, #12
 800481e:	af00      	add	r7, sp, #0
 8004820:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4618      	mov	r0, r3
 8004826:	370c      	adds	r7, #12
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr

08004830 <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 8004830:	b580      	push	{r7, lr}
 8004832:	b082      	sub	sp, #8
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f000 f80a 	bl	8004852 <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800483e:	4603      	mov	r3, r0
 8004840:	2b00      	cmp	r3, #0
 8004842:	bf14      	ite	ne
 8004844:	2301      	movne	r3, #1
 8004846:	2300      	moveq	r3, #0
 8004848:	b2db      	uxtb	r3, r3
 800484a:	4618      	mov	r0, r3
 800484c:	3708      	adds	r7, #8
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}

08004852 <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 8004852:	b580      	push	{r7, lr}
 8004854:	b082      	sub	sp, #8
 8004856:	af00      	add	r7, sp, #0
 8004858:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4618      	mov	r0, r3
 800485e:	f000 fa41 	bl	8004ce4 <_ZNKSt15__uniq_ptr_implI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8004862:	4603      	mov	r3, r0
 8004864:	4618      	mov	r0, r3
 8004866:	3708      	adds	r7, #8
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}

0800486c <_ZNSt15__uniq_ptr_implI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      pointer release() noexcept
 800486c:	b580      	push	{r7, lr}
 800486e:	b084      	sub	sp, #16
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f7ff ffb6 	bl	80047e6 <_ZNSt15__uniq_ptr_implI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800487a:	4603      	mov	r3, r0
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f7ff ffb0 	bl	80047e6 <_ZNSt15__uniq_ptr_implI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8004886:	4603      	mov	r3, r0
 8004888:	2200      	movs	r2, #0
 800488a:	601a      	str	r2, [r3, #0]
	return __p;
 800488c:	68fb      	ldr	r3, [r7, #12]
      }
 800488e:	4618      	mov	r0, r3
 8004890:	3710      	adds	r7, #16
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}

08004896 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI19TfLiteReshapeParamsEEPT_v>:
  T* AllocatePOD() {
 8004896:	b590      	push	{r4, r7, lr}
 8004898:	b085      	sub	sp, #20
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2204      	movs	r2, #4
 80048a6:	2124      	movs	r1, #36	; 0x24
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	4798      	blx	r3
 80048ac:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T();
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	4619      	mov	r1, r3
 80048b2:	2024      	movs	r0, #36	; 0x24
 80048b4:	f7fe f91c 	bl	8002af0 <_ZnwjPv>
 80048b8:	4604      	mov	r4, r0
 80048ba:	4620      	mov	r0, r4
 80048bc:	2324      	movs	r3, #36	; 0x24
 80048be:	461a      	mov	r2, r3
 80048c0:	2100      	movs	r1, #0
 80048c2:	f01b fe93 	bl	80205ec <memset>
 80048c6:	4623      	mov	r3, r4
  }
 80048c8:	4618      	mov	r0, r3
 80048ca:	3714      	adds	r7, #20
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd90      	pop	{r4, r7, pc}

080048d0 <_ZNSt15__uniq_ptr_dataI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb1ELb1EECI1St15__uniq_ptr_implIS0_S4_EIS4_EEPS0_OT_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	60f8      	str	r0, [r7, #12]
 80048d8:	60b9      	str	r1, [r7, #8]
 80048da:	607a      	str	r2, [r7, #4]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	68b9      	ldr	r1, [r7, #8]
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	4618      	mov	r0, r3
 80048e4:	f000 fa0c 	bl	8004d00 <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC2IS4_EEPS0_OT_>
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	4618      	mov	r0, r3
 80048ec:	3710      	adds	r7, #16
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}

080048f2 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>:
	unique_ptr(pointer __p,
 80048f2:	b590      	push	{r4, r7, lr}
 80048f4:	b085      	sub	sp, #20
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	60f8      	str	r0, [r7, #12]
 80048fa:	60b9      	str	r1, [r7, #8]
 80048fc:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::move(__d))
 80048fe:	68fc      	ldr	r4, [r7, #12]
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f000 f8fa 	bl	8004afa <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 8004906:	4603      	mov	r3, r0
 8004908:	461a      	mov	r2, r3
 800490a:	68b9      	ldr	r1, [r7, #8]
 800490c:	4620      	mov	r0, r4
 800490e:	f7ff ffdf 	bl	80048d0 <_ZNSt15__uniq_ptr_dataI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb1ELb1EECI1St15__uniq_ptr_implIS0_S4_EIS4_EEPS0_OT_>
	{ }
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	4618      	mov	r0, r3
 8004916:	3714      	adds	r7, #20
 8004918:	46bd      	mov	sp, r7
 800491a:	bd90      	pop	{r4, r7, pc}

0800491c <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800491c:	b580      	push	{r7, lr}
 800491e:	b082      	sub	sp, #8
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	4618      	mov	r0, r3
 8004928:	f000 fa00 	bl	8004d2c <_ZSt3getILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800492c:	4603      	mov	r3, r0
 800492e:	4618      	mov	r0, r3
 8004930:	3708      	adds	r7, #8
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}

08004936 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 8004936:	b580      	push	{r7, lr}
 8004938:	b082      	sub	sp, #8
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4618      	mov	r0, r3
 8004942:	f000 fa00 	bl	8004d46 <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 8004946:	4603      	mov	r3, r0
 8004948:	4618      	mov	r0, r3
 800494a:	3708      	adds	r7, #8
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}

08004950 <_ZSt4moveIRP19TfLiteReshapeParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8004950:	b480      	push	{r7}
 8004952:	b083      	sub	sp, #12
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	4618      	mov	r0, r3
 800495c:	370c      	adds	r7, #12
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr

08004966 <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 8004966:	b580      	push	{r7, lr}
 8004968:	b082      	sub	sp, #8
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f000 f80a 	bl	8004988 <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	bf14      	ite	ne
 800497a:	2301      	movne	r3, #1
 800497c:	2300      	moveq	r3, #0
 800497e:	b2db      	uxtb	r3, r3
 8004980:	4618      	mov	r0, r3
 8004982:	3708      	adds	r7, #8
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4618      	mov	r0, r3
 8004994:	f000 f9e4 	bl	8004d60 <_ZNKSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8004998:	4603      	mov	r3, r0
 800499a:	4618      	mov	r0, r3
 800499c:	3708      	adds	r7, #8
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}

080049a2 <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      pointer release() noexcept
 80049a2:	b580      	push	{r7, lr}
 80049a4:	b084      	sub	sp, #16
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f7ff ffb6 	bl	800491c <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 80049b0:	4603      	mov	r3, r0
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f7ff ffb0 	bl	800491c <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 80049bc:	4603      	mov	r3, r0
 80049be:	2200      	movs	r2, #0
 80049c0:	601a      	str	r2, [r3, #0]
	return __p;
 80049c2:	68fb      	ldr	r3, [r7, #12]
      }
 80049c4:	4618      	mov	r0, r3
 80049c6:	3710      	adds	r7, #16
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}

080049cc <_ZN6tflite20BuiltinDataAllocator11AllocatePODI19TfLiteSoftmaxParamsEEPT_v>:
  T* AllocatePOD() {
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	2204      	movs	r2, #4
 80049dc:	2104      	movs	r1, #4
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	4798      	blx	r3
 80049e2:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T();
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	4619      	mov	r1, r3
 80049e8:	2004      	movs	r0, #4
 80049ea:	f7fe f881 	bl	8002af0 <_ZnwjPv>
 80049ee:	4603      	mov	r3, r0
 80049f0:	f04f 0200 	mov.w	r2, #0
 80049f4:	601a      	str	r2, [r3, #0]
  }
 80049f6:	4618      	mov	r0, r3
 80049f8:	3710      	adds	r7, #16
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}

080049fe <_ZNSt15__uniq_ptr_dataI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb1ELb1EECI1St15__uniq_ptr_implIS0_S4_EIS4_EEPS0_OT_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 80049fe:	b580      	push	{r7, lr}
 8004a00:	b084      	sub	sp, #16
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	60f8      	str	r0, [r7, #12]
 8004a06:	60b9      	str	r1, [r7, #8]
 8004a08:	607a      	str	r2, [r7, #4]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	68b9      	ldr	r1, [r7, #8]
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	4618      	mov	r0, r3
 8004a12:	f000 f9b3 	bl	8004d7c <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC2IS4_EEPS0_OT_>
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3710      	adds	r7, #16
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>:
	unique_ptr(pointer __p,
 8004a20:	b590      	push	{r4, r7, lr}
 8004a22:	b085      	sub	sp, #20
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	60f8      	str	r0, [r7, #12]
 8004a28:	60b9      	str	r1, [r7, #8]
 8004a2a:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::move(__d))
 8004a2c:	68fc      	ldr	r4, [r7, #12]
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 f863 	bl	8004afa <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 8004a34:	4603      	mov	r3, r0
 8004a36:	461a      	mov	r2, r3
 8004a38:	68b9      	ldr	r1, [r7, #8]
 8004a3a:	4620      	mov	r0, r4
 8004a3c:	f7ff ffdf 	bl	80049fe <_ZNSt15__uniq_ptr_dataI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb1ELb1EECI1St15__uniq_ptr_implIS0_S4_EIS4_EEPS0_OT_>
	{ }
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	4618      	mov	r0, r3
 8004a44:	3714      	adds	r7, #20
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd90      	pop	{r4, r7, pc}

08004a4a <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8004a4a:	b580      	push	{r7, lr}
 8004a4c:	b082      	sub	sp, #8
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6078      	str	r0, [r7, #4]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4618      	mov	r0, r3
 8004a56:	f000 f9a7 	bl	8004da8 <_ZSt3getILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3708      	adds	r7, #8
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b082      	sub	sp, #8
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f000 f9a7 	bl	8004dc2 <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 8004a74:	4603      	mov	r3, r0
 8004a76:	4618      	mov	r0, r3
 8004a78:	3708      	adds	r7, #8
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}

08004a7e <_ZSt4moveIRP19TfLiteSoftmaxParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8004a7e:	b480      	push	{r7}
 8004a80:	b083      	sub	sp, #12
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4618      	mov	r0, r3
 8004a8a:	370c      	adds	r7, #12
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr

08004a94 <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b082      	sub	sp, #8
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f000 f80a 	bl	8004ab6 <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	bf14      	ite	ne
 8004aa8:	2301      	movne	r3, #1
 8004aaa:	2300      	moveq	r3, #0
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3708      	adds	r7, #8
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}

08004ab6 <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 8004ab6:	b580      	push	{r7, lr}
 8004ab8:	b082      	sub	sp, #8
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f000 f98b 	bl	8004ddc <_ZNKSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3708      	adds	r7, #8
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      pointer release() noexcept
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f7ff ffb6 	bl	8004a4a <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f7ff ffb0 	bl	8004a4a <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2200      	movs	r2, #0
 8004aee:	601a      	str	r2, [r3, #0]
	return __p;
 8004af0:	68fb      	ldr	r3, [r7, #12]
      }
 8004af2:	4618      	mov	r0, r3
 8004af4:	3710      	adds	r7, #16
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}

08004afa <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8004afa:	b480      	push	{r7}
 8004afc:	b083      	sub	sp, #12
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	4618      	mov	r0, r3
 8004b06:	370c      	adds	r7, #12
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr

08004b10 <_ZNSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC2IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 8004b10:	b590      	push	{r4, r7, lr}
 8004b12:	b085      	sub	sp, #20
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	60f8      	str	r0, [r7, #12]
 8004b18:	60b9      	str	r1, [r7, #8]
 8004b1a:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 8004b1c:	68fc      	ldr	r4, [r7, #12]
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f000 f96a 	bl	8004df8 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8004b24:	4602      	mov	r2, r0
 8004b26:	f107 0308 	add.w	r3, r7, #8
 8004b2a:	4619      	mov	r1, r3
 8004b2c:	4620      	mov	r0, r4
 8004b2e:	f000 f96e 	bl	8004e0e <_ZNSt5tupleIJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	4618      	mov	r0, r3
 8004b36:	3714      	adds	r7, #20
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd90      	pop	{r4, r7, pc}

08004b3c <_ZSt3getILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    __get_helper(const tuple<_Types...>&) = delete;

  /// Return a reference to the ith element of a tuple.
  template<size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b082      	sub	sp, #8
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	4618      	mov	r0, r3
 8004b48:	f000 f97a 	bl	8004e40 <_ZSt12__get_helperILj0EP16TfLiteConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3708      	adds	r7, #8
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}

08004b56 <_ZNSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8004b56:	b580      	push	{r7, lr}
 8004b58:	b082      	sub	sp, #8
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	6078      	str	r0, [r7, #4]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4618      	mov	r0, r3
 8004b62:	f000 f979 	bl	8004e58 <_ZSt3getILj1EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8004b66:	4603      	mov	r3, r0
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3708      	adds	r7, #8
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <_ZNKSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b082      	sub	sp, #8
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f000 f979 	bl	8004e72 <_ZSt3getILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 8004b80:	4603      	mov	r3, r0
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4618      	mov	r0, r3
 8004b86:	3708      	adds	r7, #8
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}

08004b8c <_ZNSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC2IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 8004b8c:	b590      	push	{r4, r7, lr}
 8004b8e:	b085      	sub	sp, #20
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	60f8      	str	r0, [r7, #12]
 8004b94:	60b9      	str	r1, [r7, #8]
 8004b96:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 8004b98:	68fc      	ldr	r4, [r7, #12]
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f000 f92c 	bl	8004df8 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	f107 0308 	add.w	r3, r7, #8
 8004ba6:	4619      	mov	r1, r3
 8004ba8:	4620      	mov	r0, r4
 8004baa:	f000 f96f 	bl	8004e8c <_ZNSt5tupleIJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3714      	adds	r7, #20
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd90      	pop	{r4, r7, pc}

08004bb8 <_ZSt3getILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b082      	sub	sp, #8
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f000 f97b 	bl	8004ebe <_ZSt12__get_helperILj0EP25TfLiteDepthwiseConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3708      	adds	r7, #8
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}

08004bd2 <_ZNSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8004bd2:	b580      	push	{r7, lr}
 8004bd4:	b082      	sub	sp, #8
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f000 f97a 	bl	8004ed6 <_ZSt3getILj1EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8004be2:	4603      	mov	r3, r0
 8004be4:	4618      	mov	r0, r3
 8004be6:	3708      	adds	r7, #8
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}

08004bec <_ZNKSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b082      	sub	sp, #8
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f000 f97a 	bl	8004ef0 <_ZSt3getILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4618      	mov	r0, r3
 8004c02:	3708      	adds	r7, #8
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC2IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 8004c08:	b590      	push	{r4, r7, lr}
 8004c0a:	b085      	sub	sp, #20
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	60b9      	str	r1, [r7, #8]
 8004c12:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 8004c14:	68fc      	ldr	r4, [r7, #12]
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f000 f8ee 	bl	8004df8 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	f107 0308 	add.w	r3, r7, #8
 8004c22:	4619      	mov	r1, r3
 8004c24:	4620      	mov	r0, r4
 8004c26:	f000 f970 	bl	8004f0a <_ZNSt5tupleIJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3714      	adds	r7, #20
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd90      	pop	{r4, r7, pc}

08004c34 <_ZSt3getILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b082      	sub	sp, #8
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f000 f97c 	bl	8004f3c <_ZSt12__get_helperILj0EP26TfLiteFullyConnectedParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8004c44:	4603      	mov	r3, r0
 8004c46:	4618      	mov	r0, r3
 8004c48:	3708      	adds	r7, #8
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}

08004c4e <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8004c4e:	b580      	push	{r7, lr}
 8004c50:	b082      	sub	sp, #8
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f000 f97b 	bl	8004f54 <_ZSt3getILj1EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	4618      	mov	r0, r3
 8004c62:	3708      	adds	r7, #8
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <_ZNKSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	4618      	mov	r0, r3
 8004c74:	f000 f97b 	bl	8004f6e <_ZSt3getILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3708      	adds	r7, #8
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <_ZNSt15__uniq_ptr_implI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC2IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 8004c84:	b590      	push	{r4, r7, lr}
 8004c86:	b085      	sub	sp, #20
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	60b9      	str	r1, [r7, #8]
 8004c8e:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 8004c90:	68fc      	ldr	r4, [r7, #12]
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f000 f8b0 	bl	8004df8 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	f107 0308 	add.w	r3, r7, #8
 8004c9e:	4619      	mov	r1, r3
 8004ca0:	4620      	mov	r0, r4
 8004ca2:	f000 f971 	bl	8004f88 <_ZNSt5tupleIJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3714      	adds	r7, #20
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd90      	pop	{r4, r7, pc}

08004cb0 <_ZSt3getILj0EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b082      	sub	sp, #8
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f000 f97d 	bl	8004fba <_ZSt12__get_helperILj0EP16TfLitePoolParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3708      	adds	r7, #8
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}

08004cca <_ZNSt15__uniq_ptr_implI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8004cca:	b580      	push	{r7, lr}
 8004ccc:	b082      	sub	sp, #8
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f000 f97c 	bl	8004fd2 <_ZSt3getILj1EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3708      	adds	r7, #8
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}

08004ce4 <_ZNKSt15__uniq_ptr_implI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b082      	sub	sp, #8
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f000 f97c 	bl	8004fec <_ZSt3getILj0EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3708      	adds	r7, #8
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC2IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 8004d00:	b590      	push	{r4, r7, lr}
 8004d02:	b085      	sub	sp, #20
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	60f8      	str	r0, [r7, #12]
 8004d08:	60b9      	str	r1, [r7, #8]
 8004d0a:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 8004d0c:	68fc      	ldr	r4, [r7, #12]
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f000 f872 	bl	8004df8 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8004d14:	4602      	mov	r2, r0
 8004d16:	f107 0308 	add.w	r3, r7, #8
 8004d1a:	4619      	mov	r1, r3
 8004d1c:	4620      	mov	r0, r4
 8004d1e:	f000 f972 	bl	8005006 <_ZNSt5tupleIJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	4618      	mov	r0, r3
 8004d26:	3714      	adds	r7, #20
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd90      	pop	{r4, r7, pc}

08004d2c <_ZSt3getILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b082      	sub	sp, #8
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	4618      	mov	r0, r3
 8004d38:	f000 f97e 	bl	8005038 <_ZSt12__get_helperILj0EP19TfLiteReshapeParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3708      	adds	r7, #8
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}

08004d46 <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8004d46:	b580      	push	{r7, lr}
 8004d48:	b082      	sub	sp, #8
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	6078      	str	r0, [r7, #4]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4618      	mov	r0, r3
 8004d52:	f000 f97d 	bl	8005050 <_ZSt3getILj1EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8004d56:	4603      	mov	r3, r0
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3708      	adds	r7, #8
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}

08004d60 <_ZNKSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b082      	sub	sp, #8
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f000 f97d 	bl	800506a <_ZSt3getILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 8004d70:	4603      	mov	r3, r0
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4618      	mov	r0, r3
 8004d76:	3708      	adds	r7, #8
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC2IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 8004d7c:	b590      	push	{r4, r7, lr}
 8004d7e:	b085      	sub	sp, #20
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	60f8      	str	r0, [r7, #12]
 8004d84:	60b9      	str	r1, [r7, #8]
 8004d86:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 8004d88:	68fc      	ldr	r4, [r7, #12]
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f000 f834 	bl	8004df8 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8004d90:	4602      	mov	r2, r0
 8004d92:	f107 0308 	add.w	r3, r7, #8
 8004d96:	4619      	mov	r1, r3
 8004d98:	4620      	mov	r0, r4
 8004d9a:	f000 f973 	bl	8005084 <_ZNSt5tupleIJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	4618      	mov	r0, r3
 8004da2:	3714      	adds	r7, #20
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd90      	pop	{r4, r7, pc}

08004da8 <_ZSt3getILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b082      	sub	sp, #8
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	4618      	mov	r0, r3
 8004db4:	f000 f97f 	bl	80050b6 <_ZSt12__get_helperILj0EP19TfLiteSoftmaxParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8004db8:	4603      	mov	r3, r0
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3708      	adds	r7, #8
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}

08004dc2 <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8004dc2:	b580      	push	{r7, lr}
 8004dc4:	b082      	sub	sp, #8
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	6078      	str	r0, [r7, #4]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f000 f97e 	bl	80050ce <_ZSt3getILj1EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3708      	adds	r7, #8
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <_ZNKSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b082      	sub	sp, #8
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4618      	mov	r0, r3
 8004de8:	f000 f97e 	bl	80050e8 <_ZSt3getILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 8004dec:	4603      	mov	r3, r0
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4618      	mov	r0, r3
 8004df2:	3708      	adds	r7, #8
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004df8:	b480      	push	{r7}
 8004dfa:	b083      	sub	sp, #12
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4618      	mov	r0, r3
 8004e04:	370c      	adds	r7, #12
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr

08004e0e <_ZNSt5tupleIJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
	tuple(_U1&& __a1, _U2&& __a2)
 8004e0e:	b5b0      	push	{r4, r5, r7, lr}
 8004e10:	b084      	sub	sp, #16
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	60f8      	str	r0, [r7, #12]
 8004e16:	60b9      	str	r1, [r7, #8]
 8004e18:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 8004e1a:	68fc      	ldr	r4, [r7, #12]
 8004e1c:	68b8      	ldr	r0, [r7, #8]
 8004e1e:	f000 f97c 	bl	800511a <_ZSt7forwardIRP16TfLiteConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8004e22:	4605      	mov	r5, r0
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f7ff ffe7 	bl	8004df8 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	461a      	mov	r2, r3
 8004e2e:	4629      	mov	r1, r5
 8004e30:	4620      	mov	r0, r4
 8004e32:	f000 f97d 	bl	8005130 <_ZNSt11_Tuple_implILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3710      	adds	r7, #16
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bdb0      	pop	{r4, r5, r7, pc}

08004e40 <_ZSt12__get_helperILj0EP16TfLiteConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b082      	sub	sp, #8
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f000 f98f 	bl	800516c <_ZNSt11_Tuple_implILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	4618      	mov	r0, r3
 8004e52:	3708      	adds	r7, #8
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}

08004e58 <_ZSt3getILj1EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b082      	sub	sp, #8
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4618      	mov	r0, r3
 8004e64:	f000 f94d 	bl	8005102 <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3708      	adds	r7, #8
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}

08004e72 <_ZSt3getILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:

  /// Return a const reference to the ith element of a const tuple.
  template<size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 8004e72:	b580      	push	{r7, lr}
 8004e74:	b082      	sub	sp, #8
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f000 f983 	bl	8005188 <_ZSt12__get_helperILj0EP16TfLiteConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8004e82:	4603      	mov	r3, r0
 8004e84:	4618      	mov	r0, r3
 8004e86:	3708      	adds	r7, #8
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <_ZNSt5tupleIJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
	tuple(_U1&& __a1, _U2&& __a2)
 8004e8c:	b5b0      	push	{r4, r5, r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	60f8      	str	r0, [r7, #12]
 8004e94:	60b9      	str	r1, [r7, #8]
 8004e96:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 8004e98:	68fc      	ldr	r4, [r7, #12]
 8004e9a:	68b8      	ldr	r0, [r7, #8]
 8004e9c:	f000 f980 	bl	80051a0 <_ZSt7forwardIRP25TfLiteDepthwiseConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8004ea0:	4605      	mov	r5, r0
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f7ff ffa8 	bl	8004df8 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	461a      	mov	r2, r3
 8004eac:	4629      	mov	r1, r5
 8004eae:	4620      	mov	r0, r4
 8004eb0:	f000 f981 	bl	80051b6 <_ZNSt11_Tuple_implILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3710      	adds	r7, #16
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bdb0      	pop	{r4, r5, r7, pc}

08004ebe <_ZSt12__get_helperILj0EP25TfLiteDepthwiseConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8004ebe:	b580      	push	{r7, lr}
 8004ec0:	b082      	sub	sp, #8
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f000 f993 	bl	80051f2 <_ZNSt11_Tuple_implILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3708      	adds	r7, #8
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}

08004ed6 <_ZSt3getILj1EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8004ed6:	b580      	push	{r7, lr}
 8004ed8:	b082      	sub	sp, #8
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f000 f90e 	bl	8005102 <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3708      	adds	r7, #8
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <_ZSt3getILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b082      	sub	sp, #8
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	4618      	mov	r0, r3
 8004efc:	f000 f987 	bl	800520e <_ZSt12__get_helperILj0EP25TfLiteDepthwiseConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8004f00:	4603      	mov	r3, r0
 8004f02:	4618      	mov	r0, r3
 8004f04:	3708      	adds	r7, #8
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}

08004f0a <_ZNSt5tupleIJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
	tuple(_U1&& __a1, _U2&& __a2)
 8004f0a:	b5b0      	push	{r4, r5, r7, lr}
 8004f0c:	b084      	sub	sp, #16
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	60f8      	str	r0, [r7, #12]
 8004f12:	60b9      	str	r1, [r7, #8]
 8004f14:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 8004f16:	68fc      	ldr	r4, [r7, #12]
 8004f18:	68b8      	ldr	r0, [r7, #8]
 8004f1a:	f000 f984 	bl	8005226 <_ZSt7forwardIRP26TfLiteFullyConnectedParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8004f1e:	4605      	mov	r5, r0
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f7ff ff69 	bl	8004df8 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8004f26:	4603      	mov	r3, r0
 8004f28:	461a      	mov	r2, r3
 8004f2a:	4629      	mov	r1, r5
 8004f2c:	4620      	mov	r0, r4
 8004f2e:	f000 f985 	bl	800523c <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	4618      	mov	r0, r3
 8004f36:	3710      	adds	r7, #16
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bdb0      	pop	{r4, r5, r7, pc}

08004f3c <_ZSt12__get_helperILj0EP26TfLiteFullyConnectedParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b082      	sub	sp, #8
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f000 f997 	bl	8005278 <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3708      	adds	r7, #8
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}

08004f54 <_ZSt3getILj1EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b082      	sub	sp, #8
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f000 f8cf 	bl	8005102 <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8004f64:	4603      	mov	r3, r0
 8004f66:	4618      	mov	r0, r3
 8004f68:	3708      	adds	r7, #8
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}

08004f6e <_ZSt3getILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 8004f6e:	b580      	push	{r7, lr}
 8004f70:	b082      	sub	sp, #8
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f000 f98b 	bl	8005294 <_ZSt12__get_helperILj0EP26TfLiteFullyConnectedParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	4618      	mov	r0, r3
 8004f82:	3708      	adds	r7, #8
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <_ZNSt5tupleIJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
	tuple(_U1&& __a1, _U2&& __a2)
 8004f88:	b5b0      	push	{r4, r5, r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	60f8      	str	r0, [r7, #12]
 8004f90:	60b9      	str	r1, [r7, #8]
 8004f92:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 8004f94:	68fc      	ldr	r4, [r7, #12]
 8004f96:	68b8      	ldr	r0, [r7, #8]
 8004f98:	f000 f988 	bl	80052ac <_ZSt7forwardIRP16TfLitePoolParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8004f9c:	4605      	mov	r5, r0
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f7ff ff2a 	bl	8004df8 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	4629      	mov	r1, r5
 8004faa:	4620      	mov	r0, r4
 8004fac:	f000 f989 	bl	80052c2 <_ZNSt11_Tuple_implILj0EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3710      	adds	r7, #16
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bdb0      	pop	{r4, r5, r7, pc}

08004fba <_ZSt12__get_helperILj0EP16TfLitePoolParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8004fba:	b580      	push	{r7, lr}
 8004fbc:	b082      	sub	sp, #8
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f000 f99b 	bl	80052fe <_ZNSt11_Tuple_implILj0EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3708      	adds	r7, #8
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}

08004fd2 <_ZSt3getILj1EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8004fd2:	b580      	push	{r7, lr}
 8004fd4:	b082      	sub	sp, #8
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f000 f890 	bl	8005102 <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3708      	adds	r7, #8
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}

08004fec <_ZSt3getILj0EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b082      	sub	sp, #8
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f000 f98f 	bl	800531a <_ZSt12__get_helperILj0EP16TfLitePoolParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	4618      	mov	r0, r3
 8005000:	3708      	adds	r7, #8
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}

08005006 <_ZNSt5tupleIJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
	tuple(_U1&& __a1, _U2&& __a2)
 8005006:	b5b0      	push	{r4, r5, r7, lr}
 8005008:	b084      	sub	sp, #16
 800500a:	af00      	add	r7, sp, #0
 800500c:	60f8      	str	r0, [r7, #12]
 800500e:	60b9      	str	r1, [r7, #8]
 8005010:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 8005012:	68fc      	ldr	r4, [r7, #12]
 8005014:	68b8      	ldr	r0, [r7, #8]
 8005016:	f000 f98c 	bl	8005332 <_ZSt7forwardIRP19TfLiteReshapeParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800501a:	4605      	mov	r5, r0
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f7ff feeb 	bl	8004df8 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8005022:	4603      	mov	r3, r0
 8005024:	461a      	mov	r2, r3
 8005026:	4629      	mov	r1, r5
 8005028:	4620      	mov	r0, r4
 800502a:	f000 f98d 	bl	8005348 <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	4618      	mov	r0, r3
 8005032:	3710      	adds	r7, #16
 8005034:	46bd      	mov	sp, r7
 8005036:	bdb0      	pop	{r4, r5, r7, pc}

08005038 <_ZSt12__get_helperILj0EP19TfLiteReshapeParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8005038:	b580      	push	{r7, lr}
 800503a:	b082      	sub	sp, #8
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f000 f99f 	bl	8005384 <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 8005046:	4603      	mov	r3, r0
 8005048:	4618      	mov	r0, r3
 800504a:	3708      	adds	r7, #8
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}

08005050 <_ZSt3getILj1EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8005050:	b580      	push	{r7, lr}
 8005052:	b082      	sub	sp, #8
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4618      	mov	r0, r3
 800505c:	f000 f851 	bl	8005102 <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8005060:	4603      	mov	r3, r0
 8005062:	4618      	mov	r0, r3
 8005064:	3708      	adds	r7, #8
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}

0800506a <_ZSt3getILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 800506a:	b580      	push	{r7, lr}
 800506c:	b082      	sub	sp, #8
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	4618      	mov	r0, r3
 8005076:	f000 f993 	bl	80053a0 <_ZSt12__get_helperILj0EP19TfLiteReshapeParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 800507a:	4603      	mov	r3, r0
 800507c:	4618      	mov	r0, r3
 800507e:	3708      	adds	r7, #8
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}

08005084 <_ZNSt5tupleIJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
	tuple(_U1&& __a1, _U2&& __a2)
 8005084:	b5b0      	push	{r4, r5, r7, lr}
 8005086:	b084      	sub	sp, #16
 8005088:	af00      	add	r7, sp, #0
 800508a:	60f8      	str	r0, [r7, #12]
 800508c:	60b9      	str	r1, [r7, #8]
 800508e:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 8005090:	68fc      	ldr	r4, [r7, #12]
 8005092:	68b8      	ldr	r0, [r7, #8]
 8005094:	f000 f990 	bl	80053b8 <_ZSt7forwardIRP19TfLiteSoftmaxParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8005098:	4605      	mov	r5, r0
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f7ff feac 	bl	8004df8 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 80050a0:	4603      	mov	r3, r0
 80050a2:	461a      	mov	r2, r3
 80050a4:	4629      	mov	r1, r5
 80050a6:	4620      	mov	r0, r4
 80050a8:	f000 f991 	bl	80053ce <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	4618      	mov	r0, r3
 80050b0:	3710      	adds	r7, #16
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bdb0      	pop	{r4, r5, r7, pc}

080050b6 <_ZSt12__get_helperILj0EP19TfLiteSoftmaxParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80050b6:	b580      	push	{r7, lr}
 80050b8:	b082      	sub	sp, #8
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f000 f9a3 	bl	800540a <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 80050c4:	4603      	mov	r3, r0
 80050c6:	4618      	mov	r0, r3
 80050c8:	3708      	adds	r7, #8
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}

080050ce <_ZSt3getILj1EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 80050ce:	b580      	push	{r7, lr}
 80050d0:	b082      	sub	sp, #8
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4618      	mov	r0, r3
 80050da:	f000 f812 	bl	8005102 <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80050de:	4603      	mov	r3, r0
 80050e0:	4618      	mov	r0, r3
 80050e2:	3708      	adds	r7, #8
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}

080050e8 <_ZSt3getILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b082      	sub	sp, #8
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	4618      	mov	r0, r3
 80050f4:	f000 f997 	bl	8005426 <_ZSt12__get_helperILj0EP19TfLiteSoftmaxParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 80050f8:	4603      	mov	r3, r0
 80050fa:	4618      	mov	r0, r3
 80050fc:	3708      	adds	r7, #8
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}

08005102 <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8005102:	b580      	push	{r7, lr}
 8005104:	b082      	sub	sp, #8
 8005106:	af00      	add	r7, sp, #0
 8005108:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f000 f9aa 	bl	8005464 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS4_>
 8005110:	4603      	mov	r3, r0
 8005112:	4618      	mov	r0, r3
 8005114:	3708      	adds	r7, #8
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}

0800511a <_ZSt7forwardIRP16TfLiteConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800511a:	b480      	push	{r7}
 800511c:	b083      	sub	sp, #12
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4618      	mov	r0, r3
 8005126:	370c      	adds	r7, #12
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr

08005130 <_ZNSt11_Tuple_implILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
	_Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 8005130:	b590      	push	{r4, r7, lr}
 8005132:	b085      	sub	sp, #20
 8005134:	af00      	add	r7, sp, #0
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	60b9      	str	r1, [r7, #8]
 800513a:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head))
 800513c:	68fc      	ldr	r4, [r7, #12]
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f7ff fe5a 	bl	8004df8 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8005144:	4603      	mov	r3, r0
 8005146:	4619      	mov	r1, r3
 8005148:	4620      	mov	r0, r4
 800514a:	f000 f978 	bl	800543e <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	1d1c      	adds	r4, r3, #4
 8005152:	68b8      	ldr	r0, [r7, #8]
 8005154:	f7ff ffe1 	bl	800511a <_ZSt7forwardIRP16TfLiteConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8005158:	4603      	mov	r3, r0
 800515a:	4619      	mov	r1, r3
 800515c:	4620      	mov	r0, r4
 800515e:	f000 f98e 	bl	800547e <_ZNSt10_Head_baseILj0EP16TfLiteConvParamsLb0EEC1IRS1_EEOT_>
	{ }
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	4618      	mov	r0, r3
 8005166:	3714      	adds	r7, #20
 8005168:	46bd      	mov	sp, r7
 800516a:	bd90      	pop	{r4, r7, pc}

0800516c <_ZNSt11_Tuple_implILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800516c:	b580      	push	{r7, lr}
 800516e:	b082      	sub	sp, #8
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	3304      	adds	r3, #4
 8005178:	4618      	mov	r0, r3
 800517a:	f000 f991 	bl	80054a0 <_ZNSt10_Head_baseILj0EP16TfLiteConvParamsLb0EE7_M_headERS2_>
 800517e:	4603      	mov	r3, r0
 8005180:	4618      	mov	r0, r3
 8005182:	3708      	adds	r7, #8
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <_ZSt12__get_helperILj0EP16TfLiteConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8005188:	b580      	push	{r7, lr}
 800518a:	b082      	sub	sp, #8
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f000 f990 	bl	80054b6 <_ZNSt11_Tuple_implILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 8005196:	4603      	mov	r3, r0
 8005198:	4618      	mov	r0, r3
 800519a:	3708      	adds	r7, #8
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}

080051a0 <_ZSt7forwardIRP25TfLiteDepthwiseConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80051a0:	b480      	push	{r7}
 80051a2:	b083      	sub	sp, #12
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	4618      	mov	r0, r3
 80051ac:	370c      	adds	r7, #12
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr

080051b6 <_ZNSt11_Tuple_implILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
	_Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 80051b6:	b590      	push	{r4, r7, lr}
 80051b8:	b085      	sub	sp, #20
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	60f8      	str	r0, [r7, #12]
 80051be:	60b9      	str	r1, [r7, #8]
 80051c0:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head))
 80051c2:	68fc      	ldr	r4, [r7, #12]
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f7ff fe17 	bl	8004df8 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 80051ca:	4603      	mov	r3, r0
 80051cc:	4619      	mov	r1, r3
 80051ce:	4620      	mov	r0, r4
 80051d0:	f000 f935 	bl	800543e <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	1d1c      	adds	r4, r3, #4
 80051d8:	68b8      	ldr	r0, [r7, #8]
 80051da:	f7ff ffe1 	bl	80051a0 <_ZSt7forwardIRP25TfLiteDepthwiseConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 80051de:	4603      	mov	r3, r0
 80051e0:	4619      	mov	r1, r3
 80051e2:	4620      	mov	r0, r4
 80051e4:	f000 f975 	bl	80054d2 <_ZNSt10_Head_baseILj0EP25TfLiteDepthwiseConvParamsLb0EEC1IRS1_EEOT_>
	{ }
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	4618      	mov	r0, r3
 80051ec:	3714      	adds	r7, #20
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd90      	pop	{r4, r7, pc}

080051f2 <_ZNSt11_Tuple_implILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80051f2:	b580      	push	{r7, lr}
 80051f4:	b082      	sub	sp, #8
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	3304      	adds	r3, #4
 80051fe:	4618      	mov	r0, r3
 8005200:	f000 f978 	bl	80054f4 <_ZNSt10_Head_baseILj0EP25TfLiteDepthwiseConvParamsLb0EE7_M_headERS2_>
 8005204:	4603      	mov	r3, r0
 8005206:	4618      	mov	r0, r3
 8005208:	3708      	adds	r7, #8
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}

0800520e <_ZSt12__get_helperILj0EP25TfLiteDepthwiseConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800520e:	b580      	push	{r7, lr}
 8005210:	b082      	sub	sp, #8
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 f977 	bl	800550a <_ZNSt11_Tuple_implILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 800521c:	4603      	mov	r3, r0
 800521e:	4618      	mov	r0, r3
 8005220:	3708      	adds	r7, #8
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}

08005226 <_ZSt7forwardIRP26TfLiteFullyConnectedParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005226:	b480      	push	{r7}
 8005228:	b083      	sub	sp, #12
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4618      	mov	r0, r3
 8005232:	370c      	adds	r7, #12
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr

0800523c <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
	_Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 800523c:	b590      	push	{r4, r7, lr}
 800523e:	b085      	sub	sp, #20
 8005240:	af00      	add	r7, sp, #0
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head))
 8005248:	68fc      	ldr	r4, [r7, #12]
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f7ff fdd4 	bl	8004df8 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8005250:	4603      	mov	r3, r0
 8005252:	4619      	mov	r1, r3
 8005254:	4620      	mov	r0, r4
 8005256:	f000 f8f2 	bl	800543e <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	1d1c      	adds	r4, r3, #4
 800525e:	68b8      	ldr	r0, [r7, #8]
 8005260:	f7ff ffe1 	bl	8005226 <_ZSt7forwardIRP26TfLiteFullyConnectedParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8005264:	4603      	mov	r3, r0
 8005266:	4619      	mov	r1, r3
 8005268:	4620      	mov	r0, r4
 800526a:	f000 f95c 	bl	8005526 <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EEC1IRS1_EEOT_>
	{ }
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	4618      	mov	r0, r3
 8005272:	3714      	adds	r7, #20
 8005274:	46bd      	mov	sp, r7
 8005276:	bd90      	pop	{r4, r7, pc}

08005278 <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8005278:	b580      	push	{r7, lr}
 800527a:	b082      	sub	sp, #8
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	3304      	adds	r3, #4
 8005284:	4618      	mov	r0, r3
 8005286:	f000 f95f 	bl	8005548 <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EE7_M_headERS2_>
 800528a:	4603      	mov	r3, r0
 800528c:	4618      	mov	r0, r3
 800528e:	3708      	adds	r7, #8
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}

08005294 <_ZSt12__get_helperILj0EP26TfLiteFullyConnectedParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8005294:	b580      	push	{r7, lr}
 8005296:	b082      	sub	sp, #8
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f000 f95e 	bl	800555e <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 80052a2:	4603      	mov	r3, r0
 80052a4:	4618      	mov	r0, r3
 80052a6:	3708      	adds	r7, #8
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}

080052ac <_ZSt7forwardIRP16TfLitePoolParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80052ac:	b480      	push	{r7}
 80052ae:	b083      	sub	sp, #12
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	4618      	mov	r0, r3
 80052b8:	370c      	adds	r7, #12
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr

080052c2 <_ZNSt11_Tuple_implILj0EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
	_Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 80052c2:	b590      	push	{r4, r7, lr}
 80052c4:	b085      	sub	sp, #20
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	60f8      	str	r0, [r7, #12]
 80052ca:	60b9      	str	r1, [r7, #8]
 80052cc:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head))
 80052ce:	68fc      	ldr	r4, [r7, #12]
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f7ff fd91 	bl	8004df8 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 80052d6:	4603      	mov	r3, r0
 80052d8:	4619      	mov	r1, r3
 80052da:	4620      	mov	r0, r4
 80052dc:	f000 f8af 	bl	800543e <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	1d1c      	adds	r4, r3, #4
 80052e4:	68b8      	ldr	r0, [r7, #8]
 80052e6:	f7ff ffe1 	bl	80052ac <_ZSt7forwardIRP16TfLitePoolParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 80052ea:	4603      	mov	r3, r0
 80052ec:	4619      	mov	r1, r3
 80052ee:	4620      	mov	r0, r4
 80052f0:	f000 f943 	bl	800557a <_ZNSt10_Head_baseILj0EP16TfLitePoolParamsLb0EEC1IRS1_EEOT_>
	{ }
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	4618      	mov	r0, r3
 80052f8:	3714      	adds	r7, #20
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd90      	pop	{r4, r7, pc}

080052fe <_ZNSt11_Tuple_implILj0EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80052fe:	b580      	push	{r7, lr}
 8005300:	b082      	sub	sp, #8
 8005302:	af00      	add	r7, sp, #0
 8005304:	6078      	str	r0, [r7, #4]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	3304      	adds	r3, #4
 800530a:	4618      	mov	r0, r3
 800530c:	f000 f946 	bl	800559c <_ZNSt10_Head_baseILj0EP16TfLitePoolParamsLb0EE7_M_headERS2_>
 8005310:	4603      	mov	r3, r0
 8005312:	4618      	mov	r0, r3
 8005314:	3708      	adds	r7, #8
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}

0800531a <_ZSt12__get_helperILj0EP16TfLitePoolParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800531a:	b580      	push	{r7, lr}
 800531c:	b082      	sub	sp, #8
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f000 f945 	bl	80055b2 <_ZNSt11_Tuple_implILj0EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 8005328:	4603      	mov	r3, r0
 800532a:	4618      	mov	r0, r3
 800532c:	3708      	adds	r7, #8
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}

08005332 <_ZSt7forwardIRP19TfLiteReshapeParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005332:	b480      	push	{r7}
 8005334:	b083      	sub	sp, #12
 8005336:	af00      	add	r7, sp, #0
 8005338:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	4618      	mov	r0, r3
 800533e:	370c      	adds	r7, #12
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr

08005348 <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
	_Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 8005348:	b590      	push	{r4, r7, lr}
 800534a:	b085      	sub	sp, #20
 800534c:	af00      	add	r7, sp, #0
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	60b9      	str	r1, [r7, #8]
 8005352:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head))
 8005354:	68fc      	ldr	r4, [r7, #12]
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f7ff fd4e 	bl	8004df8 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800535c:	4603      	mov	r3, r0
 800535e:	4619      	mov	r1, r3
 8005360:	4620      	mov	r0, r4
 8005362:	f000 f86c 	bl	800543e <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	1d1c      	adds	r4, r3, #4
 800536a:	68b8      	ldr	r0, [r7, #8]
 800536c:	f7ff ffe1 	bl	8005332 <_ZSt7forwardIRP19TfLiteReshapeParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8005370:	4603      	mov	r3, r0
 8005372:	4619      	mov	r1, r3
 8005374:	4620      	mov	r0, r4
 8005376:	f000 f92a 	bl	80055ce <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EEC1IRS1_EEOT_>
	{ }
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	4618      	mov	r0, r3
 800537e:	3714      	adds	r7, #20
 8005380:	46bd      	mov	sp, r7
 8005382:	bd90      	pop	{r4, r7, pc}

08005384 <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8005384:	b580      	push	{r7, lr}
 8005386:	b082      	sub	sp, #8
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	3304      	adds	r3, #4
 8005390:	4618      	mov	r0, r3
 8005392:	f000 f92d 	bl	80055f0 <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EE7_M_headERS2_>
 8005396:	4603      	mov	r3, r0
 8005398:	4618      	mov	r0, r3
 800539a:	3708      	adds	r7, #8
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}

080053a0 <_ZSt12__get_helperILj0EP19TfLiteReshapeParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b082      	sub	sp, #8
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f000 f92c 	bl	8005606 <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 80053ae:	4603      	mov	r3, r0
 80053b0:	4618      	mov	r0, r3
 80053b2:	3708      	adds	r7, #8
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <_ZSt7forwardIRP19TfLiteSoftmaxParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80053b8:	b480      	push	{r7}
 80053ba:	b083      	sub	sp, #12
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	4618      	mov	r0, r3
 80053c4:	370c      	adds	r7, #12
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr

080053ce <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
	_Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 80053ce:	b590      	push	{r4, r7, lr}
 80053d0:	b085      	sub	sp, #20
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	60f8      	str	r0, [r7, #12]
 80053d6:	60b9      	str	r1, [r7, #8]
 80053d8:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head))
 80053da:	68fc      	ldr	r4, [r7, #12]
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f7ff fd0b 	bl	8004df8 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 80053e2:	4603      	mov	r3, r0
 80053e4:	4619      	mov	r1, r3
 80053e6:	4620      	mov	r0, r4
 80053e8:	f000 f829 	bl	800543e <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	1d1c      	adds	r4, r3, #4
 80053f0:	68b8      	ldr	r0, [r7, #8]
 80053f2:	f7ff ffe1 	bl	80053b8 <_ZSt7forwardIRP19TfLiteSoftmaxParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 80053f6:	4603      	mov	r3, r0
 80053f8:	4619      	mov	r1, r3
 80053fa:	4620      	mov	r0, r4
 80053fc:	f000 f911 	bl	8005622 <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EEC1IRS1_EEOT_>
	{ }
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	4618      	mov	r0, r3
 8005404:	3714      	adds	r7, #20
 8005406:	46bd      	mov	sp, r7
 8005408:	bd90      	pop	{r4, r7, pc}

0800540a <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800540a:	b580      	push	{r7, lr}
 800540c:	b082      	sub	sp, #8
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	3304      	adds	r3, #4
 8005416:	4618      	mov	r0, r3
 8005418:	f000 f914 	bl	8005644 <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EE7_M_headERS2_>
 800541c:	4603      	mov	r3, r0
 800541e:	4618      	mov	r0, r3
 8005420:	3708      	adds	r7, #8
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}

08005426 <_ZSt12__get_helperILj0EP19TfLiteSoftmaxParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8005426:	b580      	push	{r7, lr}
 8005428:	b082      	sub	sp, #8
 800542a:	af00      	add	r7, sp, #0
 800542c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f000 f913 	bl	800565a <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 8005434:	4603      	mov	r3, r0
 8005436:	4618      	mov	r0, r3
 8005438:	3708      	adds	r7, #8
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}

0800543e <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>:
	_Tuple_impl(_UHead&& __head)
 800543e:	b590      	push	{r4, r7, lr}
 8005440:	b083      	sub	sp, #12
 8005442:	af00      	add	r7, sp, #0
 8005444:	6078      	str	r0, [r7, #4]
 8005446:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head))
 8005448:	687c      	ldr	r4, [r7, #4]
 800544a:	6838      	ldr	r0, [r7, #0]
 800544c:	f7ff fcd4 	bl	8004df8 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8005450:	4603      	mov	r3, r0
 8005452:	4619      	mov	r1, r3
 8005454:	4620      	mov	r0, r4
 8005456:	f000 f90e 	bl	8005676 <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EEC2IS3_EEOT_>
	{ }
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4618      	mov	r0, r3
 800545e:	370c      	adds	r7, #12
 8005460:	46bd      	mov	sp, r7
 8005462:	bd90      	pop	{r4, r7, pc}

08005464 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8005464:	b580      	push	{r7, lr}
 8005466:	b082      	sub	sp, #8
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	4618      	mov	r0, r3
 8005470:	f000 f912 	bl	8005698 <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EE7_M_headERS4_>
 8005474:	4603      	mov	r3, r0
 8005476:	4618      	mov	r0, r3
 8005478:	3708      	adds	r7, #8
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}

0800547e <_ZNSt10_Head_baseILj0EP16TfLiteConvParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800547e:	b580      	push	{r7, lr}
 8005480:	b082      	sub	sp, #8
 8005482:	af00      	add	r7, sp, #0
 8005484:	6078      	str	r0, [r7, #4]
 8005486:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8005488:	6838      	ldr	r0, [r7, #0]
 800548a:	f7ff fe46 	bl	800511a <_ZSt7forwardIRP16TfLiteConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800548e:	4603      	mov	r3, r0
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	601a      	str	r2, [r3, #0]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4618      	mov	r0, r3
 800549a:	3708      	adds	r7, #8
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}

080054a0 <_ZNSt10_Head_baseILj0EP16TfLiteConvParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80054a0:	b480      	push	{r7}
 80054a2:	b083      	sub	sp, #12
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	4618      	mov	r0, r3
 80054ac:	370c      	adds	r7, #12
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr

080054b6 <_ZNSt11_Tuple_implILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80054b6:	b580      	push	{r7, lr}
 80054b8:	b082      	sub	sp, #8
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	3304      	adds	r3, #4
 80054c2:	4618      	mov	r0, r3
 80054c4:	f000 f8f3 	bl	80056ae <_ZNSt10_Head_baseILj0EP16TfLiteConvParamsLb0EE7_M_headERKS2_>
 80054c8:	4603      	mov	r3, r0
 80054ca:	4618      	mov	r0, r3
 80054cc:	3708      	adds	r7, #8
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}

080054d2 <_ZNSt10_Head_baseILj0EP25TfLiteDepthwiseConvParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 80054d2:	b580      	push	{r7, lr}
 80054d4:	b082      	sub	sp, #8
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]
 80054da:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80054dc:	6838      	ldr	r0, [r7, #0]
 80054de:	f7ff fe5f 	bl	80051a0 <_ZSt7forwardIRP25TfLiteDepthwiseConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 80054e2:	4603      	mov	r3, r0
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	601a      	str	r2, [r3, #0]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	4618      	mov	r0, r3
 80054ee:	3708      	adds	r7, #8
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}

080054f4 <_ZNSt10_Head_baseILj0EP25TfLiteDepthwiseConvParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80054f4:	b480      	push	{r7}
 80054f6:	b083      	sub	sp, #12
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	4618      	mov	r0, r3
 8005500:	370c      	adds	r7, #12
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr

0800550a <_ZNSt11_Tuple_implILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800550a:	b580      	push	{r7, lr}
 800550c:	b082      	sub	sp, #8
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	3304      	adds	r3, #4
 8005516:	4618      	mov	r0, r3
 8005518:	f000 f8d4 	bl	80056c4 <_ZNSt10_Head_baseILj0EP25TfLiteDepthwiseConvParamsLb0EE7_M_headERKS2_>
 800551c:	4603      	mov	r3, r0
 800551e:	4618      	mov	r0, r3
 8005520:	3708      	adds	r7, #8
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}

08005526 <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8005526:	b580      	push	{r7, lr}
 8005528:	b082      	sub	sp, #8
 800552a:	af00      	add	r7, sp, #0
 800552c:	6078      	str	r0, [r7, #4]
 800552e:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8005530:	6838      	ldr	r0, [r7, #0]
 8005532:	f7ff fe78 	bl	8005226 <_ZSt7forwardIRP26TfLiteFullyConnectedParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8005536:	4603      	mov	r3, r0
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	601a      	str	r2, [r3, #0]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4618      	mov	r0, r3
 8005542:	3708      	adds	r7, #8
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}

08005548 <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8005548:	b480      	push	{r7}
 800554a:	b083      	sub	sp, #12
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	4618      	mov	r0, r3
 8005554:	370c      	adds	r7, #12
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr

0800555e <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800555e:	b580      	push	{r7, lr}
 8005560:	b082      	sub	sp, #8
 8005562:	af00      	add	r7, sp, #0
 8005564:	6078      	str	r0, [r7, #4]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	3304      	adds	r3, #4
 800556a:	4618      	mov	r0, r3
 800556c:	f000 f8b5 	bl	80056da <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EE7_M_headERKS2_>
 8005570:	4603      	mov	r3, r0
 8005572:	4618      	mov	r0, r3
 8005574:	3708      	adds	r7, #8
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}

0800557a <_ZNSt10_Head_baseILj0EP16TfLitePoolParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800557a:	b580      	push	{r7, lr}
 800557c:	b082      	sub	sp, #8
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
 8005582:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8005584:	6838      	ldr	r0, [r7, #0]
 8005586:	f7ff fe91 	bl	80052ac <_ZSt7forwardIRP16TfLitePoolParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800558a:	4603      	mov	r3, r0
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	601a      	str	r2, [r3, #0]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4618      	mov	r0, r3
 8005596:	3708      	adds	r7, #8
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}

0800559c <_ZNSt10_Head_baseILj0EP16TfLitePoolParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800559c:	b480      	push	{r7}
 800559e:	b083      	sub	sp, #12
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	4618      	mov	r0, r3
 80055a8:	370c      	adds	r7, #12
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr

080055b2 <_ZNSt11_Tuple_implILj0EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80055b2:	b580      	push	{r7, lr}
 80055b4:	b082      	sub	sp, #8
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	6078      	str	r0, [r7, #4]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	3304      	adds	r3, #4
 80055be:	4618      	mov	r0, r3
 80055c0:	f000 f896 	bl	80056f0 <_ZNSt10_Head_baseILj0EP16TfLitePoolParamsLb0EE7_M_headERKS2_>
 80055c4:	4603      	mov	r3, r0
 80055c6:	4618      	mov	r0, r3
 80055c8:	3708      	adds	r7, #8
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}

080055ce <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 80055ce:	b580      	push	{r7, lr}
 80055d0:	b082      	sub	sp, #8
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
 80055d6:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80055d8:	6838      	ldr	r0, [r7, #0]
 80055da:	f7ff feaa 	bl	8005332 <_ZSt7forwardIRP19TfLiteReshapeParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 80055de:	4603      	mov	r3, r0
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	601a      	str	r2, [r3, #0]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4618      	mov	r0, r3
 80055ea:	3708      	adds	r7, #8
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}

080055f0 <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80055f0:	b480      	push	{r7}
 80055f2:	b083      	sub	sp, #12
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4618      	mov	r0, r3
 80055fc:	370c      	adds	r7, #12
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr

08005606 <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8005606:	b580      	push	{r7, lr}
 8005608:	b082      	sub	sp, #8
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	3304      	adds	r3, #4
 8005612:	4618      	mov	r0, r3
 8005614:	f000 f877 	bl	8005706 <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EE7_M_headERKS2_>
 8005618:	4603      	mov	r3, r0
 800561a:	4618      	mov	r0, r3
 800561c:	3708      	adds	r7, #8
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}

08005622 <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8005622:	b580      	push	{r7, lr}
 8005624:	b082      	sub	sp, #8
 8005626:	af00      	add	r7, sp, #0
 8005628:	6078      	str	r0, [r7, #4]
 800562a:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800562c:	6838      	ldr	r0, [r7, #0]
 800562e:	f7ff fec3 	bl	80053b8 <_ZSt7forwardIRP19TfLiteSoftmaxParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8005632:	4603      	mov	r3, r0
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	601a      	str	r2, [r3, #0]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4618      	mov	r0, r3
 800563e:	3708      	adds	r7, #8
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}

08005644 <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8005644:	b480      	push	{r7}
 8005646:	b083      	sub	sp, #12
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	4618      	mov	r0, r3
 8005650:	370c      	adds	r7, #12
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr

0800565a <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800565a:	b580      	push	{r7, lr}
 800565c:	b082      	sub	sp, #8
 800565e:	af00      	add	r7, sp, #0
 8005660:	6078      	str	r0, [r7, #4]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	3304      	adds	r3, #4
 8005666:	4618      	mov	r0, r3
 8005668:	f000 f858 	bl	800571c <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EE7_M_headERKS2_>
 800566c:	4603      	mov	r3, r0
 800566e:	4618      	mov	r0, r3
 8005670:	3708      	adds	r7, #8
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}

08005676 <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EEC2IS3_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8005676:	b580      	push	{r7, lr}
 8005678:	b082      	sub	sp, #8
 800567a:	af00      	add	r7, sp, #0
 800567c:	6078      	str	r0, [r7, #4]
 800567e:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8005680:	6838      	ldr	r0, [r7, #0]
 8005682:	f7ff fbb9 	bl	8004df8 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8005686:	4602      	mov	r2, r0
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6812      	ldr	r2, [r2, #0]
 800568c:	601a      	str	r2, [r3, #0]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	4618      	mov	r0, r3
 8005692:	3708      	adds	r7, #8
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}

08005698 <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4618      	mov	r0, r3
 80056a4:	370c      	adds	r7, #12
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr

080056ae <_ZNSt10_Head_baseILj0EP16TfLiteConvParamsLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 80056ae:	b480      	push	{r7}
 80056b0:	b083      	sub	sp, #12
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	6078      	str	r0, [r7, #4]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	4618      	mov	r0, r3
 80056ba:	370c      	adds	r7, #12
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr

080056c4 <_ZNSt10_Head_baseILj0EP25TfLiteDepthwiseConvParamsLb0EE7_M_headERKS2_>:
 80056c4:	b480      	push	{r7}
 80056c6:	b083      	sub	sp, #12
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	4618      	mov	r0, r3
 80056d0:	370c      	adds	r7, #12
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr

080056da <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EE7_M_headERKS2_>:
 80056da:	b480      	push	{r7}
 80056dc:	b083      	sub	sp, #12
 80056de:	af00      	add	r7, sp, #0
 80056e0:	6078      	str	r0, [r7, #4]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	4618      	mov	r0, r3
 80056e6:	370c      	adds	r7, #12
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr

080056f0 <_ZNSt10_Head_baseILj0EP16TfLitePoolParamsLb0EE7_M_headERKS2_>:
 80056f0:	b480      	push	{r7}
 80056f2:	b083      	sub	sp, #12
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	4618      	mov	r0, r3
 80056fc:	370c      	adds	r7, #12
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr

08005706 <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EE7_M_headERKS2_>:
 8005706:	b480      	push	{r7}
 8005708:	b083      	sub	sp, #12
 800570a:	af00      	add	r7, sp, #0
 800570c:	6078      	str	r0, [r7, #4]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4618      	mov	r0, r3
 8005712:	370c      	adds	r7, #12
 8005714:	46bd      	mov	sp, r7
 8005716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571a:	4770      	bx	lr

0800571c <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EE7_M_headERKS2_>:
 800571c:	b480      	push	{r7}
 800571e:	b083      	sub	sp, #12
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	4618      	mov	r0, r3
 8005728:	370c      	adds	r7, #12
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr

08005732 <TfLiteIntArrayGetSizeInBytes>:

}  // namespace

extern "C" {

size_t TfLiteIntArrayGetSizeInBytes(int size) {
 8005732:	b580      	push	{r7, lr}
 8005734:	b082      	sub	sp, #8
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
  return TfLiteVarArrayGetSizeInBytes<TfLiteIntArray>(size);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f000 f894 	bl	8005868 <_ZN12_GLOBAL__N_128TfLiteVarArrayGetSizeInBytesI14TfLiteIntArrayEEji>
 8005740:	4603      	mov	r3, r0
}
 8005742:	4618      	mov	r0, r3
 8005744:	3708      	adds	r7, #8
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}
	...

0800574c <TfLiteTypeGetName>:
TfLiteStatus TfLiteTensorRealloc(size_t num_bytes, TfLiteTensor* tensor) {
  return TfLiteTensorResizeMaybeCopy(num_bytes, tensor, true);
}
#endif  // TF_LITE_STATIC_MEMORY

const char* TfLiteTypeGetName(TfLiteType type) {
 800574c:	b480      	push	{r7}
 800574e:	b083      	sub	sp, #12
 8005750:	af00      	add	r7, sp, #0
 8005752:	4603      	mov	r3, r0
 8005754:	71fb      	strb	r3, [r7, #7]
  switch (type) {
 8005756:	79fb      	ldrb	r3, [r7, #7]
 8005758:	2b13      	cmp	r3, #19
 800575a:	d853      	bhi.n	8005804 <TfLiteTypeGetName+0xb8>
 800575c:	a201      	add	r2, pc, #4	; (adr r2, 8005764 <TfLiteTypeGetName+0x18>)
 800575e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005762:	bf00      	nop
 8005764:	080057b5 	.word	0x080057b5
 8005768:	080057b9 	.word	0x080057b9
 800576c:	080057c5 	.word	0x080057c5
 8005770:	080057cd 	.word	0x080057cd
 8005774:	080057d5 	.word	0x080057d5
 8005778:	080057e9 	.word	0x080057e9
 800577c:	080057dd 	.word	0x080057dd
 8005780:	080057c1 	.word	0x080057c1
 8005784:	080057e1 	.word	0x080057e1
 8005788:	080057d1 	.word	0x080057d1
 800578c:	080057ed 	.word	0x080057ed
 8005790:	080057f5 	.word	0x080057f5
 8005794:	080057e5 	.word	0x080057e5
 8005798:	080057d9 	.word	0x080057d9
 800579c:	080057f9 	.word	0x080057f9
 80057a0:	080057fd 	.word	0x080057fd
 80057a4:	080057c9 	.word	0x080057c9
 80057a8:	080057bd 	.word	0x080057bd
 80057ac:	08005801 	.word	0x08005801
 80057b0:	080057f1 	.word	0x080057f1
    case kTfLiteNoType:
      return "NOTYPE";
 80057b4:	4b17      	ldr	r3, [pc, #92]	; (8005814 <TfLiteTypeGetName+0xc8>)
 80057b6:	e026      	b.n	8005806 <TfLiteTypeGetName+0xba>
    case kTfLiteFloat32:
      return "FLOAT32";
 80057b8:	4b17      	ldr	r3, [pc, #92]	; (8005818 <TfLiteTypeGetName+0xcc>)
 80057ba:	e024      	b.n	8005806 <TfLiteTypeGetName+0xba>
    case kTfLiteUInt16:
      return "UINT16";
 80057bc:	4b17      	ldr	r3, [pc, #92]	; (800581c <TfLiteTypeGetName+0xd0>)
 80057be:	e022      	b.n	8005806 <TfLiteTypeGetName+0xba>
    case kTfLiteInt16:
      return "INT16";
 80057c0:	4b17      	ldr	r3, [pc, #92]	; (8005820 <TfLiteTypeGetName+0xd4>)
 80057c2:	e020      	b.n	8005806 <TfLiteTypeGetName+0xba>
    case kTfLiteInt32:
      return "INT32";
 80057c4:	4b17      	ldr	r3, [pc, #92]	; (8005824 <TfLiteTypeGetName+0xd8>)
 80057c6:	e01e      	b.n	8005806 <TfLiteTypeGetName+0xba>
    case kTfLiteUInt32:
      return "UINT32";
 80057c8:	4b17      	ldr	r3, [pc, #92]	; (8005828 <TfLiteTypeGetName+0xdc>)
 80057ca:	e01c      	b.n	8005806 <TfLiteTypeGetName+0xba>
    case kTfLiteUInt8:
      return "UINT8";
 80057cc:	4b17      	ldr	r3, [pc, #92]	; (800582c <TfLiteTypeGetName+0xe0>)
 80057ce:	e01a      	b.n	8005806 <TfLiteTypeGetName+0xba>
    case kTfLiteInt8:
      return "INT8";
 80057d0:	4b17      	ldr	r3, [pc, #92]	; (8005830 <TfLiteTypeGetName+0xe4>)
 80057d2:	e018      	b.n	8005806 <TfLiteTypeGetName+0xba>
    case kTfLiteInt64:
      return "INT64";
 80057d4:	4b17      	ldr	r3, [pc, #92]	; (8005834 <TfLiteTypeGetName+0xe8>)
 80057d6:	e016      	b.n	8005806 <TfLiteTypeGetName+0xba>
    case kTfLiteUInt64:
      return "UINT64";
 80057d8:	4b17      	ldr	r3, [pc, #92]	; (8005838 <TfLiteTypeGetName+0xec>)
 80057da:	e014      	b.n	8005806 <TfLiteTypeGetName+0xba>
    case kTfLiteBool:
      return "BOOL";
 80057dc:	4b17      	ldr	r3, [pc, #92]	; (800583c <TfLiteTypeGetName+0xf0>)
 80057de:	e012      	b.n	8005806 <TfLiteTypeGetName+0xba>
    case kTfLiteComplex64:
      return "COMPLEX64";
 80057e0:	4b17      	ldr	r3, [pc, #92]	; (8005840 <TfLiteTypeGetName+0xf4>)
 80057e2:	e010      	b.n	8005806 <TfLiteTypeGetName+0xba>
    case kTfLiteComplex128:
      return "COMPLEX128";
 80057e4:	4b17      	ldr	r3, [pc, #92]	; (8005844 <TfLiteTypeGetName+0xf8>)
 80057e6:	e00e      	b.n	8005806 <TfLiteTypeGetName+0xba>
    case kTfLiteString:
      return "STRING";
 80057e8:	4b17      	ldr	r3, [pc, #92]	; (8005848 <TfLiteTypeGetName+0xfc>)
 80057ea:	e00c      	b.n	8005806 <TfLiteTypeGetName+0xba>
    case kTfLiteFloat16:
      return "FLOAT16";
 80057ec:	4b17      	ldr	r3, [pc, #92]	; (800584c <TfLiteTypeGetName+0x100>)
 80057ee:	e00a      	b.n	8005806 <TfLiteTypeGetName+0xba>
    case kTfLiteBFloat16:
      return "BFLOAT16";
 80057f0:	4b17      	ldr	r3, [pc, #92]	; (8005850 <TfLiteTypeGetName+0x104>)
 80057f2:	e008      	b.n	8005806 <TfLiteTypeGetName+0xba>
    case kTfLiteFloat64:
      return "FLOAT64";
 80057f4:	4b17      	ldr	r3, [pc, #92]	; (8005854 <TfLiteTypeGetName+0x108>)
 80057f6:	e006      	b.n	8005806 <TfLiteTypeGetName+0xba>
    case kTfLiteResource:
      return "RESOURCE";
 80057f8:	4b17      	ldr	r3, [pc, #92]	; (8005858 <TfLiteTypeGetName+0x10c>)
 80057fa:	e004      	b.n	8005806 <TfLiteTypeGetName+0xba>
    case kTfLiteVariant:
      return "VARIANT";
 80057fc:	4b17      	ldr	r3, [pc, #92]	; (800585c <TfLiteTypeGetName+0x110>)
 80057fe:	e002      	b.n	8005806 <TfLiteTypeGetName+0xba>
    case kTfLiteInt4:
      return "INT4";
 8005800:	4b17      	ldr	r3, [pc, #92]	; (8005860 <TfLiteTypeGetName+0x114>)
 8005802:	e000      	b.n	8005806 <TfLiteTypeGetName+0xba>
  }
  return "Unknown type";
 8005804:	4b17      	ldr	r3, [pc, #92]	; (8005864 <TfLiteTypeGetName+0x118>)
}
 8005806:	4618      	mov	r0, r3
 8005808:	370c      	adds	r7, #12
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr
 8005812:	bf00      	nop
 8005814:	08021ac0 	.word	0x08021ac0
 8005818:	08021ac8 	.word	0x08021ac8
 800581c:	08021ad0 	.word	0x08021ad0
 8005820:	08021ad8 	.word	0x08021ad8
 8005824:	08021ae0 	.word	0x08021ae0
 8005828:	08021ae8 	.word	0x08021ae8
 800582c:	08021af0 	.word	0x08021af0
 8005830:	08021af8 	.word	0x08021af8
 8005834:	08021b00 	.word	0x08021b00
 8005838:	08021b08 	.word	0x08021b08
 800583c:	08021b10 	.word	0x08021b10
 8005840:	08021b18 	.word	0x08021b18
 8005844:	08021b24 	.word	0x08021b24
 8005848:	08021b30 	.word	0x08021b30
 800584c:	08021b38 	.word	0x08021b38
 8005850:	08021b40 	.word	0x08021b40
 8005854:	08021b4c 	.word	0x08021b4c
 8005858:	08021b54 	.word	0x08021b54
 800585c:	08021b60 	.word	0x08021b60
 8005860:	08021b68 	.word	0x08021b68
 8005864:	08021b70 	.word	0x08021b70

08005868 <_ZN12_GLOBAL__N_128TfLiteVarArrayGetSizeInBytesI14TfLiteIntArrayEEji>:
size_t TfLiteVarArrayGetSizeInBytes(const int size) {
 8005868:	b480      	push	{r7}
 800586a:	b085      	sub	sp, #20
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  constexpr size_t data_size = sizeof(std::declval<T>().data[0]);
 8005870:	2304      	movs	r3, #4
 8005872:	60fb      	str	r3, [r7, #12]
  size_t computed_size = sizeof(T) + data_size * size;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	3301      	adds	r3, #1
 8005878:	009b      	lsls	r3, r3, #2
 800587a:	60bb      	str	r3, [r7, #8]
  return computed_size;
 800587c:	68bb      	ldr	r3, [r7, #8]
}
 800587e:	4618      	mov	r0, r3
 8005880:	3714      	adds	r7, #20
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr

0800588a <_ZNSt14numeric_limitsIlE3minEv>:
    struct numeric_limits<long>
    {
      static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;

      static _GLIBCXX_CONSTEXPR long
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }
 800588a:	b480      	push	{r7}
 800588c:	af00      	add	r7, sp, #0
 800588e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005892:	4618      	mov	r0, r3
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr

0800589c <_ZNSt14numeric_limitsIlE3maxEv>:

      static _GLIBCXX_CONSTEXPR long
      max() _GLIBCXX_USE_NOEXCEPT { return __LONG_MAX__; }
 800589c:	b480      	push	{r7}
 800589e:	af00      	add	r7, sp, #0
 80058a0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80058a4:	4618      	mov	r0, r3
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr
	...

080058b0 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>:

// This function implements the same computation as the ARMv7 NEON VQRDMULH
// instruction.
template <>
inline std::int32_t SaturatingRoundingDoublingHighMul(std::int32_t a,
                                                      std::int32_t b) {
 80058b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058b4:	b092      	sub	sp, #72	; 0x48
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	61f8      	str	r0, [r7, #28]
 80058ba:	61b9      	str	r1, [r7, #24]
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 80058bc:	69fa      	ldr	r2, [r7, #28]
 80058be:	69bb      	ldr	r3, [r7, #24]
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d107      	bne.n	80058d4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x24>
 80058c4:	f7ff ffe1 	bl	800588a <_ZNSt14numeric_limitsIlE3minEv>
 80058c8:	4602      	mov	r2, r0
 80058ca:	69fb      	ldr	r3, [r7, #28]
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d101      	bne.n	80058d4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x24>
 80058d0:	2301      	movs	r3, #1
 80058d2:	e000      	b.n	80058d6 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x26>
 80058d4:	2300      	movs	r3, #0
 80058d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  std::int64_t a_64(a);
 80058da:	69fb      	ldr	r3, [r7, #28]
 80058dc:	17da      	asrs	r2, r3, #31
 80058de:	60bb      	str	r3, [r7, #8]
 80058e0:	60fa      	str	r2, [r7, #12]
 80058e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80058e6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  std::int64_t b_64(b);
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	17da      	asrs	r2, r3, #31
 80058ee:	603b      	str	r3, [r7, #0]
 80058f0:	607a      	str	r2, [r7, #4]
 80058f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058f6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  std::int64_t ab_64 = a_64 * b_64;
 80058fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058fe:	fb03 f202 	mul.w	r2, r3, r2
 8005902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005904:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005906:	fb01 f303 	mul.w	r3, r1, r3
 800590a:	4413      	add	r3, r2
 800590c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800590e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005910:	fba1 4502 	umull	r4, r5, r1, r2
 8005914:	442b      	add	r3, r5
 8005916:	461d      	mov	r5, r3
 8005918:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
 800591c:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 8005920:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005924:	2b00      	cmp	r3, #0
 8005926:	db02      	blt.n	800592e <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x7e>
 8005928:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800592c:	e000      	b.n	8005930 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x80>
 800592e:	4b1a      	ldr	r3, [pc, #104]	; (8005998 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xe8>)
 8005930:	627b      	str	r3, [r7, #36]	; 0x24
  std::int32_t ab_x2_high32 =
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 8005932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005934:	17da      	asrs	r2, r3, #31
 8005936:	4698      	mov	r8, r3
 8005938:	4691      	mov	r9, r2
 800593a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800593e:	eb18 0102 	adds.w	r1, r8, r2
 8005942:	6139      	str	r1, [r7, #16]
 8005944:	eb49 0303 	adc.w	r3, r9, r3
 8005948:	617b      	str	r3, [r7, #20]
 800594a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800594e:	2b00      	cmp	r3, #0
 8005950:	da07      	bge.n	8005962 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xb2>
 8005952:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005956:	eb12 0a01 	adds.w	sl, r2, r1
 800595a:	f143 0b00 	adc.w	fp, r3, #0
 800595e:	4652      	mov	r2, sl
 8005960:	465b      	mov	r3, fp
 8005962:	f04f 0000 	mov.w	r0, #0
 8005966:	f04f 0100 	mov.w	r1, #0
 800596a:	0fd0      	lsrs	r0, r2, #31
 800596c:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8005970:	17d9      	asrs	r1, r3, #31
 8005972:	4602      	mov	r2, r0
 8005974:	460b      	mov	r3, r1
  std::int32_t ab_x2_high32 =
 8005976:	4613      	mov	r3, r2
 8005978:	623b      	str	r3, [r7, #32]
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 800597a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800597e:	2b00      	cmp	r3, #0
 8005980:	d003      	beq.n	800598a <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xda>
 8005982:	f7ff ff8b 	bl	800589c <_ZNSt14numeric_limitsIlE3maxEv>
 8005986:	4603      	mov	r3, r0
 8005988:	e000      	b.n	800598c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xdc>
 800598a:	6a3b      	ldr	r3, [r7, #32]
}
 800598c:	4618      	mov	r0, r3
 800598e:	3748      	adds	r7, #72	; 0x48
 8005990:	46bd      	mov	sp, r7
 8005992:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005996:	bf00      	nop
 8005998:	c0000001 	.word	0xc0000001

0800599c <_ZN6tflite29MultiplyByQuantizedMultiplierElli>:
  return static_cast<int32_t>(result);
}
// Double-rounding MultiplyByQuantizedMultiplier
#else
int32_t MultiplyByQuantizedMultiplier(int32_t x, int32_t quantized_multiplier,
                                      int shift) {
 800599c:	b580      	push	{r7, lr}
 800599e:	b086      	sub	sp, #24
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	60f8      	str	r0, [r7, #12]
 80059a4:	60b9      	str	r1, [r7, #8]
 80059a6:	607a      	str	r2, [r7, #4]
  using gemmlowp::RoundingDivideByPOT;
  using gemmlowp::SaturatingRoundingDoublingHighMul;
  int left_shift = shift > 0 ? shift : 0;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80059ae:	617b      	str	r3, [r7, #20]
  int right_shift = shift > 0 ? 0 : -shift;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	dc02      	bgt.n	80059bc <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x20>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	425b      	negs	r3, r3
 80059ba:	e000      	b.n	80059be <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x22>
 80059bc:	2300      	movs	r3, #0
 80059be:	613b      	str	r3, [r7, #16]
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
 80059c0:	68fa      	ldr	r2, [r7, #12]
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	fa02 f303 	lsl.w	r3, r2, r3
 80059c8:	68b9      	ldr	r1, [r7, #8]
 80059ca:	4618      	mov	r0, r3
 80059cc:	f7ff ff70 	bl	80058b0 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 80059d0:	4603      	mov	r3, r0
 80059d2:	6939      	ldr	r1, [r7, #16]
 80059d4:	4618      	mov	r0, r3
 80059d6:	f000 f8a1 	bl	8005b1c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 80059da:	4603      	mov	r3, r0
                                 x * (1 << left_shift), quantized_multiplier),
                             right_shift);
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3718      	adds	r7, #24
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}

080059e4 <_ZN6tflite29MultiplyByQuantizedMultiplierExli>:

int32_t MultiplyByQuantizedMultiplier(int64_t x, int32_t quantized_multiplier,
                                      int shift) {
 80059e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059e8:	b08d      	sub	sp, #52	; 0x34
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	e9c7 0106 	strd	r0, r1, [r7, #24]
 80059f0:	617a      	str	r2, [r7, #20]
 80059f2:	613b      	str	r3, [r7, #16]
  //
  // Assumptions: The following input ranges are assumed
  // - quantize_scale>=0  (the usual range is (1<<30) to (1>>31)-1)
  // - scaling is chosen so final scaled result fits in int32_t
  // - input x is in the range -(1<<47) <= x < (1<<47)
  assert(quantized_multiplier >= 0);
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	da05      	bge.n	8005a06 <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x22>
 80059fa:	4b42      	ldr	r3, [pc, #264]	; (8005b04 <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x120>)
 80059fc:	4a42      	ldr	r2, [pc, #264]	; (8005b08 <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x124>)
 80059fe:	2158      	movs	r1, #88	; 0x58
 8005a00:	4842      	ldr	r0, [pc, #264]	; (8005b0c <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x128>)
 8005a02:	f01a f835 	bl	801fa70 <__assert_func>
  assert(shift >= -31 && shift < 8);
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	f113 0f1f 	cmn.w	r3, #31
 8005a0c:	db02      	blt.n	8005a14 <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x30>
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	2b07      	cmp	r3, #7
 8005a12:	dd05      	ble.n	8005a20 <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x3c>
 8005a14:	4b3e      	ldr	r3, [pc, #248]	; (8005b10 <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x12c>)
 8005a16:	4a3c      	ldr	r2, [pc, #240]	; (8005b08 <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x124>)
 8005a18:	2159      	movs	r1, #89	; 0x59
 8005a1a:	483c      	ldr	r0, [pc, #240]	; (8005b0c <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x128>)
 8005a1c:	f01a f828 	bl	801fa70 <__assert_func>
  assert(x >= -(static_cast<int64_t>(1) << 47) &&
 8005a20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a24:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8005a28:	db04      	blt.n	8005a34 <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x50>
 8005a2a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a32:	db05      	blt.n	8005a40 <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x5c>
 8005a34:	4b37      	ldr	r3, [pc, #220]	; (8005b14 <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x130>)
 8005a36:	4a34      	ldr	r2, [pc, #208]	; (8005b08 <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x124>)
 8005a38:	215a      	movs	r1, #90	; 0x5a
 8005a3a:	4834      	ldr	r0, [pc, #208]	; (8005b0c <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x128>)
 8005a3c:	f01a f818 	bl	801fa70 <__assert_func>
         x < (static_cast<int64_t>(1) << 47));

  int32_t reduced_multiplier = (quantized_multiplier < 0x7FFF0000)
                                   ? ((quantized_multiplier + (1 << 15)) >> 16)
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	4a35      	ldr	r2, [pc, #212]	; (8005b18 <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x134>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	dc04      	bgt.n	8005a52 <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x6e>
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005a4e:	141b      	asrs	r3, r3, #16
 8005a50:	e001      	b.n	8005a56 <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x72>
 8005a52:	f647 73ff 	movw	r3, #32767	; 0x7fff
  int32_t reduced_multiplier = (quantized_multiplier < 0x7FFF0000)
 8005a56:	62fb      	str	r3, [r7, #44]	; 0x2c
                                   : 0x7FFF;
  int total_shift = 15 - shift;
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	f1c3 030f 	rsb	r3, r3, #15
 8005a5e:	62bb      	str	r3, [r7, #40]	; 0x28
  x = (x * (int64_t)reduced_multiplier) + ((int64_t)1 << (total_shift - 1));
 8005a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a62:	17da      	asrs	r2, r3, #31
 8005a64:	60bb      	str	r3, [r7, #8]
 8005a66:	60fa      	str	r2, [r7, #12]
 8005a68:	69bb      	ldr	r3, [r7, #24]
 8005a6a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005a6e:	460a      	mov	r2, r1
 8005a70:	fb02 f203 	mul.w	r2, r2, r3
 8005a74:	69fb      	ldr	r3, [r7, #28]
 8005a76:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8005a7a:	4601      	mov	r1, r0
 8005a7c:	fb01 f303 	mul.w	r3, r1, r3
 8005a80:	4413      	add	r3, r2
 8005a82:	69ba      	ldr	r2, [r7, #24]
 8005a84:	68b9      	ldr	r1, [r7, #8]
 8005a86:	fba2 8901 	umull	r8, r9, r2, r1
 8005a8a:	444b      	add	r3, r9
 8005a8c:	4699      	mov	r9, r3
 8005a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a90:	1e59      	subs	r1, r3, #1
 8005a92:	f04f 0201 	mov.w	r2, #1
 8005a96:	f04f 0300 	mov.w	r3, #0
 8005a9a:	f1a1 0620 	sub.w	r6, r1, #32
 8005a9e:	f1c1 0020 	rsb	r0, r1, #32
 8005aa2:	fa03 f501 	lsl.w	r5, r3, r1
 8005aa6:	fa02 f606 	lsl.w	r6, r2, r6
 8005aaa:	4335      	orrs	r5, r6
 8005aac:	fa22 f000 	lsr.w	r0, r2, r0
 8005ab0:	4305      	orrs	r5, r0
 8005ab2:	fa02 f401 	lsl.w	r4, r2, r1
 8005ab6:	eb18 0304 	adds.w	r3, r8, r4
 8005aba:	603b      	str	r3, [r7, #0]
 8005abc:	eb49 0305 	adc.w	r3, r9, r5
 8005ac0:	607b      	str	r3, [r7, #4]
 8005ac2:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005ac6:	e9c7 3406 	strd	r3, r4, [r7, #24]
  int32_t result = x >> total_shift;
 8005aca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ace:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ad0:	f1c1 0420 	rsb	r4, r1, #32
 8005ad4:	f1b1 0020 	subs.w	r0, r1, #32
 8005ad8:	fa22 fa01 	lsr.w	sl, r2, r1
 8005adc:	fa03 f404 	lsl.w	r4, r3, r4
 8005ae0:	ea4a 0a04 	orr.w	sl, sl, r4
 8005ae4:	d403      	bmi.n	8005aee <_ZN6tflite29MultiplyByQuantizedMultiplierExli+0x10a>
 8005ae6:	fa43 f000 	asr.w	r0, r3, r0
 8005aea:	ea4a 0a00 	orr.w	sl, sl, r0
 8005aee:	fa43 fb01 	asr.w	fp, r3, r1
 8005af2:	4653      	mov	r3, sl
 8005af4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8005af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3734      	adds	r7, #52	; 0x34
 8005afc:	46bd      	mov	sp, r7
 8005afe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b02:	bf00      	nop
 8005b04:	08021b80 	.word	0x08021b80
 8005b08:	08021b9c 	.word	0x08021b9c
 8005b0c:	08021be4 	.word	0x08021be4
 8005b10:	08021c1c 	.word	0x08021c1c
 8005b14:	08021c38 	.word	0x08021c38
 8005b18:	7ffeffff 	.word	0x7ffeffff

08005b1c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>:
}

// Correctly-rounded-to-nearest division by a power-of-two.
// Also known as a rounding arithmetic right shift.
template <typename IntegerType>
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
 8005b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b1e:	b089      	sub	sp, #36	; 0x24
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	6039      	str	r1, [r7, #0]
  assert(exponent >= 0);
 8005b26:	6839      	ldr	r1, [r7, #0]
 8005b28:	2900      	cmp	r1, #0
 8005b2a:	da06      	bge.n	8005b3a <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x1e>
 8005b2c:	4b31      	ldr	r3, [pc, #196]	; (8005bf4 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xd8>)
 8005b2e:	4a32      	ldr	r2, [pc, #200]	; (8005bf8 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 8005b30:	f44f 71b3 	mov.w	r1, #358	; 0x166
 8005b34:	4831      	ldr	r0, [pc, #196]	; (8005bfc <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe0>)
 8005b36:	f019 ff9b 	bl	801fa70 <__assert_func>
  assert(exponent <= 31);
 8005b3a:	6839      	ldr	r1, [r7, #0]
 8005b3c:	291f      	cmp	r1, #31
 8005b3e:	dd06      	ble.n	8005b4e <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x32>
 8005b40:	4b2f      	ldr	r3, [pc, #188]	; (8005c00 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe4>)
 8005b42:	4a2d      	ldr	r2, [pc, #180]	; (8005bf8 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 8005b44:	f240 1167 	movw	r1, #359	; 0x167
 8005b48:	482c      	ldr	r0, [pc, #176]	; (8005bfc <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe0>)
 8005b4a:	f019 ff91 	bl	801fa70 <__assert_func>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
 8005b4e:	f04f 0001 	mov.w	r0, #1
 8005b52:	f04f 0100 	mov.w	r1, #0
 8005b56:	683c      	ldr	r4, [r7, #0]
 8005b58:	f1a4 0620 	sub.w	r6, r4, #32
 8005b5c:	f1c4 0520 	rsb	r5, r4, #32
 8005b60:	fa01 f304 	lsl.w	r3, r1, r4
 8005b64:	fa00 f606 	lsl.w	r6, r0, r6
 8005b68:	4333      	orrs	r3, r6
 8005b6a:	fa20 f505 	lsr.w	r5, r0, r5
 8005b6e:	432b      	orrs	r3, r5
 8005b70:	fa00 f204 	lsl.w	r2, r0, r4
 8005b74:	4613      	mov	r3, r2
 8005b76:	3b01      	subs	r3, #1
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f000 f843 	bl	8005c04 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8005b7e:	61f8      	str	r0, [r7, #28]
  const IntegerType zero = Dup<IntegerType>(0);
 8005b80:	2000      	movs	r0, #0
 8005b82:	f000 f83f 	bl	8005c04 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8005b86:	61b8      	str	r0, [r7, #24]
  const IntegerType one = Dup<IntegerType>(1);
 8005b88:	2001      	movs	r0, #1
 8005b8a:	f000 f83b 	bl	8005c04 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8005b8e:	6178      	str	r0, [r7, #20]
  const IntegerType remainder = BitAnd(x, mask);
 8005b90:	69f9      	ldr	r1, [r7, #28]
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f000 f841 	bl	8005c1a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8005b98:	6138      	str	r0, [r7, #16]
  const IntegerType threshold =
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
 8005b9a:	2101      	movs	r1, #1
 8005b9c:	69f8      	ldr	r0, [r7, #28]
 8005b9e:	f000 f84a 	bl	8005c36 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 8005ba2:	4604      	mov	r4, r0
 8005ba4:	69b9      	ldr	r1, [r7, #24]
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f000 f854 	bl	8005c54 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 8005bac:	4603      	mov	r3, r0
 8005bae:	6979      	ldr	r1, [r7, #20]
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f000 f832 	bl	8005c1a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	4619      	mov	r1, r3
 8005bba:	4620      	mov	r0, r4
 8005bbc:	f000 f85e 	bl	8005c7c <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8005bc0:	60f8      	str	r0, [r7, #12]
  return Add(ShiftRight(x, exponent),
 8005bc2:	6839      	ldr	r1, [r7, #0]
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f000 f836 	bl	8005c36 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 8005bca:	4604      	mov	r4, r0
 8005bcc:	68f9      	ldr	r1, [r7, #12]
 8005bce:	6938      	ldr	r0, [r7, #16]
 8005bd0:	f000 f862 	bl	8005c98 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	6979      	ldr	r1, [r7, #20]
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f000 f81e 	bl	8005c1a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8005bde:	4603      	mov	r3, r0
 8005be0:	4619      	mov	r1, r3
 8005be2:	4620      	mov	r0, r4
 8005be4:	f000 f84a 	bl	8005c7c <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8005be8:	4603      	mov	r3, r0
             BitAnd(MaskIfGreaterThan(remainder, threshold), one));
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3724      	adds	r7, #36	; 0x24
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	08021c88 	.word	0x08021c88
 8005bf8:	08021c98 	.word	0x08021c98
 8005bfc:	08021cf4 	.word	0x08021cf4
 8005c00:	08021d18 	.word	0x08021d18

08005c04 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>:
tRawType Dup(typename FixedPointRawTypeTraits<tRawType>::ScalarRawType x) {
 8005c04:	b480      	push	{r7}
 8005c06:	b083      	sub	sp, #12
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  return x;
 8005c0c:	687b      	ldr	r3, [r7, #4]
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	370c      	adds	r7, #12
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr

08005c1a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>:
tIntegerType BitAnd(tIntegerType a, tIntegerType b) {
 8005c1a:	b480      	push	{r7}
 8005c1c:	b083      	sub	sp, #12
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	6078      	str	r0, [r7, #4]
 8005c22:	6039      	str	r1, [r7, #0]
  return a & b;
 8005c24:	687a      	ldr	r2, [r7, #4]
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	4013      	ands	r3, r2
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	370c      	adds	r7, #12
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr

08005c36 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>:
tIntegerType ShiftRight(tIntegerType a, int offset) {
 8005c36:	b480      	push	{r7}
 8005c38:	b083      	sub	sp, #12
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	6078      	str	r0, [r7, #4]
 8005c3e:	6039      	str	r1, [r7, #0]
  return a >> offset;
 8005c40:	687a      	ldr	r2, [r7, #4]
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	fa42 f303 	asr.w	r3, r2, r3
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	370c      	adds	r7, #12
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr

08005c54 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>:
tIntegerType MaskIfLessThan(tIntegerType a, tIntegerType b) {
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b082      	sub	sp, #8
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a < b);
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	429a      	cmp	r2, r3
 8005c64:	bfb4      	ite	lt
 8005c66:	2301      	movlt	r3, #1
 8005c68:	2300      	movge	r3, #0
 8005c6a:	b2db      	uxtb	r3, r3
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f000 f827 	bl	8005cc0 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8005c72:	4603      	mov	r3, r0
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3708      	adds	r7, #8
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}

08005c7c <_ZN8gemmlowp3AddIlEET_S1_S1_>:
tIntegerType Add(tIntegerType a, tIntegerType b) {
 8005c7c:	b480      	push	{r7}
 8005c7e:	b083      	sub	sp, #12
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	6039      	str	r1, [r7, #0]
  return a + b;
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	4413      	add	r3, r2
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	370c      	adds	r7, #12
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr

08005c98 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>:
tIntegerType MaskIfGreaterThan(tIntegerType a, tIntegerType b) {
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b082      	sub	sp, #8
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a > b);
 8005ca2:	687a      	ldr	r2, [r7, #4]
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	bfcc      	ite	gt
 8005caa:	2301      	movgt	r3, #1
 8005cac:	2300      	movle	r3, #0
 8005cae:	b2db      	uxtb	r3, r3
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f000 f805 	bl	8005cc0 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8005cb6:	4603      	mov	r3, r0
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3708      	adds	r7, #8
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>:
tIntegerType MaskIfNonZero(tIntegerType a) {
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b082      	sub	sp, #8
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  return a ? BitNot(zero) : zero;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d004      	beq.n	8005cd8 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x18>
 8005cce:	2000      	movs	r0, #0
 8005cd0:	f000 f807 	bl	8005ce2 <_ZN8gemmlowp6BitNotIlEET_S1_>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	e000      	b.n	8005cda <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x1a>
 8005cd8:	2300      	movs	r3, #0
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3708      	adds	r7, #8
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}

08005ce2 <_ZN8gemmlowp6BitNotIlEET_S1_>:
tIntegerType BitNot(tIntegerType a) {
 8005ce2:	b480      	push	{r7}
 8005ce4:	b083      	sub	sp, #12
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	6078      	str	r0, [r7, #4]
  return ~a;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	43db      	mvns	r3, r3
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	370c      	adds	r7, #12
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr

08005cfa <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa>:
    result[v] = std::signbit(vector[v]);
  }
}

void UnpackDenseInt4IntoInt8(const int8_t* src_buffer, int num_elements,
                             int8_t* dst_buffer) {
 8005cfa:	b480      	push	{r7}
 8005cfc:	b087      	sub	sp, #28
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	60f8      	str	r0, [r7, #12]
 8005d02:	60b9      	str	r1, [r7, #8]
 8005d04:	607a      	str	r2, [r7, #4]
  for (int i = 0; i < num_elements / 2; i++) {
 8005d06:	2300      	movs	r3, #0
 8005d08:	617b      	str	r3, [r7, #20]
 8005d0a:	e01f      	b.n	8005d4c <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa+0x52>
    int8_t byte = src_buffer[i];
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	4413      	add	r3, r2
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	74fb      	strb	r3, [r7, #19]
    // Shift left first so that sign is properly extended when shifted right
    int8_t lower = static_cast<int8_t>(byte << 4) >> 4;
 8005d16:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005d1a:	011b      	lsls	r3, r3, #4
 8005d1c:	b25b      	sxtb	r3, r3
 8005d1e:	111b      	asrs	r3, r3, #4
 8005d20:	74bb      	strb	r3, [r7, #18]
    int8_t higher = byte >> 4;
 8005d22:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005d26:	111b      	asrs	r3, r3, #4
 8005d28:	747b      	strb	r3, [r7, #17]
    dst_buffer[2 * i] = lower;
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	005b      	lsls	r3, r3, #1
 8005d2e:	461a      	mov	r2, r3
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4413      	add	r3, r2
 8005d34:	7cba      	ldrb	r2, [r7, #18]
 8005d36:	701a      	strb	r2, [r3, #0]
    dst_buffer[2 * i + 1] = higher;
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	005b      	lsls	r3, r3, #1
 8005d3c:	3301      	adds	r3, #1
 8005d3e:	687a      	ldr	r2, [r7, #4]
 8005d40:	4413      	add	r3, r2
 8005d42:	7c7a      	ldrb	r2, [r7, #17]
 8005d44:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < num_elements / 2; i++) {
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	3301      	adds	r3, #1
 8005d4a:	617b      	str	r3, [r7, #20]
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	da00      	bge.n	8005d54 <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa+0x5a>
 8005d52:	3301      	adds	r3, #1
 8005d54:	105b      	asrs	r3, r3, #1
 8005d56:	461a      	mov	r2, r3
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	dbd6      	blt.n	8005d0c <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa+0x12>
  }

  // If the buffer size is odd, extract the final lower nibble.
  if (num_elements % 2 != 0) {
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	f003 0301 	and.w	r3, r3, #1
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d012      	beq.n	8005d8e <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa+0x94>
    dst_buffer[num_elements - 1] =
        static_cast<int8_t>(src_buffer[num_elements / 2] << 4) >> 4;
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	da00      	bge.n	8005d70 <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa+0x76>
 8005d6e:	3301      	adds	r3, #1
 8005d70:	105b      	asrs	r3, r3, #1
 8005d72:	461a      	mov	r2, r3
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	4413      	add	r3, r2
 8005d78:	f993 3000 	ldrsb.w	r3, [r3]
 8005d7c:	011b      	lsls	r3, r3, #4
 8005d7e:	b25a      	sxtb	r2, r3
    dst_buffer[num_elements - 1] =
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	3b01      	subs	r3, #1
 8005d84:	6879      	ldr	r1, [r7, #4]
 8005d86:	440b      	add	r3, r1
        static_cast<int8_t>(src_buffer[num_elements / 2] << 4) >> 4;
 8005d88:	1112      	asrs	r2, r2, #4
 8005d8a:	b252      	sxtb	r2, r2
    dst_buffer[num_elements - 1] =
 8005d8c:	701a      	strb	r2, [r3, #0]
  }
}
 8005d8e:	bf00      	nop
 8005d90:	371c      	adds	r7, #28
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr

08005d9a <_ZSt3maxIfERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8005d9a:	b480      	push	{r7}
 8005d9c:	b083      	sub	sp, #12
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
 8005da2:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	ed93 7a00 	vldr	s14, [r3]
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	edd3 7a00 	vldr	s15, [r3]
 8005db0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005db4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005db8:	d501      	bpl.n	8005dbe <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	e000      	b.n	8005dc0 <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 8005dbe:	687b      	ldr	r3, [r7, #4]
    }
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	370c      	adds	r7, #12
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr

08005dcc <_ZSt3minIfERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8005dcc:	b480      	push	{r7}
 8005dce:	b083      	sub	sp, #12
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	ed93 7a00 	vldr	s14, [r3]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	edd3 7a00 	vldr	s15, [r3]
 8005de2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dea:	d501      	bpl.n	8005df0 <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	e000      	b.n	8005df2 <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 8005df0:	687b      	ldr	r3, [r7, #4]
    }
 8005df2:	4618      	mov	r0, r3
 8005df4:	370c      	adds	r7, #12
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr

08005dfe <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 8005dfe:	b480      	push	{r7}
 8005e00:	b083      	sub	sp, #12
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	ed87 0a01 	vstr	s0, [r7, #4]
 8005e08:	edd7 7a01 	vldr	s15, [r7, #4]
 8005e0c:	fef8 7a67 	vrinta.f32	s15, s15
 8005e10:	eeb0 0a67 	vmov.f32	s0, s15
 8005e14:	370c      	adds	r7, #12
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr

08005e1e <_ZNSt14numeric_limitsIiE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __INT_MAX__; }
 8005e1e:	b480      	push	{r7}
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8005e26:	4618      	mov	r0, r3
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <_ZN6tflite18QuantizeMultiplierEdPlPi>:
constexpr uint32_t kFractionRoundingMask = 0x003fffff;
constexpr uint32_t kFractionRoundingThreshold = 0x00200000;
}  // namespace

void QuantizeMultiplier(double double_multiplier, int32_t* quantized_multiplier,
                        int* shift) {
 8005e30:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005e34:	b088      	sub	sp, #32
 8005e36:	af00      	add	r7, sp, #0
 8005e38:	ed87 0b02 	vstr	d0, [r7, #8]
 8005e3c:	6078      	str	r0, [r7, #4]
 8005e3e:	6039      	str	r1, [r7, #0]
#if TFLITE_SINGLE_ROUNDING
  // Single-rounding MultiplyByQuantizedMultiplier only supports positive
  // multipliers.
  // TFLITE_DCHECK(double_multiplier >= 0);
#endif
  if (double_multiplier == 0.) {
 8005e40:	ed97 7b02 	vldr	d7, [r7, #8]
 8005e44:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e4c:	d106      	bne.n	8005e5c <_ZN6tflite18QuantizeMultiplierEdPlPi+0x2c>
    *quantized_multiplier = 0;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2200      	movs	r2, #0
 8005e52:	601a      	str	r2, [r3, #0]
    *shift = 0;
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	2200      	movs	r2, #0
 8005e58:	601a      	str	r2, [r3, #0]
    return;
 8005e5a:	e061      	b.n	8005f20 <_ZN6tflite18QuantizeMultiplierEdPlPi+0xf0>
  // example on microcontrollers) then use an alternative implementation
  // that only requires integer and bitwise operations. To enable this, you
  // need to set the define during the build process for your platform.
  int64_t q_fixed = IntegerFrExp(double_multiplier, shift);
#else   // TFLITE_EMULATE_FLOAT
  const double q = std::frexp(double_multiplier, shift);
 8005e5c:	6838      	ldr	r0, [r7, #0]
 8005e5e:	ed97 0b02 	vldr	d0, [r7, #8]
 8005e62:	f019 fc6d 	bl	801f740 <frexp>
 8005e66:	ed87 0b04 	vstr	d0, [r7, #16]
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1LL << 31)));
 8005e6a:	ed97 7b04 	vldr	d7, [r7, #16]
 8005e6e:	ed9f 6b2e 	vldr	d6, [pc, #184]	; 8005f28 <_ZN6tflite18QuantizeMultiplierEdPlPi+0xf8>
 8005e72:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005e76:	eeb0 0b47 	vmov.f64	d0, d7
 8005e7a:	f000 f938 	bl	80060ee <_ZN6tflite11TfLiteRoundIdEET_S1_>
 8005e7e:	ec53 2b10 	vmov	r2, r3, d0
 8005e82:	4610      	mov	r0, r2
 8005e84:	4619      	mov	r1, r3
 8005e86:	f7fa fcaf 	bl	80007e8 <__aeabi_d2lz>
 8005e8a:	4602      	mov	r2, r0
 8005e8c:	460b      	mov	r3, r1
 8005e8e:	e9c7 2306 	strd	r2, r3, [r7, #24]
#endif  // TFLITE_EMULATE_FLOAT
  TFLITE_CHECK(q_fixed <= (1LL << 31));
 8005e92:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e96:	4926      	ldr	r1, [pc, #152]	; (8005f30 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x100>)
 8005e98:	428a      	cmp	r2, r1
 8005e9a:	f173 0300 	sbcs.w	r3, r3, #0
 8005e9e:	db01      	blt.n	8005ea4 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x74>
 8005ea0:	f019 fdde 	bl	801fa60 <abort>
  if (q_fixed == (1LL << 31)) {
 8005ea4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ea8:	f102 4100 	add.w	r1, r2, #2147483648	; 0x80000000
 8005eac:	430b      	orrs	r3, r1
 8005eae:	d118      	bne.n	8005ee2 <_ZN6tflite18QuantizeMultiplierEdPlPi+0xb2>
    q_fixed /= 2;
 8005eb0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	da05      	bge.n	8005ec4 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x94>
 8005eb8:	f112 0801 	adds.w	r8, r2, #1
 8005ebc:	f143 0900 	adc.w	r9, r3, #0
 8005ec0:	4642      	mov	r2, r8
 8005ec2:	464b      	mov	r3, r9
 8005ec4:	f04f 0000 	mov.w	r0, #0
 8005ec8:	f04f 0100 	mov.w	r1, #0
 8005ecc:	0850      	lsrs	r0, r2, #1
 8005ece:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 8005ed2:	1059      	asrs	r1, r3, #1
 8005ed4:	e9c7 0106 	strd	r0, r1, [r7, #24]
    ++*shift;
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	1c5a      	adds	r2, r3, #1
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	601a      	str	r2, [r3, #0]
  }
  TFLITE_CHECK_LE(q_fixed, std::numeric_limits<int32_t>::max());
 8005ee2:	f7ff fcdb 	bl	800589c <_ZNSt14numeric_limitsIlE3maxEv>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	17da      	asrs	r2, r3, #31
 8005eea:	461c      	mov	r4, r3
 8005eec:	4615      	mov	r5, r2
 8005eee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ef2:	4294      	cmp	r4, r2
 8005ef4:	eb75 0303 	sbcs.w	r3, r5, r3
 8005ef8:	da01      	bge.n	8005efe <_ZN6tflite18QuantizeMultiplierEdPlPi+0xce>
 8005efa:	f019 fdb1 	bl	801fa60 <abort>
  // that we're effectively flushing tiny double_multiplier's to zero.
  // We could conceivably handle values in the range (roughly) [32, 63]
  // as 'denormals' i.e. (shift==0, q_fixed < 2^30). In that point of view
  // the present handling is just doing 'flush denormals to zero'. We could
  // reconsider and actually generate nonzero denormals if a need arises.
  if (*shift < -31) {
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f113 0f1f 	cmn.w	r3, #31
 8005f06:	da08      	bge.n	8005f1a <_ZN6tflite18QuantizeMultiplierEdPlPi+0xea>
    *shift = 0;
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	601a      	str	r2, [r3, #0]
    q_fixed = 0;
 8005f0e:	f04f 0200 	mov.w	r2, #0
 8005f12:	f04f 0300 	mov.w	r3, #0
 8005f16:	e9c7 2306 	strd	r2, r3, [r7, #24]
  if (*shift > 30) {
    *shift = 30;
    q_fixed = (1LL << 31) - 1;
  }
#endif
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
 8005f1a:	69ba      	ldr	r2, [r7, #24]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	601a      	str	r2, [r3, #0]
}
 8005f20:	3720      	adds	r7, #32
 8005f22:	46bd      	mov	sp, r7
 8005f24:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005f28:	00000000 	.word	0x00000000
 8005f2c:	41e00000 	.word	0x41e00000
 8005f30:	80000001 	.word	0x80000001

08005f34 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>:

void QuantizeMultiplierGreaterThanOne(double double_multiplier,
                                      int32_t* quantized_multiplier,
                                      int* left_shift) {
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b084      	sub	sp, #16
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	ed87 0b02 	vstr	d0, [r7, #8]
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	6039      	str	r1, [r7, #0]
  TFLITE_CHECK_GT(double_multiplier, 1.);
 8005f42:	ed97 7b02 	vldr	d7, [r7, #8]
 8005f46:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005f4a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f52:	dc01      	bgt.n	8005f58 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x24>
 8005f54:	f019 fd84 	bl	801fa60 <abort>
  QuantizeMultiplier(double_multiplier, quantized_multiplier, left_shift);
 8005f58:	6839      	ldr	r1, [r7, #0]
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	ed97 0b02 	vldr	d0, [r7, #8]
 8005f60:	f7ff ff66 	bl	8005e30 <_ZN6tflite18QuantizeMultiplierEdPlPi>
  TFLITE_CHECK_GE(*left_shift, 0);
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	da01      	bge.n	8005f70 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x3c>
 8005f6c:	f019 fd78 	bl	801fa60 <abort>
}
 8005f70:	bf00      	nop
 8005f72:	3710      	adds	r7, #16
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}

08005f78 <_ZSt3minIdERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8005f78:	b480      	push	{r7}
 8005f7a:	b083      	sub	sp, #12
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	ed93 6b00 	vldr	d6, [r3]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	ed93 7b00 	vldr	d7, [r3]
 8005f8e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005f92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f96:	d501      	bpl.n	8005f9c <_ZSt3minIdERKT_S2_S2_+0x24>
	return __b;
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	e000      	b.n	8005f9e <_ZSt3minIdERKT_S2_S2_+0x26>
      return __a;
 8005f9c:	687b      	ldr	r3, [r7, #4]
    }
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	370c      	adds	r7, #12
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr
 8005faa:	0000      	movs	r0, r0
 8005fac:	0000      	movs	r0, r0
	...

08005fb0 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>:
  }
}

void PreprocessSoftmaxScaling(double beta, double input_scale,
                              int input_integer_bits,
                              int32_t* quantized_multiplier, int* left_shift) {
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b08e      	sub	sp, #56	; 0x38
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	ed87 0b06 	vstr	d0, [r7, #24]
 8005fba:	ed87 1b04 	vstr	d1, [r7, #16]
 8005fbe:	60f8      	str	r0, [r7, #12]
 8005fc0:	60b9      	str	r1, [r7, #8]
 8005fc2:	607a      	str	r2, [r7, #4]
  // this generates a Q(input_integer_bits).(31-input_integer_bits)
  // representation.
#if TFLITE_SINGLE_ROUNDING
  const double max_real_multiplier = (1LL << 30) - 1.0;
#else
  const double max_real_multiplier = (1LL << 31) - 1.0;
 8005fc4:	a318      	add	r3, pc, #96	; (adr r3, 8006028 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x78>)
 8005fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fca:	e9c7 2308 	strd	r2, r3, [r7, #32]
      0) {
    input_beta_real_multiplier = max_real_multiplier;
  }
#else   // TFLITE_EMULATE_FLOAT
  const double input_beta_real_multiplier =
      std::min<double>(beta * input_scale * (1 << (31 - input_integer_bits)),
 8005fce:	ed97 6b06 	vldr	d6, [r7, #24]
 8005fd2:	ed97 7b04 	vldr	d7, [r7, #16]
 8005fd6:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005fda:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	fa22 f303 	lsr.w	r3, r2, r3
 8005fe4:	ee07 3a90 	vmov	s15, r3
 8005fe8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8005fec:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005ff0:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
 8005ff4:	f107 0220 	add.w	r2, r7, #32
 8005ff8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005ffc:	4611      	mov	r1, r2
 8005ffe:	4618      	mov	r0, r3
 8006000:	f7ff ffba 	bl	8005f78 <_ZSt3minIdERKT_S2_S2_>
 8006004:	4603      	mov	r3, r0
                       max_real_multiplier);
 8006006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800600a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
#endif  // TFLITE_EMULATE_FLOAT

  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
 800600e:	6879      	ldr	r1, [r7, #4]
 8006010:	68b8      	ldr	r0, [r7, #8]
 8006012:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 8006016:	f7ff ff8d 	bl	8005f34 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>
                                   quantized_multiplier, left_shift);
}
 800601a:	bf00      	nop
 800601c:	3738      	adds	r7, #56	; 0x38
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}
 8006022:	bf00      	nop
 8006024:	f3af 8000 	nop.w
 8006028:	ffc00000 	.word	0xffc00000
 800602c:	41dfffff 	.word	0x41dfffff

08006030 <_ZN6tflite20CalculateInputRadiusEiii>:
                                              reverse_scaling_divisor,
                                              reverse_scaling_left_shift);
}

int CalculateInputRadius(int input_integer_bits, int input_left_shift,
                         int total_signed_bits) {
 8006030:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006034:	ed2d 8b02 	vpush	{d8}
 8006038:	b087      	sub	sp, #28
 800603a:	af00      	add	r7, sp, #0
 800603c:	60f8      	str	r0, [r7, #12]
 800603e:	60b9      	str	r1, [r7, #8]
 8006040:	607a      	str	r2, [r7, #4]
  result <<= (total_signed_bits - input_integer_bits);
  result >>= input_left_shift;
  return result;
#else   // TFLITE_EMULATE_FLOAT
  const double max_input_rescaled =
      1.0 * ((1 << input_integer_bits) - 1) *
 8006042:	2201      	movs	r2, #1
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	fa02 f303 	lsl.w	r3, r2, r3
 800604a:	3b01      	subs	r3, #1
 800604c:	ee07 3a90 	vmov	s15, r3
 8006050:	eeb8 8be7 	vcvt.f64.s32	d8, s15
      (1LL << (total_signed_bits - input_integer_bits)) /
 8006054:	687a      	ldr	r2, [r7, #4]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	1ad1      	subs	r1, r2, r3
 800605a:	f04f 0201 	mov.w	r2, #1
 800605e:	f04f 0300 	mov.w	r3, #0
 8006062:	f1a1 0620 	sub.w	r6, r1, #32
 8006066:	f1c1 0020 	rsb	r0, r1, #32
 800606a:	fa03 f901 	lsl.w	r9, r3, r1
 800606e:	fa02 f606 	lsl.w	r6, r2, r6
 8006072:	ea49 0906 	orr.w	r9, r9, r6
 8006076:	fa22 f000 	lsr.w	r0, r2, r0
 800607a:	ea49 0900 	orr.w	r9, r9, r0
 800607e:	fa02 f801 	lsl.w	r8, r2, r1
      1.0 * ((1 << input_integer_bits) - 1) *
 8006082:	4640      	mov	r0, r8
 8006084:	4649      	mov	r1, r9
 8006086:	f7fa fb19 	bl	80006bc <__aeabi_l2d>
 800608a:	ec41 0b17 	vmov	d7, r0, r1
 800608e:	ee28 8b07 	vmul.f64	d8, d8, d7
      (1LL << input_left_shift);
 8006092:	f04f 0201 	mov.w	r2, #1
 8006096:	f04f 0300 	mov.w	r3, #0
 800609a:	68b9      	ldr	r1, [r7, #8]
 800609c:	f1a1 0620 	sub.w	r6, r1, #32
 80060a0:	f1c1 0020 	rsb	r0, r1, #32
 80060a4:	fa03 f501 	lsl.w	r5, r3, r1
 80060a8:	fa02 f606 	lsl.w	r6, r2, r6
 80060ac:	4335      	orrs	r5, r6
 80060ae:	fa22 f000 	lsr.w	r0, r2, r0
 80060b2:	4305      	orrs	r5, r0
 80060b4:	fa02 f401 	lsl.w	r4, r2, r1
      (1LL << (total_signed_bits - input_integer_bits)) /
 80060b8:	4620      	mov	r0, r4
 80060ba:	4629      	mov	r1, r5
 80060bc:	f7fa fafe 	bl	80006bc <__aeabi_l2d>
 80060c0:	ec41 0b16 	vmov	d6, r0, r1
  const double max_input_rescaled =
 80060c4:	ee88 7b06 	vdiv.f64	d7, d8, d6
 80060c8:	ed87 7b04 	vstr	d7, [r7, #16]
  // Tighten bound using floor.  Suppose that we could use the exact value.
  // After scaling the difference, the result would be at the maximum.  Thus we
  // must ensure that our value has lower magnitude.
  return static_cast<int>(std::floor(max_input_rescaled));
 80060cc:	ed97 0b04 	vldr	d0, [r7, #16]
 80060d0:	f019 fc0a 	bl	801f8e8 <floor>
 80060d4:	eeb0 7b40 	vmov.f64	d7, d0
 80060d8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80060dc:	ee17 3a90 	vmov	r3, s15
#endif  // TFLITE_EMULATE_FLOAT
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	371c      	adds	r7, #28
 80060e4:	46bd      	mov	sp, r7
 80060e6:	ecbd 8b02 	vpop	{d8}
 80060ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080060ee <_ZN6tflite11TfLiteRoundIdEET_S1_>:
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round)
 80060ee:	b580      	push	{r7, lr}
 80060f0:	b082      	sub	sp, #8
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	ed87 0b00 	vstr	d0, [r7]
 80060f8:	ed97 0b00 	vldr	d0, [r7]
 80060fc:	f019 fc6c 	bl	801f9d8 <round>
 8006100:	eeb0 7b40 	vmov.f64	d7, d0
 8006104:	eeb0 0b47 	vmov.f64	d0, d7
 8006108:	3708      	adds	r7, #8
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}

0800610e <_ZN6tflite11TfLiteRoundIfEET_S1_>:
 800610e:	b580      	push	{r7, lr}
 8006110:	b082      	sub	sp, #8
 8006112:	af00      	add	r7, sp, #0
 8006114:	ed87 0a01 	vstr	s0, [r7, #4]
 8006118:	ed97 0a01 	vldr	s0, [r7, #4]
 800611c:	f7ff fe6f 	bl	8005dfe <_ZSt5roundf>
 8006120:	eef0 7a40 	vmov.f32	s15, s0
 8006124:	eeb0 0a67 	vmov.f32	s0, s15
 8006128:	3708      	adds	r7, #8
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}

0800612e <_ZN6tflite12RuntimeShapeC1Ev>:
  RuntimeShape() : size_(0) {}
 800612e:	b480      	push	{r7}
 8006130:	b083      	sub	sp, #12
 8006132:	af00      	add	r7, sp, #0
 8006134:	6078      	str	r0, [r7, #4]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2200      	movs	r2, #0
 800613a:	601a      	str	r2, [r3, #0]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	4618      	mov	r0, r3
 8006140:	370c      	adds	r7, #12
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr

0800614a <_ZN6tflite12RuntimeShapeC1EiPKl>:
  RuntimeShape(int dimensions_count, const int32_t* dims_data)
 800614a:	b580      	push	{r7, lr}
 800614c:	b084      	sub	sp, #16
 800614e:	af00      	add	r7, sp, #0
 8006150:	60f8      	str	r0, [r7, #12]
 8006152:	60b9      	str	r1, [r7, #8]
 8006154:	607a      	str	r2, [r7, #4]
      : size_(dimensions_count) {
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	68ba      	ldr	r2, [r7, #8]
 800615a:	601a      	str	r2, [r3, #0]
    ReplaceWith(dimensions_count, dims_data);
 800615c:	687a      	ldr	r2, [r7, #4]
 800615e:	68b9      	ldr	r1, [r7, #8]
 8006160:	68f8      	ldr	r0, [r7, #12]
 8006162:	f000 f811 	bl	8006188 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>
  }
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	4618      	mov	r0, r3
 800616a:	3710      	adds	r7, #16
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}

08006170 <_ZN6tflite12RuntimeShape8DimsDataEv>:
  int32_t* DimsData() { return dims_; }
 8006170:	b480      	push	{r7}
 8006172:	b083      	sub	sp, #12
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	3304      	adds	r3, #4
 800617c:	4618      	mov	r0, r3
 800617e:	370c      	adds	r7, #12
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr

08006188 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>:
  void ReplaceWith(int dimensions_count, const int32_t* dims_data) {
 8006188:	b580      	push	{r7, lr}
 800618a:	b086      	sub	sp, #24
 800618c:	af00      	add	r7, sp, #0
 800618e:	60f8      	str	r0, [r7, #12]
 8006190:	60b9      	str	r1, [r7, #8]
 8006192:	607a      	str	r2, [r7, #4]
    TFLITE_DCHECK_LE(dimensions_count, kMaxSmallSize);
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	2b06      	cmp	r3, #6
 8006198:	dd01      	ble.n	800619e <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl+0x16>
 800619a:	f019 fc61 	bl	801fa60 <abort>
    size_ = dimensions_count;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	68ba      	ldr	r2, [r7, #8]
 80061a2:	601a      	str	r2, [r3, #0]
    int32_t* dst_dims = DimsData();
 80061a4:	68f8      	ldr	r0, [r7, #12]
 80061a6:	f7ff ffe3 	bl	8006170 <_ZN6tflite12RuntimeShape8DimsDataEv>
 80061aa:	6178      	str	r0, [r7, #20]
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	461a      	mov	r2, r3
 80061b2:	6879      	ldr	r1, [r7, #4]
 80061b4:	6978      	ldr	r0, [r7, #20]
 80061b6:	f01a fafa 	bl	80207ae <memcpy>
  }
 80061ba:	bf00      	nop
 80061bc:	3718      	adds	r7, #24
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}

080061c2 <_ZSt3maxIsERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 80061c2:	b480      	push	{r7}
 80061c4:	b083      	sub	sp, #12
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	6078      	str	r0, [r7, #4]
 80061ca:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f9b3 2000 	ldrsh.w	r2, [r3]
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80061d8:	429a      	cmp	r2, r3
 80061da:	da01      	bge.n	80061e0 <_ZSt3maxIsERKT_S2_S2_+0x1e>
	return __b;
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	e000      	b.n	80061e2 <_ZSt3maxIsERKT_S2_S2_+0x20>
      return __a;
 80061e0:	687b      	ldr	r3, [r7, #4]
    }
 80061e2:	4618      	mov	r0, r3
 80061e4:	370c      	adds	r7, #12
 80061e6:	46bd      	mov	sp, r7
 80061e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ec:	4770      	bx	lr

080061ee <_ZSt3maxIaERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 80061ee:	b480      	push	{r7}
 80061f0:	b083      	sub	sp, #12
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	6078      	str	r0, [r7, #4]
 80061f6:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f993 2000 	ldrsb.w	r2, [r3]
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	f993 3000 	ldrsb.w	r3, [r3]
 8006204:	429a      	cmp	r2, r3
 8006206:	da01      	bge.n	800620c <_ZSt3maxIaERKT_S2_S2_+0x1e>
	return __b;
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	e000      	b.n	800620e <_ZSt3maxIaERKT_S2_S2_+0x20>
      return __a;
 800620c:	687b      	ldr	r3, [r7, #4]
    }
 800620e:	4618      	mov	r0, r3
 8006210:	370c      	adds	r7, #12
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr

0800621a <_ZSt3absd>:
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
 800621a:	b480      	push	{r7}
 800621c:	b083      	sub	sp, #12
 800621e:	af00      	add	r7, sp, #0
 8006220:	ed87 0b00 	vstr	d0, [r7]
 8006224:	ed97 7b00 	vldr	d7, [r7]
 8006228:	eeb0 7bc7 	vabs.f64	d7, d7
 800622c:	eeb0 0b47 	vmov.f64	d0, d7
 8006230:	370c      	adds	r7, #12
 8006232:	46bd      	mov	sp, r7
 8006234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006238:	4770      	bx	lr

0800623a <_ZSt3expf>:
  { return __builtin_expf(__x); }
 800623a:	b580      	push	{r7, lr}
 800623c:	b082      	sub	sp, #8
 800623e:	af00      	add	r7, sp, #0
 8006240:	ed87 0a01 	vstr	s0, [r7, #4]
 8006244:	ed97 0a01 	vldr	s0, [r7, #4]
 8006248:	f019 fab2 	bl	801f7b0 <expf>
 800624c:	eef0 7a40 	vmov.f32	s15, s0
 8006250:	eeb0 0a67 	vmov.f32	s0, s15
 8006254:	3708      	adds	r7, #8
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}
	...

0800625c <_ZNSt14numeric_limitsIsE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SHRT_MAX__ - 1; }
 800625c:	b480      	push	{r7}
 800625e:	af00      	add	r7, sp, #0
 8006260:	4b02      	ldr	r3, [pc, #8]	; (800626c <_ZNSt14numeric_limitsIsE3minEv+0x10>)
 8006262:	4618      	mov	r0, r3
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr
 800626c:	ffff8000 	.word	0xffff8000

08006270 <_ZNSt14numeric_limitsIsE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SHRT_MAX__; }
 8006270:	b480      	push	{r7}
 8006272:	af00      	add	r7, sp, #0
 8006274:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8006278:	4618      	mov	r0, r3
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr

08006282 <_ZSt3minIlERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8006282:	b480      	push	{r7}
 8006284:	b083      	sub	sp, #12
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]
 800628a:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	681a      	ldr	r2, [r3, #0]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	429a      	cmp	r2, r3
 8006296:	da01      	bge.n	800629c <_ZSt3minIlERKT_S2_S2_+0x1a>
	return __b;
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	e000      	b.n	800629e <_ZSt3minIlERKT_S2_S2_+0x1c>
      return __a;
 800629c:	687b      	ldr	r3, [r7, #4]
    }
 800629e:	4618      	mov	r0, r3
 80062a0:	370c      	adds	r7, #12
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr

080062aa <_ZSt3maxIlERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 80062aa:	b480      	push	{r7}
 80062ac:	b083      	sub	sp, #12
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	6078      	str	r0, [r7, #4]
 80062b2:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	429a      	cmp	r2, r3
 80062be:	da01      	bge.n	80062c4 <_ZSt3maxIlERKT_S2_S2_+0x1a>
	return __b;
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	e000      	b.n	80062c6 <_ZSt3maxIlERKT_S2_S2_+0x1c>
      return __a;
 80062c4:	687b      	ldr	r3, [r7, #4]
    }
 80062c6:	4618      	mov	r0, r3
 80062c8:	370c      	adds	r7, #12
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr

080062d2 <_ZN6tflite17CountLeadingZerosImEEiT_>:
}
#endif  // USE_NEON
#endif  // TFLITE_SINGLE_ROUNDING

template <typename T>
int CountLeadingZeros(T integer_input) {
 80062d2:	b480      	push	{r7}
 80062d4:	b083      	sub	sp, #12
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	6078      	str	r0, [r7, #4]
  static_assert(std::is_unsigned<T>::value,
                "Only unsigned integer types handled.");
  if (integer_input == 0) {
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d101      	bne.n	80062e4 <_ZN6tflite17CountLeadingZerosImEEiT_+0x12>
    return std::numeric_limits<T>::digits;
 80062e0:	2320      	movs	r3, #32
 80062e2:	e003      	b.n	80062ec <_ZN6tflite17CountLeadingZerosImEEiT_+0x1a>
  }
#if defined(__GNUC__)
  if (std::is_same<T, uint32_t>::value) {
    return __builtin_clz(integer_input);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	fab3 f383 	clz	r3, r3
 80062ea:	bf00      	nop
  while (integer_input < one_in_leading_positive) {
    integer_input <<= 1;
    ++leading_zeros;
  }
  return leading_zeros;
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	370c      	adds	r7, #12
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr

080062f8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>:
                 min_bound),
        max_bound)));
  }

  RawType raw() const { return i_; }
  RawType& raw() { return i_; }
 80062f8:	b480      	push	{r7}
 80062fa:	b083      	sub	sp, #12
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	4618      	mov	r0, r3
 8006304:	370c      	adds	r7, #12
 8006306:	46bd      	mov	sp, r7
 8006308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630c:	4770      	bx	lr

0800630e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 800630e:	b590      	push	{r4, r7, lr}
 8006310:	b085      	sub	sp, #20
 8006312:	af00      	add	r7, sp, #0
 8006314:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 8006316:	f107 030c 	add.w	r3, r7, #12
 800631a:	4618      	mov	r0, r3
 800631c:	f7ff ffec 	bl	80062f8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8006320:	4604      	mov	r4, r0
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f7ff fc6e 	bl	8005c04 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8006328:	4603      	mov	r3, r0
 800632a:	6023      	str	r3, [r4, #0]
    return retval;
 800632c:	68fb      	ldr	r3, [r7, #12]
  }
 800632e:	4618      	mov	r0, r3
 8006330:	3714      	adds	r7, #20
 8006332:	46bd      	mov	sp, r7
 8006334:	bd90      	pop	{r4, r7, pc}

08006336 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>:
// fixed-point value, regardless of the actual Scalar type. This allows
// writing generic code that applies just as well to the 32-bit and 16-bit
// cases. In the 16-bit case, the raw integer value is internally
// rounding-shifted by 16 bits to the right.
template <typename FixedPointType>
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
 8006336:	b580      	push	{r7, lr}
 8006338:	b082      	sub	sp, #8
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
    std::int32_t int32_value) {
  typedef typename FixedPointType::ScalarRawType ScalarRawType;
  static constexpr int ScalarTypeBits = 8 * sizeof(ScalarRawType);
  return static_cast<ScalarRawType>(
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
 800633e:	2100      	movs	r1, #0
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f7ff fbeb 	bl	8005b1c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8006346:	4603      	mov	r3, r0
}
 8006348:	4618      	mov	r0, r3
 800634a:	3708      	adds	r7, #8
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}

08006350 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 8006350:	b580      	push	{r7, lr}
 8006352:	b082      	sub	sp, #8
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f000 f813 	bl	8006384 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin1ElLin1EE4evalEl>
 800635e:	4603      	mov	r3, r0
}
 8006360:	4618      	mov	r0, r3
 8006362:	3708      	adds	r7, #8
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}

08006368 <_ZN8gemmlowp3SubIlEET_S1_S1_>:
tIntegerType Sub(tIntegerType a, tIntegerType b) {
 8006368:	b480      	push	{r7}
 800636a:	b083      	sub	sp, #12
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	6039      	str	r1, [r7, #0]
  return a - b;
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	1ad3      	subs	r3, r2, r3
}
 8006378:	4618      	mov	r0, r3
 800637a:	370c      	adds	r7, #12
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin1ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 8006384:	b580      	push	{r7, lr}
 8006386:	b082      	sub	sp, #8
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 800638c:	2101      	movs	r1, #1
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f7ff fbc4 	bl	8005b1c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8006394:	4603      	mov	r3, r0
  }
 8006396:	4618      	mov	r0, r3
 8006398:	3708      	adds	r7, #8
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}

0800639e <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>:
tIntegerType ShiftLeft(tIntegerType a, int offset) {
 800639e:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 80063a2:	b089      	sub	sp, #36	; 0x24
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	6039      	str	r1, [r7, #0]
  const std::int64_t wide_a = static_cast<std::int64_t>(a);
 80063aa:	6879      	ldr	r1, [r7, #4]
 80063ac:	17c8      	asrs	r0, r1, #31
 80063ae:	4688      	mov	r8, r1
 80063b0:	4681      	mov	r9, r0
 80063b2:	e9c7 8906 	strd	r8, r9, [r7, #24]
  const std::int64_t wide_shifted = wide_a * (1 << offset);
 80063b6:	2001      	movs	r0, #1
 80063b8:	6839      	ldr	r1, [r7, #0]
 80063ba:	fa00 f101 	lsl.w	r1, r0, r1
 80063be:	17c8      	asrs	r0, r1, #31
 80063c0:	460c      	mov	r4, r1
 80063c2:	4605      	mov	r5, r0
 80063c4:	69f9      	ldr	r1, [r7, #28]
 80063c6:	fb04 f001 	mul.w	r0, r4, r1
 80063ca:	69b9      	ldr	r1, [r7, #24]
 80063cc:	fb05 f101 	mul.w	r1, r5, r1
 80063d0:	4401      	add	r1, r0
 80063d2:	69b8      	ldr	r0, [r7, #24]
 80063d4:	fba0 2304 	umull	r2, r3, r0, r4
 80063d8:	4419      	add	r1, r3
 80063da:	460b      	mov	r3, r1
 80063dc:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80063e0:	e9c7 2304 	strd	r2, r3, [r7, #16]
  const auto min = std::numeric_limits<tIntegerType>::min();
 80063e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80063e8:	60fb      	str	r3, [r7, #12]
  const auto max = std::numeric_limits<tIntegerType>::max();
 80063ea:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80063ee:	60bb      	str	r3, [r7, #8]
             ? min
 80063f0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80063f4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80063f8:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 80063fc:	db0b      	blt.n	8006416 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x78>
             : wide_shifted > max ? max
 80063fe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006402:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8006406:	f173 0300 	sbcs.w	r3, r3, #0
 800640a:	da01      	bge.n	8006410 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x72>
 800640c:	693b      	ldr	r3, [r7, #16]
                                  : static_cast<tIntegerType>(wide_shifted);
 800640e:	e004      	b.n	800641a <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x7c>
             : wide_shifted > max ? max
 8006410:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
                                  : static_cast<tIntegerType>(wide_shifted);
 8006414:	e001      	b.n	800641a <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x7c>
             ? min
 8006416:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800641a:	4618      	mov	r0, r3
 800641c:	3724      	adds	r7, #36	; 0x24
 800641e:	46bd      	mov	sp, r7
 8006420:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8006424:	4770      	bx	lr

08006426 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>:
tIntegerType SelectUsingMask(tIntegerType if_mask, tIntegerType then_val,
 8006426:	b590      	push	{r4, r7, lr}
 8006428:	b085      	sub	sp, #20
 800642a:	af00      	add	r7, sp, #0
 800642c:	60f8      	str	r0, [r7, #12]
 800642e:	60b9      	str	r1, [r7, #8]
 8006430:	607a      	str	r2, [r7, #4]
  return BitXor(BitAnd(if_mask, then_val), BitAnd(BitNot(if_mask), else_val));
 8006432:	68b9      	ldr	r1, [r7, #8]
 8006434:	68f8      	ldr	r0, [r7, #12]
 8006436:	f7ff fbf0 	bl	8005c1a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800643a:	4604      	mov	r4, r0
 800643c:	68f8      	ldr	r0, [r7, #12]
 800643e:	f7ff fc50 	bl	8005ce2 <_ZN8gemmlowp6BitNotIlEET_S1_>
 8006442:	4603      	mov	r3, r0
 8006444:	6879      	ldr	r1, [r7, #4]
 8006446:	4618      	mov	r0, r3
 8006448:	f7ff fbe7 	bl	8005c1a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800644c:	4603      	mov	r3, r0
 800644e:	4619      	mov	r1, r3
 8006450:	4620      	mov	r0, r4
 8006452:	f000 f805 	bl	8006460 <_ZN8gemmlowp6BitXorIlEET_S1_S1_>
 8006456:	4603      	mov	r3, r0
}
 8006458:	4618      	mov	r0, r3
 800645a:	3714      	adds	r7, #20
 800645c:	46bd      	mov	sp, r7
 800645e:	bd90      	pop	{r4, r7, pc}

08006460 <_ZN8gemmlowp6BitXorIlEET_S1_S1_>:
tIntegerType BitXor(tIntegerType a, tIntegerType b) {
 8006460:	b480      	push	{r7}
 8006462:	b083      	sub	sp, #12
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	6039      	str	r1, [r7, #0]
  return a ^ b;
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	4053      	eors	r3, r2
}
 8006470:	4618      	mov	r0, r3
 8006472:	370c      	adds	r7, #12
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr

0800647c <_ZNSt14numeric_limitsIaE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SCHAR_MAX__ - 1; }
 800647c:	b480      	push	{r7}
 800647e:	af00      	add	r7, sp, #0
 8006480:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8006484:	4618      	mov	r0, r3
 8006486:	46bd      	mov	sp, r7
 8006488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648c:	4770      	bx	lr

0800648e <_ZNSt14numeric_limitsIaE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__; }
 800648e:	b480      	push	{r7}
 8006490:	af00      	add	r7, sp, #0
 8006492:	237f      	movs	r3, #127	; 0x7f
 8006494:	4618      	mov	r0, r3
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr

0800649e <_ZNSt14numeric_limitsIhE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return 0; }
 800649e:	b480      	push	{r7}
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	2300      	movs	r3, #0
 80064a4:	4618      	mov	r0, r3
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr

080064ae <_ZNSt14numeric_limitsIhE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__ * 2U + 1; }
 80064ae:	b480      	push	{r7}
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	23ff      	movs	r3, #255	; 0xff
 80064b4:	4618      	mov	r0, r3
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr
	...

080064c0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i>:
    TfLiteContext* context, const TfLiteTensor* input,
    const TfLiteTensor* filter, const TfLiteTensor* bias, TfLiteTensor* output,
    const TfLiteFusedActivation& activation, int32_t* multiplier, int* shift,
    int32_t* output_activation_min, int32_t* output_activation_max,
    int32_t* per_channel_multiplier, int32_t* per_channel_shift,
    int num_channels) {
 80064c0:	b590      	push	{r4, r7, lr}
 80064c2:	b09b      	sub	sp, #108	; 0x6c
 80064c4:	af04      	add	r7, sp, #16
 80064c6:	60f8      	str	r0, [r7, #12]
 80064c8:	60b9      	str	r1, [r7, #8]
 80064ca:	607a      	str	r2, [r7, #4]
 80064cc:	603b      	str	r3, [r7, #0]
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	781b      	ldrb	r3, [r3, #0]
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d012      	beq.n	80064fc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x3c>
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	695c      	ldr	r4, [r3, #20]
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	781b      	ldrb	r3, [r3, #0]
 80064de:	461a      	mov	r2, r3
 80064e0:	2301      	movs	r3, #1
 80064e2:	9303      	str	r3, [sp, #12]
 80064e4:	9202      	str	r2, [sp, #8]
 80064e6:	4b91      	ldr	r3, [pc, #580]	; (800672c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x26c>)
 80064e8:	9301      	str	r3, [sp, #4]
 80064ea:	4b91      	ldr	r3, [pc, #580]	; (8006730 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x270>)
 80064ec:	9300      	str	r3, [sp, #0]
 80064ee:	23de      	movs	r3, #222	; 0xde
 80064f0:	4a90      	ldr	r2, [pc, #576]	; (8006734 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x274>)
 80064f2:	4991      	ldr	r1, [pc, #580]	; (8006738 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x278>)
 80064f4:	68f8      	ldr	r0, [r7, #12]
 80064f6:	47a0      	blx	r4
 80064f8:	2301      	movs	r3, #1
 80064fa:	e15f      	b.n	80067bc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2fc>
                    kTfLiteAffineQuantization);
  TF_LITE_ENSURE_EQ(context, filter->quantization.type,
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	781b      	ldrb	r3, [r3, #0]
 8006500:	2b01      	cmp	r3, #1
 8006502:	d012      	beq.n	800652a <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x6a>
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	695c      	ldr	r4, [r3, #20]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	461a      	mov	r2, r3
 800650e:	2301      	movs	r3, #1
 8006510:	9303      	str	r3, [sp, #12]
 8006512:	9202      	str	r2, [sp, #8]
 8006514:	4b85      	ldr	r3, [pc, #532]	; (800672c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x26c>)
 8006516:	9301      	str	r3, [sp, #4]
 8006518:	4b88      	ldr	r3, [pc, #544]	; (800673c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x27c>)
 800651a:	9300      	str	r3, [sp, #0]
 800651c:	23e0      	movs	r3, #224	; 0xe0
 800651e:	4a85      	ldr	r2, [pc, #532]	; (8006734 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x274>)
 8006520:	4985      	ldr	r1, [pc, #532]	; (8006738 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x278>)
 8006522:	68f8      	ldr	r0, [r7, #12]
 8006524:	47a0      	blx	r4
 8006526:	2301      	movs	r3, #1
 8006528:	e148      	b.n	80067bc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2fc>
  // quantization is properly populated.
  // TF_LITE_ENSURE_EQ(context, bias->quantization.type,
  // kTfLiteAffineQuantization);

  // Check data type.
  const auto* affine_quantization =
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	653b      	str	r3, [r7, #80]	; 0x50
      reinterpret_cast<TfLiteAffineQuantization*>(filter->quantization.params);
  TF_LITE_ENSURE(context, affine_quantization);
 8006530:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006532:	2b00      	cmp	r3, #0
 8006534:	d10a      	bne.n	800654c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x8c>
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	695c      	ldr	r4, [r3, #20]
 800653a:	4b81      	ldr	r3, [pc, #516]	; (8006740 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x280>)
 800653c:	9300      	str	r3, [sp, #0]
 800653e:	23eb      	movs	r3, #235	; 0xeb
 8006540:	4a7c      	ldr	r2, [pc, #496]	; (8006734 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x274>)
 8006542:	4980      	ldr	r1, [pc, #512]	; (8006744 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x284>)
 8006544:	68f8      	ldr	r0, [r7, #12]
 8006546:	47a0      	blx	r4
 8006548:	2301      	movs	r3, #1
 800654a:	e137      	b.n	80067bc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2fc>
  TF_LITE_ENSURE(context, affine_quantization->scale);
 800654c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d10a      	bne.n	800656a <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0xaa>
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	695c      	ldr	r4, [r3, #20]
 8006558:	4b7b      	ldr	r3, [pc, #492]	; (8006748 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x288>)
 800655a:	9300      	str	r3, [sp, #0]
 800655c:	23ec      	movs	r3, #236	; 0xec
 800655e:	4a75      	ldr	r2, [pc, #468]	; (8006734 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x274>)
 8006560:	4978      	ldr	r1, [pc, #480]	; (8006744 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x284>)
 8006562:	68f8      	ldr	r0, [r7, #12]
 8006564:	47a0      	blx	r4
 8006566:	2301      	movs	r3, #1
 8006568:	e128      	b.n	80067bc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2fc>
  const bool is_per_channel = affine_quantization->scale->size > 1;
 800656a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	2b01      	cmp	r3, #1
 8006572:	bfcc      	ite	gt
 8006574:	2301      	movgt	r3, #1
 8006576:	2300      	movle	r3, #0
 8006578:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  if (is_per_channel) {
 800657c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006580:	2b00      	cmp	r3, #0
 8006582:	d063      	beq.n	800664c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x18c>
    //  Currently only Int8/Int16 is supported for per channel quantization.
    TF_LITE_ENSURE(context,
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	7f1b      	ldrb	r3, [r3, #28]
 8006588:	2b09      	cmp	r3, #9
 800658a:	d00e      	beq.n	80065aa <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0xea>
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	7f1b      	ldrb	r3, [r3, #28]
 8006590:	2b07      	cmp	r3, #7
 8006592:	d00a      	beq.n	80065aa <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0xea>
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	695c      	ldr	r4, [r3, #20]
 8006598:	4b6c      	ldr	r3, [pc, #432]	; (800674c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x28c>)
 800659a:	9300      	str	r3, [sp, #0]
 800659c:	23f0      	movs	r3, #240	; 0xf0
 800659e:	4a65      	ldr	r2, [pc, #404]	; (8006734 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x274>)
 80065a0:	4968      	ldr	r1, [pc, #416]	; (8006744 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x284>)
 80065a2:	68f8      	ldr	r0, [r7, #12]
 80065a4:	47a0      	blx	r4
 80065a6:	2301      	movs	r3, #1
 80065a8:	e108      	b.n	80067bc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2fc>
                   input->type == kTfLiteInt8 || input->type == kTfLiteInt16);
    TF_LITE_ENSURE(context,
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	7f1b      	ldrb	r3, [r3, #28]
 80065ae:	2b09      	cmp	r3, #9
 80065b0:	d00e      	beq.n	80065d0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x110>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	7f1b      	ldrb	r3, [r3, #28]
 80065b6:	2b12      	cmp	r3, #18
 80065b8:	d00a      	beq.n	80065d0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x110>
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	695c      	ldr	r4, [r3, #20]
 80065be:	4b64      	ldr	r3, [pc, #400]	; (8006750 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x290>)
 80065c0:	9300      	str	r3, [sp, #0]
 80065c2:	23f2      	movs	r3, #242	; 0xf2
 80065c4:	4a5b      	ldr	r2, [pc, #364]	; (8006734 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x274>)
 80065c6:	495f      	ldr	r1, [pc, #380]	; (8006744 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x284>)
 80065c8:	68f8      	ldr	r0, [r7, #12]
 80065ca:	47a0      	blx	r4
 80065cc:	2301      	movs	r3, #1
 80065ce:	e0f5      	b.n	80067bc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2fc>
                   filter->type == kTfLiteInt8 || filter->type == kTfLiteInt4);
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size, num_channels);
 80065d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80065da:	429a      	cmp	r2, r3
 80065dc:	d013      	beq.n	8006606 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x146>
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	695c      	ldr	r4, [r3, #20]
 80065e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80065ec:	9203      	str	r2, [sp, #12]
 80065ee:	9302      	str	r3, [sp, #8]
 80065f0:	4b58      	ldr	r3, [pc, #352]	; (8006754 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x294>)
 80065f2:	9301      	str	r3, [sp, #4]
 80065f4:	4b58      	ldr	r3, [pc, #352]	; (8006758 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x298>)
 80065f6:	9300      	str	r3, [sp, #0]
 80065f8:	23f4      	movs	r3, #244	; 0xf4
 80065fa:	4a4e      	ldr	r2, [pc, #312]	; (8006734 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x274>)
 80065fc:	494e      	ldr	r1, [pc, #312]	; (8006738 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x278>)
 80065fe:	68f8      	ldr	r0, [r7, #12]
 8006600:	47a0      	blx	r4
 8006602:	2301      	movs	r3, #1
 8006604:	e0da      	b.n	80067bc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2fc>
    TF_LITE_ENSURE_EQ(
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	695a      	ldr	r2, [r3, #20]
 800660a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	009b      	lsls	r3, r3, #2
 8006610:	4413      	add	r3, r2
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8006618:	429a      	cmp	r2, r3
 800661a:	d017      	beq.n	800664c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x18c>
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	695c      	ldr	r4, [r3, #20]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	695a      	ldr	r2, [r3, #20]
 8006624:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	009b      	lsls	r3, r3, #2
 800662a:	4413      	add	r3, r2
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	9303      	str	r3, [sp, #12]
 8006630:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006634:	9302      	str	r3, [sp, #8]
 8006636:	4b49      	ldr	r3, [pc, #292]	; (800675c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x29c>)
 8006638:	9301      	str	r3, [sp, #4]
 800663a:	4b46      	ldr	r3, [pc, #280]	; (8006754 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x294>)
 800663c:	9300      	str	r3, [sp, #0]
 800663e:	23f5      	movs	r3, #245	; 0xf5
 8006640:	4a3c      	ldr	r2, [pc, #240]	; (8006734 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x274>)
 8006642:	493d      	ldr	r1, [pc, #244]	; (8006738 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x278>)
 8006644:	68f8      	ldr	r0, [r7, #12]
 8006646:	47a0      	blx	r4
 8006648:	2301      	movs	r3, #1
 800664a:	e0b7      	b.n	80067bc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2fc>
        context, num_channels,
        filter->dims->data[affine_quantization->quantized_dimension]);
  }

  // Populate multiplier and shift using affine quantization.
  const float input_scale = input->params.scale;
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	64bb      	str	r3, [r7, #72]	; 0x48
  const float output_scale = output->params.scale;
 8006652:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	647b      	str	r3, [r7, #68]	; 0x44
  const float* filter_scales = affine_quantization->scale->data;
 8006658:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	3304      	adds	r3, #4
 800665e:	643b      	str	r3, [r7, #64]	; 0x40
  for (int i = 0; i < num_channels; ++i) {
 8006660:	2300      	movs	r3, #0
 8006662:	657b      	str	r3, [r7, #84]	; 0x54
 8006664:	e03d      	b.n	80066e2 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x222>
    // If per-tensor quantization parameter is specified, broadcast it along the
    // quantization dimension (channels_out).
    const float scale = is_per_channel ? filter_scales[i] : filter_scales[0];
 8006666:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800666a:	2b00      	cmp	r3, #0
 800666c:	d005      	beq.n	800667a <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x1ba>
 800666e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006670:	009b      	lsls	r3, r3, #2
 8006672:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006674:	4413      	add	r3, r2
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	e001      	b.n	800667e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x1be>
 800667a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	63bb      	str	r3, [r7, #56]	; 0x38
    const double filter_scale = static_cast<double>(scale);
 8006680:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8006684:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006688:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
    const double effective_output_scale = static_cast<double>(input_scale) *
 800668c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8006690:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8006694:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8006698:	ee26 5b07 	vmul.f64	d5, d6, d7
                                          filter_scale /
                                          static_cast<double>(output_scale);
 800669c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80066a0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
    const double effective_output_scale = static_cast<double>(input_scale) *
 80066a4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80066a8:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
    int32_t significand;
    int channel_shift;
    QuantizeMultiplier(effective_output_scale, &significand, &channel_shift);
 80066ac:	f107 0220 	add.w	r2, r7, #32
 80066b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066b4:	4611      	mov	r1, r2
 80066b6:	4618      	mov	r0, r3
 80066b8:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 80066bc:	f7ff fbb8 	bl	8005e30 <_ZN6tflite18QuantizeMultiplierEdPlPi>
    per_channel_multiplier[i] = significand;
 80066c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066c2:	009b      	lsls	r3, r3, #2
 80066c4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80066c8:	4413      	add	r3, r2
 80066ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066cc:	601a      	str	r2, [r3, #0]
    per_channel_shift[i] = channel_shift;
 80066ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066d0:	009b      	lsls	r3, r3, #2
 80066d2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80066d6:	4413      	add	r3, r2
 80066d8:	6a3a      	ldr	r2, [r7, #32]
 80066da:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < num_channels; ++i) {
 80066dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066de:	3301      	adds	r3, #1
 80066e0:	657b      	str	r3, [r7, #84]	; 0x54
 80066e2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80066e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80066e8:	429a      	cmp	r2, r3
 80066ea:	dbbc      	blt.n	8006666 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x1a6>
  }

  // Populate scalar quantization parameters.
  // This check on legacy quantization parameters is kept only for backward
  // compatibility.
  if (input->type == kTfLiteUInt8) {
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	7f1b      	ldrb	r3, [r3, #28]
 80066f0:	2b03      	cmp	r3, #3
 80066f2:	d143      	bne.n	800677c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2bc>
    // Check bias scale == input scale * filter scale.
    double real_multiplier = 0.0;
 80066f4:	f04f 0200 	mov.w	r2, #0
 80066f8:	f04f 0300 	mov.w	r3, #0
 80066fc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 8006700:	f107 0318 	add.w	r3, r7, #24
 8006704:	9301      	str	r3, [sp, #4]
 8006706:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006708:	9300      	str	r3, [sp, #0]
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	68b9      	ldr	r1, [r7, #8]
 8006710:	68f8      	ldr	r0, [r7, #12]
 8006712:	f000 f859 	bl	80067c8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
 8006716:	4603      	mov	r3, r0
 8006718:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800671c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006720:	2b00      	cmp	r3, #0
 8006722:	d01d      	beq.n	8006760 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2a0>
 8006724:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006728:	e048      	b.n	80067bc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2fc>
 800672a:	bf00      	nop
 800672c:	08021dd8 	.word	0x08021dd8
 8006730:	08021df4 	.word	0x08021df4
 8006734:	08021d88 	.word	0x08021d88
 8006738:	08021dbc 	.word	0x08021dbc
 800673c:	08021e10 	.word	0x08021e10
 8006740:	08021e44 	.word	0x08021e44
 8006744:	08021e2c 	.word	0x08021e2c
 8006748:	08021e58 	.word	0x08021e58
 800674c:	08021e74 	.word	0x08021e74
 8006750:	08021eb0 	.word	0x08021eb0
 8006754:	08021eec 	.word	0x08021eec
 8006758:	08021efc 	.word	0x08021efc
 800675c:	08021f20 	.word	0x08021f20
        context, input, filter, bias, output, &real_multiplier));
    int exponent;

    // Populate quantization parameters with multiplier and shift.
    QuantizeMultiplier(real_multiplier, multiplier, &exponent);
 8006760:	ed97 7b06 	vldr	d7, [r7, #24]
 8006764:	f107 0314 	add.w	r3, r7, #20
 8006768:	4619      	mov	r1, r3
 800676a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800676c:	eeb0 0b47 	vmov.f64	d0, d7
 8006770:	f7ff fb5e 	bl	8005e30 <_ZN6tflite18QuantizeMultiplierEdPlPi>
    *shift = -exponent;
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	425a      	negs	r2, r3
 8006778:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800677a:	601a      	str	r2, [r3, #0]
  }
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	7f1b      	ldrb	r3, [r3, #28]
 8006780:	2b09      	cmp	r3, #9
 8006782:	d007      	beq.n	8006794 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2d4>
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	7f1b      	ldrb	r3, [r3, #28]
 8006788:	2b03      	cmp	r3, #3
 800678a:	d003      	beq.n	8006794 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2d4>
      input->type == kTfLiteInt16) {
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	7f1b      	ldrb	r3, [r3, #28]
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
 8006790:	2b07      	cmp	r3, #7
 8006792:	d112      	bne.n	80067ba <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2fa>
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
 8006794:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006796:	7819      	ldrb	r1, [r3, #0]
 8006798:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800679a:	9300      	str	r3, [sp, #0]
 800679c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800679e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80067a0:	68f8      	ldr	r0, [r7, #12]
 80067a2:	f000 f9dd 	bl	8006b60 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 80067a6:	4603      	mov	r3, r0
 80067a8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80067ac:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d002      	beq.n	80067ba <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2fa>
 80067b4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80067b8:	e000      	b.n	80067bc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2fc>
        context, activation, output, output_activation_min,
        output_activation_max));
  }
  return kTfLiteOk;
 80067ba:	2300      	movs	r3, #0
}
 80067bc:	4618      	mov	r0, r3
 80067be:	375c      	adds	r7, #92	; 0x5c
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd90      	pop	{r4, r7, pc}
 80067c4:	0000      	movs	r0, r0
	...

080067c8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              const TfLiteTensor* bias,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 80067c8:	b590      	push	{r4, r7, lr}
 80067ca:	b08f      	sub	sp, #60	; 0x3c
 80067cc:	af02      	add	r7, sp, #8
 80067ce:	60f8      	str	r0, [r7, #12]
 80067d0:	60b9      	str	r1, [r7, #8]
 80067d2:	607a      	str	r2, [r7, #4]
 80067d4:	603b      	str	r3, [r7, #0]
  const double input_product_scale = static_cast<double>(input->params.scale) *
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	edd3 7a02 	vldr	s15, [r3, #8]
 80067dc:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
                                     static_cast<double>(filter->params.scale);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	edd3 7a02 	vldr	s15, [r3, #8]
 80067e6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
  const double input_product_scale = static_cast<double>(input->params.scale) *
 80067ea:	ee26 7b07 	vmul.f64	d7, d6, d7
 80067ee:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
  // The following conditions must be guaranteed by the training pipeline.
  if (bias) {
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d03a      	beq.n	800686e <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xa6>
    const double bias_scale = static_cast<double>(bias->params.scale);
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	edd3 7a02 	vldr	s15, [r3, #8]
 80067fe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006802:	ed87 7b08 	vstr	d7, [r7, #32]
    // bias * (bias_scale - input_product_scale) / output_scale should be
    // a small number for an integer.
    // Since normally bias should be within a small range.
    // We should expect (bias_scale - input_product_scale) / output_scale to
    // be a small number like 0.02.
    const double scale_diff = std::abs(input_product_scale - bias_scale);
 8006806:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 800680a:	ed97 7b08 	vldr	d7, [r7, #32]
 800680e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006812:	eeb0 0b47 	vmov.f64	d0, d7
 8006816:	f7ff fd00 	bl	800621a <_ZSt3absd>
 800681a:	ed87 0b06 	vstr	d0, [r7, #24]
    const double output_scale = static_cast<double>(output->params.scale);
 800681e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006820:	edd3 7a02 	vldr	s15, [r3, #8]
 8006824:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006828:	ed87 7b04 	vstr	d7, [r7, #16]

    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
 800682c:	ed97 5b06 	vldr	d5, [r7, #24]
 8006830:	ed97 6b04 	vldr	d6, [r7, #16]
 8006834:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8006838:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8006890 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xc8>
 800683c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006844:	bf94      	ite	ls
 8006846:	2301      	movls	r3, #1
 8006848:	2300      	movhi	r3, #0
 800684a:	b2db      	uxtb	r3, r3
 800684c:	f083 0301 	eor.w	r3, r3, #1
 8006850:	b2db      	uxtb	r3, r3
 8006852:	2b00      	cmp	r3, #0
 8006854:	d00b      	beq.n	800686e <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xa6>
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	695c      	ldr	r4, [r3, #20]
 800685a:	4b0f      	ldr	r3, [pc, #60]	; (8006898 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd0>)
 800685c:	9300      	str	r3, [sp, #0]
 800685e:	f240 1343 	movw	r3, #323	; 0x143
 8006862:	4a0e      	ldr	r2, [pc, #56]	; (800689c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd4>)
 8006864:	490e      	ldr	r1, [pc, #56]	; (80068a0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd8>)
 8006866:	68f8      	ldr	r0, [r7, #12]
 8006868:	47a0      	blx	r4
 800686a:	2301      	movs	r3, #1
 800686c:	e009      	b.n	8006882 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xba>
  }
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
 800686e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006870:	9300      	str	r3, [sp, #0]
 8006872:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	68b9      	ldr	r1, [r7, #8]
 8006878:	68f8      	ldr	r0, [r7, #12]
 800687a:	f000 f813 	bl	80068a4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>
 800687e:	4603      	mov	r3, r0
                                          multiplier);
 8006880:	bf00      	nop
}
 8006882:	4618      	mov	r0, r3
 8006884:	3734      	adds	r7, #52	; 0x34
 8006886:	46bd      	mov	sp, r7
 8006888:	bd90      	pop	{r4, r7, pc}
 800688a:	bf00      	nop
 800688c:	f3af 8000 	nop.w
 8006890:	47ae147b 	.word	0x47ae147b
 8006894:	3f947ae1 	.word	0x3f947ae1
 8006898:	08021f60 	.word	0x08021f60
 800689c:	08021d88 	.word	0x08021d88
 80068a0:	08021e2c 	.word	0x08021e2c

080068a4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>:

TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 80068a4:	b590      	push	{r4, r7, lr}
 80068a6:	b089      	sub	sp, #36	; 0x24
 80068a8:	af02      	add	r7, sp, #8
 80068aa:	60f8      	str	r0, [r7, #12]
 80068ac:	60b9      	str	r1, [r7, #8]
 80068ae:	607a      	str	r2, [r7, #4]
 80068b0:	603b      	str	r3, [r7, #0]
  const double input_product_scale =
      static_cast<double>(input->params.scale * filter->params.scale);
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	ed93 7a02 	vldr	s14, [r3, #8]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	edd3 7a02 	vldr	s15, [r3, #8]
 80068be:	ee67 7a27 	vmul.f32	s15, s14, s15
  const double input_product_scale =
 80068c2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80068c6:	ed87 7b04 	vstr	d7, [r7, #16]
  TF_LITE_ENSURE(context, input_product_scale >= 0);
 80068ca:	ed97 7b04 	vldr	d7, [r7, #16]
 80068ce:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80068d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068d6:	bfac      	ite	ge
 80068d8:	2301      	movge	r3, #1
 80068da:	2300      	movlt	r3, #0
 80068dc:	b2db      	uxtb	r3, r3
 80068de:	f083 0301 	eor.w	r3, r3, #1
 80068e2:	b2db      	uxtb	r3, r3
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d00b      	beq.n	8006900 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x5c>
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	695c      	ldr	r4, [r3, #20]
 80068ec:	4b0d      	ldr	r3, [pc, #52]	; (8006924 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x80>)
 80068ee:	9300      	str	r3, [sp, #0]
 80068f0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80068f4:	4a0c      	ldr	r2, [pc, #48]	; (8006928 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x84>)
 80068f6:	490d      	ldr	r1, [pc, #52]	; (800692c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x88>)
 80068f8:	68f8      	ldr	r0, [r7, #12]
 80068fa:	47a0      	blx	r4
 80068fc:	2301      	movs	r3, #1
 80068fe:	e00c      	b.n	800691a <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x76>
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	edd3 7a02 	vldr	s15, [r3, #8]
 8006906:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800690a:	ed97 5b04 	vldr	d5, [r7, #16]
 800690e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8006912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006914:	ed83 7b00 	vstr	d7, [r3]

  return kTfLiteOk;
 8006918:	2300      	movs	r3, #0
}
 800691a:	4618      	mov	r0, r3
 800691c:	371c      	adds	r7, #28
 800691e:	46bd      	mov	sp, r7
 8006920:	bd90      	pop	{r4, r7, pc}
 8006922:	bf00      	nop
 8006924:	08021f84 	.word	0x08021f84
 8006928:	08021d88 	.word	0x08021d88
 800692c:	08021e2c 	.word	0x08021e2c

08006930 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>:

namespace {

inline TfLiteStatus Quantize(TfLiteContext* context, float scale,
                             int32_t zero_point, float f, int32_t& q) {
 8006930:	b590      	push	{r4, r7, lr}
 8006932:	b08b      	sub	sp, #44	; 0x2c
 8006934:	af02      	add	r7, sp, #8
 8006936:	6178      	str	r0, [r7, #20]
 8006938:	ed87 0a04 	vstr	s0, [r7, #16]
 800693c:	60f9      	str	r1, [r7, #12]
 800693e:	edc7 0a02 	vstr	s1, [r7, #8]
 8006942:	607a      	str	r2, [r7, #4]
  const float tmp = TfLiteRound(f / scale);
 8006944:	ed97 7a02 	vldr	s14, [r7, #8]
 8006948:	edd7 7a04 	vldr	s15, [r7, #16]
 800694c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006950:	eeb0 0a66 	vmov.f32	s0, s13
 8006954:	f7ff fbdb 	bl	800610e <_ZN6tflite11TfLiteRoundIfEET_S1_>
 8006958:	ed87 0a07 	vstr	s0, [r7, #28]
  const bool no_integer_overflow_from_quantization =
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
 800695c:	f7fe ff95 	bl	800588a <_ZNSt14numeric_limitsIlE3minEv>
 8006960:	ee07 0a90 	vmov	s15, r0
 8006964:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006968:	ed97 7a07 	vldr	s14, [r7, #28]
 800696c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006974:	db0e      	blt.n	8006994 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x64>
       tmp <= static_cast<float>(std::numeric_limits<int32_t>::max()));
 8006976:	f7fe ff91 	bl	800589c <_ZNSt14numeric_limitsIlE3maxEv>
 800697a:	ee07 0a90 	vmov	s15, r0
 800697e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
 8006982:	ed97 7a07 	vldr	s14, [r7, #28]
 8006986:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800698a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800698e:	d801      	bhi.n	8006994 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x64>
 8006990:	2301      	movs	r3, #1
 8006992:	e000      	b.n	8006996 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x66>
 8006994:	2300      	movs	r3, #0
       tmp <= static_cast<float>(std::numeric_limits<int32_t>::max()));
 8006996:	76fb      	strb	r3, [r7, #27]
  TF_LITE_ENSURE(context, no_integer_overflow_from_quantization);
 8006998:	7efb      	ldrb	r3, [r7, #27]
 800699a:	f083 0301 	eor.w	r3, r3, #1
 800699e:	b2db      	uxtb	r3, r3
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d00b      	beq.n	80069bc <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x8c>
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	695c      	ldr	r4, [r3, #20]
 80069a8:	4b0c      	ldr	r3, [pc, #48]	; (80069dc <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0xac>)
 80069aa:	9300      	str	r3, [sp, #0]
 80069ac:	f44f 73af 	mov.w	r3, #350	; 0x15e
 80069b0:	4a0b      	ldr	r2, [pc, #44]	; (80069e0 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0xb0>)
 80069b2:	490c      	ldr	r1, [pc, #48]	; (80069e4 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0xb4>)
 80069b4:	6978      	ldr	r0, [r7, #20]
 80069b6:	47a0      	blx	r4
 80069b8:	2301      	movs	r3, #1
 80069ba:	e00a      	b.n	80069d2 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0xa2>
  q = zero_point + static_cast<int32_t>(tmp);
 80069bc:	edd7 7a07 	vldr	s15, [r7, #28]
 80069c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80069c4:	ee17 2a90 	vmov	r2, s15
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	441a      	add	r2, r3
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 80069d0:	2300      	movs	r3, #0
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3724      	adds	r7, #36	; 0x24
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd90      	pop	{r4, r7, pc}
 80069da:	bf00      	nop
 80069dc:	08021fa0 	.word	0x08021fa0
 80069e0:	08021d88 	.word	0x08021d88
 80069e4:	08021e2c 	.word	0x08021e2c

080069e8 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_>:

TfLiteStatus CalculateActivationRangeQuantizedImpl(
    TfLiteContext* context, TfLiteFusedActivation activation, int32_t qmin,
    int32_t qmax, TfLiteTensor* output, int32_t* act_min, int32_t* act_max) {
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b08a      	sub	sp, #40	; 0x28
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	607a      	str	r2, [r7, #4]
 80069f2:	603b      	str	r3, [r7, #0]
 80069f4:	460b      	mov	r3, r1
 80069f6:	72fb      	strb	r3, [r7, #11]
  const auto scale = output->params.scale;
 80069f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069fa:	689b      	ldr	r3, [r3, #8]
 80069fc:	627b      	str	r3, [r7, #36]	; 0x24
  const auto zero_point = output->params.zero_point;
 80069fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a00:	68db      	ldr	r3, [r3, #12]
 8006a02:	623b      	str	r3, [r7, #32]

  int32_t tmp_q;
  if (activation == kTfLiteActRelu) {
 8006a04:	7afb      	ldrb	r3, [r7, #11]
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d120      	bne.n	8006a4c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x64>
    TF_LITE_ENSURE_OK(context,
 8006a0a:	f107 0314 	add.w	r3, r7, #20
 8006a0e:	461a      	mov	r2, r3
 8006a10:	eddf 0a52 	vldr	s1, [pc, #328]	; 8006b5c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x174>
 8006a14:	6a39      	ldr	r1, [r7, #32]
 8006a16:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8006a1a:	68f8      	ldr	r0, [r7, #12]
 8006a1c:	f7ff ff88 	bl	8006930 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 8006a20:	4603      	mov	r3, r0
 8006a22:	76fb      	strb	r3, [r7, #27]
 8006a24:	7efb      	ldrb	r3, [r7, #27]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d001      	beq.n	8006a2e <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x46>
 8006a2a:	7efb      	ldrb	r3, [r7, #27]
 8006a2c:	e091      	b.n	8006b52 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, 0.0, tmp_q));
    *act_min = std::max(qmin, tmp_q);
 8006a2e:	f107 0214 	add.w	r2, r7, #20
 8006a32:	1d3b      	adds	r3, r7, #4
 8006a34:	4611      	mov	r1, r2
 8006a36:	4618      	mov	r0, r3
 8006a38:	f7ff fc37 	bl	80062aa <_ZSt3maxIlERKT_S2_S2_>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a42:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 8006a44:	683a      	ldr	r2, [r7, #0]
 8006a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a48:	601a      	str	r2, [r3, #0]
 8006a4a:	e081      	b.n	8006b50 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x168>
  } else if (activation == kTfLiteActRelu6) {
 8006a4c:	7afb      	ldrb	r3, [r7, #11]
 8006a4e:	2b03      	cmp	r3, #3
 8006a50:	d13a      	bne.n	8006ac8 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0xe0>
    TF_LITE_ENSURE_OK(context,
 8006a52:	f107 0314 	add.w	r3, r7, #20
 8006a56:	461a      	mov	r2, r3
 8006a58:	eddf 0a40 	vldr	s1, [pc, #256]	; 8006b5c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x174>
 8006a5c:	6a39      	ldr	r1, [r7, #32]
 8006a5e:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8006a62:	68f8      	ldr	r0, [r7, #12]
 8006a64:	f7ff ff64 	bl	8006930 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	777b      	strb	r3, [r7, #29]
 8006a6c:	7f7b      	ldrb	r3, [r7, #29]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d001      	beq.n	8006a76 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x8e>
 8006a72:	7f7b      	ldrb	r3, [r7, #29]
 8006a74:	e06d      	b.n	8006b52 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, 0.0, tmp_q));
    *act_min = std::max(qmin, tmp_q);
 8006a76:	f107 0214 	add.w	r2, r7, #20
 8006a7a:	1d3b      	adds	r3, r7, #4
 8006a7c:	4611      	mov	r1, r2
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f7ff fc13 	bl	80062aa <_ZSt3maxIlERKT_S2_S2_>
 8006a84:	4603      	mov	r3, r0
 8006a86:	681a      	ldr	r2, [r3, #0]
 8006a88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a8a:	601a      	str	r2, [r3, #0]
    TF_LITE_ENSURE_OK(context,
 8006a8c:	f107 0314 	add.w	r3, r7, #20
 8006a90:	461a      	mov	r2, r3
 8006a92:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 8006a96:	6a39      	ldr	r1, [r7, #32]
 8006a98:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8006a9c:	68f8      	ldr	r0, [r7, #12]
 8006a9e:	f7ff ff47 	bl	8006930 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	773b      	strb	r3, [r7, #28]
 8006aa6:	7f3b      	ldrb	r3, [r7, #28]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d001      	beq.n	8006ab0 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0xc8>
 8006aac:	7f3b      	ldrb	r3, [r7, #28]
 8006aae:	e050      	b.n	8006b52 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, 6.0, tmp_q));
    *act_max = std::min(qmax, tmp_q);
 8006ab0:	f107 0214 	add.w	r2, r7, #20
 8006ab4:	463b      	mov	r3, r7
 8006ab6:	4611      	mov	r1, r2
 8006ab8:	4618      	mov	r0, r3
 8006aba:	f7ff fbe2 	bl	8006282 <_ZSt3minIlERKT_S2_S2_>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	681a      	ldr	r2, [r3, #0]
 8006ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac4:	601a      	str	r2, [r3, #0]
 8006ac6:	e043      	b.n	8006b50 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x168>
  } else if (activation == kTfLiteActReluN1To1) {
 8006ac8:	7afb      	ldrb	r3, [r7, #11]
 8006aca:	2b02      	cmp	r3, #2
 8006acc:	d13a      	bne.n	8006b44 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x15c>
    TF_LITE_ENSURE_OK(context,
 8006ace:	f107 0314 	add.w	r3, r7, #20
 8006ad2:	461a      	mov	r2, r3
 8006ad4:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8006ad8:	6a39      	ldr	r1, [r7, #32]
 8006ada:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8006ade:	68f8      	ldr	r0, [r7, #12]
 8006ae0:	f7ff ff26 	bl	8006930 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	77fb      	strb	r3, [r7, #31]
 8006ae8:	7ffb      	ldrb	r3, [r7, #31]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d001      	beq.n	8006af2 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x10a>
 8006aee:	7ffb      	ldrb	r3, [r7, #31]
 8006af0:	e02f      	b.n	8006b52 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, -1.0, tmp_q));
    *act_min = std::max(qmin, tmp_q);
 8006af2:	f107 0214 	add.w	r2, r7, #20
 8006af6:	1d3b      	adds	r3, r7, #4
 8006af8:	4611      	mov	r1, r2
 8006afa:	4618      	mov	r0, r3
 8006afc:	f7ff fbd5 	bl	80062aa <_ZSt3maxIlERKT_S2_S2_>
 8006b00:	4603      	mov	r3, r0
 8006b02:	681a      	ldr	r2, [r3, #0]
 8006b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b06:	601a      	str	r2, [r3, #0]
    TF_LITE_ENSURE_OK(context,
 8006b08:	f107 0314 	add.w	r3, r7, #20
 8006b0c:	461a      	mov	r2, r3
 8006b0e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8006b12:	6a39      	ldr	r1, [r7, #32]
 8006b14:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8006b18:	68f8      	ldr	r0, [r7, #12]
 8006b1a:	f7ff ff09 	bl	8006930 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	77bb      	strb	r3, [r7, #30]
 8006b22:	7fbb      	ldrb	r3, [r7, #30]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d001      	beq.n	8006b2c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x144>
 8006b28:	7fbb      	ldrb	r3, [r7, #30]
 8006b2a:	e012      	b.n	8006b52 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, 1.0, tmp_q));
    *act_max = std::min(qmax, tmp_q);
 8006b2c:	f107 0214 	add.w	r2, r7, #20
 8006b30:	463b      	mov	r3, r7
 8006b32:	4611      	mov	r1, r2
 8006b34:	4618      	mov	r0, r3
 8006b36:	f7ff fba4 	bl	8006282 <_ZSt3minIlERKT_S2_S2_>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	681a      	ldr	r2, [r3, #0]
 8006b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b40:	601a      	str	r2, [r3, #0]
 8006b42:	e005      	b.n	8006b50 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x168>
  } else {
    *act_min = qmin;
 8006b44:	687a      	ldr	r2, [r7, #4]
 8006b46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b48:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 8006b4a:	683a      	ldr	r2, [r7, #0]
 8006b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b4e:	601a      	str	r2, [r3, #0]
  }
  return kTfLiteOk;
 8006b50:	2300      	movs	r3, #0
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3728      	adds	r7, #40	; 0x28
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}
 8006b5a:	bf00      	nop
 8006b5c:	00000000 	.word	0x00000000

08006b60 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
 8006b60:	b590      	push	{r4, r7, lr}
 8006b62:	b08b      	sub	sp, #44	; 0x2c
 8006b64:	af04      	add	r7, sp, #16
 8006b66:	60f8      	str	r0, [r7, #12]
 8006b68:	607a      	str	r2, [r7, #4]
 8006b6a:	603b      	str	r3, [r7, #0]
 8006b6c:	460b      	mov	r3, r1
 8006b6e:	72fb      	strb	r3, [r7, #11]
  int32_t qmin = 0;
 8006b70:	2300      	movs	r3, #0
 8006b72:	617b      	str	r3, [r7, #20]
  int32_t qmax = 0;
 8006b74:	2300      	movs	r3, #0
 8006b76:	613b      	str	r3, [r7, #16]
  if (output->type == kTfLiteUInt8) {
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	7f1b      	ldrb	r3, [r3, #28]
 8006b7c:	2b03      	cmp	r3, #3
 8006b7e:	d108      	bne.n	8006b92 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x32>
    qmin = std::numeric_limits<uint8_t>::min();
 8006b80:	f7ff fc8d 	bl	800649e <_ZNSt14numeric_limitsIhE3minEv>
 8006b84:	4603      	mov	r3, r0
 8006b86:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<uint8_t>::max();
 8006b88:	f7ff fc91 	bl	80064ae <_ZNSt14numeric_limitsIhE3maxEv>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	613b      	str	r3, [r7, #16]
 8006b90:	e025      	b.n	8006bde <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (output->type == kTfLiteInt8) {
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	7f1b      	ldrb	r3, [r3, #28]
 8006b96:	2b09      	cmp	r3, #9
 8006b98:	d108      	bne.n	8006bac <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x4c>
    qmin = std::numeric_limits<int8_t>::min();
 8006b9a:	f7ff fc6f 	bl	800647c <_ZNSt14numeric_limitsIaE3minEv>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int8_t>::max();
 8006ba2:	f7ff fc74 	bl	800648e <_ZNSt14numeric_limitsIaE3maxEv>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	613b      	str	r3, [r7, #16]
 8006baa:	e018      	b.n	8006bde <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (output->type == kTfLiteInt16) {
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	7f1b      	ldrb	r3, [r3, #28]
 8006bb0:	2b07      	cmp	r3, #7
 8006bb2:	d108      	bne.n	8006bc6 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x66>
    qmin = std::numeric_limits<int16_t>::min();
 8006bb4:	f7ff fb52 	bl	800625c <_ZNSt14numeric_limitsIsE3minEv>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int16_t>::max();
 8006bbc:	f7ff fb58 	bl	8006270 <_ZNSt14numeric_limitsIsE3maxEv>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	613b      	str	r3, [r7, #16]
 8006bc4:	e00b      	b.n	8006bde <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else {
    TF_LITE_ENSURE(context, false);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	695c      	ldr	r4, [r3, #20]
 8006bca:	4b0e      	ldr	r3, [pc, #56]	; (8006c04 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa4>)
 8006bcc:	9300      	str	r3, [sp, #0]
 8006bce:	f44f 73cb 	mov.w	r3, #406	; 0x196
 8006bd2:	4a0d      	ldr	r2, [pc, #52]	; (8006c08 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa8>)
 8006bd4:	490d      	ldr	r1, [pc, #52]	; (8006c0c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xac>)
 8006bd6:	68f8      	ldr	r0, [r7, #12]
 8006bd8:	47a0      	blx	r4
 8006bda:	2301      	movs	r3, #1
 8006bdc:	e00d      	b.n	8006bfa <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x9a>
  }

  return CalculateActivationRangeQuantizedImpl(context, activation, qmin, qmax,
 8006bde:	7af9      	ldrb	r1, [r7, #11]
 8006be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006be2:	9302      	str	r3, [sp, #8]
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	9301      	str	r3, [sp, #4]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	9300      	str	r3, [sp, #0]
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	697a      	ldr	r2, [r7, #20]
 8006bf0:	68f8      	ldr	r0, [r7, #12]
 8006bf2:	f7ff fef9 	bl	80069e8 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_>
 8006bf6:	4603      	mov	r3, r0
                                               output, act_min, act_max);
 8006bf8:	bf00      	nop
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	371c      	adds	r7, #28
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd90      	pop	{r4, r7, pc}
 8006c02:	bf00      	nop
 8006c04:	08021fc8 	.word	0x08021fc8
 8006c08:	08021d88 	.word	0x08021d88
 8006c0c:	08021e2c 	.word	0x08021e2c

08006c10 <_ZN6tflite29INonPersistentBufferAllocatorC1Ev>:
// Interface class for managing non-persistent buffers.
// The default non-persistent buffers are temp buffers that are not resizable.
// Support of at least one resizable buffer is required.
class INonPersistentBufferAllocator {
 public:
  INonPersistentBufferAllocator() {}
 8006c10:	b480      	push	{r7}
 8006c12:	b083      	sub	sp, #12
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	4a04      	ldr	r2, [pc, #16]	; (8006c2c <_ZN6tflite29INonPersistentBufferAllocatorC1Ev+0x1c>)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	601a      	str	r2, [r3, #0]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	4618      	mov	r0, r3
 8006c22:	370c      	adds	r7, #12
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr
 8006c2c:	08028da0 	.word	0x08028da0

08006c30 <_ZN6tflite29INonPersistentBufferAllocatorD1Ev>:
  virtual ~INonPersistentBufferAllocator() {}
 8006c30:	b480      	push	{r7}
 8006c32:	b083      	sub	sp, #12
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	4a04      	ldr	r2, [pc, #16]	; (8006c4c <_ZN6tflite29INonPersistentBufferAllocatorD1Ev+0x1c>)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	601a      	str	r2, [r3, #0]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	4618      	mov	r0, r3
 8006c42:	370c      	adds	r7, #12
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr
 8006c4c:	08028da0 	.word	0x08028da0

08006c50 <_ZN6tflite29INonPersistentBufferAllocatorD0Ev>:
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b082      	sub	sp, #8
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f7ff ffe9 	bl	8006c30 <_ZN6tflite29INonPersistentBufferAllocatorD1Ev>
 8006c5e:	2104      	movs	r1, #4
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f018 fd59 	bl	801f718 <_ZdlPvj>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3708      	adds	r7, #8
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}

08006c70 <_ZN6tflite26IPersistentBufferAllocatorC1Ev>:
  IPersistentBufferAllocator() {}
 8006c70:	b480      	push	{r7}
 8006c72:	b083      	sub	sp, #12
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	4a04      	ldr	r2, [pc, #16]	; (8006c8c <_ZN6tflite26IPersistentBufferAllocatorC1Ev+0x1c>)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	601a      	str	r2, [r3, #0]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	4618      	mov	r0, r3
 8006c82:	370c      	adds	r7, #12
 8006c84:	46bd      	mov	sp, r7
 8006c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8a:	4770      	bx	lr
 8006c8c:	08028ddc 	.word	0x08028ddc

08006c90 <_ZN6tflite26IPersistentBufferAllocatorD1Ev>:
  virtual ~IPersistentBufferAllocator() {}
 8006c90:	b480      	push	{r7}
 8006c92:	b083      	sub	sp, #12
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	4a04      	ldr	r2, [pc, #16]	; (8006cac <_ZN6tflite26IPersistentBufferAllocatorD1Ev+0x1c>)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	601a      	str	r2, [r3, #0]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	370c      	adds	r7, #12
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr
 8006cac:	08028ddc 	.word	0x08028ddc

08006cb0 <_ZN6tflite26IPersistentBufferAllocatorD0Ev>:
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b082      	sub	sp, #8
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f7ff ffe9 	bl	8006c90 <_ZN6tflite26IPersistentBufferAllocatorD1Ev>
 8006cbe:	2104      	movs	r1, #4
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f018 fd29 	bl	801f718 <_ZdlPvj>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3708      	adds	r7, #8
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}

08006cd0 <_ZN6tflite29INonPersistentBufferAllocatorC1ERKS0_>:
class INonPersistentBufferAllocator {
 8006cd0:	b480      	push	{r7}
 8006cd2:	b083      	sub	sp, #12
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
 8006cd8:	6039      	str	r1, [r7, #0]
 8006cda:	4a05      	ldr	r2, [pc, #20]	; (8006cf0 <_ZN6tflite29INonPersistentBufferAllocatorC1ERKS0_+0x20>)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	601a      	str	r2, [r3, #0]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	370c      	adds	r7, #12
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cec:	4770      	bx	lr
 8006cee:	bf00      	nop
 8006cf0:	08028da0 	.word	0x08028da0

08006cf4 <_ZN6tflite26IPersistentBufferAllocatorC1ERKS0_>:
class IPersistentBufferAllocator {
 8006cf4:	b480      	push	{r7}
 8006cf6:	b083      	sub	sp, #12
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	6039      	str	r1, [r7, #0]
 8006cfe:	4a05      	ldr	r2, [pc, #20]	; (8006d14 <_ZN6tflite26IPersistentBufferAllocatorC1ERKS0_+0x20>)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	601a      	str	r2, [r3, #0]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	4618      	mov	r0, r3
 8006d08:	370c      	adds	r7, #12
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d10:	4770      	bx	lr
 8006d12:	bf00      	nop
 8006d14:	08028ddc 	.word	0x08028ddc

08006d18 <_ZN6tflite26SingleArenaBufferAllocatorC1ERKS0_>:
namespace tflite {

// TODO(petewarden): This allocator never frees up or reuses  any memory, even
// though we have enough information about lifetimes of the tensors to do so.
// This makes it pretty wasteful, so we should use a more intelligent method.
class SingleArenaBufferAllocator : public INonPersistentBufferAllocator,
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b082      	sub	sp, #8
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
 8006d20:	6039      	str	r1, [r7, #0]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	683a      	ldr	r2, [r7, #0]
 8006d26:	4611      	mov	r1, r2
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f7ff ffd1 	bl	8006cd0 <_ZN6tflite29INonPersistentBufferAllocatorC1ERKS0_>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	1d1a      	adds	r2, r3, #4
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	3304      	adds	r3, #4
 8006d36:	4619      	mov	r1, r3
 8006d38:	4610      	mov	r0, r2
 8006d3a:	f7ff ffdb 	bl	8006cf4 <_ZN6tflite26IPersistentBufferAllocatorC1ERKS0_>
 8006d3e:	4a13      	ldr	r2, [pc, #76]	; (8006d8c <_ZN6tflite26SingleArenaBufferAllocatorC1ERKS0_+0x74>)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	601a      	str	r2, [r3, #0]
 8006d44:	4a12      	ldr	r2, [pc, #72]	; (8006d90 <_ZN6tflite26SingleArenaBufferAllocatorC1ERKS0_+0x78>)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	605a      	str	r2, [r3, #4]
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	689a      	ldr	r2, [r3, #8]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	609a      	str	r2, [r3, #8]
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	68da      	ldr	r2, [r3, #12]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	60da      	str	r2, [r3, #12]
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	691a      	ldr	r2, [r3, #16]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	611a      	str	r2, [r3, #16]
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	695a      	ldr	r2, [r3, #20]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	615a      	str	r2, [r3, #20]
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	699a      	ldr	r2, [r3, #24]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	619a      	str	r2, [r3, #24]
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	69da      	ldr	r2, [r3, #28]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	61da      	str	r2, [r3, #28]
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	6a1a      	ldr	r2, [r3, #32]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	621a      	str	r2, [r3, #32]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	4618      	mov	r0, r3
 8006d86:	3708      	adds	r7, #8
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}
 8006d8c:	08028df4 	.word	0x08028df4
 8006d90:	08028e38 	.word	0x08028e38

08006d94 <_ZN6tflite26SingleArenaBufferAllocatordlEPv>:

  // Returns the number of used bytes in the allocator. This number takes in
  // account any temporary allocations.
  size_t GetUsedBytes() const;

  TF_LITE_REMOVE_VIRTUAL_DELETE
 8006d94:	b480      	push	{r7}
 8006d96:	b083      	sub	sp, #12
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
 8006d9c:	bf00      	nop
 8006d9e:	370c      	adds	r7, #12
 8006da0:	46bd      	mov	sp, r7
 8006da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da6:	4770      	bx	lr

08006da8 <_ZN6tflite26SingleArenaBufferAllocatorC1EPhS1_>:
#include "tensorflow/lite/micro/memory_helpers.h"
#include "tensorflow/lite/micro/micro_log.h"

namespace tflite {

SingleArenaBufferAllocator::SingleArenaBufferAllocator(uint8_t* buffer_head,
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b084      	sub	sp, #16
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	60f8      	str	r0, [r7, #12]
 8006db0:	60b9      	str	r1, [r7, #8]
 8006db2:	607a      	str	r2, [r7, #4]
                                                       uint8_t* buffer_tail)
    : buffer_head_(buffer_head),
      buffer_tail_(buffer_tail),
      head_(buffer_head),
      tail_(buffer_tail),
      temp_(buffer_head_) {}
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	4618      	mov	r0, r3
 8006db8:	f7ff ff2a 	bl	8006c10 <_ZN6tflite29INonPersistentBufferAllocatorC1Ev>
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	3304      	adds	r3, #4
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f7ff ff55 	bl	8006c70 <_ZN6tflite26IPersistentBufferAllocatorC1Ev>
 8006dc6:	4a10      	ldr	r2, [pc, #64]	; (8006e08 <_ZN6tflite26SingleArenaBufferAllocatorC1EPhS1_+0x60>)
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	601a      	str	r2, [r3, #0]
 8006dcc:	4a0f      	ldr	r2, [pc, #60]	; (8006e0c <_ZN6tflite26SingleArenaBufferAllocatorC1EPhS1_+0x64>)
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	605a      	str	r2, [r3, #4]
    : buffer_head_(buffer_head),
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	68ba      	ldr	r2, [r7, #8]
 8006dd6:	609a      	str	r2, [r3, #8]
      buffer_tail_(buffer_tail),
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	687a      	ldr	r2, [r7, #4]
 8006ddc:	60da      	str	r2, [r3, #12]
      head_(buffer_head),
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	68ba      	ldr	r2, [r7, #8]
 8006de2:	611a      	str	r2, [r3, #16]
      tail_(buffer_tail),
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	687a      	ldr	r2, [r7, #4]
 8006de8:	615a      	str	r2, [r3, #20]
      temp_(buffer_head_) {}
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	689a      	ldr	r2, [r3, #8]
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	619a      	str	r2, [r3, #24]
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2200      	movs	r2, #0
 8006df6:	61da      	str	r2, [r3, #28]
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	621a      	str	r2, [r3, #32]
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	4618      	mov	r0, r3
 8006e02:	3710      	adds	r7, #16
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}
 8006e08:	08028df4 	.word	0x08028df4
 8006e0c:	08028e38 	.word	0x08028e38

08006e10 <_ZN6tflite26SingleArenaBufferAllocatorC1EPhj>:

SingleArenaBufferAllocator::SingleArenaBufferAllocator(uint8_t* buffer,
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b084      	sub	sp, #16
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	60f8      	str	r0, [r7, #12]
 8006e18:	60b9      	str	r1, [r7, #8]
 8006e1a:	607a      	str	r2, [r7, #4]
                                                       size_t buffer_size)
    : SingleArenaBufferAllocator(buffer, buffer + buffer_size) {}
 8006e1c:	68ba      	ldr	r2, [r7, #8]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	4413      	add	r3, r2
 8006e22:	461a      	mov	r2, r3
 8006e24:	68b9      	ldr	r1, [r7, #8]
 8006e26:	68f8      	ldr	r0, [r7, #12]
 8006e28:	f7ff ffbe 	bl	8006da8 <_ZN6tflite26SingleArenaBufferAllocatorC1EPhS1_>
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3710      	adds	r7, #16
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}

08006e36 <_ZN6tflite26SingleArenaBufferAllocator6CreateEPhj>:

/* static */
SingleArenaBufferAllocator* SingleArenaBufferAllocator::Create(
    uint8_t* buffer_head, size_t buffer_size) {
 8006e36:	b590      	push	{r4, r7, lr}
 8006e38:	b08d      	sub	sp, #52	; 0x34
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	6078      	str	r0, [r7, #4]
 8006e3e:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(buffer_head != nullptr);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d101      	bne.n	8006e4a <_ZN6tflite26SingleArenaBufferAllocator6CreateEPhj+0x14>
 8006e46:	f018 fe0b 	bl	801fa60 <abort>
  SingleArenaBufferAllocator tmp =
      SingleArenaBufferAllocator(buffer_head, buffer_size);
 8006e4a:	f107 0308 	add.w	r3, r7, #8
 8006e4e:	683a      	ldr	r2, [r7, #0]
 8006e50:	6879      	ldr	r1, [r7, #4]
 8006e52:	4618      	mov	r0, r3
 8006e54:	f7ff ffdc 	bl	8006e10 <_ZN6tflite26SingleArenaBufferAllocatorC1EPhj>

  // Allocate enough bytes from the buffer to create a
  // SingleArenaBufferAllocator. The new instance will use the current adjusted
  // tail buffer from the tmp allocator instance.
  uint8_t* allocator_buffer = tmp.AllocatePersistentBuffer(
 8006e58:	f107 0308 	add.w	r3, r7, #8
 8006e5c:	2204      	movs	r2, #4
 8006e5e:	2124      	movs	r1, #36	; 0x24
 8006e60:	4618      	mov	r0, r3
 8006e62:	f000 f8e7 	bl	8007034 <_ZN6tflite26SingleArenaBufferAllocator24AllocatePersistentBufferEjj>
 8006e66:	62f8      	str	r0, [r7, #44]	; 0x2c
      sizeof(SingleArenaBufferAllocator), alignof(SingleArenaBufferAllocator));
  // Use the default copy constructor to populate internal states.
  return new (allocator_buffer) SingleArenaBufferAllocator(tmp);
 8006e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e6a:	4619      	mov	r1, r3
 8006e6c:	2024      	movs	r0, #36	; 0x24
 8006e6e:	f7fb fe3f 	bl	8002af0 <_ZnwjPv>
 8006e72:	4604      	mov	r4, r0
 8006e74:	f107 0308 	add.w	r3, r7, #8
 8006e78:	4619      	mov	r1, r3
 8006e7a:	4620      	mov	r0, r4
 8006e7c:	f7ff ff4c 	bl	8006d18 <_ZN6tflite26SingleArenaBufferAllocatorC1ERKS0_>
}
 8006e80:	f107 0308 	add.w	r3, r7, #8
 8006e84:	4618      	mov	r0, r3
 8006e86:	f000 f805 	bl	8006e94 <_ZN6tflite26SingleArenaBufferAllocatorD1Ev>
  return new (allocator_buffer) SingleArenaBufferAllocator(tmp);
 8006e8a:	4623      	mov	r3, r4
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3734      	adds	r7, #52	; 0x34
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd90      	pop	{r4, r7, pc}

08006e94 <_ZN6tflite26SingleArenaBufferAllocatorD1Ev>:

SingleArenaBufferAllocator::~SingleArenaBufferAllocator() {}
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b082      	sub	sp, #8
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	4a09      	ldr	r2, [pc, #36]	; (8006ec4 <_ZN6tflite26SingleArenaBufferAllocatorD1Ev+0x30>)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	601a      	str	r2, [r3, #0]
 8006ea2:	4a09      	ldr	r2, [pc, #36]	; (8006ec8 <_ZN6tflite26SingleArenaBufferAllocatorD1Ev+0x34>)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	605a      	str	r2, [r3, #4]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	3304      	adds	r3, #4
 8006eac:	4618      	mov	r0, r3
 8006eae:	f7ff feef 	bl	8006c90 <_ZN6tflite26IPersistentBufferAllocatorD1Ev>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f7ff febb 	bl	8006c30 <_ZN6tflite29INonPersistentBufferAllocatorD1Ev>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3708      	adds	r7, #8
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}
 8006ec4:	08028df4 	.word	0x08028df4
 8006ec8:	08028e38 	.word	0x08028e38

08006ecc <_ZThn4_N6tflite26SingleArenaBufferAllocatorD1Ev>:
  virtual ~SingleArenaBufferAllocator();
 8006ecc:	f1a0 0004 	sub.w	r0, r0, #4
 8006ed0:	f7ff bfe0 	b.w	8006e94 <_ZN6tflite26SingleArenaBufferAllocatorD1Ev>

08006ed4 <_ZN6tflite26SingleArenaBufferAllocatorD0Ev>:
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b082      	sub	sp, #8
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f7ff ffd9 	bl	8006e94 <_ZN6tflite26SingleArenaBufferAllocatorD1Ev>
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f7ff ff56 	bl	8006d94 <_ZN6tflite26SingleArenaBufferAllocatordlEPv>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	4618      	mov	r0, r3
 8006eec:	3708      	adds	r7, #8
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}

08006ef2 <_ZThn4_N6tflite26SingleArenaBufferAllocatorD0Ev>:
 8006ef2:	f1a0 0004 	sub.w	r0, r0, #4
 8006ef6:	f7ff bfed 	b.w	8006ed4 <_ZN6tflite26SingleArenaBufferAllocatorD0Ev>

08006efa <_ZN6tflite26SingleArenaBufferAllocator23AllocateResizableBufferEjj>:

uint8_t* SingleArenaBufferAllocator::AllocateResizableBuffer(size_t size,
                                                             size_t alignment) {
 8006efa:	b590      	push	{r4, r7, lr}
 8006efc:	b087      	sub	sp, #28
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	60f8      	str	r0, [r7, #12]
 8006f02:	60b9      	str	r1, [r7, #8]
 8006f04:	607a      	str	r2, [r7, #4]
  // Only supports one resizable buffer, which starts at the buffer head.
  uint8_t* expect_resizable_buf = AlignPointerUp(buffer_head_, alignment);
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	689b      	ldr	r3, [r3, #8]
 8006f0a:	6879      	ldr	r1, [r7, #4]
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f000 fac7 	bl	80074a0 <_ZN6tflite14AlignPointerUpEPhj>
 8006f12:	6178      	str	r0, [r7, #20]
  if (ResizeBuffer(expect_resizable_buf, size, alignment) == kTfLiteOk) {
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	331c      	adds	r3, #28
 8006f1a:	681c      	ldr	r4, [r3, #0]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	68ba      	ldr	r2, [r7, #8]
 8006f20:	6979      	ldr	r1, [r7, #20]
 8006f22:	68f8      	ldr	r0, [r7, #12]
 8006f24:	47a0      	blx	r4
 8006f26:	4603      	mov	r3, r0
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	bf0c      	ite	eq
 8006f2c:	2301      	moveq	r3, #1
 8006f2e:	2300      	movne	r3, #0
 8006f30:	b2db      	uxtb	r3, r3
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d001      	beq.n	8006f3a <_ZN6tflite26SingleArenaBufferAllocator23AllocateResizableBufferEjj+0x40>
    return expect_resizable_buf;
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	e000      	b.n	8006f3c <_ZN6tflite26SingleArenaBufferAllocator23AllocateResizableBufferEjj+0x42>
  }
  return nullptr;
 8006f3a:	2300      	movs	r3, #0
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	371c      	adds	r7, #28
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd90      	pop	{r4, r7, pc}

08006f44 <_ZN6tflite26SingleArenaBufferAllocator25DeallocateResizableBufferEPh>:

TfLiteStatus SingleArenaBufferAllocator::DeallocateResizableBuffer(
    uint8_t* resizable_buf) {
 8006f44:	b590      	push	{r4, r7, lr}
 8006f46:	b083      	sub	sp, #12
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	6039      	str	r1, [r7, #0]
  return ResizeBuffer(resizable_buf, 0, 1);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	331c      	adds	r3, #28
 8006f54:	681c      	ldr	r4, [r3, #0]
 8006f56:	2301      	movs	r3, #1
 8006f58:	2200      	movs	r2, #0
 8006f5a:	6839      	ldr	r1, [r7, #0]
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	47a0      	blx	r4
 8006f60:	4603      	mov	r3, r0
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	370c      	adds	r7, #12
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd90      	pop	{r4, r7, pc}

08006f6a <_ZN6tflite26SingleArenaBufferAllocator33ReserveNonPersistentOverlayMemoryEjj>:

TfLiteStatus SingleArenaBufferAllocator::ReserveNonPersistentOverlayMemory(
    size_t size, size_t alignment) {
 8006f6a:	b590      	push	{r4, r7, lr}
 8006f6c:	b087      	sub	sp, #28
 8006f6e:	af00      	add	r7, sp, #0
 8006f70:	60f8      	str	r0, [r7, #12]
 8006f72:	60b9      	str	r1, [r7, #8]
 8006f74:	607a      	str	r2, [r7, #4]
  uint8_t* expect_resizable_buf = AlignPointerUp(buffer_head_, alignment);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	689b      	ldr	r3, [r3, #8]
 8006f7a:	6879      	ldr	r1, [r7, #4]
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	f000 fa8f 	bl	80074a0 <_ZN6tflite14AlignPointerUpEPhj>
 8006f82:	6178      	str	r0, [r7, #20]
  return ResizeBuffer(expect_resizable_buf, size, alignment);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	331c      	adds	r3, #28
 8006f8a:	681c      	ldr	r4, [r3, #0]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	68ba      	ldr	r2, [r7, #8]
 8006f90:	6979      	ldr	r1, [r7, #20]
 8006f92:	68f8      	ldr	r0, [r7, #12]
 8006f94:	47a0      	blx	r4
 8006f96:	4603      	mov	r3, r0
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	371c      	adds	r7, #28
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd90      	pop	{r4, r7, pc}

08006fa0 <_ZN6tflite26SingleArenaBufferAllocator12ResizeBufferEPhjj>:

TfLiteStatus SingleArenaBufferAllocator::ResizeBuffer(uint8_t* resizable_buf,
                                                      size_t size,
                                                      size_t alignment) {
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b088      	sub	sp, #32
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	60f8      	str	r0, [r7, #12]
 8006fa8:	60b9      	str	r1, [r7, #8]
 8006faa:	607a      	str	r2, [r7, #4]
 8006fac:	603b      	str	r3, [r7, #0]
  // Only supports one resizable buffer, which starts at the buffer head.
  uint8_t* expect_resizable_buf = AlignPointerUp(buffer_head_, alignment);
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	689b      	ldr	r3, [r3, #8]
 8006fb2:	6839      	ldr	r1, [r7, #0]
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f000 fa73 	bl	80074a0 <_ZN6tflite14AlignPointerUpEPhj>
 8006fba:	61f8      	str	r0, [r7, #28]
  if (head_ != temp_ || resizable_buf != expect_resizable_buf) {
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	691a      	ldr	r2, [r3, #16]
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	699b      	ldr	r3, [r3, #24]
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d103      	bne.n	8006fd0 <_ZN6tflite26SingleArenaBufferAllocator12ResizeBufferEPhjj+0x30>
 8006fc8:	68ba      	ldr	r2, [r7, #8]
 8006fca:	69fb      	ldr	r3, [r7, #28]
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d004      	beq.n	8006fda <_ZN6tflite26SingleArenaBufferAllocator12ResizeBufferEPhjj+0x3a>
    MicroPrintf(
 8006fd0:	4816      	ldr	r0, [pc, #88]	; (800702c <_ZN6tflite26SingleArenaBufferAllocator12ResizeBufferEPhjj+0x8c>)
 8006fd2:	f004 fc1d 	bl	800b810 <_Z11MicroPrintfPKcz>
        "Internal error: either buffer is not resizable or "
        "ResetTempAllocations() is not called before ResizeBuffer().");
    return kTfLiteError;
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	e023      	b.n	8007022 <_ZN6tflite26SingleArenaBufferAllocator12ResizeBufferEPhjj+0x82>
  }

  uint8_t* const aligned_result = AlignPointerUp(buffer_head_, alignment);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	689b      	ldr	r3, [r3, #8]
 8006fde:	6839      	ldr	r1, [r7, #0]
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	f000 fa5d 	bl	80074a0 <_ZN6tflite14AlignPointerUpEPhj>
 8006fe6:	61b8      	str	r0, [r7, #24]
  const size_t available_memory = tail_ - aligned_result;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	695a      	ldr	r2, [r3, #20]
 8006fec:	69bb      	ldr	r3, [r7, #24]
 8006fee:	1ad3      	subs	r3, r2, r3
 8006ff0:	617b      	str	r3, [r7, #20]
  if (available_memory < size) {
 8006ff2:	697a      	ldr	r2, [r7, #20]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	d209      	bcs.n	800700e <_ZN6tflite26SingleArenaBufferAllocator12ResizeBufferEPhjj+0x6e>
    MicroPrintf(
 8006ffa:	687a      	ldr	r2, [r7, #4]
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	1ad3      	subs	r3, r2, r3
 8007000:	697a      	ldr	r2, [r7, #20]
 8007002:	6879      	ldr	r1, [r7, #4]
 8007004:	480a      	ldr	r0, [pc, #40]	; (8007030 <_ZN6tflite26SingleArenaBufferAllocator12ResizeBufferEPhjj+0x90>)
 8007006:	f004 fc03 	bl	800b810 <_Z11MicroPrintfPKcz>
        "Failed to resize buffer. Requested: %u, available %u, missing: %u",
        size, available_memory, size - available_memory);
    return kTfLiteError;
 800700a:	2301      	movs	r3, #1
 800700c:	e009      	b.n	8007022 <_ZN6tflite26SingleArenaBufferAllocator12ResizeBufferEPhjj+0x82>
  }
  head_ = aligned_result + size;
 800700e:	69ba      	ldr	r2, [r7, #24]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	441a      	add	r2, r3
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	611a      	str	r2, [r3, #16]
  temp_ = head_;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	691a      	ldr	r2, [r3, #16]
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	619a      	str	r2, [r3, #24]

  return kTfLiteOk;
 8007020:	2300      	movs	r3, #0
}
 8007022:	4618      	mov	r0, r3
 8007024:	3720      	adds	r7, #32
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}
 800702a:	bf00      	nop
 800702c:	08021fd0 	.word	0x08021fd0
 8007030:	08022040 	.word	0x08022040

08007034 <_ZN6tflite26SingleArenaBufferAllocator24AllocatePersistentBufferEjj>:

uint8_t* SingleArenaBufferAllocator::AllocatePersistentBuffer(
    size_t size, size_t alignment) {
 8007034:	b580      	push	{r7, lr}
 8007036:	b086      	sub	sp, #24
 8007038:	af00      	add	r7, sp, #0
 800703a:	60f8      	str	r0, [r7, #12]
 800703c:	60b9      	str	r1, [r7, #8]
 800703e:	607a      	str	r2, [r7, #4]
  uint8_t* const aligned_result = AlignPointerDown(tail_ - size, alignment);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	695a      	ldr	r2, [r3, #20]
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	425b      	negs	r3, r3
 8007048:	4413      	add	r3, r2
 800704a:	6879      	ldr	r1, [r7, #4]
 800704c:	4618      	mov	r0, r3
 800704e:	f000 fa40 	bl	80074d2 <_ZN6tflite16AlignPointerDownEPhj>
 8007052:	6178      	str	r0, [r7, #20]
  if (aligned_result < head_) {
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	691b      	ldr	r3, [r3, #16]
 8007058:	697a      	ldr	r2, [r7, #20]
 800705a:	429a      	cmp	r2, r3
 800705c:	d20e      	bcs.n	800707c <_ZN6tflite26SingleArenaBufferAllocator24AllocatePersistentBufferEjj+0x48>
#ifndef TF_LITE_STRIP_ERROR_STRINGS
    const size_t missing_memory = head_ - aligned_result;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	691a      	ldr	r2, [r3, #16]
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	1ad3      	subs	r3, r2, r3
 8007066:	613b      	str	r3, [r7, #16]
    MicroPrintf(
 8007068:	68ba      	ldr	r2, [r7, #8]
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	1ad2      	subs	r2, r2, r3
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	68b9      	ldr	r1, [r7, #8]
 8007072:	4806      	ldr	r0, [pc, #24]	; (800708c <_ZN6tflite26SingleArenaBufferAllocator24AllocatePersistentBufferEjj+0x58>)
 8007074:	f004 fbcc 	bl	800b810 <_Z11MicroPrintfPKcz>
        "Failed to allocate tail memory. Requested: %u, "
        "available %u, missing: %u",
        size, size - missing_memory, missing_memory);
#endif
    return nullptr;
 8007078:	2300      	movs	r3, #0
 800707a:	e003      	b.n	8007084 <_ZN6tflite26SingleArenaBufferAllocator24AllocatePersistentBufferEjj+0x50>
  }
  tail_ = aligned_result;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	697a      	ldr	r2, [r7, #20]
 8007080:	615a      	str	r2, [r3, #20]
  return aligned_result;
 8007082:	697b      	ldr	r3, [r7, #20]
}
 8007084:	4618      	mov	r0, r3
 8007086:	3718      	adds	r7, #24
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}
 800708c:	08022084 	.word	0x08022084

08007090 <_ZThn4_N6tflite26SingleArenaBufferAllocator24AllocatePersistentBufferEjj>:
  virtual uint8_t* AllocatePersistentBuffer(size_t size,
 8007090:	f1a0 0004 	sub.w	r0, r0, #4
 8007094:	f7ff bfce 	b.w	8007034 <_ZN6tflite26SingleArenaBufferAllocator24AllocatePersistentBufferEjj>

08007098 <_ZN6tflite26SingleArenaBufferAllocator12AllocateTempEjj>:

uint8_t* SingleArenaBufferAllocator::AllocateTemp(size_t size,
                                                  size_t alignment) {
 8007098:	b580      	push	{r7, lr}
 800709a:	b086      	sub	sp, #24
 800709c:	af00      	add	r7, sp, #0
 800709e:	60f8      	str	r0, [r7, #12]
 80070a0:	60b9      	str	r1, [r7, #8]
 80070a2:	607a      	str	r2, [r7, #4]
  uint8_t* const aligned_result = AlignPointerUp(temp_, alignment);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	699b      	ldr	r3, [r3, #24]
 80070a8:	6879      	ldr	r1, [r7, #4]
 80070aa:	4618      	mov	r0, r3
 80070ac:	f000 f9f8 	bl	80074a0 <_ZN6tflite14AlignPointerUpEPhj>
 80070b0:	6178      	str	r0, [r7, #20]
  const size_t available_memory = tail_ - aligned_result;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	695a      	ldr	r2, [r3, #20]
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	1ad3      	subs	r3, r2, r3
 80070ba:	613b      	str	r3, [r7, #16]
  if (available_memory < size) {
 80070bc:	693a      	ldr	r2, [r7, #16]
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	429a      	cmp	r2, r3
 80070c2:	d209      	bcs.n	80070d8 <_ZN6tflite26SingleArenaBufferAllocator12AllocateTempEjj+0x40>
    MicroPrintf(
 80070c4:	68ba      	ldr	r2, [r7, #8]
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	1ad3      	subs	r3, r2, r3
 80070ca:	693a      	ldr	r2, [r7, #16]
 80070cc:	68b9      	ldr	r1, [r7, #8]
 80070ce:	480d      	ldr	r0, [pc, #52]	; (8007104 <_ZN6tflite26SingleArenaBufferAllocator12AllocateTempEjj+0x6c>)
 80070d0:	f004 fb9e 	bl	800b810 <_Z11MicroPrintfPKcz>
        "Failed to allocate temp memory. Requested: %u, "
        "available %u, missing: %u",
        size, available_memory, size - available_memory);
    return nullptr;
 80070d4:	2300      	movs	r3, #0
 80070d6:	e010      	b.n	80070fa <_ZN6tflite26SingleArenaBufferAllocator12AllocateTempEjj+0x62>
  }
  temp_ = aligned_result + size;
 80070d8:	697a      	ldr	r2, [r7, #20]
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	441a      	add	r2, r3
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	619a      	str	r2, [r3, #24]
  temp_buffer_ptr_check_sum_ ^= (reinterpret_cast<intptr_t>(aligned_result));
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	69da      	ldr	r2, [r3, #28]
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	405a      	eors	r2, r3
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	61da      	str	r2, [r3, #28]
  temp_buffer_count_++;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	6a1b      	ldr	r3, [r3, #32]
 80070f2:	1c5a      	adds	r2, r3, #1
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	621a      	str	r2, [r3, #32]
  return aligned_result;
 80070f8:	697b      	ldr	r3, [r7, #20]
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3718      	adds	r7, #24
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}
 8007102:	bf00      	nop
 8007104:	080220d0 	.word	0x080220d0

08007108 <_ZN6tflite26SingleArenaBufferAllocator14DeallocateTempEPh>:

void SingleArenaBufferAllocator::DeallocateTemp(uint8_t* temp_buf) {
 8007108:	b480      	push	{r7}
 800710a:	b083      	sub	sp, #12
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	6039      	str	r1, [r7, #0]
  temp_buffer_ptr_check_sum_ ^= (reinterpret_cast<intptr_t>(temp_buf));
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	69da      	ldr	r2, [r3, #28]
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	405a      	eors	r2, r3
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	61da      	str	r2, [r3, #28]
  temp_buffer_count_--;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6a1b      	ldr	r3, [r3, #32]
 8007122:	1e5a      	subs	r2, r3, #1
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	621a      	str	r2, [r3, #32]
}
 8007128:	bf00      	nop
 800712a:	370c      	adds	r7, #12
 800712c:	46bd      	mov	sp, r7
 800712e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007132:	4770      	bx	lr

08007134 <_ZN6tflite26SingleArenaBufferAllocator20IsAllTempDeallocatedEv>:

bool SingleArenaBufferAllocator::IsAllTempDeallocated() {
 8007134:	b580      	push	{r7, lr}
 8007136:	b082      	sub	sp, #8
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  if (temp_buffer_count_ != 0 || temp_buffer_ptr_check_sum_ != 0) {
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6a1b      	ldr	r3, [r3, #32]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d103      	bne.n	800714c <_ZN6tflite26SingleArenaBufferAllocator20IsAllTempDeallocatedEv+0x18>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	69db      	ldr	r3, [r3, #28]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d00e      	beq.n	800716a <_ZN6tflite26SingleArenaBufferAllocator20IsAllTempDeallocatedEv+0x36>
    MicroPrintf(
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6a19      	ldr	r1, [r3, #32]
        "Number of allocated temp buffers: %d. Checksum passing status: %d",
        temp_buffer_count_, !temp_buffer_ptr_check_sum_);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	69db      	ldr	r3, [r3, #28]
    MicroPrintf(
 8007154:	2b00      	cmp	r3, #0
 8007156:	bf0c      	ite	eq
 8007158:	2301      	moveq	r3, #1
 800715a:	2300      	movne	r3, #0
 800715c:	b2db      	uxtb	r3, r3
 800715e:	461a      	mov	r2, r3
 8007160:	4804      	ldr	r0, [pc, #16]	; (8007174 <_ZN6tflite26SingleArenaBufferAllocator20IsAllTempDeallocatedEv+0x40>)
 8007162:	f004 fb55 	bl	800b810 <_Z11MicroPrintfPKcz>
    return false;
 8007166:	2300      	movs	r3, #0
 8007168:	e000      	b.n	800716c <_ZN6tflite26SingleArenaBufferAllocator20IsAllTempDeallocatedEv+0x38>
  }
  return true;
 800716a:	2301      	movs	r3, #1
}
 800716c:	4618      	mov	r0, r3
 800716e:	3708      	adds	r7, #8
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}
 8007174:	0802211c 	.word	0x0802211c

08007178 <_ZN6tflite26SingleArenaBufferAllocator20ResetTempAllocationsEv>:

TfLiteStatus SingleArenaBufferAllocator::ResetTempAllocations() {
 8007178:	b580      	push	{r7, lr}
 800717a:	b082      	sub	sp, #8
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  // TODO(b/209453859): enable error check based on IsAllTempDeallocated after
  // all AllocateTemp have been paird with DeallocateTemp
  if (!IsAllTempDeallocated()) {
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	3310      	adds	r3, #16
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	4798      	blx	r3
 800718c:	4603      	mov	r3, r0
 800718e:	f083 0301 	eor.w	r3, r3, #1
 8007192:	b2db      	uxtb	r3, r3
 8007194:	2b00      	cmp	r3, #0
 8007196:	d004      	beq.n	80071a2 <_ZN6tflite26SingleArenaBufferAllocator20ResetTempAllocationsEv+0x2a>
    MicroPrintf(
 8007198:	4806      	ldr	r0, [pc, #24]	; (80071b4 <_ZN6tflite26SingleArenaBufferAllocator20ResetTempAllocationsEv+0x3c>)
 800719a:	f004 fb39 	bl	800b810 <_Z11MicroPrintfPKcz>
        "All temp buffers must be freed before calling ResetTempAllocations()");
    return kTfLiteError;
 800719e:	2301      	movs	r3, #1
 80071a0:	e004      	b.n	80071ac <_ZN6tflite26SingleArenaBufferAllocator20ResetTempAllocationsEv+0x34>
  }
  temp_ = head_;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	691a      	ldr	r2, [r3, #16]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	619a      	str	r2, [r3, #24]
  return kTfLiteOk;
 80071aa:	2300      	movs	r3, #0
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3708      	adds	r7, #8
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}
 80071b4:	08022160 	.word	0x08022160

080071b8 <_ZNK6tflite26SingleArenaBufferAllocator23GetOverlayMemoryAddressEv>:

uint8_t* SingleArenaBufferAllocator::GetOverlayMemoryAddress() const {
 80071b8:	b480      	push	{r7}
 80071ba:	b083      	sub	sp, #12
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  return buffer_head_;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	689b      	ldr	r3, [r3, #8]
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	370c      	adds	r7, #12
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr

080071d0 <_ZNK6tflite26SingleArenaBufferAllocator25GetNonPersistentUsedBytesEv>:

size_t SingleArenaBufferAllocator::GetNonPersistentUsedBytes() const {
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b084      	sub	sp, #16
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  return std::max(head_ - buffer_head_, temp_ - buffer_head_);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	691a      	ldr	r2, [r3, #16]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	689b      	ldr	r3, [r3, #8]
 80071e0:	1ad3      	subs	r3, r2, r3
 80071e2:	60bb      	str	r3, [r7, #8]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	699a      	ldr	r2, [r3, #24]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	689b      	ldr	r3, [r3, #8]
 80071ec:	1ad3      	subs	r3, r2, r3
 80071ee:	60fb      	str	r3, [r7, #12]
 80071f0:	f107 020c 	add.w	r2, r7, #12
 80071f4:	f107 0308 	add.w	r3, r7, #8
 80071f8:	4611      	mov	r1, r2
 80071fa:	4618      	mov	r0, r3
 80071fc:	f000 f833 	bl	8007266 <_ZSt3maxIiERKT_S2_S2_>
 8007200:	4603      	mov	r3, r0
 8007202:	681b      	ldr	r3, [r3, #0]
}
 8007204:	4618      	mov	r0, r3
 8007206:	3710      	adds	r7, #16
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}

0800720c <_ZNK6tflite26SingleArenaBufferAllocator22GetPersistentUsedBytesEv>:

size_t SingleArenaBufferAllocator::GetPersistentUsedBytes() const {
 800720c:	b480      	push	{r7}
 800720e:	b083      	sub	sp, #12
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  return buffer_tail_ - tail_;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	68da      	ldr	r2, [r3, #12]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	695b      	ldr	r3, [r3, #20]
 800721c:	1ad3      	subs	r3, r2, r3
}
 800721e:	4618      	mov	r0, r3
 8007220:	370c      	adds	r7, #12
 8007222:	46bd      	mov	sp, r7
 8007224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007228:	4770      	bx	lr

0800722a <_ZThn4_NK6tflite26SingleArenaBufferAllocator22GetPersistentUsedBytesEv>:
  size_t GetPersistentUsedBytes() const override;
 800722a:	f1a0 0004 	sub.w	r0, r0, #4
 800722e:	f7ff bfed 	b.w	800720c <_ZNK6tflite26SingleArenaBufferAllocator22GetPersistentUsedBytesEv>

08007232 <_ZNK6tflite26SingleArenaBufferAllocator18GetAvailableMemoryEj>:

size_t SingleArenaBufferAllocator::GetAvailableMemory(size_t alignment) const {
 8007232:	b580      	push	{r7, lr}
 8007234:	b084      	sub	sp, #16
 8007236:	af00      	add	r7, sp, #0
 8007238:	6078      	str	r0, [r7, #4]
 800723a:	6039      	str	r1, [r7, #0]
  uint8_t* const aligned_temp = AlignPointerUp(temp_, alignment);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	699b      	ldr	r3, [r3, #24]
 8007240:	6839      	ldr	r1, [r7, #0]
 8007242:	4618      	mov	r0, r3
 8007244:	f000 f92c 	bl	80074a0 <_ZN6tflite14AlignPointerUpEPhj>
 8007248:	60f8      	str	r0, [r7, #12]
  uint8_t* const aligned_tail = AlignPointerDown(tail_, alignment);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	695b      	ldr	r3, [r3, #20]
 800724e:	6839      	ldr	r1, [r7, #0]
 8007250:	4618      	mov	r0, r3
 8007252:	f000 f93e 	bl	80074d2 <_ZN6tflite16AlignPointerDownEPhj>
 8007256:	60b8      	str	r0, [r7, #8]
  return aligned_tail - aligned_temp;
 8007258:	68ba      	ldr	r2, [r7, #8]
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	1ad3      	subs	r3, r2, r3
}
 800725e:	4618      	mov	r0, r3
 8007260:	3710      	adds	r7, #16
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}

08007266 <_ZSt3maxIiERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8007266:	b480      	push	{r7}
 8007268:	b083      	sub	sp, #12
 800726a:	af00      	add	r7, sp, #0
 800726c:	6078      	str	r0, [r7, #4]
 800726e:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	429a      	cmp	r2, r3
 800727a:	da01      	bge.n	8007280 <_ZSt3maxIiERKT_S2_S2_+0x1a>
	return __b;
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	e000      	b.n	8007282 <_ZSt3maxIiERKT_S2_S2_+0x1c>
      return __a;
 8007280:	687b      	ldr	r3, [r7, #4]
    }
 8007282:	4618      	mov	r0, r3
 8007284:	370c      	adds	r7, #12
 8007286:	46bd      	mov	sp, r7
 8007288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728c:	4770      	bx	lr
	...

08007290 <DebugLog>:

#ifndef TF_LITE_STRIP_ERROR_STRINGS
#include <cstdio>
#endif

extern "C" void DebugLog(const char* format, va_list args) {
 8007290:	b580      	push	{r7, lr}
 8007292:	b082      	sub	sp, #8
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	6039      	str	r1, [r7, #0]
#ifndef TF_LITE_STRIP_ERROR_STRINGS
  // Reusing TF_LITE_STRIP_ERROR_STRINGS to disable DebugLog completely to get
  // maximum reduction in binary size. This is because we have DebugLog calls
  // via TF_LITE_CHECK that are not stubbed out by TF_LITE_REPORT_ERROR.
  vfprintf(stderr, format, args);
 800729a:	4b06      	ldr	r3, [pc, #24]	; (80072b4 <DebugLog+0x24>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	68db      	ldr	r3, [r3, #12]
 80072a0:	683a      	ldr	r2, [r7, #0]
 80072a2:	6879      	ldr	r1, [r7, #4]
 80072a4:	4618      	mov	r0, r3
 80072a6:	f018 fe07 	bl	801feb8 <vfiprintf>
#endif
}
 80072aa:	bf00      	nop
 80072ac:	3708      	adds	r7, #8
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}
 80072b2:	bf00      	nop
 80072b4:	2400006c 	.word	0x2400006c

080072b8 <_ZN6tflite12MicroContextdlEPv>:
  TF_LITE_REMOVE_VIRTUAL_DELETE
 80072b8:	b480      	push	{r7}
 80072ba:	b083      	sub	sp, #12
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	bf00      	nop
 80072c2:	370c      	adds	r7, #12
 80072c4:	46bd      	mov	sp, r7
 80072c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ca:	4770      	bx	lr

080072cc <_ZN6tflite25MicroArenaBufferAlignmentEv>:
namespace tflite {

// The default buffer alignment requirement.
// We align tensor buffers to 16-byte boundaries, since this is a common
// requirement for SIMD extensions.
constexpr int MicroArenaBufferAlignment() { return 16; }
 80072cc:	b480      	push	{r7}
 80072ce:	af00      	add	r7, sp, #0
 80072d0:	2310      	movs	r3, #16
 80072d2:	4618      	mov	r0, r3
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr

080072dc <_ZN6tflite12MicroContextC1Ev>:
class MicroContext {
 80072dc:	b480      	push	{r7}
 80072de:	b083      	sub	sp, #12
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
 80072e4:	4a04      	ldr	r2, [pc, #16]	; (80072f8 <_ZN6tflite12MicroContextC1Ev+0x1c>)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	601a      	str	r2, [r3, #0]
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	4618      	mov	r0, r3
 80072ee:	370c      	adds	r7, #12
 80072f0:	46bd      	mov	sp, r7
 80072f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f6:	4770      	bx	lr
 80072f8:	08028e50 	.word	0x08028e50

080072fc <_ZN6tflite12MicroContextD1Ev>:
  virtual ~MicroContext() = default;
 80072fc:	b480      	push	{r7}
 80072fe:	b083      	sub	sp, #12
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	4a04      	ldr	r2, [pc, #16]	; (8007318 <_ZN6tflite12MicroContextD1Ev+0x1c>)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	601a      	str	r2, [r3, #0]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	4618      	mov	r0, r3
 800730e:	370c      	adds	r7, #12
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr
 8007318:	08028e50 	.word	0x08028e50

0800731c <_ZN6tflite12MicroContextD0Ev>:
 800731c:	b580      	push	{r7, lr}
 800731e:	b082      	sub	sp, #8
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f7ff ffe9 	bl	80072fc <_ZN6tflite12MicroContextD1Ev>
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f7ff ffc4 	bl	80072b8 <_ZN6tflite12MicroContextdlEPv>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	4618      	mov	r0, r3
 8007334:	3708      	adds	r7, #8
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}

0800733a <_ZNK6tflite8SubGraph9operatorsEv>:
  const ::flatbuffers::Vector<::flatbuffers::Offset<tflite::Operator>> *operators() const {
 800733a:	b580      	push	{r7, lr}
 800733c:	b082      	sub	sp, #8
 800733e:	af00      	add	r7, sp, #0
 8007340:	6078      	str	r0, [r7, #4]
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<tflite::Operator>> *>(VT_OPERATORS);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	210a      	movs	r1, #10
 8007346:	4618      	mov	r0, r3
 8007348:	f000 f84f 	bl	80073ea <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEmEEmEET_t>
 800734c:	4603      	mov	r3, r0
  }
 800734e:	4618      	mov	r0, r3
 8007350:	3708      	adds	r7, #8
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}

08007356 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>:
float FlexbufferWrapper::ElementAsFloat(size_t i) const {
  return static_cast<float>(FlexbufferWrapper::ElementAsDouble(i));
}

// TODO(b/192589496): Ops must always be there. Remove this function when fixed
uint32_t NumSubgraphOperators(const SubGraph* subgraph) {
 8007356:	b580      	push	{r7, lr}
 8007358:	b082      	sub	sp, #8
 800735a:	af00      	add	r7, sp, #0
 800735c:	6078      	str	r0, [r7, #4]
  if (subgraph->operators() != nullptr) {
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f7ff ffeb 	bl	800733a <_ZNK6tflite8SubGraph9operatorsEv>
 8007364:	4603      	mov	r3, r0
 8007366:	2b00      	cmp	r3, #0
 8007368:	bf14      	ite	ne
 800736a:	2301      	movne	r3, #1
 800736c:	2300      	moveq	r3, #0
 800736e:	b2db      	uxtb	r3, r3
 8007370:	2b00      	cmp	r3, #0
 8007372:	d008      	beq.n	8007386 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE+0x30>
    return subgraph->operators()->size();
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f7ff ffe0 	bl	800733a <_ZNK6tflite8SubGraph9operatorsEv>
 800737a:	4603      	mov	r3, r0
 800737c:	4618      	mov	r0, r3
 800737e:	f000 f844 	bl	800740a <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEmE4sizeEv>
 8007382:	4603      	mov	r3, r0
 8007384:	e000      	b.n	8007388 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE+0x32>
  } else {
    return 0;
 8007386:	2300      	movs	r3, #0
  }
}
 8007388:	4618      	mov	r0, r3
 800738a:	3708      	adds	r7, #8
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}

08007390 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>:
// TODO(b/192589496): Ops must always be there. Remove this function when fixed
uint32_t NumSubgraphOperators(const Model* model, int subgraph_idx) {
 8007390:	b580      	push	{r7, lr}
 8007392:	b084      	sub	sp, #16
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	6039      	str	r1, [r7, #0]
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f7fa fafd 	bl	800199a <_ZNK6tflite5Model9subgraphsEv>
 80073a0:	4602      	mov	r2, r0
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	4619      	mov	r1, r3
 80073a6:	4610      	mov	r0, r2
 80073a8:	f7fa fcde 	bl	8001d68 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmE3GetEm>
 80073ac:	60f8      	str	r0, [r7, #12]
  return NumSubgraphOperators(subgraph);
 80073ae:	68f8      	ldr	r0, [r7, #12]
 80073b0:	f7ff ffd1 	bl	8007356 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
 80073b4:	4603      	mov	r3, r0
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3710      	adds	r7, #16
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}

080073be <_ZN6tflite33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIlmEE>:

TfLiteIntArray* FlatBufferVectorToTfLiteTypeArray(
    const flatbuffers::Vector<int32_t>* flatbuffer_array) {
 80073be:	b480      	push	{r7}
 80073c0:	b083      	sub	sp, #12
 80073c2:	af00      	add	r7, sp, #0
 80073c4:	6078      	str	r0, [r7, #4]
  // On little-endian machines, TfLiteIntArray happens to have the same memory
  // layout as flatbuffers:Vector<int32_t>, so we can reinterpret_cast the
  // flatbuffer vector and avoid a copy and malloc.
  // TODO(b/188459715): audit this usage of const_cast.
  return const_cast<TfLiteIntArray*>(
      reinterpret_cast<const TfLiteIntArray*>(flatbuffer_array));
 80073c6:	687b      	ldr	r3, [r7, #4]
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	370c      	adds	r7, #12
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr

080073d4 <_ZN6tflite33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIfmEE>:

TfLiteFloatArray* FlatBufferVectorToTfLiteTypeArray(
    const flatbuffers::Vector<float>* flatbuffer_array) {
 80073d4:	b480      	push	{r7}
 80073d6:	b083      	sub	sp, #12
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  // On little-endian machines, TfLiteFloatArray happens to have the same memory
  // layout as flatbuffers:Vector<float>, so we can reinterpret_cast the
  // flatbuffer vector and avoid a copy and malloc.
  // TODO(b/188459715): audit this usage of const_cast.
  return const_cast<TfLiteFloatArray*>(
      reinterpret_cast<const TfLiteFloatArray*>(flatbuffer_array));
 80073dc:	687b      	ldr	r3, [r7, #4]
}
 80073de:	4618      	mov	r0, r3
 80073e0:	370c      	adds	r7, #12
 80073e2:	46bd      	mov	sp, r7
 80073e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e8:	4770      	bx	lr

080073ea <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEmEEmEET_t>:
  P GetPointer(voffset_t field) const {
 80073ea:	b580      	push	{r7, lr}
 80073ec:	b082      	sub	sp, #8
 80073ee:	af00      	add	r7, sp, #0
 80073f0:	6078      	str	r0, [r7, #4]
 80073f2:	460b      	mov	r3, r1
 80073f4:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P, OffsetSize>(field);
 80073f6:	887b      	ldrh	r3, [r7, #2]
 80073f8:	4619      	mov	r1, r3
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f000 f813 	bl	8007426 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEmEEmEET_t>
 8007400:	4603      	mov	r3, r0
  }
 8007402:	4618      	mov	r0, r3
 8007404:	3708      	adds	r7, #8
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}

0800740a <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEmE4sizeEv>:
  SizeT size() const { return EndianScalar(length_); }
 800740a:	b580      	push	{r7, lr}
 800740c:	b082      	sub	sp, #8
 800740e:	af00      	add	r7, sp, #0
 8007410:	6078      	str	r0, [r7, #4]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4618      	mov	r0, r3
 8007418:	f7fa fc16 	bl	8001c48 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800741c:	4603      	mov	r3, r0
 800741e:	4618      	mov	r0, r3
 8007420:	3708      	adds	r7, #8
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}

08007426 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEmEEmEET_t>:
  P GetPointer(voffset_t field) {
 8007426:	b580      	push	{r7, lr}
 8007428:	b084      	sub	sp, #16
 800742a:	af00      	add	r7, sp, #0
 800742c:	6078      	str	r0, [r7, #4]
 800742e:	460b      	mov	r3, r1
 8007430:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8007432:	887b      	ldrh	r3, [r7, #2]
 8007434:	4619      	mov	r1, r3
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f7fa fa72 	bl	8001920 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800743c:	4603      	mov	r3, r0
 800743e:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8007440:	687a      	ldr	r2, [r7, #4]
 8007442:	89fb      	ldrh	r3, [r7, #14]
 8007444:	4413      	add	r3, r2
 8007446:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8007448:	89fb      	ldrh	r3, [r7, #14]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d006      	beq.n	800745c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEmEEmEET_t+0x36>
 800744e:	68b8      	ldr	r0, [r7, #8]
 8007450:	f7fa fc21 	bl	8001c96 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8007454:	4602      	mov	r2, r0
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	4413      	add	r3, r2
                        : nullptr;
 800745a:	e000      	b.n	800745e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEmEEmEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 800745c:	2300      	movs	r3, #0
  }
 800745e:	4618      	mov	r0, r3
 8007460:	3710      	adds	r7, #16
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}

08007466 <_ZNK6tflite6Tensor5shapeEv>:
  const ::flatbuffers::Vector<int32_t> *shape() const {
 8007466:	b580      	push	{r7, lr}
 8007468:	b082      	sub	sp, #8
 800746a:	af00      	add	r7, sp, #0
 800746c:	6078      	str	r0, [r7, #4]
    return GetPointer<const ::flatbuffers::Vector<int32_t> *>(VT_SHAPE);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2104      	movs	r1, #4
 8007472:	4618      	mov	r0, r3
 8007474:	f7fa fc1d 	bl	8001cb2 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlmEEmEET_t>
 8007478:	4603      	mov	r3, r0
  }
 800747a:	4618      	mov	r0, r3
 800747c:	3708      	adds	r7, #8
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}

08007482 <_ZNK6tflite6Tensor4typeEv>:
  tflite::TensorType type() const {
 8007482:	b580      	push	{r7, lr}
 8007484:	b082      	sub	sp, #8
 8007486:	af00      	add	r7, sp, #0
 8007488:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::TensorType>(GetField<int8_t>(VT_TYPE, 0));
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2200      	movs	r2, #0
 800748e:	2106      	movs	r1, #6
 8007490:	4618      	mov	r0, r3
 8007492:	f7fc fb58 	bl	8003b46 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8007496:	4603      	mov	r3, r0
  }
 8007498:	4618      	mov	r0, r3
 800749a:	3708      	adds	r7, #8
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}

080074a0 <_ZN6tflite14AlignPointerUpEPhj>:
#include "tensorflow/lite/micro/tflite_bridge/flatbuffer_conversions_bridge.h"
#include "tensorflow/lite/schema/schema_generated.h"

namespace tflite {

uint8_t* AlignPointerUp(uint8_t* data, size_t alignment) {
 80074a0:	b480      	push	{r7}
 80074a2:	b085      	sub	sp, #20
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
 80074a8:	6039      	str	r1, [r7, #0]
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	60fb      	str	r3, [r7, #12]
  uint8_t* aligned_result = reinterpret_cast<uint8_t*>(
      ((data_as_uintptr_t + (alignment - 1)) / alignment) * alignment);
 80074ae:	683a      	ldr	r2, [r7, #0]
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	4413      	add	r3, r2
 80074b4:	1e5a      	subs	r2, r3, #1
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80074bc:	683a      	ldr	r2, [r7, #0]
 80074be:	fb02 f303 	mul.w	r3, r2, r3
  uint8_t* aligned_result = reinterpret_cast<uint8_t*>(
 80074c2:	60bb      	str	r3, [r7, #8]
  return aligned_result;
 80074c4:	68bb      	ldr	r3, [r7, #8]
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3714      	adds	r7, #20
 80074ca:	46bd      	mov	sp, r7
 80074cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d0:	4770      	bx	lr

080074d2 <_ZN6tflite16AlignPointerDownEPhj>:

uint8_t* AlignPointerDown(uint8_t* data, size_t alignment) {
 80074d2:	b480      	push	{r7}
 80074d4:	b085      	sub	sp, #20
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	6078      	str	r0, [r7, #4]
 80074da:	6039      	str	r1, [r7, #0]
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	60fb      	str	r3, [r7, #12]
  uint8_t* aligned_result =
      reinterpret_cast<uint8_t*>((data_as_uintptr_t / alignment) * alignment);
 80074e0:	68fa      	ldr	r2, [r7, #12]
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80074e8:	683a      	ldr	r2, [r7, #0]
 80074ea:	fb02 f303 	mul.w	r3, r2, r3
  uint8_t* aligned_result =
 80074ee:	60bb      	str	r3, [r7, #8]
  return aligned_result;
 80074f0:	68bb      	ldr	r3, [r7, #8]
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	3714      	adds	r7, #20
 80074f6:	46bd      	mov	sp, r7
 80074f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fc:	4770      	bx	lr

080074fe <_ZN6tflite11AlignSizeUpEjj>:

size_t AlignSizeUp(size_t size, size_t alignment) {
 80074fe:	b480      	push	{r7}
 8007500:	b085      	sub	sp, #20
 8007502:	af00      	add	r7, sp, #0
 8007504:	6078      	str	r0, [r7, #4]
 8007506:	6039      	str	r1, [r7, #0]
  size_t aligned_size = (((size + (alignment - 1)) / alignment) * alignment);
 8007508:	683a      	ldr	r2, [r7, #0]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	4413      	add	r3, r2
 800750e:	1e5a      	subs	r2, r3, #1
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	fbb2 f2f3 	udiv	r2, r2, r3
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	fb02 f303 	mul.w	r3, r2, r3
 800751c:	60fb      	str	r3, [r7, #12]
  return aligned_size;
 800751e:	68fb      	ldr	r3, [r7, #12]
}
 8007520:	4618      	mov	r0, r3
 8007522:	3714      	adds	r7, #20
 8007524:	46bd      	mov	sp, r7
 8007526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752a:	4770      	bx	lr

0800752c <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>:

TfLiteStatus TfLiteTypeSizeOf(TfLiteType type, size_t* size) {
 800752c:	b480      	push	{r7}
 800752e:	b083      	sub	sp, #12
 8007530:	af00      	add	r7, sp, #0
 8007532:	4603      	mov	r3, r0
 8007534:	6039      	str	r1, [r7, #0]
 8007536:	71fb      	strb	r3, [r7, #7]
  switch (type) {
 8007538:	79fb      	ldrb	r3, [r7, #7]
 800753a:	3b01      	subs	r3, #1
 800753c:	2b12      	cmp	r3, #18
 800753e:	d869      	bhi.n	8007614 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xe8>
 8007540:	a201      	add	r2, pc, #4	; (adr r2, 8007548 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x1c>)
 8007542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007546:	bf00      	nop
 8007548:	080075a5 	.word	0x080075a5
 800754c:	080075bd 	.word	0x080075bd
 8007550:	080075cd 	.word	0x080075cd
 8007554:	080075dd 	.word	0x080075dd
 8007558:	08007615 	.word	0x08007615
 800755c:	080075ed 	.word	0x080075ed
 8007560:	080075b5 	.word	0x080075b5
 8007564:	080075fd 	.word	0x080075fd
 8007568:	080075d5 	.word	0x080075d5
 800756c:	08007595 	.word	0x08007595
 8007570:	080075ad 	.word	0x080075ad
 8007574:	08007605 	.word	0x08007605
 8007578:	080075e5 	.word	0x080075e5
 800757c:	080075f5 	.word	0x080075f5
 8007580:	08007615 	.word	0x08007615
 8007584:	080075c5 	.word	0x080075c5
 8007588:	08007615 	.word	0x08007615
 800758c:	0800760d 	.word	0x0800760d
 8007590:	0800759d 	.word	0x0800759d
    case kTfLiteFloat16:
      *size = sizeof(int16_t);
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	2202      	movs	r2, #2
 8007598:	601a      	str	r2, [r3, #0]
      break;
 800759a:	e03d      	b.n	8007618 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xec>
    case kTfLiteBFloat16:
      *size = sizeof(int16_t);
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	2202      	movs	r2, #2
 80075a0:	601a      	str	r2, [r3, #0]
      break;
 80075a2:	e039      	b.n	8007618 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xec>
    case kTfLiteFloat32:
      *size = sizeof(float);
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	2204      	movs	r2, #4
 80075a8:	601a      	str	r2, [r3, #0]
      break;
 80075aa:	e035      	b.n	8007618 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xec>
    case kTfLiteFloat64:
      *size = sizeof(double);
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	2208      	movs	r2, #8
 80075b0:	601a      	str	r2, [r3, #0]
      break;
 80075b2:	e031      	b.n	8007618 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xec>
    case kTfLiteInt16:
      *size = sizeof(int16_t);
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	2202      	movs	r2, #2
 80075b8:	601a      	str	r2, [r3, #0]
      break;
 80075ba:	e02d      	b.n	8007618 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xec>
    case kTfLiteInt32:
      *size = sizeof(int32_t);
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	2204      	movs	r2, #4
 80075c0:	601a      	str	r2, [r3, #0]
      break;
 80075c2:	e029      	b.n	8007618 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xec>
    case kTfLiteUInt32:
      *size = sizeof(uint32_t);
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	2204      	movs	r2, #4
 80075c8:	601a      	str	r2, [r3, #0]
      break;
 80075ca:	e025      	b.n	8007618 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xec>
    case kTfLiteUInt8:
      *size = sizeof(uint8_t);
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	2201      	movs	r2, #1
 80075d0:	601a      	str	r2, [r3, #0]
      break;
 80075d2:	e021      	b.n	8007618 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xec>
    case kTfLiteInt8:
      *size = sizeof(int8_t);
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	2201      	movs	r2, #1
 80075d8:	601a      	str	r2, [r3, #0]
      break;
 80075da:	e01d      	b.n	8007618 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xec>
    case kTfLiteInt64:
      *size = sizeof(int64_t);
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	2208      	movs	r2, #8
 80075e0:	601a      	str	r2, [r3, #0]
      break;
 80075e2:	e019      	b.n	8007618 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xec>
    case kTfLiteUInt64:
      *size = sizeof(uint64_t);
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	2208      	movs	r2, #8
 80075e8:	601a      	str	r2, [r3, #0]
      break;
 80075ea:	e015      	b.n	8007618 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xec>
    case kTfLiteBool:
      *size = sizeof(bool);
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	2201      	movs	r2, #1
 80075f0:	601a      	str	r2, [r3, #0]
      break;
 80075f2:	e011      	b.n	8007618 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xec>
    case kTfLiteResource:
      *size = sizeof(int32_t);
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	2204      	movs	r2, #4
 80075f8:	601a      	str	r2, [r3, #0]
      break;
 80075fa:	e00d      	b.n	8007618 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xec>
    case kTfLiteComplex64:
      *size = sizeof(float) * 2;
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	2208      	movs	r2, #8
 8007600:	601a      	str	r2, [r3, #0]
      break;
 8007602:	e009      	b.n	8007618 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xec>
    case kTfLiteComplex128:
      *size = sizeof(double) * 2;
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	2210      	movs	r2, #16
 8007608:	601a      	str	r2, [r3, #0]
      break;
 800760a:	e005      	b.n	8007618 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xec>
    case kTfLiteInt4:
      *size = sizeof(int8_t);
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	2201      	movs	r2, #1
 8007610:	601a      	str	r2, [r3, #0]
      break;
 8007612:	e001      	b.n	8007618 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xec>
    default:
      return kTfLiteError;
 8007614:	2301      	movs	r3, #1
 8007616:	e000      	b.n	800761a <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xee>
  }
  return kTfLiteOk;
 8007618:	2300      	movs	r3, #0
}
 800761a:	4618      	mov	r0, r3
 800761c:	370c      	adds	r7, #12
 800761e:	46bd      	mov	sp, r7
 8007620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007624:	4770      	bx	lr
 8007626:	bf00      	nop

08007628 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_>:

TfLiteStatus BytesRequiredForTensor(const tflite::Tensor& flatbuffer_tensor,
                                    size_t* bytes, size_t* type_size) {
 8007628:	b580      	push	{r7, lr}
 800762a:	b088      	sub	sp, #32
 800762c:	af00      	add	r7, sp, #0
 800762e:	60f8      	str	r0, [r7, #12]
 8007630:	60b9      	str	r1, [r7, #8]
 8007632:	607a      	str	r2, [r7, #4]
  int element_count = 1;
 8007634:	2301      	movs	r3, #1
 8007636:	61fb      	str	r3, [r7, #28]
  // If flatbuffer_tensor.shape == nullptr, then flatbuffer_tensor is a scalar
  // so has 1 element.
  if (flatbuffer_tensor.shape() != nullptr) {
 8007638:	68f8      	ldr	r0, [r7, #12]
 800763a:	f7ff ff14 	bl	8007466 <_ZNK6tflite6Tensor5shapeEv>
 800763e:	4603      	mov	r3, r0
 8007640:	2b00      	cmp	r3, #0
 8007642:	bf14      	ite	ne
 8007644:	2301      	movne	r3, #1
 8007646:	2300      	moveq	r3, #0
 8007648:	b2db      	uxtb	r3, r3
 800764a:	2b00      	cmp	r3, #0
 800764c:	d022      	beq.n	8007694 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_+0x6c>
    for (size_t n = 0; n < flatbuffer_tensor.shape()->size(); ++n) {
 800764e:	2300      	movs	r3, #0
 8007650:	61bb      	str	r3, [r7, #24]
 8007652:	e00f      	b.n	8007674 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_+0x4c>
      element_count *= flatbuffer_tensor.shape()->Get(n);
 8007654:	68f8      	ldr	r0, [r7, #12]
 8007656:	f7ff ff06 	bl	8007466 <_ZNK6tflite6Tensor5shapeEv>
 800765a:	4603      	mov	r3, r0
 800765c:	69b9      	ldr	r1, [r7, #24]
 800765e:	4618      	mov	r0, r3
 8007660:	f7fc fb08 	bl	8003c74 <_ZNK11flatbuffers6VectorIlmE3GetEm>
 8007664:	4602      	mov	r2, r0
 8007666:	69fb      	ldr	r3, [r7, #28]
 8007668:	fb02 f303 	mul.w	r3, r2, r3
 800766c:	61fb      	str	r3, [r7, #28]
    for (size_t n = 0; n < flatbuffer_tensor.shape()->size(); ++n) {
 800766e:	69bb      	ldr	r3, [r7, #24]
 8007670:	3301      	adds	r3, #1
 8007672:	61bb      	str	r3, [r7, #24]
 8007674:	68f8      	ldr	r0, [r7, #12]
 8007676:	f7ff fef6 	bl	8007466 <_ZNK6tflite6Tensor5shapeEv>
 800767a:	4603      	mov	r3, r0
 800767c:	4618      	mov	r0, r3
 800767e:	f7fa fb56 	bl	8001d2e <_ZNK11flatbuffers6VectorIlmE4sizeEv>
 8007682:	4602      	mov	r2, r0
 8007684:	69bb      	ldr	r3, [r7, #24]
 8007686:	4293      	cmp	r3, r2
 8007688:	bf34      	ite	cc
 800768a:	2301      	movcc	r3, #1
 800768c:	2300      	movcs	r3, #0
 800768e:	b2db      	uxtb	r3, r3
 8007690:	2b00      	cmp	r3, #0
 8007692:	d1df      	bne.n	8007654 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_+0x2c>
    }
  }

  TfLiteType tf_lite_type;
  TF_LITE_ENSURE_STATUS(
 8007694:	68f8      	ldr	r0, [r7, #12]
 8007696:	f7ff fef4 	bl	8007482 <_ZNK6tflite6Tensor4typeEv>
 800769a:	4603      	mov	r3, r0
 800769c:	461a      	mov	r2, r3
 800769e:	f107 0315 	add.w	r3, r7, #21
 80076a2:	4619      	mov	r1, r3
 80076a4:	4610      	mov	r0, r2
 80076a6:	f00d f8f7 	bl	8014898 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteType>
 80076aa:	4603      	mov	r3, r0
 80076ac:	75fb      	strb	r3, [r7, #23]
 80076ae:	7dfb      	ldrb	r3, [r7, #23]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d001      	beq.n	80076b8 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_+0x90>
 80076b4:	7dfb      	ldrb	r3, [r7, #23]
 80076b6:	e013      	b.n	80076e0 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_+0xb8>
      ConvertTensorType(flatbuffer_tensor.type(), &tf_lite_type));
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(tf_lite_type, type_size));
 80076b8:	7d7b      	ldrb	r3, [r7, #21]
 80076ba:	6879      	ldr	r1, [r7, #4]
 80076bc:	4618      	mov	r0, r3
 80076be:	f7ff ff35 	bl	800752c <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
 80076c2:	4603      	mov	r3, r0
 80076c4:	75bb      	strb	r3, [r7, #22]
 80076c6:	7dbb      	ldrb	r3, [r7, #22]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d001      	beq.n	80076d0 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_+0xa8>
 80076cc:	7dbb      	ldrb	r3, [r7, #22]
 80076ce:	e007      	b.n	80076e0 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_+0xb8>
  *bytes = element_count * (*type_size);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	69fa      	ldr	r2, [r7, #28]
 80076d6:	fb03 f202 	mul.w	r2, r3, r2
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 80076de:	2300      	movs	r3, #0
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3720      	adds	r7, #32
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}

080076e8 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>:

TfLiteStatus TfLiteEvalTensorByteLength(const TfLiteEvalTensor* eval_tensor,
                                        size_t* out_bytes) {
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b086      	sub	sp, #24
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
 80076f0:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(out_bytes != nullptr);
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d101      	bne.n	80076fc <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x14>
 80076f8:	f018 f9b2 	bl	801fa60 <abort>

  int element_count = 1;
 80076fc:	2301      	movs	r3, #1
 80076fe:	617b      	str	r3, [r7, #20]
  // If eval_tensor->dims == nullptr, then tensor is a scalar so has 1 element.
  if (eval_tensor->dims != nullptr) {
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	685b      	ldr	r3, [r3, #4]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d015      	beq.n	8007734 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x4c>
    for (int n = 0; n < eval_tensor->dims->size; ++n) {
 8007708:	2300      	movs	r3, #0
 800770a:	613b      	str	r3, [r7, #16]
 800770c:	e00c      	b.n	8007728 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x40>
      element_count *= eval_tensor->dims->data[n];
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	685a      	ldr	r2, [r3, #4]
 8007712:	693b      	ldr	r3, [r7, #16]
 8007714:	009b      	lsls	r3, r3, #2
 8007716:	4413      	add	r3, r2
 8007718:	685a      	ldr	r2, [r3, #4]
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	fb02 f303 	mul.w	r3, r2, r3
 8007720:	617b      	str	r3, [r7, #20]
    for (int n = 0; n < eval_tensor->dims->size; ++n) {
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	3301      	adds	r3, #1
 8007726:	613b      	str	r3, [r7, #16]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	685b      	ldr	r3, [r3, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	693a      	ldr	r2, [r7, #16]
 8007730:	429a      	cmp	r2, r3
 8007732:	dbec      	blt.n	800770e <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x26>
    }
  }
  size_t type_size;
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(eval_tensor->type, &type_size));
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	7a1b      	ldrb	r3, [r3, #8]
 8007738:	f107 0208 	add.w	r2, r7, #8
 800773c:	4611      	mov	r1, r2
 800773e:	4618      	mov	r0, r3
 8007740:	f7ff fef4 	bl	800752c <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
 8007744:	4603      	mov	r3, r0
 8007746:	73fb      	strb	r3, [r7, #15]
 8007748:	7bfb      	ldrb	r3, [r7, #15]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d001      	beq.n	8007752 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x6a>
 800774e:	7bfb      	ldrb	r3, [r7, #15]
 8007750:	e006      	b.n	8007760 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x78>
  *out_bytes = element_count * type_size;
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	68ba      	ldr	r2, [r7, #8]
 8007756:	fb03 f202 	mul.w	r2, r3, r2
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800775e:	2300      	movs	r3, #0
}
 8007760:	4618      	mov	r0, r3
 8007762:	3718      	adds	r7, #24
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}

08007768 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8007768:	b480      	push	{r7}
 800776a:	b083      	sub	sp, #12
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
 8007770:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	681a      	ldr	r2, [r3, #0]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	429a      	cmp	r2, r3
 800777c:	d201      	bcs.n	8007782 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	e000      	b.n	8007784 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8007782:	687b      	ldr	r3, [r7, #4]
    }
 8007784:	4618      	mov	r0, r3
 8007786:	370c      	adds	r7, #12
 8007788:	46bd      	mov	sp, r7
 800778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778e:	4770      	bx	lr

08007790 <_ZNK6tflite6Tensor11is_variableEv>:
  bool is_variable() const {
 8007790:	b580      	push	{r7, lr}
 8007792:	b082      	sub	sp, #8
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
    return GetField<uint8_t>(VT_IS_VARIABLE, 0) != 0;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2200      	movs	r2, #0
 800779c:	210e      	movs	r1, #14
 800779e:	4618      	mov	r0, r3
 80077a0:	f7fc f984 	bl	8003aac <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 80077a4:	4603      	mov	r3, r0
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	bf14      	ite	ne
 80077aa:	2301      	movne	r3, #1
 80077ac:	2300      	moveq	r3, #0
 80077ae:	b2db      	uxtb	r3, r3
  }
 80077b0:	4618      	mov	r0, r3
 80077b2:	3708      	adds	r7, #8
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}

080077b8 <_ZNK6tflite12OperatorCode12builtin_codeEv>:
  tflite::BuiltinOperator builtin_code() const {
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b082      	sub	sp, #8
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::BuiltinOperator>(GetField<int32_t>(VT_BUILTIN_CODE, 0));
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2200      	movs	r2, #0
 80077c4:	210a      	movs	r1, #10
 80077c6:	4618      	mov	r0, r3
 80077c8:	f7fc f99f 	bl	8003b0a <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 80077cc:	4603      	mov	r3, r0
  }
 80077ce:	4618      	mov	r0, r3
 80077d0:	3708      	adds	r7, #8
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}

080077d6 <_ZNK6tflite8Operator12opcode_indexEv>:
  uint32_t opcode_index() const {
 80077d6:	b580      	push	{r7, lr}
 80077d8:	b082      	sub	sp, #8
 80077da:	af00      	add	r7, sp, #0
 80077dc:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_OPCODE_INDEX, 0);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2200      	movs	r2, #0
 80077e2:	2104      	movs	r1, #4
 80077e4:	4618      	mov	r0, r3
 80077e6:	f7fa fa74 	bl	8001cd2 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 80077ea:	4603      	mov	r3, r0
  }
 80077ec:	4618      	mov	r0, r3
 80077ee:	3708      	adds	r7, #8
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}

080077f4 <_ZNK6tflite8Operator6inputsEv>:
  const ::flatbuffers::Vector<int32_t> *inputs() const {
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b082      	sub	sp, #8
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
    return GetPointer<const ::flatbuffers::Vector<int32_t> *>(VT_INPUTS);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2106      	movs	r1, #6
 8007800:	4618      	mov	r0, r3
 8007802:	f7fa fa56 	bl	8001cb2 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlmEEmEET_t>
 8007806:	4603      	mov	r3, r0
  }
 8007808:	4618      	mov	r0, r3
 800780a:	3708      	adds	r7, #8
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}

08007810 <_ZNK6tflite8Operator7outputsEv>:
  const ::flatbuffers::Vector<int32_t> *outputs() const {
 8007810:	b580      	push	{r7, lr}
 8007812:	b082      	sub	sp, #8
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
    return GetPointer<const ::flatbuffers::Vector<int32_t> *>(VT_OUTPUTS);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2108      	movs	r1, #8
 800781c:	4618      	mov	r0, r3
 800781e:	f7fa fa48 	bl	8001cb2 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlmEEmEET_t>
 8007822:	4603      	mov	r3, r0
  }
 8007824:	4618      	mov	r0, r3
 8007826:	3708      	adds	r7, #8
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}

0800782c <_ZNK6tflite8Operator13intermediatesEv>:
  const ::flatbuffers::Vector<int32_t> *intermediates() const {
 800782c:	b580      	push	{r7, lr}
 800782e:	b082      	sub	sp, #8
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
    return GetPointer<const ::flatbuffers::Vector<int32_t> *>(VT_INTERMEDIATES);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2114      	movs	r1, #20
 8007838:	4618      	mov	r0, r3
 800783a:	f7fa fa3a 	bl	8001cb2 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlmEEmEET_t>
 800783e:	4603      	mov	r3, r0
  }
 8007840:	4618      	mov	r0, r3
 8007842:	3708      	adds	r7, #8
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}

08007848 <_ZNK6tflite8SubGraph7tensorsEv>:
  const ::flatbuffers::Vector<::flatbuffers::Offset<tflite::Tensor>> *tensors() const {
 8007848:	b580      	push	{r7, lr}
 800784a:	b082      	sub	sp, #8
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<tflite::Tensor>> *>(VT_TENSORS);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2104      	movs	r1, #4
 8007854:	4618      	mov	r0, r3
 8007856:	f000 fdcd 	bl	80083f4 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEmEEmEET_t>
 800785a:	4603      	mov	r3, r0
  }
 800785c:	4618      	mov	r0, r3
 800785e:	3708      	adds	r7, #8
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}

08007864 <_ZNK6tflite8SubGraph7outputsEv>:
  const ::flatbuffers::Vector<int32_t> *outputs() const {
 8007864:	b580      	push	{r7, lr}
 8007866:	b082      	sub	sp, #8
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
    return GetPointer<const ::flatbuffers::Vector<int32_t> *>(VT_OUTPUTS);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2108      	movs	r1, #8
 8007870:	4618      	mov	r0, r3
 8007872:	f7fa fa1e 	bl	8001cb2 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlmEEmEET_t>
 8007876:	4603      	mov	r3, r0
  }
 8007878:	4618      	mov	r0, r3
 800787a:	3708      	adds	r7, #8
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}

08007880 <_ZNK6tflite6Buffer4dataEv>:
  const ::flatbuffers::Vector<uint8_t> *data() const {
 8007880:	b580      	push	{r7, lr}
 8007882:	b082      	sub	sp, #8
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_DATA);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2104      	movs	r1, #4
 800788c:	4618      	mov	r0, r3
 800788e:	f7fc f8ed 	bl	8003a6c <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIhmEEmEET_t>
 8007892:	4603      	mov	r3, r0
  }
 8007894:	4618      	mov	r0, r3
 8007896:	3708      	adds	r7, #8
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}

0800789c <_ZNK6tflite8Metadata4nameEv>:
  const ::flatbuffers::String *name() const {
 800789c:	b580      	push	{r7, lr}
 800789e:	b082      	sub	sp, #8
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2104      	movs	r1, #4
 80078a8:	4618      	mov	r0, r3
 80078aa:	f7fc f96c 	bl	8003b86 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6StringEmEET_t>
 80078ae:	4603      	mov	r3, r0
  }
 80078b0:	4618      	mov	r0, r3
 80078b2:	3708      	adds	r7, #8
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}

080078b8 <_ZNK6tflite8Metadata6bufferEv>:
  uint32_t buffer() const {
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b082      	sub	sp, #8
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_BUFFER, 0);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2200      	movs	r2, #0
 80078c4:	2106      	movs	r1, #6
 80078c6:	4618      	mov	r0, r3
 80078c8:	f7fa fa03 	bl	8001cd2 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 80078cc:	4603      	mov	r3, r0
  }
 80078ce:	4618      	mov	r0, r3
 80078d0:	3708      	adds	r7, #8
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}

080078d6 <_ZNK6tflite5Model14operator_codesEv>:
  const ::flatbuffers::Vector<::flatbuffers::Offset<tflite::OperatorCode>> *operator_codes() const {
 80078d6:	b580      	push	{r7, lr}
 80078d8:	b082      	sub	sp, #8
 80078da:	af00      	add	r7, sp, #0
 80078dc:	6078      	str	r0, [r7, #4]
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<tflite::OperatorCode>> *>(VT_OPERATOR_CODES);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2106      	movs	r1, #6
 80078e2:	4618      	mov	r0, r3
 80078e4:	f000 fd96 	bl	8008414 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEmEEmEET_t>
 80078e8:	4603      	mov	r3, r0
  }
 80078ea:	4618      	mov	r0, r3
 80078ec:	3708      	adds	r7, #8
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}

080078f2 <_ZNK6tflite5Model7buffersEv>:
  const ::flatbuffers::Vector<::flatbuffers::Offset<tflite::Buffer>> *buffers() const {
 80078f2:	b580      	push	{r7, lr}
 80078f4:	b082      	sub	sp, #8
 80078f6:	af00      	add	r7, sp, #0
 80078f8:	6078      	str	r0, [r7, #4]
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<tflite::Buffer>> *>(VT_BUFFERS);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	210c      	movs	r1, #12
 80078fe:	4618      	mov	r0, r3
 8007900:	f000 fd98 	bl	8008434 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEmEEmEET_t>
 8007904:	4603      	mov	r3, r0
  }
 8007906:	4618      	mov	r0, r3
 8007908:	3708      	adds	r7, #8
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}

0800790e <_ZNK6tflite5Model8metadataEv>:
  const ::flatbuffers::Vector<::flatbuffers::Offset<tflite::Metadata>> *metadata() const {
 800790e:	b580      	push	{r7, lr}
 8007910:	b082      	sub	sp, #8
 8007912:	af00      	add	r7, sp, #0
 8007914:	6078      	str	r0, [r7, #4]
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<tflite::Metadata>> *>(VT_METADATA);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2110      	movs	r1, #16
 800791a:	4618      	mov	r0, r3
 800791c:	f000 fd9a 	bl	8008454 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEmEEmEET_t>
 8007920:	4603      	mov	r3, r0
  }
 8007922:	4618      	mov	r0, r3
 8007924:	3708      	adds	r7, #8
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}

0800792a <_ZN6tflite21AllocationInfoBuilder18UpdateFirstCreatedEPNS_14AllocationInfoEi>:

// Mark the given Allocation info as first created at the specified allocation
// scope count. Only the first creation must be recorded since the allocation
// scope count monotonically increases throughout the lifetime marking process.
void AllocationInfoBuilder::UpdateFirstCreated(AllocationInfo* current,
                                               int allocation_scope_count) {
 800792a:	b580      	push	{r7, lr}
 800792c:	b084      	sub	sp, #16
 800792e:	af00      	add	r7, sp, #0
 8007930:	60f8      	str	r0, [r7, #12]
 8007932:	60b9      	str	r1, [r7, #8]
 8007934:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(current->first_created <= allocation_scope_count);
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	689b      	ldr	r3, [r3, #8]
 800793a:	687a      	ldr	r2, [r7, #4]
 800793c:	429a      	cmp	r2, r3
 800793e:	da01      	bge.n	8007944 <_ZN6tflite21AllocationInfoBuilder18UpdateFirstCreatedEPNS_14AllocationInfoEi+0x1a>
 8007940:	f018 f88e 	bl	801fa60 <abort>
  if (current->first_created == kUninitializedLifetime) {
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	689b      	ldr	r3, [r3, #8]
 8007948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800794c:	d102      	bne.n	8007954 <_ZN6tflite21AllocationInfoBuilder18UpdateFirstCreatedEPNS_14AllocationInfoEi+0x2a>
    current->first_created = allocation_scope_count;
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	687a      	ldr	r2, [r7, #4]
 8007952:	609a      	str	r2, [r3, #8]
  }
}
 8007954:	bf00      	nop
 8007956:	3710      	adds	r7, #16
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}

0800795c <_ZN6tflite21AllocationInfoBuilder14UpdateLastUsedEPNS_14AllocationInfoEi>:

// Mark the given AllocationInfo as last used at the specified allocation scope
// count. Update the last used marker every time, since the allocation scope
// count monotonically increases through the lifetime marking process.
void AllocationInfoBuilder::UpdateLastUsed(AllocationInfo* current,
                                           int allocation_scope_count) {
 800795c:	b580      	push	{r7, lr}
 800795e:	b084      	sub	sp, #16
 8007960:	af00      	add	r7, sp, #0
 8007962:	60f8      	str	r0, [r7, #12]
 8007964:	60b9      	str	r1, [r7, #8]
 8007966:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(current->last_used <= allocation_scope_count);
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	68db      	ldr	r3, [r3, #12]
 800796c:	687a      	ldr	r2, [r7, #4]
 800796e:	429a      	cmp	r2, r3
 8007970:	da01      	bge.n	8007976 <_ZN6tflite21AllocationInfoBuilder14UpdateLastUsedEPNS_14AllocationInfoEi+0x1a>
 8007972:	f018 f875 	bl	801fa60 <abort>
  current->last_used = allocation_scope_count;
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	687a      	ldr	r2, [r7, #4]
 800797a:	60da      	str	r2, [r3, #12]
}
 800797c:	bf00      	nop
 800797e:	3710      	adds	r7, #16
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}

08007984 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE>:

TfLiteStatus AllocationInfoBuilder::MarkSubgraphLifetimesIfNecessary(
    const Operator* op, internal::ScratchBufferRequest* scratch_buffer_requests,
    ScratchBufferHandle* scratch_buffer_handles,
    SubgraphAllocations* allocations) {
 8007984:	b590      	push	{r4, r7, lr}
 8007986:	b08b      	sub	sp, #44	; 0x2c
 8007988:	af02      	add	r7, sp, #8
 800798a:	60f8      	str	r0, [r7, #12]
 800798c:	60b9      	str	r1, [r7, #8]
 800798e:	607a      	str	r2, [r7, #4]
 8007990:	603b      	str	r3, [r7, #0]
  int first_subgraph_index = -1;
 8007992:	f04f 33ff 	mov.w	r3, #4294967295
 8007996:	61fb      	str	r3, [r7, #28]
  int second_subgraph_index = -1;
 8007998:	f04f 33ff 	mov.w	r3, #4294967295
 800799c:	61bb      	str	r3, [r7, #24]
  const OperatorCode* opcode =
      model_->operator_codes()->Get(op->opcode_index());
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4618      	mov	r0, r3
 80079a4:	f7ff ff97 	bl	80078d6 <_ZNK6tflite5Model14operator_codesEv>
 80079a8:	4604      	mov	r4, r0
 80079aa:	68b8      	ldr	r0, [r7, #8]
 80079ac:	f7ff ff13 	bl	80077d6 <_ZNK6tflite8Operator12opcode_indexEv>
 80079b0:	4603      	mov	r3, r0
 80079b2:	4619      	mov	r1, r3
 80079b4:	4620      	mov	r0, r4
 80079b6:	f000 fdc5 	bl	8008544 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEmE3GetEm>
 80079ba:	6178      	str	r0, [r7, #20]
  switch (opcode->builtin_code()) {
 80079bc:	6978      	ldr	r0, [r7, #20]
 80079be:	f7ff fefb 	bl	80077b8 <_ZNK6tflite12OperatorCode12builtin_codeEv>
 80079c2:	4603      	mov	r3, r0
 80079c4:	2b81      	cmp	r3, #129	; 0x81
 80079c6:	d017      	beq.n	80079f8 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x74>
 80079c8:	2b81      	cmp	r3, #129	; 0x81
 80079ca:	dc2f      	bgt.n	8007a2c <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0xa8>
 80079cc:	2b76      	cmp	r3, #118	; 0x76
 80079ce:	d002      	beq.n	80079d6 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x52>
 80079d0:	2b77      	cmp	r3, #119	; 0x77
 80079d2:	d01a      	beq.n	8007a0a <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x86>
      second_subgraph_index =
          op->builtin_options_as_WhileOptions()->body_subgraph_index();
      break;
    }
    default: {
      break;
 80079d4:	e02a      	b.n	8007a2c <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0xa8>
          op->builtin_options_as_IfOptions()->then_subgraph_index();
 80079d6:	68b8      	ldr	r0, [r7, #8]
 80079d8:	f7fb fb26 	bl	8003028 <_ZNK6tflite8Operator28builtin_options_as_IfOptionsEv>
 80079dc:	4603      	mov	r3, r0
 80079de:	4618      	mov	r0, r3
 80079e0:	f7fb fa42 	bl	8002e68 <_ZNK6tflite9IfOptions19then_subgraph_indexEv>
 80079e4:	61f8      	str	r0, [r7, #28]
          op->builtin_options_as_IfOptions()->else_subgraph_index();
 80079e6:	68b8      	ldr	r0, [r7, #8]
 80079e8:	f7fb fb1e 	bl	8003028 <_ZNK6tflite8Operator28builtin_options_as_IfOptionsEv>
 80079ec:	4603      	mov	r3, r0
 80079ee:	4618      	mov	r0, r3
 80079f0:	f7fb fa49 	bl	8002e86 <_ZNK6tflite9IfOptions19else_subgraph_indexEv>
 80079f4:	61b8      	str	r0, [r7, #24]
      break;
 80079f6:	e01a      	b.n	8007a2e <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0xaa>
          op->builtin_options_as_CallOnceOptions()->init_subgraph_index();
 80079f8:	68b8      	ldr	r0, [r7, #8]
 80079fa:	f7fb fb3d 	bl	8003078 <_ZNK6tflite8Operator34builtin_options_as_CallOnceOptionsEv>
 80079fe:	4603      	mov	r3, r0
 8007a00:	4618      	mov	r0, r3
 8007a02:	f7fb fa4f 	bl	8002ea4 <_ZNK6tflite15CallOnceOptions19init_subgraph_indexEv>
 8007a06:	61f8      	str	r0, [r7, #28]
      break;
 8007a08:	e011      	b.n	8007a2e <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0xaa>
          op->builtin_options_as_WhileOptions()->cond_subgraph_index();
 8007a0a:	68b8      	ldr	r0, [r7, #8]
 8007a0c:	f7fb fb20 	bl	8003050 <_ZNK6tflite8Operator31builtin_options_as_WhileOptionsEv>
 8007a10:	4603      	mov	r3, r0
 8007a12:	4618      	mov	r0, r3
 8007a14:	f7fb fa55 	bl	8002ec2 <_ZNK6tflite12WhileOptions19cond_subgraph_indexEv>
 8007a18:	61f8      	str	r0, [r7, #28]
          op->builtin_options_as_WhileOptions()->body_subgraph_index();
 8007a1a:	68b8      	ldr	r0, [r7, #8]
 8007a1c:	f7fb fb18 	bl	8003050 <_ZNK6tflite8Operator31builtin_options_as_WhileOptionsEv>
 8007a20:	4603      	mov	r3, r0
 8007a22:	4618      	mov	r0, r3
 8007a24:	f7fb fa5c 	bl	8002ee0 <_ZNK6tflite12WhileOptions19body_subgraph_indexEv>
 8007a28:	61b8      	str	r0, [r7, #24]
      break;
 8007a2a:	e000      	b.n	8007a2e <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0xaa>
      break;
 8007a2c:	bf00      	nop
    }
  }
  if (first_subgraph_index != -1) {
 8007a2e:	69fb      	ldr	r3, [r7, #28]
 8007a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a34:	d013      	beq.n	8007a5e <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0xda>
    // Enter a new allocation scope for each subgraph.
    allocation_scope_count_++;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	6a1b      	ldr	r3, [r3, #32]
 8007a3a:	1c5a      	adds	r2, r3, #1
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	621a      	str	r2, [r3, #32]
    TF_LITE_ENSURE_STATUS(
 8007a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a42:	9300      	str	r3, [sp, #0]
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	687a      	ldr	r2, [r7, #4]
 8007a48:	69f9      	ldr	r1, [r7, #28]
 8007a4a:	68f8      	ldr	r0, [r7, #12]
 8007a4c:	f000 fa5d 	bl	8007f0a <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE>
 8007a50:	4603      	mov	r3, r0
 8007a52:	74fb      	strb	r3, [r7, #19]
 8007a54:	7cfb      	ldrb	r3, [r7, #19]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d001      	beq.n	8007a5e <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0xda>
 8007a5a:	7cfb      	ldrb	r3, [r7, #19]
 8007a5c:	e018      	b.n	8007a90 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x10c>
        MarkAllocationLifetimes(first_subgraph_index, scratch_buffer_requests,
                                scratch_buffer_handles, allocations));
  }
  if (second_subgraph_index != -1) {
 8007a5e:	69bb      	ldr	r3, [r7, #24]
 8007a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a64:	d013      	beq.n	8007a8e <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x10a>
    // Enter a new allocation scope for each subgraph.
    allocation_scope_count_++;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	6a1b      	ldr	r3, [r3, #32]
 8007a6a:	1c5a      	adds	r2, r3, #1
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	621a      	str	r2, [r3, #32]
    TF_LITE_ENSURE_STATUS(
 8007a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a72:	9300      	str	r3, [sp, #0]
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	687a      	ldr	r2, [r7, #4]
 8007a78:	69b9      	ldr	r1, [r7, #24]
 8007a7a:	68f8      	ldr	r0, [r7, #12]
 8007a7c:	f000 fa45 	bl	8007f0a <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE>
 8007a80:	4603      	mov	r3, r0
 8007a82:	74bb      	strb	r3, [r7, #18]
 8007a84:	7cbb      	ldrb	r3, [r7, #18]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d001      	beq.n	8007a8e <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x10a>
 8007a8a:	7cbb      	ldrb	r3, [r7, #18]
 8007a8c:	e000      	b.n	8007a90 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x10c>
        MarkAllocationLifetimes(second_subgraph_index, scratch_buffer_requests,
                                scratch_buffer_handles, allocations));
  }
  return kTfLiteOk;
 8007a8e:	2300      	movs	r3, #0
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	3724      	adds	r7, #36	; 0x24
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd90      	pop	{r4, r7, pc}

08007a98 <_ZN6tflite21AllocationInfoBuilder20CreateAllocationInfoEi>:

TfLiteStatus AllocationInfoBuilder::CreateAllocationInfo(
    int scratch_buffer_request_count) {
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b086      	sub	sp, #24
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	6039      	str	r1, [r7, #0]
  size_t subgraph_offsets_length = model_->subgraphs()->size() * sizeof(size_t);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f7f9 ff77 	bl	800199a <_ZNK6tflite5Model9subgraphsEv>
 8007aac:	4603      	mov	r3, r0
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f7fa f94b 	bl	8001d4a <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmE4sizeEv>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	009b      	lsls	r3, r3, #2
 8007ab8:	60fb      	str	r3, [r7, #12]
  info_.subgraph_offsets =
      reinterpret_cast<size_t*>(non_persistent_allocator_->AllocateTemp(
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6858      	ldr	r0, [r3, #4]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	685b      	ldr	r3, [r3, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	3308      	adds	r3, #8
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	2204      	movs	r2, #4
 8007aca:	68f9      	ldr	r1, [r7, #12]
 8007acc:	4798      	blx	r3
 8007ace:	4602      	mov	r2, r0
  info_.subgraph_offsets =
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	611a      	str	r2, [r3, #16]
          subgraph_offsets_length, alignof(size_t)));
  if (info_.subgraph_offsets == nullptr) {
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	691b      	ldr	r3, [r3, #16]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d105      	bne.n	8007ae8 <_ZN6tflite21AllocationInfoBuilder20CreateAllocationInfoEi+0x50>
    MicroPrintf(
 8007adc:	68f9      	ldr	r1, [r7, #12]
 8007ade:	4836      	ldr	r0, [pc, #216]	; (8007bb8 <_ZN6tflite21AllocationInfoBuilder20CreateAllocationInfoEi+0x120>)
 8007ae0:	f003 fe96 	bl	800b810 <_Z11MicroPrintfPKcz>
        "Failed to allocate memory for memory planning, %d bytes required",
        subgraph_offsets_length);
    return kTfLiteError;
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	e063      	b.n	8007bb0 <_ZN6tflite21AllocationInfoBuilder20CreateAllocationInfoEi+0x118>
  }
  size_t tensor_count = 0;
 8007ae8:	2300      	movs	r3, #0
 8007aea:	617b      	str	r3, [r7, #20]
  for (size_t subgraph_idx = 0; subgraph_idx < model_->subgraphs()->size();
 8007aec:	2300      	movs	r3, #0
 8007aee:	613b      	str	r3, [r7, #16]
 8007af0:	e01f      	b.n	8007b32 <_ZN6tflite21AllocationInfoBuilder20CreateAllocationInfoEi+0x9a>
       subgraph_idx++) {
    // Add all tensors in each subgraph to the AllocationInfo array. Even weight
    // tensors are added but marked with needs_allocating = false. Including all
    // tensors in the graph here simplifies logic.
    info_.subgraph_offsets[subgraph_idx] = tensor_count;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	691a      	ldr	r2, [r3, #16]
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	009b      	lsls	r3, r3, #2
 8007afa:	4413      	add	r3, r2
 8007afc:	697a      	ldr	r2, [r7, #20]
 8007afe:	601a      	str	r2, [r3, #0]
    tensor_count += model_->subgraphs()->Get(subgraph_idx)->tensors()->size();
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4618      	mov	r0, r3
 8007b06:	f7f9 ff48 	bl	800199a <_ZNK6tflite5Model9subgraphsEv>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	6939      	ldr	r1, [r7, #16]
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f7fa f92a 	bl	8001d68 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmE3GetEm>
 8007b14:	4603      	mov	r3, r0
 8007b16:	4618      	mov	r0, r3
 8007b18:	f7ff fe96 	bl	8007848 <_ZNK6tflite8SubGraph7tensorsEv>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f000 fca8 	bl	8008474 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEmE4sizeEv>
 8007b24:	4602      	mov	r2, r0
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	4413      	add	r3, r2
 8007b2a:	617b      	str	r3, [r7, #20]
  for (size_t subgraph_idx = 0; subgraph_idx < model_->subgraphs()->size();
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	3301      	adds	r3, #1
 8007b30:	613b      	str	r3, [r7, #16]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4618      	mov	r0, r3
 8007b38:	f7f9 ff2f 	bl	800199a <_ZNK6tflite5Model9subgraphsEv>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f7fa f903 	bl	8001d4a <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmE4sizeEv>
 8007b44:	4602      	mov	r2, r0
 8007b46:	693b      	ldr	r3, [r7, #16]
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	bf34      	ite	cc
 8007b4c:	2301      	movcc	r3, #1
 8007b4e:	2300      	movcs	r3, #0
 8007b50:	b2db      	uxtb	r3, r3
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d1cd      	bne.n	8007af2 <_ZN6tflite21AllocationInfoBuilder20CreateAllocationInfoEi+0x5a>
  }
  info_.tensor_count = tensor_count;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	697a      	ldr	r2, [r7, #20]
 8007b5a:	619a      	str	r2, [r3, #24]

  // Scratch buffer allocations follow tensor allocations, so the scratch offset
  // is equal to the number of tensor allocations.
  info_.scratch_offset = tensor_count;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	697a      	ldr	r2, [r7, #20]
 8007b60:	615a      	str	r2, [r3, #20]
  info_.allocation_info_count = tensor_count + scratch_buffer_request_count;
 8007b62:	683a      	ldr	r2, [r7, #0]
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	441a      	add	r2, r3
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	60da      	str	r2, [r3, #12]
  info_.scratch_buffer_count = scratch_buffer_request_count;
 8007b6c:	683a      	ldr	r2, [r7, #0]
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	61da      	str	r2, [r3, #28]
  size_t bytes = sizeof(AllocationInfo) * info_.allocation_info_count;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	68da      	ldr	r2, [r3, #12]
 8007b76:	4613      	mov	r3, r2
 8007b78:	005b      	lsls	r3, r3, #1
 8007b7a:	4413      	add	r3, r2
 8007b7c:	00db      	lsls	r3, r3, #3
 8007b7e:	60bb      	str	r3, [r7, #8]

  // Allocate an array of AllocationInfo structs from the temp section. This
  // struct will be used by AllocationInfoBuilder to find buffer usage.
  info_.allocation_info = reinterpret_cast<AllocationInfo*>(
      non_persistent_allocator_->AllocateTemp(bytes, alignof(AllocationInfo)));
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6858      	ldr	r0, [r3, #4]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	685b      	ldr	r3, [r3, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	3308      	adds	r3, #8
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	2204      	movs	r2, #4
 8007b90:	68b9      	ldr	r1, [r7, #8]
 8007b92:	4798      	blx	r3
 8007b94:	4602      	mov	r2, r0
  info_.allocation_info = reinterpret_cast<AllocationInfo*>(
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	609a      	str	r2, [r3, #8]
  if (info_.allocation_info == nullptr) {
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	689b      	ldr	r3, [r3, #8]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d105      	bne.n	8007bae <_ZN6tflite21AllocationInfoBuilder20CreateAllocationInfoEi+0x116>
    MicroPrintf(
 8007ba2:	68b9      	ldr	r1, [r7, #8]
 8007ba4:	4804      	ldr	r0, [pc, #16]	; (8007bb8 <_ZN6tflite21AllocationInfoBuilder20CreateAllocationInfoEi+0x120>)
 8007ba6:	f003 fe33 	bl	800b810 <_Z11MicroPrintfPKcz>
        "Failed to allocate memory for memory planning, %d bytes required",
        bytes);
    return kTfLiteError;
 8007baa:	2301      	movs	r3, #1
 8007bac:	e000      	b.n	8007bb0 <_ZN6tflite21AllocationInfoBuilder20CreateAllocationInfoEi+0x118>
  }
  return kTfLiteOk;
 8007bae:	2300      	movs	r3, #0
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3718      	adds	r7, #24
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}
 8007bb8:	080221a8 	.word	0x080221a8

08007bbc <_ZN6tflite21AllocationInfoBuilder18FreeAllocationInfoEv>:

TfLiteStatus AllocationInfoBuilder::FreeAllocationInfo() {
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b082      	sub	sp, #8
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
  non_persistent_allocator_->DeallocateTemp(
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6858      	ldr	r0, [r3, #4]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	330c      	adds	r3, #12
 8007bd0:	681b      	ldr	r3, [r3, #0]
      reinterpret_cast<uint8_t*>(info_.allocation_info));
 8007bd2:	687a      	ldr	r2, [r7, #4]
 8007bd4:	6892      	ldr	r2, [r2, #8]
  non_persistent_allocator_->DeallocateTemp(
 8007bd6:	4611      	mov	r1, r2
 8007bd8:	4798      	blx	r3
  non_persistent_allocator_->DeallocateTemp(
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6858      	ldr	r0, [r3, #4]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	685b      	ldr	r3, [r3, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	330c      	adds	r3, #12
 8007be6:	681b      	ldr	r3, [r3, #0]
      reinterpret_cast<uint8_t*>(info_.subgraph_offsets));
 8007be8:	687a      	ldr	r2, [r7, #4]
 8007bea:	6912      	ldr	r2, [r2, #16]
  non_persistent_allocator_->DeallocateTemp(
 8007bec:	4611      	mov	r1, r2
 8007bee:	4798      	blx	r3
  return kTfLiteOk;
 8007bf0:	2300      	movs	r3, #0
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	3708      	adds	r7, #8
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}
	...

08007bfc <_ZN6tflite21AllocationInfoBuilder16ValidateSubgraphEPKNS_8SubGraphEP16TfLiteEvalTensor>:

TfLiteStatus AllocationInfoBuilder::ValidateSubgraph(
    const SubGraph* subgraph, TfLiteEvalTensor* eval_tensors) {
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b08c      	sub	sp, #48	; 0x30
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	60f8      	str	r0, [r7, #12]
 8007c04:	60b9      	str	r1, [r7, #8]
 8007c06:	607a      	str	r2, [r7, #4]
  uint32_t operators_size = NumSubgraphOperators(subgraph);
 8007c08:	68b8      	ldr	r0, [r7, #8]
 8007c0a:	f7ff fba4 	bl	8007356 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
 8007c0e:	6278      	str	r0, [r7, #36]	; 0x24

  for (uint32_t i = 0; i < operators_size; i++) {
 8007c10:	2300      	movs	r3, #0
 8007c12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c14:	e052      	b.n	8007cbc <_ZN6tflite21AllocationInfoBuilder16ValidateSubgraphEPKNS_8SubGraphEP16TfLiteEvalTensor+0xc0>
    const auto op = subgraph->operators()->Get(i);
 8007c16:	68b8      	ldr	r0, [r7, #8]
 8007c18:	f7ff fb8f 	bl	800733a <_ZNK6tflite8SubGraph9operatorsEv>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c20:	4618      	mov	r0, r3
 8007c22:	f000 fc5b 	bl	80084dc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEmE3GetEm>
 8007c26:	6238      	str	r0, [r7, #32]
    for (size_t n = 0;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c2c:	e02d      	b.n	8007c8a <_ZN6tflite21AllocationInfoBuilder16ValidateSubgraphEPKNS_8SubGraphEP16TfLiteEvalTensor+0x8e>
         op->intermediates() != nullptr && n < op->intermediates()->size();
         n++) {
      const int tensor_index = op->intermediates()->Get(n);
 8007c2e:	6a38      	ldr	r0, [r7, #32]
 8007c30:	f7ff fdfc 	bl	800782c <_ZNK6tflite8Operator13intermediatesEv>
 8007c34:	4603      	mov	r3, r0
 8007c36:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f7fc f81b 	bl	8003c74 <_ZNK11flatbuffers6VectorIlmE3GetEm>
 8007c3e:	61f8      	str	r0, [r7, #28]
      size_t tensor_size = -1;
 8007c40:	f04f 33ff 	mov.w	r3, #4294967295
 8007c44:	617b      	str	r3, [r7, #20]
      TF_LITE_ENSURE_STATUS(TfLiteEvalTensorByteLength(
 8007c46:	69fa      	ldr	r2, [r7, #28]
 8007c48:	4613      	mov	r3, r2
 8007c4a:	005b      	lsls	r3, r3, #1
 8007c4c:	4413      	add	r3, r2
 8007c4e:	009b      	lsls	r3, r3, #2
 8007c50:	461a      	mov	r2, r3
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	4413      	add	r3, r2
 8007c56:	f107 0214 	add.w	r2, r7, #20
 8007c5a:	4611      	mov	r1, r2
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f7ff fd43 	bl	80076e8 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
 8007c62:	4603      	mov	r3, r0
 8007c64:	76fb      	strb	r3, [r7, #27]
 8007c66:	7efb      	ldrb	r3, [r7, #27]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d001      	beq.n	8007c70 <_ZN6tflite21AllocationInfoBuilder16ValidateSubgraphEPKNS_8SubGraphEP16TfLiteEvalTensor+0x74>
 8007c6c:	7efb      	ldrb	r3, [r7, #27]
 8007c6e:	e02a      	b.n	8007cc6 <_ZN6tflite21AllocationInfoBuilder16ValidateSubgraphEPKNS_8SubGraphEP16TfLiteEvalTensor+0xca>
          &eval_tensors[tensor_index], &tensor_size));
      if (tensor_size != 0) {
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d006      	beq.n	8007c84 <_ZN6tflite21AllocationInfoBuilder16ValidateSubgraphEPKNS_8SubGraphEP16TfLiteEvalTensor+0x88>
        MicroPrintf(
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	4619      	mov	r1, r3
 8007c7a:	4815      	ldr	r0, [pc, #84]	; (8007cd0 <_ZN6tflite21AllocationInfoBuilder16ValidateSubgraphEPKNS_8SubGraphEP16TfLiteEvalTensor+0xd4>)
 8007c7c:	f003 fdc8 	bl	800b810 <_Z11MicroPrintfPKcz>
            "Does not support intermediate tensor with non-zero size: %d",
            tensor_size);
        return kTfLiteError;
 8007c80:	2301      	movs	r3, #1
 8007c82:	e020      	b.n	8007cc6 <_ZN6tflite21AllocationInfoBuilder16ValidateSubgraphEPKNS_8SubGraphEP16TfLiteEvalTensor+0xca>
    for (size_t n = 0;
 8007c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c86:	3301      	adds	r3, #1
 8007c88:	62bb      	str	r3, [r7, #40]	; 0x28
         op->intermediates() != nullptr && n < op->intermediates()->size();
 8007c8a:	6a38      	ldr	r0, [r7, #32]
 8007c8c:	f7ff fdce 	bl	800782c <_ZNK6tflite8Operator13intermediatesEv>
 8007c90:	4603      	mov	r3, r0
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d00c      	beq.n	8007cb0 <_ZN6tflite21AllocationInfoBuilder16ValidateSubgraphEPKNS_8SubGraphEP16TfLiteEvalTensor+0xb4>
 8007c96:	6a38      	ldr	r0, [r7, #32]
 8007c98:	f7ff fdc8 	bl	800782c <_ZNK6tflite8Operator13intermediatesEv>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	f7fa f845 	bl	8001d2e <_ZNK11flatbuffers6VectorIlmE4sizeEv>
 8007ca4:	4602      	mov	r2, r0
 8007ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d201      	bcs.n	8007cb0 <_ZN6tflite21AllocationInfoBuilder16ValidateSubgraphEPKNS_8SubGraphEP16TfLiteEvalTensor+0xb4>
 8007cac:	2301      	movs	r3, #1
 8007cae:	e000      	b.n	8007cb2 <_ZN6tflite21AllocationInfoBuilder16ValidateSubgraphEPKNS_8SubGraphEP16TfLiteEvalTensor+0xb6>
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d1bb      	bne.n	8007c2e <_ZN6tflite21AllocationInfoBuilder16ValidateSubgraphEPKNS_8SubGraphEP16TfLiteEvalTensor+0x32>
  for (uint32_t i = 0; i < operators_size; i++) {
 8007cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cb8:	3301      	adds	r3, #1
 8007cba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007cbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc0:	429a      	cmp	r2, r3
 8007cc2:	d3a8      	bcc.n	8007c16 <_ZN6tflite21AllocationInfoBuilder16ValidateSubgraphEPKNS_8SubGraphEP16TfLiteEvalTensor+0x1a>
      }
    }
  }
  return kTfLiteOk;
 8007cc4:	2300      	movs	r3, #0
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	3730      	adds	r7, #48	; 0x30
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}
 8007cce:	bf00      	nop
 8007cd0:	080221ec 	.word	0x080221ec

08007cd4 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE>:

TfLiteStatus AllocationInfoBuilder::InitializeAllocationInfo(
    const int32_t* offline_offsets, SubgraphAllocations* allocations) {
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b092      	sub	sp, #72	; 0x48
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	60f8      	str	r0, [r7, #12]
 8007cdc:	60b9      	str	r1, [r7, #8]
 8007cde:	607a      	str	r2, [r7, #4]
  AllocationInfo* allocation_info = info_.allocation_info;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	689b      	ldr	r3, [r3, #8]
 8007ce4:	637b      	str	r3, [r7, #52]	; 0x34
  // Initialize allocation info for every tensor in every subgraph.
  int offline_index = 0;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	647b      	str	r3, [r7, #68]	; 0x44
  for (size_t subgraph_idx = 0; subgraph_idx < model_->subgraphs()->size();
 8007cea:	2300      	movs	r3, #0
 8007cec:	643b      	str	r3, [r7, #64]	; 0x40
 8007cee:	e0c7      	b.n	8007e80 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0x1ac>
       subgraph_idx++) {
    const SubGraph* subgraph = model_->subgraphs()->Get(subgraph_idx);
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f7f9 fe50 	bl	800199a <_ZNK6tflite5Model9subgraphsEv>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f7fa f832 	bl	8001d68 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmE3GetEm>
 8007d04:	62b8      	str	r0, [r7, #40]	; 0x28
    TfLiteEvalTensor* eval_tensors = allocations[subgraph_idx].tensors;
 8007d06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d08:	00db      	lsls	r3, r3, #3
 8007d0a:	687a      	ldr	r2, [r7, #4]
 8007d0c:	4413      	add	r3, r2
 8007d0e:	685b      	ldr	r3, [r3, #4]
 8007d10:	627b      	str	r3, [r7, #36]	; 0x24
    AllocationInfo* subgraph_allocation_info =
        &allocation_info[info_.subgraph_offsets[subgraph_idx]];
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	691a      	ldr	r2, [r3, #16]
 8007d16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d18:	009b      	lsls	r3, r3, #2
 8007d1a:	4413      	add	r3, r2
 8007d1c:	681a      	ldr	r2, [r3, #0]
 8007d1e:	4613      	mov	r3, r2
 8007d20:	005b      	lsls	r3, r3, #1
 8007d22:	4413      	add	r3, r2
 8007d24:	00db      	lsls	r3, r3, #3
 8007d26:	461a      	mov	r2, r3
    AllocationInfo* subgraph_allocation_info =
 8007d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d2a:	4413      	add	r3, r2
 8007d2c:	623b      	str	r3, [r7, #32]

    // Ensure constraints are met.
    TF_LITE_ENSURE_STATUS(ValidateSubgraph(subgraph, eval_tensors));
 8007d2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d32:	68f8      	ldr	r0, [r7, #12]
 8007d34:	f7ff ff62 	bl	8007bfc <_ZN6tflite21AllocationInfoBuilder16ValidateSubgraphEPKNS_8SubGraphEP16TfLiteEvalTensor>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	77fb      	strb	r3, [r7, #31]
 8007d3c:	7ffb      	ldrb	r3, [r7, #31]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d001      	beq.n	8007d46 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0x72>
 8007d42:	7ffb      	ldrb	r3, [r7, #31]
 8007d44:	e0dd      	b.n	8007f02 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0x22e>

    for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 8007d46:	2300      	movs	r3, #0
 8007d48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d4a:	e085      	b.n	8007e58 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0x184>
      AllocationInfo* current = &subgraph_allocation_info[i];
 8007d4c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007d4e:	4613      	mov	r3, r2
 8007d50:	005b      	lsls	r3, r3, #1
 8007d52:	4413      	add	r3, r2
 8007d54:	00db      	lsls	r3, r3, #3
 8007d56:	461a      	mov	r2, r3
 8007d58:	6a3b      	ldr	r3, [r7, #32]
 8007d5a:	4413      	add	r3, r2
 8007d5c:	61bb      	str	r3, [r7, #24]
      current->output_ptr = &(eval_tensors[i].data.data);
 8007d5e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007d60:	4613      	mov	r3, r2
 8007d62:	005b      	lsls	r3, r3, #1
 8007d64:	4413      	add	r3, r2
 8007d66:	009b      	lsls	r3, r3, #2
 8007d68:	461a      	mov	r2, r3
 8007d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d6c:	4413      	add	r3, r2
 8007d6e:	461a      	mov	r2, r3
 8007d70:	69bb      	ldr	r3, [r7, #24]
 8007d72:	605a      	str	r2, [r3, #4]

      TF_LITE_ENSURE_STATUS(
 8007d74:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007d76:	4613      	mov	r3, r2
 8007d78:	005b      	lsls	r3, r3, #1
 8007d7a:	4413      	add	r3, r2
 8007d7c:	009b      	lsls	r3, r3, #2
 8007d7e:	461a      	mov	r2, r3
 8007d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d82:	4413      	add	r3, r2
 8007d84:	69ba      	ldr	r2, [r7, #24]
 8007d86:	4611      	mov	r1, r2
 8007d88:	4618      	mov	r0, r3
 8007d8a:	f7ff fcad 	bl	80076e8 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
 8007d8e:	4603      	mov	r3, r0
 8007d90:	75fb      	strb	r3, [r7, #23]
 8007d92:	7dfb      	ldrb	r3, [r7, #23]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d001      	beq.n	8007d9c <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0xc8>
 8007d98:	7dfb      	ldrb	r3, [r7, #23]
 8007d9a:	e0b2      	b.n	8007f02 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0x22e>
          TfLiteEvalTensorByteLength(&eval_tensors[i], &current->bytes));

      current->first_created = kUninitializedLifetime;
 8007d9c:	69bb      	ldr	r3, [r7, #24]
 8007d9e:	f04f 32ff 	mov.w	r2, #4294967295
 8007da2:	609a      	str	r2, [r3, #8]
      current->last_used = kUninitializedLifetime;
 8007da4:	69bb      	ldr	r3, [r7, #24]
 8007da6:	f04f 32ff 	mov.w	r2, #4294967295
 8007daa:	60da      	str	r2, [r3, #12]
      current->needs_allocating =
          (eval_tensors[i].data.data == nullptr) &&
 8007dac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007dae:	4613      	mov	r3, r2
 8007db0:	005b      	lsls	r3, r3, #1
 8007db2:	4413      	add	r3, r2
 8007db4:	009b      	lsls	r3, r3, #2
 8007db6:	461a      	mov	r2, r3
 8007db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dba:	4413      	add	r3, r2
 8007dbc:	681b      	ldr	r3, [r3, #0]
          (!subgraph->tensors()->Get(i)->is_variable()) &&
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d117      	bne.n	8007df2 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0x11e>
 8007dc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007dc4:	f7ff fd40 	bl	8007848 <_ZNK6tflite8SubGraph7tensorsEv>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f000 fb5f 	bl	8008490 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEmE3GetEm>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	f7ff fcdb 	bl	8007790 <_ZNK6tflite6Tensor11is_variableEv>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	f083 0301 	eor.w	r3, r3, #1
 8007de0:	b2db      	uxtb	r3, r3
          (eval_tensors[i].data.data == nullptr) &&
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d005      	beq.n	8007df2 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0x11e>
          (current->bytes != 0);
 8007de6:	69bb      	ldr	r3, [r7, #24]
 8007de8:	681b      	ldr	r3, [r3, #0]
          (!subgraph->tensors()->Get(i)->is_variable()) &&
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d001      	beq.n	8007df2 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0x11e>
 8007dee:	2201      	movs	r2, #1
 8007df0:	e000      	b.n	8007df4 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0x120>
 8007df2:	2200      	movs	r2, #0
      current->needs_allocating =
 8007df4:	69bb      	ldr	r3, [r7, #24]
 8007df6:	751a      	strb	r2, [r3, #20]
      if (offline_offsets) {
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d025      	beq.n	8007e4a <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0x176>
        current->offline_offset = offline_offsets[offline_index++];
 8007dfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e00:	1c5a      	adds	r2, r3, #1
 8007e02:	647a      	str	r2, [r7, #68]	; 0x44
 8007e04:	009b      	lsls	r3, r3, #2
 8007e06:	68ba      	ldr	r2, [r7, #8]
 8007e08:	4413      	add	r3, r2
 8007e0a:	681a      	ldr	r2, [r3, #0]
 8007e0c:	69bb      	ldr	r3, [r7, #24]
 8007e0e:	611a      	str	r2, [r3, #16]

        // Mark offline planned variable tensors so they can get an offline
        // offset and be handled offline.
        if (subgraph->tensors()->Get(i)->is_variable() &&
 8007e10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e12:	f7ff fd19 	bl	8007848 <_ZNK6tflite8SubGraph7tensorsEv>
 8007e16:	4603      	mov	r3, r0
 8007e18:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f000 fb38 	bl	8008490 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEmE3GetEm>
 8007e20:	4603      	mov	r3, r0
 8007e22:	4618      	mov	r0, r3
 8007e24:	f7ff fcb4 	bl	8007790 <_ZNK6tflite6Tensor11is_variableEv>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d006      	beq.n	8007e3c <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0x168>
            current->offline_offset != kOnlinePlannedBuffer) {
 8007e2e:	69bb      	ldr	r3, [r7, #24]
 8007e30:	691b      	ldr	r3, [r3, #16]
        if (subgraph->tensors()->Get(i)->is_variable() &&
 8007e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e36:	d001      	beq.n	8007e3c <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0x168>
 8007e38:	2301      	movs	r3, #1
 8007e3a:	e000      	b.n	8007e3e <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0x16a>
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d007      	beq.n	8007e52 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0x17e>
          current->needs_allocating = true;
 8007e42:	69bb      	ldr	r3, [r7, #24]
 8007e44:	2201      	movs	r2, #1
 8007e46:	751a      	strb	r2, [r3, #20]
 8007e48:	e003      	b.n	8007e52 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0x17e>
        }
      } else {
        current->offline_offset = kOnlinePlannedBuffer;
 8007e4a:	69bb      	ldr	r3, [r7, #24]
 8007e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8007e50:	611a      	str	r2, [r3, #16]
    for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 8007e52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e54:	3301      	adds	r3, #1
 8007e56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e5a:	f7ff fcf5 	bl	8007848 <_ZNK6tflite8SubGraph7tensorsEv>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	4618      	mov	r0, r3
 8007e62:	f000 fb07 	bl	8008474 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEmE4sizeEv>
 8007e66:	4602      	mov	r2, r0
 8007e68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	bf34      	ite	cc
 8007e6e:	2301      	movcc	r3, #1
 8007e70:	2300      	movcs	r3, #0
 8007e72:	b2db      	uxtb	r3, r3
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	f47f af69 	bne.w	8007d4c <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0x78>
  for (size_t subgraph_idx = 0; subgraph_idx < model_->subgraphs()->size();
 8007e7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e7c:	3301      	adds	r3, #1
 8007e7e:	643b      	str	r3, [r7, #64]	; 0x40
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4618      	mov	r0, r3
 8007e86:	f7f9 fd88 	bl	800199a <_ZNK6tflite5Model9subgraphsEv>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f7f9 ff5c 	bl	8001d4a <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmE4sizeEv>
 8007e92:	4602      	mov	r2, r0
 8007e94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e96:	4293      	cmp	r3, r2
 8007e98:	bf34      	ite	cc
 8007e9a:	2301      	movcc	r3, #1
 8007e9c:	2300      	movcs	r3, #0
 8007e9e:	b2db      	uxtb	r3, r3
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	f47f af25 	bne.w	8007cf0 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0x1c>
      }
    }
  }
  // Initialize allocation info for every scratch buffer.
  AllocationInfo* scratch_allocation_info =
      &allocation_info[info_.scratch_offset];
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	695a      	ldr	r2, [r3, #20]
 8007eaa:	4613      	mov	r3, r2
 8007eac:	005b      	lsls	r3, r3, #1
 8007eae:	4413      	add	r3, r2
 8007eb0:	00db      	lsls	r3, r3, #3
 8007eb2:	461a      	mov	r2, r3
  AllocationInfo* scratch_allocation_info =
 8007eb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007eb6:	4413      	add	r3, r2
 8007eb8:	633b      	str	r3, [r7, #48]	; 0x30
  for (size_t i = 0; i < info_.scratch_buffer_count; i++) {
 8007eba:	2300      	movs	r3, #0
 8007ebc:	63bb      	str	r3, [r7, #56]	; 0x38
 8007ebe:	e01a      	b.n	8007ef6 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0x222>
    AllocationInfo* current = &scratch_allocation_info[i];
 8007ec0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ec2:	4613      	mov	r3, r2
 8007ec4:	005b      	lsls	r3, r3, #1
 8007ec6:	4413      	add	r3, r2
 8007ec8:	00db      	lsls	r3, r3, #3
 8007eca:	461a      	mov	r2, r3
 8007ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ece:	4413      	add	r3, r2
 8007ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
    current->first_created = kUninitializedLifetime;
 8007ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8007ed8:	609a      	str	r2, [r3, #8]
    current->last_used = kUninitializedLifetime;
 8007eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007edc:	f04f 32ff 	mov.w	r2, #4294967295
 8007ee0:	60da      	str	r2, [r3, #12]
    current->needs_allocating = true;
 8007ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ee4:	2201      	movs	r2, #1
 8007ee6:	751a      	strb	r2, [r3, #20]
    current->offline_offset = kOnlinePlannedBuffer;
 8007ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eea:	f04f 32ff 	mov.w	r2, #4294967295
 8007eee:	611a      	str	r2, [r3, #16]
  for (size_t i = 0; i < info_.scratch_buffer_count; i++) {
 8007ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ef2:	3301      	adds	r3, #1
 8007ef4:	63bb      	str	r3, [r7, #56]	; 0x38
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	69db      	ldr	r3, [r3, #28]
 8007efa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007efc:	429a      	cmp	r2, r3
 8007efe:	d3df      	bcc.n	8007ec0 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0x1ec>
  }
  return kTfLiteOk;
 8007f00:	2300      	movs	r3, #0
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3748      	adds	r7, #72	; 0x48
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}

08007f0a <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE>:

TfLiteStatus AllocationInfoBuilder::MarkAllocationLifetimes(
    int subgraph_idx, internal::ScratchBufferRequest* scratch_buffer_requests,
    ScratchBufferHandle* scratch_buffer_handles,
    SubgraphAllocations* allocations) {
 8007f0a:	b580      	push	{r7, lr}
 8007f0c:	b0a4      	sub	sp, #144	; 0x90
 8007f0e:	af02      	add	r7, sp, #8
 8007f10:	60f8      	str	r0, [r7, #12]
 8007f12:	60b9      	str	r1, [r7, #8]
 8007f14:	607a      	str	r2, [r7, #4]
 8007f16:	603b      	str	r3, [r7, #0]
  const SubGraph* subgraph = model_->subgraphs()->Get(subgraph_idx);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f7f9 fd3c 	bl	800199a <_ZNK6tflite5Model9subgraphsEv>
 8007f22:	4602      	mov	r2, r0
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	4619      	mov	r1, r3
 8007f28:	4610      	mov	r0, r2
 8007f2a:	f7f9 ff1d 	bl	8001d68 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmE3GetEm>
 8007f2e:	66b8      	str	r0, [r7, #104]	; 0x68

  AllocationInfo* allocation_info = info_.allocation_info;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	689b      	ldr	r3, [r3, #8]
 8007f34:	667b      	str	r3, [r7, #100]	; 0x64
  // Each subgraph's tensor allocations are in a contiguous block starting at
  // subgraph_offsets_[subgraph index] with one entry per tensor.
  AllocationInfo* subgraph_allocation_info =
      &allocation_info[info_.subgraph_offsets[subgraph_idx]];
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	691a      	ldr	r2, [r3, #16]
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	009b      	lsls	r3, r3, #2
 8007f3e:	4413      	add	r3, r2
 8007f40:	681a      	ldr	r2, [r3, #0]
 8007f42:	4613      	mov	r3, r2
 8007f44:	005b      	lsls	r3, r3, #1
 8007f46:	4413      	add	r3, r2
 8007f48:	00db      	lsls	r3, r3, #3
 8007f4a:	461a      	mov	r2, r3
  AllocationInfo* subgraph_allocation_info =
 8007f4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f4e:	4413      	add	r3, r2
 8007f50:	663b      	str	r3, [r7, #96]	; 0x60

  uint32_t operators_size = NumSubgraphOperators(subgraph);
 8007f52:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8007f54:	f7ff f9ff 	bl	8007356 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
 8007f58:	65f8      	str	r0, [r7, #92]	; 0x5c
  // Mark all inputs as created at the start of the subgraph invocation.
  for (size_t i = 0;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007f60:	e025      	b.n	8007fae <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0xa4>
       subgraph->inputs() != nullptr && i < subgraph->inputs()->size(); ++i) {
    const int tensor_index = subgraph->inputs()->Get(i);
 8007f62:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8007f64:	f7f9 fcfc 	bl	8001960 <_ZNK6tflite8SubGraph6inputsEv>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f7fb fe80 	bl	8003c74 <_ZNK11flatbuffers6VectorIlmE3GetEm>
 8007f74:	6278      	str	r0, [r7, #36]	; 0x24
    AllocationInfo* current = &subgraph_allocation_info[tensor_index];
 8007f76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f78:	4613      	mov	r3, r2
 8007f7a:	005b      	lsls	r3, r3, #1
 8007f7c:	4413      	add	r3, r2
 8007f7e:	00db      	lsls	r3, r3, #3
 8007f80:	461a      	mov	r2, r3
 8007f82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007f84:	4413      	add	r3, r2
 8007f86:	623b      	str	r3, [r7, #32]
    UpdateFirstCreated(current, allocation_scope_count_);
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	6a1b      	ldr	r3, [r3, #32]
 8007f8c:	461a      	mov	r2, r3
 8007f8e:	6a39      	ldr	r1, [r7, #32]
 8007f90:	68f8      	ldr	r0, [r7, #12]
 8007f92:	f7ff fcca 	bl	800792a <_ZN6tflite21AllocationInfoBuilder18UpdateFirstCreatedEPNS_14AllocationInfoEi>
    // This will ensure that the tensors that are inputs to the subgraphs
    // but not used in any ops also have a reasonable lifetime.
    UpdateLastUsed(current, allocation_scope_count_);
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	6a1b      	ldr	r3, [r3, #32]
 8007f9a:	461a      	mov	r2, r3
 8007f9c:	6a39      	ldr	r1, [r7, #32]
 8007f9e:	68f8      	ldr	r0, [r7, #12]
 8007fa0:	f7ff fcdc 	bl	800795c <_ZN6tflite21AllocationInfoBuilder14UpdateLastUsedEPNS_14AllocationInfoEi>
  for (size_t i = 0;
 8007fa4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007fa8:	3301      	adds	r3, #1
 8007faa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
       subgraph->inputs() != nullptr && i < subgraph->inputs()->size(); ++i) {
 8007fae:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8007fb0:	f7f9 fcd6 	bl	8001960 <_ZNK6tflite8SubGraph6inputsEv>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d00d      	beq.n	8007fd6 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0xcc>
 8007fba:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8007fbc:	f7f9 fcd0 	bl	8001960 <_ZNK6tflite8SubGraph6inputsEv>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f7f9 feb3 	bl	8001d2e <_ZNK11flatbuffers6VectorIlmE4sizeEv>
 8007fc8:	4602      	mov	r2, r0
 8007fca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d201      	bcs.n	8007fd6 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0xcc>
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	e000      	b.n	8007fd8 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0xce>
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d1c2      	bne.n	8007f62 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x58>
  }

  for (uint32_t i = 0; i < operators_size; i++) {
 8007fdc:	2300      	movs	r3, #0
 8007fde:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007fe2:	e10c      	b.n	80081fe <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x2f4>
    // Each operator has a new allocation scope.
    allocation_scope_count_++;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	6a1b      	ldr	r3, [r3, #32]
 8007fe8:	1c5a      	adds	r2, r3, #1
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	621a      	str	r2, [r3, #32]
    const auto* op = subgraph->operators()->Get(i);
 8007fee:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8007ff0:	f7ff f9a3 	bl	800733a <_ZNK6tflite8SubGraph9operatorsEv>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f000 fa6e 	bl	80084dc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEmE3GetEm>
 8008000:	6538      	str	r0, [r7, #80]	; 0x50
    // Figure out when the first creation and use of each tensor is.
    for (size_t n = 0; op->outputs() != nullptr && n < op->outputs()->size();
 8008002:	2300      	movs	r3, #0
 8008004:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008006:	e01b      	b.n	8008040 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x136>
         ++n) {
      const int tensor_index = op->outputs()->Get(n);
 8008008:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800800a:	f7ff fc01 	bl	8007810 <_ZNK6tflite8Operator7outputsEv>
 800800e:	4603      	mov	r3, r0
 8008010:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008012:	4618      	mov	r0, r3
 8008014:	f7fb fe2e 	bl	8003c74 <_ZNK11flatbuffers6VectorIlmE3GetEm>
 8008018:	62f8      	str	r0, [r7, #44]	; 0x2c
      AllocationInfo* current = &subgraph_allocation_info[tensor_index];
 800801a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800801c:	4613      	mov	r3, r2
 800801e:	005b      	lsls	r3, r3, #1
 8008020:	4413      	add	r3, r2
 8008022:	00db      	lsls	r3, r3, #3
 8008024:	461a      	mov	r2, r3
 8008026:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008028:	4413      	add	r3, r2
 800802a:	62bb      	str	r3, [r7, #40]	; 0x28
      UpdateFirstCreated(current, allocation_scope_count_);
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	6a1b      	ldr	r3, [r3, #32]
 8008030:	461a      	mov	r2, r3
 8008032:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008034:	68f8      	ldr	r0, [r7, #12]
 8008036:	f7ff fc78 	bl	800792a <_ZN6tflite21AllocationInfoBuilder18UpdateFirstCreatedEPNS_14AllocationInfoEi>
    for (size_t n = 0; op->outputs() != nullptr && n < op->outputs()->size();
 800803a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800803c:	3301      	adds	r3, #1
 800803e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008040:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008042:	f7ff fbe5 	bl	8007810 <_ZNK6tflite8Operator7outputsEv>
 8008046:	4603      	mov	r3, r0
 8008048:	2b00      	cmp	r3, #0
 800804a:	d00c      	beq.n	8008066 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x15c>
 800804c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800804e:	f7ff fbdf 	bl	8007810 <_ZNK6tflite8Operator7outputsEv>
 8008052:	4603      	mov	r3, r0
 8008054:	4618      	mov	r0, r3
 8008056:	f7f9 fe6a 	bl	8001d2e <_ZNK11flatbuffers6VectorIlmE4sizeEv>
 800805a:	4602      	mov	r2, r0
 800805c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800805e:	4293      	cmp	r3, r2
 8008060:	d201      	bcs.n	8008066 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x15c>
 8008062:	2301      	movs	r3, #1
 8008064:	e000      	b.n	8008068 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x15e>
 8008066:	2300      	movs	r3, #0
 8008068:	2b00      	cmp	r3, #0
 800806a:	d1cd      	bne.n	8008008 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0xfe>
    }

    // Keep track of scope count before any subgraphs, so that scratch buffers'
    // lifetime within a control flow op properly overlaps with all subgraphs.
    int start_allocation_scope_count = allocation_scope_count_;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	6a1b      	ldr	r3, [r3, #32]
 8008070:	64fb      	str	r3, [r7, #76]	; 0x4c

    // Control flow operators can invoke subgraphs. Plan these subgraphs
    // before continuing on to the rest of the graph.
    MarkSubgraphLifetimesIfNecessary(op, scratch_buffer_requests,
 8008072:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008076:	9300      	str	r3, [sp, #0]
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	687a      	ldr	r2, [r7, #4]
 800807c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800807e:	68f8      	ldr	r0, [r7, #12]
 8008080:	f7ff fc80 	bl	8007984 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE>
                                     scratch_buffer_handles, allocations);

    // Figure out when the last use of each tensor is.
    for (size_t n = 0; op->inputs() != nullptr && n < op->inputs()->size();
 8008084:	2300      	movs	r3, #0
 8008086:	67bb      	str	r3, [r7, #120]	; 0x78
 8008088:	e01e      	b.n	80080c8 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x1be>
         ++n) {
      const int tensor_index = op->inputs()->Get(n);
 800808a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800808c:	f7ff fbb2 	bl	80077f4 <_ZNK6tflite8Operator6inputsEv>
 8008090:	4603      	mov	r3, r0
 8008092:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8008094:	4618      	mov	r0, r3
 8008096:	f7fb fded 	bl	8003c74 <_ZNK11flatbuffers6VectorIlmE3GetEm>
 800809a:	6378      	str	r0, [r7, #52]	; 0x34
      // Optional bias tensors can have an index of -1 when they are omitted.
      if (tensor_index >= 0) {
 800809c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800809e:	2b00      	cmp	r3, #0
 80080a0:	db0f      	blt.n	80080c2 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x1b8>
        AllocationInfo* current = &subgraph_allocation_info[tensor_index];
 80080a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80080a4:	4613      	mov	r3, r2
 80080a6:	005b      	lsls	r3, r3, #1
 80080a8:	4413      	add	r3, r2
 80080aa:	00db      	lsls	r3, r3, #3
 80080ac:	461a      	mov	r2, r3
 80080ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80080b0:	4413      	add	r3, r2
 80080b2:	633b      	str	r3, [r7, #48]	; 0x30
        // No need to update creation since it is either marked by the subgraph
        // or producer op, or it is not part of the memory plan (weight, bias
        // tensor).
        UpdateLastUsed(current, allocation_scope_count_);
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	6a1b      	ldr	r3, [r3, #32]
 80080b8:	461a      	mov	r2, r3
 80080ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80080bc:	68f8      	ldr	r0, [r7, #12]
 80080be:	f7ff fc4d 	bl	800795c <_ZN6tflite21AllocationInfoBuilder14UpdateLastUsedEPNS_14AllocationInfoEi>
    for (size_t n = 0; op->inputs() != nullptr && n < op->inputs()->size();
 80080c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80080c4:	3301      	adds	r3, #1
 80080c6:	67bb      	str	r3, [r7, #120]	; 0x78
 80080c8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80080ca:	f7ff fb93 	bl	80077f4 <_ZNK6tflite8Operator6inputsEv>
 80080ce:	4603      	mov	r3, r0
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d00c      	beq.n	80080ee <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x1e4>
 80080d4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80080d6:	f7ff fb8d 	bl	80077f4 <_ZNK6tflite8Operator6inputsEv>
 80080da:	4603      	mov	r3, r0
 80080dc:	4618      	mov	r0, r3
 80080de:	f7f9 fe26 	bl	8001d2e <_ZNK11flatbuffers6VectorIlmE4sizeEv>
 80080e2:	4602      	mov	r2, r0
 80080e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d201      	bcs.n	80080ee <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x1e4>
 80080ea:	2301      	movs	r3, #1
 80080ec:	e000      	b.n	80080f0 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x1e6>
 80080ee:	2300      	movs	r3, #0
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d1ca      	bne.n	800808a <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x180>
      }
    }
    for (size_t n = 0; op->outputs() != nullptr && n < op->outputs()->size();
 80080f4:	2300      	movs	r3, #0
 80080f6:	677b      	str	r3, [r7, #116]	; 0x74
 80080f8:	e01b      	b.n	8008132 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x228>
         ++n) {
      const int tensor_index = op->outputs()->Get(n);
 80080fa:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80080fc:	f7ff fb88 	bl	8007810 <_ZNK6tflite8Operator7outputsEv>
 8008100:	4603      	mov	r3, r0
 8008102:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8008104:	4618      	mov	r0, r3
 8008106:	f7fb fdb5 	bl	8003c74 <_ZNK11flatbuffers6VectorIlmE3GetEm>
 800810a:	63f8      	str	r0, [r7, #60]	; 0x3c
      AllocationInfo* current = &subgraph_allocation_info[tensor_index];
 800810c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800810e:	4613      	mov	r3, r2
 8008110:	005b      	lsls	r3, r3, #1
 8008112:	4413      	add	r3, r2
 8008114:	00db      	lsls	r3, r3, #3
 8008116:	461a      	mov	r2, r3
 8008118:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800811a:	4413      	add	r3, r2
 800811c:	63bb      	str	r3, [r7, #56]	; 0x38
      UpdateLastUsed(current, allocation_scope_count_);
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	6a1b      	ldr	r3, [r3, #32]
 8008122:	461a      	mov	r2, r3
 8008124:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008126:	68f8      	ldr	r0, [r7, #12]
 8008128:	f7ff fc18 	bl	800795c <_ZN6tflite21AllocationInfoBuilder14UpdateLastUsedEPNS_14AllocationInfoEi>
    for (size_t n = 0; op->outputs() != nullptr && n < op->outputs()->size();
 800812c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800812e:	3301      	adds	r3, #1
 8008130:	677b      	str	r3, [r7, #116]	; 0x74
 8008132:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008134:	f7ff fb6c 	bl	8007810 <_ZNK6tflite8Operator7outputsEv>
 8008138:	4603      	mov	r3, r0
 800813a:	2b00      	cmp	r3, #0
 800813c:	d00c      	beq.n	8008158 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x24e>
 800813e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008140:	f7ff fb66 	bl	8007810 <_ZNK6tflite8Operator7outputsEv>
 8008144:	4603      	mov	r3, r0
 8008146:	4618      	mov	r0, r3
 8008148:	f7f9 fdf1 	bl	8001d2e <_ZNK11flatbuffers6VectorIlmE4sizeEv>
 800814c:	4602      	mov	r2, r0
 800814e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008150:	4293      	cmp	r3, r2
 8008152:	d201      	bcs.n	8008158 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x24e>
 8008154:	2301      	movs	r3, #1
 8008156:	e000      	b.n	800815a <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x250>
 8008158:	2300      	movs	r3, #0
 800815a:	2b00      	cmp	r3, #0
 800815c:	d1cd      	bne.n	80080fa <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x1f0>
    // Mark thse lifetime of scratch buffers belonging to the current node. This
    // operation is O(N * M) where N is the total number of visited nodes and M
    // is the total number of scratch buffers.
    // TODO(b/217794030): Optimize this memory planning code.
    AllocationInfo* scratch_allocation_info =
        &allocation_info[info_.scratch_offset];
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	695a      	ldr	r2, [r3, #20]
 8008162:	4613      	mov	r3, r2
 8008164:	005b      	lsls	r3, r3, #1
 8008166:	4413      	add	r3, r2
 8008168:	00db      	lsls	r3, r3, #3
 800816a:	461a      	mov	r2, r3
    AllocationInfo* scratch_allocation_info =
 800816c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800816e:	4413      	add	r3, r2
 8008170:	64bb      	str	r3, [r7, #72]	; 0x48
    for (size_t scratch_idx = 0; scratch_idx < info_.scratch_buffer_count;
 8008172:	2300      	movs	r3, #0
 8008174:	673b      	str	r3, [r7, #112]	; 0x70
 8008176:	e038      	b.n	80081ea <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x2e0>
         scratch_idx++) {
      internal::ScratchBufferRequest request =
          scratch_buffer_requests[scratch_idx];
 8008178:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800817a:	4613      	mov	r3, r2
 800817c:	005b      	lsls	r3, r3, #1
 800817e:	4413      	add	r3, r2
 8008180:	009b      	lsls	r3, r3, #2
 8008182:	461a      	mov	r2, r3
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	441a      	add	r2, r3
      internal::ScratchBufferRequest request =
 8008188:	f107 0314 	add.w	r3, r7, #20
 800818c:	ca07      	ldmia	r2, {r0, r1, r2}
 800818e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
      AllocationInfo* current = &scratch_allocation_info[scratch_idx];
 8008192:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008194:	4613      	mov	r3, r2
 8008196:	005b      	lsls	r3, r3, #1
 8008198:	4413      	add	r3, r2
 800819a:	00db      	lsls	r3, r3, #3
 800819c:	461a      	mov	r2, r3
 800819e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081a0:	4413      	add	r3, r2
 80081a2:	647b      	str	r3, [r7, #68]	; 0x44
      if (request.node_idx == static_cast<int>(i) &&
 80081a4:	69ba      	ldr	r2, [r7, #24]
 80081a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80081aa:	429a      	cmp	r2, r3
 80081ac:	d11a      	bne.n	80081e4 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x2da>
          request.subgraph_idx == static_cast<int>(subgraph_idx)) {
 80081ae:	69fb      	ldr	r3, [r7, #28]
      if (request.node_idx == static_cast<int>(i) &&
 80081b0:	68ba      	ldr	r2, [r7, #8]
 80081b2:	429a      	cmp	r2, r3
 80081b4:	d116      	bne.n	80081e4 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x2da>
        ScratchBufferHandle* current_handle =
            &(scratch_buffer_handles[scratch_idx]);
 80081b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80081b8:	009b      	lsls	r3, r3, #2
        ScratchBufferHandle* current_handle =
 80081ba:	683a      	ldr	r2, [r7, #0]
 80081bc:	4413      	add	r3, r2
 80081be:	643b      	str	r3, [r7, #64]	; 0x40
        current->output_ptr = reinterpret_cast<void**>(&current_handle->data);
 80081c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80081c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081c4:	605a      	str	r2, [r3, #4]
        current->bytes = request.bytes;
 80081c6:	697a      	ldr	r2, [r7, #20]
 80081c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081ca:	601a      	str	r2, [r3, #0]
        UpdateFirstCreated(current, start_allocation_scope_count);
 80081cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80081ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80081d0:	68f8      	ldr	r0, [r7, #12]
 80081d2:	f7ff fbaa 	bl	800792a <_ZN6tflite21AllocationInfoBuilder18UpdateFirstCreatedEPNS_14AllocationInfoEi>
        UpdateLastUsed(current, allocation_scope_count_);
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	6a1b      	ldr	r3, [r3, #32]
 80081da:	461a      	mov	r2, r3
 80081dc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80081de:	68f8      	ldr	r0, [r7, #12]
 80081e0:	f7ff fbbc 	bl	800795c <_ZN6tflite21AllocationInfoBuilder14UpdateLastUsedEPNS_14AllocationInfoEi>
    for (size_t scratch_idx = 0; scratch_idx < info_.scratch_buffer_count;
 80081e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80081e6:	3301      	adds	r3, #1
 80081e8:	673b      	str	r3, [r7, #112]	; 0x70
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	69db      	ldr	r3, [r3, #28]
 80081ee:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80081f0:	429a      	cmp	r2, r3
 80081f2:	d3c1      	bcc.n	8008178 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x26e>
  for (uint32_t i = 0; i < operators_size; i++) {
 80081f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80081f8:	3301      	adds	r3, #1
 80081fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80081fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008202:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008204:	429a      	cmp	r2, r3
 8008206:	f4ff aeed 	bcc.w	8007fe4 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0xda>
      }
    }
  }

  // Mark all outputs as persistent to the end of the subgraph invocation.
  for (size_t i = 0;
 800820a:	2300      	movs	r3, #0
 800820c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800820e:	e022      	b.n	8008256 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x34c>
       subgraph->outputs() != nullptr && i < subgraph->outputs()->size(); ++i) {
    const int tensor_index = subgraph->outputs()->Get(i);
 8008210:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8008212:	f7ff fb27 	bl	8007864 <_ZNK6tflite8SubGraph7outputsEv>
 8008216:	4603      	mov	r3, r0
 8008218:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800821a:	4618      	mov	r0, r3
 800821c:	f7fb fd2a 	bl	8003c74 <_ZNK11flatbuffers6VectorIlmE3GetEm>
 8008220:	65b8      	str	r0, [r7, #88]	; 0x58
    AllocationInfo* current = &subgraph_allocation_info[tensor_index];
 8008222:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008224:	4613      	mov	r3, r2
 8008226:	005b      	lsls	r3, r3, #1
 8008228:	4413      	add	r3, r2
 800822a:	00db      	lsls	r3, r3, #3
 800822c:	461a      	mov	r2, r3
 800822e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008230:	4413      	add	r3, r2
 8008232:	657b      	str	r3, [r7, #84]	; 0x54
    // Make sure to assign the First created value of the subgraph output
    // This will handle the case where the subgraph is empty. This helps
    // ensure all tensors have valid lifetimes before those are used by the
    // memory planner.
    UpdateFirstCreated(current, allocation_scope_count_);
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	6a1b      	ldr	r3, [r3, #32]
 8008238:	461a      	mov	r2, r3
 800823a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800823c:	68f8      	ldr	r0, [r7, #12]
 800823e:	f7ff fb74 	bl	800792a <_ZN6tflite21AllocationInfoBuilder18UpdateFirstCreatedEPNS_14AllocationInfoEi>
    UpdateLastUsed(current, allocation_scope_count_);
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	6a1b      	ldr	r3, [r3, #32]
 8008246:	461a      	mov	r2, r3
 8008248:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800824a:	68f8      	ldr	r0, [r7, #12]
 800824c:	f7ff fb86 	bl	800795c <_ZN6tflite21AllocationInfoBuilder14UpdateLastUsedEPNS_14AllocationInfoEi>
  for (size_t i = 0;
 8008250:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008252:	3301      	adds	r3, #1
 8008254:	66fb      	str	r3, [r7, #108]	; 0x6c
       subgraph->outputs() != nullptr && i < subgraph->outputs()->size(); ++i) {
 8008256:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8008258:	f7ff fb04 	bl	8007864 <_ZNK6tflite8SubGraph7outputsEv>
 800825c:	4603      	mov	r3, r0
 800825e:	2b00      	cmp	r3, #0
 8008260:	d00c      	beq.n	800827c <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x372>
 8008262:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8008264:	f7ff fafe 	bl	8007864 <_ZNK6tflite8SubGraph7outputsEv>
 8008268:	4603      	mov	r3, r0
 800826a:	4618      	mov	r0, r3
 800826c:	f7f9 fd5f 	bl	8001d2e <_ZNK11flatbuffers6VectorIlmE4sizeEv>
 8008270:	4602      	mov	r2, r0
 8008272:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008274:	4293      	cmp	r3, r2
 8008276:	d201      	bcs.n	800827c <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x372>
 8008278:	2301      	movs	r3, #1
 800827a:	e000      	b.n	800827e <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x374>
 800827c:	2300      	movs	r3, #0
 800827e:	2b00      	cmp	r3, #0
 8008280:	d1c6      	bne.n	8008210 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x306>
  }
  return kTfLiteOk;
 8008282:	2300      	movs	r3, #0
}
 8008284:	4618      	mov	r0, r3
 8008286:	3788      	adds	r7, #136	; 0x88
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}

0800828c <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl>:

// Get offline tensors allocation plan. See
// micro/docs/memory_management.md for more info.
TfLiteStatus AllocationInfoBuilder::GetOfflinePlannedOffsets(
    const int32_t** offline_planner_offsets) {
 800828c:	b590      	push	{r4, r7, lr}
 800828e:	b08d      	sub	sp, #52	; 0x34
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
 8008294:	6039      	str	r1, [r7, #0]
  if (model_->metadata()) {
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	4618      	mov	r0, r3
 800829c:	f7ff fb37 	bl	800790e <_ZNK6tflite5Model8metadataEv>
 80082a0:	4603      	mov	r3, r0
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	bf14      	ite	ne
 80082a6:	2301      	movne	r3, #1
 80082a8:	2300      	moveq	r3, #0
 80082aa:	b2db      	uxtb	r3, r3
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	f000 808a 	beq.w	80083c6 <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0x13a>
    for (size_t i = 0; i < model_->metadata()->size(); ++i) {
 80082b2:	2300      	movs	r3, #0
 80082b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80082b6:	e073      	b.n	80083a0 <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0x114>
      auto metadata = model_->metadata()->Get(i);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	4618      	mov	r0, r3
 80082be:	f7ff fb26 	bl	800790e <_ZNK6tflite5Model8metadataEv>
 80082c2:	4603      	mov	r3, r0
 80082c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80082c6:	4618      	mov	r0, r3
 80082c8:	f000 f9a4 	bl	8008614 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEmE3GetEm>
 80082cc:	62b8      	str	r0, [r7, #40]	; 0x28

      if (metadata->name()) {
 80082ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082d0:	f7ff fae4 	bl	800789c <_ZNK6tflite8Metadata4nameEv>
 80082d4:	4603      	mov	r3, r0
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	bf14      	ite	ne
 80082da:	2301      	movne	r3, #1
 80082dc:	2300      	moveq	r3, #0
 80082de:	b2db      	uxtb	r3, r3
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d05a      	beq.n	800839a <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0x10e>
        const size_t metadata_name_size = metadata->name()->size();
 80082e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082e6:	f7ff fad9 	bl	800789c <_ZNK6tflite8Metadata4nameEv>
 80082ea:	4603      	mov	r3, r0
 80082ec:	4618      	mov	r0, r3
 80082ee:	f000 f873 	bl	80083d8 <_ZNK11flatbuffers6VectorIcmE4sizeEv>
 80082f2:	4603      	mov	r3, r0
 80082f4:	60fb      	str	r3, [r7, #12]

        if ((strncmp(metadata->name()->c_str(), kOfflineMemAllocMetadata,
 80082f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082f8:	f7ff fad0 	bl	800789c <_ZNK6tflite8Metadata4nameEv>
 80082fc:	4603      	mov	r3, r0
 80082fe:	4618      	mov	r0, r3
 8008300:	f7fa fc02 	bl	8002b08 <_ZNK11flatbuffers6String5c_strEv>
 8008304:	4604      	mov	r4, r0
                     std::min(metadata_name_size,
                              strlen(kOfflineMemAllocMetadata))) == 0) &&
 8008306:	2317      	movs	r3, #23
 8008308:	613b      	str	r3, [r7, #16]
                     std::min(metadata_name_size,
 800830a:	f107 0210 	add.w	r2, r7, #16
 800830e:	f107 030c 	add.w	r3, r7, #12
 8008312:	4611      	mov	r1, r2
 8008314:	4618      	mov	r0, r3
 8008316:	f7ff fa27 	bl	8007768 <_ZSt3minIjERKT_S2_S2_>
 800831a:	4603      	mov	r3, r0
        if ((strncmp(metadata->name()->c_str(), kOfflineMemAllocMetadata,
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	461a      	mov	r2, r3
 8008320:	492b      	ldr	r1, [pc, #172]	; (80083d0 <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0x144>)
 8008322:	4620      	mov	r0, r4
 8008324:	f018 f96a 	bl	80205fc <strncmp>
 8008328:	4603      	mov	r3, r0
                              strlen(kOfflineMemAllocMetadata))) == 0) &&
 800832a:	2b00      	cmp	r3, #0
 800832c:	d104      	bne.n	8008338 <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0xac>
            metadata_name_size == strlen(kOfflineMemAllocMetadata)) {
 800832e:	68fb      	ldr	r3, [r7, #12]
                              strlen(kOfflineMemAllocMetadata))) == 0) &&
 8008330:	2b17      	cmp	r3, #23
 8008332:	d101      	bne.n	8008338 <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0xac>
 8008334:	2301      	movs	r3, #1
 8008336:	e000      	b.n	800833a <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0xae>
 8008338:	2300      	movs	r3, #0
        if ((strncmp(metadata->name()->c_str(), kOfflineMemAllocMetadata,
 800833a:	2b00      	cmp	r3, #0
 800833c:	d02d      	beq.n	800839a <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0x10e>
          const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers =
              model_->buffers();
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	4618      	mov	r0, r3
 8008344:	f7ff fad5 	bl	80078f2 <_ZNK6tflite5Model7buffersEv>
 8008348:	6278      	str	r0, [r7, #36]	; 0x24
          auto* buffer = (*buffers)[metadata->buffer()];
 800834a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800834c:	f7ff fab4 	bl	80078b8 <_ZNK6tflite8Metadata6bufferEv>
 8008350:	4603      	mov	r3, r0
 8008352:	4619      	mov	r1, r3
 8008354:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008356:	f000 f983 	bl	8008660 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEmEixEm>
 800835a:	6238      	str	r0, [r7, #32]
          auto* array = buffer->data();
 800835c:	6a38      	ldr	r0, [r7, #32]
 800835e:	f7ff fa8f 	bl	8007880 <_ZNK6tflite6Buffer4dataEv>
 8008362:	61f8      	str	r0, [r7, #28]
          const uint32_t* metadata_buffer =
              reinterpret_cast<const uint32_t*>(array->data());
 8008364:	69f8      	ldr	r0, [r7, #28]
 8008366:	f7fb fee8 	bl	800413a <_ZNK11flatbuffers6VectorIhmE4dataEv>
 800836a:	61b8      	str	r0, [r7, #24]
          const size_t nbr_tensors = static_cast<size_t>(metadata_buffer[2]);
 800836c:	69bb      	ldr	r3, [r7, #24]
 800836e:	3308      	adds	r3, #8
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	617b      	str	r3, [r7, #20]
          *offline_planner_offsets =
              reinterpret_cast<const int32_t*>(&metadata_buffer[3]);
 8008374:	69bb      	ldr	r3, [r7, #24]
 8008376:	f103 020c 	add.w	r2, r3, #12
          *offline_planner_offsets =
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	601a      	str	r2, [r3, #0]

          if (info_.tensor_count != nbr_tensors) {
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	699b      	ldr	r3, [r3, #24]
 8008382:	697a      	ldr	r2, [r7, #20]
 8008384:	429a      	cmp	r2, r3
 8008386:	d008      	beq.n	800839a <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0x10e>
            MicroPrintf(
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	699b      	ldr	r3, [r3, #24]
 800838c:	461a      	mov	r2, r3
 800838e:	6979      	ldr	r1, [r7, #20]
 8008390:	4810      	ldr	r0, [pc, #64]	; (80083d4 <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0x148>)
 8008392:	f003 fa3d 	bl	800b810 <_Z11MicroPrintfPKcz>
                "Nbr of offline buffer offsets (%d) in metadata "
                "not equal nbr tensors (%d)\n",
                nbr_tensors, info_.tensor_count);
            return kTfLiteError;
 8008396:	2301      	movs	r3, #1
 8008398:	e016      	b.n	80083c8 <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0x13c>
    for (size_t i = 0; i < model_->metadata()->size(); ++i) {
 800839a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800839c:	3301      	adds	r3, #1
 800839e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4618      	mov	r0, r3
 80083a6:	f7ff fab2 	bl	800790e <_ZNK6tflite5Model8metadataEv>
 80083aa:	4603      	mov	r3, r0
 80083ac:	4618      	mov	r0, r3
 80083ae:	f000 f923 	bl	80085f8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEmE4sizeEv>
 80083b2:	4602      	mov	r2, r0
 80083b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083b6:	4293      	cmp	r3, r2
 80083b8:	bf34      	ite	cc
 80083ba:	2301      	movcc	r3, #1
 80083bc:	2300      	movcs	r3, #0
 80083be:	b2db      	uxtb	r3, r3
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	f47f af79 	bne.w	80082b8 <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0x2c>
          }
        }
      }
    }
  }
  return kTfLiteOk;
 80083c6:	2300      	movs	r3, #0
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	3734      	adds	r7, #52	; 0x34
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd90      	pop	{r4, r7, pc}
 80083d0:	08028e84 	.word	0x08028e84
 80083d4:	08022228 	.word	0x08022228

080083d8 <_ZNK11flatbuffers6VectorIcmE4sizeEv>:
 80083d8:	b580      	push	{r7, lr}
 80083da:	b082      	sub	sp, #8
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	4618      	mov	r0, r3
 80083e6:	f7f9 fc2f 	bl	8001c48 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 80083ea:	4603      	mov	r3, r0
 80083ec:	4618      	mov	r0, r3
 80083ee:	3708      	adds	r7, #8
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}

080083f4 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEmEEmEET_t>:
  P GetPointer(voffset_t field) const {
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b082      	sub	sp, #8
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
 80083fc:	460b      	mov	r3, r1
 80083fe:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P, OffsetSize>(field);
 8008400:	887b      	ldrh	r3, [r7, #2]
 8008402:	4619      	mov	r1, r3
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f000 f939 	bl	800867c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEmEEmEET_t>
 800840a:	4603      	mov	r3, r0
  }
 800840c:	4618      	mov	r0, r3
 800840e:	3708      	adds	r7, #8
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}

08008414 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEmEEmEET_t>:
  P GetPointer(voffset_t field) const {
 8008414:	b580      	push	{r7, lr}
 8008416:	b082      	sub	sp, #8
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
 800841c:	460b      	mov	r3, r1
 800841e:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P, OffsetSize>(field);
 8008420:	887b      	ldrh	r3, [r7, #2]
 8008422:	4619      	mov	r1, r3
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f000 f949 	bl	80086bc <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEmEEmEET_t>
 800842a:	4603      	mov	r3, r0
  }
 800842c:	4618      	mov	r0, r3
 800842e:	3708      	adds	r7, #8
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}

08008434 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEmEEmEET_t>:
  P GetPointer(voffset_t field) const {
 8008434:	b580      	push	{r7, lr}
 8008436:	b082      	sub	sp, #8
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
 800843c:	460b      	mov	r3, r1
 800843e:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P, OffsetSize>(field);
 8008440:	887b      	ldrh	r3, [r7, #2]
 8008442:	4619      	mov	r1, r3
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f000 f959 	bl	80086fc <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEmEEmEET_t>
 800844a:	4603      	mov	r3, r0
  }
 800844c:	4618      	mov	r0, r3
 800844e:	3708      	adds	r7, #8
 8008450:	46bd      	mov	sp, r7
 8008452:	bd80      	pop	{r7, pc}

08008454 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEmEEmEET_t>:
  P GetPointer(voffset_t field) const {
 8008454:	b580      	push	{r7, lr}
 8008456:	b082      	sub	sp, #8
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
 800845c:	460b      	mov	r3, r1
 800845e:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P, OffsetSize>(field);
 8008460:	887b      	ldrh	r3, [r7, #2]
 8008462:	4619      	mov	r1, r3
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f000 f969 	bl	800873c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEmEEmEET_t>
 800846a:	4603      	mov	r3, r0
  }
 800846c:	4618      	mov	r0, r3
 800846e:	3708      	adds	r7, #8
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}

08008474 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEmE4sizeEv>:
 8008474:	b580      	push	{r7, lr}
 8008476:	b082      	sub	sp, #8
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4618      	mov	r0, r3
 8008482:	f7f9 fbe1 	bl	8001c48 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8008486:	4603      	mov	r3, r0
 8008488:	4618      	mov	r0, r3
 800848a:	3708      	adds	r7, #8
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}

08008490 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEmE3GetEm>:
  return_type Get(SizeT i) const {
 8008490:	b580      	push	{r7, lr}
 8008492:	b082      	sub	sp, #8
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
 8008498:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f7ff ffea 	bl	8008474 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEmE4sizeEv>
 80084a0:	4602      	mov	r2, r0
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d305      	bcc.n	80084b4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEmE3GetEm+0x24>
 80084a8:	4b09      	ldr	r3, [pc, #36]	; (80084d0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEmE3GetEm+0x40>)
 80084aa:	4a0a      	ldr	r2, [pc, #40]	; (80084d4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEmE3GetEm+0x44>)
 80084ac:	21b0      	movs	r1, #176	; 0xb0
 80084ae:	480a      	ldr	r0, [pc, #40]	; (80084d8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEmE3GetEm+0x48>)
 80084b0:	f017 fade 	bl	801fa70 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f000 f961 	bl	800877c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEmE4DataEv>
 80084ba:	4603      	mov	r3, r0
 80084bc:	6839      	ldr	r1, [r7, #0]
 80084be:	4618      	mov	r0, r3
 80084c0:	f000 f968 	bl	8008794 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6TensorEEEE4ReadEPKhm>
 80084c4:	4603      	mov	r3, r0
  }
 80084c6:	4618      	mov	r0, r3
 80084c8:	3708      	adds	r7, #8
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}
 80084ce:	bf00      	nop
 80084d0:	08022274 	.word	0x08022274
 80084d4:	08022368 	.word	0x08022368
 80084d8:	08022344 	.word	0x08022344

080084dc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEmE3GetEm>:
  return_type Get(SizeT i) const {
 80084dc:	b580      	push	{r7, lr}
 80084de:	b082      	sub	sp, #8
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
 80084e4:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f7fe ff8f 	bl	800740a <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEmE4sizeEv>
 80084ec:	4602      	mov	r2, r0
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d305      	bcc.n	8008500 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEmE3GetEm+0x24>
 80084f4:	4b09      	ldr	r3, [pc, #36]	; (800851c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEmE3GetEm+0x40>)
 80084f6:	4a0a      	ldr	r2, [pc, #40]	; (8008520 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEmE3GetEm+0x44>)
 80084f8:	21b0      	movs	r1, #176	; 0xb0
 80084fa:	480a      	ldr	r0, [pc, #40]	; (8008524 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEmE3GetEm+0x48>)
 80084fc:	f017 fab8 	bl	801fa70 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f000 f95b 	bl	80087bc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEmE4DataEv>
 8008506:	4603      	mov	r3, r0
 8008508:	6839      	ldr	r1, [r7, #0]
 800850a:	4618      	mov	r0, r3
 800850c:	f000 f962 	bl	80087d4 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8OperatorEEEE4ReadEPKhm>
 8008510:	4603      	mov	r3, r0
  }
 8008512:	4618      	mov	r0, r3
 8008514:	3708      	adds	r7, #8
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}
 800851a:	bf00      	nop
 800851c:	08022274 	.word	0x08022274
 8008520:	08022454 	.word	0x08022454
 8008524:	08022344 	.word	0x08022344

08008528 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEmE4sizeEv>:
  SizeT size() const { return EndianScalar(length_); }
 8008528:	b580      	push	{r7, lr}
 800852a:	b082      	sub	sp, #8
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4618      	mov	r0, r3
 8008536:	f7f9 fb87 	bl	8001c48 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800853a:	4603      	mov	r3, r0
 800853c:	4618      	mov	r0, r3
 800853e:	3708      	adds	r7, #8
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}

08008544 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEmE3GetEm>:
  return_type Get(SizeT i) const {
 8008544:	b580      	push	{r7, lr}
 8008546:	b082      	sub	sp, #8
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
 800854c:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f7ff ffea 	bl	8008528 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEmE4sizeEv>
 8008554:	4602      	mov	r2, r0
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	4293      	cmp	r3, r2
 800855a:	d305      	bcc.n	8008568 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEmE3GetEm+0x24>
 800855c:	4b09      	ldr	r3, [pc, #36]	; (8008584 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEmE3GetEm+0x40>)
 800855e:	4a0a      	ldr	r2, [pc, #40]	; (8008588 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEmE3GetEm+0x44>)
 8008560:	21b0      	movs	r1, #176	; 0xb0
 8008562:	480a      	ldr	r0, [pc, #40]	; (800858c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEmE3GetEm+0x48>)
 8008564:	f017 fa84 	bl	801fa70 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f000 f947 	bl	80087fc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEmE4DataEv>
 800856e:	4603      	mov	r3, r0
 8008570:	6839      	ldr	r1, [r7, #0]
 8008572:	4618      	mov	r0, r3
 8008574:	f000 f94e 	bl	8008814 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite12OperatorCodeEEEE4ReadEPKhm>
 8008578:	4603      	mov	r3, r0
  }
 800857a:	4618      	mov	r0, r3
 800857c:	3708      	adds	r7, #8
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}
 8008582:	bf00      	nop
 8008584:	08022274 	.word	0x08022274
 8008588:	08022544 	.word	0x08022544
 800858c:	08022344 	.word	0x08022344

08008590 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEmE4sizeEv>:
  SizeT size() const { return EndianScalar(length_); }
 8008590:	b580      	push	{r7, lr}
 8008592:	b082      	sub	sp, #8
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	4618      	mov	r0, r3
 800859e:	f7f9 fb53 	bl	8001c48 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 80085a2:	4603      	mov	r3, r0
 80085a4:	4618      	mov	r0, r3
 80085a6:	3708      	adds	r7, #8
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}

080085ac <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEmE3GetEm>:
  return_type Get(SizeT i) const {
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b082      	sub	sp, #8
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
 80085b4:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f7ff ffea 	bl	8008590 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEmE4sizeEv>
 80085bc:	4602      	mov	r2, r0
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d305      	bcc.n	80085d0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEmE3GetEm+0x24>
 80085c4:	4b09      	ldr	r3, [pc, #36]	; (80085ec <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEmE3GetEm+0x40>)
 80085c6:	4a0a      	ldr	r2, [pc, #40]	; (80085f0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEmE3GetEm+0x44>)
 80085c8:	21b0      	movs	r1, #176	; 0xb0
 80085ca:	480a      	ldr	r0, [pc, #40]	; (80085f4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEmE3GetEm+0x48>)
 80085cc:	f017 fa50 	bl	801fa70 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f000 f933 	bl	800883c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEmE4DataEv>
 80085d6:	4603      	mov	r3, r0
 80085d8:	6839      	ldr	r1, [r7, #0]
 80085da:	4618      	mov	r0, r3
 80085dc:	f000 f93a 	bl	8008854 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6BufferEEEE4ReadEPKhm>
 80085e0:	4603      	mov	r3, r0
  }
 80085e2:	4618      	mov	r0, r3
 80085e4:	3708      	adds	r7, #8
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}
 80085ea:	bf00      	nop
 80085ec:	08022274 	.word	0x08022274
 80085f0:	0802272c 	.word	0x0802272c
 80085f4:	08022344 	.word	0x08022344

080085f8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEmE4sizeEv>:
  SizeT size() const { return EndianScalar(length_); }
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b082      	sub	sp, #8
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4618      	mov	r0, r3
 8008606:	f7f9 fb1f 	bl	8001c48 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800860a:	4603      	mov	r3, r0
 800860c:	4618      	mov	r0, r3
 800860e:	3708      	adds	r7, #8
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}

08008614 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEmE3GetEm>:
  return_type Get(SizeT i) const {
 8008614:	b580      	push	{r7, lr}
 8008616:	b082      	sub	sp, #8
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
 800861c:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f7ff ffea 	bl	80085f8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEmE4sizeEv>
 8008624:	4602      	mov	r2, r0
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	4293      	cmp	r3, r2
 800862a:	d305      	bcc.n	8008638 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEmE3GetEm+0x24>
 800862c:	4b09      	ldr	r3, [pc, #36]	; (8008654 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEmE3GetEm+0x40>)
 800862e:	4a0a      	ldr	r2, [pc, #40]	; (8008658 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEmE3GetEm+0x44>)
 8008630:	21b0      	movs	r1, #176	; 0xb0
 8008632:	480a      	ldr	r0, [pc, #40]	; (800865c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEmE3GetEm+0x48>)
 8008634:	f017 fa1c 	bl	801fa70 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f000 f91f 	bl	800887c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEmE4DataEv>
 800863e:	4603      	mov	r3, r0
 8008640:	6839      	ldr	r1, [r7, #0]
 8008642:	4618      	mov	r0, r3
 8008644:	f000 f926 	bl	8008894 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8MetadataEEEE4ReadEPKhm>
 8008648:	4603      	mov	r3, r0
  }
 800864a:	4618      	mov	r0, r3
 800864c:	3708      	adds	r7, #8
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}
 8008652:	bf00      	nop
 8008654:	08022274 	.word	0x08022274
 8008658:	08022818 	.word	0x08022818
 800865c:	08022344 	.word	0x08022344

08008660 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEmEixEm>:
  return_type operator[](SizeT i) const { return Get(i); }
 8008660:	b580      	push	{r7, lr}
 8008662:	b082      	sub	sp, #8
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
 8008668:	6039      	str	r1, [r7, #0]
 800866a:	6839      	ldr	r1, [r7, #0]
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f7ff ff9d 	bl	80085ac <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEmE3GetEm>
 8008672:	4603      	mov	r3, r0
 8008674:	4618      	mov	r0, r3
 8008676:	3708      	adds	r7, #8
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}

0800867c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEmEEmEET_t>:
  P GetPointer(voffset_t field) {
 800867c:	b580      	push	{r7, lr}
 800867e:	b084      	sub	sp, #16
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
 8008684:	460b      	mov	r3, r1
 8008686:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8008688:	887b      	ldrh	r3, [r7, #2]
 800868a:	4619      	mov	r1, r3
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f7f9 f947 	bl	8001920 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8008692:	4603      	mov	r3, r0
 8008694:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8008696:	687a      	ldr	r2, [r7, #4]
 8008698:	89fb      	ldrh	r3, [r7, #14]
 800869a:	4413      	add	r3, r2
 800869c:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 800869e:	89fb      	ldrh	r3, [r7, #14]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d006      	beq.n	80086b2 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEmEEmEET_t+0x36>
 80086a4:	68b8      	ldr	r0, [r7, #8]
 80086a6:	f7f9 faf6 	bl	8001c96 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 80086aa:	4602      	mov	r2, r0
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	4413      	add	r3, r2
                        : nullptr;
 80086b0:	e000      	b.n	80086b4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEmEEmEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 80086b2:	2300      	movs	r3, #0
  }
 80086b4:	4618      	mov	r0, r3
 80086b6:	3710      	adds	r7, #16
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}

080086bc <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEmEEmEET_t>:
  P GetPointer(voffset_t field) {
 80086bc:	b580      	push	{r7, lr}
 80086be:	b084      	sub	sp, #16
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
 80086c4:	460b      	mov	r3, r1
 80086c6:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 80086c8:	887b      	ldrh	r3, [r7, #2]
 80086ca:	4619      	mov	r1, r3
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f7f9 f927 	bl	8001920 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 80086d2:	4603      	mov	r3, r0
 80086d4:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 80086d6:	687a      	ldr	r2, [r7, #4]
 80086d8:	89fb      	ldrh	r3, [r7, #14]
 80086da:	4413      	add	r3, r2
 80086dc:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 80086de:	89fb      	ldrh	r3, [r7, #14]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d006      	beq.n	80086f2 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEmEEmEET_t+0x36>
 80086e4:	68b8      	ldr	r0, [r7, #8]
 80086e6:	f7f9 fad6 	bl	8001c96 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 80086ea:	4602      	mov	r2, r0
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	4413      	add	r3, r2
                        : nullptr;
 80086f0:	e000      	b.n	80086f4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEmEEmEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 80086f2:	2300      	movs	r3, #0
  }
 80086f4:	4618      	mov	r0, r3
 80086f6:	3710      	adds	r7, #16
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}

080086fc <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEmEEmEET_t>:
  P GetPointer(voffset_t field) {
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b084      	sub	sp, #16
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
 8008704:	460b      	mov	r3, r1
 8008706:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8008708:	887b      	ldrh	r3, [r7, #2]
 800870a:	4619      	mov	r1, r3
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f7f9 f907 	bl	8001920 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8008712:	4603      	mov	r3, r0
 8008714:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8008716:	687a      	ldr	r2, [r7, #4]
 8008718:	89fb      	ldrh	r3, [r7, #14]
 800871a:	4413      	add	r3, r2
 800871c:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 800871e:	89fb      	ldrh	r3, [r7, #14]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d006      	beq.n	8008732 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEmEEmEET_t+0x36>
 8008724:	68b8      	ldr	r0, [r7, #8]
 8008726:	f7f9 fab6 	bl	8001c96 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800872a:	4602      	mov	r2, r0
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	4413      	add	r3, r2
                        : nullptr;
 8008730:	e000      	b.n	8008734 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEmEEmEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8008732:	2300      	movs	r3, #0
  }
 8008734:	4618      	mov	r0, r3
 8008736:	3710      	adds	r7, #16
 8008738:	46bd      	mov	sp, r7
 800873a:	bd80      	pop	{r7, pc}

0800873c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEmEEmEET_t>:
  P GetPointer(voffset_t field) {
 800873c:	b580      	push	{r7, lr}
 800873e:	b084      	sub	sp, #16
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
 8008744:	460b      	mov	r3, r1
 8008746:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8008748:	887b      	ldrh	r3, [r7, #2]
 800874a:	4619      	mov	r1, r3
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f7f9 f8e7 	bl	8001920 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8008752:	4603      	mov	r3, r0
 8008754:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8008756:	687a      	ldr	r2, [r7, #4]
 8008758:	89fb      	ldrh	r3, [r7, #14]
 800875a:	4413      	add	r3, r2
 800875c:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 800875e:	89fb      	ldrh	r3, [r7, #14]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d006      	beq.n	8008772 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEmEEmEET_t+0x36>
 8008764:	68b8      	ldr	r0, [r7, #8]
 8008766:	f7f9 fa96 	bl	8001c96 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800876a:	4602      	mov	r2, r0
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	4413      	add	r3, r2
                        : nullptr;
 8008770:	e000      	b.n	8008774 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEmEEmEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8008772:	2300      	movs	r3, #0
  }
 8008774:	4618      	mov	r0, r3
 8008776:	3710      	adds	r7, #16
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}

0800877c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEmE4DataEv>:
  const uint8_t *Data() const {
 800877c:	b480      	push	{r7}
 800877e:	b083      	sub	sp, #12
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	3304      	adds	r3, #4
  }
 8008788:	4618      	mov	r0, r3
 800878a:	370c      	adds	r7, #12
 800878c:	46bd      	mov	sp, r7
 800878e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008792:	4770      	bx	lr

08008794 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6TensorEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *const p, const offset_type i) {
 8008794:	b580      	push	{r7, lr}
 8008796:	b084      	sub	sp, #16
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
 800879c:	6039      	str	r1, [r7, #0]
    const uint8_t *const offset_location = p + i * element_stride;
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	009b      	lsls	r3, r3, #2
 80087a2:	687a      	ldr	r2, [r7, #4]
 80087a4:	4413      	add	r3, r2
 80087a6:	60fb      	str	r3, [r7, #12]
        offset_location + ReadScalar<offset_type>(offset_location));
 80087a8:	68f8      	ldr	r0, [r7, #12]
 80087aa:	f7f9 fa74 	bl	8001c96 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 80087ae:	4602      	mov	r2, r0
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	4413      	add	r3, r2
  }
 80087b4:	4618      	mov	r0, r3
 80087b6:	3710      	adds	r7, #16
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}

080087bc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEmE4DataEv>:
  const uint8_t *Data() const {
 80087bc:	b480      	push	{r7}
 80087be:	b083      	sub	sp, #12
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	3304      	adds	r3, #4
  }
 80087c8:	4618      	mov	r0, r3
 80087ca:	370c      	adds	r7, #12
 80087cc:	46bd      	mov	sp, r7
 80087ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d2:	4770      	bx	lr

080087d4 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8OperatorEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *const p, const offset_type i) {
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b084      	sub	sp, #16
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	6039      	str	r1, [r7, #0]
    const uint8_t *const offset_location = p + i * element_stride;
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	009b      	lsls	r3, r3, #2
 80087e2:	687a      	ldr	r2, [r7, #4]
 80087e4:	4413      	add	r3, r2
 80087e6:	60fb      	str	r3, [r7, #12]
        offset_location + ReadScalar<offset_type>(offset_location));
 80087e8:	68f8      	ldr	r0, [r7, #12]
 80087ea:	f7f9 fa54 	bl	8001c96 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 80087ee:	4602      	mov	r2, r0
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	4413      	add	r3, r2
  }
 80087f4:	4618      	mov	r0, r3
 80087f6:	3710      	adds	r7, #16
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}

080087fc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEmE4DataEv>:
  const uint8_t *Data() const {
 80087fc:	b480      	push	{r7}
 80087fe:	b083      	sub	sp, #12
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	3304      	adds	r3, #4
  }
 8008808:	4618      	mov	r0, r3
 800880a:	370c      	adds	r7, #12
 800880c:	46bd      	mov	sp, r7
 800880e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008812:	4770      	bx	lr

08008814 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite12OperatorCodeEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *const p, const offset_type i) {
 8008814:	b580      	push	{r7, lr}
 8008816:	b084      	sub	sp, #16
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
 800881c:	6039      	str	r1, [r7, #0]
    const uint8_t *const offset_location = p + i * element_stride;
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	009b      	lsls	r3, r3, #2
 8008822:	687a      	ldr	r2, [r7, #4]
 8008824:	4413      	add	r3, r2
 8008826:	60fb      	str	r3, [r7, #12]
        offset_location + ReadScalar<offset_type>(offset_location));
 8008828:	68f8      	ldr	r0, [r7, #12]
 800882a:	f7f9 fa34 	bl	8001c96 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800882e:	4602      	mov	r2, r0
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	4413      	add	r3, r2
  }
 8008834:	4618      	mov	r0, r3
 8008836:	3710      	adds	r7, #16
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}

0800883c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEmE4DataEv>:
  const uint8_t *Data() const {
 800883c:	b480      	push	{r7}
 800883e:	b083      	sub	sp, #12
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	3304      	adds	r3, #4
  }
 8008848:	4618      	mov	r0, r3
 800884a:	370c      	adds	r7, #12
 800884c:	46bd      	mov	sp, r7
 800884e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008852:	4770      	bx	lr

08008854 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6BufferEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *const p, const offset_type i) {
 8008854:	b580      	push	{r7, lr}
 8008856:	b084      	sub	sp, #16
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
 800885c:	6039      	str	r1, [r7, #0]
    const uint8_t *const offset_location = p + i * element_stride;
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	009b      	lsls	r3, r3, #2
 8008862:	687a      	ldr	r2, [r7, #4]
 8008864:	4413      	add	r3, r2
 8008866:	60fb      	str	r3, [r7, #12]
        offset_location + ReadScalar<offset_type>(offset_location));
 8008868:	68f8      	ldr	r0, [r7, #12]
 800886a:	f7f9 fa14 	bl	8001c96 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800886e:	4602      	mov	r2, r0
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	4413      	add	r3, r2
  }
 8008874:	4618      	mov	r0, r3
 8008876:	3710      	adds	r7, #16
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}

0800887c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEmE4DataEv>:
  const uint8_t *Data() const {
 800887c:	b480      	push	{r7}
 800887e:	b083      	sub	sp, #12
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	3304      	adds	r3, #4
  }
 8008888:	4618      	mov	r0, r3
 800888a:	370c      	adds	r7, #12
 800888c:	46bd      	mov	sp, r7
 800888e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008892:	4770      	bx	lr

08008894 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8MetadataEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *const p, const offset_type i) {
 8008894:	b580      	push	{r7, lr}
 8008896:	b084      	sub	sp, #16
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
 800889c:	6039      	str	r1, [r7, #0]
    const uint8_t *const offset_location = p + i * element_stride;
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	009b      	lsls	r3, r3, #2
 80088a2:	687a      	ldr	r2, [r7, #4]
 80088a4:	4413      	add	r3, r2
 80088a6:	60fb      	str	r3, [r7, #12]
        offset_location + ReadScalar<offset_type>(offset_location));
 80088a8:	68f8      	ldr	r0, [r7, #12]
 80088aa:	f7f9 f9f4 	bl	8001c96 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 80088ae:	4602      	mov	r2, r0
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	4413      	add	r3, r2
  }
 80088b4:	4618      	mov	r0, r3
 80088b6:	3710      	adds	r7, #16
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}

080088bc <_ZNK6tflite22QuantizationParameters5scaleEv>:
  const ::flatbuffers::Vector<float> *scale() const {
 80088bc:	b580      	push	{r7, lr}
 80088be:	b082      	sub	sp, #8
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
    return GetPointer<const ::flatbuffers::Vector<float> *>(VT_SCALE);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2108      	movs	r1, #8
 80088c8:	4618      	mov	r0, r3
 80088ca:	f001 fa97 	bl	8009dfc <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIfmEEmEET_t>
 80088ce:	4603      	mov	r3, r0
  }
 80088d0:	4618      	mov	r0, r3
 80088d2:	3708      	adds	r7, #8
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}

080088d8 <_ZNK6tflite22QuantizationParameters10zero_pointEv>:
  const ::flatbuffers::Vector<int64_t> *zero_point() const {
 80088d8:	b580      	push	{r7, lr}
 80088da:	b082      	sub	sp, #8
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
    return GetPointer<const ::flatbuffers::Vector<int64_t> *>(VT_ZERO_POINT);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	210a      	movs	r1, #10
 80088e4:	4618      	mov	r0, r3
 80088e6:	f7fb f8d1 	bl	8003a8c <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIxmEEmEET_t>
 80088ea:	4603      	mov	r3, r0
  }
 80088ec:	4618      	mov	r0, r3
 80088ee:	3708      	adds	r7, #8
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}

080088f4 <_ZNK6tflite22QuantizationParameters19quantized_dimensionEv>:
  int32_t quantized_dimension() const {
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b082      	sub	sp, #8
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_QUANTIZED_DIMENSION, 0);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2200      	movs	r2, #0
 8008900:	2110      	movs	r1, #16
 8008902:	4618      	mov	r0, r3
 8008904:	f7fb f901 	bl	8003b0a <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8008908:	4603      	mov	r3, r0
  }
 800890a:	4618      	mov	r0, r3
 800890c:	3708      	adds	r7, #8
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}

08008912 <_ZNK6tflite6Tensor6bufferEv>:
  uint32_t buffer() const {
 8008912:	b580      	push	{r7, lr}
 8008914:	b082      	sub	sp, #8
 8008916:	af00      	add	r7, sp, #0
 8008918:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_BUFFER, 0);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2200      	movs	r2, #0
 800891e:	2108      	movs	r1, #8
 8008920:	4618      	mov	r0, r3
 8008922:	f7f9 f9d6 	bl	8001cd2 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 8008926:	4603      	mov	r3, r0
  }
 8008928:	4618      	mov	r0, r3
 800892a:	3708      	adds	r7, #8
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}

08008930 <_ZNK6tflite6Tensor12quantizationEv>:
  const tflite::QuantizationParameters *quantization() const {
 8008930:	b580      	push	{r7, lr}
 8008932:	b082      	sub	sp, #8
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
    return GetPointer<const tflite::QuantizationParameters *>(VT_QUANTIZATION);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	210c      	movs	r1, #12
 800893c:	4618      	mov	r0, r3
 800893e:	f001 fa6d 	bl	8009e1c <_ZNK11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEmEET_t>
 8008942:	4603      	mov	r3, r0
  }
 8008944:	4618      	mov	r0, r3
 8008946:	3708      	adds	r7, #8
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}

0800894c <_ZN6tflite20BuiltinDataAllocatorD1Ev>:

  virtual ~BuiltinDataAllocator() {}
 800894c:	b480      	push	{r7}
 800894e:	b083      	sub	sp, #12
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
 8008954:	4a04      	ldr	r2, [pc, #16]	; (8008968 <_ZN6tflite20BuiltinDataAllocatorD1Ev+0x1c>)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	601a      	str	r2, [r3, #0]
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	4618      	mov	r0, r3
 800895e:	370c      	adds	r7, #12
 8008960:	46bd      	mov	sp, r7
 8008962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008966:	4770      	bx	lr
 8008968:	08028f0c 	.word	0x08028f0c

0800896c <_ZN6tflite20BuiltinDataAllocatorD0Ev>:
 800896c:	b580      	push	{r7, lr}
 800896e:	b082      	sub	sp, #8
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f7ff ffe9 	bl	800894c <_ZN6tflite20BuiltinDataAllocatorD1Ev>
 800897a:	2104      	movs	r1, #4
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f016 fecb 	bl	801f718 <_ZdlPvj>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	4618      	mov	r0, r3
 8008986:	3708      	adds	r7, #8
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}

0800898c <_ZN6tflite14MicroAllocatordlEPv>:

  // Holds the byte length of the memory plan with the largest head usage. Used
  // to ensure that multi-tenant allocations can share the head for buffers.
  size_t max_head_buffer_usage_ = 0;

  TF_LITE_REMOVE_VIRTUAL_DELETE
 800898c:	b480      	push	{r7}
 800898e:	b083      	sub	sp, #12
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
 8008994:	bf00      	nop
 8008996:	370c      	adds	r7, #12
 8008998:	46bd      	mov	sp, r7
 800899a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899e:	4770      	bx	lr

080089a0 <_ZN6tflite21AllocationInfoBuilderC1EPKNS_5ModelEPNS_29INonPersistentBufferAllocatorE>:
// lifetime of tensors / scratch_buffer and will be used to calculate the memory
// plan. Methods need to be called in order from `Create`, Init`, `Add*`, to
// `Finish`.
class AllocationInfoBuilder {
 public:
  AllocationInfoBuilder(const Model* model,
 80089a0:	b480      	push	{r7}
 80089a2:	b085      	sub	sp, #20
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	60f8      	str	r0, [r7, #12]
 80089a8:	60b9      	str	r1, [r7, #8]
 80089aa:	607a      	str	r2, [r7, #4]
                        INonPersistentBufferAllocator* non_persistent_allocator)
      : model_(model), non_persistent_allocator_(non_persistent_allocator) {}
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	68ba      	ldr	r2, [r7, #8]
 80089b0:	601a      	str	r2, [r3, #0]
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	687a      	ldr	r2, [r7, #4]
 80089b6:	605a      	str	r2, [r3, #4]
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	2200      	movs	r2, #0
 80089bc:	621a      	str	r2, [r3, #32]
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	4618      	mov	r0, r3
 80089c2:	3714      	adds	r7, #20
 80089c4:	46bd      	mov	sp, r7
 80089c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ca:	4770      	bx	lr

080089cc <_ZNK6tflite21AllocationInfoBuilder15AllocationCountEv>:
      internal::ScratchBufferRequest* scratch_buffer_requests,
      ScratchBufferHandle* scratch_buffer_handles,
      SubgraphAllocations* allocations);

  // Returns the number of allocations.
  int AllocationCount() const { return info_.allocation_info_count; }
 80089cc:	b480      	push	{r7}
 80089ce:	b083      	sub	sp, #12
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	68db      	ldr	r3, [r3, #12]
 80089d8:	4618      	mov	r0, r3
 80089da:	370c      	adds	r7, #12
 80089dc:	46bd      	mov	sp, r7
 80089de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e2:	4770      	bx	lr

080089e4 <_ZNK6tflite21AllocationInfoBuilder6FinishEv>:

  // Returns a pointer to the built AllocationInfo array.
  AllocationInfo* Finish() const { return info_.allocation_info; }
 80089e4:	b480      	push	{r7}
 80089e6:	b083      	sub	sp, #12
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	689b      	ldr	r3, [r3, #8]
 80089f0:	4618      	mov	r0, r3
 80089f2:	370c      	adds	r7, #12
 80089f4:	46bd      	mov	sp, r7
 80089f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fa:	4770      	bx	lr

080089fc <_ZN6tflite20BuiltinDataAllocatorC1Ev>:
class BuiltinDataAllocator {
 80089fc:	b480      	push	{r7}
 80089fe:	b083      	sub	sp, #12
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
 8008a04:	4a04      	ldr	r2, [pc, #16]	; (8008a18 <_ZN6tflite20BuiltinDataAllocatorC1Ev+0x1c>)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	601a      	str	r2, [r3, #0]
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	370c      	adds	r7, #12
 8008a10:	46bd      	mov	sp, r7
 8008a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a16:	4770      	bx	lr
 8008a18:	08028f0c 	.word	0x08028f0c

08008a1c <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorC1EPNS_26IPersistentBufferAllocatorE>:

const TfLiteIntArray kZeroLengthIntArray = {};

class MicroBuiltinDataAllocator : public TfLiteBridgeBuiltinDataAllocator {
 public:
  explicit MicroBuiltinDataAllocator(
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b082      	sub	sp, #8
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
 8008a24:	6039      	str	r1, [r7, #0]
      IPersistentBufferAllocator* persistent_allocator)
      : persistent_allocator_(persistent_allocator) {}
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	4618      	mov	r0, r3
 8008a2a:	f7ff ffe7 	bl	80089fc <_ZN6tflite20BuiltinDataAllocatorC1Ev>
 8008a2e:	4a05      	ldr	r2, [pc, #20]	; (8008a44 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorC1EPNS_26IPersistentBufferAllocatorE+0x28>)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	601a      	str	r2, [r3, #0]
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	683a      	ldr	r2, [r7, #0]
 8008a38:	605a      	str	r2, [r3, #4]
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3708      	adds	r7, #8
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}
 8008a44:	08028ea8 	.word	0x08028ea8

08008a48 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator8AllocateEjj>:

  void* Allocate(size_t size, size_t alignment_hint) override {
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b084      	sub	sp, #16
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	60f8      	str	r0, [r7, #12]
 8008a50:	60b9      	str	r1, [r7, #8]
 8008a52:	607a      	str	r2, [r7, #4]
    return persistent_allocator_->AllocatePersistentBuffer(size,
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	6858      	ldr	r0, [r3, #4]
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	685b      	ldr	r3, [r3, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	3308      	adds	r3, #8
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	687a      	ldr	r2, [r7, #4]
 8008a64:	68b9      	ldr	r1, [r7, #8]
 8008a66:	4798      	blx	r3
 8008a68:	4603      	mov	r3, r0
                                                           alignment_hint);
  }
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	3710      	adds	r7, #16
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}

08008a72 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator10DeallocateEPv>:
  void Deallocate(void* data) override {
 8008a72:	b480      	push	{r7}
 8008a74:	b083      	sub	sp, #12
 8008a76:	af00      	add	r7, sp, #0
 8008a78:	6078      	str	r0, [r7, #4]
 8008a7a:	6039      	str	r1, [r7, #0]
    // Do not deallocate, builtin data needs to be available for the life time
    // of the model.
  }
 8008a7c:	bf00      	nop
 8008a7e:	370c      	adds	r7, #12
 8008a80:	46bd      	mov	sp, r7
 8008a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a86:	4770      	bx	lr

08008a88 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatordlEPv>:

  TF_LITE_REMOVE_VIRTUAL_DELETE
 8008a88:	b480      	push	{r7}
 8008a8a:	b083      	sub	sp, #12
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
 8008a90:	bf00      	nop
 8008a92:	370c      	adds	r7, #12
 8008a94:	46bd      	mov	sp, r7
 8008a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9a:	4770      	bx	lr

08008a9c <_ZN6tflite12_GLOBAL__N_119CreateMemoryPlannerENS_17MemoryPlannerTypeEPNS_26IPersistentBufferAllocatorE>:
  IPersistentBufferAllocator* persistent_allocator_;
};

MicroMemoryPlanner* CreateMemoryPlanner(
    MemoryPlannerType memory_planner_type,
    IPersistentBufferAllocator* memory_allocator) {
 8008a9c:	b590      	push	{r4, r7, lr}
 8008a9e:	b085      	sub	sp, #20
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
 8008aa4:	6039      	str	r1, [r7, #0]
  MicroMemoryPlanner* memory_planner = nullptr;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	60fb      	str	r3, [r7, #12]
  uint8_t* memory_planner_buffer = nullptr;
 8008aaa:	2300      	movs	r3, #0
 8008aac:	60bb      	str	r3, [r7, #8]

  switch (memory_planner_type) {
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d018      	beq.n	8008ae6 <_ZN6tflite12_GLOBAL__N_119CreateMemoryPlannerENS_17MemoryPlannerTypeEPNS_26IPersistentBufferAllocatorE+0x4a>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2b01      	cmp	r3, #1
 8008ab8:	d129      	bne.n	8008b0e <_ZN6tflite12_GLOBAL__N_119CreateMemoryPlannerENS_17MemoryPlannerTypeEPNS_26IPersistentBufferAllocatorE+0x72>
    case MemoryPlannerType::kLinear: {
      memory_planner_buffer = memory_allocator->AllocatePersistentBuffer(
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	3308      	adds	r3, #8
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	2204      	movs	r2, #4
 8008ac4:	f241 010c 	movw	r1, #4108	; 0x100c
 8008ac8:	6838      	ldr	r0, [r7, #0]
 8008aca:	4798      	blx	r3
 8008acc:	60b8      	str	r0, [r7, #8]
          sizeof(LinearMemoryPlanner), alignof(LinearMemoryPlanner));
      memory_planner = new (memory_planner_buffer) LinearMemoryPlanner();
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	4619      	mov	r1, r3
 8008ad2:	f241 000c 	movw	r0, #4108	; 0x100c
 8008ad6:	f7fa f80b 	bl	8002af0 <_ZnwjPv>
 8008ada:	4604      	mov	r4, r0
 8008adc:	4620      	mov	r0, r4
 8008ade:	f00b fe19 	bl	8014714 <_ZN6tflite19LinearMemoryPlannerC1Ev>
 8008ae2:	60fc      	str	r4, [r7, #12]
      break;
 8008ae4:	e013      	b.n	8008b0e <_ZN6tflite12_GLOBAL__N_119CreateMemoryPlannerENS_17MemoryPlannerTypeEPNS_26IPersistentBufferAllocatorE+0x72>
    }
    case MemoryPlannerType::kGreedy: {
      memory_planner_buffer = memory_allocator->AllocatePersistentBuffer(
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	3308      	adds	r3, #8
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	2204      	movs	r2, #4
 8008af0:	212c      	movs	r1, #44	; 0x2c
 8008af2:	6838      	ldr	r0, [r7, #0]
 8008af4:	4798      	blx	r3
 8008af6:	60b8      	str	r0, [r7, #8]
          sizeof(GreedyMemoryPlanner), alignof(GreedyMemoryPlanner));
      memory_planner = new (memory_planner_buffer) GreedyMemoryPlanner();
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	4619      	mov	r1, r3
 8008afc:	202c      	movs	r0, #44	; 0x2c
 8008afe:	f7f9 fff7 	bl	8002af0 <_ZnwjPv>
 8008b02:	4604      	mov	r4, r0
 8008b04:	4620      	mov	r0, r4
 8008b06:	f00b f95f 	bl	8013dc8 <_ZN6tflite19GreedyMemoryPlannerC1Ev>
 8008b0a:	60fc      	str	r4, [r7, #12]
      break;
 8008b0c:	bf00      	nop
    }
  }
  return memory_planner;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	3714      	adds	r7, #20
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd90      	pop	{r4, r7, pc}

08008b18 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_18MicroMemoryPlannerEPKNS_14AllocationInfoEj>:

TfLiteStatus CreatePlan(MicroMemoryPlanner* planner,
                        const AllocationInfo* allocation_info,
                        size_t allocation_info_size) {
 8008b18:	b590      	push	{r4, r7, lr}
 8008b1a:	b08b      	sub	sp, #44	; 0x2c
 8008b1c:	af02      	add	r7, sp, #8
 8008b1e:	60f8      	str	r0, [r7, #12]
 8008b20:	60b9      	str	r1, [r7, #8]
 8008b22:	607a      	str	r2, [r7, #4]
  // Add the tensors to our allocation plan.
  for (size_t i = 0; i < allocation_info_size; ++i) {
 8008b24:	2300      	movs	r3, #0
 8008b26:	61fb      	str	r3, [r7, #28]
 8008b28:	e046      	b.n	8008bb8 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_18MicroMemoryPlannerEPKNS_14AllocationInfoEj+0xa0>
    const AllocationInfo* current = &allocation_info[i];
 8008b2a:	69fa      	ldr	r2, [r7, #28]
 8008b2c:	4613      	mov	r3, r2
 8008b2e:	005b      	lsls	r3, r3, #1
 8008b30:	4413      	add	r3, r2
 8008b32:	00db      	lsls	r3, r3, #3
 8008b34:	461a      	mov	r2, r3
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	4413      	add	r3, r2
 8008b3a:	61bb      	str	r3, [r7, #24]
    if (current->needs_allocating) {
 8008b3c:	69bb      	ldr	r3, [r7, #24]
 8008b3e:	7d1b      	ldrb	r3, [r3, #20]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d036      	beq.n	8008bb2 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_18MicroMemoryPlannerEPKNS_14AllocationInfoEj+0x9a>
      size_t aligned_bytes_required =
          AlignSizeUp(current->bytes, MicroArenaBufferAlignment());
 8008b44:	69bb      	ldr	r3, [r7, #24]
 8008b46:	681c      	ldr	r4, [r3, #0]
 8008b48:	f7fe fbc0 	bl	80072cc <_ZN6tflite25MicroArenaBufferAlignmentEv>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	4619      	mov	r1, r3
 8008b50:	4620      	mov	r0, r4
 8008b52:	f7fe fcd4 	bl	80074fe <_ZN6tflite11AlignSizeUpEjj>
 8008b56:	6178      	str	r0, [r7, #20]
      if (current->offline_offset == kOnlinePlannedBuffer) {
 8008b58:	69bb      	ldr	r3, [r7, #24]
 8008b5a:	691b      	ldr	r3, [r3, #16]
 8008b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b60:	d111      	bne.n	8008b86 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_18MicroMemoryPlannerEPKNS_14AllocationInfoEj+0x6e>
        TF_LITE_ENSURE_STATUS(planner->AddBuffer(aligned_bytes_required,
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	3308      	adds	r3, #8
 8008b68:	681c      	ldr	r4, [r3, #0]
 8008b6a:	6979      	ldr	r1, [r7, #20]
 8008b6c:	69bb      	ldr	r3, [r7, #24]
 8008b6e:	689a      	ldr	r2, [r3, #8]
 8008b70:	69bb      	ldr	r3, [r7, #24]
 8008b72:	68db      	ldr	r3, [r3, #12]
 8008b74:	68f8      	ldr	r0, [r7, #12]
 8008b76:	47a0      	blx	r4
 8008b78:	4603      	mov	r3, r0
 8008b7a:	74bb      	strb	r3, [r7, #18]
 8008b7c:	7cbb      	ldrb	r3, [r7, #18]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d017      	beq.n	8008bb2 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_18MicroMemoryPlannerEPKNS_14AllocationInfoEj+0x9a>
 8008b82:	7cbb      	ldrb	r3, [r7, #18]
 8008b84:	e01d      	b.n	8008bc2 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_18MicroMemoryPlannerEPKNS_14AllocationInfoEj+0xaa>
                                                 current->first_created,
                                                 current->last_used));
      } else {
        TF_LITE_ENSURE_STATUS(
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	330c      	adds	r3, #12
 8008b8c:	681c      	ldr	r4, [r3, #0]
 8008b8e:	6979      	ldr	r1, [r7, #20]
 8008b90:	69bb      	ldr	r3, [r7, #24]
 8008b92:	689a      	ldr	r2, [r3, #8]
 8008b94:	69bb      	ldr	r3, [r7, #24]
 8008b96:	68d8      	ldr	r0, [r3, #12]
 8008b98:	69bb      	ldr	r3, [r7, #24]
 8008b9a:	691b      	ldr	r3, [r3, #16]
 8008b9c:	9300      	str	r3, [sp, #0]
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	68f8      	ldr	r0, [r7, #12]
 8008ba2:	47a0      	blx	r4
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	74fb      	strb	r3, [r7, #19]
 8008ba8:	7cfb      	ldrb	r3, [r7, #19]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d001      	beq.n	8008bb2 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_18MicroMemoryPlannerEPKNS_14AllocationInfoEj+0x9a>
 8008bae:	7cfb      	ldrb	r3, [r7, #19]
 8008bb0:	e007      	b.n	8008bc2 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_18MicroMemoryPlannerEPKNS_14AllocationInfoEj+0xaa>
  for (size_t i = 0; i < allocation_info_size; ++i) {
 8008bb2:	69fb      	ldr	r3, [r7, #28]
 8008bb4:	3301      	adds	r3, #1
 8008bb6:	61fb      	str	r3, [r7, #28]
 8008bb8:	69fa      	ldr	r2, [r7, #28]
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d3b4      	bcc.n	8008b2a <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_18MicroMemoryPlannerEPKNS_14AllocationInfoEj+0x12>
            planner->AddBuffer(aligned_bytes_required, current->first_created,
                               current->last_used, current->offline_offset));
      }
    }
  }
  return kTfLiteOk;
 8008bc0:	2300      	movs	r3, #0
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	3724      	adds	r7, #36	; 0x24
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd90      	pop	{r4, r7, pc}

08008bca <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_18MicroMemoryPlannerEPhPKNS_14AllocationInfoEj>:

TfLiteStatus CommitPlan(MicroMemoryPlanner* planner, uint8_t* starting_point,
                        const AllocationInfo* allocation_info,
                        size_t allocation_info_size) {
 8008bca:	b580      	push	{r7, lr}
 8008bcc:	b08a      	sub	sp, #40	; 0x28
 8008bce:	af00      	add	r7, sp, #0
 8008bd0:	60f8      	str	r0, [r7, #12]
 8008bd2:	60b9      	str	r1, [r7, #8]
 8008bd4:	607a      	str	r2, [r7, #4]
 8008bd6:	603b      	str	r3, [r7, #0]
  // Figure out the actual memory addresses for each buffer, based on the plan.
  int planner_index = 0;
 8008bd8:	2300      	movs	r3, #0
 8008bda:	627b      	str	r3, [r7, #36]	; 0x24
  for (size_t i = 0; i < allocation_info_size; ++i) {
 8008bdc:	2300      	movs	r3, #0
 8008bde:	623b      	str	r3, [r7, #32]
 8008be0:	e02c      	b.n	8008c3c <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_18MicroMemoryPlannerEPhPKNS_14AllocationInfoEj+0x72>
    const AllocationInfo* current = &allocation_info[i];
 8008be2:	6a3a      	ldr	r2, [r7, #32]
 8008be4:	4613      	mov	r3, r2
 8008be6:	005b      	lsls	r3, r3, #1
 8008be8:	4413      	add	r3, r2
 8008bea:	00db      	lsls	r3, r3, #3
 8008bec:	461a      	mov	r2, r3
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	4413      	add	r3, r2
 8008bf2:	61fb      	str	r3, [r7, #28]
    if (current->needs_allocating) {
 8008bf4:	69fb      	ldr	r3, [r7, #28]
 8008bf6:	7d1b      	ldrb	r3, [r3, #20]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d01c      	beq.n	8008c36 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_18MicroMemoryPlannerEPhPKNS_14AllocationInfoEj+0x6c>
      int offset = -1;
 8008bfc:	f04f 33ff 	mov.w	r3, #4294967295
 8008c00:	617b      	str	r3, [r7, #20]
      TF_LITE_ENSURE_STATUS(
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	3318      	adds	r3, #24
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f107 0214 	add.w	r2, r7, #20
 8008c0e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008c10:	68f8      	ldr	r0, [r7, #12]
 8008c12:	4798      	blx	r3
 8008c14:	4603      	mov	r3, r0
 8008c16:	76fb      	strb	r3, [r7, #27]
 8008c18:	7efb      	ldrb	r3, [r7, #27]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d001      	beq.n	8008c22 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_18MicroMemoryPlannerEPhPKNS_14AllocationInfoEj+0x58>
 8008c1e:	7efb      	ldrb	r3, [r7, #27]
 8008c20:	e011      	b.n	8008c46 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_18MicroMemoryPlannerEPhPKNS_14AllocationInfoEj+0x7c>
          planner->GetOffsetForBuffer(planner_index, &offset));
      *current->output_ptr = reinterpret_cast<void*>(starting_point + offset);
 8008c22:	697b      	ldr	r3, [r7, #20]
 8008c24:	4619      	mov	r1, r3
 8008c26:	69fb      	ldr	r3, [r7, #28]
 8008c28:	685b      	ldr	r3, [r3, #4]
 8008c2a:	68ba      	ldr	r2, [r7, #8]
 8008c2c:	440a      	add	r2, r1
 8008c2e:	601a      	str	r2, [r3, #0]
      ++planner_index;
 8008c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c32:	3301      	adds	r3, #1
 8008c34:	627b      	str	r3, [r7, #36]	; 0x24
  for (size_t i = 0; i < allocation_info_size; ++i) {
 8008c36:	6a3b      	ldr	r3, [r7, #32]
 8008c38:	3301      	adds	r3, #1
 8008c3a:	623b      	str	r3, [r7, #32]
 8008c3c:	6a3a      	ldr	r2, [r7, #32]
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	429a      	cmp	r2, r3
 8008c42:	d3ce      	bcc.n	8008be2 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_18MicroMemoryPlannerEPhPKNS_14AllocationInfoEj+0x18>
    }
  }
  return kTfLiteOk;
 8008c44:	2300      	movs	r3, #0
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	3728      	adds	r7, #40	; 0x28
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}

08008c4e <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEmEE>:

// Returns a pointer to any buffer associated with the flatbuffer tensor. Can
// return nullptr if no buffer is found.
void* GetFlatbufferTensorBuffer(
    const tflite::Tensor& flatbuffer_tensor,
    const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers) {
 8008c4e:	b580      	push	{r7, lr}
 8008c50:	b086      	sub	sp, #24
 8008c52:	af00      	add	r7, sp, #0
 8008c54:	6078      	str	r0, [r7, #4]
 8008c56:	6039      	str	r1, [r7, #0]
  // the same as a constant op in TensorFlow) associated with this tensor first,
  // and if there is update the runtime structure to point to its location in
  // memory.
  // First see if there's any buffer information in the serialized tensor.
  // TODO(b/170379532): Add better unit tests to validate flatbuffer values.
  void* out_buffer = nullptr;
 8008c58:	2300      	movs	r3, #0
 8008c5a:	617b      	str	r3, [r7, #20]
  if (auto* buffer = (*buffers)[flatbuffer_tensor.buffer()]) {
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f7ff fe58 	bl	8008912 <_ZNK6tflite6Tensor6bufferEv>
 8008c62:	4603      	mov	r3, r0
 8008c64:	4619      	mov	r1, r3
 8008c66:	6838      	ldr	r0, [r7, #0]
 8008c68:	f7ff fcfa 	bl	8008660 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEmEixEm>
 8008c6c:	6138      	str	r0, [r7, #16]
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d015      	beq.n	8008ca0 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEmEE+0x52>
    // If we've found a buffer, does it have any data?
    if (auto* array = buffer->data()) {
 8008c74:	6938      	ldr	r0, [r7, #16]
 8008c76:	f7fe fe03 	bl	8007880 <_ZNK6tflite6Buffer4dataEv>
 8008c7a:	60f8      	str	r0, [r7, #12]
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d00e      	beq.n	8008ca0 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEmEE+0x52>
      // If it has any data, is the data size larger than zero?
      if (array->size()) {
 8008c82:	68f8      	ldr	r0, [r7, #12]
 8008c84:	f7fa ffb1 	bl	8003bea <_ZNK11flatbuffers6VectorIhmE4sizeEv>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	bf14      	ite	ne
 8008c8e:	2301      	movne	r3, #1
 8008c90:	2300      	moveq	r3, #0
 8008c92:	b2db      	uxtb	r3, r3
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d003      	beq.n	8008ca0 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEmEE+0x52>
        // We've found a buffer with valid data, so update the runtime tensor
        // data structure to point to it.
        out_buffer = const_cast<void*>(static_cast<const void*>(array->data()));
 8008c98:	68f8      	ldr	r0, [r7, #12]
 8008c9a:	f7fb fa4e 	bl	800413a <_ZNK11flatbuffers6VectorIhmE4dataEv>
 8008c9e:	6178      	str	r0, [r7, #20]
    // buffer in the serialized tensor, but it doesn't have any data in it. Is
    // that a validly-generated file, and if so what does it mean, or is it an
    // error condition? It would be good to tighten up the specification to make
    // it less ambiguous.
  }
  return out_buffer;
 8008ca0:	697b      	ldr	r3, [r7, #20]
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	3718      	adds	r7, #24
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}
	...

08008cac <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor>:
TfLiteStatus InitializeTfLiteTensorFromFlatbuffer(
    IPersistentBufferAllocator* persistent_buffer_allocator,
    INonPersistentBufferAllocator* non_persistent_buffer_allocator,
    bool allocate_temp, const tflite::Tensor& flatbuffer_tensor,
    const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers,
    TfLiteTensor* result) {
 8008cac:	b5b0      	push	{r4, r5, r7, lr}
 8008cae:	b08c      	sub	sp, #48	; 0x30
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	60f8      	str	r0, [r7, #12]
 8008cb4:	60b9      	str	r1, [r7, #8]
 8008cb6:	603b      	str	r3, [r7, #0]
 8008cb8:	4613      	mov	r3, r2
 8008cba:	71fb      	strb	r3, [r7, #7]
  TFLITE_DCHECK(result != nullptr);
 8008cbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d101      	bne.n	8008cc6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0x1a>
 8008cc2:	f016 fecd 	bl	801fa60 <abort>

  *result = {};
 8008cc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008cc8:	4618      	mov	r0, r3
 8008cca:	2320      	movs	r3, #32
 8008ccc:	461a      	mov	r2, r3
 8008cce:	2100      	movs	r1, #0
 8008cd0:	f017 fc8c 	bl	80205ec <memset>
  // Make sure the serialized type is one we know how to deal with, and convert
  // it from a flatbuffer enum into a constant used by the kernel C API.
  TF_LITE_ENSURE_STATUS(
 8008cd4:	6838      	ldr	r0, [r7, #0]
 8008cd6:	f7fe fbd4 	bl	8007482 <_ZNK6tflite6Tensor4typeEv>
 8008cda:	4603      	mov	r3, r0
 8008cdc:	461a      	mov	r2, r3
 8008cde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ce0:	331c      	adds	r3, #28
 8008ce2:	4619      	mov	r1, r3
 8008ce4:	4610      	mov	r0, r2
 8008ce6:	f00b fdd7 	bl	8014898 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteType>
 8008cea:	4603      	mov	r3, r0
 8008cec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008cf0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d002      	beq.n	8008cfe <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0x52>
 8008cf8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008cfc:	e134      	b.n	8008f68 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0x2bc>
      tflite::ConvertTensorType(flatbuffer_tensor.type(), &result->type));
  // Make sure we remember if the serialized tensor is designated as a variable.
  result->is_variable = flatbuffer_tensor.is_variable();
 8008cfe:	6838      	ldr	r0, [r7, #0]
 8008d00:	f7fe fd46 	bl	8007790 <_ZNK6tflite6Tensor11is_variableEv>
 8008d04:	4603      	mov	r3, r0
 8008d06:	461a      	mov	r2, r3
 8008d08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d0a:	779a      	strb	r2, [r3, #30]

  result->data.data = GetFlatbufferTensorBuffer(flatbuffer_tensor, buffers);
 8008d0c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008d0e:	6838      	ldr	r0, [r7, #0]
 8008d10:	f7ff ff9d 	bl	8008c4e <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEmEE>
 8008d14:	4602      	mov	r2, r0
 8008d16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d18:	611a      	str	r2, [r3, #16]

  // TODO(petewarden): Some of these paths aren't getting enough testing
  // coverage, so we should figure out some tests that exercise them.
  if (result->data.data == nullptr) {
 8008d1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d1c:	691b      	ldr	r3, [r3, #16]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d103      	bne.n	8008d2a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0x7e>
    // The tensor contents haven't been set from a serialized buffer, so
    // make a note that they will be allocated from memory. The actual
    // allocation won't happen until later.
    result->allocation_type = kTfLiteArenaRw;
 8008d22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d24:	2202      	movs	r2, #2
 8008d26:	775a      	strb	r2, [r3, #29]
 8008d28:	e002      	b.n	8008d30 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0x84>
  } else {
    // We set the data from a serialized buffer, so record tha.
    result->allocation_type = kTfLiteMmapRo;
 8008d2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d2c:	2201      	movs	r2, #1
 8008d2e:	775a      	strb	r2, [r3, #29]
  }

  // Figure out what the size in bytes of the buffer is and store it.
  size_t type_size;
  TF_LITE_ENSURE_STATUS(
 8008d30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d32:	3318      	adds	r3, #24
 8008d34:	f107 0214 	add.w	r2, r7, #20
 8008d38:	4619      	mov	r1, r3
 8008d3a:	6838      	ldr	r0, [r7, #0]
 8008d3c:	f7fe fc74 	bl	8007628 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_>
 8008d40:	4603      	mov	r3, r0
 8008d42:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008d46:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d002      	beq.n	8008d54 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0xa8>
 8008d4e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8008d52:	e109      	b.n	8008f68 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0x2bc>
      BytesRequiredForTensor(flatbuffer_tensor, &result->bytes, &type_size));

  if (flatbuffer_tensor.shape() == nullptr) {
 8008d54:	6838      	ldr	r0, [r7, #0]
 8008d56:	f7fe fb86 	bl	8007466 <_ZNK6tflite6Tensor5shapeEv>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	bf0c      	ite	eq
 8008d60:	2301      	moveq	r3, #1
 8008d62:	2300      	movne	r3, #0
 8008d64:	b2db      	uxtb	r3, r3
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d003      	beq.n	8008d72 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0xc6>
    // flatbuffer_tensor.shape() can return a nullptr in the case of a scalar
    // tensor.
    // TODO(b/188459715): figure out why const_cast is required here.
    result->dims = const_cast<TfLiteIntArray*>(&kZeroLengthIntArray);
 8008d6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d6c:	4a80      	ldr	r2, [pc, #512]	; (8008f70 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0x2c4>)
 8008d6e:	615a      	str	r2, [r3, #20]
 8008d70:	e009      	b.n	8008d86 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0xda>
  } else {
    // TFLM doesn't allow reshaping the tensor which requires dynamic memory
    // allocation so it is safe to drop the const qualifier. In the future, if
    // we really want to update the tensor shape, we can always pass in a new
    // TfLiteIntArray - especially we have to do so if the dimension is
    result->dims = FlatBufferVectorToTfLiteTypeArray(flatbuffer_tensor.shape());
 8008d72:	6838      	ldr	r0, [r7, #0]
 8008d74:	f7fe fb77 	bl	8007466 <_ZNK6tflite6Tensor5shapeEv>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	f7fe fb1f 	bl	80073be <_ZN6tflite33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIlmEE>
 8008d80:	4602      	mov	r2, r0
 8008d82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d84:	615a      	str	r2, [r3, #20]
  }

  // Copy the quantization information from the serialized data.
  const auto* src_quantization = flatbuffer_tensor.quantization();
 8008d86:	6838      	ldr	r0, [r7, #0]
 8008d88:	f7ff fdd2 	bl	8008930 <_ZNK6tflite6Tensor12quantizationEv>
 8008d8c:	6278      	str	r0, [r7, #36]	; 0x24
  if (src_quantization && src_quantization->scale() &&
      (src_quantization->scale()->size() > 0) &&
      src_quantization->zero_point() &&
 8008d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d021      	beq.n	8008dd8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0x12c>
  if (src_quantization && src_quantization->scale() &&
 8008d94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008d96:	f7ff fd91 	bl	80088bc <_ZNK6tflite22QuantizationParameters5scaleEv>
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d01b      	beq.n	8008dd8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0x12c>
      (src_quantization->scale()->size() > 0) &&
 8008da0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008da2:	f7ff fd8b 	bl	80088bc <_ZNK6tflite22QuantizationParameters5scaleEv>
 8008da6:	4603      	mov	r3, r0
 8008da8:	4618      	mov	r0, r3
 8008daa:	f001 f847 	bl	8009e3c <_ZNK11flatbuffers6VectorIfmE4sizeEv>
 8008dae:	4603      	mov	r3, r0
  if (src_quantization && src_quantization->scale() &&
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d011      	beq.n	8008dd8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0x12c>
      src_quantization->zero_point() &&
 8008db4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008db6:	f7ff fd8f 	bl	80088d8 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 8008dba:	4603      	mov	r3, r0
      (src_quantization->scale()->size() > 0) &&
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d00b      	beq.n	8008dd8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0x12c>
      (src_quantization->zero_point()->size() > 0)) {
 8008dc0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008dc2:	f7ff fd89 	bl	80088d8 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	4618      	mov	r0, r3
 8008dca:	f7fa ff1c 	bl	8003c06 <_ZNK11flatbuffers6VectorIxmE4sizeEv>
 8008dce:	4603      	mov	r3, r0
      src_quantization->zero_point() &&
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d001      	beq.n	8008dd8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0x12c>
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	e000      	b.n	8008dda <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0x12e>
 8008dd8:	2300      	movs	r3, #0
  if (src_quantization && src_quantization->scale() &&
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	f000 80c3 	beq.w	8008f66 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0x2ba>
    // Always populate the TfLiteTensor.params field, even if there are
    // per-channel quantization parameters.
    result->params.scale = src_quantization->scale()->Get(0);
 8008de0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008de2:	f7ff fd6b 	bl	80088bc <_ZNK6tflite22QuantizationParameters5scaleEv>
 8008de6:	4603      	mov	r3, r0
 8008de8:	2100      	movs	r1, #0
 8008dea:	4618      	mov	r0, r3
 8008dec:	f001 f834 	bl	8009e58 <_ZNK11flatbuffers6VectorIfmE3GetEm>
 8008df0:	eef0 7a40 	vmov.f32	s15, s0
 8008df4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008df6:	edc3 7a02 	vstr	s15, [r3, #8]
    // Note that the zero_point field in the FlatBuffers schema is a 64-bit
    // integer, but the zero_point field in the TfLiteQuantizationParams struct
    // is a 32-bit integer.
    result->params.zero_point =
        static_cast<int32_t>(src_quantization->zero_point()->Get(0));
 8008dfa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008dfc:	f7ff fd6c 	bl	80088d8 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 8008e00:	4603      	mov	r3, r0
 8008e02:	2100      	movs	r1, #0
 8008e04:	4618      	mov	r0, r3
 8008e06:	f7fa ff0d 	bl	8003c24 <_ZNK11flatbuffers6VectorIxmE3GetEm>
 8008e0a:	4602      	mov	r2, r0
 8008e0c:	460b      	mov	r3, r1
    result->params.zero_point =
 8008e0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e10:	60da      	str	r2, [r3, #12]

    // Populate per-channel quantization params.
    int channels = src_quantization->scale()->size();
 8008e12:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008e14:	f7ff fd52 	bl	80088bc <_ZNK6tflite22QuantizationParameters5scaleEv>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f001 f80e 	bl	8009e3c <_ZNK11flatbuffers6VectorIfmE4sizeEv>
 8008e20:	4603      	mov	r3, r0
 8008e22:	623b      	str	r3, [r7, #32]
    TfLiteAffineQuantization* quantization =
        allocate_temp
            ? reinterpret_cast<TfLiteAffineQuantization*>(
 8008e24:	79fb      	ldrb	r3, [r7, #7]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d009      	beq.n	8008e3e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0x192>
                  non_persistent_buffer_allocator->AllocateTemp(
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	3308      	adds	r3, #8
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	2204      	movs	r2, #4
 8008e34:	210c      	movs	r1, #12
 8008e36:	68b8      	ldr	r0, [r7, #8]
 8008e38:	4798      	blx	r3
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	e008      	b.n	8008e50 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0x1a4>
                      sizeof(TfLiteAffineQuantization),
                      alignof(TfLiteAffineQuantization)))
            : reinterpret_cast<TfLiteAffineQuantization*>(
                  persistent_buffer_allocator->AllocatePersistentBuffer(
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	3308      	adds	r3, #8
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	2204      	movs	r2, #4
 8008e48:	210c      	movs	r1, #12
 8008e4a:	68f8      	ldr	r0, [r7, #12]
 8008e4c:	4798      	blx	r3
 8008e4e:	4603      	mov	r3, r0
                      sizeof(TfLiteAffineQuantization),
                      alignof(TfLiteAffineQuantization)));
 8008e50:	61fb      	str	r3, [r7, #28]
    if (quantization == nullptr) {
 8008e52:	69fb      	ldr	r3, [r7, #28]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d104      	bne.n	8008e62 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0x1b6>
      MicroPrintf("Unable to allocate TfLiteAffineQuantization.\n");
 8008e58:	4846      	ldr	r0, [pc, #280]	; (8008f74 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0x2c8>)
 8008e5a:	f002 fcd9 	bl	800b810 <_Z11MicroPrintfPKcz>
      return kTfLiteError;
 8008e5e:	2301      	movs	r3, #1
 8008e60:	e082      	b.n	8008f68 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0x2bc>
    // TODO(b/153688719): Reduce tail allocation by using a global zero-point
    // buffer. This value can not be reused from the flatbuffer since the
    // zero_point is stored as a int64_t.
    quantization->zero_point =
        allocate_temp
            ? reinterpret_cast<TfLiteIntArray*>(
 8008e62:	79fb      	ldrb	r3, [r7, #7]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d00e      	beq.n	8008e86 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0x1da>
                  non_persistent_buffer_allocator->AllocateTemp(
 8008e68:	68bd      	ldr	r5, [r7, #8]
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	3308      	adds	r3, #8
 8008e70:	681c      	ldr	r4, [r3, #0]
 8008e72:	6a38      	ldr	r0, [r7, #32]
 8008e74:	f7fc fc5d 	bl	8005732 <TfLiteIntArrayGetSizeInBytes>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	2204      	movs	r2, #4
 8008e7c:	4619      	mov	r1, r3
 8008e7e:	4628      	mov	r0, r5
 8008e80:	47a0      	blx	r4
 8008e82:	4603      	mov	r3, r0
 8008e84:	e00d      	b.n	8008ea2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0x1f6>
                      TfLiteIntArrayGetSizeInBytes(channels),
                      alignof(TfLiteIntArray)))
            : reinterpret_cast<TfLiteIntArray*>(
                  persistent_buffer_allocator->AllocatePersistentBuffer(
 8008e86:	68fd      	ldr	r5, [r7, #12]
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	3308      	adds	r3, #8
 8008e8e:	681c      	ldr	r4, [r3, #0]
 8008e90:	6a38      	ldr	r0, [r7, #32]
 8008e92:	f7fc fc4e 	bl	8005732 <TfLiteIntArrayGetSizeInBytes>
 8008e96:	4603      	mov	r3, r0
 8008e98:	2204      	movs	r2, #4
 8008e9a:	4619      	mov	r1, r3
 8008e9c:	4628      	mov	r0, r5
 8008e9e:	47a0      	blx	r4
 8008ea0:	4603      	mov	r3, r0
    quantization->zero_point =
 8008ea2:	69fa      	ldr	r2, [r7, #28]
 8008ea4:	6053      	str	r3, [r2, #4]
                      TfLiteIntArrayGetSizeInBytes(channels),
                      alignof(TfLiteIntArray)));
    if (quantization->zero_point == nullptr) {
 8008ea6:	69fb      	ldr	r3, [r7, #28]
 8008ea8:	685b      	ldr	r3, [r3, #4]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d104      	bne.n	8008eb8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0x20c>
      MicroPrintf("Unable to allocate quantization->zero_point.\n");
 8008eae:	4832      	ldr	r0, [pc, #200]	; (8008f78 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0x2cc>)
 8008eb0:	f002 fcae 	bl	800b810 <_Z11MicroPrintfPKcz>
      return kTfLiteError;
 8008eb4:	2301      	movs	r3, #1
 8008eb6:	e057      	b.n	8008f68 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0x2bc>
    }

    quantization->scale =
        FlatBufferVectorToTfLiteTypeArray(src_quantization->scale());
 8008eb8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008eba:	f7ff fcff 	bl	80088bc <_ZNK6tflite22QuantizationParameters5scaleEv>
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	f7fe fa87 	bl	80073d4 <_ZN6tflite33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIfmEE>
 8008ec6:	4602      	mov	r2, r0
    quantization->scale =
 8008ec8:	69fb      	ldr	r3, [r7, #28]
 8008eca:	601a      	str	r2, [r3, #0]

    quantization->zero_point->size = channels;
 8008ecc:	69fb      	ldr	r3, [r7, #28]
 8008ece:	685b      	ldr	r3, [r3, #4]
 8008ed0:	6a3a      	ldr	r2, [r7, #32]
 8008ed2:	601a      	str	r2, [r3, #0]
    int* zero_point_data = quantization->zero_point->data;
 8008ed4:	69fb      	ldr	r3, [r7, #28]
 8008ed6:	685b      	ldr	r3, [r3, #4]
 8008ed8:	3304      	adds	r3, #4
 8008eda:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < channels; i++) {
 8008edc:	2300      	movs	r3, #0
 8008ede:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ee0:	e031      	b.n	8008f46 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0x29a>
      // As a space-saving optimization, zero point arrays for weights can be
      // reduced to a single value, since all zero points for weights are 0.
      zero_point_data[i] = src_quantization->zero_point()->size() ==
 8008ee2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008ee4:	f7ff fcf8 	bl	80088d8 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	4618      	mov	r0, r3
 8008eec:	f7fa fe8b 	bl	8003c06 <_ZNK11flatbuffers6VectorIxmE4sizeEv>
 8008ef0:	4604      	mov	r4, r0
                                   src_quantization->scale()->size()
 8008ef2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008ef4:	f7ff fce2 	bl	80088bc <_ZNK6tflite22QuantizationParameters5scaleEv>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	4618      	mov	r0, r3
 8008efc:	f000 ff9e 	bl	8009e3c <_ZNK11flatbuffers6VectorIfmE4sizeEv>
 8008f00:	4603      	mov	r3, r0
      zero_point_data[i] = src_quantization->zero_point()->size() ==
 8008f02:	429c      	cmp	r4, r3
 8008f04:	d10c      	bne.n	8008f20 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0x274>
                               ? src_quantization->zero_point()->Get(i)
 8008f06:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008f08:	f7ff fce6 	bl	80088d8 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 8008f0c:	4602      	mov	r2, r0
 8008f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f10:	4619      	mov	r1, r3
 8008f12:	4610      	mov	r0, r2
 8008f14:	f7fa fe86 	bl	8003c24 <_ZNK11flatbuffers6VectorIxmE3GetEm>
 8008f18:	4602      	mov	r2, r0
 8008f1a:	460b      	mov	r3, r1
      zero_point_data[i] = src_quantization->zero_point()->size() ==
 8008f1c:	4611      	mov	r1, r2
 8008f1e:	e00a      	b.n	8008f36 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0x28a>
                               : src_quantization->zero_point()->Get(0);
 8008f20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008f22:	f7ff fcd9 	bl	80088d8 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 8008f26:	4603      	mov	r3, r0
 8008f28:	2100      	movs	r1, #0
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f7fa fe7a 	bl	8003c24 <_ZNK11flatbuffers6VectorIxmE3GetEm>
 8008f30:	4602      	mov	r2, r0
 8008f32:	460b      	mov	r3, r1
      zero_point_data[i] = src_quantization->zero_point()->size() ==
 8008f34:	4611      	mov	r1, r2
 8008f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f38:	009b      	lsls	r3, r3, #2
 8008f3a:	69ba      	ldr	r2, [r7, #24]
 8008f3c:	4413      	add	r3, r2
 8008f3e:	6019      	str	r1, [r3, #0]
    for (int i = 0; i < channels; i++) {
 8008f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f42:	3301      	adds	r3, #1
 8008f44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f48:	6a3b      	ldr	r3, [r7, #32]
 8008f4a:	429a      	cmp	r2, r3
 8008f4c:	dbc9      	blt.n	8008ee2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor+0x236>
    }
    // TODO(rocky): Need to add a micro_allocator test case that fails when
    // this is not copied:
    quantization->quantized_dimension = src_quantization->quantized_dimension();
 8008f4e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008f50:	f7ff fcd0 	bl	80088f4 <_ZNK6tflite22QuantizationParameters19quantized_dimensionEv>
 8008f54:	4602      	mov	r2, r0
 8008f56:	69fb      	ldr	r3, [r7, #28]
 8008f58:	609a      	str	r2, [r3, #8]

    result->quantization = {kTfLiteAffineQuantization, quantization};
 8008f5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f5c:	2201      	movs	r2, #1
 8008f5e:	701a      	strb	r2, [r3, #0]
 8008f60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f62:	69fa      	ldr	r2, [r7, #28]
 8008f64:	605a      	str	r2, [r3, #4]
  }
  return kTfLiteOk;
 8008f66:	2300      	movs	r3, #0
}
 8008f68:	4618      	mov	r0, r3
 8008f6a:	3730      	adds	r7, #48	; 0x30
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bdb0      	pop	{r4, r5, r7, pc}
 8008f70:	08028e9c 	.word	0x08028e9c
 8008f74:	08022908 	.word	0x08022908
 8008f78:	08022938 	.word	0x08022938

08008f7c <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEmEEP16TfLiteEvalTensor>:

TfLiteStatus InitializeTfLiteEvalTensorFromFlatbuffer(
    const tflite::Tensor& flatbuffer_tensor,
    const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers,
    TfLiteEvalTensor* result) {
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b086      	sub	sp, #24
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	60f8      	str	r0, [r7, #12]
 8008f84:	60b9      	str	r1, [r7, #8]
 8008f86:	607a      	str	r2, [r7, #4]
  *result = {};
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	461a      	mov	r2, r3
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	6013      	str	r3, [r2, #0]
 8008f90:	6053      	str	r3, [r2, #4]
 8008f92:	6093      	str	r3, [r2, #8]
  // Make sure the serialized type is one we know how to deal with, and convert
  // it from a flatbuffer enum into a constant used by the kernel C API.
  TF_LITE_ENSURE_STATUS(
 8008f94:	68f8      	ldr	r0, [r7, #12]
 8008f96:	f7fe fa74 	bl	8007482 <_ZNK6tflite6Tensor4typeEv>
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	461a      	mov	r2, r3
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	3308      	adds	r3, #8
 8008fa2:	4619      	mov	r1, r3
 8008fa4:	4610      	mov	r0, r2
 8008fa6:	f00b fc77 	bl	8014898 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteType>
 8008faa:	4603      	mov	r3, r0
 8008fac:	75fb      	strb	r3, [r7, #23]
 8008fae:	7dfb      	ldrb	r3, [r7, #23]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d001      	beq.n	8008fb8 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEmEEP16TfLiteEvalTensor+0x3c>
 8008fb4:	7dfb      	ldrb	r3, [r7, #23]
 8008fb6:	e020      	b.n	8008ffa <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEmEEP16TfLiteEvalTensor+0x7e>
      tflite::ConvertTensorType(flatbuffer_tensor.type(), &result->type));

  result->data.data = GetFlatbufferTensorBuffer(flatbuffer_tensor, buffers);
 8008fb8:	68b9      	ldr	r1, [r7, #8]
 8008fba:	68f8      	ldr	r0, [r7, #12]
 8008fbc:	f7ff fe47 	bl	8008c4e <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEmEE>
 8008fc0:	4602      	mov	r2, r0
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	601a      	str	r2, [r3, #0]

  if (flatbuffer_tensor.shape() == nullptr) {
 8008fc6:	68f8      	ldr	r0, [r7, #12]
 8008fc8:	f7fe fa4d 	bl	8007466 <_ZNK6tflite6Tensor5shapeEv>
 8008fcc:	4603      	mov	r3, r0
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	bf0c      	ite	eq
 8008fd2:	2301      	moveq	r3, #1
 8008fd4:	2300      	movne	r3, #0
 8008fd6:	b2db      	uxtb	r3, r3
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d003      	beq.n	8008fe4 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEmEEP16TfLiteEvalTensor+0x68>
    // flatbuffer_tensor.shape() can return a nullptr in the case of a scalar
    // tensor.
    result->dims = const_cast<TfLiteIntArray*>(&kZeroLengthIntArray);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	4a09      	ldr	r2, [pc, #36]	; (8009004 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEmEEP16TfLiteEvalTensor+0x88>)
 8008fe0:	605a      	str	r2, [r3, #4]
 8008fe2:	e009      	b.n	8008ff8 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEmEEP16TfLiteEvalTensor+0x7c>
  } else {
    result->dims = FlatBufferVectorToTfLiteTypeArray(flatbuffer_tensor.shape());
 8008fe4:	68f8      	ldr	r0, [r7, #12]
 8008fe6:	f7fe fa3e 	bl	8007466 <_ZNK6tflite6Tensor5shapeEv>
 8008fea:	4603      	mov	r3, r0
 8008fec:	4618      	mov	r0, r3
 8008fee:	f7fe f9e6 	bl	80073be <_ZN6tflite33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIlmEE>
 8008ff2:	4602      	mov	r2, r0
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	605a      	str	r2, [r3, #4]
  }
  return kTfLiteOk;
 8008ff8:	2300      	movs	r3, #0
}
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	3718      	adds	r7, #24
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}
 8009002:	bf00      	nop
 8009004:	08028e9c 	.word	0x08028e9c

08009008 <_ZN6tflite14MicroAllocatorC1EPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEPNS_18MicroMemoryPlannerE>:
    : non_persistent_buffer_allocator_(memory_allocator),
      persistent_buffer_allocator_(memory_allocator),
      memory_planner_(memory_planner),
      model_is_allocating_(false) {}

MicroAllocator::MicroAllocator(
 8009008:	b480      	push	{r7}
 800900a:	b085      	sub	sp, #20
 800900c:	af00      	add	r7, sp, #0
 800900e:	60f8      	str	r0, [r7, #12]
 8009010:	60b9      	str	r1, [r7, #8]
 8009012:	607a      	str	r2, [r7, #4]
 8009014:	603b      	str	r3, [r7, #0]
    INonPersistentBufferAllocator* non_persistent_buffer_allocator,
    MicroMemoryPlanner* memory_planner)
    : non_persistent_buffer_allocator_(non_persistent_buffer_allocator),
      persistent_buffer_allocator_(persistent_buffer_allocator),
      memory_planner_(memory_planner),
      model_is_allocating_(false) {}
 8009016:	4a0f      	ldr	r2, [pc, #60]	; (8009054 <_ZN6tflite14MicroAllocatorC1EPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEPNS_18MicroMemoryPlannerE+0x4c>)
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	601a      	str	r2, [r3, #0]
    : non_persistent_buffer_allocator_(non_persistent_buffer_allocator),
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	687a      	ldr	r2, [r7, #4]
 8009020:	605a      	str	r2, [r3, #4]
      persistent_buffer_allocator_(persistent_buffer_allocator),
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	68ba      	ldr	r2, [r7, #8]
 8009026:	609a      	str	r2, [r3, #8]
      memory_planner_(memory_planner),
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	683a      	ldr	r2, [r7, #0]
 800902c:	611a      	str	r2, [r3, #16]
      model_is_allocating_(false) {}
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	2200      	movs	r2, #0
 8009032:	751a      	strb	r2, [r3, #20]
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	2200      	movs	r2, #0
 8009038:	619a      	str	r2, [r3, #24]
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	2200      	movs	r2, #0
 800903e:	61da      	str	r2, [r3, #28]
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	2200      	movs	r2, #0
 8009044:	621a      	str	r2, [r3, #32]
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	4618      	mov	r0, r3
 800904a:	3714      	adds	r7, #20
 800904c:	46bd      	mov	sp, r7
 800904e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009052:	4770      	bx	lr
 8009054:	08028ec0 	.word	0x08028ec0

08009058 <_ZN6tflite14MicroAllocatorD1Ev>:

MicroAllocator::~MicroAllocator() {}
 8009058:	b480      	push	{r7}
 800905a:	b083      	sub	sp, #12
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
 8009060:	4a04      	ldr	r2, [pc, #16]	; (8009074 <_ZN6tflite14MicroAllocatorD1Ev+0x1c>)
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	601a      	str	r2, [r3, #0]
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	4618      	mov	r0, r3
 800906a:	370c      	adds	r7, #12
 800906c:	46bd      	mov	sp, r7
 800906e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009072:	4770      	bx	lr
 8009074:	08028ec0 	.word	0x08028ec0

08009078 <_ZN6tflite14MicroAllocatorD0Ev>:
 8009078:	b580      	push	{r7, lr}
 800907a:	b082      	sub	sp, #8
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
 8009080:	6878      	ldr	r0, [r7, #4]
 8009082:	f7ff ffe9 	bl	8009058 <_ZN6tflite14MicroAllocatorD1Ev>
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f7ff fc80 	bl	800898c <_ZN6tflite14MicroAllocatordlEPv>
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	4618      	mov	r0, r3
 8009090:	3708      	adds	r7, #8
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}

08009096 <_ZN6tflite14MicroAllocator6CreateEPhjNS_17MemoryPlannerTypeE>:

  return Create(memory_allocator, memory_planner);
}

MicroAllocator* MicroAllocator::Create(uint8_t* tensor_arena, size_t arena_size,
                                       MemoryPlannerType memory_planner_type) {
 8009096:	b580      	push	{r7, lr}
 8009098:	b088      	sub	sp, #32
 800909a:	af00      	add	r7, sp, #0
 800909c:	60f8      	str	r0, [r7, #12]
 800909e:	60b9      	str	r1, [r7, #8]
 80090a0:	607a      	str	r2, [r7, #4]
  uint8_t* aligned_arena =
      AlignPointerUp(tensor_arena, MicroArenaBufferAlignment());
 80090a2:	f7fe f913 	bl	80072cc <_ZN6tflite25MicroArenaBufferAlignmentEv>
 80090a6:	4603      	mov	r3, r0
 80090a8:	4619      	mov	r1, r3
 80090aa:	68f8      	ldr	r0, [r7, #12]
 80090ac:	f7fe f9f8 	bl	80074a0 <_ZN6tflite14AlignPointerUpEPhj>
 80090b0:	61f8      	str	r0, [r7, #28]
  size_t aligned_arena_size = tensor_arena + arena_size - aligned_arena;
 80090b2:	68fa      	ldr	r2, [r7, #12]
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	441a      	add	r2, r3
 80090b8:	69fb      	ldr	r3, [r7, #28]
 80090ba:	1ad3      	subs	r3, r2, r3
 80090bc:	61bb      	str	r3, [r7, #24]
  SingleArenaBufferAllocator* memory_allocator =
      SingleArenaBufferAllocator::Create(aligned_arena, aligned_arena_size);
 80090be:	69b9      	ldr	r1, [r7, #24]
 80090c0:	69f8      	ldr	r0, [r7, #28]
 80090c2:	f7fd feb8 	bl	8006e36 <_ZN6tflite26SingleArenaBufferAllocator6CreateEPhj>
 80090c6:	6178      	str	r0, [r7, #20]

  // By default create GreedyMemoryPlanner.
  // If a different MemoryPlanner is needed, use the other api.
  MicroMemoryPlanner* memory_planner =
      CreateMemoryPlanner(memory_planner_type, memory_allocator);
 80090c8:	697b      	ldr	r3, [r7, #20]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d002      	beq.n	80090d4 <_ZN6tflite14MicroAllocator6CreateEPhjNS_17MemoryPlannerTypeE+0x3e>
 80090ce:	697b      	ldr	r3, [r7, #20]
 80090d0:	3304      	adds	r3, #4
 80090d2:	e000      	b.n	80090d6 <_ZN6tflite14MicroAllocator6CreateEPhjNS_17MemoryPlannerTypeE+0x40>
 80090d4:	2300      	movs	r3, #0
 80090d6:	4619      	mov	r1, r3
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f7ff fcdf 	bl	8008a9c <_ZN6tflite12_GLOBAL__N_119CreateMemoryPlannerENS_17MemoryPlannerTypeEPNS_26IPersistentBufferAllocatorE>
 80090de:	6138      	str	r0, [r7, #16]

  return Create(memory_allocator, memory_planner);
 80090e0:	6939      	ldr	r1, [r7, #16]
 80090e2:	6978      	ldr	r0, [r7, #20]
 80090e4:	f000 f805 	bl	80090f2 <_ZN6tflite14MicroAllocator6CreateEPNS_26SingleArenaBufferAllocatorEPNS_18MicroMemoryPlannerE>
 80090e8:	4603      	mov	r3, r0
}
 80090ea:	4618      	mov	r0, r3
 80090ec:	3720      	adds	r7, #32
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bd80      	pop	{r7, pc}

080090f2 <_ZN6tflite14MicroAllocator6CreateEPNS_26SingleArenaBufferAllocatorEPNS_18MicroMemoryPlannerE>:

MicroAllocator* MicroAllocator::Create(
    SingleArenaBufferAllocator* memory_allocator,
    MicroMemoryPlanner* memory_planner) {
 80090f2:	b590      	push	{r4, r7, lr}
 80090f4:	b085      	sub	sp, #20
 80090f6:	af00      	add	r7, sp, #0
 80090f8:	6078      	str	r0, [r7, #4]
 80090fa:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(memory_allocator != nullptr);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d101      	bne.n	8009106 <_ZN6tflite14MicroAllocator6CreateEPNS_26SingleArenaBufferAllocatorEPNS_18MicroMemoryPlannerE+0x14>
 8009102:	f016 fcad 	bl	801fa60 <abort>
  TFLITE_DCHECK(memory_planner != nullptr);
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d101      	bne.n	8009110 <_ZN6tflite14MicroAllocator6CreateEPNS_26SingleArenaBufferAllocatorEPNS_18MicroMemoryPlannerE+0x1e>
 800910c:	f016 fca8 	bl	801fa60 <abort>

  uint8_t* allocator_buffer = memory_allocator->AllocatePersistentBuffer(
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	3334      	adds	r3, #52	; 0x34
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	2204      	movs	r2, #4
 800911a:	2124      	movs	r1, #36	; 0x24
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	4798      	blx	r3
 8009120:	60f8      	str	r0, [r7, #12]
      sizeof(MicroAllocator), alignof(MicroAllocator));
  MicroAllocator* allocator = new (allocator_buffer)
      MicroAllocator(memory_allocator, memory_allocator, memory_planner);
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	4619      	mov	r1, r3
 8009126:	2024      	movs	r0, #36	; 0x24
 8009128:	f7f9 fce2 	bl	8002af0 <_ZnwjPv>
 800912c:	4604      	mov	r4, r0
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d002      	beq.n	800913a <_ZN6tflite14MicroAllocator6CreateEPNS_26SingleArenaBufferAllocatorEPNS_18MicroMemoryPlannerE+0x48>
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	1d19      	adds	r1, r3, #4
 8009138:	e000      	b.n	800913c <_ZN6tflite14MicroAllocator6CreateEPNS_26SingleArenaBufferAllocatorEPNS_18MicroMemoryPlannerE+0x4a>
 800913a:	2100      	movs	r1, #0
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	687a      	ldr	r2, [r7, #4]
 8009140:	4620      	mov	r0, r4
 8009142:	f7ff ff61 	bl	8009008 <_ZN6tflite14MicroAllocatorC1EPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEPNS_18MicroMemoryPlannerE>
 8009146:	60bc      	str	r4, [r7, #8]
  return allocator;
 8009148:	68bb      	ldr	r3, [r7, #8]
}
 800914a:	4618      	mov	r0, r3
 800914c:	3714      	adds	r7, #20
 800914e:	46bd      	mov	sp, r7
 8009150:	bd90      	pop	{r4, r7, pc}
	...

08009154 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE>:
      MicroAllocator(persistent_buffer_allocator,
                     non_persistent_buffer_allocator, memory_planner);
  return allocator;
}

SubgraphAllocations* MicroAllocator::StartModelAllocation(const Model* model) {
 8009154:	b5b0      	push	{r4, r5, r7, lr}
 8009156:	b084      	sub	sp, #16
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
 800915c:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(model != nullptr);
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d101      	bne.n	8009168 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x14>
 8009164:	f016 fc7c 	bl	801fa60 <abort>

  if (model_is_allocating_) {
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	7d1b      	ldrb	r3, [r3, #20]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d004      	beq.n	800917a <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x26>
    MicroPrintf(
 8009170:	4836      	ldr	r0, [pc, #216]	; (800924c <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xf8>)
 8009172:	f002 fb4d 	bl	800b810 <_Z11MicroPrintfPKcz>
        "MicroAllocator: Model allocation started before "
        "finishing previously allocated model");
    return nullptr;
 8009176:	2300      	movs	r3, #0
 8009178:	e063      	b.n	8009242 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xee>
  }

  model_is_allocating_ = true;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2201      	movs	r2, #1
 800917e:	751a      	strb	r2, [r3, #20]

  uint8_t* data_allocator_buffer =
      persistent_buffer_allocator_->AllocatePersistentBuffer(
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	6898      	ldr	r0, [r3, #8]
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	689b      	ldr	r3, [r3, #8]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	3308      	adds	r3, #8
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	2204      	movs	r2, #4
 8009190:	2108      	movs	r1, #8
 8009192:	4798      	blx	r3
 8009194:	60f8      	str	r0, [r7, #12]
          sizeof(MicroBuiltinDataAllocator),
          alignof(MicroBuiltinDataAllocator));
  builtin_data_allocator_ = new (data_allocator_buffer)
 8009196:	68fb      	ldr	r3, [r7, #12]
      MicroBuiltinDataAllocator(persistent_buffer_allocator_);
 8009198:	4619      	mov	r1, r3
 800919a:	2008      	movs	r0, #8
 800919c:	f7f9 fca8 	bl	8002af0 <_ZnwjPv>
 80091a0:	4604      	mov	r4, r0
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	689b      	ldr	r3, [r3, #8]
 80091a6:	4619      	mov	r1, r3
 80091a8:	4620      	mov	r0, r4
 80091aa:	f7ff fc37 	bl	8008a1c <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorC1EPNS_26IPersistentBufferAllocatorE>
  builtin_data_allocator_ = new (data_allocator_buffer)
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	60dc      	str	r4, [r3, #12]

  if (InitScratchBufferData() != kTfLiteOk) {
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f000 fde8 	bl	8009d88 <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv>
 80091b8:	4603      	mov	r3, r0
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	bf14      	ite	ne
 80091be:	2301      	movne	r3, #1
 80091c0:	2300      	moveq	r3, #0
 80091c2:	b2db      	uxtb	r3, r3
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d001      	beq.n	80091cc <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x78>
    return nullptr;
 80091c8:	2300      	movs	r3, #0
 80091ca:	e03a      	b.n	8009242 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xee>
  }

  // Allocate struct to store eval tensors, nodes and registrations.
  SubgraphAllocations* output = reinterpret_cast<SubgraphAllocations*>(
      persistent_buffer_allocator_->AllocatePersistentBuffer(
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	689d      	ldr	r5, [r3, #8]
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	689b      	ldr	r3, [r3, #8]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	3308      	adds	r3, #8
 80091d8:	681c      	ldr	r4, [r3, #0]
          sizeof(SubgraphAllocations) * model->subgraphs()->size(),
 80091da:	6838      	ldr	r0, [r7, #0]
 80091dc:	f7f8 fbdd 	bl	800199a <_ZNK6tflite5Model9subgraphsEv>
 80091e0:	4603      	mov	r3, r0
 80091e2:	4618      	mov	r0, r3
 80091e4:	f7f8 fdb1 	bl	8001d4a <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmE4sizeEv>
 80091e8:	4603      	mov	r3, r0
 80091ea:	00db      	lsls	r3, r3, #3
      persistent_buffer_allocator_->AllocatePersistentBuffer(
 80091ec:	2204      	movs	r2, #4
 80091ee:	4619      	mov	r1, r3
 80091f0:	4628      	mov	r0, r5
 80091f2:	47a0      	blx	r4
 80091f4:	60b8      	str	r0, [r7, #8]
          alignof(SubgraphAllocations)));
  if (output == nullptr) {
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d104      	bne.n	8009206 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xb2>
    MicroPrintf("Failed to allocate memory for model metadata.");
 80091fc:	4814      	ldr	r0, [pc, #80]	; (8009250 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xfc>)
 80091fe:	f002 fb07 	bl	800b810 <_Z11MicroPrintfPKcz>
    return nullptr;
 8009202:	2300      	movs	r3, #0
 8009204:	e01d      	b.n	8009242 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xee>
  }

  if (AllocateTfLiteEvalTensors(model, output) != kTfLiteOk ||
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	332c      	adds	r3, #44	; 0x2c
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	68ba      	ldr	r2, [r7, #8]
 8009210:	6839      	ldr	r1, [r7, #0]
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	4798      	blx	r3
 8009216:	4603      	mov	r3, r0
 8009218:	2b00      	cmp	r3, #0
 800921a:	d10a      	bne.n	8009232 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xde>
      AllocateNodeAndRegistrations(model, output) != kTfLiteOk) {
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	3328      	adds	r3, #40	; 0x28
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	68ba      	ldr	r2, [r7, #8]
 8009226:	6839      	ldr	r1, [r7, #0]
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	4798      	blx	r3
 800922c:	4603      	mov	r3, r0
  if (AllocateTfLiteEvalTensors(model, output) != kTfLiteOk ||
 800922e:	2b00      	cmp	r3, #0
 8009230:	d001      	beq.n	8009236 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xe2>
 8009232:	2301      	movs	r3, #1
 8009234:	e000      	b.n	8009238 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xe4>
 8009236:	2300      	movs	r3, #0
 8009238:	2b00      	cmp	r3, #0
 800923a:	d001      	beq.n	8009240 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xec>
    return nullptr;
 800923c:	2300      	movs	r3, #0
 800923e:	e000      	b.n	8009242 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xee>
  }
  return output;
 8009240:	68bb      	ldr	r3, [r7, #8]
}
 8009242:	4618      	mov	r0, r3
 8009244:	3710      	adds	r7, #16
 8009246:	46bd      	mov	sp, r7
 8009248:	bdb0      	pop	{r4, r5, r7, pc}
 800924a:	bf00      	nop
 800924c:	08022968 	.word	0x08022968
 8009250:	080229c0 	.word	0x080229c0

08009254 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE>:

TfLiteStatus MicroAllocator::FinishModelAllocation(
    const Model* model, SubgraphAllocations* subgraph_allocations,
    ScratchBufferHandle** scratch_buffer_handles) {
 8009254:	b590      	push	{r4, r7, lr}
 8009256:	b087      	sub	sp, #28
 8009258:	af00      	add	r7, sp, #0
 800925a:	60f8      	str	r0, [r7, #12]
 800925c:	60b9      	str	r1, [r7, #8]
 800925e:	607a      	str	r2, [r7, #4]
 8009260:	603b      	str	r3, [r7, #0]
  if (!model_is_allocating_) {
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	7d1b      	ldrb	r3, [r3, #20]
 8009266:	f083 0301 	eor.w	r3, r3, #1
 800926a:	b2db      	uxtb	r3, r3
 800926c:	2b00      	cmp	r3, #0
 800926e:	d004      	beq.n	800927a <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x26>
    MicroPrintf(
 8009270:	4816      	ldr	r0, [pc, #88]	; (80092cc <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x78>)
 8009272:	f002 facd 	bl	800b810 <_Z11MicroPrintfPKcz>
        "MicroAllocator: Model allocation finished before "
        "starting allocating model");
    return kTfLiteError;
 8009276:	2301      	movs	r3, #1
 8009278:	e024      	b.n	80092c4 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x70>
  }

  // Allocate scratch buffer metadata.
  TF_LITE_ENSURE_STATUS(AllocateScratchBufferHandles(
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	3340      	adds	r3, #64	; 0x40
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	68fa      	ldr	r2, [r7, #12]
 8009284:	6992      	ldr	r2, [r2, #24]
 8009286:	6839      	ldr	r1, [r7, #0]
 8009288:	68f8      	ldr	r0, [r7, #12]
 800928a:	4798      	blx	r3
 800928c:	4603      	mov	r3, r0
 800928e:	75fb      	strb	r3, [r7, #23]
 8009290:	7dfb      	ldrb	r3, [r7, #23]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d001      	beq.n	800929a <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x46>
 8009296:	7dfb      	ldrb	r3, [r7, #23]
 8009298:	e014      	b.n	80092c4 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x70>
      scratch_buffer_handles, scratch_buffer_request_count_));

  // Plan all subgraphs and scratch buffers together.
  TF_LITE_ENSURE_STATUS(CommitStaticMemoryPlan(model, subgraph_allocations,
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	333c      	adds	r3, #60	; 0x3c
 80092a0:	681c      	ldr	r4, [r3, #0]
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	687a      	ldr	r2, [r7, #4]
 80092a8:	68b9      	ldr	r1, [r7, #8]
 80092aa:	68f8      	ldr	r0, [r7, #12]
 80092ac:	47a0      	blx	r4
 80092ae:	4603      	mov	r3, r0
 80092b0:	75bb      	strb	r3, [r7, #22]
 80092b2:	7dbb      	ldrb	r3, [r7, #22]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d001      	beq.n	80092bc <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x68>
 80092b8:	7dbb      	ldrb	r3, [r7, #22]
 80092ba:	e003      	b.n	80092c4 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x70>
                                               *scratch_buffer_handles));
  model_is_allocating_ = false;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	2200      	movs	r2, #0
 80092c0:	751a      	strb	r2, [r3, #20]
  return kTfLiteOk;
 80092c2:	2300      	movs	r3, #0
}
 80092c4:	4618      	mov	r0, r3
 80092c6:	371c      	adds	r7, #28
 80092c8:	46bd      	mov	sp, r7
 80092ca:	bd90      	pop	{r4, r7, pc}
 80092cc:	080229f0 	.word	0x080229f0

080092d0 <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEj>:

void* MicroAllocator::AllocatePersistentBuffer(size_t bytes) {
 80092d0:	b5b0      	push	{r4, r5, r7, lr}
 80092d2:	b082      	sub	sp, #8
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
 80092d8:	6039      	str	r1, [r7, #0]
  return persistent_buffer_allocator_->AllocatePersistentBuffer(
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	689d      	ldr	r5, [r3, #8]
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	689b      	ldr	r3, [r3, #8]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	3308      	adds	r3, #8
 80092e6:	681c      	ldr	r4, [r3, #0]
      bytes, MicroArenaBufferAlignment());
 80092e8:	f7fd fff0 	bl	80072cc <_ZN6tflite25MicroArenaBufferAlignmentEv>
 80092ec:	4603      	mov	r3, r0
  return persistent_buffer_allocator_->AllocatePersistentBuffer(
 80092ee:	461a      	mov	r2, r3
 80092f0:	6839      	ldr	r1, [r7, #0]
 80092f2:	4628      	mov	r0, r5
 80092f4:	47a0      	blx	r4
 80092f6:	4603      	mov	r3, r0
}
 80092f8:	4618      	mov	r0, r3
 80092fa:	3708      	adds	r7, #8
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bdb0      	pop	{r4, r5, r7, pc}

08009300 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi>:

TfLiteStatus MicroAllocator::RequestScratchBufferInArena(size_t bytes,
                                                         int subgraph_idx,
                                                         int* buffer_idx) {
 8009300:	b580      	push	{r7, lr}
 8009302:	b088      	sub	sp, #32
 8009304:	af00      	add	r7, sp, #0
 8009306:	60f8      	str	r0, [r7, #12]
 8009308:	60b9      	str	r1, [r7, #8]
 800930a:	607a      	str	r2, [r7, #4]
 800930c:	603b      	str	r3, [r7, #0]
  // All scratch buffer requests are stored in the head section of the arena
  // when a model is in the prepare phase. First align a scratch buffer request
  // pointer to the start of the head:
  internal::ScratchBufferRequest* requests = GetScratchBufferRequests();
 800930e:	68f8      	ldr	r0, [r7, #12]
 8009310:	f000 fd59 	bl	8009dc6 <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
 8009314:	6178      	str	r0, [r7, #20]

  // Count the number of requested scratch buffers for the current node:
  size_t current_node_request_count = 0;
 8009316:	2300      	movs	r3, #0
 8009318:	61fb      	str	r3, [r7, #28]
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 800931a:	2300      	movs	r3, #0
 800931c:	61bb      	str	r3, [r7, #24]
 800931e:	e011      	b.n	8009344 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x44>
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
 8009320:	69ba      	ldr	r2, [r7, #24]
 8009322:	4613      	mov	r3, r2
 8009324:	005b      	lsls	r3, r3, #1
 8009326:	4413      	add	r3, r2
 8009328:	009b      	lsls	r3, r3, #2
 800932a:	461a      	mov	r2, r3
 800932c:	697b      	ldr	r3, [r7, #20]
 800932e:	4413      	add	r3, r2
 8009330:	685b      	ldr	r3, [r3, #4]
 8009332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009336:	d102      	bne.n	800933e <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x3e>
      ++current_node_request_count;
 8009338:	69fb      	ldr	r3, [r7, #28]
 800933a:	3301      	adds	r3, #1
 800933c:	61fb      	str	r3, [r7, #28]
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 800933e:	69bb      	ldr	r3, [r7, #24]
 8009340:	3301      	adds	r3, #1
 8009342:	61bb      	str	r3, [r7, #24]
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	699b      	ldr	r3, [r3, #24]
 8009348:	69ba      	ldr	r2, [r7, #24]
 800934a:	429a      	cmp	r2, r3
 800934c:	d3e8      	bcc.n	8009320 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x20>
    }
  }

  // First, ensure that the per-kernel request has not exceeded the limit:
  if (current_node_request_count >= kMaxScratchBuffersPerOp) {
 800934e:	69fb      	ldr	r3, [r7, #28]
 8009350:	2b0b      	cmp	r3, #11
 8009352:	d905      	bls.n	8009360 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x60>
    MicroPrintf("Scratch buffer request exeeds limit per operator (%d)",
 8009354:	210c      	movs	r1, #12
 8009356:	4817      	ldr	r0, [pc, #92]	; (80093b4 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0xb4>)
 8009358:	f002 fa5a 	bl	800b810 <_Z11MicroPrintfPKcz>
                kMaxScratchBuffersPerOp);
    return kTfLiteError;
 800935c:	2301      	movs	r3, #1
 800935e:	e024      	b.n	80093aa <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0xaa>
  }

  // Initialize and assign values for the request at the current index:
  internal::ScratchBufferRequest* current_request =
      &requests[scratch_buffer_request_count_];
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	699a      	ldr	r2, [r3, #24]
 8009364:	4613      	mov	r3, r2
 8009366:	005b      	lsls	r3, r3, #1
 8009368:	4413      	add	r3, r2
 800936a:	009b      	lsls	r3, r3, #2
 800936c:	461a      	mov	r2, r3
  internal::ScratchBufferRequest* current_request =
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	4413      	add	r3, r2
 8009372:	613b      	str	r3, [r7, #16]
  *current_request = {};
 8009374:	693b      	ldr	r3, [r7, #16]
 8009376:	461a      	mov	r2, r3
 8009378:	2300      	movs	r3, #0
 800937a:	6013      	str	r3, [r2, #0]
 800937c:	6053      	str	r3, [r2, #4]
 800937e:	6093      	str	r3, [r2, #8]
  // Assign -1 as a sentinel value that will be updated when the node finishes
  // allocating:
  current_request->bytes = bytes;
 8009380:	693b      	ldr	r3, [r7, #16]
 8009382:	68ba      	ldr	r2, [r7, #8]
 8009384:	601a      	str	r2, [r3, #0]
  current_request->node_idx = kUnassignedScratchBufferRequestIndex;
 8009386:	693b      	ldr	r3, [r7, #16]
 8009388:	f04f 32ff 	mov.w	r2, #4294967295
 800938c:	605a      	str	r2, [r3, #4]
  current_request->subgraph_idx = subgraph_idx;
 800938e:	693b      	ldr	r3, [r7, #16]
 8009390:	687a      	ldr	r2, [r7, #4]
 8009392:	609a      	str	r2, [r3, #8]

  // Assign the current request index to the out-param:
  *buffer_idx = scratch_buffer_request_count_;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	699b      	ldr	r3, [r3, #24]
 8009398:	461a      	mov	r2, r3
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	601a      	str	r2, [r3, #0]

  // Bump the request count to prepare for the next request:
  ++scratch_buffer_request_count_;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	699b      	ldr	r3, [r3, #24]
 80093a2:	1c5a      	adds	r2, r3, #1
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	619a      	str	r2, [r3, #24]
  return kTfLiteOk;
 80093a8:	2300      	movs	r3, #0
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	3720      	adds	r7, #32
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}
 80093b2:	bf00      	nop
 80093b4:	08022a3c 	.word	0x08022a3c

080093b8 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi>:

TfLiteStatus MicroAllocator::FinishPrepareNodeAllocations(int node_id) {
 80093b8:	b590      	push	{r4, r7, lr}
 80093ba:	b087      	sub	sp, #28
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
 80093c0:	6039      	str	r1, [r7, #0]
  // When a node has finished preparing, all temp allocations performed by the
  // kernel should be cleaned up:
  TF_LITE_ENSURE_STATUS(ResetTempAllocations());
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	3314      	adds	r3, #20
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	6878      	ldr	r0, [r7, #4]
 80093cc:	4798      	blx	r3
 80093ce:	4603      	mov	r3, r0
 80093d0:	74fb      	strb	r3, [r7, #19]
 80093d2:	7cfb      	ldrb	r3, [r7, #19]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d001      	beq.n	80093dc <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x24>
 80093d8:	7cfb      	ldrb	r3, [r7, #19]
 80093da:	e03f      	b.n	800945c <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0xa4>

  // Find and update any new scratch buffer requests for the current node:
  internal::ScratchBufferRequest* requests = GetScratchBufferRequests();
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f000 fcf2 	bl	8009dc6 <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
 80093e2:	60f8      	str	r0, [r7, #12]

  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 80093e4:	2300      	movs	r3, #0
 80093e6:	617b      	str	r3, [r7, #20]
 80093e8:	e018      	b.n	800941c <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x64>
    // A request with a node_idx of -1 is a sentinel value used to indicate this
    // was a new request for the current node. The allocator finally knows the
    // node index at this point. Assign the value and update the list of new
    // requests so the head section can be adjusted to allow for the next kernel
    // to allocate at most kMaxScratchBuffersPerOp requests:
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
 80093ea:	697a      	ldr	r2, [r7, #20]
 80093ec:	4613      	mov	r3, r2
 80093ee:	005b      	lsls	r3, r3, #1
 80093f0:	4413      	add	r3, r2
 80093f2:	009b      	lsls	r3, r3, #2
 80093f4:	461a      	mov	r2, r3
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	4413      	add	r3, r2
 80093fa:	685b      	ldr	r3, [r3, #4]
 80093fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009400:	d109      	bne.n	8009416 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x5e>
      requests[i].node_idx = node_id;
 8009402:	697a      	ldr	r2, [r7, #20]
 8009404:	4613      	mov	r3, r2
 8009406:	005b      	lsls	r3, r3, #1
 8009408:	4413      	add	r3, r2
 800940a:	009b      	lsls	r3, r3, #2
 800940c:	461a      	mov	r2, r3
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	4413      	add	r3, r2
 8009412:	683a      	ldr	r2, [r7, #0]
 8009414:	605a      	str	r2, [r3, #4]
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 8009416:	697b      	ldr	r3, [r7, #20]
 8009418:	3301      	adds	r3, #1
 800941a:	617b      	str	r3, [r7, #20]
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	699b      	ldr	r3, [r3, #24]
 8009420:	697a      	ldr	r2, [r7, #20]
 8009422:	429a      	cmp	r2, r3
 8009424:	d3e1      	bcc.n	80093ea <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x32>
    }
  }

  // Ensure that the head is re-adjusted to allow for another at-most
  // kMaxScratchBuffersPerOp scratch buffer requests in the next operator:
  TF_LITE_ENSURE_STATUS(non_persistent_buffer_allocator_->ResizeBuffer(
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	6858      	ldr	r0, [r3, #4]
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	685b      	ldr	r3, [r3, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	331c      	adds	r3, #28
 8009432:	681c      	ldr	r4, [r3, #0]
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	69d9      	ldr	r1, [r3, #28]
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	699a      	ldr	r2, [r3, #24]
 800943c:	4613      	mov	r3, r2
 800943e:	005b      	lsls	r3, r3, #1
 8009440:	4413      	add	r3, r2
 8009442:	009b      	lsls	r3, r3, #2
 8009444:	f103 0290 	add.w	r2, r3, #144	; 0x90
 8009448:	2304      	movs	r3, #4
 800944a:	47a0      	blx	r4
 800944c:	4603      	mov	r3, r0
 800944e:	72fb      	strb	r3, [r7, #11]
 8009450:	7afb      	ldrb	r3, [r7, #11]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d001      	beq.n	800945a <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0xa2>
 8009456:	7afb      	ldrb	r3, [r7, #11]
 8009458:	e000      	b.n	800945c <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0xa4>
      scratch_buffer_head_,
      sizeof(internal::ScratchBufferRequest) *
          (scratch_buffer_request_count_ + kMaxScratchBuffersPerOp),
      alignof(internal::ScratchBufferRequest)));

  return kTfLiteOk;
 800945a:	2300      	movs	r3, #0
}
 800945c:	4618      	mov	r0, r3
 800945e:	371c      	adds	r7, #28
 8009460:	46bd      	mov	sp, r7
 8009462:	bd90      	pop	{r4, r7, pc}

08009464 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE>:
  return non_persistent_buffer_allocator_->GetNonPersistentUsedBytes() +
         persistent_buffer_allocator_->GetPersistentUsedBytes();
}

TfLiteStatus MicroAllocator::AllocateNodeAndRegistrations(
    const Model* model, SubgraphAllocations* subgraph_allocations) {
 8009464:	b580      	push	{r7, lr}
 8009466:	b088      	sub	sp, #32
 8009468:	af00      	add	r7, sp, #0
 800946a:	60f8      	str	r0, [r7, #12]
 800946c:	60b9      	str	r1, [r7, #8]
 800946e:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(subgraph_allocations != nullptr);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d101      	bne.n	800947a <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x16>
 8009476:	f016 faf3 	bl	801fa60 <abort>

  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 800947a:	2300      	movs	r3, #0
 800947c:	61fb      	str	r3, [r7, #28]
 800947e:	e02e      	b.n	80094de <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x7a>
       subgraph_idx++) {
    const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
 8009480:	68b8      	ldr	r0, [r7, #8]
 8009482:	f7f8 fa8a 	bl	800199a <_ZNK6tflite5Model9subgraphsEv>
 8009486:	4603      	mov	r3, r0
 8009488:	69f9      	ldr	r1, [r7, #28]
 800948a:	4618      	mov	r0, r3
 800948c:	f7f8 fc6c 	bl	8001d68 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmE3GetEm>
 8009490:	61b8      	str	r0, [r7, #24]
    TFLITE_DCHECK(subgraph != nullptr);
 8009492:	69bb      	ldr	r3, [r7, #24]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d101      	bne.n	800949c <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x38>
 8009498:	f016 fae2 	bl	801fa60 <abort>

    uint32_t operators_size = NumSubgraphOperators(subgraph);
 800949c:	69b8      	ldr	r0, [r7, #24]
 800949e:	f7fd ff5a 	bl	8007356 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
 80094a2:	6178      	str	r0, [r7, #20]

    // Initialize NodeAndRegistrations for the subgraph.
    NodeAndRegistration* output = reinterpret_cast<NodeAndRegistration*>(
        persistent_buffer_allocator_->AllocatePersistentBuffer(
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	6898      	ldr	r0, [r3, #8]
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	689b      	ldr	r3, [r3, #8]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	3308      	adds	r3, #8
 80094b0:	681b      	ldr	r3, [r3, #0]
            sizeof(NodeAndRegistration) * operators_size,
 80094b2:	697a      	ldr	r2, [r7, #20]
 80094b4:	0151      	lsls	r1, r2, #5
        persistent_buffer_allocator_->AllocatePersistentBuffer(
 80094b6:	2204      	movs	r2, #4
 80094b8:	4798      	blx	r3
 80094ba:	6138      	str	r0, [r7, #16]
            alignof(NodeAndRegistration)));
    if (output == nullptr) {
 80094bc:	693b      	ldr	r3, [r7, #16]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d104      	bne.n	80094cc <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x68>
      MicroPrintf("Failed to allocate memory for node_and_registrations.");
 80094c2:	4811      	ldr	r0, [pc, #68]	; (8009508 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xa4>)
 80094c4:	f002 f9a4 	bl	800b810 <_Z11MicroPrintfPKcz>
      return kTfLiteError;
 80094c8:	2301      	movs	r3, #1
 80094ca:	e019      	b.n	8009500 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x9c>
    }
    subgraph_allocations[subgraph_idx].node_and_registrations = output;
 80094cc:	69fb      	ldr	r3, [r7, #28]
 80094ce:	00db      	lsls	r3, r3, #3
 80094d0:	687a      	ldr	r2, [r7, #4]
 80094d2:	4413      	add	r3, r2
 80094d4:	693a      	ldr	r2, [r7, #16]
 80094d6:	601a      	str	r2, [r3, #0]
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 80094d8:	69fb      	ldr	r3, [r7, #28]
 80094da:	3301      	adds	r3, #1
 80094dc:	61fb      	str	r3, [r7, #28]
 80094de:	68b8      	ldr	r0, [r7, #8]
 80094e0:	f7f8 fa5b 	bl	800199a <_ZNK6tflite5Model9subgraphsEv>
 80094e4:	4603      	mov	r3, r0
 80094e6:	4618      	mov	r0, r3
 80094e8:	f7f8 fc2f 	bl	8001d4a <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmE4sizeEv>
 80094ec:	4602      	mov	r2, r0
 80094ee:	69fb      	ldr	r3, [r7, #28]
 80094f0:	4293      	cmp	r3, r2
 80094f2:	bf34      	ite	cc
 80094f4:	2301      	movcc	r3, #1
 80094f6:	2300      	movcs	r3, #0
 80094f8:	b2db      	uxtb	r3, r3
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d1c0      	bne.n	8009480 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1c>
  }
  return kTfLiteOk;
 80094fe:	2300      	movs	r3, #0
}
 8009500:	4618      	mov	r0, r3
 8009502:	3720      	adds	r7, #32
 8009504:	46bd      	mov	sp, r7
 8009506:	bd80      	pop	{r7, pc}
 8009508:	08022a74 	.word	0x08022a74

0800950c <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii>:

TfLiteTensor* MicroAllocator::AllocatePersistentTfLiteTensor(
    const Model* model, const SubgraphAllocations* subgraph_allocations,
    int tensor_index, int subgraph_index) {
 800950c:	b590      	push	{r4, r7, lr}
 800950e:	b089      	sub	sp, #36	; 0x24
 8009510:	af02      	add	r7, sp, #8
 8009512:	60f8      	str	r0, [r7, #12]
 8009514:	60b9      	str	r1, [r7, #8]
 8009516:	607a      	str	r2, [r7, #4]
 8009518:	603b      	str	r3, [r7, #0]
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_index);
 800951a:	68b8      	ldr	r0, [r7, #8]
 800951c:	f7f8 fa3d 	bl	800199a <_ZNK6tflite5Model9subgraphsEv>
 8009520:	4602      	mov	r2, r0
 8009522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009524:	4619      	mov	r1, r3
 8009526:	4610      	mov	r0, r2
 8009528:	f7f8 fc1e 	bl	8001d68 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmE3GetEm>
 800952c:	6178      	str	r0, [r7, #20]
  TFLITE_DCHECK(subgraph != nullptr);
 800952e:	697b      	ldr	r3, [r7, #20]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d101      	bne.n	8009538 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x2c>
 8009534:	f016 fa94 	bl	801fa60 <abort>

  // This value is allocated from persistent arena space. It is guaranteed to be
  // around for the lifetime of the application.
  TfLiteTensor* tensor = AllocatePersistentTfLiteTensorInternal();
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	3334      	adds	r3, #52	; 0x34
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	68f8      	ldr	r0, [r7, #12]
 8009542:	4798      	blx	r3
 8009544:	6138      	str	r0, [r7, #16]

  if (tensor == nullptr) {
 8009546:	693b      	ldr	r3, [r7, #16]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d104      	bne.n	8009556 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x4a>
    MicroPrintf("Failed to allocate memory for persistent TfLiteTensor");
 800954c:	4821      	ldr	r0, [pc, #132]	; (80095d4 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xc8>)
 800954e:	f002 f95f 	bl	800b810 <_Z11MicroPrintfPKcz>
    return nullptr;
 8009552:	2300      	movs	r3, #0
 8009554:	e039      	b.n	80095ca <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xbe>
  }

  // Populate any fields from the flatbuffer, since this TfLiteTensor struct is
  // allocated in the persistent section of the arena, ensure that additional
  // allocations also take place in that section of the arena.
  if (PopulateTfLiteTensorFromFlatbuffer(
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	3338      	adds	r3, #56	; 0x38
 800955c:	681c      	ldr	r4, [r3, #0]
 800955e:	2300      	movs	r3, #0
 8009560:	9301      	str	r3, [sp, #4]
 8009562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009564:	9300      	str	r3, [sp, #0]
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	693a      	ldr	r2, [r7, #16]
 800956a:	68b9      	ldr	r1, [r7, #8]
 800956c:	68f8      	ldr	r0, [r7, #12]
 800956e:	47a0      	blx	r4
 8009570:	4603      	mov	r3, r0
          model, tensor, tensor_index, subgraph_index,
          /*allocate_temp=*/false) != kTfLiteOk) {
 8009572:	2b00      	cmp	r3, #0
 8009574:	bf14      	ite	ne
 8009576:	2301      	movne	r3, #1
 8009578:	2300      	moveq	r3, #0
 800957a:	b2db      	uxtb	r3, r3
  if (PopulateTfLiteTensorFromFlatbuffer(
 800957c:	2b00      	cmp	r3, #0
 800957e:	d004      	beq.n	800958a <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x7e>
    MicroPrintf(
 8009580:	4815      	ldr	r0, [pc, #84]	; (80095d8 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xcc>)
 8009582:	f002 f945 	bl	800b810 <_Z11MicroPrintfPKcz>
        "Failed to populate a persistent TfLiteTensor struct "
        "from flatbuffer data!");
    return nullptr;
 8009586:	2300      	movs	r3, #0
 8009588:	e01f      	b.n	80095ca <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xbe>
  }

  if (subgraph_allocations != nullptr) {
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d01b      	beq.n	80095c8 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xbc>
    // Tensor buffers that are allocated at runtime (e.g. non-weight buffers)
    // and not located in the flatbuffer are stored on the pre-allocated list of
    // TfLiteEvalTensors structs. These structs are the source of truth, simply
    // point the corresponding buffer to the new TfLiteTensor data value.
    tensor->data.data =
        subgraph_allocations[subgraph_index].tensors[tensor_index].data.data;
 8009590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009592:	00db      	lsls	r3, r3, #3
 8009594:	687a      	ldr	r2, [r7, #4]
 8009596:	4413      	add	r3, r2
 8009598:	6859      	ldr	r1, [r3, #4]
 800959a:	683a      	ldr	r2, [r7, #0]
 800959c:	4613      	mov	r3, r2
 800959e:	005b      	lsls	r3, r3, #1
 80095a0:	4413      	add	r3, r2
 80095a2:	009b      	lsls	r3, r3, #2
 80095a4:	440b      	add	r3, r1
 80095a6:	681a      	ldr	r2, [r3, #0]
    tensor->data.data =
 80095a8:	693b      	ldr	r3, [r7, #16]
 80095aa:	611a      	str	r2, [r3, #16]
    // TfLiteEvalTensor structs must also be the source of truth for the
    // TfLiteTensor dims.
    tensor->dims =
        subgraph_allocations[subgraph_index].tensors[tensor_index].dims;
 80095ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ae:	00db      	lsls	r3, r3, #3
 80095b0:	687a      	ldr	r2, [r7, #4]
 80095b2:	4413      	add	r3, r2
 80095b4:	6859      	ldr	r1, [r3, #4]
 80095b6:	683a      	ldr	r2, [r7, #0]
 80095b8:	4613      	mov	r3, r2
 80095ba:	005b      	lsls	r3, r3, #1
 80095bc:	4413      	add	r3, r2
 80095be:	009b      	lsls	r3, r3, #2
 80095c0:	440b      	add	r3, r1
 80095c2:	685a      	ldr	r2, [r3, #4]
    tensor->dims =
 80095c4:	693b      	ldr	r3, [r7, #16]
 80095c6:	615a      	str	r2, [r3, #20]
  }
  return tensor;
 80095c8:	693b      	ldr	r3, [r7, #16]
}
 80095ca:	4618      	mov	r0, r3
 80095cc:	371c      	adds	r7, #28
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd90      	pop	{r4, r7, pc}
 80095d2:	bf00      	nop
 80095d4:	08022aac 	.word	0x08022aac
 80095d8:	08022ae4 	.word	0x08022ae4

080095dc <_ZN6tflite14MicroAllocator26DeallocateTempTfLiteTensorEP12TfLiteTensor>:

void MicroAllocator::DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
 80095dc:	b580      	push	{r7, lr}
 80095de:	b084      	sub	sp, #16
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
 80095e4:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(tensor != nullptr);
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d101      	bne.n	80095f0 <_ZN6tflite14MicroAllocator26DeallocateTempTfLiteTensorEP12TfLiteTensor+0x14>
 80095ec:	f016 fa38 	bl	801fa60 <abort>

  if (tensor->quantization.type == kTfLiteAffineQuantization) {
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	781b      	ldrb	r3, [r3, #0]
 80095f4:	2b01      	cmp	r3, #1
 80095f6:	d11d      	bne.n	8009634 <_ZN6tflite14MicroAllocator26DeallocateTempTfLiteTensorEP12TfLiteTensor+0x58>
    TFLITE_DCHECK(tensor->quantization.params != nullptr);
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	685b      	ldr	r3, [r3, #4]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d101      	bne.n	8009604 <_ZN6tflite14MicroAllocator26DeallocateTempTfLiteTensorEP12TfLiteTensor+0x28>
 8009600:	f016 fa2e 	bl	801fa60 <abort>
    TfLiteAffineQuantization* quantization =
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	685b      	ldr	r3, [r3, #4]
 8009608:	60fb      	str	r3, [r7, #12]
        reinterpret_cast<TfLiteAffineQuantization*>(
            tensor->quantization.params);

    non_persistent_buffer_allocator_->DeallocateTemp(
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6858      	ldr	r0, [r3, #4]
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	685b      	ldr	r3, [r3, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	330c      	adds	r3, #12
 8009616:	681b      	ldr	r3, [r3, #0]
        reinterpret_cast<uint8_t*>(quantization->zero_point));
 8009618:	68fa      	ldr	r2, [r7, #12]
 800961a:	6852      	ldr	r2, [r2, #4]
    non_persistent_buffer_allocator_->DeallocateTemp(
 800961c:	4611      	mov	r1, r2
 800961e:	4798      	blx	r3
    non_persistent_buffer_allocator_->DeallocateTemp(
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	685a      	ldr	r2, [r3, #4]
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	685b      	ldr	r3, [r3, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	330c      	adds	r3, #12
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	68f9      	ldr	r1, [r7, #12]
 8009630:	4610      	mov	r0, r2
 8009632:	4798      	blx	r3
        reinterpret_cast<uint8_t*>(quantization));
  }

  // Clear the data in case someone still access tensor arena by mistake
  tensor->quantization.type = kTfLiteNoQuantization;
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	2200      	movs	r2, #0
 8009638:	701a      	strb	r2, [r3, #0]
  tensor->quantization.params = nullptr;
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	2200      	movs	r2, #0
 800963e:	605a      	str	r2, [r3, #4]
  tensor->data.data = nullptr;
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	2200      	movs	r2, #0
 8009644:	611a      	str	r2, [r3, #16]
  tensor->dims = nullptr;
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	2200      	movs	r2, #0
 800964a:	615a      	str	r2, [r3, #20]
  non_persistent_buffer_allocator_->DeallocateTemp(
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	685a      	ldr	r2, [r3, #4]
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	685b      	ldr	r3, [r3, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	330c      	adds	r3, #12
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	6839      	ldr	r1, [r7, #0]
 800965c:	4610      	mov	r0, r2
 800965e:	4798      	blx	r3
      reinterpret_cast<uint8_t*>(tensor));
}
 8009660:	bf00      	nop
 8009662:	3710      	adds	r7, #16
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}

08009668 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii>:

TfLiteTensor* MicroAllocator::AllocateTempTfLiteTensor(
    const Model* model, const SubgraphAllocations* subgraph_allocations,
    int tensor_index, int subgraph_index) {
 8009668:	b590      	push	{r4, r7, lr}
 800966a:	b089      	sub	sp, #36	; 0x24
 800966c:	af02      	add	r7, sp, #8
 800966e:	60f8      	str	r0, [r7, #12]
 8009670:	60b9      	str	r1, [r7, #8]
 8009672:	607a      	str	r2, [r7, #4]
 8009674:	603b      	str	r3, [r7, #0]
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_index);
 8009676:	68b8      	ldr	r0, [r7, #8]
 8009678:	f7f8 f98f 	bl	800199a <_ZNK6tflite5Model9subgraphsEv>
 800967c:	4602      	mov	r2, r0
 800967e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009680:	4619      	mov	r1, r3
 8009682:	4610      	mov	r0, r2
 8009684:	f7f8 fb70 	bl	8001d68 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmE3GetEm>
 8009688:	6178      	str	r0, [r7, #20]
  TFLITE_DCHECK(subgraph != nullptr);
 800968a:	697b      	ldr	r3, [r7, #20]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d101      	bne.n	8009694 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x2c>
 8009690:	f016 f9e6 	bl	801fa60 <abort>

  // This value is allocated from temporary arena space. It is guaranteed to be
  // around for at least the scope of the calling function. Since this struct
  // allocation takes place in temp space, no need to own or cleanup.
  TfLiteTensor* tensor = reinterpret_cast<TfLiteTensor*>(
      non_persistent_buffer_allocator_->AllocateTemp(sizeof(TfLiteTensor),
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	6858      	ldr	r0, [r3, #4]
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	685b      	ldr	r3, [r3, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	3308      	adds	r3, #8
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	2204      	movs	r2, #4
 80096a4:	2120      	movs	r1, #32
 80096a6:	4798      	blx	r3
 80096a8:	6138      	str	r0, [r7, #16]
                                                     alignof(TfLiteTensor)));

  // Populate any fields from the flatbuffer, since this TfLiteTensor struct is
  // allocated in the temp section of the arena, ensure that additional
  // allocations also take place in that section of the arena.
  if (PopulateTfLiteTensorFromFlatbuffer(model, tensor, tensor_index,
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	3338      	adds	r3, #56	; 0x38
 80096b0:	681c      	ldr	r4, [r3, #0]
 80096b2:	2301      	movs	r3, #1
 80096b4:	9301      	str	r3, [sp, #4]
 80096b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096b8:	9300      	str	r3, [sp, #0]
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	693a      	ldr	r2, [r7, #16]
 80096be:	68b9      	ldr	r1, [r7, #8]
 80096c0:	68f8      	ldr	r0, [r7, #12]
 80096c2:	47a0      	blx	r4
 80096c4:	4603      	mov	r3, r0
                                         subgraph_index,
                                         /*allocate_temp=*/true) != kTfLiteOk) {
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	bf14      	ite	ne
 80096ca:	2301      	movne	r3, #1
 80096cc:	2300      	moveq	r3, #0
 80096ce:	b2db      	uxtb	r3, r3
  if (PopulateTfLiteTensorFromFlatbuffer(model, tensor, tensor_index,
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d004      	beq.n	80096de <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x76>
    MicroPrintf(
 80096d4:	4814      	ldr	r0, [pc, #80]	; (8009728 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xc0>)
 80096d6:	f002 f89b 	bl	800b810 <_Z11MicroPrintfPKcz>
        "Failed to populate a temp TfLiteTensor struct from flatbuffer data!");
    return nullptr;
 80096da:	2300      	movs	r3, #0
 80096dc:	e01f      	b.n	800971e <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xb6>
  }

  if (subgraph_allocations != nullptr) {
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d01b      	beq.n	800971c <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xb4>
    // Tensor buffers that are allocated at runtime (e.g. non-weight buffers)
    // and not located in the flatbuffer are stored on the pre-allocated list of
    // TfLiteEvalTensors structs. These structs are the source of truth, simply
    // point the corresponding buffer to the new TfLiteTensor data value.
    tensor->data.data =
        subgraph_allocations[subgraph_index].tensors[tensor_index].data.data;
 80096e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096e6:	00db      	lsls	r3, r3, #3
 80096e8:	687a      	ldr	r2, [r7, #4]
 80096ea:	4413      	add	r3, r2
 80096ec:	6859      	ldr	r1, [r3, #4]
 80096ee:	683a      	ldr	r2, [r7, #0]
 80096f0:	4613      	mov	r3, r2
 80096f2:	005b      	lsls	r3, r3, #1
 80096f4:	4413      	add	r3, r2
 80096f6:	009b      	lsls	r3, r3, #2
 80096f8:	440b      	add	r3, r1
 80096fa:	681a      	ldr	r2, [r3, #0]
    tensor->data.data =
 80096fc:	693b      	ldr	r3, [r7, #16]
 80096fe:	611a      	str	r2, [r3, #16]
    // TfLiteEvalTensor structs must also be the source of truth for the
    // TfLiteTensor dims.
    tensor->dims =
        subgraph_allocations[subgraph_index].tensors[tensor_index].dims;
 8009700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009702:	00db      	lsls	r3, r3, #3
 8009704:	687a      	ldr	r2, [r7, #4]
 8009706:	4413      	add	r3, r2
 8009708:	6859      	ldr	r1, [r3, #4]
 800970a:	683a      	ldr	r2, [r7, #0]
 800970c:	4613      	mov	r3, r2
 800970e:	005b      	lsls	r3, r3, #1
 8009710:	4413      	add	r3, r2
 8009712:	009b      	lsls	r3, r3, #2
 8009714:	440b      	add	r3, r1
 8009716:	685a      	ldr	r2, [r3, #4]
    tensor->dims =
 8009718:	693b      	ldr	r3, [r7, #16]
 800971a:	615a      	str	r2, [r3, #20]
  }
  return tensor;
 800971c:	693b      	ldr	r3, [r7, #16]
}
 800971e:	4618      	mov	r0, r3
 8009720:	371c      	adds	r7, #28
 8009722:	46bd      	mov	sp, r7
 8009724:	bd90      	pop	{r4, r7, pc}
 8009726:	bf00      	nop
 8009728:	08022b30 	.word	0x08022b30

0800972c <_ZN6tflite14MicroAllocator18AllocateTempBufferEjj>:

uint8_t* MicroAllocator::AllocateTempBuffer(size_t size, size_t alignment) {
 800972c:	b580      	push	{r7, lr}
 800972e:	b084      	sub	sp, #16
 8009730:	af00      	add	r7, sp, #0
 8009732:	60f8      	str	r0, [r7, #12]
 8009734:	60b9      	str	r1, [r7, #8]
 8009736:	607a      	str	r2, [r7, #4]
  return non_persistent_buffer_allocator_->AllocateTemp(size, alignment);
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	6858      	ldr	r0, [r3, #4]
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	685b      	ldr	r3, [r3, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	3308      	adds	r3, #8
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	687a      	ldr	r2, [r7, #4]
 8009748:	68b9      	ldr	r1, [r7, #8]
 800974a:	4798      	blx	r3
 800974c:	4603      	mov	r3, r0
}
 800974e:	4618      	mov	r0, r3
 8009750:	3710      	adds	r7, #16
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}

08009756 <_ZN6tflite14MicroAllocator20DeallocateTempBufferEPh>:

void MicroAllocator::DeallocateTempBuffer(uint8_t* buffer) {
 8009756:	b580      	push	{r7, lr}
 8009758:	b082      	sub	sp, #8
 800975a:	af00      	add	r7, sp, #0
 800975c:	6078      	str	r0, [r7, #4]
 800975e:	6039      	str	r1, [r7, #0]
  non_persistent_buffer_allocator_->DeallocateTemp(buffer);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	685a      	ldr	r2, [r3, #4]
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	685b      	ldr	r3, [r3, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	330c      	adds	r3, #12
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	6839      	ldr	r1, [r7, #0]
 8009770:	4610      	mov	r0, r2
 8009772:	4798      	blx	r3
}
 8009774:	bf00      	nop
 8009776:	3708      	adds	r7, #8
 8009778:	46bd      	mov	sp, r7
 800977a:	bd80      	pop	{r7, pc}

0800977c <_ZN6tflite14MicroAllocator20ResetTempAllocationsEv>:

TfLiteStatus MicroAllocator::ResetTempAllocations() {
 800977c:	b580      	push	{r7, lr}
 800977e:	b082      	sub	sp, #8
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
  return non_persistent_buffer_allocator_->ResetTempAllocations();
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	685a      	ldr	r2, [r3, #4]
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	685b      	ldr	r3, [r3, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	3314      	adds	r3, #20
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	4610      	mov	r0, r2
 8009794:	4798      	blx	r3
 8009796:	4603      	mov	r3, r0
}
 8009798:	4618      	mov	r0, r3
 800979a:	3708      	adds	r7, #8
 800979c:	46bd      	mov	sp, r7
 800979e:	bd80      	pop	{r7, pc}

080097a0 <_ZN6tflite14MicroAllocator20IsAllTempDeallocatedEv>:

bool MicroAllocator::IsAllTempDeallocated() {
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b082      	sub	sp, #8
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
  return non_persistent_buffer_allocator_->IsAllTempDeallocated();
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	685a      	ldr	r2, [r3, #4]
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	685b      	ldr	r3, [r3, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	3310      	adds	r3, #16
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	4610      	mov	r0, r2
 80097b8:	4798      	blx	r3
 80097ba:	4603      	mov	r3, r0
}
 80097bc:	4618      	mov	r0, r3
 80097be:	3708      	adds	r7, #8
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}

080097c4 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE>:

TfLiteStatus MicroAllocator::AllocateTfLiteEvalTensors(
    const Model* model, SubgraphAllocations* subgraph_allocations) {
 80097c4:	b590      	push	{r4, r7, lr}
 80097c6:	b08b      	sub	sp, #44	; 0x2c
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	60f8      	str	r0, [r7, #12]
 80097cc:	60b9      	str	r1, [r7, #8]
 80097ce:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(subgraph_allocations != nullptr);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d101      	bne.n	80097da <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x16>
 80097d6:	f016 f943 	bl	801fa60 <abort>

  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 80097da:	2300      	movs	r3, #0
 80097dc:	627b      	str	r3, [r7, #36]	; 0x24
 80097de:	e06a      	b.n	80098b6 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xf2>
       subgraph_idx++) {
    const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
 80097e0:	68b8      	ldr	r0, [r7, #8]
 80097e2:	f7f8 f8da 	bl	800199a <_ZNK6tflite5Model9subgraphsEv>
 80097e6:	4603      	mov	r3, r0
 80097e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80097ea:	4618      	mov	r0, r3
 80097ec:	f7f8 fabc 	bl	8001d68 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmE3GetEm>
 80097f0:	61f8      	str	r0, [r7, #28]
    TFLITE_DCHECK(subgraph != nullptr);
 80097f2:	69fb      	ldr	r3, [r7, #28]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d101      	bne.n	80097fc <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x38>
 80097f8:	f016 f932 	bl	801fa60 <abort>

    size_t alloc_count = subgraph->tensors()->size();
 80097fc:	69f8      	ldr	r0, [r7, #28]
 80097fe:	f7fe f823 	bl	8007848 <_ZNK6tflite8SubGraph7tensorsEv>
 8009802:	4603      	mov	r3, r0
 8009804:	4618      	mov	r0, r3
 8009806:	f7fe fe35 	bl	8008474 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEmE4sizeEv>
 800980a:	61b8      	str	r0, [r7, #24]
    TfLiteEvalTensor* tensors = reinterpret_cast<TfLiteEvalTensor*>(
        persistent_buffer_allocator_->AllocatePersistentBuffer(
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	6898      	ldr	r0, [r3, #8]
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	689b      	ldr	r3, [r3, #8]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	3308      	adds	r3, #8
 8009818:	681c      	ldr	r4, [r3, #0]
 800981a:	69ba      	ldr	r2, [r7, #24]
 800981c:	4613      	mov	r3, r2
 800981e:	005b      	lsls	r3, r3, #1
 8009820:	4413      	add	r3, r2
 8009822:	009b      	lsls	r3, r3, #2
 8009824:	2204      	movs	r2, #4
 8009826:	4619      	mov	r1, r3
 8009828:	47a0      	blx	r4
 800982a:	6178      	str	r0, [r7, #20]
            sizeof(TfLiteEvalTensor) * alloc_count, alignof(TfLiteEvalTensor)));
    if (tensors == nullptr) {
 800982c:	697b      	ldr	r3, [r7, #20]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d10a      	bne.n	8009848 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x84>
      MicroPrintf(
 8009832:	69ba      	ldr	r2, [r7, #24]
 8009834:	4613      	mov	r3, r2
 8009836:	005b      	lsls	r3, r3, #1
 8009838:	4413      	add	r3, r2
 800983a:	009b      	lsls	r3, r3, #2
 800983c:	4619      	mov	r1, r3
 800983e:	4828      	ldr	r0, [pc, #160]	; (80098e0 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x11c>)
 8009840:	f001 ffe6 	bl	800b810 <_Z11MicroPrintfPKcz>
          "Failed to allocate memory for context->eval_tensors, "
          "%d bytes required",
          sizeof(TfLiteEvalTensor) * alloc_count);
      return kTfLiteError;
 8009844:	2301      	movs	r3, #1
 8009846:	e047      	b.n	80098d8 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x114>
    }

    for (size_t i = 0; i < alloc_count; ++i) {
 8009848:	2300      	movs	r3, #0
 800984a:	623b      	str	r3, [r7, #32]
 800984c:	e026      	b.n	800989c <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xd8>
      TfLiteStatus status = internal::InitializeTfLiteEvalTensorFromFlatbuffer(
          *subgraph->tensors()->Get(i), model->buffers(), &tensors[i]);
 800984e:	69f8      	ldr	r0, [r7, #28]
 8009850:	f7fd fffa 	bl	8007848 <_ZNK6tflite8SubGraph7tensorsEv>
 8009854:	4603      	mov	r3, r0
 8009856:	6a39      	ldr	r1, [r7, #32]
 8009858:	4618      	mov	r0, r3
 800985a:	f7fe fe19 	bl	8008490 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEmE3GetEm>
 800985e:	4604      	mov	r4, r0
      TfLiteStatus status = internal::InitializeTfLiteEvalTensorFromFlatbuffer(
 8009860:	68b8      	ldr	r0, [r7, #8]
 8009862:	f7fe f846 	bl	80078f2 <_ZNK6tflite5Model7buffersEv>
 8009866:	4601      	mov	r1, r0
          *subgraph->tensors()->Get(i), model->buffers(), &tensors[i]);
 8009868:	6a3a      	ldr	r2, [r7, #32]
 800986a:	4613      	mov	r3, r2
 800986c:	005b      	lsls	r3, r3, #1
 800986e:	4413      	add	r3, r2
 8009870:	009b      	lsls	r3, r3, #2
 8009872:	461a      	mov	r2, r3
      TfLiteStatus status = internal::InitializeTfLiteEvalTensorFromFlatbuffer(
 8009874:	697b      	ldr	r3, [r7, #20]
 8009876:	4413      	add	r3, r2
 8009878:	461a      	mov	r2, r3
 800987a:	4620      	mov	r0, r4
 800987c:	f7ff fb7e 	bl	8008f7c <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEmEEP16TfLiteEvalTensor>
 8009880:	4603      	mov	r3, r0
 8009882:	74fb      	strb	r3, [r7, #19]
      if (status != kTfLiteOk) {
 8009884:	7cfb      	ldrb	r3, [r7, #19]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d005      	beq.n	8009896 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xd2>
        MicroPrintf("Failed to initialize tensor %d", i);
 800988a:	6a39      	ldr	r1, [r7, #32]
 800988c:	4815      	ldr	r0, [pc, #84]	; (80098e4 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x120>)
 800988e:	f001 ffbf 	bl	800b810 <_Z11MicroPrintfPKcz>
        return kTfLiteError;
 8009892:	2301      	movs	r3, #1
 8009894:	e020      	b.n	80098d8 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x114>
    for (size_t i = 0; i < alloc_count; ++i) {
 8009896:	6a3b      	ldr	r3, [r7, #32]
 8009898:	3301      	adds	r3, #1
 800989a:	623b      	str	r3, [r7, #32]
 800989c:	6a3a      	ldr	r2, [r7, #32]
 800989e:	69bb      	ldr	r3, [r7, #24]
 80098a0:	429a      	cmp	r2, r3
 80098a2:	d3d4      	bcc.n	800984e <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x8a>
      }
    }
    subgraph_allocations[subgraph_idx].tensors = tensors;
 80098a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a6:	00db      	lsls	r3, r3, #3
 80098a8:	687a      	ldr	r2, [r7, #4]
 80098aa:	4413      	add	r3, r2
 80098ac:	697a      	ldr	r2, [r7, #20]
 80098ae:	605a      	str	r2, [r3, #4]
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 80098b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098b2:	3301      	adds	r3, #1
 80098b4:	627b      	str	r3, [r7, #36]	; 0x24
 80098b6:	68b8      	ldr	r0, [r7, #8]
 80098b8:	f7f8 f86f 	bl	800199a <_ZNK6tflite5Model9subgraphsEv>
 80098bc:	4603      	mov	r3, r0
 80098be:	4618      	mov	r0, r3
 80098c0:	f7f8 fa43 	bl	8001d4a <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmE4sizeEv>
 80098c4:	4602      	mov	r2, r0
 80098c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c8:	4293      	cmp	r3, r2
 80098ca:	bf34      	ite	cc
 80098cc:	2301      	movcc	r3, #1
 80098ce:	2300      	movcs	r3, #0
 80098d0:	b2db      	uxtb	r3, r3
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d184      	bne.n	80097e0 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1c>
  }
  return kTfLiteOk;
 80098d6:	2300      	movs	r3, #0
}
 80098d8:	4618      	mov	r0, r3
 80098da:	372c      	adds	r7, #44	; 0x2c
 80098dc:	46bd      	mov	sp, r7
 80098de:	bd90      	pop	{r4, r7, pc}
 80098e0:	08022b74 	.word	0x08022b74
 80098e4:	08022bbc 	.word	0x08022bbc

080098e8 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensorPKl>:

TfLiteStatus MicroAllocator::AllocateVariables(
    const SubGraph* subgraph, TfLiteEvalTensor* eval_tensors,
    const int32_t* offline_planner_offsets) {
 80098e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098ea:	b08b      	sub	sp, #44	; 0x2c
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6178      	str	r0, [r7, #20]
 80098f0:	6139      	str	r1, [r7, #16]
 80098f2:	60fa      	str	r2, [r7, #12]
 80098f4:	60bb      	str	r3, [r7, #8]
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 80098f6:	2300      	movs	r3, #0
 80098f8:	627b      	str	r3, [r7, #36]	; 0x24
 80098fa:	e05e      	b.n	80099ba <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensorPKl+0xd2>
    auto* tensor = subgraph->tensors()->Get(i);
 80098fc:	6938      	ldr	r0, [r7, #16]
 80098fe:	f7fd ffa3 	bl	8007848 <_ZNK6tflite8SubGraph7tensorsEv>
 8009902:	4603      	mov	r3, r0
 8009904:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009906:	4618      	mov	r0, r3
 8009908:	f7fe fdc2 	bl	8008490 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEmE3GetEm>
 800990c:	6238      	str	r0, [r7, #32]
    if (tensor->is_variable()) {
 800990e:	6a38      	ldr	r0, [r7, #32]
 8009910:	f7fd ff3e 	bl	8007790 <_ZNK6tflite6Tensor11is_variableEv>
 8009914:	4603      	mov	r3, r0
 8009916:	2b00      	cmp	r3, #0
 8009918:	d04c      	beq.n	80099b4 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensorPKl+0xcc>
      if (offline_planner_offsets == nullptr ||
 800991a:	68bb      	ldr	r3, [r7, #8]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d007      	beq.n	8009930 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensorPKl+0x48>
          offline_planner_offsets[i] == kOnlinePlannedBuffer) {
 8009920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009922:	009b      	lsls	r3, r3, #2
 8009924:	68ba      	ldr	r2, [r7, #8]
 8009926:	4413      	add	r3, r2
 8009928:	681b      	ldr	r3, [r3, #0]
      if (offline_planner_offsets == nullptr ||
 800992a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800992e:	d141      	bne.n	80099b4 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensorPKl+0xcc>
        size_t buffer_size;
        TF_LITE_ENSURE_STATUS(
 8009930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009932:	4613      	mov	r3, r2
 8009934:	005b      	lsls	r3, r3, #1
 8009936:	4413      	add	r3, r2
 8009938:	009b      	lsls	r3, r3, #2
 800993a:	461a      	mov	r2, r3
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	4413      	add	r3, r2
 8009940:	f107 0218 	add.w	r2, r7, #24
 8009944:	4611      	mov	r1, r2
 8009946:	4618      	mov	r0, r3
 8009948:	f7fd fece 	bl	80076e8 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
 800994c:	4603      	mov	r3, r0
 800994e:	77fb      	strb	r3, [r7, #31]
 8009950:	7ffb      	ldrb	r3, [r7, #31]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d001      	beq.n	800995a <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensorPKl+0x72>
 8009956:	7ffb      	ldrb	r3, [r7, #31]
 8009958:	e040      	b.n	80099dc <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensorPKl+0xf4>
            TfLiteEvalTensorByteLength(&eval_tensors[i], &buffer_size));

        eval_tensors[i].data.data =
            persistent_buffer_allocator_->AllocatePersistentBuffer(
 800995a:	697b      	ldr	r3, [r7, #20]
 800995c:	689e      	ldr	r6, [r3, #8]
 800995e:	697b      	ldr	r3, [r7, #20]
 8009960:	689b      	ldr	r3, [r3, #8]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	3308      	adds	r3, #8
 8009966:	681d      	ldr	r5, [r3, #0]
 8009968:	69bb      	ldr	r3, [r7, #24]
 800996a:	607b      	str	r3, [r7, #4]
                buffer_size, MicroArenaBufferAlignment());
 800996c:	f7fd fcae 	bl	80072cc <_ZN6tflite25MicroArenaBufferAlignmentEv>
 8009970:	4603      	mov	r3, r0
            persistent_buffer_allocator_->AllocatePersistentBuffer(
 8009972:	4619      	mov	r1, r3
        eval_tensors[i].data.data =
 8009974:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009976:	4613      	mov	r3, r2
 8009978:	005b      	lsls	r3, r3, #1
 800997a:	4413      	add	r3, r2
 800997c:	009b      	lsls	r3, r3, #2
 800997e:	461a      	mov	r2, r3
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	189c      	adds	r4, r3, r2
            persistent_buffer_allocator_->AllocatePersistentBuffer(
 8009984:	460a      	mov	r2, r1
 8009986:	6879      	ldr	r1, [r7, #4]
 8009988:	4630      	mov	r0, r6
 800998a:	47a8      	blx	r5
 800998c:	4603      	mov	r3, r0
        eval_tensors[i].data.data =
 800998e:	6023      	str	r3, [r4, #0]

        if (eval_tensors[i].data.data == nullptr) {
 8009990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009992:	4613      	mov	r3, r2
 8009994:	005b      	lsls	r3, r3, #1
 8009996:	4413      	add	r3, r2
 8009998:	009b      	lsls	r3, r3, #2
 800999a:	461a      	mov	r2, r3
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	4413      	add	r3, r2
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d106      	bne.n	80099b4 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensorPKl+0xcc>
          MicroPrintf("Failed to allocate variable tensor of size %d",
 80099a6:	69bb      	ldr	r3, [r7, #24]
 80099a8:	4619      	mov	r1, r3
 80099aa:	480e      	ldr	r0, [pc, #56]	; (80099e4 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensorPKl+0xfc>)
 80099ac:	f001 ff30 	bl	800b810 <_Z11MicroPrintfPKcz>
                      buffer_size);
          return kTfLiteError;
 80099b0:	2301      	movs	r3, #1
 80099b2:	e013      	b.n	80099dc <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensorPKl+0xf4>
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 80099b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b6:	3301      	adds	r3, #1
 80099b8:	627b      	str	r3, [r7, #36]	; 0x24
 80099ba:	6938      	ldr	r0, [r7, #16]
 80099bc:	f7fd ff44 	bl	8007848 <_ZNK6tflite8SubGraph7tensorsEv>
 80099c0:	4603      	mov	r3, r0
 80099c2:	4618      	mov	r0, r3
 80099c4:	f7fe fd56 	bl	8008474 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEmE4sizeEv>
 80099c8:	4602      	mov	r2, r0
 80099ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099cc:	4293      	cmp	r3, r2
 80099ce:	bf34      	ite	cc
 80099d0:	2301      	movcc	r3, #1
 80099d2:	2300      	movcs	r3, #0
 80099d4:	b2db      	uxtb	r3, r3
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d190      	bne.n	80098fc <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensorPKl+0x14>
        }
      }
    }
  }
  return kTfLiteOk;
 80099da:	2300      	movs	r3, #0
}
 80099dc:	4618      	mov	r0, r3
 80099de:	372c      	adds	r7, #44	; 0x2c
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099e4:	08022bdc 	.word	0x08022bdc

080099e8 <_ZN6tflite14MicroAllocator38AllocatePersistentTfLiteTensorInternalEv>:

TfLiteTensor* MicroAllocator::AllocatePersistentTfLiteTensorInternal() {
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b082      	sub	sp, #8
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
  return reinterpret_cast<TfLiteTensor*>(
      persistent_buffer_allocator_->AllocatePersistentBuffer(
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	6898      	ldr	r0, [r3, #8]
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	689b      	ldr	r3, [r3, #8]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	3308      	adds	r3, #8
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	2204      	movs	r2, #4
 8009a00:	2120      	movs	r1, #32
 8009a02:	4798      	blx	r3
 8009a04:	4603      	mov	r3, r0
          sizeof(TfLiteTensor), alignof(TfLiteTensor)));
}
 8009a06:	4618      	mov	r0, r3
 8009a08:	3708      	adds	r7, #8
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bd80      	pop	{r7, pc}

08009a0e <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib>:

TfLiteStatus MicroAllocator::PopulateTfLiteTensorFromFlatbuffer(
    const Model* model, TfLiteTensor* tensor, int tensor_index,
    int subgraph_idx, bool allocate_temp) {
 8009a0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a10:	b087      	sub	sp, #28
 8009a12:	af02      	add	r7, sp, #8
 8009a14:	60f8      	str	r0, [r7, #12]
 8009a16:	60b9      	str	r1, [r7, #8]
 8009a18:	607a      	str	r2, [r7, #4]
 8009a1a:	603b      	str	r3, [r7, #0]
  // TODO(b/162311891): This method serves as a stub to ensure quantized
  // allocations in the tail can be recorded. Once the interpreter has APIs for
  // accessing buffers on TfLiteEvalTensor this method can be dropped.
  return internal::InitializeTfLiteTensorFromFlatbuffer(
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	689c      	ldr	r4, [r3, #8]
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	685d      	ldr	r5, [r3, #4]
      persistent_buffer_allocator_, non_persistent_buffer_allocator_,
      allocate_temp,
      *model->subgraphs()->Get(subgraph_idx)->tensors()->Get(tensor_index),
 8009a24:	68b8      	ldr	r0, [r7, #8]
 8009a26:	f7f7 ffb8 	bl	800199a <_ZNK6tflite5Model9subgraphsEv>
 8009a2a:	4602      	mov	r2, r0
 8009a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a2e:	4619      	mov	r1, r3
 8009a30:	4610      	mov	r0, r2
 8009a32:	f7f8 f999 	bl	8001d68 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmE3GetEm>
 8009a36:	4603      	mov	r3, r0
 8009a38:	4618      	mov	r0, r3
 8009a3a:	f7fd ff05 	bl	8007848 <_ZNK6tflite8SubGraph7tensorsEv>
 8009a3e:	4602      	mov	r2, r0
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	4619      	mov	r1, r3
 8009a44:	4610      	mov	r0, r2
 8009a46:	f7fe fd23 	bl	8008490 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEmE3GetEm>
 8009a4a:	4606      	mov	r6, r0
  return internal::InitializeTfLiteTensorFromFlatbuffer(
 8009a4c:	68b8      	ldr	r0, [r7, #8]
 8009a4e:	f7fd ff50 	bl	80078f2 <_ZNK6tflite5Model7buffersEv>
 8009a52:	4601      	mov	r1, r0
 8009a54:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	9301      	str	r3, [sp, #4]
 8009a5c:	9100      	str	r1, [sp, #0]
 8009a5e:	4633      	mov	r3, r6
 8009a60:	4629      	mov	r1, r5
 8009a62:	4620      	mov	r0, r4
 8009a64:	f7ff f922 	bl	8008cac <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEmEEP12TfLiteTensor>
 8009a68:	4603      	mov	r3, r0
      model->buffers(), tensor);
}
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	3714      	adds	r7, #20
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009a72 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE>:

TfLiteStatus MicroAllocator::CommitStaticMemoryPlan(
    const Model* model, SubgraphAllocations* allocations,
    ScratchBufferHandle* scratch_buffer_handles) {
 8009a72:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a74:	b09f      	sub	sp, #124	; 0x7c
 8009a76:	af02      	add	r7, sp, #8
 8009a78:	60f8      	str	r0, [r7, #12]
 8009a7a:	60b9      	str	r1, [r7, #8]
 8009a7c:	607a      	str	r2, [r7, #4]
 8009a7e:	603b      	str	r3, [r7, #0]
  size_t head_usage = 0;
 8009a80:	2300      	movs	r3, #0
 8009a82:	66bb      	str	r3, [r7, #104]	; 0x68
  // allocated from the temp section and cleaned up at the bottom of this
  // function.

  // Use the AllocationInfoBuilder class to help determine where buffers are
  // used in the subgraph.
  AllocationInfoBuilder builder(model, non_persistent_buffer_allocator_);
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	685a      	ldr	r2, [r3, #4]
 8009a88:	f107 0318 	add.w	r3, r7, #24
 8009a8c:	68b9      	ldr	r1, [r7, #8]
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f7fe ff86 	bl	80089a0 <_ZN6tflite21AllocationInfoBuilderC1EPKNS_5ModelEPNS_29INonPersistentBufferAllocatorE>
  TF_LITE_ENSURE_STATUS(
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	699b      	ldr	r3, [r3, #24]
 8009a98:	461a      	mov	r2, r3
 8009a9a:	f107 0318 	add.w	r3, r7, #24
 8009a9e:	4611      	mov	r1, r2
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	f7fd fff9 	bl	8007a98 <_ZN6tflite21AllocationInfoBuilder20CreateAllocationInfoEi>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8009aac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d002      	beq.n	8009aba <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x48>
 8009ab4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009ab8:	e13e      	b.n	8009d38 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x2c6>
      builder.CreateAllocationInfo(scratch_buffer_request_count_));

  const int32_t* offline_planner_offsets = nullptr;
 8009aba:	2300      	movs	r3, #0
 8009abc:	617b      	str	r3, [r7, #20]
  TF_LITE_ENSURE_STATUS(
 8009abe:	f107 0214 	add.w	r2, r7, #20
 8009ac2:	f107 0318 	add.w	r3, r7, #24
 8009ac6:	4611      	mov	r1, r2
 8009ac8:	4618      	mov	r0, r3
 8009aca:	f7fe fbdf 	bl	800828c <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl>
 8009ace:	4603      	mov	r3, r0
 8009ad0:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8009ad4:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d002      	beq.n	8009ae2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x70>
 8009adc:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8009ae0:	e12a      	b.n	8009d38 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x2c6>
      builder.GetOfflinePlannedOffsets(&offline_planner_offsets));

  // We allocate buffers for variable tensors here since the offline planner
  // offsets are conviently available here.
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009ae6:	e027      	b.n	8009b38 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0xc6>
       subgraph_idx++) {
    const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
 8009ae8:	68b8      	ldr	r0, [r7, #8]
 8009aea:	f7f7 ff56 	bl	800199a <_ZNK6tflite5Model9subgraphsEv>
 8009aee:	4603      	mov	r3, r0
 8009af0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8009af2:	4618      	mov	r0, r3
 8009af4:	f7f8 f938 	bl	8001d68 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmE3GetEm>
 8009af8:	6438      	str	r0, [r7, #64]	; 0x40
    TFLITE_DCHECK(subgraph != nullptr);
 8009afa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d101      	bne.n	8009b04 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x92>
 8009b00:	f015 ffae 	bl	801fa60 <abort>
    TF_LITE_ENSURE_STATUS(AllocateVariables(
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	3330      	adds	r3, #48	; 0x30
 8009b0a:	681c      	ldr	r4, [r3, #0]
 8009b0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b0e:	00db      	lsls	r3, r3, #3
 8009b10:	687a      	ldr	r2, [r7, #4]
 8009b12:	4413      	add	r3, r2
 8009b14:	685a      	ldr	r2, [r3, #4]
 8009b16:	697b      	ldr	r3, [r7, #20]
 8009b18:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009b1a:	68f8      	ldr	r0, [r7, #12]
 8009b1c:	47a0      	blx	r4
 8009b1e:	4603      	mov	r3, r0
 8009b20:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8009b24:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d002      	beq.n	8009b32 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0xc0>
 8009b2c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009b30:	e102      	b.n	8009d38 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x2c6>
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 8009b32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b34:	3301      	adds	r3, #1
 8009b36:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009b38:	68b8      	ldr	r0, [r7, #8]
 8009b3a:	f7f7 ff2e 	bl	800199a <_ZNK6tflite5Model9subgraphsEv>
 8009b3e:	4603      	mov	r3, r0
 8009b40:	4618      	mov	r0, r3
 8009b42:	f7f8 f902 	bl	8001d4a <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmE4sizeEv>
 8009b46:	4602      	mov	r2, r0
 8009b48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b4a:	4293      	cmp	r3, r2
 8009b4c:	bf34      	ite	cc
 8009b4e:	2301      	movcc	r3, #1
 8009b50:	2300      	movcs	r3, #0
 8009b52:	b2db      	uxtb	r3, r3
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d1c7      	bne.n	8009ae8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x76>
        subgraph, allocations[subgraph_idx].tensors, offline_planner_offsets));
  }

  TF_LITE_ENSURE_STATUS(
 8009b58:	6979      	ldr	r1, [r7, #20]
 8009b5a:	f107 0318 	add.w	r3, r7, #24
 8009b5e:	687a      	ldr	r2, [r7, #4]
 8009b60:	4618      	mov	r0, r3
 8009b62:	f7fe f8b7 	bl	8007cd4 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE>
 8009b66:	4603      	mov	r3, r0
 8009b68:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 8009b6c:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d002      	beq.n	8009b7a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x108>
 8009b74:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8009b78:	e0de      	b.n	8009d38 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x2c6>
      builder.InitializeAllocationInfo(offline_planner_offsets, allocations));

  internal::ScratchBufferRequest* scratch_buffer_requests =
      GetScratchBufferRequests();
 8009b7a:	68f8      	ldr	r0, [r7, #12]
 8009b7c:	f000 f923 	bl	8009dc6 <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
 8009b80:	6638      	str	r0, [r7, #96]	; 0x60
  TF_LITE_ENSURE_STATUS(builder.MarkAllocationLifetimes(
 8009b82:	f107 0018 	add.w	r0, r7, #24
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	9300      	str	r3, [sp, #0]
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009b8e:	2100      	movs	r1, #0
 8009b90:	f7fe f9bb 	bl	8007f0a <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE>
 8009b94:	4603      	mov	r3, r0
 8009b96:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009b9a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d002      	beq.n	8009ba8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x136>
 8009ba2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009ba6:	e0c7      	b.n	8009d38 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x2c6>
      0, scratch_buffer_requests, scratch_buffer_handles, allocations));
  int allocation_info_count = builder.AllocationCount();
 8009ba8:	f107 0318 	add.w	r3, r7, #24
 8009bac:	4618      	mov	r0, r3
 8009bae:	f7fe ff0d 	bl	80089cc <_ZNK6tflite21AllocationInfoBuilder15AllocationCountEv>
 8009bb2:	65b8      	str	r0, [r7, #88]	; 0x58
  AllocationInfo* allocation_info = builder.Finish();
 8009bb4:	f107 0318 	add.w	r3, r7, #24
 8009bb8:	4618      	mov	r0, r3
 8009bba:	f7fe ff13 	bl	80089e4 <_ZNK6tflite21AllocationInfoBuilder6FinishEv>
 8009bbe:	6578      	str	r0, [r7, #84]	; 0x54

  // Remaining arena size that memory planner can use for calculating offsets.
  size_t remaining_arena_size =
      non_persistent_buffer_allocator_->GetAvailableMemory(
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	685d      	ldr	r5, [r3, #4]
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	685b      	ldr	r3, [r3, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	3330      	adds	r3, #48	; 0x30
 8009bcc:	681c      	ldr	r4, [r3, #0]
          MicroArenaBufferAlignment());
 8009bce:	f7fd fb7d 	bl	80072cc <_ZN6tflite25MicroArenaBufferAlignmentEv>
 8009bd2:	4603      	mov	r3, r0
      non_persistent_buffer_allocator_->GetAvailableMemory(
 8009bd4:	4619      	mov	r1, r3
 8009bd6:	4628      	mov	r0, r5
 8009bd8:	47a0      	blx	r4
 8009bda:	6538      	str	r0, [r7, #80]	; 0x50
  uint8_t* planner_arena = non_persistent_buffer_allocator_->AllocateTemp(
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	685d      	ldr	r5, [r3, #4]
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	685b      	ldr	r3, [r3, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	3308      	adds	r3, #8
 8009be8:	681c      	ldr	r4, [r3, #0]
      remaining_arena_size, MicroArenaBufferAlignment());
 8009bea:	f7fd fb6f 	bl	80072cc <_ZN6tflite25MicroArenaBufferAlignmentEv>
 8009bee:	4603      	mov	r3, r0
  uint8_t* planner_arena = non_persistent_buffer_allocator_->AllocateTemp(
 8009bf0:	461a      	mov	r2, r3
 8009bf2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009bf4:	4628      	mov	r0, r5
 8009bf6:	47a0      	blx	r4
 8009bf8:	64f8      	str	r0, [r7, #76]	; 0x4c

  if (planner_arena == nullptr) {
 8009bfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d101      	bne.n	8009c04 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x192>
    return kTfLiteError;
 8009c00:	2301      	movs	r3, #1
 8009c02:	e099      	b.n	8009d38 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x2c6>
  }

  memory_planner_->Init(planner_arena, remaining_arena_size);
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	6918      	ldr	r0, [r3, #16]
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	691b      	ldr	r3, [r3, #16]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	331c      	adds	r3, #28
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009c14:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009c16:	4798      	blx	r3
  TF_LITE_ENSURE_STATUS(
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	691b      	ldr	r3, [r3, #16]
 8009c1c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009c1e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009c20:	4618      	mov	r0, r3
 8009c22:	f7fe ff79 	bl	8008b18 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_18MicroMemoryPlannerEPKNS_14AllocationInfoEj>
 8009c26:	4603      	mov	r3, r0
 8009c28:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8009c2c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d002      	beq.n	8009c3a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x1c8>
 8009c34:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8009c38:	e07e      	b.n	8009d38 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x2c6>
      CreatePlan(memory_planner_, allocation_info, allocation_info_count));

  // Commit the plan.
  TF_LITE_ENSURE_STATUS(
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	691c      	ldr	r4, [r3, #16]
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	685a      	ldr	r2, [r3, #4]
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	685b      	ldr	r3, [r3, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	3324      	adds	r3, #36	; 0x24
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	4610      	mov	r0, r2
 8009c4e:	4798      	blx	r3
 8009c50:	4601      	mov	r1, r0
 8009c52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009c54:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009c56:	4620      	mov	r0, r4
 8009c58:	f7fe ffb7 	bl	8008bca <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_18MicroMemoryPlannerEPhPKNS_14AllocationInfoEj>
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 8009c62:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d002      	beq.n	8009c70 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x1fe>
 8009c6a:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8009c6e:	e063      	b.n	8009d38 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x2c6>
      CommitPlan(memory_planner_,
                 non_persistent_buffer_allocator_->GetOverlayMemoryAddress(),
                 allocation_info, allocation_info_count));

  // Reset all temp allocations used above:
  builder.FreeAllocationInfo();
 8009c70:	f107 0318 	add.w	r3, r7, #24
 8009c74:	4618      	mov	r0, r3
 8009c76:	f7fd ffa1 	bl	8007bbc <_ZN6tflite21AllocationInfoBuilder18FreeAllocationInfoEv>
  non_persistent_buffer_allocator_->DeallocateTemp(planner_arena);
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	685a      	ldr	r2, [r3, #4]
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	685b      	ldr	r3, [r3, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	330c      	adds	r3, #12
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009c8a:	4610      	mov	r0, r2
 8009c8c:	4798      	blx	r3
  TF_LITE_ENSURE_STATUS(
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	685a      	ldr	r2, [r3, #4]
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	685b      	ldr	r3, [r3, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	3314      	adds	r3, #20
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	4610      	mov	r0, r2
 8009c9e:	4798      	blx	r3
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 8009ca6:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d002      	beq.n	8009cb4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x242>
 8009cae:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8009cb2:	e041      	b.n	8009d38 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x2c6>
      non_persistent_buffer_allocator_->ResetTempAllocations());
  TF_LITE_ENSURE_STATUS(
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	6858      	ldr	r0, [r3, #4]
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	685b      	ldr	r3, [r3, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	3320      	adds	r3, #32
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	68fa      	ldr	r2, [r7, #12]
 8009cc4:	69d2      	ldr	r2, [r2, #28]
 8009cc6:	4611      	mov	r1, r2
 8009cc8:	4798      	blx	r3
 8009cca:	4603      	mov	r3, r0
 8009ccc:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
 8009cd0:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d002      	beq.n	8009cde <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x26c>
 8009cd8:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8009cdc:	e02c      	b.n	8009d38 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x2c6>
          scratch_buffer_head_));

#ifdef TF_LITE_SHOW_MEMORY_USE
  memory_planner_->PrintMemoryPlan();
#endif
  head_usage = memory_planner_->GetMaximumMemorySize();
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	691a      	ldr	r2, [r3, #16]
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	691b      	ldr	r3, [r3, #16]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	3310      	adds	r3, #16
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	4610      	mov	r0, r2
 8009cee:	4798      	blx	r3
 8009cf0:	66b8      	str	r0, [r7, #104]	; 0x68
  // The head is used to store memory plans for one model at a time during the
  // model preparation stage, and is re-purposed to store scratch buffer handles
  // during model invocation. The head must be as large as the greater of the
  // largest model memory plan's size and the total space required for all
  // scratch buffer handles.
  if (max_head_buffer_usage_ < head_usage) {
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	6a1b      	ldr	r3, [r3, #32]
 8009cf6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009cf8:	429a      	cmp	r2, r3
 8009cfa:	d902      	bls.n	8009d02 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x290>
    max_head_buffer_usage_ = head_usage;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009d00:	621a      	str	r2, [r3, #32]
  }

  // The head is used for storing scratch buffer allocations before finalizing a
  // memory plan in this function. Ensure that the head is set to the largest
  // memory plan sent through the allocator:
  TF_LITE_ENSURE_STATUS(
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	685d      	ldr	r5, [r3, #4]
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	685b      	ldr	r3, [r3, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	3328      	adds	r3, #40	; 0x28
 8009d0e:	681c      	ldr	r4, [r3, #0]
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	6a1e      	ldr	r6, [r3, #32]
 8009d14:	f7fd fada 	bl	80072cc <_ZN6tflite25MicroArenaBufferAlignmentEv>
 8009d18:	4603      	mov	r3, r0
 8009d1a:	461a      	mov	r2, r3
 8009d1c:	4631      	mov	r1, r6
 8009d1e:	4628      	mov	r0, r5
 8009d20:	47a0      	blx	r4
 8009d22:	4603      	mov	r3, r0
 8009d24:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009d28:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d002      	beq.n	8009d36 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x2c4>
 8009d30:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009d34:	e000      	b.n	8009d38 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x2c6>
      non_persistent_buffer_allocator_->ReserveNonPersistentOverlayMemory(
          max_head_buffer_usage_, MicroArenaBufferAlignment()));
  return kTfLiteOk;
 8009d36:	2300      	movs	r3, #0
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	3774      	adds	r7, #116	; 0x74
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009d40 <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj>:

TfLiteStatus MicroAllocator::AllocateScratchBufferHandles(
    ScratchBufferHandle** scratch_buffer_handles, size_t handle_count) {
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b084      	sub	sp, #16
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	60f8      	str	r0, [r7, #12]
 8009d48:	60b9      	str	r1, [r7, #8]
 8009d4a:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(scratch_buffer_handles != nullptr);
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d101      	bne.n	8009d56 <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj+0x16>
 8009d52:	f015 fe85 	bl	801fa60 <abort>

  if (scratch_buffer_request_count_ == 0) {
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	699b      	ldr	r3, [r3, #24]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d101      	bne.n	8009d62 <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj+0x22>
    // No scratch buffer requests were requested during model allocation.
    return kTfLiteOk;
 8009d5e:	2300      	movs	r3, #0
 8009d60:	e00e      	b.n	8009d80 <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj+0x40>
  }

  // Allocate a consecutive block of memory store the scratch buffer handles.
  // This alignment ensures quick lookup during inference time for the model:
  *scratch_buffer_handles = reinterpret_cast<ScratchBufferHandle*>(
      persistent_buffer_allocator_->AllocatePersistentBuffer(
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	6898      	ldr	r0, [r3, #8]
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	689b      	ldr	r3, [r3, #8]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	3308      	adds	r3, #8
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	687a      	ldr	r2, [r7, #4]
 8009d72:	0091      	lsls	r1, r2, #2
 8009d74:	2204      	movs	r2, #4
 8009d76:	4798      	blx	r3
 8009d78:	4602      	mov	r2, r0
  *scratch_buffer_handles = reinterpret_cast<ScratchBufferHandle*>(
 8009d7a:	68bb      	ldr	r3, [r7, #8]
 8009d7c:	601a      	str	r2, [r3, #0]
          sizeof(ScratchBufferHandle) * handle_count,
          alignof(ScratchBufferHandle)));

  return kTfLiteOk;
 8009d7e:	2300      	movs	r3, #0
}
 8009d80:	4618      	mov	r0, r3
 8009d82:	3710      	adds	r7, #16
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}

08009d88 <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv>:

TfLiteStatus MicroAllocator::InitScratchBufferData() {
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b082      	sub	sp, #8
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
  // A model is preparing to allocate resources, ensure that scratch buffer
  // request counter is cleared:
  scratch_buffer_request_count_ = 0;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	2200      	movs	r2, #0
 8009d94:	619a      	str	r2, [r3, #24]

  // All requests will be stored in the head section. Each kernel is allowed at
  // most kMaxScratchBuffersPerOp requests. Adjust the head to reserve at most
  // that many requests to begin:
  scratch_buffer_head_ =
      non_persistent_buffer_allocator_->AllocateResizableBuffer(
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6858      	ldr	r0, [r3, #4]
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	685b      	ldr	r3, [r3, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	3318      	adds	r3, #24
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	2204      	movs	r2, #4
 8009da6:	2190      	movs	r1, #144	; 0x90
 8009da8:	4798      	blx	r3
 8009daa:	4602      	mov	r2, r0
  scratch_buffer_head_ =
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	61da      	str	r2, [r3, #28]
          sizeof(internal::ScratchBufferRequest) * kMaxScratchBuffersPerOp,
          alignof(internal::ScratchBufferRequest));
  if (scratch_buffer_head_ == nullptr) {
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	69db      	ldr	r3, [r3, #28]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d101      	bne.n	8009dbc <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv+0x34>
    return kTfLiteError;
 8009db8:	2301      	movs	r3, #1
 8009dba:	e000      	b.n	8009dbe <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv+0x36>
  }

  return kTfLiteOk;
 8009dbc:	2300      	movs	r3, #0
}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	3708      	adds	r7, #8
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bd80      	pop	{r7, pc}

08009dc6 <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>:

internal::ScratchBufferRequest* MicroAllocator::GetScratchBufferRequests() {
 8009dc6:	b580      	push	{r7, lr}
 8009dc8:	b082      	sub	sp, #8
 8009dca:	af00      	add	r7, sp, #0
 8009dcc:	6078      	str	r0, [r7, #4]
  return reinterpret_cast<internal::ScratchBufferRequest*>(AlignPointerUp(
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	69db      	ldr	r3, [r3, #28]
 8009dd2:	2104      	movs	r1, #4
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	f7fd fb63 	bl	80074a0 <_ZN6tflite14AlignPointerUpEPhj>
 8009dda:	4603      	mov	r3, r0
      scratch_buffer_head_, alignof(internal::ScratchBufferRequest)));
}
 8009ddc:	4618      	mov	r0, r3
 8009dde:	3708      	adds	r7, #8
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bd80      	pop	{r7, pc}

08009de4 <_ZN6tflite14MicroAllocator23GetBuiltinDataAllocatorEv>:

TfLiteBridgeBuiltinDataAllocator* MicroAllocator::GetBuiltinDataAllocator() {
 8009de4:	b480      	push	{r7}
 8009de6:	b083      	sub	sp, #12
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
  return builtin_data_allocator_;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	68db      	ldr	r3, [r3, #12]
}
 8009df0:	4618      	mov	r0, r3
 8009df2:	370c      	adds	r7, #12
 8009df4:	46bd      	mov	sp, r7
 8009df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfa:	4770      	bx	lr

08009dfc <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIfmEEmEET_t>:
  P GetPointer(voffset_t field) const {
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b082      	sub	sp, #8
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
 8009e04:	460b      	mov	r3, r1
 8009e06:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P, OffsetSize>(field);
 8009e08:	887b      	ldrh	r3, [r7, #2]
 8009e0a:	4619      	mov	r1, r3
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f000 f84b 	bl	8009ea8 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfmEEmEET_t>
 8009e12:	4603      	mov	r3, r0
  }
 8009e14:	4618      	mov	r0, r3
 8009e16:	3708      	adds	r7, #8
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bd80      	pop	{r7, pc}

08009e1c <_ZNK11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEmEET_t>:
  P GetPointer(voffset_t field) const {
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b082      	sub	sp, #8
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
 8009e24:	460b      	mov	r3, r1
 8009e26:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P, OffsetSize>(field);
 8009e28:	887b      	ldrh	r3, [r7, #2]
 8009e2a:	4619      	mov	r1, r3
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	f000 f85b 	bl	8009ee8 <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEmEET_t>
 8009e32:	4603      	mov	r3, r0
  }
 8009e34:	4618      	mov	r0, r3
 8009e36:	3708      	adds	r7, #8
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bd80      	pop	{r7, pc}

08009e3c <_ZNK11flatbuffers6VectorIfmE4sizeEv>:
  SizeT size() const { return EndianScalar(length_); }
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b082      	sub	sp, #8
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	4618      	mov	r0, r3
 8009e4a:	f7f7 fefd 	bl	8001c48 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8009e4e:	4603      	mov	r3, r0
 8009e50:	4618      	mov	r0, r3
 8009e52:	3708      	adds	r7, #8
 8009e54:	46bd      	mov	sp, r7
 8009e56:	bd80      	pop	{r7, pc}

08009e58 <_ZNK11flatbuffers6VectorIfmE3GetEm>:
  return_type Get(SizeT i) const {
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b082      	sub	sp, #8
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
 8009e60:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	f7ff ffea 	bl	8009e3c <_ZNK11flatbuffers6VectorIfmE4sizeEv>
 8009e68:	4602      	mov	r2, r0
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	4293      	cmp	r3, r2
 8009e6e:	d305      	bcc.n	8009e7c <_ZNK11flatbuffers6VectorIfmE3GetEm+0x24>
 8009e70:	4b0a      	ldr	r3, [pc, #40]	; (8009e9c <_ZNK11flatbuffers6VectorIfmE3GetEm+0x44>)
 8009e72:	4a0b      	ldr	r2, [pc, #44]	; (8009ea0 <_ZNK11flatbuffers6VectorIfmE3GetEm+0x48>)
 8009e74:	21b0      	movs	r1, #176	; 0xb0
 8009e76:	480b      	ldr	r0, [pc, #44]	; (8009ea4 <_ZNK11flatbuffers6VectorIfmE3GetEm+0x4c>)
 8009e78:	f015 fdfa 	bl	801fa70 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	f000 f853 	bl	8009f28 <_ZNK11flatbuffers6VectorIfmE4DataEv>
 8009e82:	4603      	mov	r3, r0
 8009e84:	6839      	ldr	r1, [r7, #0]
 8009e86:	4618      	mov	r0, r3
 8009e88:	f000 f85a 	bl	8009f40 <_ZN11flatbuffers14IndirectHelperIfE4ReadEPKhj>
 8009e8c:	eef0 7a40 	vmov.f32	s15, s0
  }
 8009e90:	eeb0 0a67 	vmov.f32	s0, s15
 8009e94:	3708      	adds	r7, #8
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}
 8009e9a:	bf00      	nop
 8009e9c:	08022c0c 	.word	0x08022c0c
 8009ea0:	08022c18 	.word	0x08022c18
 8009ea4:	08022cd4 	.word	0x08022cd4

08009ea8 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfmEEmEET_t>:
  P GetPointer(voffset_t field) {
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b084      	sub	sp, #16
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
 8009eb0:	460b      	mov	r3, r1
 8009eb2:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8009eb4:	887b      	ldrh	r3, [r7, #2]
 8009eb6:	4619      	mov	r1, r3
 8009eb8:	6878      	ldr	r0, [r7, #4]
 8009eba:	f7f7 fd31 	bl	8001920 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8009ec2:	687a      	ldr	r2, [r7, #4]
 8009ec4:	89fb      	ldrh	r3, [r7, #14]
 8009ec6:	4413      	add	r3, r2
 8009ec8:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8009eca:	89fb      	ldrh	r3, [r7, #14]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d006      	beq.n	8009ede <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfmEEmEET_t+0x36>
 8009ed0:	68b8      	ldr	r0, [r7, #8]
 8009ed2:	f7f7 fee0 	bl	8001c96 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8009ed6:	4602      	mov	r2, r0
 8009ed8:	68bb      	ldr	r3, [r7, #8]
 8009eda:	4413      	add	r3, r2
                        : nullptr;
 8009edc:	e000      	b.n	8009ee0 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfmEEmEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8009ede:	2300      	movs	r3, #0
  }
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	3710      	adds	r7, #16
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd80      	pop	{r7, pc}

08009ee8 <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEmEET_t>:
  P GetPointer(voffset_t field) {
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b084      	sub	sp, #16
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
 8009ef0:	460b      	mov	r3, r1
 8009ef2:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8009ef4:	887b      	ldrh	r3, [r7, #2]
 8009ef6:	4619      	mov	r1, r3
 8009ef8:	6878      	ldr	r0, [r7, #4]
 8009efa:	f7f7 fd11 	bl	8001920 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8009efe:	4603      	mov	r3, r0
 8009f00:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8009f02:	687a      	ldr	r2, [r7, #4]
 8009f04:	89fb      	ldrh	r3, [r7, #14]
 8009f06:	4413      	add	r3, r2
 8009f08:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8009f0a:	89fb      	ldrh	r3, [r7, #14]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d006      	beq.n	8009f1e <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEmEET_t+0x36>
 8009f10:	68b8      	ldr	r0, [r7, #8]
 8009f12:	f7f7 fec0 	bl	8001c96 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8009f16:	4602      	mov	r2, r0
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	4413      	add	r3, r2
                        : nullptr;
 8009f1c:	e000      	b.n	8009f20 <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEmEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<OffsetSize>(p))
 8009f1e:	2300      	movs	r3, #0
  }
 8009f20:	4618      	mov	r0, r3
 8009f22:	3710      	adds	r7, #16
 8009f24:	46bd      	mov	sp, r7
 8009f26:	bd80      	pop	{r7, pc}

08009f28 <_ZNK11flatbuffers6VectorIfmE4DataEv>:
  const uint8_t *Data() const {
 8009f28:	b480      	push	{r7}
 8009f2a:	b083      	sub	sp, #12
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	3304      	adds	r3, #4
  }
 8009f34:	4618      	mov	r0, r3
 8009f36:	370c      	adds	r7, #12
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3e:	4770      	bx	lr

08009f40 <_ZN11flatbuffers14IndirectHelperIfE4ReadEPKhj>:
  static return_type Read(const uint8_t *p, const size_t i) {
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b082      	sub	sp, #8
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
 8009f48:	6039      	str	r1, [r7, #0]
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	009b      	lsls	r3, r3, #2
 8009f4e:	687a      	ldr	r2, [r7, #4]
 8009f50:	4413      	add	r3, r2
 8009f52:	edd3 7a00 	vldr	s15, [r3]
 8009f56:	eeb0 0a67 	vmov.f32	s0, s15
 8009f5a:	f7f8 fd5c 	bl	8002a16 <_ZN11flatbuffers12EndianScalarIfEET_S1_>
 8009f5e:	eef0 7a40 	vmov.f32	s15, s0
  }
 8009f62:	eeb0 0a67 	vmov.f32	s0, s15
 8009f66:	3708      	adds	r7, #8
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	bd80      	pop	{r7, pc}

08009f6c <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev>:
class MicroBuiltinDataAllocator : public TfLiteBridgeBuiltinDataAllocator {
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b082      	sub	sp, #8
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
 8009f74:	4a05      	ldr	r2, [pc, #20]	; (8009f8c <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev+0x20>)
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	601a      	str	r2, [r3, #0]
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	f7fe fce5 	bl	800894c <_ZN6tflite20BuiltinDataAllocatorD1Ev>
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	4618      	mov	r0, r3
 8009f86:	3708      	adds	r7, #8
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	bd80      	pop	{r7, pc}
 8009f8c:	08028ea8 	.word	0x08028ea8

08009f90 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD0Ev>:
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b082      	sub	sp, #8
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	f7ff ffe7 	bl	8009f6c <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev>
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f7fe fd72 	bl	8008a88 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatordlEPv>
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	3708      	adds	r7, #8
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bd80      	pop	{r7, pc}

08009fae <_ZN6tflite12_GLOBAL__N_114GetTensorIndexEiiPKi>:
#include "tensorflow/lite/micro/micro_log.h"

namespace tflite {
namespace {

int GetTensorIndex(int index, int max_size, const int* tensor_indices) {
 8009fae:	b480      	push	{r7}
 8009fb0:	b087      	sub	sp, #28
 8009fb2:	af00      	add	r7, sp, #0
 8009fb4:	60f8      	str	r0, [r7, #12]
 8009fb6:	60b9      	str	r1, [r7, #8]
 8009fb8:	607a      	str	r2, [r7, #4]
  if (index >= 0 && index < max_size) {
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	db0f      	blt.n	8009fe0 <_ZN6tflite12_GLOBAL__N_114GetTensorIndexEiiPKi+0x32>
 8009fc0:	68fa      	ldr	r2, [r7, #12]
 8009fc2:	68bb      	ldr	r3, [r7, #8]
 8009fc4:	429a      	cmp	r2, r3
 8009fc6:	da0b      	bge.n	8009fe0 <_ZN6tflite12_GLOBAL__N_114GetTensorIndexEiiPKi+0x32>
    const int tensor_index = tensor_indices[index];
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	009b      	lsls	r3, r3, #2
 8009fcc:	687a      	ldr	r2, [r7, #4]
 8009fce:	4413      	add	r3, r2
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	617b      	str	r3, [r7, #20]
    if (tensor_index != kTfLiteOptionalTensor) {
 8009fd4:	697b      	ldr	r3, [r7, #20]
 8009fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fda:	d001      	beq.n	8009fe0 <_ZN6tflite12_GLOBAL__N_114GetTensorIndexEiiPKi+0x32>
      return tensor_index;
 8009fdc:	697b      	ldr	r3, [r7, #20]
 8009fde:	e001      	b.n	8009fe4 <_ZN6tflite12_GLOBAL__N_114GetTensorIndexEiiPKi+0x36>
    }
  }
  return -1;
 8009fe0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	371c      	adds	r7, #28
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fee:	4770      	bx	lr

08009ff0 <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei>:

}  // namespace

TfLiteTensor* MicroContext::AllocateTempInputTensor(const TfLiteNode* node,
                                                    int index) {
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b086      	sub	sp, #24
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	60f8      	str	r0, [r7, #12]
 8009ff8:	60b9      	str	r1, [r7, #8]
 8009ffa:	607a      	str	r2, [r7, #4]
  const int tensor_index =
      GetTensorIndex(index, node->inputs->size, node->inputs->data);
 8009ffc:	68bb      	ldr	r3, [r7, #8]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	6819      	ldr	r1, [r3, #0]
 800a002:	68bb      	ldr	r3, [r7, #8]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	3304      	adds	r3, #4
 800a008:	461a      	mov	r2, r3
 800a00a:	6878      	ldr	r0, [r7, #4]
 800a00c:	f7ff ffcf 	bl	8009fae <_ZN6tflite12_GLOBAL__N_114GetTensorIndexEiiPKi>
 800a010:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 800a012:	697b      	ldr	r3, [r7, #20]
 800a014:	2b00      	cmp	r3, #0
 800a016:	da01      	bge.n	800a01c <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei+0x2c>
    return nullptr;
 800a018:	2300      	movs	r3, #0
 800a01a:	e008      	b.n	800a02e <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei+0x3e>
  }
  return AllocateTempTfLiteTensor(tensor_index);
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	3314      	adds	r3, #20
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	6979      	ldr	r1, [r7, #20]
 800a026:	68f8      	ldr	r0, [r7, #12]
 800a028:	4798      	blx	r3
 800a02a:	4603      	mov	r3, r0
 800a02c:	bf00      	nop
}
 800a02e:	4618      	mov	r0, r3
 800a030:	3718      	adds	r7, #24
 800a032:	46bd      	mov	sp, r7
 800a034:	bd80      	pop	{r7, pc}

0800a036 <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei>:

TfLiteTensor* MicroContext::AllocateTempOutputTensor(const TfLiteNode* node,
                                                     int index) {
 800a036:	b580      	push	{r7, lr}
 800a038:	b086      	sub	sp, #24
 800a03a:	af00      	add	r7, sp, #0
 800a03c:	60f8      	str	r0, [r7, #12]
 800a03e:	60b9      	str	r1, [r7, #8]
 800a040:	607a      	str	r2, [r7, #4]
  const int tensor_index =
      GetTensorIndex(index, node->outputs->size, node->outputs->data);
 800a042:	68bb      	ldr	r3, [r7, #8]
 800a044:	685b      	ldr	r3, [r3, #4]
 800a046:	6819      	ldr	r1, [r3, #0]
 800a048:	68bb      	ldr	r3, [r7, #8]
 800a04a:	685b      	ldr	r3, [r3, #4]
 800a04c:	3304      	adds	r3, #4
 800a04e:	461a      	mov	r2, r3
 800a050:	6878      	ldr	r0, [r7, #4]
 800a052:	f7ff ffac 	bl	8009fae <_ZN6tflite12_GLOBAL__N_114GetTensorIndexEiiPKi>
 800a056:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 800a058:	697b      	ldr	r3, [r7, #20]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	da01      	bge.n	800a062 <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei+0x2c>
    return nullptr;
 800a05e:	2300      	movs	r3, #0
 800a060:	e008      	b.n	800a074 <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei+0x3e>
  }
  return AllocateTempTfLiteTensor(tensor_index);
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	3314      	adds	r3, #20
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	6979      	ldr	r1, [r7, #20]
 800a06c:	68f8      	ldr	r0, [r7, #12]
 800a06e:	4798      	blx	r3
 800a070:	4603      	mov	r3, r0
 800a072:	bf00      	nop
}
 800a074:	4618      	mov	r0, r3
 800a076:	3718      	adds	r7, #24
 800a078:	46bd      	mov	sp, r7
 800a07a:	bd80      	pop	{r7, pc}

0800a07c <_ZN6tflite25MicroContextReportOpErrorEP13TfLiteContextPKcz>:
  }
  return AllocateTempTfLiteTensor(tensor_index);
}

void MicroContextReportOpError(struct TfLiteContext* context,
                               const char* format, ...) {
 800a07c:	b40e      	push	{r1, r2, r3}
 800a07e:	b580      	push	{r7, lr}
 800a080:	b085      	sub	sp, #20
 800a082:	af00      	add	r7, sp, #0
 800a084:	6078      	str	r0, [r7, #4]
  va_list args;
  va_start(args, format);
 800a086:	f107 0320 	add.w	r3, r7, #32
 800a08a:	60fb      	str	r3, [r7, #12]
  VMicroPrintf(format, args);
 800a08c:	68f9      	ldr	r1, [r7, #12]
 800a08e:	69f8      	ldr	r0, [r7, #28]
 800a090:	f001 fbac 	bl	800b7ec <_Z12VMicroPrintfPKcSt9__va_list>
  va_end(args);
}
 800a094:	bf00      	nop
 800a096:	3714      	adds	r7, #20
 800a098:	46bd      	mov	sp, r7
 800a09a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a09e:	b003      	add	sp, #12
 800a0a0:	4770      	bx	lr
	...

0800a0a4 <_ZN6tflite24EnumNamesBuiltinOperatorEv>:
inline const char * const *EnumNamesBuiltinOperator() {
 800a0a4:	b480      	push	{r7}
 800a0a6:	af00      	add	r7, sp, #0
  return names;
 800a0a8:	4b02      	ldr	r3, [pc, #8]	; (800a0b4 <_ZN6tflite24EnumNamesBuiltinOperatorEv+0x10>)
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b2:	4770      	bx	lr
 800a0b4:	08028f1c 	.word	0x08028f1c

0800a0b8 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>:
inline const char *EnumNameBuiltinOperator(BuiltinOperator e) {
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b086      	sub	sp, #24
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
  if (::flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_STABLEHLO_COMPOSITE)) return "";
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	60fb      	str	r3, [r7, #12]
 800a0c4:	23ce      	movs	r3, #206	; 0xce
 800a0c6:	613b      	str	r3, [r7, #16]
 800a0c8:	f107 0210 	add.w	r2, r7, #16
 800a0cc:	f107 010c 	add.w	r1, r7, #12
 800a0d0:	1d3b      	adds	r3, r7, #4
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	f000 fd2f 	bl	800ab36 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_>
 800a0d8:	4603      	mov	r3, r0
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d001      	beq.n	800a0e2 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE+0x2a>
 800a0de:	4b07      	ldr	r3, [pc, #28]	; (800a0fc <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE+0x44>)
 800a0e0:	e008      	b.n	800a0f4 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE+0x3c>
  const size_t index = static_cast<size_t>(e);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	617b      	str	r3, [r7, #20]
  return EnumNamesBuiltinOperator()[index];
 800a0e6:	f7ff ffdd 	bl	800a0a4 <_ZN6tflite24EnumNamesBuiltinOperatorEv>
 800a0ea:	4602      	mov	r2, r0
 800a0ec:	697b      	ldr	r3, [r7, #20]
 800a0ee:	009b      	lsls	r3, r3, #2
 800a0f0:	4413      	add	r3, r2
 800a0f2:	681b      	ldr	r3, [r3, #0]
}
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	3718      	adds	r7, #24
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	bd80      	pop	{r7, pc}
 800a0fc:	08023bc8 	.word	0x08023bc8

0800a100 <_ZNK6tflite8Operator14custom_optionsEv>:
  const ::flatbuffers::Vector<uint8_t> *custom_options() const {
 800a100:	b580      	push	{r7, lr}
 800a102:	b082      	sub	sp, #8
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_CUSTOM_OPTIONS);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	210e      	movs	r1, #14
 800a10c:	4618      	mov	r0, r3
 800a10e:	f7f9 fcad 	bl	8003a6c <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIhmEEmEET_t>
 800a112:	4603      	mov	r3, r0
  }
 800a114:	4618      	mov	r0, r3
 800a116:	3708      	adds	r7, #8
 800a118:	46bd      	mov	sp, r7
 800a11a:	bd80      	pop	{r7, pc}

0800a11c <_ZN6tflite36MicroContextAllocatePersistentBufferEP13TfLiteContextj>:
// kernels.
// TODO(b/213010668): migrate all existing kernels to use MicroContext, delete
// these functions, and remove corresponding members from the TfLiteContext
// struct for TFLM.
inline void* MicroContextAllocatePersistentBuffer(TfLiteContext* ctx,
                                                  size_t bytes) {
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b082      	sub	sp, #8
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
 800a124:	6039      	str	r1, [r7, #0]
  return GetMicroContext(ctx)->AllocatePersistentBuffer(bytes);
 800a126:	6878      	ldr	r0, [r7, #4]
 800a128:	f7f8 fbf5 	bl	8002916 <_ZN6tflite15GetMicroContextEPK13TfLiteContext>
 800a12c:	4603      	mov	r3, r0
 800a12e:	681a      	ldr	r2, [r3, #0]
 800a130:	3208      	adds	r2, #8
 800a132:	6812      	ldr	r2, [r2, #0]
 800a134:	6839      	ldr	r1, [r7, #0]
 800a136:	4618      	mov	r0, r3
 800a138:	4790      	blx	r2
 800a13a:	4603      	mov	r3, r0
}
 800a13c:	4618      	mov	r0, r3
 800a13e:	3708      	adds	r7, #8
 800a140:	46bd      	mov	sp, r7
 800a142:	bd80      	pop	{r7, pc}

0800a144 <_ZN6tflite39MicroContextRequestScratchBufferInArenaEP13TfLiteContextjPi>:
inline TfLiteStatus MicroContextRequestScratchBufferInArena(TfLiteContext* ctx,
                                                            size_t bytes,
                                                            int* buffer_idx) {
 800a144:	b590      	push	{r4, r7, lr}
 800a146:	b085      	sub	sp, #20
 800a148:	af00      	add	r7, sp, #0
 800a14a:	60f8      	str	r0, [r7, #12]
 800a14c:	60b9      	str	r1, [r7, #8]
 800a14e:	607a      	str	r2, [r7, #4]
  return GetMicroContext(ctx)->RequestScratchBufferInArena(bytes, buffer_idx);
 800a150:	68f8      	ldr	r0, [r7, #12]
 800a152:	f7f8 fbe0 	bl	8002916 <_ZN6tflite15GetMicroContextEPK13TfLiteContext>
 800a156:	4603      	mov	r3, r0
 800a158:	681a      	ldr	r2, [r3, #0]
 800a15a:	320c      	adds	r2, #12
 800a15c:	6814      	ldr	r4, [r2, #0]
 800a15e:	687a      	ldr	r2, [r7, #4]
 800a160:	68b9      	ldr	r1, [r7, #8]
 800a162:	4618      	mov	r0, r3
 800a164:	47a0      	blx	r4
 800a166:	4603      	mov	r3, r0
}
 800a168:	4618      	mov	r0, r3
 800a16a:	3714      	adds	r7, #20
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd90      	pop	{r4, r7, pc}

0800a170 <_ZN6tflite28MicroContextGetScratchBufferEP13TfLiteContexti>:
inline void* MicroContextGetScratchBuffer(TfLiteContext* ctx, int buffer_idx) {
 800a170:	b580      	push	{r7, lr}
 800a172:	b082      	sub	sp, #8
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
 800a178:	6039      	str	r1, [r7, #0]
  return GetMicroContext(ctx)->GetScratchBuffer(buffer_idx);
 800a17a:	6878      	ldr	r0, [r7, #4]
 800a17c:	f7f8 fbcb 	bl	8002916 <_ZN6tflite15GetMicroContextEPK13TfLiteContext>
 800a180:	4603      	mov	r3, r0
 800a182:	681a      	ldr	r2, [r3, #0]
 800a184:	3210      	adds	r2, #16
 800a186:	6812      	ldr	r2, [r2, #0]
 800a188:	6839      	ldr	r1, [r7, #0]
 800a18a:	4618      	mov	r0, r3
 800a18c:	4790      	blx	r2
 800a18e:	4603      	mov	r3, r0
}
 800a190:	4618      	mov	r0, r3
 800a192:	3708      	adds	r7, #8
 800a194:	46bd      	mov	sp, r7
 800a196:	bd80      	pop	{r7, pc}

0800a198 <_ZN6tflite21MicroContextGetTensorEPK13TfLiteContexti>:
inline TfLiteTensor* MicroContextGetTensor(const struct TfLiteContext* context,
                                           int tensor_idx) {
 800a198:	b580      	push	{r7, lr}
 800a19a:	b082      	sub	sp, #8
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
 800a1a0:	6039      	str	r1, [r7, #0]
  return GetMicroContext(context)->AllocateTempTfLiteTensor(tensor_idx);
 800a1a2:	6878      	ldr	r0, [r7, #4]
 800a1a4:	f7f8 fbb7 	bl	8002916 <_ZN6tflite15GetMicroContextEPK13TfLiteContext>
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	681a      	ldr	r2, [r3, #0]
 800a1ac:	3214      	adds	r2, #20
 800a1ae:	6812      	ldr	r2, [r2, #0]
 800a1b0:	6839      	ldr	r1, [r7, #0]
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	4790      	blx	r2
 800a1b6:	4603      	mov	r3, r0
}
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	3708      	adds	r7, #8
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	bd80      	pop	{r7, pc}

0800a1c0 <_ZN6tflite25MicroContextGetEvalTensorEPK13TfLiteContexti>:
inline TfLiteEvalTensor* MicroContextGetEvalTensor(
    const struct TfLiteContext* context, int tensor_idx) {
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b082      	sub	sp, #8
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
 800a1c8:	6039      	str	r1, [r7, #0]
  return GetMicroContext(context)->GetEvalTensor(tensor_idx);
 800a1ca:	6878      	ldr	r0, [r7, #4]
 800a1cc:	f7f8 fba3 	bl	8002916 <_ZN6tflite15GetMicroContextEPK13TfLiteContext>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	681a      	ldr	r2, [r3, #0]
 800a1d4:	3224      	adds	r2, #36	; 0x24
 800a1d6:	6812      	ldr	r2, [r2, #0]
 800a1d8:	6839      	ldr	r1, [r7, #0]
 800a1da:	4618      	mov	r0, r3
 800a1dc:	4790      	blx	r2
 800a1de:	4603      	mov	r3, r0
}
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	3708      	adds	r7, #8
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bd80      	pop	{r7, pc}

0800a1e8 <_ZN6tflite30MicroContextGetExternalContextEP13TfLiteContext25TfLiteExternalContextType>:
inline TfLiteExternalContext* MicroContextGetExternalContext(
    TfLiteContext* context, TfLiteExternalContextType unused) {
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b082      	sub	sp, #8
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
 800a1f0:	460b      	mov	r3, r1
 800a1f2:	70fb      	strb	r3, [r7, #3]
  return reinterpret_cast<TfLiteExternalContext*>(
      GetMicroContext(context)->external_context());
 800a1f4:	6878      	ldr	r0, [r7, #4]
 800a1f6:	f7f8 fb8e 	bl	8002916 <_ZN6tflite15GetMicroContextEPK13TfLiteContext>
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	681a      	ldr	r2, [r3, #0]
 800a1fe:	322c      	adds	r2, #44	; 0x2c
 800a200:	6812      	ldr	r2, [r2, #0]
 800a202:	4618      	mov	r0, r3
 800a204:	4790      	blx	r2
 800a206:	4603      	mov	r3, r0
}
 800a208:	4618      	mov	r0, r3
 800a20a:	3708      	adds	r7, #8
 800a20c:	46bd      	mov	sp, r7
 800a20e:	bd80      	pop	{r7, pc}

0800a210 <_ZN6tflite21MicroInterpreterGraph14GetAllocationsEv>:
  // to be the subgraph of that operator.
  int GetCurrentSubgraphIndex() { return current_subgraph_index_; }

  // Gets the list of alloctions for each subgraph. This is the source of truth
  // for all per-subgraph allocation data.
  SubgraphAllocations* GetAllocations() { return subgraph_allocations_; }
 800a210:	b480      	push	{r7}
 800a212:	b083      	sub	sp, #12
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	691b      	ldr	r3, [r3, #16]
 800a21c:	4618      	mov	r0, r3
 800a21e:	370c      	adds	r7, #12
 800a220:	46bd      	mov	sp, r7
 800a222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a226:	4770      	bx	lr

0800a228 <_ZNK6tflite16MicroInterpreter6inputsEv>:
  const flatbuffers::Vector<int32_t>& inputs() const {
 800a228:	b580      	push	{r7, lr}
 800a22a:	b082      	sub	sp, #8
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
    return *model_->subgraphs()->Get(0)->inputs();
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	4618      	mov	r0, r3
 800a236:	f7f7 fbb0 	bl	800199a <_ZNK6tflite5Model9subgraphsEv>
 800a23a:	4603      	mov	r3, r0
 800a23c:	2100      	movs	r1, #0
 800a23e:	4618      	mov	r0, r3
 800a240:	f7f7 fd92 	bl	8001d68 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmE3GetEm>
 800a244:	4603      	mov	r3, r0
 800a246:	4618      	mov	r0, r3
 800a248:	f7f7 fb8a 	bl	8001960 <_ZNK6tflite8SubGraph6inputsEv>
 800a24c:	4603      	mov	r3, r0
  }
 800a24e:	4618      	mov	r0, r3
 800a250:	3708      	adds	r7, #8
 800a252:	46bd      	mov	sp, r7
 800a254:	bd80      	pop	{r7, pc}

0800a256 <_ZNK6tflite16MicroInterpreter12outputs_sizeEv>:
    }
    return nullptr;
  }

  TfLiteTensor* output(size_t index);
  size_t outputs_size() const {
 800a256:	b580      	push	{r7, lr}
 800a258:	b082      	sub	sp, #8
 800a25a:	af00      	add	r7, sp, #0
 800a25c:	6078      	str	r0, [r7, #4]
    return model_->subgraphs()->Get(0)->outputs()->size();
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	4618      	mov	r0, r3
 800a264:	f7f7 fb99 	bl	800199a <_ZNK6tflite5Model9subgraphsEv>
 800a268:	4603      	mov	r3, r0
 800a26a:	2100      	movs	r1, #0
 800a26c:	4618      	mov	r0, r3
 800a26e:	f7f7 fd7b 	bl	8001d68 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmE3GetEm>
 800a272:	4603      	mov	r3, r0
 800a274:	4618      	mov	r0, r3
 800a276:	f7fd faf5 	bl	8007864 <_ZNK6tflite8SubGraph7outputsEv>
 800a27a:	4603      	mov	r3, r0
 800a27c:	4618      	mov	r0, r3
 800a27e:	f7f7 fd56 	bl	8001d2e <_ZNK11flatbuffers6VectorIlmE4sizeEv>
 800a282:	4603      	mov	r3, r0
  }
 800a284:	4618      	mov	r0, r3
 800a286:	3708      	adds	r7, #8
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd80      	pop	{r7, pc}

0800a28c <_ZNK6tflite16MicroInterpreter7outputsEv>:
  const flatbuffers::Vector<int32_t>& outputs() const {
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b082      	sub	sp, #8
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
    return *model_->subgraphs()->Get(0)->outputs();
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	4618      	mov	r0, r3
 800a29a:	f7f7 fb7e 	bl	800199a <_ZNK6tflite5Model9subgraphsEv>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	2100      	movs	r1, #0
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	f7f7 fd60 	bl	8001d68 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmE3GetEm>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	f7fd fada 	bl	8007864 <_ZNK6tflite8SubGraph7outputsEv>
 800a2b0:	4603      	mov	r3, r0
  }
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	3708      	adds	r7, #8
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bd80      	pop	{r7, pc}

0800a2ba <_ZN6tflite12_GLOBAL__N_123FlagToMemoryPlannerTypeEb>:
#include "tensorflow/lite/schema/schema_generated.h"
#include "tensorflow/lite/schema/schema_utils.h"

namespace tflite {
namespace {
MemoryPlannerType FlagToMemoryPlannerType(bool preserve_all_tensors) {
 800a2ba:	b480      	push	{r7}
 800a2bc:	b083      	sub	sp, #12
 800a2be:	af00      	add	r7, sp, #0
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	71fb      	strb	r3, [r7, #7]
  if (preserve_all_tensors) {
 800a2c4:	79fb      	ldrb	r3, [r7, #7]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d001      	beq.n	800a2ce <_ZN6tflite12_GLOBAL__N_123FlagToMemoryPlannerTypeEb+0x14>
    return MemoryPlannerType::kLinear;
 800a2ca:	2301      	movs	r3, #1
 800a2cc:	e000      	b.n	800a2d0 <_ZN6tflite12_GLOBAL__N_123FlagToMemoryPlannerTypeEb+0x16>
  } else {
    return MemoryPlannerType::kGreedy;
 800a2ce:	2300      	movs	r3, #0
  }
}
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	370c      	adds	r7, #12
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2da:	4770      	bx	lr

0800a2dc <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_22MicroResourceVariablesEPNS_22MicroProfilerInterfaceEb>:
}  // namespace

MicroInterpreter::MicroInterpreter(const Model* model,
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b086      	sub	sp, #24
 800a2e0:	af02      	add	r7, sp, #8
 800a2e2:	60f8      	str	r0, [r7, #12]
 800a2e4:	60b9      	str	r1, [r7, #8]
 800a2e6:	607a      	str	r2, [r7, #4]
 800a2e8:	603b      	str	r3, [r7, #0]
                                   uint8_t* tensor_arena,
                                   size_t tensor_arena_size,
                                   MicroResourceVariables* resource_variables,
                                   MicroProfilerInterface* profiler,
                                   bool preserve_all_tensors)
    : model_(model),
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	68ba      	ldr	r2, [r7, #8]
 800a2ee:	601a      	str	r2, [r3, #0]
      op_resolver_(op_resolver),
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	687a      	ldr	r2, [r7, #4]
 800a2f4:	605a      	str	r2, [r3, #4]
      graph_(&context_, model, &allocator_, resource_variables),
      tensors_allocated_(false),
      initialization_status_(kTfLiteError),
      input_tensors_(nullptr),
      output_tensors_(nullptr),
      micro_context_(&allocator_, model_, &graph_) {
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	3308      	adds	r3, #8
 800a2fa:	2264      	movs	r2, #100	; 0x64
 800a2fc:	2100      	movs	r1, #0
 800a2fe:	4618      	mov	r0, r3
 800a300:	f016 f974 	bl	80205ec <memset>
      allocator_(*MicroAllocator::Create(
 800a304:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a308:	4618      	mov	r0, r3
 800a30a:	f7ff ffd6 	bl	800a2ba <_ZN6tflite12_GLOBAL__N_123FlagToMemoryPlannerTypeEb>
 800a30e:	4603      	mov	r3, r0
 800a310:	461a      	mov	r2, r3
 800a312:	69b9      	ldr	r1, [r7, #24]
 800a314:	6838      	ldr	r0, [r7, #0]
 800a316:	f7fe febe 	bl	8009096 <_ZN6tflite14MicroAllocator6CreateEPhjNS_17MemoryPlannerTypeE>
 800a31a:	4602      	mov	r2, r0
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	66da      	str	r2, [r3, #108]	; 0x6c
      graph_(&context_, model, &allocator_, resource_variables),
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	f103 0108 	add.w	r1, r3, #8
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a330:	69fb      	ldr	r3, [r7, #28]
 800a332:	9300      	str	r3, [sp, #0]
 800a334:	4613      	mov	r3, r2
 800a336:	68ba      	ldr	r2, [r7, #8]
 800a338:	f000 fe54 	bl	800afe4 <_ZN6tflite21MicroInterpreterGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorEPNS_22MicroResourceVariablesE>
      tensors_allocated_(false),
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	2200      	movs	r2, #0
 800a340:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      initialization_status_(kTfLiteError),
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	2201      	movs	r2, #1
 800a348:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
      micro_context_(&allocator_, model_, &graph_) {
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	2200      	movs	r2, #0
 800a350:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      input_tensors_(nullptr),
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	2200      	movs	r2, #0
 800a358:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
      output_tensors_(nullptr),
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	2200      	movs	r2, #0
 800a360:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      micro_context_(&allocator_, model_, &graph_) {
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	f103 00a0 	add.w	r0, r3, #160	; 0xa0
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	681a      	ldr	r2, [r3, #0]
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	3370      	adds	r3, #112	; 0x70
 800a376:	f000 fc27 	bl	800abc8 <_ZN6tflite23MicroInterpreterContextC1EPNS_14MicroAllocatorEPKNS_5ModelEPNS_21MicroInterpreterGraphE>
  Init(profiler);
 800a37a:	6a39      	ldr	r1, [r7, #32]
 800a37c:	68f8      	ldr	r0, [r7, #12]
 800a37e:	f000 f82b 	bl	800a3d8 <_ZN6tflite16MicroInterpreter4InitEPNS_22MicroProfilerInterfaceE>
}
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	4618      	mov	r0, r3
 800a386:	3710      	adds	r7, #16
 800a388:	46bd      	mov	sp, r7
 800a38a:	bd80      	pop	{r7, pc}

0800a38c <_ZN6tflite16MicroInterpreterD1Ev>:
      output_tensors_(nullptr),
      micro_context_(&allocator_, model_, &graph_) {
  Init(profiler);
}

MicroInterpreter::~MicroInterpreter() {
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b082      	sub	sp, #8
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
  if (graph_.GetAllocations() != nullptr) {
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	3370      	adds	r3, #112	; 0x70
 800a398:	4618      	mov	r0, r3
 800a39a:	f7ff ff39 	bl	800a210 <_ZN6tflite21MicroInterpreterGraph14GetAllocationsEv>
 800a39e:	4603      	mov	r3, r0
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	bf14      	ite	ne
 800a3a4:	2301      	movne	r3, #1
 800a3a6:	2300      	moveq	r3, #0
 800a3a8:	b2db      	uxtb	r3, r3
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d004      	beq.n	800a3b8 <_ZN6tflite16MicroInterpreterD1Ev+0x2c>
    graph_.FreeSubgraphs();
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	3370      	adds	r3, #112	; 0x70
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	f000 ffa0 	bl	800b2f8 <_ZN6tflite21MicroInterpreterGraph13FreeSubgraphsEv>
MicroInterpreter::~MicroInterpreter() {
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	33a0      	adds	r3, #160	; 0xa0
 800a3bc:	4618      	mov	r0, r3
 800a3be:	f000 fc2b 	bl	800ac18 <_ZN6tflite23MicroInterpreterContextD1Ev>
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	3370      	adds	r3, #112	; 0x70
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	f000 fe3c 	bl	800b044 <_ZN6tflite21MicroInterpreterGraphD1Ev>
  }
}
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	3708      	adds	r7, #8
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	bd80      	pop	{r7, pc}
	...

0800a3d8 <_ZN6tflite16MicroInterpreter4InitEPNS_22MicroProfilerInterfaceE>:

void MicroInterpreter::Init(MicroProfilerInterface* profiler) {
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b082      	sub	sp, #8
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
 800a3e0:	6039      	str	r1, [r7, #0]
  micro_context_.SetInterpreterState(
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	33a0      	adds	r3, #160	; 0xa0
 800a3e6:	2100      	movs	r1, #0
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	f000 fd4d 	bl	800ae88 <_ZN6tflite23MicroInterpreterContext19SetInterpreterStateENS0_16InterpreterStateE>
      MicroInterpreterContext::InterpreterState::kInit);
  context_.impl_ = static_cast<void*>(&micro_context_);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	615a      	str	r2, [r3, #20]
  context_.ReportError = MicroContextReportOpError;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	4a0f      	ldr	r2, [pc, #60]	; (800a438 <_ZN6tflite16MicroInterpreter4InitEPNS_22MicroProfilerInterfaceE+0x60>)
 800a3fc:	61da      	str	r2, [r3, #28]
  context_.GetTensor = MicroContextGetTensor;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	4a0e      	ldr	r2, [pc, #56]	; (800a43c <_ZN6tflite16MicroInterpreter4InitEPNS_22MicroProfilerInterfaceE+0x64>)
 800a402:	659a      	str	r2, [r3, #88]	; 0x58
  context_.GetEvalTensor = MicroContextGetEvalTensor;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	4a0e      	ldr	r2, [pc, #56]	; (800a440 <_ZN6tflite16MicroInterpreter4InitEPNS_22MicroProfilerInterfaceE+0x68>)
 800a408:	65da      	str	r2, [r3, #92]	; 0x5c
  context_.profiler = profiler;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	683a      	ldr	r2, [r7, #0]
 800a40e:	63da      	str	r2, [r3, #60]	; 0x3c
  context_.RequestScratchBufferInArena =
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	4a0c      	ldr	r2, [pc, #48]	; (800a444 <_ZN6tflite16MicroInterpreter4InitEPNS_22MicroProfilerInterfaceE+0x6c>)
 800a414:	649a      	str	r2, [r3, #72]	; 0x48
      MicroContextRequestScratchBufferInArena;
  context_.GetExternalContext = MicroContextGetExternalContext;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	4a0b      	ldr	r2, [pc, #44]	; (800a448 <_ZN6tflite16MicroInterpreter4InitEPNS_22MicroProfilerInterfaceE+0x70>)
 800a41a:	631a      	str	r2, [r3, #48]	; 0x30
  context_.AllocatePersistentBuffer = MicroContextAllocatePersistentBuffer;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	4a0b      	ldr	r2, [pc, #44]	; (800a44c <_ZN6tflite16MicroInterpreter4InitEPNS_22MicroProfilerInterfaceE+0x74>)
 800a420:	641a      	str	r2, [r3, #64]	; 0x40
  context_.GetScratchBuffer = MicroContextGetScratchBuffer;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	4a0a      	ldr	r2, [pc, #40]	; (800a450 <_ZN6tflite16MicroInterpreter4InitEPNS_22MicroProfilerInterfaceE+0x78>)
 800a426:	64da      	str	r2, [r3, #76]	; 0x4c

  initialization_status_ = kTfLiteOk;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2200      	movs	r2, #0
 800a42c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
}
 800a430:	bf00      	nop
 800a432:	3708      	adds	r7, #8
 800a434:	46bd      	mov	sp, r7
 800a436:	bd80      	pop	{r7, pc}
 800a438:	0800a07d 	.word	0x0800a07d
 800a43c:	0800a199 	.word	0x0800a199
 800a440:	0800a1c1 	.word	0x0800a1c1
 800a444:	0800a145 	.word	0x0800a145
 800a448:	0800a1e9 	.word	0x0800a1e9
 800a44c:	0800a11d 	.word	0x0800a11d
 800a450:	0800a171 	.word	0x0800a171

0800a454 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv>:

TfLiteStatus MicroInterpreter::PrepareNodeAndRegistrationDataFromFlatbuffer() {
 800a454:	b590      	push	{r4, r7, lr}
 800a456:	b097      	sub	sp, #92	; 0x5c
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
  for (int subgraph_idx = 0; subgraph_idx < graph_.NumSubgraphs();
 800a45c:	2300      	movs	r3, #0
 800a45e:	657b      	str	r3, [r7, #84]	; 0x54
 800a460:	e14e      	b.n	800a700 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2ac>
       subgraph_idx++) {
    const SubGraph* subgraph = model_->subgraphs()->Get(subgraph_idx);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	4618      	mov	r0, r3
 800a468:	f7f7 fa97 	bl	800199a <_ZNK6tflite5Model9subgraphsEv>
 800a46c:	4602      	mov	r2, r0
 800a46e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a470:	4619      	mov	r1, r3
 800a472:	4610      	mov	r0, r2
 800a474:	f7f7 fc78 	bl	8001d68 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmE3GetEm>
 800a478:	6478      	str	r0, [r7, #68]	; 0x44
    TFLITE_DCHECK(subgraph != nullptr);
 800a47a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d101      	bne.n	800a484 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x30>
 800a480:	f015 faee 	bl	801fa60 <abort>

    auto* opcodes = model_->operator_codes();
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	4618      	mov	r0, r3
 800a48a:	f7fd fa24 	bl	80078d6 <_ZNK6tflite5Model14operator_codesEv>
 800a48e:	6438      	str	r0, [r7, #64]	; 0x40
    TfLiteBridgeBuiltinDataAllocator* builtin_data_allocator =
        allocator_.GetBuiltinDataAllocator();
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a494:	4618      	mov	r0, r3
 800a496:	f7ff fca5 	bl	8009de4 <_ZN6tflite14MicroAllocator23GetBuiltinDataAllocatorEv>
 800a49a:	63f8      	str	r0, [r7, #60]	; 0x3c
    uint32_t operators_size = NumSubgraphOperators(subgraph);
 800a49c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a49e:	f7fc ff5a 	bl	8007356 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
 800a4a2:	63b8      	str	r0, [r7, #56]	; 0x38
    for (size_t i = 0; i < operators_size; ++i) {
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	653b      	str	r3, [r7, #80]	; 0x50
 800a4a8:	e122      	b.n	800a6f0 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x29c>
      const auto* op = subgraph->operators()->Get(i);
 800a4aa:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a4ac:	f7fc ff45 	bl	800733a <_ZNK6tflite8SubGraph9operatorsEv>
 800a4b0:	4603      	mov	r3, r0
 800a4b2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	f7fe f811 	bl	80084dc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEmE3GetEm>
 800a4ba:	6378      	str	r0, [r7, #52]	; 0x34
      const size_t index = op->opcode_index();
 800a4bc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a4be:	f7fd f98a 	bl	80077d6 <_ZNK6tflite8Operator12opcode_indexEv>
 800a4c2:	6338      	str	r0, [r7, #48]	; 0x30
      if (index >= opcodes->size()) {
 800a4c4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800a4c6:	f7fe f82f 	bl	8008528 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEmE4sizeEv>
 800a4ca:	4602      	mov	r2, r0
 800a4cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4ce:	4293      	cmp	r3, r2
 800a4d0:	bf2c      	ite	cs
 800a4d2:	2301      	movcs	r3, #1
 800a4d4:	2300      	movcc	r3, #0
 800a4d6:	b2db      	uxtb	r3, r3
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d005      	beq.n	800a4e8 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x94>
        MicroPrintf("Missing registration for opcode_index %d\n", index);
 800a4dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a4de:	4892      	ldr	r0, [pc, #584]	; (800a728 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2d4>)
 800a4e0:	f001 f996 	bl	800b810 <_Z11MicroPrintfPKcz>
        return kTfLiteError;
 800a4e4:	2301      	movs	r3, #1
 800a4e6:	e11b      	b.n	800a720 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2cc>
      }
      const auto* opcode = opcodes->Get(index);
 800a4e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a4ea:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800a4ec:	f7fe f82a 	bl	8008544 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEmE3GetEm>
 800a4f0:	62f8      	str	r0, [r7, #44]	; 0x2c
      TfLiteStatus status =
          GetRegistrationFromOpCode(opcode, op_resolver_,
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	685c      	ldr	r4, [r3, #4]
                                    &(graph_.GetAllocations()[subgraph_idx]
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	3370      	adds	r3, #112	; 0x70
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	f7ff fe88 	bl	800a210 <_ZN6tflite21MicroInterpreterGraph14GetAllocationsEv>
 800a500:	4602      	mov	r2, r0
 800a502:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a504:	00db      	lsls	r3, r3, #3
 800a506:	4413      	add	r3, r2
                                          .node_and_registrations[i]
 800a508:	681a      	ldr	r2, [r3, #0]
 800a50a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a50c:	015b      	lsls	r3, r3, #5
 800a50e:	4413      	add	r3, r2
          GetRegistrationFromOpCode(opcode, op_resolver_,
 800a510:	331c      	adds	r3, #28
 800a512:	461a      	mov	r2, r3
 800a514:	4621      	mov	r1, r4
 800a516:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a518:	f001 f99a 	bl	800b850 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_15MicroOpResolverEPPK16TFLMRegistration>
 800a51c:	4603      	mov	r3, r0
 800a51e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                                          .registration));
      if (status != kTfLiteOk) {
 800a522:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a526:	2b00      	cmp	r3, #0
 800a528:	d00e      	beq.n	800a548 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xf4>
        MicroPrintf("Failed to get registration from op code %s\n ",
 800a52a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a52c:	f00a fa82 	bl	8014a34 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>
 800a530:	4603      	mov	r3, r0
 800a532:	4618      	mov	r0, r3
 800a534:	f7ff fdc0 	bl	800a0b8 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 800a538:	4603      	mov	r3, r0
 800a53a:	4619      	mov	r1, r3
 800a53c:	487b      	ldr	r0, [pc, #492]	; (800a72c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2d8>)
 800a53e:	f001 f967 	bl	800b810 <_Z11MicroPrintfPKcz>
                    EnumNameBuiltinOperator(GetBuiltinCode(opcode)));
        return status;
 800a542:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a546:	e0eb      	b.n	800a720 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2cc>
      }
      const auto* registration = graph_.GetAllocations()[subgraph_idx]
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	3370      	adds	r3, #112	; 0x70
 800a54c:	4618      	mov	r0, r3
 800a54e:	f7ff fe5f 	bl	800a210 <_ZN6tflite21MicroInterpreterGraph14GetAllocationsEv>
 800a552:	4602      	mov	r2, r0
 800a554:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a556:	00db      	lsls	r3, r3, #3
 800a558:	4413      	add	r3, r2
                                     .node_and_registrations[i]
 800a55a:	681a      	ldr	r2, [r3, #0]
 800a55c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a55e:	015b      	lsls	r3, r3, #5
 800a560:	4413      	add	r3, r2
                                     .registration;
 800a562:	69db      	ldr	r3, [r3, #28]
 800a564:	627b      	str	r3, [r7, #36]	; 0x24
      if (registration == nullptr) {
 800a566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d105      	bne.n	800a578 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x124>
        MicroPrintf("Skipping op for opcode_index %d\n", index);
 800a56c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a56e:	4870      	ldr	r0, [pc, #448]	; (800a730 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2dc>)
 800a570:	f001 f94e 	bl	800b810 <_Z11MicroPrintfPKcz>
        return kTfLiteError;
 800a574:	2301      	movs	r3, #1
 800a576:	e0d3      	b.n	800a720 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2cc>
      }
      BuiltinOperator op_type =
 800a578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a57a:	695b      	ldr	r3, [r3, #20]
 800a57c:	623b      	str	r3, [r7, #32]
          static_cast<BuiltinOperator>(registration->builtin_code);

      const char* custom_data = nullptr;
 800a57e:	2300      	movs	r3, #0
 800a580:	64fb      	str	r3, [r7, #76]	; 0x4c
      size_t custom_data_size = 0;
 800a582:	2300      	movs	r3, #0
 800a584:	64bb      	str	r3, [r7, #72]	; 0x48
      unsigned char* builtin_data = nullptr;
 800a586:	2300      	movs	r3, #0
 800a588:	60bb      	str	r3, [r7, #8]

      if (op_type == BuiltinOperator_CUSTOM) {
 800a58a:	6a3b      	ldr	r3, [r7, #32]
 800a58c:	2b20      	cmp	r3, #32
 800a58e:	d11b      	bne.n	800a5c8 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x174>
        // Custom Ops may or may not have a non-null custom_options field.
        if (op->custom_options() != nullptr) {
 800a590:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a592:	f7ff fdb5 	bl	800a100 <_ZNK6tflite8Operator14custom_optionsEv>
 800a596:	4603      	mov	r3, r0
 800a598:	2b00      	cmp	r3, #0
 800a59a:	bf14      	ite	ne
 800a59c:	2301      	movne	r3, #1
 800a59e:	2300      	moveq	r3, #0
 800a5a0:	b2db      	uxtb	r3, r3
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d04b      	beq.n	800a63e <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1ea>
          custom_data =
              reinterpret_cast<const char*>(op->custom_options()->data());
 800a5a6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a5a8:	f7ff fdaa 	bl	800a100 <_ZNK6tflite8Operator14custom_optionsEv>
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	f7f9 fdc3 	bl	800413a <_ZNK11flatbuffers6VectorIhmE4dataEv>
 800a5b4:	64f8      	str	r0, [r7, #76]	; 0x4c
          custom_data_size = op->custom_options()->size();
 800a5b6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a5b8:	f7ff fda2 	bl	800a100 <_ZNK6tflite8Operator14custom_optionsEv>
 800a5bc:	4603      	mov	r3, r0
 800a5be:	4618      	mov	r0, r3
 800a5c0:	f7f9 fb13 	bl	8003bea <_ZNK11flatbuffers6VectorIhmE4sizeEv>
 800a5c4:	64b8      	str	r0, [r7, #72]	; 0x48
 800a5c6:	e03a      	b.n	800a63e <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1ea>
        }
      } else {
        if (op->custom_options() != nullptr) {
 800a5c8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a5ca:	f7ff fd99 	bl	800a100 <_ZNK6tflite8Operator14custom_optionsEv>
 800a5ce:	4603      	mov	r3, r0
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	bf14      	ite	ne
 800a5d4:	2301      	movne	r3, #1
 800a5d6:	2300      	moveq	r3, #0
 800a5d8:	b2db      	uxtb	r3, r3
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d009      	beq.n	800a5f2 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x19e>
          MicroPrintf(
 800a5de:	6a38      	ldr	r0, [r7, #32]
 800a5e0:	f7ff fd6a 	bl	800a0b8 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	4619      	mov	r1, r3
 800a5e8:	4852      	ldr	r0, [pc, #328]	; (800a734 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2e0>)
 800a5ea:	f001 f911 	bl	800b810 <_Z11MicroPrintfPKcz>
              "Unsupported behavior: found builtin operator %s with custom "
              "options.\n",
              EnumNameBuiltinOperator(op_type));
          return kTfLiteError;
 800a5ee:	2301      	movs	r3, #1
 800a5f0:	e096      	b.n	800a720 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2cc>
        }

        TfLiteBridgeBuiltinParseFunction parser =
            op_resolver_.GetOpDataParser(op_type);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	685a      	ldr	r2, [r3, #4]
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	685b      	ldr	r3, [r3, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	3308      	adds	r3, #8
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	6a39      	ldr	r1, [r7, #32]
 800a602:	4610      	mov	r0, r2
 800a604:	4798      	blx	r3
 800a606:	61f8      	str	r0, [r7, #28]
        if (parser == nullptr) {
 800a608:	69fb      	ldr	r3, [r7, #28]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d109      	bne.n	800a622 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1ce>
          MicroPrintf("Did not find a parser for %s",
 800a60e:	6a38      	ldr	r0, [r7, #32]
 800a610:	f7ff fd52 	bl	800a0b8 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 800a614:	4603      	mov	r3, r0
 800a616:	4619      	mov	r1, r3
 800a618:	4847      	ldr	r0, [pc, #284]	; (800a738 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2e4>)
 800a61a:	f001 f8f9 	bl	800b810 <_Z11MicroPrintfPKcz>
                      EnumNameBuiltinOperator(op_type));

          return kTfLiteError;
 800a61e:	2301      	movs	r3, #1
 800a620:	e07e      	b.n	800a720 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2cc>
        }
        TF_LITE_ENSURE_STATUS(CallBuiltinParseFunction(
 800a622:	f107 0308 	add.w	r3, r7, #8
 800a626:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a628:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a62a:	69f8      	ldr	r0, [r7, #28]
 800a62c:	f00a f948 	bl	80148c0 <_ZN6tflite24CallBuiltinParseFunctionEPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvES3_S7_S9_>
 800a630:	4603      	mov	r3, r0
 800a632:	76fb      	strb	r3, [r7, #27]
 800a634:	7efb      	ldrb	r3, [r7, #27]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d001      	beq.n	800a63e <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1ea>
 800a63a:	7efb      	ldrb	r3, [r7, #27]
 800a63c:	e070      	b.n	800a720 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2cc>
            parser, op, builtin_data_allocator, (void**)(&builtin_data)));
      }

      TfLiteIntArray* inputs_array =
          FlatBufferVectorToTfLiteTypeArray(op->inputs());
 800a63e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a640:	f7fd f8d8 	bl	80077f4 <_ZNK6tflite8Operator6inputsEv>
 800a644:	4603      	mov	r3, r0
 800a646:	4618      	mov	r0, r3
 800a648:	f7fc feb9 	bl	80073be <_ZN6tflite33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIlmEE>
 800a64c:	6178      	str	r0, [r7, #20]
      TfLiteIntArray* outputs_array =
          FlatBufferVectorToTfLiteTypeArray(op->outputs());
 800a64e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a650:	f7fd f8de 	bl	8007810 <_ZNK6tflite8Operator7outputsEv>
 800a654:	4603      	mov	r3, r0
 800a656:	4618      	mov	r0, r3
 800a658:	f7fc feb1 	bl	80073be <_ZN6tflite33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIlmEE>
 800a65c:	6138      	str	r0, [r7, #16]

      TfLiteNode* node = &(
          graph_.GetAllocations()[subgraph_idx].node_and_registrations[i].node);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	3370      	adds	r3, #112	; 0x70
 800a662:	4618      	mov	r0, r3
 800a664:	f7ff fdd4 	bl	800a210 <_ZN6tflite21MicroInterpreterGraph14GetAllocationsEv>
 800a668:	4602      	mov	r2, r0
 800a66a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a66c:	00db      	lsls	r3, r3, #3
 800a66e:	4413      	add	r3, r2
 800a670:	681a      	ldr	r2, [r3, #0]
 800a672:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a674:	015b      	lsls	r3, r3, #5
 800a676:	4413      	add	r3, r2
 800a678:	60fb      	str	r3, [r7, #12]
      *node = {};
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	461a      	mov	r2, r3
 800a67e:	2300      	movs	r3, #0
 800a680:	6013      	str	r3, [r2, #0]
 800a682:	6053      	str	r3, [r2, #4]
 800a684:	6093      	str	r3, [r2, #8]
 800a686:	60d3      	str	r3, [r2, #12]
 800a688:	6113      	str	r3, [r2, #16]
 800a68a:	6153      	str	r3, [r2, #20]
 800a68c:	6193      	str	r3, [r2, #24]
      node->inputs = inputs_array;
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	697a      	ldr	r2, [r7, #20]
 800a692:	601a      	str	r2, [r3, #0]
      node->outputs = outputs_array;
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	693a      	ldr	r2, [r7, #16]
 800a698:	605a      	str	r2, [r3, #4]
      node->builtin_data = reinterpret_cast<void*>(builtin_data);
 800a69a:	68ba      	ldr	r2, [r7, #8]
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	611a      	str	r2, [r3, #16]
      node->custom_initial_data = custom_data;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a6a4:	615a      	str	r2, [r3, #20]
      node->custom_initial_data_size = custom_data_size;
 800a6a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	619a      	str	r2, [r3, #24]

      if (op->intermediates() && (op->intermediates()->size() > 0)) {
 800a6ac:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a6ae:	f7fd f8bd 	bl	800782c <_ZNK6tflite8Operator13intermediatesEv>
 800a6b2:	4603      	mov	r3, r0
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d00b      	beq.n	800a6d0 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x27c>
 800a6b8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a6ba:	f7fd f8b7 	bl	800782c <_ZNK6tflite8Operator13intermediatesEv>
 800a6be:	4603      	mov	r3, r0
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	f7f7 fb34 	bl	8001d2e <_ZNK11flatbuffers6VectorIlmE4sizeEv>
 800a6c6:	4603      	mov	r3, r0
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d001      	beq.n	800a6d0 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x27c>
 800a6cc:	2301      	movs	r3, #1
 800a6ce:	e000      	b.n	800a6d2 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x27e>
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d009      	beq.n	800a6ea <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x296>
        node->intermediates =
            FlatBufferVectorToTfLiteTypeArray(op->intermediates());
 800a6d6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a6d8:	f7fd f8a8 	bl	800782c <_ZNK6tflite8Operator13intermediatesEv>
 800a6dc:	4603      	mov	r3, r0
 800a6de:	4618      	mov	r0, r3
 800a6e0:	f7fc fe6d 	bl	80073be <_ZN6tflite33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIlmEE>
 800a6e4:	4602      	mov	r2, r0
        node->intermediates =
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	609a      	str	r2, [r3, #8]
    for (size_t i = 0; i < operators_size; ++i) {
 800a6ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a6ec:	3301      	adds	r3, #1
 800a6ee:	653b      	str	r3, [r7, #80]	; 0x50
 800a6f0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a6f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6f4:	429a      	cmp	r2, r3
 800a6f6:	f4ff aed8 	bcc.w	800a4aa <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x56>
  for (int subgraph_idx = 0; subgraph_idx < graph_.NumSubgraphs();
 800a6fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a6fc:	3301      	adds	r3, #1
 800a6fe:	657b      	str	r3, [r7, #84]	; 0x54
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	3370      	adds	r3, #112	; 0x70
 800a704:	4618      	mov	r0, r3
 800a706:	f000 ff8a 	bl	800b61e <_ZN6tflite21MicroInterpreterGraph12NumSubgraphsEv>
 800a70a:	4602      	mov	r2, r0
 800a70c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a70e:	4293      	cmp	r3, r2
 800a710:	bfb4      	ite	lt
 800a712:	2301      	movlt	r3, #1
 800a714:	2300      	movge	r3, #0
 800a716:	b2db      	uxtb	r3, r3
 800a718:	2b00      	cmp	r3, #0
 800a71a:	f47f aea2 	bne.w	800a462 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xe>
      }
    }
  }
  return kTfLiteOk;
 800a71e:	2300      	movs	r3, #0
}
 800a720:	4618      	mov	r0, r3
 800a722:	375c      	adds	r7, #92	; 0x5c
 800a724:	46bd      	mov	sp, r7
 800a726:	bd90      	pop	{r4, r7, pc}
 800a728:	08023bcc 	.word	0x08023bcc
 800a72c:	08023bf8 	.word	0x08023bf8
 800a730:	08023c28 	.word	0x08023c28
 800a734:	08023c4c 	.word	0x08023c4c
 800a738:	08023c94 	.word	0x08023c94

0800a73c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>:

TfLiteStatus MicroInterpreter::AllocateTensors() {
 800a73c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a740:	b08a      	sub	sp, #40	; 0x28
 800a742:	af02      	add	r7, sp, #8
 800a744:	6078      	str	r0, [r7, #4]
  SubgraphAllocations* allocations = allocator_.StartModelAllocation(model_);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	4619      	mov	r1, r3
 800a750:	4610      	mov	r0, r2
 800a752:	f7fe fcff 	bl	8009154 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE>
 800a756:	6178      	str	r0, [r7, #20]

  if (allocations == nullptr) {
 800a758:	697b      	ldr	r3, [r7, #20]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d108      	bne.n	800a770 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x34>
    MicroPrintf("Failed starting model allocation.\n");
 800a75e:	48aa      	ldr	r0, [pc, #680]	; (800aa08 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2cc>)
 800a760:	f001 f856 	bl	800b810 <_Z11MicroPrintfPKcz>
    initialization_status_ = kTfLiteError;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	2201      	movs	r2, #1
 800a768:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
    return kTfLiteError;
 800a76c:	2301      	movs	r3, #1
 800a76e:	e145      	b.n	800a9fc <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2c0>
  }

  graph_.SetSubgraphAllocations(allocations);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	3370      	adds	r3, #112	; 0x70
 800a774:	6979      	ldr	r1, [r7, #20]
 800a776:	4618      	mov	r0, r3
 800a778:	f000 ff63 	bl	800b642 <_ZN6tflite21MicroInterpreterGraph22SetSubgraphAllocationsEPNS_19SubgraphAllocationsE>

  TF_LITE_ENSURE_STATUS(PrepareNodeAndRegistrationDataFromFlatbuffer());
 800a77c:	6878      	ldr	r0, [r7, #4]
 800a77e:	f7ff fe69 	bl	800a454 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv>
 800a782:	4603      	mov	r3, r0
 800a784:	74fb      	strb	r3, [r7, #19]
 800a786:	7cfb      	ldrb	r3, [r7, #19]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d001      	beq.n	800a790 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x54>
 800a78c:	7cfb      	ldrb	r3, [r7, #19]
 800a78e:	e135      	b.n	800a9fc <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2c0>

  micro_context_.SetInterpreterState(
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	33a0      	adds	r3, #160	; 0xa0
 800a794:	2100      	movs	r1, #0
 800a796:	4618      	mov	r0, r3
 800a798:	f000 fb76 	bl	800ae88 <_ZN6tflite23MicroInterpreterContext19SetInterpreterStateENS0_16InterpreterStateE>
      MicroInterpreterContext::InterpreterState::kInit);
  TF_LITE_ENSURE_STATUS(graph_.InitSubgraphs());
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	3370      	adds	r3, #112	; 0x70
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	f000 fc70 	bl	800b086 <_ZN6tflite21MicroInterpreterGraph13InitSubgraphsEv>
 800a7a6:	4603      	mov	r3, r0
 800a7a8:	74bb      	strb	r3, [r7, #18]
 800a7aa:	7cbb      	ldrb	r3, [r7, #18]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d001      	beq.n	800a7b4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x78>
 800a7b0:	7cbb      	ldrb	r3, [r7, #18]
 800a7b2:	e123      	b.n	800a9fc <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2c0>

  micro_context_.SetInterpreterState(
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	33a0      	adds	r3, #160	; 0xa0
 800a7b8:	2101      	movs	r1, #1
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	f000 fb64 	bl	800ae88 <_ZN6tflite23MicroInterpreterContext19SetInterpreterStateENS0_16InterpreterStateE>
      MicroInterpreterContext::InterpreterState::kPrepare);

  TF_LITE_ENSURE_STATUS(graph_.PrepareSubgraphs());
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	3370      	adds	r3, #112	; 0x70
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	f000 fcc9 	bl	800b15c <_ZN6tflite21MicroInterpreterGraph16PrepareSubgraphsEv>
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	747b      	strb	r3, [r7, #17]
 800a7ce:	7c7b      	ldrb	r3, [r7, #17]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d001      	beq.n	800a7d8 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x9c>
 800a7d4:	7c7b      	ldrb	r3, [r7, #17]
 800a7d6:	e111      	b.n	800a9fc <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2c0>

  micro_context_.SetInterpreterState(
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	33a0      	adds	r3, #160	; 0xa0
 800a7dc:	2102      	movs	r1, #2
 800a7de:	4618      	mov	r0, r3
 800a7e0:	f000 fb52 	bl	800ae88 <_ZN6tflite23MicroInterpreterContext19SetInterpreterStateENS0_16InterpreterStateE>
      MicroInterpreterContext::InterpreterState::kMemoryPlanning);

  TF_LITE_ENSURE_OK(&context_, allocator_.FinishModelAllocation(
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	6edc      	ldr	r4, [r3, #108]	; 0x6c
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681d      	ldr	r5, [r3, #0]
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	3370      	adds	r3, #112	; 0x70
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	f7ff fd0d 	bl	800a210 <_ZN6tflite21MicroInterpreterGraph14GetAllocationsEv>
 800a7f6:	4602      	mov	r2, r0
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	3394      	adds	r3, #148	; 0x94
 800a7fc:	4629      	mov	r1, r5
 800a7fe:	4620      	mov	r0, r4
 800a800:	f7fe fd28 	bl	8009254 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE>
 800a804:	4603      	mov	r3, r0
 800a806:	743b      	strb	r3, [r7, #16]
 800a808:	7c3b      	ldrb	r3, [r7, #16]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d001      	beq.n	800a812 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xd6>
 800a80e:	7c3b      	ldrb	r3, [r7, #16]
 800a810:	e0f4      	b.n	800a9fc <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2c0>
                                   model_, graph_.GetAllocations(),
                                   &scratch_buffer_handles_));

  micro_context_.SetScratchBufferHandles(scratch_buffer_handles_);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a81e:	4619      	mov	r1, r3
 800a820:	4610      	mov	r0, r2
 800a822:	f000 faf9 	bl	800ae18 <_ZN6tflite23MicroInterpreterContext23SetScratchBufferHandlesEPNS_19ScratchBufferHandleE>

  // TODO(b/162311891): Drop these allocations when the interpreter supports
  // handling buffers from TfLiteEvalTensor.
  input_tensors_ =
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	331c      	adds	r3, #28
 800a832:	681c      	ldr	r4, [r3, #0]
          sizeof(TfLiteTensor*) * inputs_size()));
 800a834:	6878      	ldr	r0, [r7, #4]
 800a836:	f7f7 f8eb 	bl	8001a10 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>
 800a83a:	4603      	mov	r3, r0
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
 800a83c:	009b      	lsls	r3, r3, #2
 800a83e:	4619      	mov	r1, r3
 800a840:	4628      	mov	r0, r5
 800a842:	47a0      	blx	r4
 800a844:	4602      	mov	r2, r0
  input_tensors_ =
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  if (input_tensors_ == nullptr) {
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a852:	2b00      	cmp	r3, #0
 800a854:	d10a      	bne.n	800a86c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x130>
    MicroPrintf(
        "Failed to allocate memory for context->input_tensors_, "
        "%d bytes required",
        sizeof(TfLiteTensor*) * inputs_size());
 800a856:	6878      	ldr	r0, [r7, #4]
 800a858:	f7f7 f8da 	bl	8001a10 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>
 800a85c:	4603      	mov	r3, r0
    MicroPrintf(
 800a85e:	009b      	lsls	r3, r3, #2
 800a860:	4619      	mov	r1, r3
 800a862:	486a      	ldr	r0, [pc, #424]	; (800aa0c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2d0>)
 800a864:	f000 ffd4 	bl	800b810 <_Z11MicroPrintfPKcz>
    return kTfLiteError;
 800a868:	2301      	movs	r3, #1
 800a86a:	e0c7      	b.n	800a9fc <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2c0>
  }

  for (size_t i = 0; i < inputs_size(); ++i) {
 800a86c:	2300      	movs	r3, #0
 800a86e:	61fb      	str	r3, [r7, #28]
 800a870:	e038      	b.n	800a8e4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1a8>
    input_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	681d      	ldr	r5, [r3, #0]
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	603b      	str	r3, [r7, #0]
        model_, graph_.GetAllocations(), inputs().Get(i), 0);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	3370      	adds	r3, #112	; 0x70
 800a888:	4618      	mov	r0, r3
 800a88a:	f7ff fcc1 	bl	800a210 <_ZN6tflite21MicroInterpreterGraph14GetAllocationsEv>
 800a88e:	4680      	mov	r8, r0
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f7ff fcc9 	bl	800a228 <_ZNK6tflite16MicroInterpreter6inputsEv>
 800a896:	4603      	mov	r3, r0
 800a898:	69f9      	ldr	r1, [r7, #28]
 800a89a:	4618      	mov	r0, r3
 800a89c:	f7f9 f9ea 	bl	8003c74 <_ZNK11flatbuffers6VectorIlmE3GetEm>
 800a8a0:	4601      	mov	r1, r0
    input_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800a8a8:	69fb      	ldr	r3, [r7, #28]
 800a8aa:	009b      	lsls	r3, r3, #2
 800a8ac:	18d4      	adds	r4, r2, r3
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	9300      	str	r3, [sp, #0]
 800a8b2:	460b      	mov	r3, r1
 800a8b4:	4642      	mov	r2, r8
 800a8b6:	6839      	ldr	r1, [r7, #0]
 800a8b8:	4630      	mov	r0, r6
 800a8ba:	47a8      	blx	r5
 800a8bc:	4603      	mov	r3, r0
 800a8be:	6023      	str	r3, [r4, #0]
    if (input_tensors_[i] == nullptr) {
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800a8c6:	69fb      	ldr	r3, [r7, #28]
 800a8c8:	009b      	lsls	r3, r3, #2
 800a8ca:	4413      	add	r3, r2
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d105      	bne.n	800a8de <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1a2>
      MicroPrintf("Failed to initialize input tensor %d", i);
 800a8d2:	69f9      	ldr	r1, [r7, #28]
 800a8d4:	484e      	ldr	r0, [pc, #312]	; (800aa10 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2d4>)
 800a8d6:	f000 ff9b 	bl	800b810 <_Z11MicroPrintfPKcz>
      return kTfLiteError;
 800a8da:	2301      	movs	r3, #1
 800a8dc:	e08e      	b.n	800a9fc <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2c0>
  for (size_t i = 0; i < inputs_size(); ++i) {
 800a8de:	69fb      	ldr	r3, [r7, #28]
 800a8e0:	3301      	adds	r3, #1
 800a8e2:	61fb      	str	r3, [r7, #28]
 800a8e4:	6878      	ldr	r0, [r7, #4]
 800a8e6:	f7f7 f893 	bl	8001a10 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>
 800a8ea:	4602      	mov	r2, r0
 800a8ec:	69fb      	ldr	r3, [r7, #28]
 800a8ee:	4293      	cmp	r3, r2
 800a8f0:	bf34      	ite	cc
 800a8f2:	2301      	movcc	r3, #1
 800a8f4:	2300      	movcs	r3, #0
 800a8f6:	b2db      	uxtb	r3, r3
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d1ba      	bne.n	800a872 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x136>
  }

  // TODO(b/162311891): Drop these allocations when the interpreter supports
  // handling buffers from TfLiteEvalTensor.
  output_tensors_ =
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	331c      	adds	r3, #28
 800a908:	681c      	ldr	r4, [r3, #0]
          sizeof(TfLiteTensor*) * outputs_size()));
 800a90a:	6878      	ldr	r0, [r7, #4]
 800a90c:	f7ff fca3 	bl	800a256 <_ZNK6tflite16MicroInterpreter12outputs_sizeEv>
 800a910:	4603      	mov	r3, r0
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
 800a912:	009b      	lsls	r3, r3, #2
 800a914:	4619      	mov	r1, r3
 800a916:	4628      	mov	r0, r5
 800a918:	47a0      	blx	r4
 800a91a:	4602      	mov	r2, r0
  output_tensors_ =
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  if (output_tensors_ == nullptr) {
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d10a      	bne.n	800a942 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x206>
    MicroPrintf(
        "Failed to allocate memory for context->output_tensors_, "
        "%d bytes required",
        sizeof(TfLiteTensor*) * outputs_size());
 800a92c:	6878      	ldr	r0, [r7, #4]
 800a92e:	f7ff fc92 	bl	800a256 <_ZNK6tflite16MicroInterpreter12outputs_sizeEv>
 800a932:	4603      	mov	r3, r0
    MicroPrintf(
 800a934:	009b      	lsls	r3, r3, #2
 800a936:	4619      	mov	r1, r3
 800a938:	4836      	ldr	r0, [pc, #216]	; (800aa14 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2d8>)
 800a93a:	f000 ff69 	bl	800b810 <_Z11MicroPrintfPKcz>
    return kTfLiteError;
 800a93e:	2301      	movs	r3, #1
 800a940:	e05c      	b.n	800a9fc <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2c0>
  }

  for (size_t i = 0; i < outputs_size(); ++i) {
 800a942:	2300      	movs	r3, #0
 800a944:	61bb      	str	r3, [r7, #24]
 800a946:	e038      	b.n	800a9ba <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x27e>
    output_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	681d      	ldr	r5, [r3, #0]
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	603b      	str	r3, [r7, #0]
        model_, graph_.GetAllocations(), outputs().Get(i), 0);
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	3370      	adds	r3, #112	; 0x70
 800a95e:	4618      	mov	r0, r3
 800a960:	f7ff fc56 	bl	800a210 <_ZN6tflite21MicroInterpreterGraph14GetAllocationsEv>
 800a964:	4680      	mov	r8, r0
 800a966:	6878      	ldr	r0, [r7, #4]
 800a968:	f7ff fc90 	bl	800a28c <_ZNK6tflite16MicroInterpreter7outputsEv>
 800a96c:	4603      	mov	r3, r0
 800a96e:	69b9      	ldr	r1, [r7, #24]
 800a970:	4618      	mov	r0, r3
 800a972:	f7f9 f97f 	bl	8003c74 <_ZNK11flatbuffers6VectorIlmE3GetEm>
 800a976:	4601      	mov	r1, r0
    output_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800a97e:	69bb      	ldr	r3, [r7, #24]
 800a980:	009b      	lsls	r3, r3, #2
 800a982:	18d4      	adds	r4, r2, r3
 800a984:	2300      	movs	r3, #0
 800a986:	9300      	str	r3, [sp, #0]
 800a988:	460b      	mov	r3, r1
 800a98a:	4642      	mov	r2, r8
 800a98c:	6839      	ldr	r1, [r7, #0]
 800a98e:	4630      	mov	r0, r6
 800a990:	47a8      	blx	r5
 800a992:	4603      	mov	r3, r0
 800a994:	6023      	str	r3, [r4, #0]
    if (output_tensors_[i] == nullptr) {
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800a99c:	69bb      	ldr	r3, [r7, #24]
 800a99e:	009b      	lsls	r3, r3, #2
 800a9a0:	4413      	add	r3, r2
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d105      	bne.n	800a9b4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x278>
      MicroPrintf("Failed to initialize output tensor %d", i);
 800a9a8:	69b9      	ldr	r1, [r7, #24]
 800a9aa:	481b      	ldr	r0, [pc, #108]	; (800aa18 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2dc>)
 800a9ac:	f000 ff30 	bl	800b810 <_Z11MicroPrintfPKcz>
      return kTfLiteError;
 800a9b0:	2301      	movs	r3, #1
 800a9b2:	e023      	b.n	800a9fc <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2c0>
  for (size_t i = 0; i < outputs_size(); ++i) {
 800a9b4:	69bb      	ldr	r3, [r7, #24]
 800a9b6:	3301      	adds	r3, #1
 800a9b8:	61bb      	str	r3, [r7, #24]
 800a9ba:	6878      	ldr	r0, [r7, #4]
 800a9bc:	f7ff fc4b 	bl	800a256 <_ZNK6tflite16MicroInterpreter12outputs_sizeEv>
 800a9c0:	4602      	mov	r2, r0
 800a9c2:	69bb      	ldr	r3, [r7, #24]
 800a9c4:	4293      	cmp	r3, r2
 800a9c6:	bf34      	ite	cc
 800a9c8:	2301      	movcc	r3, #1
 800a9ca:	2300      	movcs	r3, #0
 800a9cc:	b2db      	uxtb	r3, r3
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d1ba      	bne.n	800a948 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x20c>
    }
  }

  TF_LITE_ENSURE_STATUS(Reset());
 800a9d2:	6878      	ldr	r0, [r7, #4]
 800a9d4:	f000 f894 	bl	800ab00 <_ZN6tflite16MicroInterpreter5ResetEv>
 800a9d8:	4603      	mov	r3, r0
 800a9da:	73fb      	strb	r3, [r7, #15]
 800a9dc:	7bfb      	ldrb	r3, [r7, #15]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d001      	beq.n	800a9e6 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2aa>
 800a9e2:	7bfb      	ldrb	r3, [r7, #15]
 800a9e4:	e00a      	b.n	800a9fc <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2c0>

  tensors_allocated_ = true;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	2201      	movs	r2, #1
 800a9ea:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  micro_context_.SetInterpreterState(
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	33a0      	adds	r3, #160	; 0xa0
 800a9f2:	2103      	movs	r1, #3
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	f000 fa47 	bl	800ae88 <_ZN6tflite23MicroInterpreterContext19SetInterpreterStateENS0_16InterpreterStateE>
      MicroInterpreterContext::InterpreterState::kInvoke);
  return kTfLiteOk;
 800a9fa:	2300      	movs	r3, #0
}
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	3720      	adds	r7, #32
 800aa00:	46bd      	mov	sp, r7
 800aa02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa06:	bf00      	nop
 800aa08:	08023cb4 	.word	0x08023cb4
 800aa0c:	08023cd8 	.word	0x08023cd8
 800aa10:	08023d24 	.word	0x08023d24
 800aa14:	08023d4c 	.word	0x08023d4c
 800aa18:	08023d98 	.word	0x08023d98

0800aa1c <_ZN6tflite16MicroInterpreter6InvokeEv>:

TfLiteStatus MicroInterpreter::Invoke() {
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b084      	sub	sp, #16
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
  if (initialization_status_ != kTfLiteOk) {
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d004      	beq.n	800aa38 <_ZN6tflite16MicroInterpreter6InvokeEv+0x1c>
    MicroPrintf("Invoke() called after initialization failed\n");
 800aa2e:	4811      	ldr	r0, [pc, #68]	; (800aa74 <_ZN6tflite16MicroInterpreter6InvokeEv+0x58>)
 800aa30:	f000 feee 	bl	800b810 <_Z11MicroPrintfPKcz>
    return kTfLiteError;
 800aa34:	2301      	movs	r3, #1
 800aa36:	e019      	b.n	800aa6c <_ZN6tflite16MicroInterpreter6InvokeEv+0x50>
  }

  // Ensure tensors are allocated before the interpreter is invoked to avoid
  // difficult to debug segfaults.
  if (!tensors_allocated_) {
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800aa3e:	f083 0301 	eor.w	r3, r3, #1
 800aa42:	b2db      	uxtb	r3, r3
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d009      	beq.n	800aa5c <_ZN6tflite16MicroInterpreter6InvokeEv+0x40>
    TF_LITE_ENSURE_OK(&context_, AllocateTensors());
 800aa48:	6878      	ldr	r0, [r7, #4]
 800aa4a:	f7ff fe77 	bl	800a73c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
 800aa4e:	4603      	mov	r3, r0
 800aa50:	73fb      	strb	r3, [r7, #15]
 800aa52:	7bfb      	ldrb	r3, [r7, #15]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d001      	beq.n	800aa5c <_ZN6tflite16MicroInterpreter6InvokeEv+0x40>
 800aa58:	7bfb      	ldrb	r3, [r7, #15]
 800aa5a:	e007      	b.n	800aa6c <_ZN6tflite16MicroInterpreter6InvokeEv+0x50>
  }
  return graph_.InvokeSubgraph(0);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	3370      	adds	r3, #112	; 0x70
 800aa60:	2100      	movs	r1, #0
 800aa62:	4618      	mov	r0, r3
 800aa64:	f000 fca4 	bl	800b3b0 <_ZN6tflite21MicroInterpreterGraph14InvokeSubgraphEi>
 800aa68:	4603      	mov	r3, r0
 800aa6a:	bf00      	nop
}
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	3710      	adds	r7, #16
 800aa70:	46bd      	mov	sp, r7
 800aa72:	bd80      	pop	{r7, pc}
 800aa74:	08023dc0 	.word	0x08023dc0

0800aa78 <_ZN6tflite16MicroInterpreter5inputEj>:

TfLiteTensor* MicroInterpreter::input(size_t index) {
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b084      	sub	sp, #16
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
 800aa80:	6039      	str	r1, [r7, #0]
  const size_t length = inputs_size();
 800aa82:	6878      	ldr	r0, [r7, #4]
 800aa84:	f7f6 ffc4 	bl	8001a10 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>
 800aa88:	60f8      	str	r0, [r7, #12]
  if (index >= length) {
 800aa8a:	683a      	ldr	r2, [r7, #0]
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	429a      	cmp	r2, r3
 800aa90:	d306      	bcc.n	800aaa0 <_ZN6tflite16MicroInterpreter5inputEj+0x28>
    MicroPrintf("Input index %d out of range (length is %d)", index, length);
 800aa92:	68fa      	ldr	r2, [r7, #12]
 800aa94:	6839      	ldr	r1, [r7, #0]
 800aa96:	4808      	ldr	r0, [pc, #32]	; (800aab8 <_ZN6tflite16MicroInterpreter5inputEj+0x40>)
 800aa98:	f000 feba 	bl	800b810 <_Z11MicroPrintfPKcz>
    return nullptr;
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	e006      	b.n	800aaae <_ZN6tflite16MicroInterpreter5inputEj+0x36>
  }
  return input_tensors_[index];
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	009b      	lsls	r3, r3, #2
 800aaaa:	4413      	add	r3, r2
 800aaac:	681b      	ldr	r3, [r3, #0]
}
 800aaae:	4618      	mov	r0, r3
 800aab0:	3710      	adds	r7, #16
 800aab2:	46bd      	mov	sp, r7
 800aab4:	bd80      	pop	{r7, pc}
 800aab6:	bf00      	nop
 800aab8:	08023df0 	.word	0x08023df0

0800aabc <_ZN6tflite16MicroInterpreter6outputEj>:

TfLiteTensor* MicroInterpreter::output(size_t index) {
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b084      	sub	sp, #16
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
 800aac4:	6039      	str	r1, [r7, #0]
  const size_t length = outputs_size();
 800aac6:	6878      	ldr	r0, [r7, #4]
 800aac8:	f7ff fbc5 	bl	800a256 <_ZNK6tflite16MicroInterpreter12outputs_sizeEv>
 800aacc:	60f8      	str	r0, [r7, #12]
  if (index >= length) {
 800aace:	683a      	ldr	r2, [r7, #0]
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	429a      	cmp	r2, r3
 800aad4:	d306      	bcc.n	800aae4 <_ZN6tflite16MicroInterpreter6outputEj+0x28>
    MicroPrintf("Output index %d out of range (length is %d)", index, length);
 800aad6:	68fa      	ldr	r2, [r7, #12]
 800aad8:	6839      	ldr	r1, [r7, #0]
 800aada:	4808      	ldr	r0, [pc, #32]	; (800aafc <_ZN6tflite16MicroInterpreter6outputEj+0x40>)
 800aadc:	f000 fe98 	bl	800b810 <_Z11MicroPrintfPKcz>
    return nullptr;
 800aae0:	2300      	movs	r3, #0
 800aae2:	e006      	b.n	800aaf2 <_ZN6tflite16MicroInterpreter6outputEj+0x36>
  }
  return output_tensors_[index];
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	009b      	lsls	r3, r3, #2
 800aaee:	4413      	add	r3, r2
 800aaf0:	681b      	ldr	r3, [r3, #0]
}
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	3710      	adds	r7, #16
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	bd80      	pop	{r7, pc}
 800aafa:	bf00      	nop
 800aafc:	08023e1c 	.word	0x08023e1c

0800ab00 <_ZN6tflite16MicroInterpreter5ResetEv>:

TfLiteStatus MicroInterpreter::Reset() {
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b084      	sub	sp, #16
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
  TfLiteStatus status = graph_.ResetSubgraphs();
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	3370      	adds	r3, #112	; 0x70
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	f000 fb97 	bl	800b240 <_ZN6tflite21MicroInterpreterGraph14ResetSubgraphsEv>
 800ab12:	4603      	mov	r3, r0
 800ab14:	73fb      	strb	r3, [r7, #15]
  if (status != kTfLiteOk) {
 800ab16:	7bfb      	ldrb	r3, [r7, #15]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d001      	beq.n	800ab20 <_ZN6tflite16MicroInterpreter5ResetEv+0x20>
    return status;
 800ab1c:	7bfb      	ldrb	r3, [r7, #15]
 800ab1e:	e006      	b.n	800ab2e <_ZN6tflite16MicroInterpreter5ResetEv+0x2e>
  }
  return graph_.ResetVariableTensors();
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	3370      	adds	r3, #112	; 0x70
 800ab24:	4618      	mov	r0, r3
 800ab26:	f000 fcdf 	bl	800b4e8 <_ZN6tflite21MicroInterpreterGraph20ResetVariableTensorsEv>
 800ab2a:	4603      	mov	r3, r0
 800ab2c:	bf00      	nop
}
 800ab2e:	4618      	mov	r0, r3
 800ab30:	3710      	adds	r7, #16
 800ab32:	46bd      	mov	sp, r7
 800ab34:	bd80      	pop	{r7, pc}

0800ab36 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_>:

// Check 'v' is out of closed range [low; high].
// Workaround for GCC warning [-Werror=type-limits]:
// comparison is always true due to limited range of data type.
template<typename T>
inline bool IsOutRange(const T &v, const T &low, const T &high) {
 800ab36:	b480      	push	{r7}
 800ab38:	b085      	sub	sp, #20
 800ab3a:	af00      	add	r7, sp, #0
 800ab3c:	60f8      	str	r0, [r7, #12]
 800ab3e:	60b9      	str	r1, [r7, #8]
 800ab40:	607a      	str	r2, [r7, #4]
  return (v < low) || (high < v);
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	681a      	ldr	r2, [r3, #0]
 800ab46:	68bb      	ldr	r3, [r7, #8]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	429a      	cmp	r2, r3
 800ab4c:	db05      	blt.n	800ab5a <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_+0x24>
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681a      	ldr	r2, [r3, #0]
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	429a      	cmp	r2, r3
 800ab58:	da01      	bge.n	800ab5e <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_+0x28>
 800ab5a:	2301      	movs	r3, #1
 800ab5c:	e000      	b.n	800ab60 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_+0x2a>
 800ab5e:	2300      	movs	r3, #0
}
 800ab60:	4618      	mov	r0, r3
 800ab62:	3714      	adds	r7, #20
 800ab64:	46bd      	mov	sp, r7
 800ab66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6a:	4770      	bx	lr

0800ab6c <_ZN6tflite21MicroInterpreterGraph23GetCurrentSubgraphIndexEv>:
  int GetCurrentSubgraphIndex() { return current_subgraph_index_; }
 800ab6c:	b480      	push	{r7}
 800ab6e:	b083      	sub	sp, #12
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	695b      	ldr	r3, [r3, #20]
 800ab78:	4618      	mov	r0, r3
 800ab7a:	370c      	adds	r7, #12
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab82:	4770      	bx	lr

0800ab84 <_ZN6tflite23MicroInterpreterContext16external_contextEv>:
  // Does not take ownership of the pointer and the pointer must refer to valid
  // an object that outlive this class instance.
  // This can only be called once to set one external context.
  TfLiteStatus set_external_context(void* external_context_payload) override;

  void* external_context() override { return external_context_payload_; }
 800ab84:	b480      	push	{r7}
 800ab86:	b083      	sub	sp, #12
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	699b      	ldr	r3, [r3, #24]
 800ab90:	4618      	mov	r0, r3
 800ab92:	370c      	adds	r7, #12
 800ab94:	46bd      	mov	sp, r7
 800ab96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9a:	4770      	bx	lr

0800ab9c <_ZN6tflite23MicroInterpreterContext5graphEv>:

  MicroGraph& graph() override { return graph_; }
 800ab9c:	b480      	push	{r7}
 800ab9e:	b083      	sub	sp, #12
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	689b      	ldr	r3, [r3, #8]
 800aba8:	4618      	mov	r0, r3
 800abaa:	370c      	adds	r7, #12
 800abac:	46bd      	mov	sp, r7
 800abae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb2:	4770      	bx	lr

0800abb4 <_ZN6tflite23MicroInterpreterContextdlEPv>:
  InterpreterState state_;

  ScratchBufferHandle* scratch_buffer_handles_ = nullptr;
  void* external_context_payload_ = nullptr;

  TF_LITE_REMOVE_VIRTUAL_DELETE
 800abb4:	b480      	push	{r7}
 800abb6:	b083      	sub	sp, #12
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
 800abbc:	bf00      	nop
 800abbe:	370c      	adds	r7, #12
 800abc0:	46bd      	mov	sp, r7
 800abc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc6:	4770      	bx	lr

0800abc8 <_ZN6tflite23MicroInterpreterContextC1EPNS_14MicroAllocatorEPKNS_5ModelEPNS_21MicroInterpreterGraphE>:
#include <cstdint>

#include "tensorflow/lite/kernels/internal/compatibility.h"

namespace tflite {
MicroInterpreterContext::MicroInterpreterContext(MicroAllocator* allocator,
 800abc8:	b580      	push	{r7, lr}
 800abca:	b084      	sub	sp, #16
 800abcc:	af00      	add	r7, sp, #0
 800abce:	60f8      	str	r0, [r7, #12]
 800abd0:	60b9      	str	r1, [r7, #8]
 800abd2:	607a      	str	r2, [r7, #4]
 800abd4:	603b      	str	r3, [r7, #0]
                                                 const Model* model,
                                                 MicroInterpreterGraph* graph)
    : allocator_(*allocator),
      graph_(*graph),
      model_(model),
      state_(InterpreterState::kInit) {}
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	4618      	mov	r0, r3
 800abda:	f7fc fb7f 	bl	80072dc <_ZN6tflite12MicroContextC1Ev>
 800abde:	4a0d      	ldr	r2, [pc, #52]	; (800ac14 <_ZN6tflite23MicroInterpreterContextC1EPNS_14MicroAllocatorEPKNS_5ModelEPNS_21MicroInterpreterGraphE+0x4c>)
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	601a      	str	r2, [r3, #0]
    : allocator_(*allocator),
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	68ba      	ldr	r2, [r7, #8]
 800abe8:	605a      	str	r2, [r3, #4]
      graph_(*graph),
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	683a      	ldr	r2, [r7, #0]
 800abee:	609a      	str	r2, [r3, #8]
      model_(model),
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	687a      	ldr	r2, [r7, #4]
 800abf4:	60da      	str	r2, [r3, #12]
      state_(InterpreterState::kInit) {}
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	2200      	movs	r2, #0
 800abfa:	611a      	str	r2, [r3, #16]
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	2200      	movs	r2, #0
 800ac00:	615a      	str	r2, [r3, #20]
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	2200      	movs	r2, #0
 800ac06:	619a      	str	r2, [r3, #24]
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	3710      	adds	r7, #16
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	bd80      	pop	{r7, pc}
 800ac12:	bf00      	nop
 800ac14:	08029264 	.word	0x08029264

0800ac18 <_ZN6tflite23MicroInterpreterContextD1Ev>:

MicroInterpreterContext::~MicroInterpreterContext() {}
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b082      	sub	sp, #8
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
 800ac20:	4a05      	ldr	r2, [pc, #20]	; (800ac38 <_ZN6tflite23MicroInterpreterContextD1Ev+0x20>)
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	601a      	str	r2, [r3, #0]
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	4618      	mov	r0, r3
 800ac2a:	f7fc fb67 	bl	80072fc <_ZN6tflite12MicroContextD1Ev>
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	4618      	mov	r0, r3
 800ac32:	3708      	adds	r7, #8
 800ac34:	46bd      	mov	sp, r7
 800ac36:	bd80      	pop	{r7, pc}
 800ac38:	08029264 	.word	0x08029264

0800ac3c <_ZN6tflite23MicroInterpreterContextD0Ev>:
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b082      	sub	sp, #8
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
 800ac44:	6878      	ldr	r0, [r7, #4]
 800ac46:	f7ff ffe7 	bl	800ac18 <_ZN6tflite23MicroInterpreterContextD1Ev>
 800ac4a:	6878      	ldr	r0, [r7, #4]
 800ac4c:	f7ff ffb2 	bl	800abb4 <_ZN6tflite23MicroInterpreterContextdlEPv>
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	4618      	mov	r0, r3
 800ac54:	3708      	adds	r7, #8
 800ac56:	46bd      	mov	sp, r7
 800ac58:	bd80      	pop	{r7, pc}

0800ac5a <_ZN6tflite23MicroInterpreterContext24AllocatePersistentBufferEj>:

void* MicroInterpreterContext::AllocatePersistentBuffer(size_t bytes) {
 800ac5a:	b580      	push	{r7, lr}
 800ac5c:	b082      	sub	sp, #8
 800ac5e:	af00      	add	r7, sp, #0
 800ac60:	6078      	str	r0, [r7, #4]
 800ac62:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(state_ == InterpreterState::kPrepare ||
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	691b      	ldr	r3, [r3, #16]
 800ac68:	2b01      	cmp	r3, #1
 800ac6a:	d005      	beq.n	800ac78 <_ZN6tflite23MicroInterpreterContext24AllocatePersistentBufferEj+0x1e>
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	691b      	ldr	r3, [r3, #16]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d001      	beq.n	800ac78 <_ZN6tflite23MicroInterpreterContext24AllocatePersistentBufferEj+0x1e>
 800ac74:	f014 fef4 	bl	801fa60 <abort>
                state_ == InterpreterState::kInit);
  return allocator_.AllocatePersistentBuffer(bytes);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	685a      	ldr	r2, [r3, #4]
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	685b      	ldr	r3, [r3, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	331c      	adds	r3, #28
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	6839      	ldr	r1, [r7, #0]
 800ac88:	4610      	mov	r0, r2
 800ac8a:	4798      	blx	r3
 800ac8c:	4603      	mov	r3, r0
}
 800ac8e:	4618      	mov	r0, r3
 800ac90:	3708      	adds	r7, #8
 800ac92:	46bd      	mov	sp, r7
 800ac94:	bd80      	pop	{r7, pc}

0800ac96 <_ZN6tflite23MicroInterpreterContext27RequestScratchBufferInArenaEjPi>:

TfLiteStatus MicroInterpreterContext::RequestScratchBufferInArena(
    size_t bytes, int* buffer_idx) {
 800ac96:	b590      	push	{r4, r7, lr}
 800ac98:	b085      	sub	sp, #20
 800ac9a:	af00      	add	r7, sp, #0
 800ac9c:	60f8      	str	r0, [r7, #12]
 800ac9e:	60b9      	str	r1, [r7, #8]
 800aca0:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(state_ == InterpreterState::kPrepare);
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	691b      	ldr	r3, [r3, #16]
 800aca6:	2b01      	cmp	r3, #1
 800aca8:	d001      	beq.n	800acae <_ZN6tflite23MicroInterpreterContext27RequestScratchBufferInArenaEjPi+0x18>
 800acaa:	f014 fed9 	bl	801fa60 <abort>
  return allocator_.RequestScratchBufferInArena(
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	685c      	ldr	r4, [r3, #4]
      bytes, graph_.GetCurrentSubgraphIndex(), buffer_idx);
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	689b      	ldr	r3, [r3, #8]
  return allocator_.RequestScratchBufferInArena(
 800acb6:	4618      	mov	r0, r3
 800acb8:	f7ff ff58 	bl	800ab6c <_ZN6tflite21MicroInterpreterGraph23GetCurrentSubgraphIndexEv>
 800acbc:	4602      	mov	r2, r0
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	68b9      	ldr	r1, [r7, #8]
 800acc2:	4620      	mov	r0, r4
 800acc4:	f7fe fb1c 	bl	8009300 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi>
 800acc8:	4603      	mov	r3, r0
}
 800acca:	4618      	mov	r0, r3
 800accc:	3714      	adds	r7, #20
 800acce:	46bd      	mov	sp, r7
 800acd0:	bd90      	pop	{r4, r7, pc}

0800acd2 <_ZN6tflite23MicroInterpreterContext16GetScratchBufferEi>:

void* MicroInterpreterContext::GetScratchBuffer(int buffer_idx) {
 800acd2:	b580      	push	{r7, lr}
 800acd4:	b084      	sub	sp, #16
 800acd6:	af00      	add	r7, sp, #0
 800acd8:	6078      	str	r0, [r7, #4]
 800acda:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(state_ == InterpreterState::kInvoke);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	691b      	ldr	r3, [r3, #16]
 800ace0:	2b03      	cmp	r3, #3
 800ace2:	d001      	beq.n	800ace8 <_ZN6tflite23MicroInterpreterContext16GetScratchBufferEi+0x16>
 800ace4:	f014 febc 	bl	801fa60 <abort>
  ScratchBufferHandle* handle = scratch_buffer_handles_ + buffer_idx;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	695a      	ldr	r2, [r3, #20]
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	009b      	lsls	r3, r3, #2
 800acf0:	4413      	add	r3, r2
 800acf2:	60fb      	str	r3, [r7, #12]
  return handle->data;
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	681b      	ldr	r3, [r3, #0]
}
 800acf8:	4618      	mov	r0, r3
 800acfa:	3710      	adds	r7, #16
 800acfc:	46bd      	mov	sp, r7
 800acfe:	bd80      	pop	{r7, pc}

0800ad00 <_ZN6tflite23MicroInterpreterContext24AllocateTempTfLiteTensorEi>:

TfLiteTensor* MicroInterpreterContext::AllocateTempTfLiteTensor(
    int tensor_idx) {
 800ad00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad04:	b084      	sub	sp, #16
 800ad06:	af02      	add	r7, sp, #8
 800ad08:	6078      	str	r0, [r7, #4]
 800ad0a:	6039      	str	r1, [r7, #0]
  return allocator_.AllocateTempTfLiteTensor(model_, graph_.GetAllocations(),
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	685d      	ldr	r5, [r3, #4]
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	685b      	ldr	r3, [r3, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	3304      	adds	r3, #4
 800ad18:	681c      	ldr	r4, [r3, #0]
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	68de      	ldr	r6, [r3, #12]
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	689b      	ldr	r3, [r3, #8]
 800ad22:	4618      	mov	r0, r3
 800ad24:	f7ff fa74 	bl	800a210 <_ZN6tflite21MicroInterpreterGraph14GetAllocationsEv>
 800ad28:	4680      	mov	r8, r0
                                             tensor_idx,
                                             graph_.GetCurrentSubgraphIndex());
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	689b      	ldr	r3, [r3, #8]
  return allocator_.AllocateTempTfLiteTensor(model_, graph_.GetAllocations(),
 800ad2e:	4618      	mov	r0, r3
 800ad30:	f7ff ff1c 	bl	800ab6c <_ZN6tflite21MicroInterpreterGraph23GetCurrentSubgraphIndexEv>
 800ad34:	4603      	mov	r3, r0
 800ad36:	9300      	str	r3, [sp, #0]
 800ad38:	683b      	ldr	r3, [r7, #0]
 800ad3a:	4642      	mov	r2, r8
 800ad3c:	4631      	mov	r1, r6
 800ad3e:	4628      	mov	r0, r5
 800ad40:	47a0      	blx	r4
 800ad42:	4603      	mov	r3, r0
}
 800ad44:	4618      	mov	r0, r3
 800ad46:	3708      	adds	r7, #8
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ad4e <_ZN6tflite23MicroInterpreterContext26DeallocateTempTfLiteTensorEP12TfLiteTensor>:

void MicroInterpreterContext::DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
 800ad4e:	b580      	push	{r7, lr}
 800ad50:	b082      	sub	sp, #8
 800ad52:	af00      	add	r7, sp, #0
 800ad54:	6078      	str	r0, [r7, #4]
 800ad56:	6039      	str	r1, [r7, #0]
  return allocator_.DeallocateTempTfLiteTensor(tensor);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	685a      	ldr	r2, [r3, #4]
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	685b      	ldr	r3, [r3, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	3308      	adds	r3, #8
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	6839      	ldr	r1, [r7, #0]
 800ad68:	4610      	mov	r0, r2
 800ad6a:	4798      	blx	r3
 800ad6c:	bf00      	nop
}
 800ad6e:	3708      	adds	r7, #8
 800ad70:	46bd      	mov	sp, r7
 800ad72:	bd80      	pop	{r7, pc}

0800ad74 <_ZN6tflite23MicroInterpreterContext18AllocateTempBufferEjj>:

uint8_t* MicroInterpreterContext::AllocateTempBuffer(size_t size,
                                                     size_t alignment) {
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b084      	sub	sp, #16
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	60f8      	str	r0, [r7, #12]
 800ad7c:	60b9      	str	r1, [r7, #8]
 800ad7e:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(state_ == InterpreterState::kPrepare);
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	691b      	ldr	r3, [r3, #16]
 800ad84:	2b01      	cmp	r3, #1
 800ad86:	d001      	beq.n	800ad8c <_ZN6tflite23MicroInterpreterContext18AllocateTempBufferEjj+0x18>
 800ad88:	f014 fe6a 	bl	801fa60 <abort>
  return allocator_.AllocateTempBuffer(size, alignment);
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	6858      	ldr	r0, [r3, #4]
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	685b      	ldr	r3, [r3, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	330c      	adds	r3, #12
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	687a      	ldr	r2, [r7, #4]
 800ad9c:	68b9      	ldr	r1, [r7, #8]
 800ad9e:	4798      	blx	r3
 800ada0:	4603      	mov	r3, r0
}
 800ada2:	4618      	mov	r0, r3
 800ada4:	3710      	adds	r7, #16
 800ada6:	46bd      	mov	sp, r7
 800ada8:	bd80      	pop	{r7, pc}

0800adaa <_ZN6tflite23MicroInterpreterContext20DeallocateTempBufferEPh>:

void MicroInterpreterContext::DeallocateTempBuffer(uint8_t* buffer) {
 800adaa:	b580      	push	{r7, lr}
 800adac:	b082      	sub	sp, #8
 800adae:	af00      	add	r7, sp, #0
 800adb0:	6078      	str	r0, [r7, #4]
 800adb2:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(state_ == InterpreterState::kPrepare);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	691b      	ldr	r3, [r3, #16]
 800adb8:	2b01      	cmp	r3, #1
 800adba:	d001      	beq.n	800adc0 <_ZN6tflite23MicroInterpreterContext20DeallocateTempBufferEPh+0x16>
 800adbc:	f014 fe50 	bl	801fa60 <abort>
  allocator_.DeallocateTempBuffer(buffer);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	685a      	ldr	r2, [r3, #4]
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	685b      	ldr	r3, [r3, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	3310      	adds	r3, #16
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	6839      	ldr	r1, [r7, #0]
 800add0:	4610      	mov	r0, r2
 800add2:	4798      	blx	r3
}
 800add4:	bf00      	nop
 800add6:	3708      	adds	r7, #8
 800add8:	46bd      	mov	sp, r7
 800adda:	bd80      	pop	{r7, pc}

0800addc <_ZN6tflite23MicroInterpreterContext13GetEvalTensorEi>:

TfLiteEvalTensor* MicroInterpreterContext::GetEvalTensor(int tensor_idx) {
 800addc:	b590      	push	{r4, r7, lr}
 800adde:	b083      	sub	sp, #12
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
 800ade4:	6039      	str	r1, [r7, #0]
  return &graph_.GetAllocations()[graph_.GetCurrentSubgraphIndex()]
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	689b      	ldr	r3, [r3, #8]
 800adea:	4618      	mov	r0, r3
 800adec:	f7ff fa10 	bl	800a210 <_ZN6tflite21MicroInterpreterGraph14GetAllocationsEv>
 800adf0:	4604      	mov	r4, r0
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	689b      	ldr	r3, [r3, #8]
 800adf6:	4618      	mov	r0, r3
 800adf8:	f7ff feb8 	bl	800ab6c <_ZN6tflite21MicroInterpreterGraph23GetCurrentSubgraphIndexEv>
 800adfc:	4603      	mov	r3, r0
 800adfe:	00db      	lsls	r3, r3, #3
 800ae00:	4423      	add	r3, r4
              .tensors[tensor_idx];
 800ae02:	6859      	ldr	r1, [r3, #4]
 800ae04:	683a      	ldr	r2, [r7, #0]
 800ae06:	4613      	mov	r3, r2
 800ae08:	005b      	lsls	r3, r3, #1
 800ae0a:	4413      	add	r3, r2
 800ae0c:	009b      	lsls	r3, r3, #2
 800ae0e:	440b      	add	r3, r1
}
 800ae10:	4618      	mov	r0, r3
 800ae12:	370c      	adds	r7, #12
 800ae14:	46bd      	mov	sp, r7
 800ae16:	bd90      	pop	{r4, r7, pc}

0800ae18 <_ZN6tflite23MicroInterpreterContext23SetScratchBufferHandlesEPNS_19ScratchBufferHandleE>:

void MicroInterpreterContext::SetScratchBufferHandles(
    ScratchBufferHandle* scratch_buffer_handles) {
 800ae18:	b480      	push	{r7}
 800ae1a:	b083      	sub	sp, #12
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
 800ae20:	6039      	str	r1, [r7, #0]
  scratch_buffer_handles_ = scratch_buffer_handles;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	683a      	ldr	r2, [r7, #0]
 800ae26:	615a      	str	r2, [r3, #20]
}
 800ae28:	bf00      	nop
 800ae2a:	370c      	adds	r7, #12
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae32:	4770      	bx	lr

0800ae34 <_ZN6tflite23MicroInterpreterContext20set_external_contextEPv>:

TfLiteStatus MicroInterpreterContext::set_external_context(
    void* external_context_payload) {
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b082      	sub	sp, #8
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
 800ae3c:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(state_ == InterpreterState::kPrepare ||
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	691b      	ldr	r3, [r3, #16]
 800ae42:	2b01      	cmp	r3, #1
 800ae44:	d005      	beq.n	800ae52 <_ZN6tflite23MicroInterpreterContext20set_external_contextEPv+0x1e>
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	691b      	ldr	r3, [r3, #16]
 800ae4a:	2b03      	cmp	r3, #3
 800ae4c:	d001      	beq.n	800ae52 <_ZN6tflite23MicroInterpreterContext20set_external_contextEPv+0x1e>
 800ae4e:	f014 fe07 	bl	801fa60 <abort>
                state_ == InterpreterState::kInvoke);
  if (external_context_payload == nullptr ||
 800ae52:	683b      	ldr	r3, [r7, #0]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d003      	beq.n	800ae60 <_ZN6tflite23MicroInterpreterContext20set_external_contextEPv+0x2c>
      external_context_payload_ != nullptr) {
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	699b      	ldr	r3, [r3, #24]
  if (external_context_payload == nullptr ||
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d008      	beq.n	800ae72 <_ZN6tflite23MicroInterpreterContext20set_external_contextEPv+0x3e>
    MicroPrintf(
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	699b      	ldr	r3, [r3, #24]
 800ae64:	461a      	mov	r2, r3
 800ae66:	6839      	ldr	r1, [r7, #0]
 800ae68:	4806      	ldr	r0, [pc, #24]	; (800ae84 <_ZN6tflite23MicroInterpreterContext20set_external_contextEPv+0x50>)
 800ae6a:	f000 fcd1 	bl	800b810 <_Z11MicroPrintfPKcz>
        "Attempting to set external context to %x but it was %x already",
        external_context_payload, external_context_payload_);
    return kTfLiteError;
 800ae6e:	2301      	movs	r3, #1
 800ae70:	e003      	b.n	800ae7a <_ZN6tflite23MicroInterpreterContext20set_external_contextEPv+0x46>
  }

  external_context_payload_ = external_context_payload;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	683a      	ldr	r2, [r7, #0]
 800ae76:	619a      	str	r2, [r3, #24]
  return kTfLiteOk;
 800ae78:	2300      	movs	r3, #0
}
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	3708      	adds	r7, #8
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	bd80      	pop	{r7, pc}
 800ae82:	bf00      	nop
 800ae84:	08024244 	.word	0x08024244

0800ae88 <_ZN6tflite23MicroInterpreterContext19SetInterpreterStateENS0_16InterpreterStateE>:

void MicroInterpreterContext::SetInterpreterState(InterpreterState state) {
 800ae88:	b480      	push	{r7}
 800ae8a:	b083      	sub	sp, #12
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
 800ae90:	6039      	str	r1, [r7, #0]
  state_ = state;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	683a      	ldr	r2, [r7, #0]
 800ae96:	611a      	str	r2, [r3, #16]
}
 800ae98:	bf00      	nop
 800ae9a:	370c      	adds	r7, #12
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea2:	4770      	bx	lr

0800aea4 <_ZN6tflite10MicroGraphdlEPv>:

  // Get the resource variables for this TFLM graph.
  virtual MicroResourceVariables* GetResourceVariables() = 0;

 private:
  TF_LITE_REMOVE_VIRTUAL_DELETE
 800aea4:	b480      	push	{r7}
 800aea6:	b083      	sub	sp, #12
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
 800aeac:	bf00      	nop
 800aeae:	370c      	adds	r7, #12
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb6:	4770      	bx	lr

0800aeb8 <_ZN6tflite21MicroInterpreterGraph20GetResourceVariablesEv>:

  // Get the resource variables for this TFLM graph.
  MicroResourceVariables* GetResourceVariables() { return resource_variables_; }
 800aeb8:	b480      	push	{r7}
 800aeba:	b083      	sub	sp, #12
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	699b      	ldr	r3, [r3, #24]
 800aec4:	4618      	mov	r0, r3
 800aec6:	370c      	adds	r7, #12
 800aec8:	46bd      	mov	sp, r7
 800aeca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aece:	4770      	bx	lr

0800aed0 <_ZN6tflite21MicroInterpreterGraphdlEPv>:
  SubgraphAllocations* subgraph_allocations_ = nullptr;
  int current_subgraph_index_;
  MicroResourceVariables* resource_variables_;
  const flatbuffers::Vector<flatbuffers::Offset<SubGraph>>* subgraphs_;

  TF_LITE_REMOVE_VIRTUAL_DELETE
 800aed0:	b480      	push	{r7}
 800aed2:	b083      	sub	sp, #12
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
 800aed8:	bf00      	nop
 800aeda:	370c      	adds	r7, #12
 800aedc:	46bd      	mov	sp, r7
 800aede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee2:	4770      	bx	lr

0800aee4 <_ZN6tflite19ScopedMicroProfilerC1EPKcPNS_22MicroProfilerInterfaceE>:
//   ScopedMicroProfiler scoped_profiler("custom_tag", profiler);
//   work_to_profile();
// }
class ScopedMicroProfiler {
 public:
  explicit ScopedMicroProfiler(const char* tag,
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b084      	sub	sp, #16
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	60f8      	str	r0, [r7, #12]
 800aeec:	60b9      	str	r1, [r7, #8]
 800aeee:	607a      	str	r2, [r7, #4]
                               MicroProfilerInterface* profiler)
      : profiler_(profiler) {
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	2200      	movs	r2, #0
 800aef4:	601a      	str	r2, [r3, #0]
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	687a      	ldr	r2, [r7, #4]
 800aefa:	605a      	str	r2, [r3, #4]
    if (profiler_ != nullptr) {
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	685b      	ldr	r3, [r3, #4]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d00c      	beq.n	800af1e <_ZN6tflite19ScopedMicroProfilerC1EPKcPNS_22MicroProfilerInterfaceE+0x3a>
      event_handle_ = profiler_->BeginEvent(tag);
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	685a      	ldr	r2, [r3, #4]
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	685b      	ldr	r3, [r3, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	3308      	adds	r3, #8
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	68b9      	ldr	r1, [r7, #8]
 800af14:	4610      	mov	r0, r2
 800af16:	4798      	blx	r3
 800af18:	4602      	mov	r2, r0
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	601a      	str	r2, [r3, #0]
    }
  }
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	4618      	mov	r0, r3
 800af22:	3710      	adds	r7, #16
 800af24:	46bd      	mov	sp, r7
 800af26:	bd80      	pop	{r7, pc}

0800af28 <_ZN6tflite19ScopedMicroProfilerD1Ev>:

  ~ScopedMicroProfiler() {
 800af28:	b580      	push	{r7, lr}
 800af2a:	b082      	sub	sp, #8
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
    if (profiler_ != nullptr) {
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	685b      	ldr	r3, [r3, #4]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d00a      	beq.n	800af4e <_ZN6tflite19ScopedMicroProfilerD1Ev+0x26>
      profiler_->EndEvent(event_handle_);
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	6858      	ldr	r0, [r3, #4]
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	685b      	ldr	r3, [r3, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	330c      	adds	r3, #12
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	687a      	ldr	r2, [r7, #4]
 800af48:	6812      	ldr	r2, [r2, #0]
 800af4a:	4611      	mov	r1, r2
 800af4c:	4798      	blx	r3
    }
  }
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	4618      	mov	r0, r3
 800af52:	3708      	adds	r7, #8
 800af54:	46bd      	mov	sp, r7
 800af56:	bd80      	pop	{r7, pc}

0800af58 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK16TFLMRegistration>:
#include "tensorflow/lite/schema/schema_generated.h"

namespace tflite {
namespace {

const char* OpNameFromRegistration(const TFLMRegistration* registration) {
 800af58:	b580      	push	{r7, lr}
 800af5a:	b082      	sub	sp, #8
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
  if (registration->builtin_code == BuiltinOperator_CUSTOM) {
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	695b      	ldr	r3, [r3, #20]
 800af64:	2b20      	cmp	r3, #32
 800af66:	d102      	bne.n	800af6e <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK16TFLMRegistration+0x16>
    return registration->custom_name;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	699b      	ldr	r3, [r3, #24]
 800af6c:	e006      	b.n	800af7c <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK16TFLMRegistration+0x24>
  } else {
    return EnumNameBuiltinOperator(BuiltinOperator(registration->builtin_code));
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	695b      	ldr	r3, [r3, #20]
 800af72:	4618      	mov	r0, r3
 800af74:	f7ff f8a0 	bl	800a0b8 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 800af78:	4603      	mov	r3, r0
 800af7a:	bf00      	nop
  }
}
 800af7c:	4618      	mov	r0, r3
 800af7e:	3708      	adds	r7, #8
 800af80:	46bd      	mov	sp, r7
 800af82:	bd80      	pop	{r7, pc}

0800af84 <_ZN6tflite10MicroGraphC1Ev>:
class MicroGraph {
 800af84:	b480      	push	{r7}
 800af86:	b083      	sub	sp, #12
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
 800af8c:	4a04      	ldr	r2, [pc, #16]	; (800afa0 <_ZN6tflite10MicroGraphC1Ev+0x1c>)
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	601a      	str	r2, [r3, #0]
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	4618      	mov	r0, r3
 800af96:	370c      	adds	r7, #12
 800af98:	46bd      	mov	sp, r7
 800af9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9e:	4770      	bx	lr
 800afa0:	080292e0 	.word	0x080292e0

0800afa4 <_ZN6tflite10MicroGraphD1Ev>:
  virtual ~MicroGraph() = default;
 800afa4:	b480      	push	{r7}
 800afa6:	b083      	sub	sp, #12
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
 800afac:	4a04      	ldr	r2, [pc, #16]	; (800afc0 <_ZN6tflite10MicroGraphD1Ev+0x1c>)
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	601a      	str	r2, [r3, #0]
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	4618      	mov	r0, r3
 800afb6:	370c      	adds	r7, #12
 800afb8:	46bd      	mov	sp, r7
 800afba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afbe:	4770      	bx	lr
 800afc0:	080292e0 	.word	0x080292e0

0800afc4 <_ZN6tflite10MicroGraphD0Ev>:
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b082      	sub	sp, #8
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
 800afcc:	6878      	ldr	r0, [r7, #4]
 800afce:	f7ff ffe9 	bl	800afa4 <_ZN6tflite10MicroGraphD1Ev>
 800afd2:	6878      	ldr	r0, [r7, #4]
 800afd4:	f7ff ff66 	bl	800aea4 <_ZN6tflite10MicroGraphdlEPv>
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	4618      	mov	r0, r3
 800afdc:	3708      	adds	r7, #8
 800afde:	46bd      	mov	sp, r7
 800afe0:	bd80      	pop	{r7, pc}
	...

0800afe4 <_ZN6tflite21MicroInterpreterGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorEPNS_22MicroResourceVariablesE>:

}  // namespace

MicroInterpreterGraph::MicroInterpreterGraph(
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b084      	sub	sp, #16
 800afe8:	af00      	add	r7, sp, #0
 800afea:	60f8      	str	r0, [r7, #12]
 800afec:	60b9      	str	r1, [r7, #8]
 800afee:	607a      	str	r2, [r7, #4]
 800aff0:	603b      	str	r3, [r7, #0]
    MicroResourceVariables* resource_variables)
    : context_(context),
      model_(model),
      allocator_(allocator),
      current_subgraph_index_(0),
      resource_variables_(resource_variables) {
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	4618      	mov	r0, r3
 800aff6:	f7ff ffc5 	bl	800af84 <_ZN6tflite10MicroGraphC1Ev>
 800affa:	4a11      	ldr	r2, [pc, #68]	; (800b040 <_ZN6tflite21MicroInterpreterGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorEPNS_22MicroResourceVariablesE+0x5c>)
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	601a      	str	r2, [r3, #0]
    : context_(context),
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	68ba      	ldr	r2, [r7, #8]
 800b004:	605a      	str	r2, [r3, #4]
      model_(model),
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	687a      	ldr	r2, [r7, #4]
 800b00a:	609a      	str	r2, [r3, #8]
      allocator_(allocator),
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	683a      	ldr	r2, [r7, #0]
 800b010:	60da      	str	r2, [r3, #12]
      resource_variables_(resource_variables) {
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	2200      	movs	r2, #0
 800b016:	611a      	str	r2, [r3, #16]
      current_subgraph_index_(0),
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	2200      	movs	r2, #0
 800b01c:	615a      	str	r2, [r3, #20]
      resource_variables_(resource_variables) {
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	69ba      	ldr	r2, [r7, #24]
 800b022:	619a      	str	r2, [r3, #24]
  if (model != nullptr) {
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d005      	beq.n	800b036 <_ZN6tflite21MicroInterpreterGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorEPNS_22MicroResourceVariablesE+0x52>
    subgraphs_ = model->subgraphs();
 800b02a:	6878      	ldr	r0, [r7, #4]
 800b02c:	f7f6 fcb5 	bl	800199a <_ZNK6tflite5Model9subgraphsEv>
 800b030:	4602      	mov	r2, r0
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	61da      	str	r2, [r3, #28]
  }
}
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	4618      	mov	r0, r3
 800b03a:	3710      	adds	r7, #16
 800b03c:	46bd      	mov	sp, r7
 800b03e:	bd80      	pop	{r7, pc}
 800b040:	080292a0 	.word	0x080292a0

0800b044 <_ZN6tflite21MicroInterpreterGraphD1Ev>:

MicroInterpreterGraph::~MicroInterpreterGraph() {}
 800b044:	b580      	push	{r7, lr}
 800b046:	b082      	sub	sp, #8
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
 800b04c:	4a05      	ldr	r2, [pc, #20]	; (800b064 <_ZN6tflite21MicroInterpreterGraphD1Ev+0x20>)
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	601a      	str	r2, [r3, #0]
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	4618      	mov	r0, r3
 800b056:	f7ff ffa5 	bl	800afa4 <_ZN6tflite10MicroGraphD1Ev>
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	4618      	mov	r0, r3
 800b05e:	3708      	adds	r7, #8
 800b060:	46bd      	mov	sp, r7
 800b062:	bd80      	pop	{r7, pc}
 800b064:	080292a0 	.word	0x080292a0

0800b068 <_ZN6tflite21MicroInterpreterGraphD0Ev>:
 800b068:	b580      	push	{r7, lr}
 800b06a:	b082      	sub	sp, #8
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
 800b070:	6878      	ldr	r0, [r7, #4]
 800b072:	f7ff ffe7 	bl	800b044 <_ZN6tflite21MicroInterpreterGraphD1Ev>
 800b076:	6878      	ldr	r0, [r7, #4]
 800b078:	f7ff ff2a 	bl	800aed0 <_ZN6tflite21MicroInterpreterGraphdlEPv>
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	4618      	mov	r0, r3
 800b080:	3708      	adds	r7, #8
 800b082:	46bd      	mov	sp, r7
 800b084:	bd80      	pop	{r7, pc}

0800b086 <_ZN6tflite21MicroInterpreterGraph13InitSubgraphsEv>:

TfLiteStatus MicroInterpreterGraph::InitSubgraphs() {
 800b086:	b580      	push	{r7, lr}
 800b088:	b08a      	sub	sp, #40	; 0x28
 800b08a:	af00      	add	r7, sp, #0
 800b08c:	6078      	str	r0, [r7, #4]
  int previous_subgraph_idx = current_subgraph_index_;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	695b      	ldr	r3, [r3, #20]
 800b092:	617b      	str	r3, [r7, #20]

  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 800b094:	2300      	movs	r3, #0
 800b096:	627b      	str	r3, [r7, #36]	; 0x24
 800b098:	e04a      	b.n	800b130 <_ZN6tflite21MicroInterpreterGraph13InitSubgraphsEv+0xaa>
       subgraph_idx++) {
    current_subgraph_index_ = subgraph_idx;
 800b09a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	615a      	str	r2, [r3, #20]
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	689b      	ldr	r3, [r3, #8]
 800b0a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0a6:	4611      	mov	r1, r2
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	f7fc f971 	bl	8007390 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
 800b0ae:	6138      	str	r0, [r7, #16]
    for (size_t i = 0; i < operators_size; ++i) {
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	623b      	str	r3, [r7, #32]
 800b0b4:	e035      	b.n	800b122 <_ZN6tflite21MicroInterpreterGraph13InitSubgraphsEv+0x9c>
      TfLiteNode* node =
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	691a      	ldr	r2, [r3, #16]
 800b0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0bc:	00db      	lsls	r3, r3, #3
 800b0be:	4413      	add	r3, r2
 800b0c0:	681a      	ldr	r2, [r3, #0]
 800b0c2:	6a3b      	ldr	r3, [r7, #32]
 800b0c4:	015b      	lsls	r3, r3, #5
 800b0c6:	4413      	add	r3, r2
      TfLiteNode* node =
 800b0c8:	60fb      	str	r3, [r7, #12]
      const TFLMRegistration* registration = subgraph_allocations_[subgraph_idx]
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	691a      	ldr	r2, [r3, #16]
 800b0ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0d0:	00db      	lsls	r3, r3, #3
 800b0d2:	4413      	add	r3, r2
                                                 .node_and_registrations[i]
 800b0d4:	681a      	ldr	r2, [r3, #0]
 800b0d6:	6a3b      	ldr	r3, [r7, #32]
 800b0d8:	015b      	lsls	r3, r3, #5
 800b0da:	4413      	add	r3, r2
      const TFLMRegistration* registration = subgraph_allocations_[subgraph_idx]
 800b0dc:	69db      	ldr	r3, [r3, #28]
 800b0de:	60bb      	str	r3, [r7, #8]
                                                 .registration;
      size_t init_data_size;
      const char* init_data;
      if (registration->builtin_code == BuiltinOperator_CUSTOM) {
 800b0e0:	68bb      	ldr	r3, [r7, #8]
 800b0e2:	695b      	ldr	r3, [r3, #20]
 800b0e4:	2b20      	cmp	r3, #32
 800b0e6:	d106      	bne.n	800b0f6 <_ZN6tflite21MicroInterpreterGraph13InitSubgraphsEv+0x70>
        init_data = reinterpret_cast<const char*>(node->custom_initial_data);
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	695b      	ldr	r3, [r3, #20]
 800b0ec:	61bb      	str	r3, [r7, #24]
        init_data_size = node->custom_initial_data_size;
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	699b      	ldr	r3, [r3, #24]
 800b0f2:	61fb      	str	r3, [r7, #28]
 800b0f4:	e004      	b.n	800b100 <_ZN6tflite21MicroInterpreterGraph13InitSubgraphsEv+0x7a>
      } else {
        init_data = reinterpret_cast<const char*>(node->builtin_data);
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	691b      	ldr	r3, [r3, #16]
 800b0fa:	61bb      	str	r3, [r7, #24]
        init_data_size = 0;
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	61fb      	str	r3, [r7, #28]
      }
      if (registration->init) {
 800b100:	68bb      	ldr	r3, [r7, #8]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d009      	beq.n	800b11c <_ZN6tflite21MicroInterpreterGraph13InitSubgraphsEv+0x96>
        node->user_data =
            registration->init(context_, init_data, init_data_size);
 800b108:	68bb      	ldr	r3, [r7, #8]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	687a      	ldr	r2, [r7, #4]
 800b10e:	6850      	ldr	r0, [r2, #4]
 800b110:	69fa      	ldr	r2, [r7, #28]
 800b112:	69b9      	ldr	r1, [r7, #24]
 800b114:	4798      	blx	r3
 800b116:	4602      	mov	r2, r0
        node->user_data =
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	60da      	str	r2, [r3, #12]
    for (size_t i = 0; i < operators_size; ++i) {
 800b11c:	6a3b      	ldr	r3, [r7, #32]
 800b11e:	3301      	adds	r3, #1
 800b120:	623b      	str	r3, [r7, #32]
 800b122:	6a3a      	ldr	r2, [r7, #32]
 800b124:	693b      	ldr	r3, [r7, #16]
 800b126:	429a      	cmp	r2, r3
 800b128:	d3c5      	bcc.n	800b0b6 <_ZN6tflite21MicroInterpreterGraph13InitSubgraphsEv+0x30>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 800b12a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b12c:	3301      	adds	r3, #1
 800b12e:	627b      	str	r3, [r7, #36]	; 0x24
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	69db      	ldr	r3, [r3, #28]
 800b134:	4618      	mov	r0, r3
 800b136:	f7f6 fe08 	bl	8001d4a <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmE4sizeEv>
 800b13a:	4602      	mov	r2, r0
 800b13c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b13e:	4293      	cmp	r3, r2
 800b140:	bf34      	ite	cc
 800b142:	2301      	movcc	r3, #1
 800b144:	2300      	movcs	r3, #0
 800b146:	b2db      	uxtb	r3, r3
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d1a6      	bne.n	800b09a <_ZN6tflite21MicroInterpreterGraph13InitSubgraphsEv+0x14>
      }
    }
  }
  current_subgraph_index_ = previous_subgraph_idx;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	697a      	ldr	r2, [r7, #20]
 800b150:	615a      	str	r2, [r3, #20]

  return kTfLiteOk;
 800b152:	2300      	movs	r3, #0
}
 800b154:	4618      	mov	r0, r3
 800b156:	3728      	adds	r7, #40	; 0x28
 800b158:	46bd      	mov	sp, r7
 800b15a:	bd80      	pop	{r7, pc}

0800b15c <_ZN6tflite21MicroInterpreterGraph16PrepareSubgraphsEv>:

TfLiteStatus MicroInterpreterGraph::PrepareSubgraphs() {
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b08a      	sub	sp, #40	; 0x28
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
  int previous_subgraph_idx = current_subgraph_index_;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	695b      	ldr	r3, [r3, #20]
 800b168:	61fb      	str	r3, [r7, #28]

  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 800b16a:	2300      	movs	r3, #0
 800b16c:	627b      	str	r3, [r7, #36]	; 0x24
 800b16e:	e04e      	b.n	800b20e <_ZN6tflite21MicroInterpreterGraph16PrepareSubgraphsEv+0xb2>
       subgraph_idx++) {
    current_subgraph_index_ = subgraph_idx;
 800b170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	615a      	str	r2, [r3, #20]
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	689b      	ldr	r3, [r3, #8]
 800b17a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b17c:	4611      	mov	r1, r2
 800b17e:	4618      	mov	r0, r3
 800b180:	f7fc f906 	bl	8007390 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
 800b184:	61b8      	str	r0, [r7, #24]
    for (size_t i = 0; i < operators_size; ++i) {
 800b186:	2300      	movs	r3, #0
 800b188:	623b      	str	r3, [r7, #32]
 800b18a:	e039      	b.n	800b200 <_ZN6tflite21MicroInterpreterGraph16PrepareSubgraphsEv+0xa4>
      TfLiteNode* node =
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	691a      	ldr	r2, [r3, #16]
 800b190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b192:	00db      	lsls	r3, r3, #3
 800b194:	4413      	add	r3, r2
 800b196:	681a      	ldr	r2, [r3, #0]
 800b198:	6a3b      	ldr	r3, [r7, #32]
 800b19a:	015b      	lsls	r3, r3, #5
 800b19c:	4413      	add	r3, r2
      TfLiteNode* node =
 800b19e:	617b      	str	r3, [r7, #20]
      const TFLMRegistration* registration = subgraph_allocations_[subgraph_idx]
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	691a      	ldr	r2, [r3, #16]
 800b1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1a6:	00db      	lsls	r3, r3, #3
 800b1a8:	4413      	add	r3, r2
                                                 .node_and_registrations[i]
 800b1aa:	681a      	ldr	r2, [r3, #0]
 800b1ac:	6a3b      	ldr	r3, [r7, #32]
 800b1ae:	015b      	lsls	r3, r3, #5
 800b1b0:	4413      	add	r3, r2
      const TFLMRegistration* registration = subgraph_allocations_[subgraph_idx]
 800b1b2:	69db      	ldr	r3, [r3, #28]
 800b1b4:	613b      	str	r3, [r7, #16]
                                                 .registration;
      if (registration->prepare != nullptr) {
 800b1b6:	693b      	ldr	r3, [r7, #16]
 800b1b8:	689b      	ldr	r3, [r3, #8]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d016      	beq.n	800b1ec <_ZN6tflite21MicroInterpreterGraph16PrepareSubgraphsEv+0x90>
        TfLiteStatus prepare_status = registration->prepare(context_, node);
 800b1be:	693b      	ldr	r3, [r7, #16]
 800b1c0:	689b      	ldr	r3, [r3, #8]
 800b1c2:	687a      	ldr	r2, [r7, #4]
 800b1c4:	6852      	ldr	r2, [r2, #4]
 800b1c6:	6979      	ldr	r1, [r7, #20]
 800b1c8:	4610      	mov	r0, r2
 800b1ca:	4798      	blx	r3
 800b1cc:	4603      	mov	r3, r0
 800b1ce:	73fb      	strb	r3, [r7, #15]
        if (prepare_status != kTfLiteOk) {
 800b1d0:	7bfb      	ldrb	r3, [r7, #15]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d00a      	beq.n	800b1ec <_ZN6tflite21MicroInterpreterGraph16PrepareSubgraphsEv+0x90>
          MicroPrintf("Node %s (number %df) failed to prepare with status %d",
 800b1d6:	6938      	ldr	r0, [r7, #16]
 800b1d8:	f7ff febe 	bl	800af58 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK16TFLMRegistration>
 800b1dc:	4601      	mov	r1, r0
 800b1de:	7bfb      	ldrb	r3, [r7, #15]
 800b1e0:	6a3a      	ldr	r2, [r7, #32]
 800b1e2:	4816      	ldr	r0, [pc, #88]	; (800b23c <_ZN6tflite21MicroInterpreterGraph16PrepareSubgraphsEv+0xe0>)
 800b1e4:	f000 fb14 	bl	800b810 <_Z11MicroPrintfPKcz>
                      OpNameFromRegistration(registration), i, prepare_status);
          return kTfLiteError;
 800b1e8:	2301      	movs	r3, #1
 800b1ea:	e022      	b.n	800b232 <_ZN6tflite21MicroInterpreterGraph16PrepareSubgraphsEv+0xd6>
        }
      }
      allocator_->FinishPrepareNodeAllocations(/*node_id=*/i);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	68db      	ldr	r3, [r3, #12]
 800b1f0:	6a3a      	ldr	r2, [r7, #32]
 800b1f2:	4611      	mov	r1, r2
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	f7fe f8df 	bl	80093b8 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi>
    for (size_t i = 0; i < operators_size; ++i) {
 800b1fa:	6a3b      	ldr	r3, [r7, #32]
 800b1fc:	3301      	adds	r3, #1
 800b1fe:	623b      	str	r3, [r7, #32]
 800b200:	6a3a      	ldr	r2, [r7, #32]
 800b202:	69bb      	ldr	r3, [r7, #24]
 800b204:	429a      	cmp	r2, r3
 800b206:	d3c1      	bcc.n	800b18c <_ZN6tflite21MicroInterpreterGraph16PrepareSubgraphsEv+0x30>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 800b208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b20a:	3301      	adds	r3, #1
 800b20c:	627b      	str	r3, [r7, #36]	; 0x24
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	69db      	ldr	r3, [r3, #28]
 800b212:	4618      	mov	r0, r3
 800b214:	f7f6 fd99 	bl	8001d4a <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmE4sizeEv>
 800b218:	4602      	mov	r2, r0
 800b21a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b21c:	4293      	cmp	r3, r2
 800b21e:	bf34      	ite	cc
 800b220:	2301      	movcc	r3, #1
 800b222:	2300      	movcs	r3, #0
 800b224:	b2db      	uxtb	r3, r3
 800b226:	2b00      	cmp	r3, #0
 800b228:	d1a2      	bne.n	800b170 <_ZN6tflite21MicroInterpreterGraph16PrepareSubgraphsEv+0x14>
    }
  }
  current_subgraph_index_ = previous_subgraph_idx;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	69fa      	ldr	r2, [r7, #28]
 800b22e:	615a      	str	r2, [r3, #20]

  return kTfLiteOk;
 800b230:	2300      	movs	r3, #0
}
 800b232:	4618      	mov	r0, r3
 800b234:	3728      	adds	r7, #40	; 0x28
 800b236:	46bd      	mov	sp, r7
 800b238:	bd80      	pop	{r7, pc}
 800b23a:	bf00      	nop
 800b23c:	08024dc4 	.word	0x08024dc4

0800b240 <_ZN6tflite21MicroInterpreterGraph14ResetSubgraphsEv>:

TfLiteStatus MicroInterpreterGraph::ResetSubgraphs() {
 800b240:	b580      	push	{r7, lr}
 800b242:	b088      	sub	sp, #32
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
  int previous_subgraph_idx = current_subgraph_index_;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	695b      	ldr	r3, [r3, #20]
 800b24c:	617b      	str	r3, [r7, #20]

  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 800b24e:	2300      	movs	r3, #0
 800b250:	61fb      	str	r3, [r7, #28]
 800b252:	e03b      	b.n	800b2cc <_ZN6tflite21MicroInterpreterGraph14ResetSubgraphsEv+0x8c>
       subgraph_idx++) {
    current_subgraph_index_ = subgraph_idx;
 800b254:	69fa      	ldr	r2, [r7, #28]
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	615a      	str	r2, [r3, #20]
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	689b      	ldr	r3, [r3, #8]
 800b25e:	69fa      	ldr	r2, [r7, #28]
 800b260:	4611      	mov	r1, r2
 800b262:	4618      	mov	r0, r3
 800b264:	f7fc f894 	bl	8007390 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
 800b268:	6138      	str	r0, [r7, #16]
    for (size_t i = 0; i < operators_size; ++i) {
 800b26a:	2300      	movs	r3, #0
 800b26c:	61bb      	str	r3, [r7, #24]
 800b26e:	e026      	b.n	800b2be <_ZN6tflite21MicroInterpreterGraph14ResetSubgraphsEv+0x7e>
      TfLiteNode* node =
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	691a      	ldr	r2, [r3, #16]
 800b274:	69fb      	ldr	r3, [r7, #28]
 800b276:	00db      	lsls	r3, r3, #3
 800b278:	4413      	add	r3, r2
 800b27a:	681a      	ldr	r2, [r3, #0]
 800b27c:	69bb      	ldr	r3, [r7, #24]
 800b27e:	015b      	lsls	r3, r3, #5
 800b280:	4413      	add	r3, r2
      TfLiteNode* node =
 800b282:	60fb      	str	r3, [r7, #12]
      const TFLMRegistration* registration = subgraph_allocations_[subgraph_idx]
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	691a      	ldr	r2, [r3, #16]
 800b288:	69fb      	ldr	r3, [r7, #28]
 800b28a:	00db      	lsls	r3, r3, #3
 800b28c:	4413      	add	r3, r2
                                                 .node_and_registrations[i]
 800b28e:	681a      	ldr	r2, [r3, #0]
 800b290:	69bb      	ldr	r3, [r7, #24]
 800b292:	015b      	lsls	r3, r3, #5
 800b294:	4413      	add	r3, r2
      const TFLMRegistration* registration = subgraph_allocations_[subgraph_idx]
 800b296:	69db      	ldr	r3, [r3, #28]
 800b298:	60bb      	str	r3, [r7, #8]
                                                 .registration;
      // registration is allocated outside the interpreter, so double check to
      // make sure it's not nullptr;
      if (registration != nullptr && registration->reset != nullptr) {
 800b29a:	68bb      	ldr	r3, [r7, #8]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d00b      	beq.n	800b2b8 <_ZN6tflite21MicroInterpreterGraph14ResetSubgraphsEv+0x78>
 800b2a0:	68bb      	ldr	r3, [r7, #8]
 800b2a2:	691b      	ldr	r3, [r3, #16]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d007      	beq.n	800b2b8 <_ZN6tflite21MicroInterpreterGraph14ResetSubgraphsEv+0x78>
        registration->reset(context_, node->user_data);
 800b2a8:	68bb      	ldr	r3, [r7, #8]
 800b2aa:	691b      	ldr	r3, [r3, #16]
 800b2ac:	687a      	ldr	r2, [r7, #4]
 800b2ae:	6850      	ldr	r0, [r2, #4]
 800b2b0:	68fa      	ldr	r2, [r7, #12]
 800b2b2:	68d2      	ldr	r2, [r2, #12]
 800b2b4:	4611      	mov	r1, r2
 800b2b6:	4798      	blx	r3
    for (size_t i = 0; i < operators_size; ++i) {
 800b2b8:	69bb      	ldr	r3, [r7, #24]
 800b2ba:	3301      	adds	r3, #1
 800b2bc:	61bb      	str	r3, [r7, #24]
 800b2be:	69ba      	ldr	r2, [r7, #24]
 800b2c0:	693b      	ldr	r3, [r7, #16]
 800b2c2:	429a      	cmp	r2, r3
 800b2c4:	d3d4      	bcc.n	800b270 <_ZN6tflite21MicroInterpreterGraph14ResetSubgraphsEv+0x30>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 800b2c6:	69fb      	ldr	r3, [r7, #28]
 800b2c8:	3301      	adds	r3, #1
 800b2ca:	61fb      	str	r3, [r7, #28]
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	69db      	ldr	r3, [r3, #28]
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	f7f6 fd3a 	bl	8001d4a <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmE4sizeEv>
 800b2d6:	4602      	mov	r2, r0
 800b2d8:	69fb      	ldr	r3, [r7, #28]
 800b2da:	4293      	cmp	r3, r2
 800b2dc:	bf34      	ite	cc
 800b2de:	2301      	movcc	r3, #1
 800b2e0:	2300      	movcs	r3, #0
 800b2e2:	b2db      	uxtb	r3, r3
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d1b5      	bne.n	800b254 <_ZN6tflite21MicroInterpreterGraph14ResetSubgraphsEv+0x14>
      }
    }
  }
  current_subgraph_index_ = previous_subgraph_idx;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	697a      	ldr	r2, [r7, #20]
 800b2ec:	615a      	str	r2, [r3, #20]

  return kTfLiteOk;
 800b2ee:	2300      	movs	r3, #0
}
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	3720      	adds	r7, #32
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	bd80      	pop	{r7, pc}

0800b2f8 <_ZN6tflite21MicroInterpreterGraph13FreeSubgraphsEv>:

TfLiteStatus MicroInterpreterGraph::FreeSubgraphs() {
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b088      	sub	sp, #32
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
  int previous_subgraph_idx = current_subgraph_index_;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	695b      	ldr	r3, [r3, #20]
 800b304:	617b      	str	r3, [r7, #20]

  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 800b306:	2300      	movs	r3, #0
 800b308:	61fb      	str	r3, [r7, #28]
 800b30a:	e03b      	b.n	800b384 <_ZN6tflite21MicroInterpreterGraph13FreeSubgraphsEv+0x8c>
       subgraph_idx++) {
    current_subgraph_index_ = subgraph_idx;
 800b30c:	69fa      	ldr	r2, [r7, #28]
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	615a      	str	r2, [r3, #20]
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	689b      	ldr	r3, [r3, #8]
 800b316:	69fa      	ldr	r2, [r7, #28]
 800b318:	4611      	mov	r1, r2
 800b31a:	4618      	mov	r0, r3
 800b31c:	f7fc f838 	bl	8007390 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
 800b320:	6138      	str	r0, [r7, #16]
    for (size_t i = 0; i < operators_size; ++i) {
 800b322:	2300      	movs	r3, #0
 800b324:	61bb      	str	r3, [r7, #24]
 800b326:	e026      	b.n	800b376 <_ZN6tflite21MicroInterpreterGraph13FreeSubgraphsEv+0x7e>
      TfLiteNode* node =
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	691a      	ldr	r2, [r3, #16]
 800b32c:	69fb      	ldr	r3, [r7, #28]
 800b32e:	00db      	lsls	r3, r3, #3
 800b330:	4413      	add	r3, r2
 800b332:	681a      	ldr	r2, [r3, #0]
 800b334:	69bb      	ldr	r3, [r7, #24]
 800b336:	015b      	lsls	r3, r3, #5
 800b338:	4413      	add	r3, r2
      TfLiteNode* node =
 800b33a:	60fb      	str	r3, [r7, #12]
      const TFLMRegistration* registration = subgraph_allocations_[subgraph_idx]
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	691a      	ldr	r2, [r3, #16]
 800b340:	69fb      	ldr	r3, [r7, #28]
 800b342:	00db      	lsls	r3, r3, #3
 800b344:	4413      	add	r3, r2
                                                 .node_and_registrations[i]
 800b346:	681a      	ldr	r2, [r3, #0]
 800b348:	69bb      	ldr	r3, [r7, #24]
 800b34a:	015b      	lsls	r3, r3, #5
 800b34c:	4413      	add	r3, r2
      const TFLMRegistration* registration = subgraph_allocations_[subgraph_idx]
 800b34e:	69db      	ldr	r3, [r3, #28]
 800b350:	60bb      	str	r3, [r7, #8]
                                                 .registration;
      // registration is allocated outside the interpreter, so double check to
      // make sure it's not nullptr;
      if (registration != nullptr && registration->free != nullptr) {
 800b352:	68bb      	ldr	r3, [r7, #8]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d00b      	beq.n	800b370 <_ZN6tflite21MicroInterpreterGraph13FreeSubgraphsEv+0x78>
 800b358:	68bb      	ldr	r3, [r7, #8]
 800b35a:	685b      	ldr	r3, [r3, #4]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d007      	beq.n	800b370 <_ZN6tflite21MicroInterpreterGraph13FreeSubgraphsEv+0x78>
        registration->free(context_, node->user_data);
 800b360:	68bb      	ldr	r3, [r7, #8]
 800b362:	685b      	ldr	r3, [r3, #4]
 800b364:	687a      	ldr	r2, [r7, #4]
 800b366:	6850      	ldr	r0, [r2, #4]
 800b368:	68fa      	ldr	r2, [r7, #12]
 800b36a:	68d2      	ldr	r2, [r2, #12]
 800b36c:	4611      	mov	r1, r2
 800b36e:	4798      	blx	r3
    for (size_t i = 0; i < operators_size; ++i) {
 800b370:	69bb      	ldr	r3, [r7, #24]
 800b372:	3301      	adds	r3, #1
 800b374:	61bb      	str	r3, [r7, #24]
 800b376:	69ba      	ldr	r2, [r7, #24]
 800b378:	693b      	ldr	r3, [r7, #16]
 800b37a:	429a      	cmp	r2, r3
 800b37c:	d3d4      	bcc.n	800b328 <_ZN6tflite21MicroInterpreterGraph13FreeSubgraphsEv+0x30>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 800b37e:	69fb      	ldr	r3, [r7, #28]
 800b380:	3301      	adds	r3, #1
 800b382:	61fb      	str	r3, [r7, #28]
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	69db      	ldr	r3, [r3, #28]
 800b388:	4618      	mov	r0, r3
 800b38a:	f7f6 fcde 	bl	8001d4a <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmE4sizeEv>
 800b38e:	4602      	mov	r2, r0
 800b390:	69fb      	ldr	r3, [r7, #28]
 800b392:	4293      	cmp	r3, r2
 800b394:	bf34      	ite	cc
 800b396:	2301      	movcc	r3, #1
 800b398:	2300      	movcs	r3, #0
 800b39a:	b2db      	uxtb	r3, r3
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d1b5      	bne.n	800b30c <_ZN6tflite21MicroInterpreterGraph13FreeSubgraphsEv+0x14>
      }
    }
  }
  current_subgraph_index_ = previous_subgraph_idx;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	697a      	ldr	r2, [r7, #20]
 800b3a4:	615a      	str	r2, [r3, #20]

  return kTfLiteOk;
 800b3a6:	2300      	movs	r3, #0
}
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	3720      	adds	r7, #32
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	bd80      	pop	{r7, pc}

0800b3b0 <_ZN6tflite21MicroInterpreterGraph14InvokeSubgraphEi>:

TfLiteStatus MicroInterpreterGraph::InvokeSubgraph(int subgraph_idx) {
 800b3b0:	b5b0      	push	{r4, r5, r7, lr}
 800b3b2:	b08a      	sub	sp, #40	; 0x28
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
 800b3b8:	6039      	str	r1, [r7, #0]
 800b3ba:	2400      	movs	r4, #0
  int previous_subgraph_idx = current_subgraph_index_;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	695b      	ldr	r3, [r3, #20]
 800b3c0:	623b      	str	r3, [r7, #32]
  current_subgraph_index_ = subgraph_idx;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	683a      	ldr	r2, [r7, #0]
 800b3c6:	615a      	str	r2, [r3, #20]

  if (static_cast<size_t>(subgraph_idx) >= subgraphs_->size()) {
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	69db      	ldr	r3, [r3, #28]
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	f7f6 fcbc 	bl	8001d4a <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmE4sizeEv>
 800b3d2:	4602      	mov	r2, r0
 800b3d4:	683b      	ldr	r3, [r7, #0]
 800b3d6:	429a      	cmp	r2, r3
 800b3d8:	bf94      	ite	ls
 800b3da:	2301      	movls	r3, #1
 800b3dc:	2300      	movhi	r3, #0
 800b3de:	b2db      	uxtb	r3, r3
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d00c      	beq.n	800b3fe <_ZN6tflite21MicroInterpreterGraph14InvokeSubgraphEi+0x4e>
    MicroPrintf("Accessing subgraph %d but only %d subgraphs found",
                subgraph_idx, subgraphs_->size());
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	69db      	ldr	r3, [r3, #28]
    MicroPrintf("Accessing subgraph %d but only %d subgraphs found",
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	f7f6 fcae 	bl	8001d4a <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmE4sizeEv>
 800b3ee:	4603      	mov	r3, r0
 800b3f0:	461a      	mov	r2, r3
 800b3f2:	6839      	ldr	r1, [r7, #0]
 800b3f4:	483a      	ldr	r0, [pc, #232]	; (800b4e0 <_ZN6tflite21MicroInterpreterGraph14InvokeSubgraphEi+0x130>)
 800b3f6:	f000 fa0b 	bl	800b810 <_Z11MicroPrintfPKcz>
    return kTfLiteError;
 800b3fa:	2401      	movs	r4, #1
 800b3fc:	e06a      	b.n	800b4d4 <_ZN6tflite21MicroInterpreterGraph14InvokeSubgraphEi+0x124>
  }
  uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	689b      	ldr	r3, [r3, #8]
 800b402:	6839      	ldr	r1, [r7, #0]
 800b404:	4618      	mov	r0, r3
 800b406:	f7fb ffc3 	bl	8007390 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
 800b40a:	61f8      	str	r0, [r7, #28]
  for (size_t i = 0; i < operators_size; ++i) {
 800b40c:	2300      	movs	r3, #0
 800b40e:	627b      	str	r3, [r7, #36]	; 0x24
 800b410:	e058      	b.n	800b4c4 <_ZN6tflite21MicroInterpreterGraph14InvokeSubgraphEi+0x114>
    TfLiteNode* node =
        &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	691a      	ldr	r2, [r3, #16]
 800b416:	683b      	ldr	r3, [r7, #0]
 800b418:	00db      	lsls	r3, r3, #3
 800b41a:	4413      	add	r3, r2
 800b41c:	681a      	ldr	r2, [r3, #0]
 800b41e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b420:	015b      	lsls	r3, r3, #5
 800b422:	4413      	add	r3, r2
    TfLiteNode* node =
 800b424:	61bb      	str	r3, [r7, #24]
    const TFLMRegistration* registration = subgraph_allocations_[subgraph_idx]
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	691a      	ldr	r2, [r3, #16]
 800b42a:	683b      	ldr	r3, [r7, #0]
 800b42c:	00db      	lsls	r3, r3, #3
 800b42e:	4413      	add	r3, r2
                                               .node_and_registrations[i]
 800b430:	681a      	ldr	r2, [r3, #0]
 800b432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b434:	015b      	lsls	r3, r3, #5
 800b436:	4413      	add	r3, r2
    const TFLMRegistration* registration = subgraph_allocations_[subgraph_idx]
 800b438:	69db      	ldr	r3, [r3, #28]
 800b43a:	617b      	str	r3, [r7, #20]
// -DTF_LITE_STRIP_ERROR_STRINGS) because the function OpNameFromRegistration is
// only defined for builds with the error strings.
#if !defined(TF_LITE_STRIP_ERROR_STRINGS)
    ScopedMicroProfiler scoped_profiler(
        OpNameFromRegistration(registration),
        reinterpret_cast<MicroProfilerInterface*>(context_->profiler));
 800b43c:	6978      	ldr	r0, [r7, #20]
 800b43e:	f7ff fd8b 	bl	800af58 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK16TFLMRegistration>
 800b442:	4601      	mov	r1, r0
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	685b      	ldr	r3, [r3, #4]
 800b448:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b44a:	f107 0308 	add.w	r3, r7, #8
 800b44e:	4618      	mov	r0, r3
 800b450:	f7ff fd48 	bl	800aee4 <_ZN6tflite19ScopedMicroProfilerC1EPKcPNS_22MicroProfilerInterfaceE>
#endif

    TFLITE_DCHECK(registration->invoke);
 800b454:	697b      	ldr	r3, [r7, #20]
 800b456:	68db      	ldr	r3, [r3, #12]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d101      	bne.n	800b460 <_ZN6tflite21MicroInterpreterGraph14InvokeSubgraphEi+0xb0>
 800b45c:	f014 fb00 	bl	801fa60 <abort>
    TfLiteStatus invoke_status = registration->invoke(context_, node);
 800b460:	697b      	ldr	r3, [r7, #20]
 800b462:	68db      	ldr	r3, [r3, #12]
 800b464:	687a      	ldr	r2, [r7, #4]
 800b466:	6852      	ldr	r2, [r2, #4]
 800b468:	69b9      	ldr	r1, [r7, #24]
 800b46a:	4610      	mov	r0, r2
 800b46c:	4798      	blx	r3
 800b46e:	4603      	mov	r3, r0
 800b470:	74fb      	strb	r3, [r7, #19]

    // All TfLiteTensor structs used in the kernel are allocated from temp
    // memory in the allocator. This creates a chain of allocations in the
    // temp section. The call below resets the chain of allocations to
    // prepare for the next call.
    allocator_->ResetTempAllocations();
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	68da      	ldr	r2, [r3, #12]
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	68db      	ldr	r3, [r3, #12]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	3314      	adds	r3, #20
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	4610      	mov	r0, r2
 800b482:	4798      	blx	r3

    if (invoke_status == kTfLiteError) {
 800b484:	7cfb      	ldrb	r3, [r7, #19]
 800b486:	2b01      	cmp	r3, #1
 800b488:	d10b      	bne.n	800b4a2 <_ZN6tflite21MicroInterpreterGraph14InvokeSubgraphEi+0xf2>
      MicroPrintf("Node %s (number %d) failed to invoke with status %d",
 800b48a:	6978      	ldr	r0, [r7, #20]
 800b48c:	f7ff fd64 	bl	800af58 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK16TFLMRegistration>
 800b490:	4601      	mov	r1, r0
 800b492:	7cfb      	ldrb	r3, [r7, #19]
 800b494:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b496:	4813      	ldr	r0, [pc, #76]	; (800b4e4 <_ZN6tflite21MicroInterpreterGraph14InvokeSubgraphEi+0x134>)
 800b498:	f000 f9ba 	bl	800b810 <_Z11MicroPrintfPKcz>
                  OpNameFromRegistration(registration), i, invoke_status);
      return kTfLiteError;
 800b49c:	2401      	movs	r4, #1
 800b49e:	2500      	movs	r5, #0
 800b4a0:	e006      	b.n	800b4b0 <_ZN6tflite21MicroInterpreterGraph14InvokeSubgraphEi+0x100>
    } else if (invoke_status != kTfLiteOk) {
 800b4a2:	7cfb      	ldrb	r3, [r7, #19]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d002      	beq.n	800b4ae <_ZN6tflite21MicroInterpreterGraph14InvokeSubgraphEi+0xfe>
      return invoke_status;
 800b4a8:	7cfc      	ldrb	r4, [r7, #19]
 800b4aa:	2500      	movs	r5, #0
 800b4ac:	e000      	b.n	800b4b0 <_ZN6tflite21MicroInterpreterGraph14InvokeSubgraphEi+0x100>
    }
  }
 800b4ae:	2501      	movs	r5, #1
 800b4b0:	f107 0308 	add.w	r3, r7, #8
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	f7ff fd37 	bl	800af28 <_ZN6tflite19ScopedMicroProfilerD1Ev>
 800b4ba:	2d01      	cmp	r5, #1
 800b4bc:	d10a      	bne.n	800b4d4 <_ZN6tflite21MicroInterpreterGraph14InvokeSubgraphEi+0x124>
  for (size_t i = 0; i < operators_size; ++i) {
 800b4be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4c0:	3301      	adds	r3, #1
 800b4c2:	627b      	str	r3, [r7, #36]	; 0x24
 800b4c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4c6:	69fb      	ldr	r3, [r7, #28]
 800b4c8:	429a      	cmp	r2, r3
 800b4ca:	d3a2      	bcc.n	800b412 <_ZN6tflite21MicroInterpreterGraph14InvokeSubgraphEi+0x62>
  current_subgraph_index_ = previous_subgraph_idx;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	6a3a      	ldr	r2, [r7, #32]
 800b4d0:	615a      	str	r2, [r3, #20]
  return kTfLiteOk;
 800b4d2:	2400      	movs	r4, #0
}
 800b4d4:	4623      	mov	r3, r4
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	3728      	adds	r7, #40	; 0x28
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	bdb0      	pop	{r4, r5, r7, pc}
 800b4de:	bf00      	nop
 800b4e0:	08024dfc 	.word	0x08024dfc
 800b4e4:	08024e30 	.word	0x08024e30

0800b4e8 <_ZN6tflite21MicroInterpreterGraph20ResetVariableTensorsEv>:

TfLiteStatus MicroInterpreterGraph::ResetVariableTensors() {
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b08a      	sub	sp, #40	; 0x28
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	627b      	str	r3, [r7, #36]	; 0x24
 800b4f4:	e076      	b.n	800b5e4 <_ZN6tflite21MicroInterpreterGraph20ResetVariableTensorsEv+0xfc>
       subgraph_idx++) {
    const SubGraph* subgraph = (*subgraphs_)[subgraph_idx];
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	69db      	ldr	r3, [r3, #28]
 800b4fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	f000 f954 	bl	800b7aa <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmEixEm>
 800b502:	61b8      	str	r0, [r7, #24]
    for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 800b504:	2300      	movs	r3, #0
 800b506:	623b      	str	r3, [r7, #32]
 800b508:	e059      	b.n	800b5be <_ZN6tflite21MicroInterpreterGraph20ResetVariableTensorsEv+0xd6>
      auto* tensor = subgraph->tensors()->Get(i);
 800b50a:	69b8      	ldr	r0, [r7, #24]
 800b50c:	f7fc f99c 	bl	8007848 <_ZNK6tflite8SubGraph7tensorsEv>
 800b510:	4603      	mov	r3, r0
 800b512:	6a39      	ldr	r1, [r7, #32]
 800b514:	4618      	mov	r0, r3
 800b516:	f7fc ffbb 	bl	8008490 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEmE3GetEm>
 800b51a:	6178      	str	r0, [r7, #20]
      if (tensor->is_variable()) {
 800b51c:	6978      	ldr	r0, [r7, #20]
 800b51e:	f7fc f937 	bl	8007790 <_ZNK6tflite6Tensor11is_variableEv>
 800b522:	4603      	mov	r3, r0
 800b524:	2b00      	cmp	r3, #0
 800b526:	d047      	beq.n	800b5b8 <_ZN6tflite21MicroInterpreterGraph20ResetVariableTensorsEv+0xd0>
        size_t buffer_size;
        TF_LITE_ENSURE_STATUS(TfLiteEvalTensorByteLength(
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	691a      	ldr	r2, [r3, #16]
 800b52c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b52e:	00db      	lsls	r3, r3, #3
 800b530:	4413      	add	r3, r2
 800b532:	6859      	ldr	r1, [r3, #4]
 800b534:	6a3a      	ldr	r2, [r7, #32]
 800b536:	4613      	mov	r3, r2
 800b538:	005b      	lsls	r3, r3, #1
 800b53a:	4413      	add	r3, r2
 800b53c:	009b      	lsls	r3, r3, #2
 800b53e:	440b      	add	r3, r1
 800b540:	f107 020c 	add.w	r2, r7, #12
 800b544:	4611      	mov	r1, r2
 800b546:	4618      	mov	r0, r3
 800b548:	f7fc f8ce 	bl	80076e8 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
 800b54c:	4603      	mov	r3, r0
 800b54e:	74fb      	strb	r3, [r7, #19]
 800b550:	7cfb      	ldrb	r3, [r7, #19]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d001      	beq.n	800b55a <_ZN6tflite21MicroInterpreterGraph20ResetVariableTensorsEv+0x72>
 800b556:	7cfb      	ldrb	r3, [r7, #19]
 800b558:	e05d      	b.n	800b616 <_ZN6tflite21MicroInterpreterGraph20ResetVariableTensorsEv+0x12e>
            &subgraph_allocations_[subgraph_idx].tensors[i], &buffer_size));

        int value = 0;
 800b55a:	2300      	movs	r3, #0
 800b55c:	61fb      	str	r3, [r7, #28]
        if (tensor->type() == tflite::TensorType_INT8) {
 800b55e:	6978      	ldr	r0, [r7, #20]
 800b560:	f7fb ff8f 	bl	8007482 <_ZNK6tflite6Tensor4typeEv>
 800b564:	4603      	mov	r3, r0
 800b566:	2b09      	cmp	r3, #9
 800b568:	bf0c      	ite	eq
 800b56a:	2301      	moveq	r3, #1
 800b56c:	2300      	movne	r3, #0
 800b56e:	b2db      	uxtb	r3, r3
 800b570:	2b00      	cmp	r3, #0
 800b572:	d00f      	beq.n	800b594 <_ZN6tflite21MicroInterpreterGraph20ResetVariableTensorsEv+0xac>
          value = tensor->quantization()->zero_point()->Get(0);
 800b574:	6978      	ldr	r0, [r7, #20]
 800b576:	f7fd f9db 	bl	8008930 <_ZNK6tflite6Tensor12quantizationEv>
 800b57a:	4603      	mov	r3, r0
 800b57c:	4618      	mov	r0, r3
 800b57e:	f7fd f9ab 	bl	80088d8 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 800b582:	4603      	mov	r3, r0
 800b584:	2100      	movs	r1, #0
 800b586:	4618      	mov	r0, r3
 800b588:	f7f8 fb4c 	bl	8003c24 <_ZNK11flatbuffers6VectorIxmE3GetEm>
 800b58c:	4602      	mov	r2, r0
 800b58e:	460b      	mov	r3, r1
 800b590:	4613      	mov	r3, r2
 800b592:	61fb      	str	r3, [r7, #28]
        }
        memset(subgraph_allocations_[subgraph_idx].tensors[i].data.raw, value,
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	691a      	ldr	r2, [r3, #16]
 800b598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b59a:	00db      	lsls	r3, r3, #3
 800b59c:	4413      	add	r3, r2
 800b59e:	6859      	ldr	r1, [r3, #4]
 800b5a0:	6a3a      	ldr	r2, [r7, #32]
 800b5a2:	4613      	mov	r3, r2
 800b5a4:	005b      	lsls	r3, r3, #1
 800b5a6:	4413      	add	r3, r2
 800b5a8:	009b      	lsls	r3, r3, #2
 800b5aa:	440b      	add	r3, r1
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	68fa      	ldr	r2, [r7, #12]
 800b5b0:	69f9      	ldr	r1, [r7, #28]
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	f015 f81a 	bl	80205ec <memset>
    for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 800b5b8:	6a3b      	ldr	r3, [r7, #32]
 800b5ba:	3301      	adds	r3, #1
 800b5bc:	623b      	str	r3, [r7, #32]
 800b5be:	69b8      	ldr	r0, [r7, #24]
 800b5c0:	f7fc f942 	bl	8007848 <_ZNK6tflite8SubGraph7tensorsEv>
 800b5c4:	4603      	mov	r3, r0
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	f7fc ff54 	bl	8008474 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEmE4sizeEv>
 800b5cc:	4602      	mov	r2, r0
 800b5ce:	6a3b      	ldr	r3, [r7, #32]
 800b5d0:	4293      	cmp	r3, r2
 800b5d2:	bf34      	ite	cc
 800b5d4:	2301      	movcc	r3, #1
 800b5d6:	2300      	movcs	r3, #0
 800b5d8:	b2db      	uxtb	r3, r3
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d195      	bne.n	800b50a <_ZN6tflite21MicroInterpreterGraph20ResetVariableTensorsEv+0x22>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 800b5de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5e0:	3301      	adds	r3, #1
 800b5e2:	627b      	str	r3, [r7, #36]	; 0x24
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	69db      	ldr	r3, [r3, #28]
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	f7f6 fbae 	bl	8001d4a <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmE4sizeEv>
 800b5ee:	4602      	mov	r2, r0
 800b5f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5f2:	4293      	cmp	r3, r2
 800b5f4:	bf34      	ite	cc
 800b5f6:	2301      	movcc	r3, #1
 800b5f8:	2300      	movcs	r3, #0
 800b5fa:	b2db      	uxtb	r3, r3
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	f47f af7a 	bne.w	800b4f6 <_ZN6tflite21MicroInterpreterGraph20ResetVariableTensorsEv+0xe>
               buffer_size);
      }
    }
  }
  if (resource_variables_ != nullptr) {
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	699b      	ldr	r3, [r3, #24]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d004      	beq.n	800b614 <_ZN6tflite21MicroInterpreterGraph20ResetVariableTensorsEv+0x12c>
    resource_variables_->ResetAll();
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	699b      	ldr	r3, [r3, #24]
 800b60e:	4618      	mov	r0, r3
 800b610:	f000 f986 	bl	800b920 <_ZN6tflite22MicroResourceVariables8ResetAllEv>
  }

  return kTfLiteOk;
 800b614:	2300      	movs	r3, #0
}
 800b616:	4618      	mov	r0, r3
 800b618:	3728      	adds	r7, #40	; 0x28
 800b61a:	46bd      	mov	sp, r7
 800b61c:	bd80      	pop	{r7, pc}

0800b61e <_ZN6tflite21MicroInterpreterGraph12NumSubgraphsEv>:

int MicroInterpreterGraph::NumSubgraphs() {
 800b61e:	b580      	push	{r7, lr}
 800b620:	b082      	sub	sp, #8
 800b622:	af00      	add	r7, sp, #0
 800b624:	6078      	str	r0, [r7, #4]
  return model_->subgraphs()->size();
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	689b      	ldr	r3, [r3, #8]
 800b62a:	4618      	mov	r0, r3
 800b62c:	f7f6 f9b5 	bl	800199a <_ZNK6tflite5Model9subgraphsEv>
 800b630:	4603      	mov	r3, r0
 800b632:	4618      	mov	r0, r3
 800b634:	f7f6 fb89 	bl	8001d4a <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmE4sizeEv>
 800b638:	4603      	mov	r3, r0
}
 800b63a:	4618      	mov	r0, r3
 800b63c:	3708      	adds	r7, #8
 800b63e:	46bd      	mov	sp, r7
 800b640:	bd80      	pop	{r7, pc}

0800b642 <_ZN6tflite21MicroInterpreterGraph22SetSubgraphAllocationsEPNS_19SubgraphAllocationsE>:

void MicroInterpreterGraph::SetSubgraphAllocations(
    SubgraphAllocations* subgraph_allocations) {
 800b642:	b480      	push	{r7}
 800b644:	b083      	sub	sp, #12
 800b646:	af00      	add	r7, sp, #0
 800b648:	6078      	str	r0, [r7, #4]
 800b64a:	6039      	str	r1, [r7, #0]
  subgraph_allocations_ = subgraph_allocations;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	683a      	ldr	r2, [r7, #0]
 800b650:	611a      	str	r2, [r3, #16]
}
 800b652:	bf00      	nop
 800b654:	370c      	adds	r7, #12
 800b656:	46bd      	mov	sp, r7
 800b658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65c:	4770      	bx	lr

0800b65e <_ZN6tflite21MicroInterpreterGraph17NumSubgraphInputsEi>:

size_t MicroInterpreterGraph::NumSubgraphInputs(int subgraph_idx) {
 800b65e:	b580      	push	{r7, lr}
 800b660:	b082      	sub	sp, #8
 800b662:	af00      	add	r7, sp, #0
 800b664:	6078      	str	r0, [r7, #4]
 800b666:	6039      	str	r1, [r7, #0]
  return model_->subgraphs()->Get(subgraph_idx)->inputs()->size();
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	689b      	ldr	r3, [r3, #8]
 800b66c:	4618      	mov	r0, r3
 800b66e:	f7f6 f994 	bl	800199a <_ZNK6tflite5Model9subgraphsEv>
 800b672:	4602      	mov	r2, r0
 800b674:	683b      	ldr	r3, [r7, #0]
 800b676:	4619      	mov	r1, r3
 800b678:	4610      	mov	r0, r2
 800b67a:	f7f6 fb75 	bl	8001d68 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmE3GetEm>
 800b67e:	4603      	mov	r3, r0
 800b680:	4618      	mov	r0, r3
 800b682:	f7f6 f96d 	bl	8001960 <_ZNK6tflite8SubGraph6inputsEv>
 800b686:	4603      	mov	r3, r0
 800b688:	4618      	mov	r0, r3
 800b68a:	f7f6 fb50 	bl	8001d2e <_ZNK11flatbuffers6VectorIlmE4sizeEv>
 800b68e:	4603      	mov	r3, r0
}
 800b690:	4618      	mov	r0, r3
 800b692:	3708      	adds	r7, #8
 800b694:	46bd      	mov	sp, r7
 800b696:	bd80      	pop	{r7, pc}

0800b698 <_ZN6tflite21MicroInterpreterGraph16GetSubgraphInputEii>:

TfLiteEvalTensor* MicroInterpreterGraph::GetSubgraphInput(int subgraph_idx,
                                                          int input_idx) {
 800b698:	b580      	push	{r7, lr}
 800b69a:	b086      	sub	sp, #24
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	60f8      	str	r0, [r7, #12]
 800b6a0:	60b9      	str	r1, [r7, #8]
 800b6a2:	607a      	str	r2, [r7, #4]
  int tensor_idx =
      model_->subgraphs()->Get(subgraph_idx)->inputs()->Get(input_idx);
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	689b      	ldr	r3, [r3, #8]
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	f7f6 f976 	bl	800199a <_ZNK6tflite5Model9subgraphsEv>
 800b6ae:	4602      	mov	r2, r0
 800b6b0:	68bb      	ldr	r3, [r7, #8]
 800b6b2:	4619      	mov	r1, r3
 800b6b4:	4610      	mov	r0, r2
 800b6b6:	f7f6 fb57 	bl	8001d68 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmE3GetEm>
 800b6ba:	4603      	mov	r3, r0
 800b6bc:	4618      	mov	r0, r3
 800b6be:	f7f6 f94f 	bl	8001960 <_ZNK6tflite8SubGraph6inputsEv>
 800b6c2:	4602      	mov	r2, r0
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	4619      	mov	r1, r3
 800b6c8:	4610      	mov	r0, r2
 800b6ca:	f7f8 fad3 	bl	8003c74 <_ZNK11flatbuffers6VectorIlmE3GetEm>
 800b6ce:	6178      	str	r0, [r7, #20]
  return &subgraph_allocations_[subgraph_idx].tensors[tensor_idx];
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	691a      	ldr	r2, [r3, #16]
 800b6d4:	68bb      	ldr	r3, [r7, #8]
 800b6d6:	00db      	lsls	r3, r3, #3
 800b6d8:	4413      	add	r3, r2
 800b6da:	6859      	ldr	r1, [r3, #4]
 800b6dc:	697a      	ldr	r2, [r7, #20]
 800b6de:	4613      	mov	r3, r2
 800b6e0:	005b      	lsls	r3, r3, #1
 800b6e2:	4413      	add	r3, r2
 800b6e4:	009b      	lsls	r3, r3, #2
 800b6e6:	440b      	add	r3, r1
}
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	3718      	adds	r7, #24
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	bd80      	pop	{r7, pc}

0800b6f0 <_ZN6tflite21MicroInterpreterGraph18NumSubgraphOutputsEi>:

size_t MicroInterpreterGraph::NumSubgraphOutputs(int subgraph_idx) {
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b082      	sub	sp, #8
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
 800b6f8:	6039      	str	r1, [r7, #0]
  return model_->subgraphs()->Get(subgraph_idx)->outputs() == nullptr
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	689b      	ldr	r3, [r3, #8]
 800b6fe:	4618      	mov	r0, r3
 800b700:	f7f6 f94b 	bl	800199a <_ZNK6tflite5Model9subgraphsEv>
 800b704:	4602      	mov	r2, r0
 800b706:	683b      	ldr	r3, [r7, #0]
 800b708:	4619      	mov	r1, r3
 800b70a:	4610      	mov	r0, r2
 800b70c:	f7f6 fb2c 	bl	8001d68 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmE3GetEm>
 800b710:	4603      	mov	r3, r0
 800b712:	4618      	mov	r0, r3
 800b714:	f7fc f8a6 	bl	8007864 <_ZNK6tflite8SubGraph7outputsEv>
 800b718:	4603      	mov	r3, r0
             ? 0
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d014      	beq.n	800b748 <_ZN6tflite21MicroInterpreterGraph18NumSubgraphOutputsEi+0x58>
             : model_->subgraphs()->Get(subgraph_idx)->outputs()->size();
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	689b      	ldr	r3, [r3, #8]
 800b722:	4618      	mov	r0, r3
 800b724:	f7f6 f939 	bl	800199a <_ZNK6tflite5Model9subgraphsEv>
 800b728:	4602      	mov	r2, r0
 800b72a:	683b      	ldr	r3, [r7, #0]
 800b72c:	4619      	mov	r1, r3
 800b72e:	4610      	mov	r0, r2
 800b730:	f7f6 fb1a 	bl	8001d68 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmE3GetEm>
 800b734:	4603      	mov	r3, r0
 800b736:	4618      	mov	r0, r3
 800b738:	f7fc f894 	bl	8007864 <_ZNK6tflite8SubGraph7outputsEv>
 800b73c:	4603      	mov	r3, r0
 800b73e:	4618      	mov	r0, r3
 800b740:	f7f6 faf5 	bl	8001d2e <_ZNK11flatbuffers6VectorIlmE4sizeEv>
 800b744:	4603      	mov	r3, r0
 800b746:	e000      	b.n	800b74a <_ZN6tflite21MicroInterpreterGraph18NumSubgraphOutputsEi+0x5a>
             ? 0
 800b748:	2300      	movs	r3, #0
}
 800b74a:	4618      	mov	r0, r3
 800b74c:	3708      	adds	r7, #8
 800b74e:	46bd      	mov	sp, r7
 800b750:	bd80      	pop	{r7, pc}

0800b752 <_ZN6tflite21MicroInterpreterGraph17GetSubgraphOutputEii>:

TfLiteEvalTensor* MicroInterpreterGraph::GetSubgraphOutput(int subgraph_idx,
                                                           int output_idx) {
 800b752:	b580      	push	{r7, lr}
 800b754:	b086      	sub	sp, #24
 800b756:	af00      	add	r7, sp, #0
 800b758:	60f8      	str	r0, [r7, #12]
 800b75a:	60b9      	str	r1, [r7, #8]
 800b75c:	607a      	str	r2, [r7, #4]
  int tensor_idx =
      model_->subgraphs()->Get(subgraph_idx)->outputs()->Get(output_idx);
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	689b      	ldr	r3, [r3, #8]
 800b762:	4618      	mov	r0, r3
 800b764:	f7f6 f919 	bl	800199a <_ZNK6tflite5Model9subgraphsEv>
 800b768:	4602      	mov	r2, r0
 800b76a:	68bb      	ldr	r3, [r7, #8]
 800b76c:	4619      	mov	r1, r3
 800b76e:	4610      	mov	r0, r2
 800b770:	f7f6 fafa 	bl	8001d68 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmE3GetEm>
 800b774:	4603      	mov	r3, r0
 800b776:	4618      	mov	r0, r3
 800b778:	f7fc f874 	bl	8007864 <_ZNK6tflite8SubGraph7outputsEv>
 800b77c:	4602      	mov	r2, r0
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	4619      	mov	r1, r3
 800b782:	4610      	mov	r0, r2
 800b784:	f7f8 fa76 	bl	8003c74 <_ZNK11flatbuffers6VectorIlmE3GetEm>
 800b788:	6178      	str	r0, [r7, #20]
  return &subgraph_allocations_[subgraph_idx].tensors[tensor_idx];
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	691a      	ldr	r2, [r3, #16]
 800b78e:	68bb      	ldr	r3, [r7, #8]
 800b790:	00db      	lsls	r3, r3, #3
 800b792:	4413      	add	r3, r2
 800b794:	6859      	ldr	r1, [r3, #4]
 800b796:	697a      	ldr	r2, [r7, #20]
 800b798:	4613      	mov	r3, r2
 800b79a:	005b      	lsls	r3, r3, #1
 800b79c:	4413      	add	r3, r2
 800b79e:	009b      	lsls	r3, r3, #2
 800b7a0:	440b      	add	r3, r1
}
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	3718      	adds	r7, #24
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	bd80      	pop	{r7, pc}

0800b7aa <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmEixEm>:
  return_type operator[](SizeT i) const { return Get(i); }
 800b7aa:	b580      	push	{r7, lr}
 800b7ac:	b082      	sub	sp, #8
 800b7ae:	af00      	add	r7, sp, #0
 800b7b0:	6078      	str	r0, [r7, #4]
 800b7b2:	6039      	str	r1, [r7, #0]
 800b7b4:	6839      	ldr	r1, [r7, #0]
 800b7b6:	6878      	ldr	r0, [r7, #4]
 800b7b8:	f7f6 fad6 	bl	8001d68 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEmE3GetEm>
 800b7bc:	4603      	mov	r3, r0
 800b7be:	4618      	mov	r0, r3
 800b7c0:	3708      	adds	r7, #8
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	bd80      	pop	{r7, pc}

0800b7c6 <_ZN12_GLOBAL__N_19VDebugLogEPKcz>:
#endif

#if !defined(TF_LITE_STRIP_ERROR_STRINGS)
namespace {

void VDebugLog(const char* format, ...) {
 800b7c6:	b40f      	push	{r0, r1, r2, r3}
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b082      	sub	sp, #8
 800b7cc:	af00      	add	r7, sp, #0
  va_list args;
  va_start(args, format);
 800b7ce:	f107 0314 	add.w	r3, r7, #20
 800b7d2:	607b      	str	r3, [r7, #4]
  DebugLog(format, args);
 800b7d4:	6879      	ldr	r1, [r7, #4]
 800b7d6:	6938      	ldr	r0, [r7, #16]
 800b7d8:	f7fb fd5a 	bl	8007290 <DebugLog>
  va_end(args);
}
 800b7dc:	bf00      	nop
 800b7de:	3708      	adds	r7, #8
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b7e6:	b004      	add	sp, #16
 800b7e8:	4770      	bx	lr
	...

0800b7ec <_Z12VMicroPrintfPKcSt9__va_list>:

}  // namespace

void VMicroPrintf(const char* format, va_list args) {
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b082      	sub	sp, #8
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
 800b7f4:	6039      	str	r1, [r7, #0]
  DebugLog(format, args);
 800b7f6:	6839      	ldr	r1, [r7, #0]
 800b7f8:	6878      	ldr	r0, [r7, #4]
 800b7fa:	f7fb fd49 	bl	8007290 <DebugLog>
  // TODO(b/290051015): remove "\r\n"
  VDebugLog("\r\n");
 800b7fe:	4803      	ldr	r0, [pc, #12]	; (800b80c <_Z12VMicroPrintfPKcSt9__va_list+0x20>)
 800b800:	f7ff ffe1 	bl	800b7c6 <_ZN12_GLOBAL__N_19VDebugLogEPKcz>
}
 800b804:	bf00      	nop
 800b806:	3708      	adds	r7, #8
 800b808:	46bd      	mov	sp, r7
 800b80a:	bd80      	pop	{r7, pc}
 800b80c:	08025200 	.word	0x08025200

0800b810 <_Z11MicroPrintfPKcz>:

void MicroPrintf(const char* format, ...) {
 800b810:	b40f      	push	{r0, r1, r2, r3}
 800b812:	b580      	push	{r7, lr}
 800b814:	b082      	sub	sp, #8
 800b816:	af00      	add	r7, sp, #0
  va_list args;
  va_start(args, format);
 800b818:	f107 0314 	add.w	r3, r7, #20
 800b81c:	607b      	str	r3, [r7, #4]
  VMicroPrintf(format, args);
 800b81e:	6879      	ldr	r1, [r7, #4]
 800b820:	6938      	ldr	r0, [r7, #16]
 800b822:	f7ff ffe3 	bl	800b7ec <_Z12VMicroPrintfPKcSt9__va_list>
  va_end(args);
}
 800b826:	bf00      	nop
 800b828:	3708      	adds	r7, #8
 800b82a:	46bd      	mov	sp, r7
 800b82c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b830:	b004      	add	sp, #16
 800b832:	4770      	bx	lr

0800b834 <_ZNK6tflite12OperatorCode11custom_codeEv>:
  const ::flatbuffers::String *custom_code() const {
 800b834:	b580      	push	{r7, lr}
 800b836:	b082      	sub	sp, #8
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
    return GetPointer<const ::flatbuffers::String *>(VT_CUSTOM_CODE);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	2106      	movs	r1, #6
 800b840:	4618      	mov	r0, r3
 800b842:	f7f8 f9a0 	bl	8003b86 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6StringEmEET_t>
 800b846:	4603      	mov	r3, r0
  }
 800b848:	4618      	mov	r0, r3
 800b84a:	3708      	adds	r7, #8
 800b84c:	46bd      	mov	sp, r7
 800b84e:	bd80      	pop	{r7, pc}

0800b850 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_15MicroOpResolverEPPK16TFLMRegistration>:

namespace tflite {

TfLiteStatus GetRegistrationFromOpCode(const OperatorCode* opcode,
                                       const MicroOpResolver& op_resolver,
                                       const TFLMRegistration** registration) {
 800b850:	b580      	push	{r7, lr}
 800b852:	b088      	sub	sp, #32
 800b854:	af00      	add	r7, sp, #0
 800b856:	60f8      	str	r0, [r7, #12]
 800b858:	60b9      	str	r1, [r7, #8]
 800b85a:	607a      	str	r2, [r7, #4]
  TfLiteStatus status = kTfLiteOk;
 800b85c:	2300      	movs	r3, #0
 800b85e:	77fb      	strb	r3, [r7, #31]
  *registration = nullptr;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	2200      	movs	r2, #0
 800b864:	601a      	str	r2, [r3, #0]
  auto builtin_code = GetBuiltinCode(opcode);
 800b866:	68f8      	ldr	r0, [r7, #12]
 800b868:	f009 f8e4 	bl	8014a34 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>
 800b86c:	61b8      	str	r0, [r7, #24]

  if (builtin_code > BuiltinOperator_MAX) {
 800b86e:	69bb      	ldr	r3, [r7, #24]
 800b870:	2bce      	cmp	r3, #206	; 0xce
 800b872:	dd06      	ble.n	800b882 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_15MicroOpResolverEPPK16TFLMRegistration+0x32>
    MicroPrintf("Op builtin_code out of range: %d.", builtin_code);
 800b874:	69b9      	ldr	r1, [r7, #24]
 800b876:	4827      	ldr	r0, [pc, #156]	; (800b914 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_15MicroOpResolverEPPK16TFLMRegistration+0xc4>)
 800b878:	f7ff ffca 	bl	800b810 <_Z11MicroPrintfPKcz>
    status = kTfLiteError;
 800b87c:	2301      	movs	r3, #1
 800b87e:	77fb      	strb	r3, [r7, #31]
 800b880:	e043      	b.n	800b90a <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_15MicroOpResolverEPPK16TFLMRegistration+0xba>
  } else if (builtin_code != BuiltinOperator_CUSTOM) {
 800b882:	69bb      	ldr	r3, [r7, #24]
 800b884:	2b20      	cmp	r3, #32
 800b886:	d017      	beq.n	800b8b8 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_15MicroOpResolverEPPK16TFLMRegistration+0x68>
    *registration = op_resolver.FindOp(builtin_code);
 800b888:	68bb      	ldr	r3, [r7, #8]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	69b9      	ldr	r1, [r7, #24]
 800b890:	68b8      	ldr	r0, [r7, #8]
 800b892:	4798      	blx	r3
 800b894:	4602      	mov	r2, r0
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	601a      	str	r2, [r3, #0]
    if (*registration == nullptr) {
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d133      	bne.n	800b90a <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_15MicroOpResolverEPPK16TFLMRegistration+0xba>
      MicroPrintf("Didn't find op for builtin opcode '%s'",
 800b8a2:	69b8      	ldr	r0, [r7, #24]
 800b8a4:	f7fe fc08 	bl	800a0b8 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 800b8a8:	4603      	mov	r3, r0
 800b8aa:	4619      	mov	r1, r3
 800b8ac:	481a      	ldr	r0, [pc, #104]	; (800b918 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_15MicroOpResolverEPPK16TFLMRegistration+0xc8>)
 800b8ae:	f7ff ffaf 	bl	800b810 <_Z11MicroPrintfPKcz>
                  EnumNameBuiltinOperator(builtin_code));
      status = kTfLiteError;
 800b8b2:	2301      	movs	r3, #1
 800b8b4:	77fb      	strb	r3, [r7, #31]
 800b8b6:	e028      	b.n	800b90a <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_15MicroOpResolverEPPK16TFLMRegistration+0xba>
    }
  } else if (!opcode->custom_code()) {
 800b8b8:	68f8      	ldr	r0, [r7, #12]
 800b8ba:	f7ff ffbb 	bl	800b834 <_ZNK6tflite12OperatorCode11custom_codeEv>
 800b8be:	4603      	mov	r3, r0
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	bf0c      	ite	eq
 800b8c4:	2301      	moveq	r3, #1
 800b8c6:	2300      	movne	r3, #0
 800b8c8:	b2db      	uxtb	r3, r3
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d005      	beq.n	800b8da <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_15MicroOpResolverEPPK16TFLMRegistration+0x8a>
    MicroPrintf("Operator with CUSTOM builtin_code has no custom_code.\n");
 800b8ce:	4813      	ldr	r0, [pc, #76]	; (800b91c <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_15MicroOpResolverEPPK16TFLMRegistration+0xcc>)
 800b8d0:	f7ff ff9e 	bl	800b810 <_Z11MicroPrintfPKcz>
    status = kTfLiteError;
 800b8d4:	2301      	movs	r3, #1
 800b8d6:	77fb      	strb	r3, [r7, #31]
 800b8d8:	e017      	b.n	800b90a <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_15MicroOpResolverEPPK16TFLMRegistration+0xba>
  } else {
    const char* name = opcode->custom_code()->c_str();
 800b8da:	68f8      	ldr	r0, [r7, #12]
 800b8dc:	f7ff ffaa 	bl	800b834 <_ZNK6tflite12OperatorCode11custom_codeEv>
 800b8e0:	4603      	mov	r3, r0
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	f7f7 f910 	bl	8002b08 <_ZNK11flatbuffers6String5c_strEv>
 800b8e8:	6178      	str	r0, [r7, #20]
    *registration = op_resolver.FindOp(name);
 800b8ea:	68bb      	ldr	r3, [r7, #8]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	3304      	adds	r3, #4
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	6979      	ldr	r1, [r7, #20]
 800b8f4:	68b8      	ldr	r0, [r7, #8]
 800b8f6:	4798      	blx	r3
 800b8f8:	4602      	mov	r2, r0
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	601a      	str	r2, [r3, #0]
    if (*registration == nullptr) {
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d101      	bne.n	800b90a <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_15MicroOpResolverEPPK16TFLMRegistration+0xba>
      // Do not report error for unresolved custom op, we do the final check
      // while preparing ops.
      status = kTfLiteError;
 800b906:	2301      	movs	r3, #1
 800b908:	77fb      	strb	r3, [r7, #31]
    }
  }
  return status;
 800b90a:	7ffb      	ldrb	r3, [r7, #31]
}
 800b90c:	4618      	mov	r0, r3
 800b90e:	3720      	adds	r7, #32
 800b910:	46bd      	mov	sp, r7
 800b912:	bd80      	pop	{r7, pc}
 800b914:	08025d44 	.word	0x08025d44
 800b918:	08025d68 	.word	0x08025d68
 800b91c:	08025d90 	.word	0x08025d90

0800b920 <_ZN6tflite22MicroResourceVariables8ResetAllEv>:
  TFLITE_DCHECK(EvalTensorBytes(tensor) == variable.bytes);
  memcpy(variable.resource_buffer, tensor->data.raw, variable.bytes);
  return kTfLiteOk;
}

TfLiteStatus MicroResourceVariables::ResetAll() {
 800b920:	b5b0      	push	{r4, r5, r7, lr}
 800b922:	b088      	sub	sp, #32
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]
  for (int i = 0; i < num_resource_variables_; i++) {
 800b928:	2300      	movs	r3, #0
 800b92a:	61fb      	str	r3, [r7, #28]
 800b92c:	e019      	b.n	800b962 <_ZN6tflite22MicroResourceVariables8ResetAllEv+0x42>
    MicroResourceVariable variable = resource_variables_[i];
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	6819      	ldr	r1, [r3, #0]
 800b932:	69fa      	ldr	r2, [r7, #28]
 800b934:	4613      	mov	r3, r2
 800b936:	009b      	lsls	r3, r3, #2
 800b938:	4413      	add	r3, r2
 800b93a:	009b      	lsls	r3, r3, #2
 800b93c:	440b      	add	r3, r1
 800b93e:	f107 0408 	add.w	r4, r7, #8
 800b942:	461d      	mov	r5, r3
 800b944:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b946:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b948:	682b      	ldr	r3, [r5, #0]
 800b94a:	6023      	str	r3, [r4, #0]
    // TODO(b/269669735): Explains why casting zero_point to int8 and memset.
    memset(variable.resource_buffer, variable.default_value, variable.bytes);
 800b94c:	693b      	ldr	r3, [r7, #16]
 800b94e:	f997 2018 	ldrsb.w	r2, [r7, #24]
 800b952:	4611      	mov	r1, r2
 800b954:	697a      	ldr	r2, [r7, #20]
 800b956:	4618      	mov	r0, r3
 800b958:	f014 fe48 	bl	80205ec <memset>
  for (int i = 0; i < num_resource_variables_; i++) {
 800b95c:	69fb      	ldr	r3, [r7, #28]
 800b95e:	3301      	adds	r3, #1
 800b960:	61fb      	str	r3, [r7, #28]
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	689b      	ldr	r3, [r3, #8]
 800b966:	69fa      	ldr	r2, [r7, #28]
 800b968:	429a      	cmp	r2, r3
 800b96a:	dbe0      	blt.n	800b92e <_ZN6tflite22MicroResourceVariables8ResetAllEv+0xe>
  }
  return kTfLiteOk;
 800b96c:	2300      	movs	r3, #0
}
 800b96e:	4618      	mov	r0, r3
 800b970:	3720      	adds	r7, #32
 800b972:	46bd      	mov	sp, r7
 800b974:	bdb0      	pop	{r4, r5, r7, pc}

0800b976 <_ZN6tflite12ElementCountERK14TfLiteIntArray>:
#include "tensorflow/lite/micro/memory_helpers.h"
#include "tensorflow/lite/micro/micro_log.h"

namespace tflite {

int ElementCount(const TfLiteIntArray& dims) {
 800b976:	b480      	push	{r7}
 800b978:	b085      	sub	sp, #20
 800b97a:	af00      	add	r7, sp, #0
 800b97c:	6078      	str	r0, [r7, #4]
  int result = 1;
 800b97e:	2301      	movs	r3, #1
 800b980:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < dims.size; ++i) {
 800b982:	2300      	movs	r3, #0
 800b984:	60bb      	str	r3, [r7, #8]
 800b986:	e00b      	b.n	800b9a0 <_ZN6tflite12ElementCountERK14TfLiteIntArray+0x2a>
    result *= dims.data[i];
 800b988:	687a      	ldr	r2, [r7, #4]
 800b98a:	68bb      	ldr	r3, [r7, #8]
 800b98c:	009b      	lsls	r3, r3, #2
 800b98e:	4413      	add	r3, r2
 800b990:	685a      	ldr	r2, [r3, #4]
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	fb02 f303 	mul.w	r3, r2, r3
 800b998:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < dims.size; ++i) {
 800b99a:	68bb      	ldr	r3, [r7, #8]
 800b99c:	3301      	adds	r3, #1
 800b99e:	60bb      	str	r3, [r7, #8]
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	68ba      	ldr	r2, [r7, #8]
 800b9a6:	429a      	cmp	r2, r3
 800b9a8:	dbee      	blt.n	800b988 <_ZN6tflite12ElementCountERK14TfLiteIntArray+0x12>
  }
  return result;
 800b9aa:	68fb      	ldr	r3, [r7, #12]
}
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	3714      	adds	r7, #20
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b6:	4770      	bx	lr

0800b9b8 <_ZN6tflite16InitializeTargetEv>:
namespace tflite {

// To add an equivalent function for your own platform, create your own
// implementation file, and place it in a subfolder named after the target. See
// tensorflow/lite/micro/debug_log.cc for a similar example.
void InitializeTarget() {}
 800b9b8:	b480      	push	{r7}
 800b9ba:	af00      	add	r7, sp, #0
 800b9bc:	bf00      	nop
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c4:	4770      	bx	lr
	...

0800b9c8 <_ZN6tflite11NumElementsEPKii>:
inline int NumIntermediates(const TfLiteNode* node) {
  return node->intermediates->size;
}
#endif  // TF_LITE_STATIC_MEMORY

inline int64_t NumElements(const int* dims, int num_dims) {
 800b9c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b9cc:	b088      	sub	sp, #32
 800b9ce:	af00      	add	r7, sp, #0
 800b9d0:	60f8      	str	r0, [r7, #12]
 800b9d2:	60b9      	str	r1, [r7, #8]
  int64_t count = 1;
 800b9d4:	f04f 0201 	mov.w	r2, #1
 800b9d8:	f04f 0300 	mov.w	r3, #0
 800b9dc:	e9c7 2306 	strd	r2, r3, [r7, #24]
  for (int i = 0; i < num_dims; ++i) {
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	617b      	str	r3, [r7, #20]
 800b9e4:	e045      	b.n	800ba72 <_ZN6tflite11NumElementsEPKii+0xaa>
#ifndef NDEBUG
    if (count <= 0) {
 800b9e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b9ea:	2a01      	cmp	r2, #1
 800b9ec:	f173 0300 	sbcs.w	r3, r3, #0
 800b9f0:	db44      	blt.n	800ba7c <_ZN6tflite11NumElementsEPKii+0xb4>
    // Check that number of elements can fit in 32 bit int. Most of tflite
    // assumes the result of `NumElements` is < MAX_INT and static or implicit
    // casts to `int32_t` without any checks. It is more meaningful to check
    // that the result fits into 32 bits than for standard overflow on 64 bit
    // type.
    TF_LITE_ASSERT(dims[i] < std::numeric_limits<int>::max() / count);
 800b9f2:	697b      	ldr	r3, [r7, #20]
 800b9f4:	009b      	lsls	r3, r3, #2
 800b9f6:	68fa      	ldr	r2, [r7, #12]
 800b9f8:	4413      	add	r3, r2
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	17da      	asrs	r2, r3, #31
 800b9fe:	469a      	mov	sl, r3
 800ba00:	4693      	mov	fp, r2
 800ba02:	f7fa fa0c 	bl	8005e1e <_ZNSt14numeric_limitsIiE3maxEv>
 800ba06:	4603      	mov	r3, r0
 800ba08:	17da      	asrs	r2, r3, #31
 800ba0a:	603b      	str	r3, [r7, #0]
 800ba0c:	607a      	str	r2, [r7, #4]
 800ba0e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ba12:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ba16:	f7f4 fe7f 	bl	8000718 <__aeabi_ldivmod>
 800ba1a:	4602      	mov	r2, r0
 800ba1c:	460b      	mov	r3, r1
 800ba1e:	4592      	cmp	sl, r2
 800ba20:	eb7b 0303 	sbcs.w	r3, fp, r3
 800ba24:	bfac      	ite	ge
 800ba26:	2301      	movge	r3, #1
 800ba28:	2300      	movlt	r3, #0
 800ba2a:	b2db      	uxtb	r3, r3
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d005      	beq.n	800ba3c <_ZN6tflite11NumElementsEPKii+0x74>
 800ba30:	4917      	ldr	r1, [pc, #92]	; (800ba90 <_ZN6tflite11NumElementsEPKii+0xc8>)
 800ba32:	4818      	ldr	r0, [pc, #96]	; (800ba94 <_ZN6tflite11NumElementsEPKii+0xcc>)
 800ba34:	f7ff feec 	bl	800b810 <_Z11MicroPrintfPKcz>
 800ba38:	f014 f812 	bl	801fa60 <abort>
#endif
    count *= dims[i];
 800ba3c:	697b      	ldr	r3, [r7, #20]
 800ba3e:	009b      	lsls	r3, r3, #2
 800ba40:	68fa      	ldr	r2, [r7, #12]
 800ba42:	4413      	add	r3, r2
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	17da      	asrs	r2, r3, #31
 800ba48:	4698      	mov	r8, r3
 800ba4a:	4691      	mov	r9, r2
 800ba4c:	69fb      	ldr	r3, [r7, #28]
 800ba4e:	fb08 f203 	mul.w	r2, r8, r3
 800ba52:	69bb      	ldr	r3, [r7, #24]
 800ba54:	fb09 f303 	mul.w	r3, r9, r3
 800ba58:	4413      	add	r3, r2
 800ba5a:	69ba      	ldr	r2, [r7, #24]
 800ba5c:	fba2 4508 	umull	r4, r5, r2, r8
 800ba60:	442b      	add	r3, r5
 800ba62:	461d      	mov	r5, r3
 800ba64:	e9c7 4506 	strd	r4, r5, [r7, #24]
 800ba68:	e9c7 4506 	strd	r4, r5, [r7, #24]
  for (int i = 0; i < num_dims; ++i) {
 800ba6c:	697b      	ldr	r3, [r7, #20]
 800ba6e:	3301      	adds	r3, #1
 800ba70:	617b      	str	r3, [r7, #20]
 800ba72:	697a      	ldr	r2, [r7, #20]
 800ba74:	68bb      	ldr	r3, [r7, #8]
 800ba76:	429a      	cmp	r2, r3
 800ba78:	dbb5      	blt.n	800b9e6 <_ZN6tflite11NumElementsEPKii+0x1e>
 800ba7a:	e000      	b.n	800ba7e <_ZN6tflite11NumElementsEPKii+0xb6>
      break;
 800ba7c:	bf00      	nop
  }
  return count;
 800ba7e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 800ba82:	4610      	mov	r0, r2
 800ba84:	4619      	mov	r1, r3
 800ba86:	3720      	adds	r7, #32
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ba8e:	bf00      	nop
 800ba90:	08025ef8 	.word	0x08025ef8
 800ba94:	08025f2c 	.word	0x08025f2c

0800ba98 <_ZN6tflite11NumElementsEPK14TfLiteIntArray>:

inline int64_t NumElements(const TfLiteIntArray* dims) {
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b082      	sub	sp, #8
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
  return NumElements(dims->data, dims->size);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	1d1a      	adds	r2, r3, #4
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	4619      	mov	r1, r3
 800baaa:	4610      	mov	r0, r2
 800baac:	f7ff ff8c 	bl	800b9c8 <_ZN6tflite11NumElementsEPKii>
 800bab0:	4602      	mov	r2, r0
 800bab2:	460b      	mov	r3, r1
}
 800bab4:	4610      	mov	r0, r2
 800bab6:	4619      	mov	r1, r3
 800bab8:	3708      	adds	r7, #8
 800baba:	46bd      	mov	sp, r7
 800babc:	bd80      	pop	{r7, pc}

0800babe <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 800babe:	b580      	push	{r7, lr}
 800bac0:	b082      	sub	sp, #8
 800bac2:	af00      	add	r7, sp, #0
 800bac4:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d101      	bne.n	800bad0 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor+0x12>
 800bacc:	f013 ffc8 	bl	801fa60 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
}
 800bad4:	4618      	mov	r0, r3
 800bad6:	3708      	adds	r7, #8
 800bad8:	46bd      	mov	sp, r7
 800bada:	bd80      	pop	{r7, pc}

0800badc <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 800badc:	b580      	push	{r7, lr}
 800bade:	b082      	sub	sp, #8
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d101      	bne.n	800baee <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor+0x12>
 800baea:	f013 ffb9 	bl	801fa60 <abort>
  return reinterpret_cast<T*>(tensor->data.raw);
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
}
 800baf2:	4618      	mov	r0, r3
 800baf4:	3708      	adds	r7, #8
 800baf6:	46bd      	mov	sp, r7
 800baf8:	bd80      	pop	{r7, pc}

0800bafa <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>:
inline T ActivationFunctionWithMinMax(T x, T output_activation_min,
 800bafa:	b580      	push	{r7, lr}
 800bafc:	b084      	sub	sp, #16
 800bafe:	af00      	add	r7, sp, #0
 800bb00:	ed87 0a03 	vstr	s0, [r7, #12]
 800bb04:	edc7 0a02 	vstr	s1, [r7, #8]
 800bb08:	ed87 1a01 	vstr	s2, [r7, #4]
  return min(max(x, output_activation_min), output_activation_max);
 800bb0c:	f107 0208 	add.w	r2, r7, #8
 800bb10:	f107 030c 	add.w	r3, r7, #12
 800bb14:	4611      	mov	r1, r2
 800bb16:	4618      	mov	r0, r3
 800bb18:	f7fa f93f 	bl	8005d9a <_ZSt3maxIfERKT_S2_S2_>
 800bb1c:	4602      	mov	r2, r0
 800bb1e:	1d3b      	adds	r3, r7, #4
 800bb20:	4619      	mov	r1, r3
 800bb22:	4610      	mov	r0, r2
 800bb24:	f7fa f952 	bl	8005dcc <_ZSt3minIfERKT_S2_S2_>
 800bb28:	4603      	mov	r3, r0
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	ee07 3a90 	vmov	s15, r3
}
 800bb30:	eeb0 0a67 	vmov.f32	s0, s15
 800bb34:	3710      	adds	r7, #16
 800bb36:	46bd      	mov	sp, r7
 800bb38:	bd80      	pop	{r7, pc}
	...

0800bb3c <_ZNSt14numeric_limitsIfE3maxEv>:

      static _GLIBCXX_CONSTEXPR float
      min() _GLIBCXX_USE_NOEXCEPT { return __FLT_MIN__; }

      static _GLIBCXX_CONSTEXPR float
      max() _GLIBCXX_USE_NOEXCEPT { return __FLT_MAX__; }
 800bb3c:	b480      	push	{r7}
 800bb3e:	af00      	add	r7, sp, #0
 800bb40:	4b04      	ldr	r3, [pc, #16]	; (800bb54 <_ZNSt14numeric_limitsIfE3maxEv+0x18>)
 800bb42:	ee07 3a90 	vmov	s15, r3
 800bb46:	eeb0 0a67 	vmov.f32	s0, s15
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb50:	4770      	bx	lr
 800bb52:	bf00      	nop
 800bb54:	7f7fffff 	.word	0x7f7fffff

0800bb58 <_ZNSt14numeric_limitsIfE6lowestEv>:

#if __cplusplus >= 201103L
      static constexpr float
      lowest() noexcept { return -__FLT_MAX__; }
 800bb58:	b480      	push	{r7}
 800bb5a:	af00      	add	r7, sp, #0
 800bb5c:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 800bb60:	ee07 3a90 	vmov	s15, r3
 800bb64:	eeb0 0a67 	vmov.f32	s0, s15
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6e:	4770      	bx	lr

0800bb70 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>:
                                               int32_t* act_max);

// Calculates the useful range of an activation layer given its activation
// tensor.a
template <typename T>
void CalculateActivationRange(TfLiteFusedActivation activation,
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b084      	sub	sp, #16
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	4603      	mov	r3, r0
 800bb78:	60b9      	str	r1, [r7, #8]
 800bb7a:	607a      	str	r2, [r7, #4]
 800bb7c:	73fb      	strb	r3, [r7, #15]
                              T* activation_min, T* activation_max) {
  if (activation == kTfLiteActRelu) {
 800bb7e:	7bfb      	ldrb	r3, [r7, #15]
 800bb80:	2b01      	cmp	r3, #1
 800bb82:	d10b      	bne.n	800bb9c <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x2c>
    *activation_min = 0;
 800bb84:	68bb      	ldr	r3, [r7, #8]
 800bb86:	f04f 0200 	mov.w	r2, #0
 800bb8a:	601a      	str	r2, [r3, #0]
    *activation_max = std::numeric_limits<T>::max();
 800bb8c:	f7ff ffd6 	bl	800bb3c <_ZNSt14numeric_limitsIfE3maxEv>
 800bb90:	eef0 7a40 	vmov.f32	s15, s0
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = 1;
  } else {
    *activation_min = std::numeric_limits<T>::lowest();
    *activation_max = std::numeric_limits<T>::max();
  }
}
 800bb9a:	e023      	b.n	800bbe4 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActRelu6) {
 800bb9c:	7bfb      	ldrb	r3, [r7, #15]
 800bb9e:	2b03      	cmp	r3, #3
 800bba0:	d107      	bne.n	800bbb2 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x42>
    *activation_min = 0;
 800bba2:	68bb      	ldr	r3, [r7, #8]
 800bba4:	f04f 0200 	mov.w	r2, #0
 800bba8:	601a      	str	r2, [r3, #0]
    *activation_max = 6;
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	4a0f      	ldr	r2, [pc, #60]	; (800bbec <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x7c>)
 800bbae:	601a      	str	r2, [r3, #0]
}
 800bbb0:	e018      	b.n	800bbe4 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActReluN1To1) {
 800bbb2:	7bfb      	ldrb	r3, [r7, #15]
 800bbb4:	2b02      	cmp	r3, #2
 800bbb6:	d107      	bne.n	800bbc8 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x58>
    *activation_min = -1;
 800bbb8:	68bb      	ldr	r3, [r7, #8]
 800bbba:	4a0d      	ldr	r2, [pc, #52]	; (800bbf0 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x80>)
 800bbbc:	601a      	str	r2, [r3, #0]
    *activation_max = 1;
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800bbc4:	601a      	str	r2, [r3, #0]
}
 800bbc6:	e00d      	b.n	800bbe4 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
    *activation_min = std::numeric_limits<T>::lowest();
 800bbc8:	f7ff ffc6 	bl	800bb58 <_ZNSt14numeric_limitsIfE6lowestEv>
 800bbcc:	eef0 7a40 	vmov.f32	s15, s0
 800bbd0:	68bb      	ldr	r3, [r7, #8]
 800bbd2:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = std::numeric_limits<T>::max();
 800bbd6:	f7ff ffb1 	bl	800bb3c <_ZNSt14numeric_limitsIfE3maxEv>
 800bbda:	eef0 7a40 	vmov.f32	s15, s0
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	edc3 7a00 	vstr	s15, [r3]
}
 800bbe4:	bf00      	nop
 800bbe6:	3710      	adds	r7, #16
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	bd80      	pop	{r7, pc}
 800bbec:	40c00000 	.word	0x40c00000
 800bbf0:	bf800000 	.word	0xbf800000

0800bbf4 <_ZN6tflite11NumElementsEPK12TfLiteTensor>:
inline int64_t NumElements(const TfLiteTensor* t) {
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b082      	sub	sp, #8
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
  return NumElements(t->dims);
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	695b      	ldr	r3, [r3, #20]
 800bc00:	4618      	mov	r0, r3
 800bc02:	f7ff ff49 	bl	800ba98 <_ZN6tflite11NumElementsEPK14TfLiteIntArray>
 800bc06:	4602      	mov	r2, r0
 800bc08:	460b      	mov	r3, r1
}
 800bc0a:	4610      	mov	r0, r2
 800bc0c:	4619      	mov	r1, r3
 800bc0e:	3708      	adds	r7, #8
 800bc10:	46bd      	mov	sp, r7
 800bc12:	bd80      	pop	{r7, pc}

0800bc14 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>:
// Since tensors with '0' in their shape are valid in TF, these offset functions
// allow that as long as the corresponding index is also 0. It is upto the
// calling ops to ensure that they perform verification checks on tensor shapes
// if they don't support a particular behavior.

inline int Offset(const RuntimeShape& shape, int i0, int i1, int i2, int i3) {
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b086      	sub	sp, #24
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	60f8      	str	r0, [r7, #12]
 800bc1c:	60b9      	str	r1, [r7, #8]
 800bc1e:	607a      	str	r2, [r7, #4]
 800bc20:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
 800bc22:	68f8      	ldr	r0, [r7, #12]
 800bc24:	f7f6 fdfc 	bl	8002820 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800bc28:	4603      	mov	r3, r0
 800bc2a:	2b04      	cmp	r3, #4
 800bc2c:	d001      	beq.n	800bc32 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x1e>
 800bc2e:	f013 ff17 	bl	801fa60 <abort>
  const int* dims_data = reinterpret_cast<const int*>(shape.DimsData());
 800bc32:	68f8      	ldr	r0, [r7, #12]
 800bc34:	f7f6 fe1a 	bl	800286c <_ZNK6tflite12RuntimeShape8DimsDataEv>
 800bc38:	6178      	str	r0, [r7, #20]
  TFLITE_DCHECK((dims_data[0] == 0 && i0 == 0) ||
 800bc3a:	697b      	ldr	r3, [r7, #20]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d102      	bne.n	800bc48 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x34>
 800bc42:	68bb      	ldr	r3, [r7, #8]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d009      	beq.n	800bc5c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x48>
 800bc48:	68bb      	ldr	r3, [r7, #8]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	db04      	blt.n	800bc58 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x44>
 800bc4e:	697b      	ldr	r3, [r7, #20]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	68ba      	ldr	r2, [r7, #8]
 800bc54:	429a      	cmp	r2, r3
 800bc56:	db01      	blt.n	800bc5c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x48>
 800bc58:	f013 ff02 	bl	801fa60 <abort>
                (i0 >= 0 && i0 < dims_data[0]));
  TFLITE_DCHECK((dims_data[1] == 0 && i1 == 0) ||
 800bc5c:	697b      	ldr	r3, [r7, #20]
 800bc5e:	3304      	adds	r3, #4
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d102      	bne.n	800bc6c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x58>
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d00a      	beq.n	800bc82 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x6e>
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	db05      	blt.n	800bc7e <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x6a>
 800bc72:	697b      	ldr	r3, [r7, #20]
 800bc74:	3304      	adds	r3, #4
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	687a      	ldr	r2, [r7, #4]
 800bc7a:	429a      	cmp	r2, r3
 800bc7c:	db01      	blt.n	800bc82 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x6e>
 800bc7e:	f013 feef 	bl	801fa60 <abort>
                (i1 >= 0 && i1 < dims_data[1]));
  TFLITE_DCHECK((dims_data[2] == 0 && i2 == 0) ||
 800bc82:	697b      	ldr	r3, [r7, #20]
 800bc84:	3308      	adds	r3, #8
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d102      	bne.n	800bc92 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x7e>
 800bc8c:	683b      	ldr	r3, [r7, #0]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d00a      	beq.n	800bca8 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x94>
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	db05      	blt.n	800bca4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x90>
 800bc98:	697b      	ldr	r3, [r7, #20]
 800bc9a:	3308      	adds	r3, #8
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	683a      	ldr	r2, [r7, #0]
 800bca0:	429a      	cmp	r2, r3
 800bca2:	db01      	blt.n	800bca8 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x94>
 800bca4:	f013 fedc 	bl	801fa60 <abort>
                (i2 >= 0 && i2 < dims_data[2]));
  TFLITE_DCHECK((dims_data[3] == 0 && i3 == 0) ||
 800bca8:	697b      	ldr	r3, [r7, #20]
 800bcaa:	330c      	adds	r3, #12
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d102      	bne.n	800bcb8 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa4>
 800bcb2:	6a3b      	ldr	r3, [r7, #32]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d00a      	beq.n	800bcce <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xba>
 800bcb8:	6a3b      	ldr	r3, [r7, #32]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	db05      	blt.n	800bcca <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xb6>
 800bcbe:	697b      	ldr	r3, [r7, #20]
 800bcc0:	330c      	adds	r3, #12
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	6a3a      	ldr	r2, [r7, #32]
 800bcc6:	429a      	cmp	r2, r3
 800bcc8:	db01      	blt.n	800bcce <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xba>
 800bcca:	f013 fec9 	bl	801fa60 <abort>
                (i3 >= 0 && i3 < dims_data[3]));
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
 800bcce:	697b      	ldr	r3, [r7, #20]
 800bcd0:	3304      	adds	r3, #4
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	68ba      	ldr	r2, [r7, #8]
 800bcd6:	fb03 f202 	mul.w	r2, r3, r2
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	4413      	add	r3, r2
 800bcde:	697a      	ldr	r2, [r7, #20]
 800bce0:	3208      	adds	r2, #8
 800bce2:	6812      	ldr	r2, [r2, #0]
 800bce4:	fb03 f202 	mul.w	r2, r3, r2
 800bce8:	683b      	ldr	r3, [r7, #0]
 800bcea:	4413      	add	r3, r2
 800bcec:	697a      	ldr	r2, [r7, #20]
 800bcee:	320c      	adds	r2, #12
 800bcf0:	6812      	ldr	r2, [r2, #0]
 800bcf2:	fb03 f202 	mul.w	r2, r3, r2
 800bcf6:	6a3b      	ldr	r3, [r7, #32]
 800bcf8:	4413      	add	r3, r2
}
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	3718      	adds	r7, #24
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	bd80      	pop	{r7, pc}

0800bd02 <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>:
inline int SizeOfDimension(const TfLiteTensor* t, int dim) {
 800bd02:	b480      	push	{r7}
 800bd04:	b083      	sub	sp, #12
 800bd06:	af00      	add	r7, sp, #0
 800bd08:	6078      	str	r0, [r7, #4]
 800bd0a:	6039      	str	r1, [r7, #0]
  return t->dims->data[dim];
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	695a      	ldr	r2, [r3, #20]
 800bd10:	683b      	ldr	r3, [r7, #0]
 800bd12:	009b      	lsls	r3, r3, #2
 800bd14:	4413      	add	r3, r2
 800bd16:	685b      	ldr	r3, [r3, #4]
}
 800bd18:	4618      	mov	r0, r3
 800bd1a:	370c      	adds	r7, #12
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd22:	4770      	bx	lr

0800bd24 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>:
  return MatchingArraySize(array1, index1, args...);
}

// Get common shape dim, DCHECKing that they all agree.
inline int MatchingDim(const RuntimeShape& shape1, int index1,
                       const RuntimeShape& shape2, int index2) {
 800bd24:	b590      	push	{r4, r7, lr}
 800bd26:	b087      	sub	sp, #28
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	60f8      	str	r0, [r7, #12]
 800bd2c:	60b9      	str	r1, [r7, #8]
 800bd2e:	607a      	str	r2, [r7, #4]
 800bd30:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 800bd32:	68b9      	ldr	r1, [r7, #8]
 800bd34:	68f8      	ldr	r0, [r7, #12]
 800bd36:	f7f6 fd7f 	bl	8002838 <_ZNK6tflite12RuntimeShape4DimsEi>
 800bd3a:	4604      	mov	r4, r0
 800bd3c:	6839      	ldr	r1, [r7, #0]
 800bd3e:	6878      	ldr	r0, [r7, #4]
 800bd40:	f7f6 fd7a 	bl	8002838 <_ZNK6tflite12RuntimeShape4DimsEi>
 800bd44:	4603      	mov	r3, r0
 800bd46:	429c      	cmp	r4, r3
 800bd48:	d001      	beq.n	800bd4e <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i+0x2a>
 800bd4a:	f013 fe89 	bl	801fa60 <abort>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
 800bd4e:	68b9      	ldr	r1, [r7, #8]
 800bd50:	68f8      	ldr	r0, [r7, #12]
 800bd52:	f7f6 fd71 	bl	8002838 <_ZNK6tflite12RuntimeShape4DimsEi>
 800bd56:	4603      	mov	r3, r0
 800bd58:	613b      	str	r3, [r7, #16]
 800bd5a:	6839      	ldr	r1, [r7, #0]
 800bd5c:	6878      	ldr	r0, [r7, #4]
 800bd5e:	f7f6 fd6b 	bl	8002838 <_ZNK6tflite12RuntimeShape4DimsEi>
 800bd62:	4603      	mov	r3, r0
 800bd64:	617b      	str	r3, [r7, #20]
 800bd66:	f107 0214 	add.w	r2, r7, #20
 800bd6a:	f107 0310 	add.w	r3, r7, #16
 800bd6e:	4611      	mov	r1, r2
 800bd70:	4618      	mov	r0, r3
 800bd72:	f7fa fa86 	bl	8006282 <_ZSt3minIlERKT_S2_S2_>
 800bd76:	4603      	mov	r3, r0
 800bd78:	681b      	ldr	r3, [r3, #0]
}
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	371c      	adds	r7, #28
 800bd7e:	46bd      	mov	sp, r7
 800bd80:	bd90      	pop	{r4, r7, pc}

0800bd82 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_>:
inline void Conv(const ConvParams& params, const RuntimeShape& input_shape,
                 const float* input_data, const RuntimeShape& filter_shape,
                 const float* filter_data, const RuntimeShape& bias_shape,
                 const float* bias_data, const RuntimeShape& output_shape,
                 float* output_data, const RuntimeShape& im2col_shape,
                 float* im2col_data) {
 800bd82:	b590      	push	{r4, r7, lr}
 800bd84:	ed2d 8b02 	vpush	{d8}
 800bd88:	b0ad      	sub	sp, #180	; 0xb4
 800bd8a:	af02      	add	r7, sp, #8
 800bd8c:	60f8      	str	r0, [r7, #12]
 800bd8e:	60b9      	str	r1, [r7, #8]
 800bd90:	607a      	str	r2, [r7, #4]
 800bd92:	603b      	str	r3, [r7, #0]
  const int stride_width = params.stride_width;
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800bd9a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  const int stride_height = params.stride_height;
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800bda4:	67fb      	str	r3, [r7, #124]	; 0x7c
  const int dilation_width_factor = params.dilation_width_factor;
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800bdac:	67bb      	str	r3, [r7, #120]	; 0x78
  const int dilation_height_factor = params.dilation_height_factor;
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800bdb4:	677b      	str	r3, [r7, #116]	; 0x74
  const int pad_width = params.padding_values.width;
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bdbc:	673b      	str	r3, [r7, #112]	; 0x70
  const int pad_height = params.padding_values.height;
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800bdc4:	66fb      	str	r3, [r7, #108]	; 0x6c
  const float output_activation_min = params.float_activation_min;
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdca:	66bb      	str	r3, [r7, #104]	; 0x68
  const float output_activation_max = params.float_activation_max;
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdd0:	667b      	str	r3, [r7, #100]	; 0x64
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 800bdd2:	68b8      	ldr	r0, [r7, #8]
 800bdd4:	f7f6 fd24 	bl	8002820 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800bdd8:	4603      	mov	r3, r0
 800bdda:	2b04      	cmp	r3, #4
 800bddc:	d001      	beq.n	800bde2 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x60>
 800bdde:	f013 fe3f 	bl	801fa60 <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 800bde2:	6838      	ldr	r0, [r7, #0]
 800bde4:	f7f6 fd1c 	bl	8002820 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800bde8:	4603      	mov	r3, r0
 800bdea:	2b04      	cmp	r3, #4
 800bdec:	d001      	beq.n	800bdf2 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x70>
 800bdee:	f013 fe37 	bl	801fa60 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 800bdf2:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 800bdf6:	f7f6 fd13 	bl	8002820 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800bdfa:	4603      	mov	r3, r0
 800bdfc:	2b04      	cmp	r3, #4
 800bdfe:	d001      	beq.n	800be04 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x82>
 800be00:	f013 fe2e 	bl	801fa60 <abort>

  (void)im2col_data;   // only used in optimized code.
  (void)im2col_shape;  // only used in optimized code.
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 800be04:	2300      	movs	r3, #0
 800be06:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800be0a:	2100      	movs	r1, #0
 800be0c:	68b8      	ldr	r0, [r7, #8]
 800be0e:	f7ff ff89 	bl	800bd24 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800be12:	6638      	str	r0, [r7, #96]	; 0x60
  const int input_depth = input_shape.Dims(3);
 800be14:	2103      	movs	r1, #3
 800be16:	68b8      	ldr	r0, [r7, #8]
 800be18:	f7f6 fd0e 	bl	8002838 <_ZNK6tflite12RuntimeShape4DimsEi>
 800be1c:	65f8      	str	r0, [r7, #92]	; 0x5c
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
 800be1e:	2303      	movs	r3, #3
 800be20:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800be24:	2100      	movs	r1, #0
 800be26:	6838      	ldr	r0, [r7, #0]
 800be28:	f7ff ff7c 	bl	800bd24 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800be2c:	65b8      	str	r0, [r7, #88]	; 0x58
  if (bias_data) {
 800be2e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800be32:	2b00      	cmp	r3, #0
 800be34:	d009      	beq.n	800be4a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xc8>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 800be36:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800be3a:	f7f6 fd23 	bl	8002884 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 800be3e:	4602      	mov	r2, r0
 800be40:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800be42:	4293      	cmp	r3, r2
 800be44:	d001      	beq.n	800be4a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xc8>
 800be46:	f013 fe0b 	bl	801fa60 <abort>
  }
  const int input_height = input_shape.Dims(1);
 800be4a:	2101      	movs	r1, #1
 800be4c:	68b8      	ldr	r0, [r7, #8]
 800be4e:	f7f6 fcf3 	bl	8002838 <_ZNK6tflite12RuntimeShape4DimsEi>
 800be52:	6578      	str	r0, [r7, #84]	; 0x54
  const int input_width = input_shape.Dims(2);
 800be54:	2102      	movs	r1, #2
 800be56:	68b8      	ldr	r0, [r7, #8]
 800be58:	f7f6 fcee 	bl	8002838 <_ZNK6tflite12RuntimeShape4DimsEi>
 800be5c:	6538      	str	r0, [r7, #80]	; 0x50
  const int filter_height = filter_shape.Dims(1);
 800be5e:	2101      	movs	r1, #1
 800be60:	6838      	ldr	r0, [r7, #0]
 800be62:	f7f6 fce9 	bl	8002838 <_ZNK6tflite12RuntimeShape4DimsEi>
 800be66:	64f8      	str	r0, [r7, #76]	; 0x4c
  const int filter_width = filter_shape.Dims(2);
 800be68:	2102      	movs	r1, #2
 800be6a:	6838      	ldr	r0, [r7, #0]
 800be6c:	f7f6 fce4 	bl	8002838 <_ZNK6tflite12RuntimeShape4DimsEi>
 800be70:	64b8      	str	r0, [r7, #72]	; 0x48
  const int filter_input_depth = filter_shape.Dims(3);
 800be72:	2103      	movs	r1, #3
 800be74:	6838      	ldr	r0, [r7, #0]
 800be76:	f7f6 fcdf 	bl	8002838 <_ZNK6tflite12RuntimeShape4DimsEi>
 800be7a:	6478      	str	r0, [r7, #68]	; 0x44
  const int groups = input_depth / filter_input_depth;
 800be7c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800be7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be80:	fb92 f3f3 	sdiv	r3, r2, r3
 800be84:	643b      	str	r3, [r7, #64]	; 0x40
  TFLITE_DCHECK_NE(groups, 0);
 800be86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d101      	bne.n	800be90 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x10e>
 800be8c:	f013 fde8 	bl	801fa60 <abort>
  TFLITE_DCHECK_EQ(input_depth % filter_input_depth, 0);
 800be90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800be94:	fb93 f2f2 	sdiv	r2, r3, r2
 800be98:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800be9a:	fb01 f202 	mul.w	r2, r1, r2
 800be9e:	1a9b      	subs	r3, r3, r2
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d001      	beq.n	800bea8 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x126>
 800bea4:	f013 fddc 	bl	801fa60 <abort>
  const int filters_per_group = output_depth / groups;
 800bea8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800beaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800beac:	fb92 f3f3 	sdiv	r3, r2, r3
 800beb0:	63fb      	str	r3, [r7, #60]	; 0x3c
  TFLITE_DCHECK_NE(filters_per_group, 0);
 800beb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d101      	bne.n	800bebc <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x13a>
 800beb8:	f013 fdd2 	bl	801fa60 <abort>
  const int output_height = output_shape.Dims(1);
 800bebc:	2101      	movs	r1, #1
 800bebe:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 800bec2:	f7f6 fcb9 	bl	8002838 <_ZNK6tflite12RuntimeShape4DimsEi>
 800bec6:	63b8      	str	r0, [r7, #56]	; 0x38
  const int output_width = output_shape.Dims(2);
 800bec8:	2102      	movs	r1, #2
 800beca:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 800bece:	f7f6 fcb3 	bl	8002838 <_ZNK6tflite12RuntimeShape4DimsEi>
 800bed2:	6378      	str	r0, [r7, #52]	; 0x34

  for (int batch = 0; batch < batches; ++batch) {
 800bed4:	2300      	movs	r3, #0
 800bed6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800beda:	e10a      	b.n	800c0f2 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x370>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 800bedc:	2300      	movs	r3, #0
 800bede:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800bee2:	e0fb      	b.n	800c0dc <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x35a>
      const int in_y_origin = (out_y * stride_height) - pad_height;
 800bee4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bee8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800beea:	fb03 f202 	mul.w	r2, r3, r2
 800beee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bef0:	1ad3      	subs	r3, r2, r3
 800bef2:	633b      	str	r3, [r7, #48]	; 0x30
      for (int out_x = 0; out_x < output_width; ++out_x) {
 800bef4:	2300      	movs	r3, #0
 800bef6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800befa:	e0e4      	b.n	800c0c6 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x344>
        const int in_x_origin = (out_x * stride_width) - pad_width;
 800befc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bf00:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bf04:	fb03 f202 	mul.w	r2, r3, r2
 800bf08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bf0a:	1ad3      	subs	r3, r2, r3
 800bf0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 800bf0e:	2300      	movs	r3, #0
 800bf10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bf14:	e0cc      	b.n	800c0b0 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x32e>
          auto group = out_channel / filters_per_group;
 800bf16:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800bf1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf1c:	fb92 f3f3 	sdiv	r3, r2, r3
 800bf20:	62bb      	str	r3, [r7, #40]	; 0x28
          float total = 0.f;
 800bf22:	f04f 0300 	mov.w	r3, #0
 800bf26:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bf30:	e07e      	b.n	800c030 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2ae>
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
 800bf32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bf34:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800bf38:	fb02 f303 	mul.w	r3, r2, r3
 800bf3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf3e:	4413      	add	r3, r2
 800bf40:	627b      	str	r3, [r7, #36]	; 0x24
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 800bf42:	2300      	movs	r3, #0
 800bf44:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800bf48:	e068      	b.n	800c01c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x29a>
              const int in_x = in_x_origin + dilation_width_factor * filter_x;
 800bf4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bf4c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800bf50:	fb02 f303 	mul.w	r3, r2, r3
 800bf54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf56:	4413      	add	r3, r2
 800bf58:	623b      	str	r3, [r7, #32]

              // Zero padding by omitting the areas outside the image.
              const bool is_point_inside_image =
                  (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
 800bf5a:	6a3b      	ldr	r3, [r7, #32]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	db0c      	blt.n	800bf7a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1f8>
 800bf60:	6a3a      	ldr	r2, [r7, #32]
 800bf62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf64:	429a      	cmp	r2, r3
 800bf66:	da08      	bge.n	800bf7a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1f8>
 800bf68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	db05      	blt.n	800bf7a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1f8>
 800bf6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf72:	429a      	cmp	r2, r3
 800bf74:	da01      	bge.n	800bf7a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1f8>
 800bf76:	2301      	movs	r3, #1
 800bf78:	e000      	b.n	800bf7c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1fa>
 800bf7a:	2300      	movs	r3, #0
              const bool is_point_inside_image =
 800bf7c:	77fb      	strb	r3, [r7, #31]
                  (in_y < input_height);

              if (!is_point_inside_image) {
 800bf7e:	7ffb      	ldrb	r3, [r7, #31]
 800bf80:	f083 0301 	eor.w	r3, r3, #1
 800bf84:	b2db      	uxtb	r3, r3
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d142      	bne.n	800c010 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x28e>
                continue;
              }
              for (int in_channel = 0; in_channel < filter_input_depth;
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bf90:	e038      	b.n	800c004 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x282>
                   ++in_channel) {
                float input_value =
                    input_data[Offset(input_shape, batch, in_y, in_x,
                                      in_channel + group * filter_input_depth)];
 800bf92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bf96:	fb03 f202 	mul.w	r2, r3, r2
                    input_data[Offset(input_shape, batch, in_y, in_x,
 800bf9a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bf9e:	4413      	add	r3, r2
 800bfa0:	9300      	str	r3, [sp, #0]
 800bfa2:	6a3b      	ldr	r3, [r7, #32]
 800bfa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bfa6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bfaa:	68b8      	ldr	r0, [r7, #8]
 800bfac:	f7ff fe32 	bl	800bc14 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 800bfb0:	4603      	mov	r3, r0
                                      in_channel + group * filter_input_depth)];
 800bfb2:	009b      	lsls	r3, r3, #2
 800bfb4:	687a      	ldr	r2, [r7, #4]
 800bfb6:	4413      	add	r3, r2
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	61bb      	str	r3, [r7, #24]
                float filter_value = filter_data[Offset(
 800bfbc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bfc0:	9300      	str	r3, [sp, #0]
 800bfc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bfc6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800bfca:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800bfce:	6838      	ldr	r0, [r7, #0]
 800bfd0:	f7ff fe20 	bl	800bc14 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 800bfd4:	4603      	mov	r3, r0
                    filter_shape, out_channel, filter_y, filter_x, in_channel)];
 800bfd6:	009b      	lsls	r3, r3, #2
 800bfd8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800bfdc:	4413      	add	r3, r2
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	617b      	str	r3, [r7, #20]
                total += (input_value * filter_value);
 800bfe2:	ed97 7a06 	vldr	s14, [r7, #24]
 800bfe6:	edd7 7a05 	vldr	s15, [r7, #20]
 800bfea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bfee:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800bff2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bff6:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
              for (int in_channel = 0; in_channel < filter_input_depth;
 800bffa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bffe:	3301      	adds	r3, #1
 800c000:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c004:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c008:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c00a:	429a      	cmp	r2, r3
 800c00c:	dbc1      	blt.n	800bf92 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x210>
 800c00e:	e000      	b.n	800c012 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x290>
                continue;
 800c010:	bf00      	nop
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 800c012:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c016:	3301      	adds	r3, #1
 800c018:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c01c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800c020:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c022:	429a      	cmp	r2, r3
 800c024:	db91      	blt.n	800bf4a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1c8>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 800c026:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c02a:	3301      	adds	r3, #1
 800c02c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c030:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800c034:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c036:	429a      	cmp	r2, r3
 800c038:	f6ff af7b 	blt.w	800bf32 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1b0>
              }
            }
          }
          float bias_value = 0.0f;
 800c03c:	f04f 0300 	mov.w	r3, #0
 800c040:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
          if (bias_data) {
 800c044:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d008      	beq.n	800c05e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2dc>
            bias_value = bias_data[out_channel];
 800c04c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c050:	009b      	lsls	r3, r3, #2
 800c052:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800c056:	4413      	add	r3, r2
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
          }
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
              ActivationFunctionWithMinMax(total + bias_value,
 800c05e:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800c062:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800c066:	ee37 8a27 	vadd.f32	s16, s14, s15
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
 800c06a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c06e:	9300      	str	r3, [sp, #0]
 800c070:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c074:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800c078:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c07c:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 800c080:	f7ff fdc8 	bl	800bc14 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 800c084:	4603      	mov	r3, r0
 800c086:	009b      	lsls	r3, r3, #2
 800c088:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c08c:	18d4      	adds	r4, r2, r3
              ActivationFunctionWithMinMax(total + bias_value,
 800c08e:	ed97 1a19 	vldr	s2, [r7, #100]	; 0x64
 800c092:	edd7 0a1a 	vldr	s1, [r7, #104]	; 0x68
 800c096:	eeb0 0a48 	vmov.f32	s0, s16
 800c09a:	f7ff fd2e 	bl	800bafa <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>
 800c09e:	eef0 7a40 	vmov.f32	s15, s0
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
 800c0a2:	edc4 7a00 	vstr	s15, [r4]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 800c0a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c0aa:	3301      	adds	r3, #1
 800c0ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c0b0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800c0b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c0b6:	429a      	cmp	r2, r3
 800c0b8:	f6ff af2d 	blt.w	800bf16 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x194>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 800c0bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c0c0:	3301      	adds	r3, #1
 800c0c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c0c6:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800c0ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0cc:	429a      	cmp	r2, r3
 800c0ce:	f6ff af15 	blt.w	800befc <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x17a>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 800c0d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c0d6:	3301      	adds	r3, #1
 800c0d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c0dc:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800c0e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0e2:	429a      	cmp	r2, r3
 800c0e4:	f6ff aefe 	blt.w	800bee4 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x162>
  for (int batch = 0; batch < batches; ++batch) {
 800c0e8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c0ec:	3301      	adds	r3, #1
 800c0ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c0f2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800c0f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c0f8:	429a      	cmp	r2, r3
 800c0fa:	f6ff aeef 	blt.w	800bedc <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x15a>
                                           output_activation_max);
        }
      }
    }
  }
}
 800c0fe:	bf00      	nop
 800c100:	bf00      	nop
 800c102:	37ac      	adds	r7, #172	; 0xac
 800c104:	46bd      	mov	sp, r7
 800c106:	ecbd 8b02 	vpop	{d8}
 800c10a:	bd90      	pop	{r4, r7, pc}

0800c10c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>:
    const ConvParams& params, const int32_t* output_multiplier,
    const int32_t* output_shift, const RuntimeShape& input_shape,
    const int8_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    int8_t* output_data) {
 800c10c:	b590      	push	{r4, r7, lr}
 800c10e:	b0ad      	sub	sp, #180	; 0xb4
 800c110:	af02      	add	r7, sp, #8
 800c112:	60f8      	str	r0, [r7, #12]
 800c114:	60b9      	str	r1, [r7, #8]
 800c116:	607a      	str	r2, [r7, #4]
 800c118:	603b      	str	r3, [r7, #0]
  // Get parameters.
  const int32_t input_offset = params.input_offset;  // r = s(q - Z)
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	695b      	ldr	r3, [r3, #20]
 800c11e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  const int stride_width = params.stride_width;
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800c128:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  const int stride_height = params.stride_height;
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800c132:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  const int dilation_width_factor = params.dilation_width_factor;
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800c13c:	67fb      	str	r3, [r7, #124]	; 0x7c
  const int dilation_height_factor = params.dilation_height_factor;
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800c144:	67bb      	str	r3, [r7, #120]	; 0x78
  const int pad_width = params.padding_values.width;
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c14c:	677b      	str	r3, [r7, #116]	; 0x74
  const int pad_height = params.padding_values.height;
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800c154:	673b      	str	r3, [r7, #112]	; 0x70
  const int32_t output_offset = params.output_offset;
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	69db      	ldr	r3, [r3, #28]
 800c15a:	66fb      	str	r3, [r7, #108]	; 0x6c

  // Set min and max value of the output.
  const int32_t output_activation_min = params.quantized_activation_min;
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c160:	61bb      	str	r3, [r7, #24]
  const int32_t output_activation_max = params.quantized_activation_max;
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c166:	617b      	str	r3, [r7, #20]

  // Consistency check.
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 800c168:	69ba      	ldr	r2, [r7, #24]
 800c16a:	697b      	ldr	r3, [r7, #20]
 800c16c:	429a      	cmp	r2, r3
 800c16e:	dd01      	ble.n	800c174 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x68>
 800c170:	f013 fc76 	bl	801fa60 <abort>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 800c174:	6838      	ldr	r0, [r7, #0]
 800c176:	f7f6 fb53 	bl	8002820 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800c17a:	4603      	mov	r3, r0
 800c17c:	2b04      	cmp	r3, #4
 800c17e:	d001      	beq.n	800c184 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x78>
 800c180:	f013 fc6e 	bl	801fa60 <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 800c184:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800c188:	f7f6 fb4a 	bl	8002820 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800c18c:	4603      	mov	r3, r0
 800c18e:	2b04      	cmp	r3, #4
 800c190:	d001      	beq.n	800c196 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x8a>
 800c192:	f013 fc65 	bl	801fa60 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 800c196:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 800c19a:	f7f6 fb41 	bl	8002820 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800c19e:	4603      	mov	r3, r0
 800c1a0:	2b04      	cmp	r3, #4
 800c1a2:	d001      	beq.n	800c1a8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x9c>
 800c1a4:	f013 fc5c 	bl	801fa60 <abort>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800c1ae:	2100      	movs	r1, #0
 800c1b0:	6838      	ldr	r0, [r7, #0]
 800c1b2:	f7ff fdb7 	bl	800bd24 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800c1b6:	66b8      	str	r0, [r7, #104]	; 0x68
  const int input_depth = input_shape.Dims(3);
 800c1b8:	2103      	movs	r1, #3
 800c1ba:	6838      	ldr	r0, [r7, #0]
 800c1bc:	f7f6 fb3c 	bl	8002838 <_ZNK6tflite12RuntimeShape4DimsEi>
 800c1c0:	6678      	str	r0, [r7, #100]	; 0x64
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
 800c1c2:	2303      	movs	r3, #3
 800c1c4:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800c1c8:	2100      	movs	r1, #0
 800c1ca:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800c1ce:	f7ff fda9 	bl	800bd24 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800c1d2:	6638      	str	r0, [r7, #96]	; 0x60
  if (bias_data) {
 800c1d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d009      	beq.n	800c1f0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xe4>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 800c1dc:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800c1e0:	f7f6 fb50 	bl	8002884 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 800c1e4:	4602      	mov	r2, r0
 800c1e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c1e8:	4293      	cmp	r3, r2
 800c1ea:	d001      	beq.n	800c1f0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xe4>
 800c1ec:	f013 fc38 	bl	801fa60 <abort>
  }

  // Check dimensions of the tensors.
  const int input_height = input_shape.Dims(1);
 800c1f0:	2101      	movs	r1, #1
 800c1f2:	6838      	ldr	r0, [r7, #0]
 800c1f4:	f7f6 fb20 	bl	8002838 <_ZNK6tflite12RuntimeShape4DimsEi>
 800c1f8:	65f8      	str	r0, [r7, #92]	; 0x5c
  const int input_width = input_shape.Dims(2);
 800c1fa:	2102      	movs	r1, #2
 800c1fc:	6838      	ldr	r0, [r7, #0]
 800c1fe:	f7f6 fb1b 	bl	8002838 <_ZNK6tflite12RuntimeShape4DimsEi>
 800c202:	65b8      	str	r0, [r7, #88]	; 0x58
  const int filter_height = filter_shape.Dims(1);
 800c204:	2101      	movs	r1, #1
 800c206:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800c20a:	f7f6 fb15 	bl	8002838 <_ZNK6tflite12RuntimeShape4DimsEi>
 800c20e:	6578      	str	r0, [r7, #84]	; 0x54
  const int filter_width = filter_shape.Dims(2);
 800c210:	2102      	movs	r1, #2
 800c212:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800c216:	f7f6 fb0f 	bl	8002838 <_ZNK6tflite12RuntimeShape4DimsEi>
 800c21a:	6538      	str	r0, [r7, #80]	; 0x50
  const int filter_input_depth = filter_shape.Dims(3);
 800c21c:	2103      	movs	r1, #3
 800c21e:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800c222:	f7f6 fb09 	bl	8002838 <_ZNK6tflite12RuntimeShape4DimsEi>
 800c226:	64f8      	str	r0, [r7, #76]	; 0x4c
  const int groups = input_depth / filter_input_depth;
 800c228:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c22a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c22c:	fb92 f3f3 	sdiv	r3, r2, r3
 800c230:	64bb      	str	r3, [r7, #72]	; 0x48
  TFLITE_DCHECK_NE(groups, 0);
 800c232:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c234:	2b00      	cmp	r3, #0
 800c236:	d101      	bne.n	800c23c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x130>
 800c238:	f013 fc12 	bl	801fa60 <abort>
  TFLITE_DCHECK_EQ(input_depth % filter_input_depth, 0);
 800c23c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c23e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c240:	fb93 f2f2 	sdiv	r2, r3, r2
 800c244:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c246:	fb01 f202 	mul.w	r2, r1, r2
 800c24a:	1a9b      	subs	r3, r3, r2
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d001      	beq.n	800c254 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x148>
 800c250:	f013 fc06 	bl	801fa60 <abort>
  const int filters_per_group = output_depth / groups;
 800c254:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c256:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c258:	fb92 f3f3 	sdiv	r3, r2, r3
 800c25c:	647b      	str	r3, [r7, #68]	; 0x44
  TFLITE_DCHECK_NE(filters_per_group, 0);
 800c25e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c260:	2b00      	cmp	r3, #0
 800c262:	d101      	bne.n	800c268 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x15c>
 800c264:	f013 fbfc 	bl	801fa60 <abort>
  const int output_height = output_shape.Dims(1);
 800c268:	2101      	movs	r1, #1
 800c26a:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 800c26e:	f7f6 fae3 	bl	8002838 <_ZNK6tflite12RuntimeShape4DimsEi>
 800c272:	6438      	str	r0, [r7, #64]	; 0x40
  const int output_width = output_shape.Dims(2);
 800c274:	2102      	movs	r1, #2
 800c276:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 800c27a:	f7f6 fadd 	bl	8002838 <_ZNK6tflite12RuntimeShape4DimsEi>
 800c27e:	63f8      	str	r0, [r7, #60]	; 0x3c
  for (int batch = 0; batch < batches; ++batch) {
 800c280:	2300      	movs	r3, #0
 800c282:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c286:	e127      	b.n	800c4d8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x3cc>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 800c288:	2300      	movs	r3, #0
 800c28a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c28e:	e118      	b.n	800c4c2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x3b6>
      const int in_y_origin = (out_y * stride_height) - pad_height;
 800c290:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c294:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c298:	fb03 f202 	mul.w	r2, r3, r2
 800c29c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c29e:	1ad3      	subs	r3, r2, r3
 800c2a0:	63bb      	str	r3, [r7, #56]	; 0x38
      for (int out_x = 0; out_x < output_width; ++out_x) {
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c2a8:	e100      	b.n	800c4ac <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x3a0>
        const int in_x_origin = (out_x * stride_width) - pad_width;
 800c2aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c2ae:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c2b2:	fb03 f202 	mul.w	r2, r3, r2
 800c2b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c2b8:	1ad3      	subs	r3, r2, r3
 800c2ba:	637b      	str	r3, [r7, #52]	; 0x34
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 800c2bc:	2300      	movs	r3, #0
 800c2be:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c2c2:	e0e8      	b.n	800c496 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x38a>
          auto group = out_channel / filters_per_group;
 800c2c4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800c2c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c2ca:	fb92 f3f3 	sdiv	r3, r2, r3
 800c2ce:	633b      	str	r3, [r7, #48]	; 0x30
          int32_t acc = 0;
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	613b      	str	r3, [r7, #16]
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c2da:	e082      	b.n	800c3e2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2d6>
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
 800c2dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c2de:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c2e2:	fb02 f303 	mul.w	r3, r2, r3
 800c2e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c2e8:	4413      	add	r3, r2
 800c2ea:	62fb      	str	r3, [r7, #44]	; 0x2c
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c2f2:	e06c      	b.n	800c3ce <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2c2>
              const int in_x = in_x_origin + dilation_width_factor * filter_x;
 800c2f4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c2f6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800c2fa:	fb02 f303 	mul.w	r3, r2, r3
 800c2fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c300:	4413      	add	r3, r2
 800c302:	62bb      	str	r3, [r7, #40]	; 0x28

              // Zero padding by omitting the areas outside the image.
              const bool is_point_inside_image =
                  (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
 800c304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c306:	2b00      	cmp	r3, #0
 800c308:	db0c      	blt.n	800c324 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x218>
 800c30a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c30c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c30e:	429a      	cmp	r2, r3
 800c310:	da08      	bge.n	800c324 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x218>
 800c312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c314:	2b00      	cmp	r3, #0
 800c316:	db05      	blt.n	800c324 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x218>
 800c318:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c31a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c31c:	429a      	cmp	r2, r3
 800c31e:	da01      	bge.n	800c324 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x218>
 800c320:	2301      	movs	r3, #1
 800c322:	e000      	b.n	800c326 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x21a>
 800c324:	2300      	movs	r3, #0
              const bool is_point_inside_image =
 800c326:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                  (in_y < input_height);

              if (!is_point_inside_image) {
 800c32a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c32e:	f083 0301 	eor.w	r3, r3, #1
 800c332:	b2db      	uxtb	r3, r3
 800c334:	2b00      	cmp	r3, #0
 800c336:	d144      	bne.n	800c3c2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2b6>
                continue;
              }

              for (int in_channel = 0; in_channel < filter_input_depth;
 800c338:	2300      	movs	r3, #0
 800c33a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c33e:	e03a      	b.n	800c3b6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2aa>
                   ++in_channel) {
                int32_t input_val =
                    input_data[Offset(input_shape, batch, in_y, in_x,
                                      in_channel + group * filter_input_depth)];
 800c340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c342:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c344:	fb03 f202 	mul.w	r2, r3, r2
                    input_data[Offset(input_shape, batch, in_y, in_x,
 800c348:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c34c:	4413      	add	r3, r2
 800c34e:	9300      	str	r3, [sp, #0]
 800c350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c352:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c354:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c358:	6838      	ldr	r0, [r7, #0]
 800c35a:	f7ff fc5b 	bl	800bc14 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 800c35e:	4603      	mov	r3, r0
 800c360:	461a      	mov	r2, r3
                                      in_channel + group * filter_input_depth)];
 800c362:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c366:	4413      	add	r3, r2
 800c368:	f993 3000 	ldrsb.w	r3, [r3]
 800c36c:	623b      	str	r3, [r7, #32]
                int32_t filter_val = filter_data[Offset(
 800c36e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c372:	9300      	str	r3, [sp, #0]
 800c374:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c378:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c37c:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800c380:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800c384:	f7ff fc46 	bl	800bc14 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 800c388:	4603      	mov	r3, r0
 800c38a:	461a      	mov	r2, r3
                    filter_shape, out_channel, filter_y, filter_x, in_channel)];
 800c38c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c390:	4413      	add	r3, r2
 800c392:	f993 3000 	ldrsb.w	r3, [r3]
 800c396:	61fb      	str	r3, [r7, #28]
                // long as the filter size (filter_y * filter_x * in_channel)
                // does not exceed 2^16, which is the case in all the models
                // we have seen so far.
                // TODO(b/174275578): Add a check to make sure the
                // accumulator depth is smaller than 2^16.
                acc += filter_val * (input_val + input_offset);
 800c398:	6a3a      	ldr	r2, [r7, #32]
 800c39a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c39e:	4413      	add	r3, r2
 800c3a0:	69fa      	ldr	r2, [r7, #28]
 800c3a2:	fb03 f202 	mul.w	r2, r3, r2
 800c3a6:	693b      	ldr	r3, [r7, #16]
 800c3a8:	4413      	add	r3, r2
 800c3aa:	613b      	str	r3, [r7, #16]
              for (int in_channel = 0; in_channel < filter_input_depth;
 800c3ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c3b0:	3301      	adds	r3, #1
 800c3b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c3b6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800c3ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c3bc:	429a      	cmp	r2, r3
 800c3be:	dbbf      	blt.n	800c340 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x234>
 800c3c0:	e000      	b.n	800c3c4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2b8>
                continue;
 800c3c2:	bf00      	nop
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 800c3c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c3c8:	3301      	adds	r3, #1
 800c3ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c3ce:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800c3d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c3d4:	429a      	cmp	r2, r3
 800c3d6:	db8d      	blt.n	800c2f4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1e8>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 800c3d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c3dc:	3301      	adds	r3, #1
 800c3de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c3e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c3e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c3e8:	429a      	cmp	r2, r3
 800c3ea:	f6ff af77 	blt.w	800c2dc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1d0>
              }
            }
          }

          if (bias_data) {
 800c3ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d009      	beq.n	800c40a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2fe>
            acc += bias_data[out_channel];
 800c3f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c3fa:	009b      	lsls	r3, r3, #2
 800c3fc:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800c400:	4413      	add	r3, r2
 800c402:	681a      	ldr	r2, [r3, #0]
 800c404:	693b      	ldr	r3, [r7, #16]
 800c406:	4413      	add	r3, r2
 800c408:	613b      	str	r3, [r7, #16]
          }
          acc = MultiplyByQuantizedMultiplier(
 800c40a:	6938      	ldr	r0, [r7, #16]
              acc, output_multiplier[out_channel], output_shift[out_channel]);
 800c40c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c410:	009b      	lsls	r3, r3, #2
 800c412:	68ba      	ldr	r2, [r7, #8]
 800c414:	4413      	add	r3, r2
          acc = MultiplyByQuantizedMultiplier(
 800c416:	6819      	ldr	r1, [r3, #0]
              acc, output_multiplier[out_channel], output_shift[out_channel]);
 800c418:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c41c:	009b      	lsls	r3, r3, #2
 800c41e:	687a      	ldr	r2, [r7, #4]
 800c420:	4413      	add	r3, r2
          acc = MultiplyByQuantizedMultiplier(
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	461a      	mov	r2, r3
 800c426:	f7f9 fab9 	bl	800599c <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 800c42a:	4603      	mov	r3, r0
 800c42c:	613b      	str	r3, [r7, #16]
          acc += output_offset;
 800c42e:	693a      	ldr	r2, [r7, #16]
 800c430:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c432:	4413      	add	r3, r2
 800c434:	613b      	str	r3, [r7, #16]
          acc = std::max(acc, output_activation_min);
 800c436:	f107 0218 	add.w	r2, r7, #24
 800c43a:	f107 0310 	add.w	r3, r7, #16
 800c43e:	4611      	mov	r1, r2
 800c440:	4618      	mov	r0, r3
 800c442:	f7f9 ff32 	bl	80062aa <_ZSt3maxIlERKT_S2_S2_>
 800c446:	4603      	mov	r3, r0
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	613b      	str	r3, [r7, #16]
          acc = std::min(acc, output_activation_max);
 800c44c:	f107 0214 	add.w	r2, r7, #20
 800c450:	f107 0310 	add.w	r3, r7, #16
 800c454:	4611      	mov	r1, r2
 800c456:	4618      	mov	r0, r3
 800c458:	f7f9 ff13 	bl	8006282 <_ZSt3minIlERKT_S2_S2_>
 800c45c:	4603      	mov	r3, r0
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	613b      	str	r3, [r7, #16]
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
 800c462:	693c      	ldr	r4, [r7, #16]
 800c464:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c468:	9300      	str	r3, [sp, #0]
 800c46a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c46e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800c472:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c476:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 800c47a:	f7ff fbcb 	bl	800bc14 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 800c47e:	4603      	mov	r3, r0
 800c480:	461a      	mov	r2, r3
 800c482:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800c486:	4413      	add	r3, r2
 800c488:	b262      	sxtb	r2, r4
 800c48a:	701a      	strb	r2, [r3, #0]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 800c48c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c490:	3301      	adds	r3, #1
 800c492:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c496:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800c49a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c49c:	429a      	cmp	r2, r3
 800c49e:	f6ff af11 	blt.w	800c2c4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1b8>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 800c4a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c4a6:	3301      	adds	r3, #1
 800c4a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c4ac:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800c4b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4b2:	429a      	cmp	r2, r3
 800c4b4:	f6ff aef9 	blt.w	800c2aa <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x19e>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 800c4b8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c4bc:	3301      	adds	r3, #1
 800c4be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c4c2:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800c4c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c4c8:	429a      	cmp	r2, r3
 800c4ca:	f6ff aee1 	blt.w	800c290 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x184>
  for (int batch = 0; batch < batches; ++batch) {
 800c4ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c4d2:	3301      	adds	r3, #1
 800c4d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c4d8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800c4dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c4de:	429a      	cmp	r2, r3
 800c4e0:	f6ff aed2 	blt.w	800c288 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x17c>
              static_cast<int8_t>(acc);
        }
      }
    }
  }
}
 800c4e4:	bf00      	nop
 800c4e6:	bf00      	nop
 800c4e8:	37ac      	adds	r7, #172	; 0xac
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	bd90      	pop	{r4, r7, pc}
	...

0800c4f0 <_ZN6tflite12_GLOBAL__N_18ConvEvalEP13TfLiteContextP10TfLiteNode>:
#include "tensorflow/lite/micro/micro_log.h"

namespace tflite {
namespace {

TfLiteStatus ConvEval(TfLiteContext* context, TfLiteNode* node) {
 800c4f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4f4:	f5ad 7d74 	sub.w	sp, sp, #976	; 0x3d0
 800c4f8:	af08      	add	r7, sp, #32
 800c4fa:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800c4fe:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 800c502:	6018      	str	r0, [r3, #0]
 800c504:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800c508:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 800c50c:	6019      	str	r1, [r3, #0]
  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kConvInputTensor);
 800c50e:	4bbe      	ldr	r3, [pc, #760]	; (800c808 <_ZN6tflite12_GLOBAL__N_18ConvEvalEP13TfLiteContextP10TfLiteNode+0x318>)
 800c510:	681a      	ldr	r2, [r3, #0]
 800c512:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800c516:	f5a3 716a 	sub.w	r1, r3, #936	; 0x3a8
 800c51a:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800c51e:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 800c522:	6809      	ldr	r1, [r1, #0]
 800c524:	6818      	ldr	r0, [r3, #0]
 800c526:	f004 f9aa 	bl	801087e <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 800c52a:	f8c7 03ac 	str.w	r0, [r7, #940]	; 0x3ac
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kConvWeightsTensor);
 800c52e:	4bb7      	ldr	r3, [pc, #732]	; (800c80c <_ZN6tflite12_GLOBAL__N_18ConvEvalEP13TfLiteContextP10TfLiteNode+0x31c>)
 800c530:	681a      	ldr	r2, [r3, #0]
 800c532:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800c536:	f5a3 716a 	sub.w	r1, r3, #936	; 0x3a8
 800c53a:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800c53e:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 800c542:	6809      	ldr	r1, [r1, #0]
 800c544:	6818      	ldr	r0, [r3, #0]
 800c546:	f004 f99a 	bl	801087e <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 800c54a:	f8c7 03a8 	str.w	r0, [r7, #936]	; 0x3a8
  const TfLiteEvalTensor* bias =
      (NumInputs(node) == 3)
 800c54e:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800c552:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 800c556:	6818      	ldr	r0, [r3, #0]
 800c558:	f7f6 f9b7 	bl	80028ca <_ZN6tflite9NumInputsEPK10TfLiteNode>
 800c55c:	4603      	mov	r3, r0
          ? tflite::micro::GetEvalInput(context, node, kConvBiasTensor)
 800c55e:	2b03      	cmp	r3, #3
 800c560:	d10f      	bne.n	800c582 <_ZN6tflite12_GLOBAL__N_18ConvEvalEP13TfLiteContextP10TfLiteNode+0x92>
 800c562:	4bab      	ldr	r3, [pc, #684]	; (800c810 <_ZN6tflite12_GLOBAL__N_18ConvEvalEP13TfLiteContextP10TfLiteNode+0x320>)
 800c564:	681a      	ldr	r2, [r3, #0]
 800c566:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800c56a:	f5a3 716a 	sub.w	r1, r3, #936	; 0x3a8
 800c56e:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800c572:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 800c576:	6809      	ldr	r1, [r1, #0]
 800c578:	6818      	ldr	r0, [r3, #0]
 800c57a:	f004 f980 	bl	801087e <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 800c57e:	4603      	mov	r3, r0
 800c580:	e000      	b.n	800c584 <_ZN6tflite12_GLOBAL__N_18ConvEvalEP13TfLiteContextP10TfLiteNode+0x94>
 800c582:	2300      	movs	r3, #0
          : nullptr;
 800c584:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kConvOutputTensor);
 800c588:	4ba2      	ldr	r3, [pc, #648]	; (800c814 <_ZN6tflite12_GLOBAL__N_18ConvEvalEP13TfLiteContextP10TfLiteNode+0x324>)
 800c58a:	681a      	ldr	r2, [r3, #0]
 800c58c:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800c590:	f5a3 716a 	sub.w	r1, r3, #936	; 0x3a8
 800c594:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800c598:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 800c59c:	6809      	ldr	r1, [r1, #0]
 800c59e:	6818      	ldr	r0, [r3, #0]
 800c5a0:	f004 f97d 	bl	801089e <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 800c5a4:	f8c7 03a0 	str.w	r0, [r7, #928]	; 0x3a0

  TFLITE_DCHECK(node->builtin_data != nullptr);
 800c5a8:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800c5ac:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	691b      	ldr	r3, [r3, #16]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d101      	bne.n	800c5bc <_ZN6tflite12_GLOBAL__N_18ConvEvalEP13TfLiteContextP10TfLiteNode+0xcc>
 800c5b8:	f013 fa52 	bl	801fa60 <abort>
  const auto& params =
 800c5bc:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800c5c0:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	691b      	ldr	r3, [r3, #16]
 800c5c8:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
      *(reinterpret_cast<TfLiteConvParams*>(node->builtin_data));
  TFLITE_DCHECK(node->user_data != nullptr);
 800c5cc:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800c5d0:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	68db      	ldr	r3, [r3, #12]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d101      	bne.n	800c5e0 <_ZN6tflite12_GLOBAL__N_18ConvEvalEP13TfLiteContextP10TfLiteNode+0xf0>
 800c5dc:	f013 fa40 	bl	801fa60 <abort>
  const auto& data = *(static_cast<const OpDataConv*>(node->user_data));
 800c5e0:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800c5e4:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	68db      	ldr	r3, [r3, #12]
 800c5ec:	f8c7 3398 	str.w	r3, [r7, #920]	; 0x398

  switch (input->type) {  // Already know in/out types are same.
 800c5f0:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 800c5f4:	7a1b      	ldrb	r3, [r3, #8]
 800c5f6:	2b09      	cmp	r3, #9
 800c5f8:	f000 8199 	beq.w	800c92e <_ZN6tflite12_GLOBAL__N_18ConvEvalEP13TfLiteContextP10TfLiteNode+0x43e>
 800c5fc:	2b09      	cmp	r3, #9
 800c5fe:	f300 82ba 	bgt.w	800cb76 <_ZN6tflite12_GLOBAL__N_18ConvEvalEP13TfLiteContextP10TfLiteNode+0x686>
 800c602:	2b01      	cmp	r3, #1
 800c604:	d002      	beq.n	800c60c <_ZN6tflite12_GLOBAL__N_18ConvEvalEP13TfLiteContextP10TfLiteNode+0x11c>
 800c606:	2b07      	cmp	r3, #7
 800c608:	d07d      	beq.n	800c706 <_ZN6tflite12_GLOBAL__N_18ConvEvalEP13TfLiteContextP10TfLiteNode+0x216>
 800c60a:	e2b4      	b.n	800cb76 <_ZN6tflite12_GLOBAL__N_18ConvEvalEP13TfLiteContextP10TfLiteNode+0x686>
    case kTfLiteFloat32: {
      tflite::reference_ops::Conv(
          ConvParamsFloat(params, data), tflite::micro::GetTensorShape(input),
 800c60c:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800c610:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 800c614:	f8d7 2398 	ldr.w	r2, [r7, #920]	; 0x398
 800c618:	f8d7 139c 	ldr.w	r1, [r7, #924]	; 0x39c
 800c61c:	4618      	mov	r0, r3
 800c61e:	f000 ff8b 	bl	800d538 <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE>
 800c622:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800c626:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 800c62a:	f8d7 13ac 	ldr.w	r1, [r7, #940]	; 0x3ac
 800c62e:	4618      	mov	r0, r3
 800c630:	f004 f955 	bl	80108de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Conv(
 800c634:	f8d7 03ac 	ldr.w	r0, [r7, #940]	; 0x3ac
 800c638:	f7f6 fa18 	bl	8002a6c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 800c63c:	4680      	mov	r8, r0
          tflite::micro::GetTensorData<float>(input),
          tflite::micro::GetTensorShape(filter),
 800c63e:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800c642:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 800c646:	f8d7 13a8 	ldr.w	r1, [r7, #936]	; 0x3a8
 800c64a:	4618      	mov	r0, r3
 800c64c:	f004 f947 	bl	80108de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Conv(
 800c650:	f8d7 03a8 	ldr.w	r0, [r7, #936]	; 0x3a8
 800c654:	f7f6 fa0a 	bl	8002a6c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 800c658:	4604      	mov	r4, r0
          tflite::micro::GetTensorData<float>(filter),
          tflite::micro::GetTensorShape(bias),
 800c65a:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800c65e:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 800c662:	f8d7 13a4 	ldr.w	r1, [r7, #932]	; 0x3a4
 800c666:	4618      	mov	r0, r3
 800c668:	f004 f939 	bl	80108de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Conv(
 800c66c:	f8d7 03a4 	ldr.w	r0, [r7, #932]	; 0x3a4
 800c670:	f000 fab8 	bl	800cbe4 <_ZN6tflite5micro21GetOptionalTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 800c674:	4605      	mov	r5, r0
          tflite::micro::GetOptionalTensorData<float>(bias),
          tflite::micro::GetTensorShape(output),
 800c676:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800c67a:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 800c67e:	f8d7 13a0 	ldr.w	r1, [r7, #928]	; 0x3a0
 800c682:	4618      	mov	r0, r3
 800c684:	f004 f92b 	bl	80108de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Conv(
 800c688:	f8d7 03a0 	ldr.w	r0, [r7, #928]	; 0x3a0
 800c68c:	f7f6 f9d2 	bl	8002a34 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 800c690:	4606      	mov	r6, r0
          tflite::micro::GetTensorData<float>(output),
          tflite::micro::GetTensorShape(nullptr), nullptr);
 800c692:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800c696:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 800c69a:	2100      	movs	r1, #0
 800c69c:	4618      	mov	r0, r3
 800c69e:	f004 f91e 	bl	80108de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Conv(
 800c6a2:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800c6a6:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800c6aa:	f107 0014 	add.w	r0, r7, #20
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	9306      	str	r3, [sp, #24]
 800c6b2:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800c6b6:	9305      	str	r3, [sp, #20]
 800c6b8:	9604      	str	r6, [sp, #16]
 800c6ba:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800c6be:	9303      	str	r3, [sp, #12]
 800c6c0:	9502      	str	r5, [sp, #8]
 800c6c2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800c6c6:	9301      	str	r3, [sp, #4]
 800c6c8:	9400      	str	r4, [sp, #0]
 800c6ca:	4613      	mov	r3, r2
 800c6cc:	4642      	mov	r2, r8
 800c6ce:	f7ff fb58 	bl	800bd82 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_>
          tflite::micro::GetTensorShape(nullptr), nullptr);
 800c6d2:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	f7f6 f897 	bl	800280a <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(output),
 800c6dc:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	f7f6 f892 	bl	800280a <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(bias),
 800c6e6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	f7f6 f88d 	bl	800280a <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(filter),
 800c6f0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	f7f6 f888 	bl	800280a <_ZN6tflite12RuntimeShapeD1Ev>
          ConvParamsFloat(params, data), tflite::micro::GetTensorShape(input),
 800c6fa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800c6fe:	4618      	mov	r0, r3
 800c700:	f7f6 f883 	bl	800280a <_ZN6tflite12RuntimeShapeD1Ev>
      break;
 800c704:	e247      	b.n	800cb96 <_ZN6tflite12_GLOBAL__N_18ConvEvalEP13TfLiteContextP10TfLiteNode+0x6a6>
    }
    case kTfLiteInt16: {
      if (bias == nullptr || bias->type == kTfLiteInt32) {
 800c706:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d004      	beq.n	800c718 <_ZN6tflite12_GLOBAL__N_18ConvEvalEP13TfLiteContextP10TfLiteNode+0x228>
 800c70e:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 800c712:	7a1b      	ldrb	r3, [r3, #8]
 800c714:	2b02      	cmp	r3, #2
 800c716:	d17f      	bne.n	800c818 <_ZN6tflite12_GLOBAL__N_18ConvEvalEP13TfLiteContextP10TfLiteNode+0x328>
        reference_integer_ops::ConvPerChannel(
            ConvParamsQuantized(params, data),
 800c718:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800c71c:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 800c720:	f8d7 2398 	ldr.w	r2, [r7, #920]	; 0x398
 800c724:	f8d7 139c 	ldr.w	r1, [r7, #924]	; 0x39c
 800c728:	4618      	mov	r0, r3
 800c72a:	f000 ff41 	bl	800d5b0 <_ZN6tflite19ConvParamsQuantizedERK16TfLiteConvParamsRKNS_10OpDataConvE>
            data.per_channel_output_multiplier, data.per_channel_output_shift,
 800c72e:	f8d7 3398 	ldr.w	r3, [r7, #920]	; 0x398
 800c732:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800c734:	f8d7 3398 	ldr.w	r3, [r7, #920]	; 0x398
 800c738:	6a9d      	ldr	r5, [r3, #40]	; 0x28
            tflite::micro::GetTensorShape(input),
 800c73a:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800c73e:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 800c742:	f8d7 13ac 	ldr.w	r1, [r7, #940]	; 0x3ac
 800c746:	4618      	mov	r0, r3
 800c748:	f004 f8c9 	bl	80108de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
        reference_integer_ops::ConvPerChannel(
 800c74c:	f8d7 03ac 	ldr.w	r0, [r7, #940]	; 0x3ac
 800c750:	f7f6 f8ed 	bl	800292e <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>
 800c754:	4606      	mov	r6, r0
            tflite::micro::GetTensorData<int16_t>(input),
            tflite::micro::GetTensorShape(filter),
 800c756:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800c75a:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 800c75e:	f8d7 13a8 	ldr.w	r1, [r7, #936]	; 0x3a8
 800c762:	4618      	mov	r0, r3
 800c764:	f004 f8bb 	bl	80108de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
        reference_integer_ops::ConvPerChannel(
 800c768:	f8d7 03a8 	ldr.w	r0, [r7, #936]	; 0x3a8
 800c76c:	f7ff f9a7 	bl	800babe <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 800c770:	6078      	str	r0, [r7, #4]
            tflite::micro::GetTensorData<int8_t>(filter),
            tflite::micro::GetTensorShape(bias),
 800c772:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800c776:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 800c77a:	f8d7 13a4 	ldr.w	r1, [r7, #932]	; 0x3a4
 800c77e:	4618      	mov	r0, r3
 800c780:	f004 f8ad 	bl	80108de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
        reference_integer_ops::ConvPerChannel(
 800c784:	f8d7 03a4 	ldr.w	r0, [r7, #932]	; 0x3a4
 800c788:	f000 fa3d 	bl	800cc06 <_ZN6tflite5micro21GetOptionalTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 800c78c:	6038      	str	r0, [r7, #0]
            tflite::micro::GetOptionalTensorData<std::int32_t>(bias),
            tflite::micro::GetTensorShape(output),
 800c78e:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800c792:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800c796:	f8d7 13a0 	ldr.w	r1, [r7, #928]	; 0x3a0
 800c79a:	4618      	mov	r0, r3
 800c79c:	f004 f89f 	bl	80108de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
        reference_integer_ops::ConvPerChannel(
 800c7a0:	f8d7 03a0 	ldr.w	r0, [r7, #928]	; 0x3a0
 800c7a4:	f7f6 f8d2 	bl	800294c <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
 800c7a8:	4603      	mov	r3, r0
 800c7aa:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800c7ae:	f107 00d8 	add.w	r0, r7, #216	; 0xd8
 800c7b2:	9306      	str	r3, [sp, #24]
 800c7b4:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800c7b8:	9305      	str	r3, [sp, #20]
 800c7ba:	683b      	ldr	r3, [r7, #0]
 800c7bc:	9304      	str	r3, [sp, #16]
 800c7be:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800c7c2:	9303      	str	r3, [sp, #12]
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	9302      	str	r3, [sp, #8]
 800c7c8:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800c7cc:	9301      	str	r3, [sp, #4]
 800c7ce:	9600      	str	r6, [sp, #0]
 800c7d0:	4613      	mov	r3, r2
 800c7d2:	462a      	mov	r2, r5
 800c7d4:	4621      	mov	r1, r4
 800c7d6:	f000 fa27 	bl	800cc28 <_ZN6tflite21reference_integer_ops14ConvPerChannelIlEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps>
            tflite::micro::GetTensorShape(output),
 800c7da:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800c7de:	4618      	mov	r0, r3
 800c7e0:	f7f6 f813 	bl	800280a <_ZN6tflite12RuntimeShapeD1Ev>
            tflite::micro::GetTensorShape(bias),
 800c7e4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	f7f6 f80e 	bl	800280a <_ZN6tflite12RuntimeShapeD1Ev>
            tflite::micro::GetTensorShape(filter),
 800c7ee:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	f7f6 f809 	bl	800280a <_ZN6tflite12RuntimeShapeD1Ev>
            tflite::micro::GetTensorShape(input),
 800c7f8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	f7f6 f804 	bl	800280a <_ZN6tflite12RuntimeShapeD1Ev>
        reference_integer_ops::ConvPerChannel(
 800c802:	bf00      	nop
      } else {
        MicroPrintf("Bias type %s (%d) not supported.",
                    TfLiteTypeGetName(bias->type), bias->type);
        return kTfLiteError;
      }
      break;
 800c804:	e1c7      	b.n	800cb96 <_ZN6tflite12_GLOBAL__N_18ConvEvalEP13TfLiteContextP10TfLiteNode+0x6a6>
 800c806:	bf00      	nop
 800c808:	08029304 	.word	0x08029304
 800c80c:	08029308 	.word	0x08029308
 800c810:	0802930c 	.word	0x0802930c
 800c814:	08029310 	.word	0x08029310
      } else if (bias->type == kTfLiteInt64) {
 800c818:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 800c81c:	7a1b      	ldrb	r3, [r3, #8]
 800c81e:	2b04      	cmp	r3, #4
 800c820:	d175      	bne.n	800c90e <_ZN6tflite12_GLOBAL__N_18ConvEvalEP13TfLiteContextP10TfLiteNode+0x41e>
            ConvParamsQuantized(params, data),
 800c822:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800c826:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800c82a:	f8d7 2398 	ldr.w	r2, [r7, #920]	; 0x398
 800c82e:	f8d7 139c 	ldr.w	r1, [r7, #924]	; 0x39c
 800c832:	4618      	mov	r0, r3
 800c834:	f000 febc 	bl	800d5b0 <_ZN6tflite19ConvParamsQuantizedERK16TfLiteConvParamsRKNS_10OpDataConvE>
            data.per_channel_output_multiplier, data.per_channel_output_shift,
 800c838:	f8d7 3398 	ldr.w	r3, [r7, #920]	; 0x398
 800c83c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800c83e:	f8d7 3398 	ldr.w	r3, [r7, #920]	; 0x398
 800c842:	6a9d      	ldr	r5, [r3, #40]	; 0x28
            tflite::micro::GetTensorShape(input),
 800c844:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800c848:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800c84c:	f8d7 13ac 	ldr.w	r1, [r7, #940]	; 0x3ac
 800c850:	4618      	mov	r0, r3
 800c852:	f004 f844 	bl	80108de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
        reference_integer_ops::ConvPerChannel(
 800c856:	f8d7 03ac 	ldr.w	r0, [r7, #940]	; 0x3ac
 800c85a:	f7f6 f868 	bl	800292e <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>
 800c85e:	4606      	mov	r6, r0
            tflite::micro::GetTensorShape(filter),
 800c860:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800c864:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800c868:	f8d7 13a8 	ldr.w	r1, [r7, #936]	; 0x3a8
 800c86c:	4618      	mov	r0, r3
 800c86e:	f004 f836 	bl	80108de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
        reference_integer_ops::ConvPerChannel(
 800c872:	f8d7 03a8 	ldr.w	r0, [r7, #936]	; 0x3a8
 800c876:	f7ff f922 	bl	800babe <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 800c87a:	6078      	str	r0, [r7, #4]
            tflite::micro::GetTensorShape(bias),
 800c87c:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800c880:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800c884:	f8d7 13a4 	ldr.w	r1, [r7, #932]	; 0x3a4
 800c888:	4618      	mov	r0, r3
 800c88a:	f004 f828 	bl	80108de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
        reference_integer_ops::ConvPerChannel(
 800c88e:	f8d7 03a4 	ldr.w	r0, [r7, #932]	; 0x3a4
 800c892:	f000 fba8 	bl	800cfe6 <_ZN6tflite5micro21GetOptionalTensorDataIxEEPKT_PK16TfLiteEvalTensor>
 800c896:	6038      	str	r0, [r7, #0]
            tflite::micro::GetTensorShape(output),
 800c898:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800c89c:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 800c8a0:	f8d7 13a0 	ldr.w	r1, [r7, #928]	; 0x3a0
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	f004 f81a 	bl	80108de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
        reference_integer_ops::ConvPerChannel(
 800c8aa:	f8d7 03a0 	ldr.w	r0, [r7, #928]	; 0x3a0
 800c8ae:	f7f6 f84d 	bl	800294c <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
 800c8b2:	4603      	mov	r3, r0
 800c8b4:	f507 72dc 	add.w	r2, r7, #440	; 0x1b8
 800c8b8:	f507 70c0 	add.w	r0, r7, #384	; 0x180
 800c8bc:	9306      	str	r3, [sp, #24]
 800c8be:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 800c8c2:	9305      	str	r3, [sp, #20]
 800c8c4:	683b      	ldr	r3, [r7, #0]
 800c8c6:	9304      	str	r3, [sp, #16]
 800c8c8:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800c8cc:	9303      	str	r3, [sp, #12]
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	9302      	str	r3, [sp, #8]
 800c8d2:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 800c8d6:	9301      	str	r3, [sp, #4]
 800c8d8:	9600      	str	r6, [sp, #0]
 800c8da:	4613      	mov	r3, r2
 800c8dc:	462a      	mov	r2, r5
 800c8de:	4621      	mov	r1, r4
 800c8e0:	f000 fb92 	bl	800d008 <_ZN6tflite21reference_integer_ops14ConvPerChannelIxEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps>
            tflite::micro::GetTensorShape(output),
 800c8e4:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	f7f5 ff8e 	bl	800280a <_ZN6tflite12RuntimeShapeD1Ev>
            tflite::micro::GetTensorShape(bias),
 800c8ee:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	f7f5 ff89 	bl	800280a <_ZN6tflite12RuntimeShapeD1Ev>
            tflite::micro::GetTensorShape(filter),
 800c8f8:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	f7f5 ff84 	bl	800280a <_ZN6tflite12RuntimeShapeD1Ev>
            tflite::micro::GetTensorShape(input),
 800c902:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800c906:	4618      	mov	r0, r3
 800c908:	f7f5 ff7f 	bl	800280a <_ZN6tflite12RuntimeShapeD1Ev>
      break;
 800c90c:	e143      	b.n	800cb96 <_ZN6tflite12_GLOBAL__N_18ConvEvalEP13TfLiteContextP10TfLiteNode+0x6a6>
                    TfLiteTypeGetName(bias->type), bias->type);
 800c90e:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 800c912:	7a1b      	ldrb	r3, [r3, #8]
        MicroPrintf("Bias type %s (%d) not supported.",
 800c914:	4618      	mov	r0, r3
 800c916:	f7f8 ff19 	bl	800574c <TfLiteTypeGetName>
 800c91a:	4601      	mov	r1, r0
                    TfLiteTypeGetName(bias->type), bias->type);
 800c91c:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 800c920:	7a1b      	ldrb	r3, [r3, #8]
        MicroPrintf("Bias type %s (%d) not supported.",
 800c922:	461a      	mov	r2, r3
 800c924:	489f      	ldr	r0, [pc, #636]	; (800cba4 <_ZN6tflite12_GLOBAL__N_18ConvEvalEP13TfLiteContextP10TfLiteNode+0x6b4>)
 800c926:	f7fe ff73 	bl	800b810 <_Z11MicroPrintfPKcz>
        return kTfLiteError;
 800c92a:	2301      	movs	r3, #1
 800c92c:	e134      	b.n	800cb98 <_ZN6tflite12_GLOBAL__N_18ConvEvalEP13TfLiteContextP10TfLiteNode+0x6a8>
    }
    case kTfLiteInt8: {
      switch (filter->type) {
 800c92e:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 800c932:	7a1b      	ldrb	r3, [r3, #8]
 800c934:	2b09      	cmp	r3, #9
 800c936:	f000 80a1 	beq.w	800ca7c <_ZN6tflite12_GLOBAL__N_18ConvEvalEP13TfLiteContextP10TfLiteNode+0x58c>
 800c93a:	2b12      	cmp	r3, #18
 800c93c:	f040 810a 	bne.w	800cb54 <_ZN6tflite12_GLOBAL__N_18ConvEvalEP13TfLiteContextP10TfLiteNode+0x664>
        case kTfLiteInt4: {
          int8_t* unpacked_filter_data = static_cast<int8_t*>(
              context->GetScratchBuffer(context, data.filter_buffer_index));
 800c940:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800c944:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c94c:	f8d7 2398 	ldr.w	r2, [r7, #920]	; 0x398
 800c950:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800c952:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 800c956:	f5a2 7269 	sub.w	r2, r2, #932	; 0x3a4
 800c95a:	6810      	ldr	r0, [r2, #0]
 800c95c:	4798      	blx	r3
 800c95e:	f8c7 0394 	str.w	r0, [r7, #916]	; 0x394
          tflite::tensor_utils::UnpackDenseInt4IntoInt8(
 800c962:	f8d7 03a8 	ldr.w	r0, [r7, #936]	; 0x3a8
 800c966:	f7ff f8aa 	bl	800babe <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 800c96a:	4604      	mov	r4, r0
              tflite::micro::GetTensorData<int8_t>(filter),
              tflite::micro::GetTensorShape(filter).FlatSize(),
 800c96c:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800c970:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800c974:	f8d7 13a8 	ldr.w	r1, [r7, #936]	; 0x3a8
 800c978:	4618      	mov	r0, r3
 800c97a:	f003 ffb0 	bl	80108de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          tflite::tensor_utils::UnpackDenseInt4IntoInt8(
 800c97e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800c982:	4618      	mov	r0, r3
 800c984:	f7f5 ff7e 	bl	8002884 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 800c988:	4603      	mov	r3, r0
 800c98a:	f8d7 2394 	ldr.w	r2, [r7, #916]	; 0x394
 800c98e:	4619      	mov	r1, r3
 800c990:	4620      	mov	r0, r4
 800c992:	f7f9 f9b2 	bl	8005cfa <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa>
              tflite::micro::GetTensorShape(filter).FlatSize(),
 800c996:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800c99a:	4618      	mov	r0, r3
 800c99c:	f7f5 ff35 	bl	800280a <_ZN6tflite12RuntimeShapeD1Ev>
              unpacked_filter_data);
          reference_integer_ops::ConvPerChannel(
              ConvParamsQuantized(params, data),
 800c9a0:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800c9a4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800c9a8:	f8d7 2398 	ldr.w	r2, [r7, #920]	; 0x398
 800c9ac:	f8d7 139c 	ldr.w	r1, [r7, #924]	; 0x39c
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	f000 fdfd 	bl	800d5b0 <_ZN6tflite19ConvParamsQuantizedERK16TfLiteConvParamsRKNS_10OpDataConvE>
              data.per_channel_output_multiplier, data.per_channel_output_shift,
 800c9b6:	f8d7 3398 	ldr.w	r3, [r7, #920]	; 0x398
 800c9ba:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800c9bc:	f8d7 3398 	ldr.w	r3, [r7, #920]	; 0x398
 800c9c0:	6a9d      	ldr	r5, [r3, #40]	; 0x28
              tflite::micro::GetTensorShape(input),
 800c9c2:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800c9c6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800c9ca:	f8d7 13ac 	ldr.w	r1, [r7, #940]	; 0x3ac
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	f003 ff85 	bl	80108de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          reference_integer_ops::ConvPerChannel(
 800c9d4:	f8d7 03ac 	ldr.w	r0, [r7, #940]	; 0x3ac
 800c9d8:	f7ff f871 	bl	800babe <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 800c9dc:	4606      	mov	r6, r0
              tflite::micro::GetTensorData<int8_t>(input),
              tflite::micro::GetTensorShape(filter), unpacked_filter_data,
 800c9de:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800c9e2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800c9e6:	f8d7 13a8 	ldr.w	r1, [r7, #936]	; 0x3a8
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	f003 ff77 	bl	80108de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
              tflite::micro::GetTensorShape(bias),
 800c9f0:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 800c9f4:	f8d7 13a4 	ldr.w	r1, [r7, #932]	; 0x3a4
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	f003 ff70 	bl	80108de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          reference_integer_ops::ConvPerChannel(
 800c9fe:	f8d7 03a4 	ldr.w	r0, [r7, #932]	; 0x3a4
 800ca02:	f000 f900 	bl	800cc06 <_ZN6tflite5micro21GetOptionalTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 800ca06:	6078      	str	r0, [r7, #4]
              tflite::micro::GetOptionalTensorData<int32_t>(bias),
              tflite::micro::GetTensorShape(output),
 800ca08:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800ca0c:	f8d7 13a0 	ldr.w	r1, [r7, #928]	; 0x3a0
 800ca10:	4618      	mov	r0, r3
 800ca12:	f003 ff64 	bl	80108de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          reference_integer_ops::ConvPerChannel(
 800ca16:	f8d7 03a0 	ldr.w	r0, [r7, #928]	; 0x3a0
 800ca1a:	f7ff f85f 	bl	800badc <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 800ca1e:	4603      	mov	r3, r0
 800ca20:	f507 721f 	add.w	r2, r7, #636	; 0x27c
 800ca24:	f507 7011 	add.w	r0, r7, #580	; 0x244
 800ca28:	9306      	str	r3, [sp, #24]
 800ca2a:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800ca2e:	9305      	str	r3, [sp, #20]
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	9304      	str	r3, [sp, #16]
 800ca34:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 800ca38:	9303      	str	r3, [sp, #12]
 800ca3a:	f8d7 3394 	ldr.w	r3, [r7, #916]	; 0x394
 800ca3e:	9302      	str	r3, [sp, #8]
 800ca40:	f507 7326 	add.w	r3, r7, #664	; 0x298
 800ca44:	9301      	str	r3, [sp, #4]
 800ca46:	9600      	str	r6, [sp, #0]
 800ca48:	4613      	mov	r3, r2
 800ca4a:	462a      	mov	r2, r5
 800ca4c:	4621      	mov	r1, r4
 800ca4e:	f7ff fb5d 	bl	800c10c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>
              tflite::micro::GetTensorShape(output),
 800ca52:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800ca56:	4618      	mov	r0, r3
 800ca58:	f7f5 fed7 	bl	800280a <_ZN6tflite12RuntimeShapeD1Ev>
              tflite::micro::GetTensorShape(bias),
 800ca5c:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 800ca60:	4618      	mov	r0, r3
 800ca62:	f7f5 fed2 	bl	800280a <_ZN6tflite12RuntimeShapeD1Ev>
              tflite::micro::GetTensorShape(filter), unpacked_filter_data,
 800ca66:	f507 7326 	add.w	r3, r7, #664	; 0x298
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	f7f5 fecd 	bl	800280a <_ZN6tflite12RuntimeShapeD1Ev>
              tflite::micro::GetTensorShape(input),
 800ca70:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 800ca74:	4618      	mov	r0, r3
 800ca76:	f7f5 fec8 	bl	800280a <_ZN6tflite12RuntimeShapeD1Ev>
              tflite::micro::GetTensorData<int8_t>(output));
          break;
 800ca7a:	e07b      	b.n	800cb74 <_ZN6tflite12_GLOBAL__N_18ConvEvalEP13TfLiteContextP10TfLiteNode+0x684>
        }
        case kTfLiteInt8: {
          reference_integer_ops::ConvPerChannel(
              ConvParamsQuantized(params, data),
 800ca7c:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 800ca80:	f8d7 2398 	ldr.w	r2, [r7, #920]	; 0x398
 800ca84:	f8d7 139c 	ldr.w	r1, [r7, #924]	; 0x39c
 800ca88:	4618      	mov	r0, r3
 800ca8a:	f000 fd91 	bl	800d5b0 <_ZN6tflite19ConvParamsQuantizedERK16TfLiteConvParamsRKNS_10OpDataConvE>
              data.per_channel_output_multiplier, data.per_channel_output_shift,
 800ca8e:	f8d7 3398 	ldr.w	r3, [r7, #920]	; 0x398
 800ca92:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800ca94:	f8d7 3398 	ldr.w	r3, [r7, #920]	; 0x398
 800ca98:	6a9d      	ldr	r5, [r3, #40]	; 0x28
              tflite::micro::GetTensorShape(input),
 800ca9a:	f507 7349 	add.w	r3, r7, #804	; 0x324
 800ca9e:	f8d7 13ac 	ldr.w	r1, [r7, #940]	; 0x3ac
 800caa2:	4618      	mov	r0, r3
 800caa4:	f003 ff1b 	bl	80108de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          reference_integer_ops::ConvPerChannel(
 800caa8:	f8d7 03ac 	ldr.w	r0, [r7, #940]	; 0x3ac
 800caac:	f7ff f807 	bl	800babe <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 800cab0:	4606      	mov	r6, r0
              tflite::micro::GetTensorData<int8_t>(input),
              tflite::micro::GetTensorShape(filter),
 800cab2:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800cab6:	f8d7 13a8 	ldr.w	r1, [r7, #936]	; 0x3a8
 800caba:	4618      	mov	r0, r3
 800cabc:	f003 ff0f 	bl	80108de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          reference_integer_ops::ConvPerChannel(
 800cac0:	f8d7 03a8 	ldr.w	r0, [r7, #936]	; 0x3a8
 800cac4:	f7fe fffb 	bl	800babe <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 800cac8:	6078      	str	r0, [r7, #4]
              tflite::micro::GetTensorData<int8_t>(filter),
              tflite::micro::GetTensorShape(bias),
 800caca:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 800cace:	f8d7 13a4 	ldr.w	r1, [r7, #932]	; 0x3a4
 800cad2:	4618      	mov	r0, r3
 800cad4:	f003 ff03 	bl	80108de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          reference_integer_ops::ConvPerChannel(
 800cad8:	f8d7 03a4 	ldr.w	r0, [r7, #932]	; 0x3a4
 800cadc:	f000 f893 	bl	800cc06 <_ZN6tflite5micro21GetOptionalTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 800cae0:	6038      	str	r0, [r7, #0]
              tflite::micro::GetOptionalTensorData<int32_t>(bias),
              tflite::micro::GetTensorShape(output),
 800cae2:	f507 735e 	add.w	r3, r7, #888	; 0x378
 800cae6:	f8d7 13a0 	ldr.w	r1, [r7, #928]	; 0x3a0
 800caea:	4618      	mov	r0, r3
 800caec:	f003 fef7 	bl	80108de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          reference_integer_ops::ConvPerChannel(
 800caf0:	f8d7 03a0 	ldr.w	r0, [r7, #928]	; 0x3a0
 800caf4:	f7fe fff2 	bl	800badc <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 800caf8:	4603      	mov	r3, r0
 800cafa:	f507 7249 	add.w	r2, r7, #804	; 0x324
 800cafe:	f507 703b 	add.w	r0, r7, #748	; 0x2ec
 800cb02:	9306      	str	r3, [sp, #24]
 800cb04:	f507 735e 	add.w	r3, r7, #888	; 0x378
 800cb08:	9305      	str	r3, [sp, #20]
 800cb0a:	683b      	ldr	r3, [r7, #0]
 800cb0c:	9304      	str	r3, [sp, #16]
 800cb0e:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 800cb12:	9303      	str	r3, [sp, #12]
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	9302      	str	r3, [sp, #8]
 800cb18:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800cb1c:	9301      	str	r3, [sp, #4]
 800cb1e:	9600      	str	r6, [sp, #0]
 800cb20:	4613      	mov	r3, r2
 800cb22:	462a      	mov	r2, r5
 800cb24:	4621      	mov	r1, r4
 800cb26:	f7ff faf1 	bl	800c10c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>
              tflite::micro::GetTensorShape(output),
 800cb2a:	f507 735e 	add.w	r3, r7, #888	; 0x378
 800cb2e:	4618      	mov	r0, r3
 800cb30:	f7f5 fe6b 	bl	800280a <_ZN6tflite12RuntimeShapeD1Ev>
              tflite::micro::GetTensorShape(bias),
 800cb34:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 800cb38:	4618      	mov	r0, r3
 800cb3a:	f7f5 fe66 	bl	800280a <_ZN6tflite12RuntimeShapeD1Ev>
              tflite::micro::GetTensorShape(filter),
 800cb3e:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800cb42:	4618      	mov	r0, r3
 800cb44:	f7f5 fe61 	bl	800280a <_ZN6tflite12RuntimeShapeD1Ev>
              tflite::micro::GetTensorShape(input),
 800cb48:	f507 7349 	add.w	r3, r7, #804	; 0x324
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	f7f5 fe5c 	bl	800280a <_ZN6tflite12RuntimeShapeD1Ev>
              tflite::micro::GetTensorData<int8_t>(output));
          break;
 800cb52:	e00f      	b.n	800cb74 <_ZN6tflite12_GLOBAL__N_18ConvEvalEP13TfLiteContextP10TfLiteNode+0x684>
        }
        default:
          MicroPrintf("Weight type %s (%d) not supported.",
                      TfLiteTypeGetName(filter->type), filter->type);
 800cb54:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 800cb58:	7a1b      	ldrb	r3, [r3, #8]
          MicroPrintf("Weight type %s (%d) not supported.",
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	f7f8 fdf6 	bl	800574c <TfLiteTypeGetName>
 800cb60:	4601      	mov	r1, r0
                      TfLiteTypeGetName(filter->type), filter->type);
 800cb62:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 800cb66:	7a1b      	ldrb	r3, [r3, #8]
          MicroPrintf("Weight type %s (%d) not supported.",
 800cb68:	461a      	mov	r2, r3
 800cb6a:	480f      	ldr	r0, [pc, #60]	; (800cba8 <_ZN6tflite12_GLOBAL__N_18ConvEvalEP13TfLiteContextP10TfLiteNode+0x6b8>)
 800cb6c:	f7fe fe50 	bl	800b810 <_Z11MicroPrintfPKcz>
          return kTfLiteError;
 800cb70:	2301      	movs	r3, #1
 800cb72:	e011      	b.n	800cb98 <_ZN6tflite12_GLOBAL__N_18ConvEvalEP13TfLiteContextP10TfLiteNode+0x6a8>
      }
      break;
 800cb74:	e00f      	b.n	800cb96 <_ZN6tflite12_GLOBAL__N_18ConvEvalEP13TfLiteContextP10TfLiteNode+0x6a6>
    }
    default:
      MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
 800cb76:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 800cb7a:	7a1b      	ldrb	r3, [r3, #8]
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	f7f8 fde5 	bl	800574c <TfLiteTypeGetName>
 800cb82:	4601      	mov	r1, r0
                  input->type);
 800cb84:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 800cb88:	7a1b      	ldrb	r3, [r3, #8]
      MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
 800cb8a:	461a      	mov	r2, r3
 800cb8c:	4807      	ldr	r0, [pc, #28]	; (800cbac <_ZN6tflite12_GLOBAL__N_18ConvEvalEP13TfLiteContextP10TfLiteNode+0x6bc>)
 800cb8e:	f7fe fe3f 	bl	800b810 <_Z11MicroPrintfPKcz>
      return kTfLiteError;
 800cb92:	2301      	movs	r3, #1
 800cb94:	e000      	b.n	800cb98 <_ZN6tflite12_GLOBAL__N_18ConvEvalEP13TfLiteContextP10TfLiteNode+0x6a8>
  }
  return kTfLiteOk;
 800cb96:	2300      	movs	r3, #0
}
 800cb98:	4618      	mov	r0, r3
 800cb9a:	f507 776c 	add.w	r7, r7, #944	; 0x3b0
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cba4:	08026de8 	.word	0x08026de8
 800cba8:	08026e0c 	.word	0x08026e0c
 800cbac:	08026e30 	.word	0x08026e30

0800cbb0 <_ZN6tflite16Register_CONV_2DEv>:

}  // namespace

TFLMRegistration Register_CONV_2D() {
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b084      	sub	sp, #16
 800cbb4:	af02      	add	r7, sp, #8
 800cbb6:	6078      	str	r0, [r7, #4]
  return tflite::micro::RegisterOp(ConvInit, ConvPrepare, ConvEval);
 800cbb8:	6878      	ldr	r0, [r7, #4]
 800cbba:	2300      	movs	r3, #0
 800cbbc:	9301      	str	r3, [sp, #4]
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	9300      	str	r3, [sp, #0]
 800cbc2:	4b05      	ldr	r3, [pc, #20]	; (800cbd8 <_ZN6tflite16Register_CONV_2DEv+0x28>)
 800cbc4:	4a05      	ldr	r2, [pc, #20]	; (800cbdc <_ZN6tflite16Register_CONV_2DEv+0x2c>)
 800cbc6:	4906      	ldr	r1, [pc, #24]	; (800cbe0 <_ZN6tflite16Register_CONV_2DEv+0x30>)
 800cbc8:	f003 fe06 	bl	80107d8 <_ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_ESE_>
 800cbcc:	bf00      	nop
}
 800cbce:	6878      	ldr	r0, [r7, #4]
 800cbd0:	3708      	adds	r7, #8
 800cbd2:	46bd      	mov	sp, r7
 800cbd4:	bd80      	pop	{r7, pc}
 800cbd6:	bf00      	nop
 800cbd8:	0800c4f1 	.word	0x0800c4f1
 800cbdc:	0800d8cd 	.word	0x0800d8cd
 800cbe0:	0800d653 	.word	0x0800d653

0800cbe4 <_ZN6tflite5micro21GetOptionalTensorDataIfEEPKT_PK16TfLiteEvalTensor>:
  return tensor == nullptr ? nullptr : reinterpret_cast<T*>(tensor->data.raw);
}

// Returns const data for a TfLiteEvalTensor struct that could be null.
template <typename T>
const T* GetOptionalTensorData(const TfLiteEvalTensor* tensor) {
 800cbe4:	b480      	push	{r7}
 800cbe6:	b083      	sub	sp, #12
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	6078      	str	r0, [r7, #4]
  return tensor == nullptr ? nullptr
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d002      	beq.n	800cbf8 <_ZN6tflite5micro21GetOptionalTensorDataIfEEPKT_PK16TfLiteEvalTensor+0x14>
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	681b      	ldr	r3, [r3, #0]
                           : reinterpret_cast<const T*>(tensor->data.raw);
 800cbf6:	e000      	b.n	800cbfa <_ZN6tflite5micro21GetOptionalTensorDataIfEEPKT_PK16TfLiteEvalTensor+0x16>
  return tensor == nullptr ? nullptr
 800cbf8:	2300      	movs	r3, #0
}
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	370c      	adds	r7, #12
 800cbfe:	46bd      	mov	sp, r7
 800cc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc04:	4770      	bx	lr

0800cc06 <_ZN6tflite5micro21GetOptionalTensorDataIlEEPKT_PK16TfLiteEvalTensor>:
const T* GetOptionalTensorData(const TfLiteEvalTensor* tensor) {
 800cc06:	b480      	push	{r7}
 800cc08:	b083      	sub	sp, #12
 800cc0a:	af00      	add	r7, sp, #0
 800cc0c:	6078      	str	r0, [r7, #4]
  return tensor == nullptr ? nullptr
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d002      	beq.n	800cc1a <_ZN6tflite5micro21GetOptionalTensorDataIlEEPKT_PK16TfLiteEvalTensor+0x14>
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	681b      	ldr	r3, [r3, #0]
                           : reinterpret_cast<const T*>(tensor->data.raw);
 800cc18:	e000      	b.n	800cc1c <_ZN6tflite5micro21GetOptionalTensorDataIlEEPKT_PK16TfLiteEvalTensor+0x16>
  return tensor == nullptr ? nullptr
 800cc1a:	2300      	movs	r3, #0
}
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	370c      	adds	r7, #12
 800cc20:	46bd      	mov	sp, r7
 800cc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc26:	4770      	bx	lr

0800cc28 <_ZN6tflite21reference_integer_ops14ConvPerChannelIlEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps>:


// Fixed-point per-channel-quantization convolution reference kernel.
// 16-bit data and 8-bit filter
template <typename AccumScalar>
inline void ConvPerChannel(
 800cc28:	b590      	push	{r4, r7, lr}
 800cc2a:	b0ad      	sub	sp, #180	; 0xb4
 800cc2c:	af02      	add	r7, sp, #8
 800cc2e:	60f8      	str	r0, [r7, #12]
 800cc30:	60b9      	str	r1, [r7, #8]
 800cc32:	607a      	str	r2, [r7, #4]
 800cc34:	603b      	str	r3, [r7, #0]
    const int16_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const AccumScalar* bias_data, const RuntimeShape& output_shape,
    int16_t* output_data) {
  // Get parameters.
  const int stride_width = params.stride_width;
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800cc3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  const int stride_height = params.stride_height;
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800cc46:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  const int dilation_width_factor = params.dilation_width_factor;
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800cc50:	67fb      	str	r3, [r7, #124]	; 0x7c
  const int dilation_height_factor = params.dilation_height_factor;
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800cc58:	67bb      	str	r3, [r7, #120]	; 0x78
  const int pad_width = params.padding_values.width;
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800cc60:	677b      	str	r3, [r7, #116]	; 0x74
  const int pad_height = params.padding_values.height;
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800cc68:	673b      	str	r3, [r7, #112]	; 0x70

  // Set min and max value of the output.
  const int32_t output_activation_min = params.quantized_activation_min;
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc6e:	61fb      	str	r3, [r7, #28]
  const int32_t output_activation_max = params.quantized_activation_max;
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc74:	61bb      	str	r3, [r7, #24]

  // Consistency check.
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 800cc76:	69fa      	ldr	r2, [r7, #28]
 800cc78:	69bb      	ldr	r3, [r7, #24]
 800cc7a:	429a      	cmp	r2, r3
 800cc7c:	dd01      	ble.n	800cc82 <_ZN6tflite21reference_integer_ops14ConvPerChannelIlEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x5a>
 800cc7e:	f012 feef 	bl	801fa60 <abort>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 800cc82:	6838      	ldr	r0, [r7, #0]
 800cc84:	f7f5 fdcc 	bl	8002820 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800cc88:	4603      	mov	r3, r0
 800cc8a:	2b04      	cmp	r3, #4
 800cc8c:	d001      	beq.n	800cc92 <_ZN6tflite21reference_integer_ops14ConvPerChannelIlEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x6a>
 800cc8e:	f012 fee7 	bl	801fa60 <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 800cc92:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800cc96:	f7f5 fdc3 	bl	8002820 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800cc9a:	4603      	mov	r3, r0
 800cc9c:	2b04      	cmp	r3, #4
 800cc9e:	d001      	beq.n	800cca4 <_ZN6tflite21reference_integer_ops14ConvPerChannelIlEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x7c>
 800cca0:	f012 fede 	bl	801fa60 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 800cca4:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 800cca8:	f7f5 fdba 	bl	8002820 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800ccac:	4603      	mov	r3, r0
 800ccae:	2b04      	cmp	r3, #4
 800ccb0:	d001      	beq.n	800ccb6 <_ZN6tflite21reference_integer_ops14ConvPerChannelIlEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x8e>
 800ccb2:	f012 fed5 	bl	801fa60 <abort>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800ccbc:	2100      	movs	r1, #0
 800ccbe:	6838      	ldr	r0, [r7, #0]
 800ccc0:	f7ff f830 	bl	800bd24 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800ccc4:	66f8      	str	r0, [r7, #108]	; 0x6c
  const int input_depth = input_shape.Dims(3);
 800ccc6:	2103      	movs	r1, #3
 800ccc8:	6838      	ldr	r0, [r7, #0]
 800ccca:	f7f5 fdb5 	bl	8002838 <_ZNK6tflite12RuntimeShape4DimsEi>
 800ccce:	66b8      	str	r0, [r7, #104]	; 0x68
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
 800ccd0:	2303      	movs	r3, #3
 800ccd2:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800ccd6:	2100      	movs	r1, #0
 800ccd8:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800ccdc:	f7ff f822 	bl	800bd24 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800cce0:	6678      	str	r0, [r7, #100]	; 0x64
  if (bias_data) {
 800cce2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d009      	beq.n	800ccfe <_ZN6tflite21reference_integer_ops14ConvPerChannelIlEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0xd6>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 800ccea:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800ccee:	f7f5 fdc9 	bl	8002884 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 800ccf2:	4602      	mov	r2, r0
 800ccf4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ccf6:	4293      	cmp	r3, r2
 800ccf8:	d001      	beq.n	800ccfe <_ZN6tflite21reference_integer_ops14ConvPerChannelIlEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0xd6>
 800ccfa:	f012 feb1 	bl	801fa60 <abort>
  }

  // Check dimensions of the tensors.
  const int input_height = input_shape.Dims(1);
 800ccfe:	2101      	movs	r1, #1
 800cd00:	6838      	ldr	r0, [r7, #0]
 800cd02:	f7f5 fd99 	bl	8002838 <_ZNK6tflite12RuntimeShape4DimsEi>
 800cd06:	6638      	str	r0, [r7, #96]	; 0x60
  const int input_width = input_shape.Dims(2);
 800cd08:	2102      	movs	r1, #2
 800cd0a:	6838      	ldr	r0, [r7, #0]
 800cd0c:	f7f5 fd94 	bl	8002838 <_ZNK6tflite12RuntimeShape4DimsEi>
 800cd10:	65f8      	str	r0, [r7, #92]	; 0x5c
  const int filter_height = filter_shape.Dims(1);
 800cd12:	2101      	movs	r1, #1
 800cd14:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800cd18:	f7f5 fd8e 	bl	8002838 <_ZNK6tflite12RuntimeShape4DimsEi>
 800cd1c:	65b8      	str	r0, [r7, #88]	; 0x58
  const int filter_width = filter_shape.Dims(2);
 800cd1e:	2102      	movs	r1, #2
 800cd20:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800cd24:	f7f5 fd88 	bl	8002838 <_ZNK6tflite12RuntimeShape4DimsEi>
 800cd28:	6578      	str	r0, [r7, #84]	; 0x54
  const int filter_input_depth = filter_shape.Dims(3);
 800cd2a:	2103      	movs	r1, #3
 800cd2c:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800cd30:	f7f5 fd82 	bl	8002838 <_ZNK6tflite12RuntimeShape4DimsEi>
 800cd34:	6538      	str	r0, [r7, #80]	; 0x50
  const int groups = input_depth / filter_input_depth;
 800cd36:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cd38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd3a:	fb92 f3f3 	sdiv	r3, r2, r3
 800cd3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  TFLITE_DCHECK_EQ(input_depth % filter_input_depth, 0);
 800cd40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cd42:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cd44:	fb93 f2f2 	sdiv	r2, r3, r2
 800cd48:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cd4a:	fb01 f202 	mul.w	r2, r1, r2
 800cd4e:	1a9b      	subs	r3, r3, r2
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d001      	beq.n	800cd58 <_ZN6tflite21reference_integer_ops14ConvPerChannelIlEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x130>
 800cd54:	f012 fe84 	bl	801fa60 <abort>
  const int filters_per_group = output_depth / groups;
 800cd58:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800cd5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd5c:	fb92 f3f3 	sdiv	r3, r2, r3
 800cd60:	64bb      	str	r3, [r7, #72]	; 0x48
  const int output_height = output_shape.Dims(1);
 800cd62:	2101      	movs	r1, #1
 800cd64:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 800cd68:	f7f5 fd66 	bl	8002838 <_ZNK6tflite12RuntimeShape4DimsEi>
 800cd6c:	6478      	str	r0, [r7, #68]	; 0x44
  const int output_width = output_shape.Dims(2);
 800cd6e:	2102      	movs	r1, #2
 800cd70:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 800cd74:	f7f5 fd60 	bl	8002838 <_ZNK6tflite12RuntimeShape4DimsEi>
 800cd78:	6438      	str	r0, [r7, #64]	; 0x40
  for (int batch = 0; batch < batches; ++batch) {
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800cd80:	e126      	b.n	800cfd0 <_ZN6tflite21reference_integer_ops14ConvPerChannelIlEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x3a8>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 800cd82:	2300      	movs	r3, #0
 800cd84:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800cd88:	e117      	b.n	800cfba <_ZN6tflite21reference_integer_ops14ConvPerChannelIlEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x392>
      const int in_y_origin = (out_y * stride_height) - pad_height;
 800cd8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cd8e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800cd92:	fb03 f202 	mul.w	r2, r3, r2
 800cd96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cd98:	1ad3      	subs	r3, r2, r3
 800cd9a:	63fb      	str	r3, [r7, #60]	; 0x3c
      for (int out_x = 0; out_x < output_width; ++out_x) {
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800cda2:	e0ff      	b.n	800cfa4 <_ZN6tflite21reference_integer_ops14ConvPerChannelIlEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x37c>
        const int in_x_origin = (out_x * stride_width) - pad_width;
 800cda4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cda8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800cdac:	fb03 f202 	mul.w	r2, r3, r2
 800cdb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cdb2:	1ad3      	subs	r3, r2, r3
 800cdb4:	63bb      	str	r3, [r7, #56]	; 0x38
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800cdbc:	e0e7      	b.n	800cf8e <_ZN6tflite21reference_integer_ops14ConvPerChannelIlEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x366>
          auto group = out_channel / filters_per_group;
 800cdbe:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800cdc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cdc4:	fb92 f3f3 	sdiv	r3, r2, r3
 800cdc8:	637b      	str	r3, [r7, #52]	; 0x34
          AccumScalar acc = 0;
 800cdca:	2300      	movs	r3, #0
 800cdcc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800cdd6:	e081      	b.n	800cedc <_ZN6tflite21reference_integer_ops14ConvPerChannelIlEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x2b4>
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
 800cdd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cdda:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800cdde:	fb02 f303 	mul.w	r3, r2, r3
 800cde2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cde4:	4413      	add	r3, r2
 800cde6:	633b      	str	r3, [r7, #48]	; 0x30
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 800cde8:	2300      	movs	r3, #0
 800cdea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800cdee:	e06b      	b.n	800cec8 <_ZN6tflite21reference_integer_ops14ConvPerChannelIlEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x2a0>
              const int in_x = in_x_origin + dilation_width_factor * filter_x;
 800cdf0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cdf2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800cdf6:	fb02 f303 	mul.w	r3, r2, r3
 800cdfa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cdfc:	4413      	add	r3, r2
 800cdfe:	62fb      	str	r3, [r7, #44]	; 0x2c

              // Zero padding by omitting the areas outside the image.
              const bool is_point_inside_image =
                  (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
 800ce00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	db0c      	blt.n	800ce20 <_ZN6tflite21reference_integer_ops14ConvPerChannelIlEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x1f8>
 800ce06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ce08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ce0a:	429a      	cmp	r2, r3
 800ce0c:	da08      	bge.n	800ce20 <_ZN6tflite21reference_integer_ops14ConvPerChannelIlEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x1f8>
 800ce0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	db05      	blt.n	800ce20 <_ZN6tflite21reference_integer_ops14ConvPerChannelIlEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x1f8>
 800ce14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ce18:	429a      	cmp	r2, r3
 800ce1a:	da01      	bge.n	800ce20 <_ZN6tflite21reference_integer_ops14ConvPerChannelIlEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x1f8>
 800ce1c:	2301      	movs	r3, #1
 800ce1e:	e000      	b.n	800ce22 <_ZN6tflite21reference_integer_ops14ConvPerChannelIlEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x1fa>
 800ce20:	2300      	movs	r3, #0
              const bool is_point_inside_image =
 800ce22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                  (in_y < input_height);

              if (!is_point_inside_image) {
 800ce26:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ce2a:	f083 0301 	eor.w	r3, r3, #1
 800ce2e:	b2db      	uxtb	r3, r3
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d143      	bne.n	800cebc <_ZN6tflite21reference_integer_ops14ConvPerChannelIlEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x294>
                continue;
              }

              for (int in_channel = 0; in_channel < filter_input_depth;
 800ce34:	2300      	movs	r3, #0
 800ce36:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ce3a:	e039      	b.n	800ceb0 <_ZN6tflite21reference_integer_ops14ConvPerChannelIlEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x288>
                   ++in_channel) {
                int32_t input_val =
                    input_data[Offset(input_shape, batch, in_y, in_x,
                                      in_channel + group * filter_input_depth)];
 800ce3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce3e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ce40:	fb03 f202 	mul.w	r2, r3, r2
                    input_data[Offset(input_shape, batch, in_y, in_x,
 800ce44:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ce48:	4413      	add	r3, r2
 800ce4a:	9300      	str	r3, [sp, #0]
 800ce4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce50:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ce54:	6838      	ldr	r0, [r7, #0]
 800ce56:	f7fe fedd 	bl	800bc14 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 800ce5a:	4603      	mov	r3, r0
                                      in_channel + group * filter_input_depth)];
 800ce5c:	005b      	lsls	r3, r3, #1
 800ce5e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800ce62:	4413      	add	r3, r2
 800ce64:	f9b3 3000 	ldrsh.w	r3, [r3]
                int32_t input_val =
 800ce68:	627b      	str	r3, [r7, #36]	; 0x24
                int32_t filter_val = filter_data[Offset(
 800ce6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ce6e:	9300      	str	r3, [sp, #0]
 800ce70:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ce74:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800ce78:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800ce7c:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800ce80:	f7fe fec8 	bl	800bc14 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 800ce84:	4603      	mov	r3, r0
 800ce86:	461a      	mov	r2, r3
                    filter_shape, out_channel, filter_y, filter_x, in_channel)];
 800ce88:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ce8c:	4413      	add	r3, r2
 800ce8e:	f993 3000 	ldrsb.w	r3, [r3]
                int32_t filter_val = filter_data[Offset(
 800ce92:	623b      	str	r3, [r7, #32]
                // int64_t += int8_t * int16_t so the highest value we can
                // get from each accumulation is [-127, 127] * ([-32768,
                // 32767] -
                // [-32768, 32767]), which is [-8322945, 8322945].
                // log2(8322945) = 22.99.
                acc += filter_val * input_val;
 800ce94:	6a3b      	ldr	r3, [r7, #32]
 800ce96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ce98:	fb02 f303 	mul.w	r3, r2, r3
 800ce9c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800cea0:	4413      	add	r3, r2
 800cea2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
              for (int in_channel = 0; in_channel < filter_input_depth;
 800cea6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ceaa:	3301      	adds	r3, #1
 800ceac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ceb0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800ceb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ceb6:	429a      	cmp	r2, r3
 800ceb8:	dbc0      	blt.n	800ce3c <_ZN6tflite21reference_integer_ops14ConvPerChannelIlEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x214>
 800ceba:	e000      	b.n	800cebe <_ZN6tflite21reference_integer_ops14ConvPerChannelIlEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x296>
                continue;
 800cebc:	bf00      	nop
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 800cebe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cec2:	3301      	adds	r3, #1
 800cec4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800cec8:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800cecc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cece:	429a      	cmp	r2, r3
 800ced0:	db8e      	blt.n	800cdf0 <_ZN6tflite21reference_integer_ops14ConvPerChannelIlEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x1c8>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 800ced2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ced6:	3301      	adds	r3, #1
 800ced8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800cedc:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800cee0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cee2:	429a      	cmp	r2, r3
 800cee4:	f6ff af78 	blt.w	800cdd8 <_ZN6tflite21reference_integer_ops14ConvPerChannelIlEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x1b0>
              }
            }
          }
          if (bias_data) {
 800cee8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d00b      	beq.n	800cf08 <_ZN6tflite21reference_integer_ops14ConvPerChannelIlEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x2e0>
            acc += bias_data[out_channel];
 800cef0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cef4:	009b      	lsls	r3, r3, #2
 800cef6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800cefa:	4413      	add	r3, r2
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800cf02:	4413      	add	r3, r2
 800cf04:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
          }
          int32_t scaled_acc = MultiplyByQuantizedMultiplier(
              acc, output_multiplier[out_channel], output_shift[out_channel]);
 800cf08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cf0c:	009b      	lsls	r3, r3, #2
 800cf0e:	68ba      	ldr	r2, [r7, #8]
 800cf10:	4413      	add	r3, r2
          int32_t scaled_acc = MultiplyByQuantizedMultiplier(
 800cf12:	6819      	ldr	r1, [r3, #0]
              acc, output_multiplier[out_channel], output_shift[out_channel]);
 800cf14:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cf18:	009b      	lsls	r3, r3, #2
 800cf1a:	687a      	ldr	r2, [r7, #4]
 800cf1c:	4413      	add	r3, r2
          int32_t scaled_acc = MultiplyByQuantizedMultiplier(
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	461a      	mov	r2, r3
 800cf22:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800cf26:	f7f8 fd39 	bl	800599c <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 800cf2a:	4603      	mov	r3, r0
 800cf2c:	617b      	str	r3, [r7, #20]
          scaled_acc = std::max(scaled_acc, output_activation_min);
 800cf2e:	f107 021c 	add.w	r2, r7, #28
 800cf32:	f107 0314 	add.w	r3, r7, #20
 800cf36:	4611      	mov	r1, r2
 800cf38:	4618      	mov	r0, r3
 800cf3a:	f7f9 f9b6 	bl	80062aa <_ZSt3maxIlERKT_S2_S2_>
 800cf3e:	4603      	mov	r3, r0
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	617b      	str	r3, [r7, #20]
          scaled_acc = std::min(scaled_acc, output_activation_max);
 800cf44:	f107 0218 	add.w	r2, r7, #24
 800cf48:	f107 0314 	add.w	r3, r7, #20
 800cf4c:	4611      	mov	r1, r2
 800cf4e:	4618      	mov	r0, r3
 800cf50:	f7f9 f997 	bl	8006282 <_ZSt3minIlERKT_S2_S2_>
 800cf54:	4603      	mov	r3, r0
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	617b      	str	r3, [r7, #20]
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
 800cf5a:	697c      	ldr	r4, [r7, #20]
 800cf5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cf60:	9300      	str	r3, [sp, #0]
 800cf62:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cf66:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800cf6a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800cf6e:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 800cf72:	f7fe fe4f 	bl	800bc14 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 800cf76:	4603      	mov	r3, r0
 800cf78:	005b      	lsls	r3, r3, #1
 800cf7a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800cf7e:	4413      	add	r3, r2
 800cf80:	b222      	sxth	r2, r4
 800cf82:	801a      	strh	r2, [r3, #0]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 800cf84:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cf88:	3301      	adds	r3, #1
 800cf8a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800cf8e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800cf92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cf94:	429a      	cmp	r2, r3
 800cf96:	f6ff af12 	blt.w	800cdbe <_ZN6tflite21reference_integer_ops14ConvPerChannelIlEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x196>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 800cf9a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cf9e:	3301      	adds	r3, #1
 800cfa0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800cfa4:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800cfa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfaa:	429a      	cmp	r2, r3
 800cfac:	f6ff aefa 	blt.w	800cda4 <_ZN6tflite21reference_integer_ops14ConvPerChannelIlEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x17c>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 800cfb0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cfb4:	3301      	adds	r3, #1
 800cfb6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800cfba:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800cfbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cfc0:	429a      	cmp	r2, r3
 800cfc2:	f6ff aee2 	blt.w	800cd8a <_ZN6tflite21reference_integer_ops14ConvPerChannelIlEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x162>
  for (int batch = 0; batch < batches; ++batch) {
 800cfc6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800cfca:	3301      	adds	r3, #1
 800cfcc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800cfd0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800cfd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cfd6:	429a      	cmp	r2, r3
 800cfd8:	f6ff aed3 	blt.w	800cd82 <_ZN6tflite21reference_integer_ops14ConvPerChannelIlEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x15a>
              static_cast<int16_t>(scaled_acc);
        }
      }
    }
  }
}
 800cfdc:	bf00      	nop
 800cfde:	bf00      	nop
 800cfe0:	37ac      	adds	r7, #172	; 0xac
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	bd90      	pop	{r4, r7, pc}

0800cfe6 <_ZN6tflite5micro21GetOptionalTensorDataIxEEPKT_PK16TfLiteEvalTensor>:
const T* GetOptionalTensorData(const TfLiteEvalTensor* tensor) {
 800cfe6:	b480      	push	{r7}
 800cfe8:	b083      	sub	sp, #12
 800cfea:	af00      	add	r7, sp, #0
 800cfec:	6078      	str	r0, [r7, #4]
  return tensor == nullptr ? nullptr
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d002      	beq.n	800cffa <_ZN6tflite5micro21GetOptionalTensorDataIxEEPKT_PK16TfLiteEvalTensor+0x14>
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	681b      	ldr	r3, [r3, #0]
                           : reinterpret_cast<const T*>(tensor->data.raw);
 800cff8:	e000      	b.n	800cffc <_ZN6tflite5micro21GetOptionalTensorDataIxEEPKT_PK16TfLiteEvalTensor+0x16>
  return tensor == nullptr ? nullptr
 800cffa:	2300      	movs	r3, #0
}
 800cffc:	4618      	mov	r0, r3
 800cffe:	370c      	adds	r7, #12
 800d000:	46bd      	mov	sp, r7
 800d002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d006:	4770      	bx	lr

0800d008 <_ZN6tflite21reference_integer_ops14ConvPerChannelIxEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps>:
inline void ConvPerChannel(
 800d008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d00c:	b0ad      	sub	sp, #180	; 0xb4
 800d00e:	af02      	add	r7, sp, #8
 800d010:	60f8      	str	r0, [r7, #12]
 800d012:	60b9      	str	r1, [r7, #8]
 800d014:	607a      	str	r2, [r7, #4]
 800d016:	603b      	str	r3, [r7, #0]
  const int stride_width = params.stride_width;
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800d01e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  const int stride_height = params.stride_height;
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800d028:	67fb      	str	r3, [r7, #124]	; 0x7c
  const int dilation_width_factor = params.dilation_width_factor;
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800d030:	67bb      	str	r3, [r7, #120]	; 0x78
  const int dilation_height_factor = params.dilation_height_factor;
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800d038:	677b      	str	r3, [r7, #116]	; 0x74
  const int pad_width = params.padding_values.width;
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d040:	673b      	str	r3, [r7, #112]	; 0x70
  const int pad_height = params.padding_values.height;
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800d048:	66fb      	str	r3, [r7, #108]	; 0x6c
  const int32_t output_activation_min = params.quantized_activation_min;
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d04e:	61bb      	str	r3, [r7, #24]
  const int32_t output_activation_max = params.quantized_activation_max;
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d054:	617b      	str	r3, [r7, #20]
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 800d056:	69ba      	ldr	r2, [r7, #24]
 800d058:	697b      	ldr	r3, [r7, #20]
 800d05a:	429a      	cmp	r2, r3
 800d05c:	dd01      	ble.n	800d062 <_ZN6tflite21reference_integer_ops14ConvPerChannelIxEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x5a>
 800d05e:	f012 fcff 	bl	801fa60 <abort>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 800d062:	6838      	ldr	r0, [r7, #0]
 800d064:	f7f5 fbdc 	bl	8002820 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800d068:	4603      	mov	r3, r0
 800d06a:	2b04      	cmp	r3, #4
 800d06c:	d001      	beq.n	800d072 <_ZN6tflite21reference_integer_ops14ConvPerChannelIxEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x6a>
 800d06e:	f012 fcf7 	bl	801fa60 <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 800d072:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 800d076:	f7f5 fbd3 	bl	8002820 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800d07a:	4603      	mov	r3, r0
 800d07c:	2b04      	cmp	r3, #4
 800d07e:	d001      	beq.n	800d084 <_ZN6tflite21reference_integer_ops14ConvPerChannelIxEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x7c>
 800d080:	f012 fcee 	bl	801fa60 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 800d084:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 800d088:	f7f5 fbca 	bl	8002820 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800d08c:	4603      	mov	r3, r0
 800d08e:	2b04      	cmp	r3, #4
 800d090:	d001      	beq.n	800d096 <_ZN6tflite21reference_integer_ops14ConvPerChannelIxEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x8e>
 800d092:	f012 fce5 	bl	801fa60 <abort>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 800d096:	2300      	movs	r3, #0
 800d098:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800d09c:	2100      	movs	r1, #0
 800d09e:	6838      	ldr	r0, [r7, #0]
 800d0a0:	f7fe fe40 	bl	800bd24 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800d0a4:	66b8      	str	r0, [r7, #104]	; 0x68
  const int input_depth = input_shape.Dims(3);
 800d0a6:	2103      	movs	r1, #3
 800d0a8:	6838      	ldr	r0, [r7, #0]
 800d0aa:	f7f5 fbc5 	bl	8002838 <_ZNK6tflite12RuntimeShape4DimsEi>
 800d0ae:	6678      	str	r0, [r7, #100]	; 0x64
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
 800d0b0:	2303      	movs	r3, #3
 800d0b2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800d0b6:	2100      	movs	r1, #0
 800d0b8:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 800d0bc:	f7fe fe32 	bl	800bd24 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800d0c0:	6638      	str	r0, [r7, #96]	; 0x60
  if (bias_data) {
 800d0c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d009      	beq.n	800d0de <_ZN6tflite21reference_integer_ops14ConvPerChannelIxEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0xd6>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 800d0ca:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 800d0ce:	f7f5 fbd9 	bl	8002884 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 800d0d2:	4602      	mov	r2, r0
 800d0d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d0d6:	4293      	cmp	r3, r2
 800d0d8:	d001      	beq.n	800d0de <_ZN6tflite21reference_integer_ops14ConvPerChannelIxEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0xd6>
 800d0da:	f012 fcc1 	bl	801fa60 <abort>
  const int input_height = input_shape.Dims(1);
 800d0de:	2101      	movs	r1, #1
 800d0e0:	6838      	ldr	r0, [r7, #0]
 800d0e2:	f7f5 fba9 	bl	8002838 <_ZNK6tflite12RuntimeShape4DimsEi>
 800d0e6:	65f8      	str	r0, [r7, #92]	; 0x5c
  const int input_width = input_shape.Dims(2);
 800d0e8:	2102      	movs	r1, #2
 800d0ea:	6838      	ldr	r0, [r7, #0]
 800d0ec:	f7f5 fba4 	bl	8002838 <_ZNK6tflite12RuntimeShape4DimsEi>
 800d0f0:	65b8      	str	r0, [r7, #88]	; 0x58
  const int filter_height = filter_shape.Dims(1);
 800d0f2:	2101      	movs	r1, #1
 800d0f4:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 800d0f8:	f7f5 fb9e 	bl	8002838 <_ZNK6tflite12RuntimeShape4DimsEi>
 800d0fc:	6578      	str	r0, [r7, #84]	; 0x54
  const int filter_width = filter_shape.Dims(2);
 800d0fe:	2102      	movs	r1, #2
 800d100:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 800d104:	f7f5 fb98 	bl	8002838 <_ZNK6tflite12RuntimeShape4DimsEi>
 800d108:	6538      	str	r0, [r7, #80]	; 0x50
  const int filter_input_depth = filter_shape.Dims(3);
 800d10a:	2103      	movs	r1, #3
 800d10c:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 800d110:	f7f5 fb92 	bl	8002838 <_ZNK6tflite12RuntimeShape4DimsEi>
 800d114:	64f8      	str	r0, [r7, #76]	; 0x4c
  const int groups = input_depth / filter_input_depth;
 800d116:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d118:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d11a:	fb92 f3f3 	sdiv	r3, r2, r3
 800d11e:	64bb      	str	r3, [r7, #72]	; 0x48
  TFLITE_DCHECK_EQ(input_depth % filter_input_depth, 0);
 800d120:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d122:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d124:	fb93 f2f2 	sdiv	r2, r3, r2
 800d128:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800d12a:	fb01 f202 	mul.w	r2, r1, r2
 800d12e:	1a9b      	subs	r3, r3, r2
 800d130:	2b00      	cmp	r3, #0
 800d132:	d001      	beq.n	800d138 <_ZN6tflite21reference_integer_ops14ConvPerChannelIxEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x130>
 800d134:	f012 fc94 	bl	801fa60 <abort>
  const int filters_per_group = output_depth / groups;
 800d138:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d13a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d13c:	fb92 f3f3 	sdiv	r3, r2, r3
 800d140:	647b      	str	r3, [r7, #68]	; 0x44
  const int output_height = output_shape.Dims(1);
 800d142:	2101      	movs	r1, #1
 800d144:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 800d148:	f7f5 fb76 	bl	8002838 <_ZNK6tflite12RuntimeShape4DimsEi>
 800d14c:	6438      	str	r0, [r7, #64]	; 0x40
  const int output_width = output_shape.Dims(2);
 800d14e:	2102      	movs	r1, #2
 800d150:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 800d154:	f7f5 fb70 	bl	8002838 <_ZNK6tflite12RuntimeShape4DimsEi>
 800d158:	63f8      	str	r0, [r7, #60]	; 0x3c
  for (int batch = 0; batch < batches; ++batch) {
 800d15a:	2300      	movs	r3, #0
 800d15c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800d160:	e132      	b.n	800d3c8 <_ZN6tflite21reference_integer_ops14ConvPerChannelIxEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x3c0>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 800d162:	2300      	movs	r3, #0
 800d164:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d168:	e123      	b.n	800d3b2 <_ZN6tflite21reference_integer_ops14ConvPerChannelIxEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x3aa>
      const int in_y_origin = (out_y * stride_height) - pad_height;
 800d16a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d16e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800d170:	fb03 f202 	mul.w	r2, r3, r2
 800d174:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d176:	1ad3      	subs	r3, r2, r3
 800d178:	63bb      	str	r3, [r7, #56]	; 0x38
      for (int out_x = 0; out_x < output_width; ++out_x) {
 800d17a:	2300      	movs	r3, #0
 800d17c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d180:	e10c      	b.n	800d39c <_ZN6tflite21reference_integer_ops14ConvPerChannelIxEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x394>
        const int in_x_origin = (out_x * stride_width) - pad_width;
 800d182:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d186:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d18a:	fb03 f202 	mul.w	r2, r3, r2
 800d18e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d190:	1ad3      	subs	r3, r2, r3
 800d192:	637b      	str	r3, [r7, #52]	; 0x34
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 800d194:	2300      	movs	r3, #0
 800d196:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d19a:	e0f4      	b.n	800d386 <_ZN6tflite21reference_integer_ops14ConvPerChannelIxEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x37e>
          auto group = out_channel / filters_per_group;
 800d19c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800d1a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d1a2:	fb92 f3f3 	sdiv	r3, r2, r3
 800d1a6:	633b      	str	r3, [r7, #48]	; 0x30
          AccumScalar acc = 0;
 800d1a8:	f04f 0200 	mov.w	r2, #0
 800d1ac:	f04f 0300 	mov.w	r3, #0
 800d1b0:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 800d1b4:	2300      	movs	r3, #0
 800d1b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800d1ba:	e087      	b.n	800d2cc <_ZN6tflite21reference_integer_ops14ConvPerChannelIxEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x2c4>
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
 800d1bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d1be:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800d1c2:	fb02 f303 	mul.w	r3, r2, r3
 800d1c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d1c8:	4413      	add	r3, r2
 800d1ca:	62fb      	str	r3, [r7, #44]	; 0x2c
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d1d2:	e071      	b.n	800d2b8 <_ZN6tflite21reference_integer_ops14ConvPerChannelIxEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x2b0>
              const int in_x = in_x_origin + dilation_width_factor * filter_x;
 800d1d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d1d6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d1da:	fb02 f303 	mul.w	r3, r2, r3
 800d1de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d1e0:	4413      	add	r3, r2
 800d1e2:	62bb      	str	r3, [r7, #40]	; 0x28
                  (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
 800d1e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	db0c      	blt.n	800d204 <_ZN6tflite21reference_integer_ops14ConvPerChannelIxEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x1fc>
 800d1ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d1ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d1ee:	429a      	cmp	r2, r3
 800d1f0:	da08      	bge.n	800d204 <_ZN6tflite21reference_integer_ops14ConvPerChannelIxEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x1fc>
 800d1f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	db05      	blt.n	800d204 <_ZN6tflite21reference_integer_ops14ConvPerChannelIxEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x1fc>
 800d1f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d1fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d1fc:	429a      	cmp	r2, r3
 800d1fe:	da01      	bge.n	800d204 <_ZN6tflite21reference_integer_ops14ConvPerChannelIxEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x1fc>
 800d200:	2301      	movs	r3, #1
 800d202:	e000      	b.n	800d206 <_ZN6tflite21reference_integer_ops14ConvPerChannelIxEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x1fe>
 800d204:	2300      	movs	r3, #0
              const bool is_point_inside_image =
 800d206:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              if (!is_point_inside_image) {
 800d20a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d20e:	f083 0301 	eor.w	r3, r3, #1
 800d212:	b2db      	uxtb	r3, r3
 800d214:	2b00      	cmp	r3, #0
 800d216:	d149      	bne.n	800d2ac <_ZN6tflite21reference_integer_ops14ConvPerChannelIxEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x2a4>
              for (int in_channel = 0; in_channel < filter_input_depth;
 800d218:	2300      	movs	r3, #0
 800d21a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d21e:	e03f      	b.n	800d2a0 <_ZN6tflite21reference_integer_ops14ConvPerChannelIxEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x298>
                                      in_channel + group * filter_input_depth)];
 800d220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d222:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d224:	fb03 f202 	mul.w	r2, r3, r2
                    input_data[Offset(input_shape, batch, in_y, in_x,
 800d228:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d22c:	4413      	add	r3, r2
 800d22e:	9300      	str	r3, [sp, #0]
 800d230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d232:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d234:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d238:	6838      	ldr	r0, [r7, #0]
 800d23a:	f7fe fceb 	bl	800bc14 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 800d23e:	4603      	mov	r3, r0
                                      in_channel + group * filter_input_depth)];
 800d240:	005b      	lsls	r3, r3, #1
 800d242:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d246:	4413      	add	r3, r2
 800d248:	f9b3 3000 	ldrsh.w	r3, [r3]
                int32_t input_val =
 800d24c:	623b      	str	r3, [r7, #32]
                int32_t filter_val = filter_data[Offset(
 800d24e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d252:	9300      	str	r3, [sp, #0]
 800d254:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d258:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800d25c:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800d260:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 800d264:	f7fe fcd6 	bl	800bc14 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 800d268:	4603      	mov	r3, r0
 800d26a:	461a      	mov	r2, r3
                    filter_shape, out_channel, filter_y, filter_x, in_channel)];
 800d26c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d270:	4413      	add	r3, r2
 800d272:	f993 3000 	ldrsb.w	r3, [r3]
                int32_t filter_val = filter_data[Offset(
 800d276:	61fb      	str	r3, [r7, #28]
                acc += filter_val * input_val;
 800d278:	69fb      	ldr	r3, [r7, #28]
 800d27a:	6a3a      	ldr	r2, [r7, #32]
 800d27c:	fb02 f303 	mul.w	r3, r2, r3
 800d280:	17da      	asrs	r2, r3, #31
 800d282:	461c      	mov	r4, r3
 800d284:	4615      	mov	r5, r2
 800d286:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800d28a:	eb12 0804 	adds.w	r8, r2, r4
 800d28e:	eb43 0905 	adc.w	r9, r3, r5
 800d292:	e9c7 8924 	strd	r8, r9, [r7, #144]	; 0x90
              for (int in_channel = 0; in_channel < filter_input_depth;
 800d296:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d29a:	3301      	adds	r3, #1
 800d29c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d2a0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800d2a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d2a6:	429a      	cmp	r2, r3
 800d2a8:	dbba      	blt.n	800d220 <_ZN6tflite21reference_integer_ops14ConvPerChannelIxEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x218>
 800d2aa:	e000      	b.n	800d2ae <_ZN6tflite21reference_integer_ops14ConvPerChannelIxEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x2a6>
                continue;
 800d2ac:	bf00      	nop
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 800d2ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d2b2:	3301      	adds	r3, #1
 800d2b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d2b8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d2bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d2be:	429a      	cmp	r2, r3
 800d2c0:	db88      	blt.n	800d1d4 <_ZN6tflite21reference_integer_ops14ConvPerChannelIxEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x1cc>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 800d2c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d2c6:	3301      	adds	r3, #1
 800d2c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800d2cc:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800d2d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d2d2:	429a      	cmp	r2, r3
 800d2d4:	f6ff af72 	blt.w	800d1bc <_ZN6tflite21reference_integer_ops14ConvPerChannelIxEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x1b4>
          if (bias_data) {
 800d2d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d00f      	beq.n	800d300 <_ZN6tflite21reference_integer_ops14ConvPerChannelIxEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x2f8>
            acc += bias_data[out_channel];
 800d2e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d2e4:	00db      	lsls	r3, r3, #3
 800d2e6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800d2ea:	4413      	add	r3, r2
 800d2ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2f0:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800d2f4:	eb10 0a02 	adds.w	sl, r0, r2
 800d2f8:	eb41 0b03 	adc.w	fp, r1, r3
 800d2fc:	e9c7 ab24 	strd	sl, fp, [r7, #144]	; 0x90
              acc, output_multiplier[out_channel], output_shift[out_channel]);
 800d300:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d304:	009b      	lsls	r3, r3, #2
 800d306:	68ba      	ldr	r2, [r7, #8]
 800d308:	4413      	add	r3, r2
          int32_t scaled_acc = MultiplyByQuantizedMultiplier(
 800d30a:	6819      	ldr	r1, [r3, #0]
              acc, output_multiplier[out_channel], output_shift[out_channel]);
 800d30c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d310:	009b      	lsls	r3, r3, #2
 800d312:	687a      	ldr	r2, [r7, #4]
 800d314:	4413      	add	r3, r2
          int32_t scaled_acc = MultiplyByQuantizedMultiplier(
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	460a      	mov	r2, r1
 800d31a:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800d31e:	f7f8 fb61 	bl	80059e4 <_ZN6tflite29MultiplyByQuantizedMultiplierExli>
 800d322:	4603      	mov	r3, r0
 800d324:	613b      	str	r3, [r7, #16]
          scaled_acc = std::max(scaled_acc, output_activation_min);
 800d326:	f107 0218 	add.w	r2, r7, #24
 800d32a:	f107 0310 	add.w	r3, r7, #16
 800d32e:	4611      	mov	r1, r2
 800d330:	4618      	mov	r0, r3
 800d332:	f7f8 ffba 	bl	80062aa <_ZSt3maxIlERKT_S2_S2_>
 800d336:	4603      	mov	r3, r0
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	613b      	str	r3, [r7, #16]
          scaled_acc = std::min(scaled_acc, output_activation_max);
 800d33c:	f107 0214 	add.w	r2, r7, #20
 800d340:	f107 0310 	add.w	r3, r7, #16
 800d344:	4611      	mov	r1, r2
 800d346:	4618      	mov	r0, r3
 800d348:	f7f8 ff9b 	bl	8006282 <_ZSt3minIlERKT_S2_S2_>
 800d34c:	4603      	mov	r3, r0
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	613b      	str	r3, [r7, #16]
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
 800d352:	693e      	ldr	r6, [r7, #16]
 800d354:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d358:	9300      	str	r3, [sp, #0]
 800d35a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d35e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800d362:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d366:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 800d36a:	f7fe fc53 	bl	800bc14 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 800d36e:	4603      	mov	r3, r0
 800d370:	005b      	lsls	r3, r3, #1
 800d372:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800d376:	4413      	add	r3, r2
 800d378:	b232      	sxth	r2, r6
 800d37a:	801a      	strh	r2, [r3, #0]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 800d37c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d380:	3301      	adds	r3, #1
 800d382:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d386:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800d38a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d38c:	429a      	cmp	r2, r3
 800d38e:	f6ff af05 	blt.w	800d19c <_ZN6tflite21reference_integer_ops14ConvPerChannelIxEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x194>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 800d392:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d396:	3301      	adds	r3, #1
 800d398:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d39c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800d3a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3a2:	429a      	cmp	r2, r3
 800d3a4:	f6ff aeed 	blt.w	800d182 <_ZN6tflite21reference_integer_ops14ConvPerChannelIxEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x17a>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 800d3a8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d3ac:	3301      	adds	r3, #1
 800d3ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d3b2:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800d3b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d3b8:	429a      	cmp	r2, r3
 800d3ba:	f6ff aed6 	blt.w	800d16a <_ZN6tflite21reference_integer_ops14ConvPerChannelIxEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x162>
  for (int batch = 0; batch < batches; ++batch) {
 800d3be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d3c2:	3301      	adds	r3, #1
 800d3c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800d3c8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800d3cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d3ce:	429a      	cmp	r2, r3
 800d3d0:	f6ff aec7 	blt.w	800d162 <_ZN6tflite21reference_integer_ops14ConvPerChannelIxEEvRKNS_10ConvParamsEPKlS6_RKNS_12RuntimeShapeEPKsS9_PKaS9_PKT_S9_Ps+0x15a>
}
 800d3d4:	bf00      	nop
 800d3d6:	bf00      	nop
 800d3d8:	37ac      	adds	r7, #172	; 0xac
 800d3da:	46bd      	mov	sp, r7
 800d3dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d3e0 <_ZN6tflite24ComputePaddingWithOffsetEiiiiiPi>:

// It's not guaranteed that padding is symmetric. It's important to keep
// offset for algorithms need all paddings.
inline int ComputePaddingWithOffset(int stride, int dilation_rate, int in_size,
                                    int filter_size, int out_size,
                                    int* offset) {
 800d3e0:	b480      	push	{r7}
 800d3e2:	b087      	sub	sp, #28
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	60f8      	str	r0, [r7, #12]
 800d3e8:	60b9      	str	r1, [r7, #8]
 800d3ea:	607a      	str	r2, [r7, #4]
 800d3ec:	603b      	str	r3, [r7, #0]
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 800d3ee:	683b      	ldr	r3, [r7, #0]
 800d3f0:	3b01      	subs	r3, #1
 800d3f2:	68ba      	ldr	r2, [r7, #8]
 800d3f4:	fb02 f303 	mul.w	r3, r2, r3
 800d3f8:	3301      	adds	r3, #1
 800d3fa:	617b      	str	r3, [r7, #20]
  int total_padding =
      ((out_size - 1) * stride + effective_filter_size - in_size);
 800d3fc:	6a3b      	ldr	r3, [r7, #32]
 800d3fe:	3b01      	subs	r3, #1
 800d400:	68fa      	ldr	r2, [r7, #12]
 800d402:	fb03 f202 	mul.w	r2, r3, r2
 800d406:	697b      	ldr	r3, [r7, #20]
 800d408:	441a      	add	r2, r3
  int total_padding =
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	1ad3      	subs	r3, r2, r3
 800d40e:	613b      	str	r3, [r7, #16]
  total_padding = total_padding > 0 ? total_padding : 0;
 800d410:	693b      	ldr	r3, [r7, #16]
 800d412:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d416:	613b      	str	r3, [r7, #16]
  *offset = total_padding % 2;
 800d418:	693b      	ldr	r3, [r7, #16]
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	f003 0301 	and.w	r3, r3, #1
 800d420:	bfb8      	it	lt
 800d422:	425b      	neglt	r3, r3
 800d424:	461a      	mov	r2, r3
 800d426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d428:	601a      	str	r2, [r3, #0]
  return total_padding / 2;
 800d42a:	693b      	ldr	r3, [r7, #16]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	da00      	bge.n	800d432 <_ZN6tflite24ComputePaddingWithOffsetEiiiiiPi+0x52>
 800d430:	3301      	adds	r3, #1
 800d432:	105b      	asrs	r3, r3, #1
}
 800d434:	4618      	mov	r0, r3
 800d436:	371c      	adds	r7, #28
 800d438:	46bd      	mov	sp, r7
 800d43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d43e:	4770      	bx	lr

0800d440 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>:

// Matching GetWindowedOutputSize in TensorFlow.
inline int ComputeOutSize(TfLitePadding padding, int image_size,
                          int filter_size, int stride, int dilation_rate = 1) {
 800d440:	b480      	push	{r7}
 800d442:	b087      	sub	sp, #28
 800d444:	af00      	add	r7, sp, #0
 800d446:	60b9      	str	r1, [r7, #8]
 800d448:	607a      	str	r2, [r7, #4]
 800d44a:	603b      	str	r3, [r7, #0]
 800d44c:	4603      	mov	r3, r0
 800d44e:	73fb      	strb	r3, [r7, #15]
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	3b01      	subs	r3, #1
 800d454:	6a3a      	ldr	r2, [r7, #32]
 800d456:	fb02 f303 	mul.w	r3, r2, r3
 800d45a:	3301      	adds	r3, #1
 800d45c:	617b      	str	r3, [r7, #20]

  // TODO(b/186448822): This uses 0 since the function has no other way to
  // report error case
  if (stride == 0) return 0;
 800d45e:	683b      	ldr	r3, [r7, #0]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d101      	bne.n	800d468 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x28>
 800d464:	2300      	movs	r3, #0
 800d466:	e017      	b.n	800d498 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x58>

  switch (padding) {
 800d468:	7bfb      	ldrb	r3, [r7, #15]
 800d46a:	2b01      	cmp	r3, #1
 800d46c:	d002      	beq.n	800d474 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x34>
 800d46e:	2b02      	cmp	r3, #2
 800d470:	d008      	beq.n	800d484 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x44>
 800d472:	e010      	b.n	800d496 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x56>
    case kTfLitePaddingSame:
      return (image_size + stride - 1) / stride;
 800d474:	68ba      	ldr	r2, [r7, #8]
 800d476:	683b      	ldr	r3, [r7, #0]
 800d478:	4413      	add	r3, r2
 800d47a:	1e5a      	subs	r2, r3, #1
 800d47c:	683b      	ldr	r3, [r7, #0]
 800d47e:	fb92 f3f3 	sdiv	r3, r2, r3
 800d482:	e009      	b.n	800d498 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x58>
    case kTfLitePaddingValid:
      return (image_size + stride - effective_filter_size) / stride;
 800d484:	68ba      	ldr	r2, [r7, #8]
 800d486:	683b      	ldr	r3, [r7, #0]
 800d488:	441a      	add	r2, r3
 800d48a:	697b      	ldr	r3, [r7, #20]
 800d48c:	1ad2      	subs	r2, r2, r3
 800d48e:	683b      	ldr	r3, [r7, #0]
 800d490:	fb92 f3f3 	sdiv	r3, r2, r3
 800d494:	e000      	b.n	800d498 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x58>
    default:
      return 0;
 800d496:	2300      	movs	r3, #0
  }
}
 800d498:	4618      	mov	r0, r3
 800d49a:	371c      	adds	r7, #28
 800d49c:	46bd      	mov	sp, r7
 800d49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a2:	4770      	bx	lr

0800d4a4 <_ZN6tflite25ComputePaddingHeightWidthEiiiiiiii13TfLitePaddingPiS1_>:

inline TfLitePaddingValues ComputePaddingHeightWidth(
    int stride_height, int stride_width, int dilation_rate_height,
    int dilation_rate_width, int in_height, int in_width, int filter_height,
    int filter_width, TfLitePadding padding, int* out_height, int* out_width) {
 800d4a4:	b580      	push	{r7, lr}
 800d4a6:	b088      	sub	sp, #32
 800d4a8:	af02      	add	r7, sp, #8
 800d4aa:	60f8      	str	r0, [r7, #12]
 800d4ac:	60b9      	str	r1, [r7, #8]
 800d4ae:	607a      	str	r2, [r7, #4]
 800d4b0:	603b      	str	r3, [r7, #0]
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
 800d4b2:	f897 0034 	ldrb.w	r0, [r7, #52]	; 0x34
 800d4b6:	6a3b      	ldr	r3, [r7, #32]
 800d4b8:	9300      	str	r3, [sp, #0]
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d4be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d4c0:	f7ff ffbe 	bl	800d440 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
 800d4c4:	4602      	mov	r2, r0
 800d4c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4c8:	601a      	str	r2, [r3, #0]
                              dilation_rate_width);
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
 800d4ca:	f897 0034 	ldrb.w	r0, [r7, #52]	; 0x34
 800d4ce:	683b      	ldr	r3, [r7, #0]
 800d4d0:	9300      	str	r3, [sp, #0]
 800d4d2:	68bb      	ldr	r3, [r7, #8]
 800d4d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d4d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d4d8:	f7ff ffb2 	bl	800d440 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
 800d4dc:	4602      	mov	r2, r0
 800d4de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4e0:	601a      	str	r2, [r3, #0]
                               dilation_rate_height);

  TfLitePaddingValues padding_values;
  int offset = 0;
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	617b      	str	r3, [r7, #20]
  padding_values.height =
      ComputePaddingWithOffset(stride_height, dilation_rate_height, in_height,
 800d4e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	f107 0214 	add.w	r2, r7, #20
 800d4ee:	9201      	str	r2, [sp, #4]
 800d4f0:	9300      	str	r3, [sp, #0]
 800d4f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d4f6:	6839      	ldr	r1, [r7, #0]
 800d4f8:	68b8      	ldr	r0, [r7, #8]
 800d4fa:	f7ff ff71 	bl	800d3e0 <_ZN6tflite24ComputePaddingWithOffsetEiiiiiPi>
 800d4fe:	4602      	mov	r2, r0
  padding_values.height =
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	605a      	str	r2, [r3, #4]
                               filter_height, *out_height, &offset);
  padding_values.height_offset = offset;
 800d504:	697a      	ldr	r2, [r7, #20]
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	60da      	str	r2, [r3, #12]
  padding_values.width =
      ComputePaddingWithOffset(stride_width, dilation_rate_width, in_width,
 800d50a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	f107 0214 	add.w	r2, r7, #20
 800d512:	9201      	str	r2, [sp, #4]
 800d514:	9300      	str	r3, [sp, #0]
 800d516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d518:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d51a:	6a39      	ldr	r1, [r7, #32]
 800d51c:	6878      	ldr	r0, [r7, #4]
 800d51e:	f7ff ff5f 	bl	800d3e0 <_ZN6tflite24ComputePaddingWithOffsetEiiiiiPi>
 800d522:	4602      	mov	r2, r0
  padding_values.width =
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	601a      	str	r2, [r3, #0]
                               filter_width, *out_width, &offset);
  padding_values.width_offset = offset;
 800d528:	697a      	ldr	r2, [r7, #20]
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	609a      	str	r2, [r3, #8]
  return padding_values;
 800d52e:	bf00      	nop
}
 800d530:	68f8      	ldr	r0, [r7, #12]
 800d532:	3718      	adds	r7, #24
 800d534:	46bd      	mov	sp, r7
 800d536:	bd80      	pop	{r7, pc}

0800d538 <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE>:
const int kConvQuantizedDimension = 0;

// Returns a ConvParams struct with all the parameters needed for a
// float computation.
ConvParams ConvParamsFloat(const TfLiteConvParams& params,
                           const OpDataConv& data) {
 800d538:	b580      	push	{r7, lr}
 800d53a:	b084      	sub	sp, #16
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	60f8      	str	r0, [r7, #12]
 800d540:	60b9      	str	r1, [r7, #8]
 800d542:	607a      	str	r2, [r7, #4]
  ConvParams op_params;
  CalculateActivationRange(params.activation, &op_params.float_activation_min,
 800d544:	68bb      	ldr	r3, [r7, #8]
 800d546:	7b18      	ldrb	r0, [r3, #12]
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	3330      	adds	r3, #48	; 0x30
 800d552:	4619      	mov	r1, r3
 800d554:	f7fe fb0c 	bl	800bb70 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
                           &op_params.float_activation_max);
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
 800d558:	68bb      	ldr	r3, [r7, #8]
 800d55a:	781b      	ldrb	r3, [r3, #0]
 800d55c:	4618      	mov	r0, r3
 800d55e:	f003 f9e0 	bl	8010922 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
 800d562:	4603      	mov	r3, r0
 800d564:	461a      	mov	r2, r3
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	701a      	strb	r2, [r3, #0]
  op_params.padding_values.width = data.padding.width;
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	b21a      	sxth	r2, r3
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	805a      	strh	r2, [r3, #2]
  op_params.padding_values.height = data.padding.height;
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	685b      	ldr	r3, [r3, #4]
 800d578:	b21a      	sxth	r2, r3
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	809a      	strh	r2, [r3, #4]
  op_params.stride_width = params.stride_width;
 800d57e:	68bb      	ldr	r3, [r7, #8]
 800d580:	685b      	ldr	r3, [r3, #4]
 800d582:	b21a      	sxth	r2, r3
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	815a      	strh	r2, [r3, #10]
  op_params.stride_height = params.stride_height;
 800d588:	68bb      	ldr	r3, [r7, #8]
 800d58a:	689b      	ldr	r3, [r3, #8]
 800d58c:	b21a      	sxth	r2, r3
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	819a      	strh	r2, [r3, #12]
  op_params.dilation_width_factor = params.dilation_width_factor;
 800d592:	68bb      	ldr	r3, [r7, #8]
 800d594:	691b      	ldr	r3, [r3, #16]
 800d596:	b21a      	sxth	r2, r3
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	81da      	strh	r2, [r3, #14]
  op_params.dilation_height_factor = params.dilation_height_factor;
 800d59c:	68bb      	ldr	r3, [r7, #8]
 800d59e:	695b      	ldr	r3, [r3, #20]
 800d5a0:	b21a      	sxth	r2, r3
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	821a      	strh	r2, [r3, #16]
  return op_params;
 800d5a6:	bf00      	nop
}
 800d5a8:	68f8      	ldr	r0, [r7, #12]
 800d5aa:	3710      	adds	r7, #16
 800d5ac:	46bd      	mov	sp, r7
 800d5ae:	bd80      	pop	{r7, pc}

0800d5b0 <_ZN6tflite19ConvParamsQuantizedERK16TfLiteConvParamsRKNS_10OpDataConvE>:

// Returns a ConvParams struct with all the parameters needed for a
// quantized computation.
ConvParams ConvParamsQuantized(const TfLiteConvParams& params,
                               const OpDataConv& data) {
 800d5b0:	b580      	push	{r7, lr}
 800d5b2:	b084      	sub	sp, #16
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	60f8      	str	r0, [r7, #12]
 800d5b8:	60b9      	str	r1, [r7, #8]
 800d5ba:	607a      	str	r2, [r7, #4]
  ConvParams op_params;
  op_params.input_offset = -data.input_zero_point;
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	691b      	ldr	r3, [r3, #16]
 800d5c0:	425a      	negs	r2, r3
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	615a      	str	r2, [r3, #20]
  op_params.weights_offset = -data.filter_zero_point;
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	695b      	ldr	r3, [r3, #20]
 800d5ca:	425a      	negs	r2, r3
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	619a      	str	r2, [r3, #24]
  op_params.output_offset = data.output_zero_point;
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	699a      	ldr	r2, [r3, #24]
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	61da      	str	r2, [r3, #28]
  op_params.output_multiplier = data.output_multiplier;
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	69da      	ldr	r2, [r3, #28]
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	621a      	str	r2, [r3, #32]
  op_params.output_shift = -data.output_shift;
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	6a1b      	ldr	r3, [r3, #32]
 800d5e4:	425a      	negs	r2, r3
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	625a      	str	r2, [r3, #36]	; 0x24
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
 800d5ea:	68bb      	ldr	r3, [r7, #8]
 800d5ec:	781b      	ldrb	r3, [r3, #0]
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	f003 f997 	bl	8010922 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
 800d5f4:	4603      	mov	r3, r0
 800d5f6:	461a      	mov	r2, r3
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	701a      	strb	r2, [r3, #0]
  op_params.padding_values.height = data.padding.height;
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	685b      	ldr	r3, [r3, #4]
 800d600:	b21a      	sxth	r2, r3
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	809a      	strh	r2, [r3, #4]
  op_params.padding_values.width = data.padding.width;
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	b21a      	sxth	r2, r3
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	805a      	strh	r2, [r3, #2]
  op_params.stride_height = params.stride_height;
 800d610:	68bb      	ldr	r3, [r7, #8]
 800d612:	689b      	ldr	r3, [r3, #8]
 800d614:	b21a      	sxth	r2, r3
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	819a      	strh	r2, [r3, #12]
  op_params.stride_width = params.stride_width;
 800d61a:	68bb      	ldr	r3, [r7, #8]
 800d61c:	685b      	ldr	r3, [r3, #4]
 800d61e:	b21a      	sxth	r2, r3
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	815a      	strh	r2, [r3, #10]
  op_params.dilation_height_factor = params.dilation_height_factor;
 800d624:	68bb      	ldr	r3, [r7, #8]
 800d626:	695b      	ldr	r3, [r3, #20]
 800d628:	b21a      	sxth	r2, r3
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	821a      	strh	r2, [r3, #16]
  op_params.dilation_width_factor = params.dilation_width_factor;
 800d62e:	68bb      	ldr	r3, [r7, #8]
 800d630:	691b      	ldr	r3, [r3, #16]
 800d632:	b21a      	sxth	r2, r3
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	81da      	strh	r2, [r3, #14]
  op_params.quantized_activation_min = data.output_activation_min;
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	629a      	str	r2, [r3, #40]	; 0x28
  op_params.quantized_activation_max = data.output_activation_max;
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	62da      	str	r2, [r3, #44]	; 0x2c
  return op_params;
 800d648:	bf00      	nop
}
 800d64a:	68f8      	ldr	r0, [r7, #12]
 800d64c:	3710      	adds	r7, #16
 800d64e:	46bd      	mov	sp, r7
 800d650:	bd80      	pop	{r7, pc}

0800d652 <_ZN6tflite8ConvInitEP13TfLiteContextPKcj>:

void* ConvInit(TfLiteContext* context, const char* buffer, size_t length) {
 800d652:	b580      	push	{r7, lr}
 800d654:	b084      	sub	sp, #16
 800d656:	af00      	add	r7, sp, #0
 800d658:	60f8      	str	r0, [r7, #12]
 800d65a:	60b9      	str	r1, [r7, #8]
 800d65c:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d662:	2b00      	cmp	r3, #0
 800d664:	d101      	bne.n	800d66a <_ZN6tflite8ConvInitEP13TfLiteContextPKcj+0x18>
 800d666:	f012 f9fb 	bl	801fa60 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpDataConv));
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d66e:	2138      	movs	r1, #56	; 0x38
 800d670:	68f8      	ldr	r0, [r7, #12]
 800d672:	4798      	blx	r3
 800d674:	4603      	mov	r3, r0
}
 800d676:	4618      	mov	r0, r3
 800d678:	3710      	adds	r7, #16
 800d67a:	46bd      	mov	sp, r7
 800d67c:	bd80      	pop	{r7, pc}
	...

0800d680 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>:
TfLiteStatus CalculateOpDataConv(TfLiteContext* context, TfLiteNode* node,
                                 const TfLiteConvParams& params, int width,
                                 int height, int filter_width,
                                 int filter_height, int out_width,
                                 int out_height, const TfLiteType data_type,
                                 OpDataConv* data) {
 800d680:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d682:	b09d      	sub	sp, #116	; 0x74
 800d684:	af0a      	add	r7, sp, #40	; 0x28
 800d686:	6278      	str	r0, [r7, #36]	; 0x24
 800d688:	6239      	str	r1, [r7, #32]
 800d68a:	61fa      	str	r2, [r7, #28]
 800d68c:	61bb      	str	r3, [r7, #24]
  bool has_bias = node->inputs->size == 3;
 800d68e:	6a3b      	ldr	r3, [r7, #32]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	2b03      	cmp	r3, #3
 800d696:	bf0c      	ite	eq
 800d698:	2301      	moveq	r3, #1
 800d69a:	2300      	movne	r3, #0
 800d69c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  // Check number of inputs/outputs
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
 800d6a0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d6a4:	f083 0301 	eor.w	r3, r3, #1
 800d6a8:	b2db      	uxtb	r3, r3
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d00f      	beq.n	800d6ce <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
 800d6ae:	6a3b      	ldr	r3, [r7, #32]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	2b02      	cmp	r3, #2
 800d6b6:	d00a      	beq.n	800d6ce <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
 800d6b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6ba:	695c      	ldr	r4, [r3, #20]
 800d6bc:	4b7a      	ldr	r3, [pc, #488]	; (800d8a8 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x228>)
 800d6be:	9300      	str	r3, [sp, #0]
 800d6c0:	2357      	movs	r3, #87	; 0x57
 800d6c2:	4a7a      	ldr	r2, [pc, #488]	; (800d8ac <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x22c>)
 800d6c4:	497a      	ldr	r1, [pc, #488]	; (800d8b0 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x230>)
 800d6c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d6c8:	47a0      	blx	r4
 800d6ca:	2301      	movs	r3, #1
 800d6cc:	e0e7      	b.n	800d89e <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x21e>
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
 800d6ce:	6a3b      	ldr	r3, [r7, #32]
 800d6d0:	685b      	ldr	r3, [r3, #4]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	2b01      	cmp	r3, #1
 800d6d6:	d012      	beq.n	800d6fe <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x7e>
 800d6d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6da:	695c      	ldr	r4, [r3, #20]
 800d6dc:	6a3b      	ldr	r3, [r7, #32]
 800d6de:	685b      	ldr	r3, [r3, #4]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	2201      	movs	r2, #1
 800d6e4:	9203      	str	r2, [sp, #12]
 800d6e6:	9302      	str	r3, [sp, #8]
 800d6e8:	4b72      	ldr	r3, [pc, #456]	; (800d8b4 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x234>)
 800d6ea:	9301      	str	r3, [sp, #4]
 800d6ec:	4b72      	ldr	r3, [pc, #456]	; (800d8b8 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x238>)
 800d6ee:	9300      	str	r3, [sp, #0]
 800d6f0:	2358      	movs	r3, #88	; 0x58
 800d6f2:	4a6e      	ldr	r2, [pc, #440]	; (800d8ac <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x22c>)
 800d6f4:	4971      	ldr	r1, [pc, #452]	; (800d8bc <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x23c>)
 800d6f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d6f8:	47a0      	blx	r4
 800d6fa:	2301      	movs	r3, #1
 800d6fc:	e0cf      	b.n	800d89e <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x21e>

  // Matching GetWindowedOutputSize in TensorFlow.
  auto padding = params.padding;
 800d6fe:	69fb      	ldr	r3, [r7, #28]
 800d700:	781b      	ldrb	r3, [r3, #0]
 800d702:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  data->padding = ComputePaddingHeightWidth(
      params.stride_height, params.stride_width, params.dilation_height_factor,
 800d706:	69fb      	ldr	r3, [r7, #28]
 800d708:	6899      	ldr	r1, [r3, #8]
 800d70a:	69fb      	ldr	r3, [r7, #28]
 800d70c:	685c      	ldr	r4, [r3, #4]
 800d70e:	69fb      	ldr	r3, [r7, #28]
 800d710:	695d      	ldr	r5, [r3, #20]
      params.dilation_width_factor, height, width, filter_height, filter_width,
 800d712:	69fb      	ldr	r3, [r7, #28]
 800d714:	691b      	ldr	r3, [r3, #16]
  data->padding = ComputePaddingHeightWidth(
 800d716:	6fbe      	ldr	r6, [r7, #120]	; 0x78
 800d718:	f107 0008 	add.w	r0, r7, #8
 800d71c:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800d720:	9207      	str	r2, [sp, #28]
 800d722:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800d726:	9206      	str	r2, [sp, #24]
 800d728:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 800d72c:	9205      	str	r2, [sp, #20]
 800d72e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d730:	9204      	str	r2, [sp, #16]
 800d732:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d734:	9203      	str	r2, [sp, #12]
 800d736:	69ba      	ldr	r2, [r7, #24]
 800d738:	9202      	str	r2, [sp, #8]
 800d73a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d73c:	9201      	str	r2, [sp, #4]
 800d73e:	9300      	str	r3, [sp, #0]
 800d740:	462b      	mov	r3, r5
 800d742:	4622      	mov	r2, r4
 800d744:	f7ff feae 	bl	800d4a4 <_ZN6tflite25ComputePaddingHeightWidthEiiiiiiii13TfLitePaddingPiS1_>
 800d748:	4634      	mov	r4, r6
 800d74a:	f107 0308 	add.w	r3, r7, #8
 800d74e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d750:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      padding, &out_height, &out_width);

  MicroContext* micro_context = GetMicroContext(context);
 800d754:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d756:	f7f5 f8de 	bl	8002916 <_ZN6tflite15GetMicroContextEPK13TfLiteContext>
 800d75a:	6438      	str	r0, [r7, #64]	; 0x40

  TfLiteTensor* input =
      micro_context->AllocateTempInputTensor(node, kConvInputTensor);
 800d75c:	2200      	movs	r2, #0
 800d75e:	6a39      	ldr	r1, [r7, #32]
 800d760:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800d762:	f7fc fc45 	bl	8009ff0 <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei>
 800d766:	63f8      	str	r0, [r7, #60]	; 0x3c
  TF_LITE_ENSURE(context, input != nullptr);
 800d768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d10a      	bne.n	800d784 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x104>
 800d76e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d770:	695c      	ldr	r4, [r3, #20]
 800d772:	4b53      	ldr	r3, [pc, #332]	; (800d8c0 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x240>)
 800d774:	9300      	str	r3, [sp, #0]
 800d776:	2365      	movs	r3, #101	; 0x65
 800d778:	4a4c      	ldr	r2, [pc, #304]	; (800d8ac <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x22c>)
 800d77a:	494d      	ldr	r1, [pc, #308]	; (800d8b0 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x230>)
 800d77c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d77e:	47a0      	blx	r4
 800d780:	2301      	movs	r3, #1
 800d782:	e08c      	b.n	800d89e <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x21e>
  TfLiteTensor* filter =
      micro_context->AllocateTempInputTensor(node, kConvWeightsTensor);
 800d784:	2201      	movs	r2, #1
 800d786:	6a39      	ldr	r1, [r7, #32]
 800d788:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800d78a:	f7fc fc31 	bl	8009ff0 <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei>
 800d78e:	63b8      	str	r0, [r7, #56]	; 0x38
  TF_LITE_ENSURE(context, filter != nullptr);
 800d790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d792:	2b00      	cmp	r3, #0
 800d794:	d10a      	bne.n	800d7ac <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x12c>
 800d796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d798:	695c      	ldr	r4, [r3, #20]
 800d79a:	4b4a      	ldr	r3, [pc, #296]	; (800d8c4 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x244>)
 800d79c:	9300      	str	r3, [sp, #0]
 800d79e:	2368      	movs	r3, #104	; 0x68
 800d7a0:	4a42      	ldr	r2, [pc, #264]	; (800d8ac <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x22c>)
 800d7a2:	4943      	ldr	r1, [pc, #268]	; (800d8b0 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x230>)
 800d7a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d7a6:	47a0      	blx	r4
 800d7a8:	2301      	movs	r3, #1
 800d7aa:	e078      	b.n	800d89e <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x21e>
  TfLiteTensor* bias =
      micro_context->AllocateTempInputTensor(node, kConvBiasTensor);
 800d7ac:	2202      	movs	r2, #2
 800d7ae:	6a39      	ldr	r1, [r7, #32]
 800d7b0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800d7b2:	f7fc fc1d 	bl	8009ff0 <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei>
 800d7b6:	6378      	str	r0, [r7, #52]	; 0x34
  TfLiteTensor* output =
      micro_context->AllocateTempOutputTensor(node, kConvOutputTensor);
 800d7b8:	2200      	movs	r2, #0
 800d7ba:	6a39      	ldr	r1, [r7, #32]
 800d7bc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800d7be:	f7fc fc3a 	bl	800a036 <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei>
 800d7c2:	6338      	str	r0, [r7, #48]	; 0x30
  TF_LITE_ENSURE(context, output != nullptr);
 800d7c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d10a      	bne.n	800d7e0 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x160>
 800d7ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7cc:	695c      	ldr	r4, [r3, #20]
 800d7ce:	4b3e      	ldr	r3, [pc, #248]	; (800d8c8 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x248>)
 800d7d0:	9300      	str	r3, [sp, #0]
 800d7d2:	236d      	movs	r3, #109	; 0x6d
 800d7d4:	4a35      	ldr	r2, [pc, #212]	; (800d8ac <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x22c>)
 800d7d6:	4936      	ldr	r1, [pc, #216]	; (800d8b0 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x230>)
 800d7d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d7da:	47a0      	blx	r4
 800d7dc:	2301      	movs	r3, #1
 800d7de:	e05e      	b.n	800d89e <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x21e>

  // Note that quantized inference requires that all tensors have their
  // parameters set. This is usually done during quantized training.
  if (data_type != kTfLiteFloat32) {
 800d7e0:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800d7e4:	2b01      	cmp	r3, #1
 800d7e6:	d02e      	beq.n	800d846 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1c6>
    int output_channels = filter->dims->data[kConvQuantizedDimension];
 800d7e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7ea:	695b      	ldr	r3, [r3, #20]
 800d7ec:	685b      	ldr	r3, [r3, #4]
 800d7ee:	62fb      	str	r3, [r7, #44]	; 0x2c

    TF_LITE_ENSURE_STATUS(tflite::PopulateConvolutionQuantizationParams(
 800d7f0:	69fb      	ldr	r3, [r7, #28]
 800d7f2:	330c      	adds	r3, #12
 800d7f4:	607b      	str	r3, [r7, #4]
 800d7f6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d7f8:	321c      	adds	r2, #28
 800d7fa:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800d7fc:	3120      	adds	r1, #32
 800d7fe:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800d800:	302c      	adds	r0, #44	; 0x2c
 800d802:	6fbc      	ldr	r4, [r7, #120]	; 0x78
 800d804:	3430      	adds	r4, #48	; 0x30
 800d806:	6fbd      	ldr	r5, [r7, #120]	; 0x78
 800d808:	6a6d      	ldr	r5, [r5, #36]	; 0x24
 800d80a:	6fbe      	ldr	r6, [r7, #120]	; 0x78
 800d80c:	6ab6      	ldr	r6, [r6, #40]	; 0x28
 800d80e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d810:	9308      	str	r3, [sp, #32]
 800d812:	9607      	str	r6, [sp, #28]
 800d814:	9506      	str	r5, [sp, #24]
 800d816:	9405      	str	r4, [sp, #20]
 800d818:	9004      	str	r0, [sp, #16]
 800d81a:	9103      	str	r1, [sp, #12]
 800d81c:	9202      	str	r2, [sp, #8]
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	9301      	str	r3, [sp, #4]
 800d822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d824:	9300      	str	r3, [sp, #0]
 800d826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d828:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d82a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d82c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d82e:	f7f8 fe47 	bl	80064c0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i>
 800d832:	4603      	mov	r3, r0
 800d834:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d838:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d002      	beq.n	800d846 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1c6>
 800d840:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d844:	e02b      	b.n	800d89e <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x21e>
        &data->output_activation_min, &data->output_activation_max,
        data->per_channel_output_multiplier, data->per_channel_output_shift,
        output_channels));
  }

  data->input_zero_point = input->params.zero_point;
 800d846:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d848:	68da      	ldr	r2, [r3, #12]
 800d84a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d84c:	611a      	str	r2, [r3, #16]
  data->filter_zero_point = filter->params.zero_point;
 800d84e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d850:	68da      	ldr	r2, [r3, #12]
 800d852:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d854:	615a      	str	r2, [r3, #20]
  data->output_zero_point = output->params.zero_point;
 800d856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d858:	68da      	ldr	r2, [r3, #12]
 800d85a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d85c:	619a      	str	r2, [r3, #24]

  micro_context->DeallocateTempTfLiteTensor(output);
 800d85e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	3318      	adds	r3, #24
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d868:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800d86a:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(input);
 800d86c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	3318      	adds	r3, #24
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d876:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800d878:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(filter);
 800d87a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	3318      	adds	r3, #24
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d884:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800d886:	4798      	blx	r3
  if (bias != nullptr) {
 800d888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d006      	beq.n	800d89c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x21c>
    micro_context->DeallocateTempTfLiteTensor(bias);
 800d88e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	3318      	adds	r3, #24
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d898:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800d89a:	4798      	blx	r3
  }

  return kTfLiteOk;
 800d89c:	2300      	movs	r3, #0
}
 800d89e:	4618      	mov	r0, r3
 800d8a0:	374c      	adds	r7, #76	; 0x4c
 800d8a2:	46bd      	mov	sp, r7
 800d8a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d8a6:	bf00      	nop
 800d8a8:	08026ea0 	.word	0x08026ea0
 800d8ac:	08026e4c 	.word	0x08026e4c
 800d8b0:	08026e88 	.word	0x08026e88
 800d8b4:	08026ee0 	.word	0x08026ee0
 800d8b8:	08026ee4 	.word	0x08026ee4
 800d8bc:	08026ec4 	.word	0x08026ec4
 800d8c0:	08026ef8 	.word	0x08026ef8
 800d8c4:	08026f0c 	.word	0x08026f0c
 800d8c8:	08026f20 	.word	0x08026f20

0800d8cc <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus ConvPrepare(TfLiteContext* context, TfLiteNode* node) {
 800d8cc:	b590      	push	{r4, r7, lr}
 800d8ce:	b0a3      	sub	sp, #140	; 0x8c
 800d8d0:	af08      	add	r7, sp, #32
 800d8d2:	6078      	str	r0, [r7, #4]
 800d8d4:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 800d8d6:	683b      	ldr	r3, [r7, #0]
 800d8d8:	68db      	ldr	r3, [r3, #12]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d101      	bne.n	800d8e2 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x16>
 800d8de:	f012 f8bf 	bl	801fa60 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 800d8e2:	683b      	ldr	r3, [r7, #0]
 800d8e4:	691b      	ldr	r3, [r3, #16]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d101      	bne.n	800d8ee <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x22>
 800d8ea:	f012 f8b9 	bl	801fa60 <abort>

  OpDataConv* data = static_cast<OpDataConv*>(node->user_data);
 800d8ee:	683b      	ldr	r3, [r7, #0]
 800d8f0:	68db      	ldr	r3, [r3, #12]
 800d8f2:	667b      	str	r3, [r7, #100]	; 0x64
  const auto& params =
 800d8f4:	683b      	ldr	r3, [r7, #0]
 800d8f6:	691b      	ldr	r3, [r3, #16]
 800d8f8:	663b      	str	r3, [r7, #96]	; 0x60
      *(static_cast<const TfLiteConvParams*>(node->builtin_data));
  MicroContext* micro_context = GetMicroContext(context);
 800d8fa:	6878      	ldr	r0, [r7, #4]
 800d8fc:	f7f5 f80b 	bl	8002916 <_ZN6tflite15GetMicroContextEPK13TfLiteContext>
 800d900:	65f8      	str	r0, [r7, #92]	; 0x5c

  TfLiteTensor* output =
      micro_context->AllocateTempOutputTensor(node, kConvOutputTensor);
 800d902:	2200      	movs	r2, #0
 800d904:	6839      	ldr	r1, [r7, #0]
 800d906:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800d908:	f7fc fb95 	bl	800a036 <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei>
 800d90c:	65b8      	str	r0, [r7, #88]	; 0x58
  TF_LITE_ENSURE(context, output != nullptr);
 800d90e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d910:	2b00      	cmp	r3, #0
 800d912:	d10a      	bne.n	800d92a <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x5e>
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	695c      	ldr	r4, [r3, #20]
 800d918:	4b83      	ldr	r3, [pc, #524]	; (800db28 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x25c>)
 800d91a:	9300      	str	r3, [sp, #0]
 800d91c:	2395      	movs	r3, #149	; 0x95
 800d91e:	4a83      	ldr	r2, [pc, #524]	; (800db2c <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x260>)
 800d920:	4983      	ldr	r1, [pc, #524]	; (800db30 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x264>)
 800d922:	6878      	ldr	r0, [r7, #4]
 800d924:	47a0      	blx	r4
 800d926:	2301      	movs	r3, #1
 800d928:	e14d      	b.n	800dbc6 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x2fa>
  TfLiteTensor* input =
      micro_context->AllocateTempInputTensor(node, kConvInputTensor);
 800d92a:	2200      	movs	r2, #0
 800d92c:	6839      	ldr	r1, [r7, #0]
 800d92e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800d930:	f7fc fb5e 	bl	8009ff0 <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei>
 800d934:	6578      	str	r0, [r7, #84]	; 0x54
  TF_LITE_ENSURE(context, input != nullptr);
 800d936:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d10a      	bne.n	800d952 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x86>
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	695c      	ldr	r4, [r3, #20]
 800d940:	4b7c      	ldr	r3, [pc, #496]	; (800db34 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x268>)
 800d942:	9300      	str	r3, [sp, #0]
 800d944:	2398      	movs	r3, #152	; 0x98
 800d946:	4a79      	ldr	r2, [pc, #484]	; (800db2c <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x260>)
 800d948:	4979      	ldr	r1, [pc, #484]	; (800db30 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x264>)
 800d94a:	6878      	ldr	r0, [r7, #4]
 800d94c:	47a0      	blx	r4
 800d94e:	2301      	movs	r3, #1
 800d950:	e139      	b.n	800dbc6 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x2fa>
  TfLiteTensor* filter =
      micro_context->AllocateTempInputTensor(node, kConvWeightsTensor);
 800d952:	2201      	movs	r2, #1
 800d954:	6839      	ldr	r1, [r7, #0]
 800d956:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800d958:	f7fc fb4a 	bl	8009ff0 <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei>
 800d95c:	6538      	str	r0, [r7, #80]	; 0x50
  TF_LITE_ENSURE(context, filter != nullptr);
 800d95e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d960:	2b00      	cmp	r3, #0
 800d962:	d10a      	bne.n	800d97a <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0xae>
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	695c      	ldr	r4, [r3, #20]
 800d968:	4b73      	ldr	r3, [pc, #460]	; (800db38 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x26c>)
 800d96a:	9300      	str	r3, [sp, #0]
 800d96c:	239b      	movs	r3, #155	; 0x9b
 800d96e:	4a6f      	ldr	r2, [pc, #444]	; (800db2c <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x260>)
 800d970:	496f      	ldr	r1, [pc, #444]	; (800db30 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x264>)
 800d972:	6878      	ldr	r0, [r7, #4]
 800d974:	47a0      	blx	r4
 800d976:	2301      	movs	r3, #1
 800d978:	e125      	b.n	800dbc6 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x2fa>

  TF_LITE_ENSURE_EQ(context, input->type, output->type);
 800d97a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d97c:	7f1a      	ldrb	r2, [r3, #28]
 800d97e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d980:	7f1b      	ldrb	r3, [r3, #28]
 800d982:	429a      	cmp	r2, r3
 800d984:	d013      	beq.n	800d9ae <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0xe2>
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	695c      	ldr	r4, [r3, #20]
 800d98a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d98c:	7f1b      	ldrb	r3, [r3, #28]
 800d98e:	461a      	mov	r2, r3
 800d990:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d992:	7f1b      	ldrb	r3, [r3, #28]
 800d994:	9303      	str	r3, [sp, #12]
 800d996:	9202      	str	r2, [sp, #8]
 800d998:	4b68      	ldr	r3, [pc, #416]	; (800db3c <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x270>)
 800d99a:	9301      	str	r3, [sp, #4]
 800d99c:	4b68      	ldr	r3, [pc, #416]	; (800db40 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x274>)
 800d99e:	9300      	str	r3, [sp, #0]
 800d9a0:	239d      	movs	r3, #157	; 0x9d
 800d9a2:	4a62      	ldr	r2, [pc, #392]	; (800db2c <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x260>)
 800d9a4:	4967      	ldr	r1, [pc, #412]	; (800db44 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x278>)
 800d9a6:	6878      	ldr	r0, [r7, #4]
 800d9a8:	47a0      	blx	r4
 800d9aa:	2301      	movs	r3, #1
 800d9ac:	e10b      	b.n	800dbc6 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x2fa>
  TF_LITE_ENSURE_MSG(
 800d9ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d9b0:	7f1b      	ldrb	r3, [r3, #28]
 800d9b2:	2b01      	cmp	r3, #1
 800d9b4:	d103      	bne.n	800d9be <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0xf2>
 800d9b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d9b8:	7f1b      	ldrb	r3, [r3, #28]
 800d9ba:	2b01      	cmp	r3, #1
 800d9bc:	d01a      	beq.n	800d9f4 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x128>
 800d9be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d9c0:	7f1b      	ldrb	r3, [r3, #28]
 800d9c2:	2b07      	cmp	r3, #7
 800d9c4:	d103      	bne.n	800d9ce <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x102>
 800d9c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d9c8:	7f1b      	ldrb	r3, [r3, #28]
 800d9ca:	2b09      	cmp	r3, #9
 800d9cc:	d012      	beq.n	800d9f4 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x128>
 800d9ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d9d0:	7f1b      	ldrb	r3, [r3, #28]
 800d9d2:	2b09      	cmp	r3, #9
 800d9d4:	d107      	bne.n	800d9e6 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x11a>
 800d9d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d9d8:	7f1b      	ldrb	r3, [r3, #28]
 800d9da:	2b12      	cmp	r3, #18
 800d9dc:	d00a      	beq.n	800d9f4 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x128>
 800d9de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d9e0:	7f1b      	ldrb	r3, [r3, #28]
 800d9e2:	2b09      	cmp	r3, #9
 800d9e4:	d006      	beq.n	800d9f4 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x128>
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	695b      	ldr	r3, [r3, #20]
 800d9ea:	4957      	ldr	r1, [pc, #348]	; (800db48 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x27c>)
 800d9ec:	6878      	ldr	r0, [r7, #4]
 800d9ee:	4798      	blx	r3
 800d9f0:	2301      	movs	r3, #1
 800d9f2:	e0e8      	b.n	800dbc6 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x2fa>
          (input->type == kTfLiteInt16 && filter->type == kTfLiteInt8) ||
          (input->type == kTfLiteInt8 &&
           (filter->type == kTfLiteInt4 || filter->type == kTfLiteInt8)),
      "Hybrid models are not supported on TFLite Micro.");

  const int input_width = input->dims->data[2];
 800d9f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d9f6:	695b      	ldr	r3, [r3, #20]
 800d9f8:	68db      	ldr	r3, [r3, #12]
 800d9fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  const int input_height = input->dims->data[1];
 800d9fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d9fe:	695b      	ldr	r3, [r3, #20]
 800da00:	689b      	ldr	r3, [r3, #8]
 800da02:	64bb      	str	r3, [r7, #72]	; 0x48
  const int filter_width = filter->dims->data[2];
 800da04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da06:	695b      	ldr	r3, [r3, #20]
 800da08:	68db      	ldr	r3, [r3, #12]
 800da0a:	647b      	str	r3, [r7, #68]	; 0x44
  const int filter_height = filter->dims->data[1];
 800da0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da0e:	695b      	ldr	r3, [r3, #20]
 800da10:	689b      	ldr	r3, [r3, #8]
 800da12:	643b      	str	r3, [r7, #64]	; 0x40
  const int output_width = output->dims->data[2];
 800da14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800da16:	695b      	ldr	r3, [r3, #20]
 800da18:	68db      	ldr	r3, [r3, #12]
 800da1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  const int output_height = output->dims->data[1];
 800da1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800da1e:	695b      	ldr	r3, [r3, #20]
 800da20:	689b      	ldr	r3, [r3, #8]
 800da22:	63bb      	str	r3, [r7, #56]	; 0x38

  // Dynamically allocate per-channel quantization parameters.
  const int num_channels = filter->dims->data[kConvQuantizedDimension];
 800da24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da26:	695b      	ldr	r3, [r3, #20]
 800da28:	685b      	ldr	r3, [r3, #4]
 800da2a:	637b      	str	r3, [r7, #52]	; 0x34
  data->per_channel_output_multiplier =
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          context, num_channels * sizeof(int32_t)));
 800da30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
 800da32:	0092      	lsls	r2, r2, #2
 800da34:	4611      	mov	r1, r2
 800da36:	6878      	ldr	r0, [r7, #4]
 800da38:	4798      	blx	r3
 800da3a:	4602      	mov	r2, r0
  data->per_channel_output_multiplier =
 800da3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800da3e:	625a      	str	r2, [r3, #36]	; 0x24
  data->per_channel_output_shift =
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          context, num_channels * sizeof(int32_t)));
 800da44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
 800da46:	0092      	lsls	r2, r2, #2
 800da48:	4611      	mov	r1, r2
 800da4a:	6878      	ldr	r0, [r7, #4]
 800da4c:	4798      	blx	r3
 800da4e:	4602      	mov	r2, r0
  data->per_channel_output_shift =
 800da50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800da52:	629a      	str	r2, [r3, #40]	; 0x28

  // All per-channel quantized tensors need valid zero point and scale arrays.
  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
 800da54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800da56:	7f1b      	ldrb	r3, [r3, #28]
 800da58:	2b09      	cmp	r3, #9
 800da5a:	d003      	beq.n	800da64 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x198>
 800da5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800da5e:	7f1b      	ldrb	r3, [r3, #28]
 800da60:	2b07      	cmp	r3, #7
 800da62:	d142      	bne.n	800daea <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x21e>
    TF_LITE_ENSURE_EQ(context, filter->quantization.type,
 800da64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da66:	781b      	ldrb	r3, [r3, #0]
 800da68:	2b01      	cmp	r3, #1
 800da6a:	d012      	beq.n	800da92 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x1c6>
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	695c      	ldr	r4, [r3, #20]
 800da70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da72:	781b      	ldrb	r3, [r3, #0]
 800da74:	461a      	mov	r2, r3
 800da76:	2301      	movs	r3, #1
 800da78:	9303      	str	r3, [sp, #12]
 800da7a:	9202      	str	r2, [sp, #8]
 800da7c:	4b33      	ldr	r3, [pc, #204]	; (800db4c <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x280>)
 800da7e:	9301      	str	r3, [sp, #4]
 800da80:	4b33      	ldr	r3, [pc, #204]	; (800db50 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x284>)
 800da82:	9300      	str	r3, [sp, #0]
 800da84:	23b8      	movs	r3, #184	; 0xb8
 800da86:	4a29      	ldr	r2, [pc, #164]	; (800db2c <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x260>)
 800da88:	492e      	ldr	r1, [pc, #184]	; (800db44 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x278>)
 800da8a:	6878      	ldr	r0, [r7, #4]
 800da8c:	47a0      	blx	r4
 800da8e:	2301      	movs	r3, #1
 800da90:	e099      	b.n	800dbc6 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x2fa>
                      kTfLiteAffineQuantization);

    const auto* affine_quantization =
 800da92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da94:	685b      	ldr	r3, [r3, #4]
 800da96:	633b      	str	r3, [r7, #48]	; 0x30
        static_cast<TfLiteAffineQuantization*>(filter->quantization.params);
    TFLITE_DCHECK(affine_quantization != nullptr);
 800da98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d101      	bne.n	800daa2 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x1d6>
 800da9e:	f011 ffdf 	bl	801fa60 <abort>
    TFLITE_DCHECK(affine_quantization->scale != nullptr);
 800daa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d101      	bne.n	800daae <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x1e2>
 800daaa:	f011 ffd9 	bl	801fa60 <abort>
    TFLITE_DCHECK(affine_quantization->zero_point != nullptr);
 800daae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dab0:	685b      	ldr	r3, [r3, #4]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d101      	bne.n	800daba <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x1ee>
 800dab6:	f011 ffd3 	bl	801fa60 <abort>

    TF_LITE_ENSURE(context,
 800daba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	2b01      	cmp	r3, #1
 800dac2:	d012      	beq.n	800daea <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x21e>
 800dac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	681a      	ldr	r2, [r3, #0]
 800daca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dacc:	695b      	ldr	r3, [r3, #20]
 800dace:	685b      	ldr	r3, [r3, #4]
 800dad0:	429a      	cmp	r2, r3
 800dad2:	d00a      	beq.n	800daea <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x21e>
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	695c      	ldr	r4, [r3, #20]
 800dad8:	4b1e      	ldr	r3, [pc, #120]	; (800db54 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x288>)
 800dada:	9300      	str	r3, [sp, #0]
 800dadc:	23c1      	movs	r3, #193	; 0xc1
 800dade:	4a13      	ldr	r2, [pc, #76]	; (800db2c <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x260>)
 800dae0:	4913      	ldr	r1, [pc, #76]	; (800db30 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x264>)
 800dae2:	6878      	ldr	r0, [r7, #4]
 800dae4:	47a0      	blx	r4
 800dae6:	2301      	movs	r3, #1
 800dae8:	e06d      	b.n	800dbc6 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x2fa>
                   affine_quantization->scale->size == 1 ||
                       affine_quantization->scale->size ==
                           filter->dims->data[kConvQuantizedDimension]);
  }

  TF_LITE_ENSURE_STATUS(CalculateOpDataConv(
 800daea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800daec:	7f1b      	ldrb	r3, [r3, #28]
 800daee:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800daf0:	9206      	str	r2, [sp, #24]
 800daf2:	9305      	str	r3, [sp, #20]
 800daf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daf6:	9304      	str	r3, [sp, #16]
 800daf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dafa:	9303      	str	r3, [sp, #12]
 800dafc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dafe:	9302      	str	r3, [sp, #8]
 800db00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800db02:	9301      	str	r3, [sp, #4]
 800db04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800db06:	9300      	str	r3, [sp, #0]
 800db08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db0a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800db0c:	6839      	ldr	r1, [r7, #0]
 800db0e:	6878      	ldr	r0, [r7, #4]
 800db10:	f7ff fdb6 	bl	800d680 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>
 800db14:	4603      	mov	r3, r0
 800db16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800db1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d01a      	beq.n	800db58 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x28c>
 800db22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800db26:	e04e      	b.n	800dbc6 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x2fa>
 800db28:	08026f20 	.word	0x08026f20
 800db2c:	08026e4c 	.word	0x08026e4c
 800db30:	08026e88 	.word	0x08026e88
 800db34:	08026ef8 	.word	0x08026ef8
 800db38:	08026f0c 	.word	0x08026f0c
 800db3c:	08026f34 	.word	0x08026f34
 800db40:	08026f44 	.word	0x08026f44
 800db44:	08026ec4 	.word	0x08026ec4
 800db48:	08026f50 	.word	0x08026f50
 800db4c:	08026fbc 	.word	0x08026fbc
 800db50:	08026fd8 	.word	0x08026fd8
 800db54:	08026ff4 	.word	0x08026ff4
      context, node, params, input_width, input_height, filter_width,
      filter_height, output_width, output_height, input->type, data));

  if (filter->type == kTfLiteInt4) {
 800db58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db5a:	7f1b      	ldrb	r3, [r3, #28]
 800db5c:	2b12      	cmp	r3, #18
 800db5e:	d11c      	bne.n	800db9a <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x2ce>
    int filter_size =
        RuntimeShape(filter->dims->size,
 800db60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db62:	695b      	ldr	r3, [r3, #20]
 800db64:	6819      	ldr	r1, [r3, #0]
                     reinterpret_cast<const int32_t*>(filter->dims->data))
 800db66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db68:	695b      	ldr	r3, [r3, #20]
 800db6a:	1d1a      	adds	r2, r3, #4
        RuntimeShape(filter->dims->size,
 800db6c:	f107 030c 	add.w	r3, r7, #12
 800db70:	4618      	mov	r0, r3
 800db72:	f7f8 faea 	bl	800614a <_ZN6tflite12RuntimeShapeC1EiPKl>
            .FlatSize();
 800db76:	f107 030c 	add.w	r3, r7, #12
 800db7a:	4618      	mov	r0, r3
 800db7c:	f7f4 fe82 	bl	8002884 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 800db80:	62b8      	str	r0, [r7, #40]	; 0x28
        RuntimeShape(filter->dims->size,
 800db82:	f107 030c 	add.w	r3, r7, #12
 800db86:	4618      	mov	r0, r3
 800db88:	f7f4 fe3f 	bl	800280a <_ZN6tflite12RuntimeShapeD1Ev>
    context->RequestScratchBufferInArena(context, filter_size,
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800db92:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800db94:	3234      	adds	r2, #52	; 0x34
 800db96:	6878      	ldr	r0, [r7, #4]
 800db98:	4798      	blx	r3
                                         &data->filter_buffer_index);
  }

  micro_context->DeallocateTempTfLiteTensor(filter);
 800db9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	3318      	adds	r3, #24
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800dba4:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800dba6:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(input);
 800dba8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	3318      	adds	r3, #24
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800dbb2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800dbb4:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(output);
 800dbb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	3318      	adds	r3, #24
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800dbc0:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800dbc2:	4798      	blx	r3
  return kTfLiteOk;
 800dbc4:	2300      	movs	r3, #0
}
 800dbc6:	4618      	mov	r0, r3
 800dbc8:	376c      	adds	r7, #108	; 0x6c
 800dbca:	46bd      	mov	sp, r7
 800dbcc:	bd90      	pop	{r4, r7, pc}
 800dbce:	bf00      	nop

0800dbd0 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>:
inline void DepthwiseConv(
    const DepthwiseParams& params, const RuntimeShape& input_shape,
    const float* input_data, const RuntimeShape& filter_shape,
    const float* filter_data, const RuntimeShape& bias_shape,
    const float* bias_data, const RuntimeShape& output_shape,
    float* output_data) {
 800dbd0:	b590      	push	{r4, r7, lr}
 800dbd2:	ed2d 8b02 	vpush	{d8}
 800dbd6:	b0a9      	sub	sp, #164	; 0xa4
 800dbd8:	af02      	add	r7, sp, #8
 800dbda:	60f8      	str	r0, [r7, #12]
 800dbdc:	60b9      	str	r1, [r7, #8]
 800dbde:	607a      	str	r2, [r7, #4]
 800dbe0:	603b      	str	r3, [r7, #0]
  const int stride_width = params.stride_width;
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800dbe8:	673b      	str	r3, [r7, #112]	; 0x70
  const int stride_height = params.stride_height;
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800dbf0:	66fb      	str	r3, [r7, #108]	; 0x6c
  const int dilation_width_factor = params.dilation_width_factor;
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800dbf8:	66bb      	str	r3, [r7, #104]	; 0x68
  const int dilation_height_factor = params.dilation_height_factor;
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800dc00:	667b      	str	r3, [r7, #100]	; 0x64
  const int pad_width = params.padding_values.width;
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800dc08:	663b      	str	r3, [r7, #96]	; 0x60
  const int pad_height = params.padding_values.height;
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800dc10:	65fb      	str	r3, [r7, #92]	; 0x5c
  const int depth_multiplier = params.depth_multiplier;
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800dc18:	65bb      	str	r3, [r7, #88]	; 0x58
  const float output_activation_min = params.float_activation_min;
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc1e:	657b      	str	r3, [r7, #84]	; 0x54
  const float output_activation_max = params.float_activation_max;
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc24:	653b      	str	r3, [r7, #80]	; 0x50
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 800dc26:	68b8      	ldr	r0, [r7, #8]
 800dc28:	f7f4 fdfa 	bl	8002820 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800dc2c:	4603      	mov	r3, r0
 800dc2e:	2b04      	cmp	r3, #4
 800dc30:	d001      	beq.n	800dc36 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x66>
 800dc32:	f011 ff15 	bl	801fa60 <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 800dc36:	6838      	ldr	r0, [r7, #0]
 800dc38:	f7f4 fdf2 	bl	8002820 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800dc3c:	4603      	mov	r3, r0
 800dc3e:	2b04      	cmp	r3, #4
 800dc40:	d001      	beq.n	800dc46 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x76>
 800dc42:	f011 ff0d 	bl	801fa60 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 800dc46:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800dc4a:	f7f4 fde9 	bl	8002820 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800dc4e:	4603      	mov	r3, r0
 800dc50:	2b04      	cmp	r3, #4
 800dc52:	d001      	beq.n	800dc58 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x88>
 800dc54:	f011 ff04 	bl	801fa60 <abort>

  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 800dc58:	2300      	movs	r3, #0
 800dc5a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800dc5e:	2100      	movs	r1, #0
 800dc60:	68b8      	ldr	r0, [r7, #8]
 800dc62:	f7fe f85f 	bl	800bd24 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800dc66:	64f8      	str	r0, [r7, #76]	; 0x4c
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
 800dc68:	2303      	movs	r3, #3
 800dc6a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800dc6e:	2103      	movs	r1, #3
 800dc70:	6838      	ldr	r0, [r7, #0]
 800dc72:	f7fe f857 	bl	800bd24 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800dc76:	64b8      	str	r0, [r7, #72]	; 0x48
  const int input_height = input_shape.Dims(1);
 800dc78:	2101      	movs	r1, #1
 800dc7a:	68b8      	ldr	r0, [r7, #8]
 800dc7c:	f7f4 fddc 	bl	8002838 <_ZNK6tflite12RuntimeShape4DimsEi>
 800dc80:	6478      	str	r0, [r7, #68]	; 0x44
  const int input_width = input_shape.Dims(2);
 800dc82:	2102      	movs	r1, #2
 800dc84:	68b8      	ldr	r0, [r7, #8]
 800dc86:	f7f4 fdd7 	bl	8002838 <_ZNK6tflite12RuntimeShape4DimsEi>
 800dc8a:	6438      	str	r0, [r7, #64]	; 0x40
  const int input_depth = input_shape.Dims(3);
 800dc8c:	2103      	movs	r1, #3
 800dc8e:	68b8      	ldr	r0, [r7, #8]
 800dc90:	f7f4 fdd2 	bl	8002838 <_ZNK6tflite12RuntimeShape4DimsEi>
 800dc94:	63f8      	str	r0, [r7, #60]	; 0x3c
  const int filter_height = filter_shape.Dims(1);
 800dc96:	2101      	movs	r1, #1
 800dc98:	6838      	ldr	r0, [r7, #0]
 800dc9a:	f7f4 fdcd 	bl	8002838 <_ZNK6tflite12RuntimeShape4DimsEi>
 800dc9e:	63b8      	str	r0, [r7, #56]	; 0x38
  const int filter_width = filter_shape.Dims(2);
 800dca0:	2102      	movs	r1, #2
 800dca2:	6838      	ldr	r0, [r7, #0]
 800dca4:	f7f4 fdc8 	bl	8002838 <_ZNK6tflite12RuntimeShape4DimsEi>
 800dca8:	6378      	str	r0, [r7, #52]	; 0x34
  const int output_height = output_shape.Dims(1);
 800dcaa:	2101      	movs	r1, #1
 800dcac:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800dcb0:	f7f4 fdc2 	bl	8002838 <_ZNK6tflite12RuntimeShape4DimsEi>
 800dcb4:	6338      	str	r0, [r7, #48]	; 0x30
  const int output_width = output_shape.Dims(2);
 800dcb6:	2102      	movs	r1, #2
 800dcb8:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800dcbc:	f7f4 fdbc 	bl	8002838 <_ZNK6tflite12RuntimeShape4DimsEi>
 800dcc0:	62f8      	str	r0, [r7, #44]	; 0x2c
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
 800dcc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dcc4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800dcc6:	fb02 f303 	mul.w	r3, r2, r3
 800dcca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dccc:	429a      	cmp	r2, r3
 800dcce:	d001      	beq.n	800dcd4 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x104>
 800dcd0:	f011 fec6 	bl	801fa60 <abort>
  TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 800dcd4:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 800dcd8:	f7f4 fdd4 	bl	8002884 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 800dcdc:	4602      	mov	r2, r0
 800dcde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dce0:	4293      	cmp	r3, r2
 800dce2:	d001      	beq.n	800dce8 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x118>
 800dce4:	f011 febc 	bl	801fa60 <abort>

  for (int b = 0; b < batches; ++b) {
 800dce8:	2300      	movs	r3, #0
 800dcea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800dcee:	e0e9      	b.n	800dec4 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2f4>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800dcf6:	e0da      	b.n	800deae <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2de>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 800dcf8:	2300      	movs	r3, #0
 800dcfa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800dcfe:	e0cb      	b.n	800de98 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2c8>
        for (int ic = 0; ic < input_depth; ++ic) {
 800dd00:	2300      	movs	r3, #0
 800dd02:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800dd06:	e0bc      	b.n	800de82 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2b2>
          for (int m = 0; m < depth_multiplier; m++) {
 800dd08:	2300      	movs	r3, #0
 800dd0a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800dd0e:	e0ad      	b.n	800de6c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x29c>
            const int oc = m + ic * depth_multiplier;
 800dd10:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800dd14:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800dd16:	fb02 f303 	mul.w	r3, r2, r3
 800dd1a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800dd1e:	4413      	add	r3, r2
 800dd20:	62bb      	str	r3, [r7, #40]	; 0x28
            const int in_x_origin = (out_x * stride_width) - pad_width;
 800dd22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dd26:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800dd28:	fb03 f202 	mul.w	r2, r3, r2
 800dd2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dd2e:	1ad3      	subs	r3, r2, r3
 800dd30:	627b      	str	r3, [r7, #36]	; 0x24
            const int in_y_origin = (out_y * stride_height) - pad_height;
 800dd32:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dd36:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800dd38:	fb03 f202 	mul.w	r2, r3, r2
 800dd3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dd3e:	1ad3      	subs	r3, r2, r3
 800dd40:	623b      	str	r3, [r7, #32]
            float total = 0.f;
 800dd42:	f04f 0300 	mov.w	r3, #0
 800dd46:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 800dd4a:	2300      	movs	r3, #0
 800dd4c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800dd4e:	e053      	b.n	800ddf8 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x228>
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 800dd50:	2300      	movs	r3, #0
 800dd52:	67bb      	str	r3, [r7, #120]	; 0x78
 800dd54:	e049      	b.n	800ddea <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x21a>
                const int in_x = in_x_origin + dilation_width_factor * filter_x;
 800dd56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dd58:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800dd5a:	fb02 f303 	mul.w	r3, r2, r3
 800dd5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd60:	4413      	add	r3, r2
 800dd62:	61fb      	str	r3, [r7, #28]
                const int in_y =
                    in_y_origin + dilation_height_factor * filter_y;
 800dd64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dd66:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800dd68:	fb02 f303 	mul.w	r3, r2, r3
                const int in_y =
 800dd6c:	6a3a      	ldr	r2, [r7, #32]
 800dd6e:	4413      	add	r3, r2
 800dd70:	61bb      	str	r3, [r7, #24]
                // If the location is outside the bounds of the input image,
                // use zero as a default value.
                if ((in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
 800dd72:	69fb      	ldr	r3, [r7, #28]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	db35      	blt.n	800dde4 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x214>
 800dd78:	69fa      	ldr	r2, [r7, #28]
 800dd7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dd7c:	429a      	cmp	r2, r3
 800dd7e:	da31      	bge.n	800dde4 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x214>
 800dd80:	69bb      	ldr	r3, [r7, #24]
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	db2e      	blt.n	800dde4 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x214>
 800dd86:	69ba      	ldr	r2, [r7, #24]
 800dd88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dd8a:	429a      	cmp	r2, r3
 800dd8c:	da2a      	bge.n	800dde4 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x214>
                    (in_y < input_height)) {
                  float input_value =
                      input_data[Offset(input_shape, b, in_y, in_x, ic)];
 800dd8e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800dd92:	9300      	str	r3, [sp, #0]
 800dd94:	69fb      	ldr	r3, [r7, #28]
 800dd96:	69ba      	ldr	r2, [r7, #24]
 800dd98:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800dd9c:	68b8      	ldr	r0, [r7, #8]
 800dd9e:	f7fd ff39 	bl	800bc14 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 800dda2:	4603      	mov	r3, r0
 800dda4:	009b      	lsls	r3, r3, #2
 800dda6:	687a      	ldr	r2, [r7, #4]
 800dda8:	4413      	add	r3, r2
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	617b      	str	r3, [r7, #20]
                  float filter_value = filter_data[Offset(
 800ddae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddb0:	9300      	str	r3, [sp, #0]
 800ddb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ddb4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800ddb6:	2100      	movs	r1, #0
 800ddb8:	6838      	ldr	r0, [r7, #0]
 800ddba:	f7fd ff2b 	bl	800bc14 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 800ddbe:	4603      	mov	r3, r0
                      filter_shape, 0, filter_y, filter_x, oc)];
 800ddc0:	009b      	lsls	r3, r3, #2
 800ddc2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ddc6:	4413      	add	r3, r2
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	613b      	str	r3, [r7, #16]
                  total += (input_value * filter_value);
 800ddcc:	ed97 7a05 	vldr	s14, [r7, #20]
 800ddd0:	edd7 7a04 	vldr	s15, [r7, #16]
 800ddd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ddd8:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800dddc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dde0:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 800dde4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dde6:	3301      	adds	r3, #1
 800dde8:	67bb      	str	r3, [r7, #120]	; 0x78
 800ddea:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ddec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ddee:	429a      	cmp	r2, r3
 800ddf0:	dbb1      	blt.n	800dd56 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x186>
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 800ddf2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ddf4:	3301      	adds	r3, #1
 800ddf6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ddf8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800ddfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddfc:	429a      	cmp	r2, r3
 800ddfe:	dba7      	blt.n	800dd50 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x180>
                }
              }
            }
            float bias_value = 0.0f;
 800de00:	f04f 0300 	mov.w	r3, #0
 800de04:	677b      	str	r3, [r7, #116]	; 0x74
            if (bias_data) {
 800de06:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d006      	beq.n	800de1c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x24c>
              bias_value = bias_data[oc];
 800de0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de10:	009b      	lsls	r3, r3, #2
 800de12:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800de16:	4413      	add	r3, r2
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	677b      	str	r3, [r7, #116]	; 0x74
            }
            output_data[Offset(output_shape, b, out_y, out_x, oc)] =
                ActivationFunctionWithMinMax(total + bias_value,
 800de1c:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800de20:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800de24:	ee37 8a27 	vadd.f32	s16, s14, s15
            output_data[Offset(output_shape, b, out_y, out_x, oc)] =
 800de28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de2a:	9300      	str	r3, [sp, #0]
 800de2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800de30:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800de34:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800de38:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800de3c:	f7fd feea 	bl	800bc14 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 800de40:	4603      	mov	r3, r0
 800de42:	009b      	lsls	r3, r3, #2
 800de44:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800de48:	18d4      	adds	r4, r2, r3
                ActivationFunctionWithMinMax(total + bias_value,
 800de4a:	ed97 1a14 	vldr	s2, [r7, #80]	; 0x50
 800de4e:	edd7 0a15 	vldr	s1, [r7, #84]	; 0x54
 800de52:	eeb0 0a48 	vmov.f32	s0, s16
 800de56:	f7fd fe50 	bl	800bafa <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>
 800de5a:	eef0 7a40 	vmov.f32	s15, s0
            output_data[Offset(output_shape, b, out_y, out_x, oc)] =
 800de5e:	edc4 7a00 	vstr	s15, [r4]
          for (int m = 0; m < depth_multiplier; m++) {
 800de62:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800de66:	3301      	adds	r3, #1
 800de68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800de6c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800de70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800de72:	429a      	cmp	r2, r3
 800de74:	f6ff af4c 	blt.w	800dd10 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x140>
        for (int ic = 0; ic < input_depth; ++ic) {
 800de78:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800de7c:	3301      	adds	r3, #1
 800de7e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800de82:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800de86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de88:	429a      	cmp	r2, r3
 800de8a:	f6ff af3d 	blt.w	800dd08 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x138>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 800de8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800de92:	3301      	adds	r3, #1
 800de94:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800de98:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800de9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de9e:	429a      	cmp	r2, r3
 800dea0:	f6ff af2e 	blt.w	800dd00 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x130>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 800dea4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dea8:	3301      	adds	r3, #1
 800deaa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800deae:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800deb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800deb4:	429a      	cmp	r2, r3
 800deb6:	f6ff af1f 	blt.w	800dcf8 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x128>
  for (int b = 0; b < batches; ++b) {
 800deba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800debe:	3301      	adds	r3, #1
 800dec0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800dec4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800dec8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800deca:	429a      	cmp	r2, r3
 800decc:	f6ff af10 	blt.w	800dcf0 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x120>
          }
        }
      }
    }
  }
}
 800ded0:	bf00      	nop
 800ded2:	bf00      	nop
 800ded4:	379c      	adds	r7, #156	; 0x9c
 800ded6:	46bd      	mov	sp, r7
 800ded8:	ecbd 8b02 	vpop	{d8}
 800dedc:	bd90      	pop	{r4, r7, pc}

0800dede <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>:
    const DepthwiseParams& params, const int32_t* output_multiplier,
    const int32_t* output_shift, const RuntimeShape& input_shape,
    const int8_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    int8_t* output_data) {
 800dede:	b590      	push	{r4, r7, lr}
 800dee0:	b0ab      	sub	sp, #172	; 0xac
 800dee2:	af02      	add	r7, sp, #8
 800dee4:	60f8      	str	r0, [r7, #12]
 800dee6:	60b9      	str	r1, [r7, #8]
 800dee8:	607a      	str	r2, [r7, #4]
 800deea:	603b      	str	r3, [r7, #0]
  // Get parameters.
  // TODO(b/141565753): Re-introduce ScopedProfilingLabel on Micro.
  const int stride_width = params.stride_width;
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800def2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  const int stride_height = params.stride_height;
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800defc:	67fb      	str	r3, [r7, #124]	; 0x7c
  const int dilation_width_factor = params.dilation_width_factor;
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800df04:	67bb      	str	r3, [r7, #120]	; 0x78
  const int dilation_height_factor = params.dilation_height_factor;
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800df0c:	677b      	str	r3, [r7, #116]	; 0x74
  const int pad_width = params.padding_values.width;
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800df14:	673b      	str	r3, [r7, #112]	; 0x70
  const int pad_height = params.padding_values.height;
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800df1c:	66fb      	str	r3, [r7, #108]	; 0x6c
  const int depth_multiplier = params.depth_multiplier;
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800df24:	66bb      	str	r3, [r7, #104]	; 0x68
  const int32_t input_offset = params.input_offset;
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	695b      	ldr	r3, [r3, #20]
 800df2a:	667b      	str	r3, [r7, #100]	; 0x64
  const int32_t output_offset = params.output_offset;
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	69db      	ldr	r3, [r3, #28]
 800df30:	663b      	str	r3, [r7, #96]	; 0x60
  const int32_t output_activation_min = params.quantized_activation_min;
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df36:	61bb      	str	r3, [r7, #24]
  const int32_t output_activation_max = params.quantized_activation_max;
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df3c:	617b      	str	r3, [r7, #20]

  // Check dimensions of the tensors.
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 800df3e:	6838      	ldr	r0, [r7, #0]
 800df40:	f7f4 fc6e 	bl	8002820 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800df44:	4603      	mov	r3, r0
 800df46:	2b04      	cmp	r3, #4
 800df48:	d001      	beq.n	800df4e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x70>
 800df4a:	f011 fd89 	bl	801fa60 <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 800df4e:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 800df52:	f7f4 fc65 	bl	8002820 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800df56:	4603      	mov	r3, r0
 800df58:	2b04      	cmp	r3, #4
 800df5a:	d001      	beq.n	800df60 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x82>
 800df5c:	f011 fd80 	bl	801fa60 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 800df60:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800df64:	f7f4 fc5c 	bl	8002820 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800df68:	4603      	mov	r3, r0
 800df6a:	2b04      	cmp	r3, #4
 800df6c:	d001      	beq.n	800df72 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x94>
 800df6e:	f011 fd77 	bl	801fa60 <abort>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 800df72:	69ba      	ldr	r2, [r7, #24]
 800df74:	697b      	ldr	r3, [r7, #20]
 800df76:	429a      	cmp	r2, r3
 800df78:	dd01      	ble.n	800df7e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xa0>
 800df7a:	f011 fd71 	bl	801fa60 <abort>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 800df7e:	2300      	movs	r3, #0
 800df80:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800df84:	2100      	movs	r1, #0
 800df86:	6838      	ldr	r0, [r7, #0]
 800df88:	f7fd fecc 	bl	800bd24 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800df8c:	65f8      	str	r0, [r7, #92]	; 0x5c
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
 800df8e:	2303      	movs	r3, #3
 800df90:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800df94:	2103      	movs	r1, #3
 800df96:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 800df9a:	f7fd fec3 	bl	800bd24 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800df9e:	65b8      	str	r0, [r7, #88]	; 0x58
  const int input_height = input_shape.Dims(1);
 800dfa0:	2101      	movs	r1, #1
 800dfa2:	6838      	ldr	r0, [r7, #0]
 800dfa4:	f7f4 fc48 	bl	8002838 <_ZNK6tflite12RuntimeShape4DimsEi>
 800dfa8:	6578      	str	r0, [r7, #84]	; 0x54
  const int input_width = input_shape.Dims(2);
 800dfaa:	2102      	movs	r1, #2
 800dfac:	6838      	ldr	r0, [r7, #0]
 800dfae:	f7f4 fc43 	bl	8002838 <_ZNK6tflite12RuntimeShape4DimsEi>
 800dfb2:	6538      	str	r0, [r7, #80]	; 0x50
  const int input_depth = input_shape.Dims(3);
 800dfb4:	2103      	movs	r1, #3
 800dfb6:	6838      	ldr	r0, [r7, #0]
 800dfb8:	f7f4 fc3e 	bl	8002838 <_ZNK6tflite12RuntimeShape4DimsEi>
 800dfbc:	64f8      	str	r0, [r7, #76]	; 0x4c
  const int filter_height = filter_shape.Dims(1);
 800dfbe:	2101      	movs	r1, #1
 800dfc0:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 800dfc4:	f7f4 fc38 	bl	8002838 <_ZNK6tflite12RuntimeShape4DimsEi>
 800dfc8:	64b8      	str	r0, [r7, #72]	; 0x48
  const int filter_width = filter_shape.Dims(2);
 800dfca:	2102      	movs	r1, #2
 800dfcc:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 800dfd0:	f7f4 fc32 	bl	8002838 <_ZNK6tflite12RuntimeShape4DimsEi>
 800dfd4:	6478      	str	r0, [r7, #68]	; 0x44
  const int output_height = output_shape.Dims(1);
 800dfd6:	2101      	movs	r1, #1
 800dfd8:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800dfdc:	f7f4 fc2c 	bl	8002838 <_ZNK6tflite12RuntimeShape4DimsEi>
 800dfe0:	6438      	str	r0, [r7, #64]	; 0x40
  const int output_width = output_shape.Dims(2);
 800dfe2:	2102      	movs	r1, #2
 800dfe4:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800dfe8:	f7f4 fc26 	bl	8002838 <_ZNK6tflite12RuntimeShape4DimsEi>
 800dfec:	63f8      	str	r0, [r7, #60]	; 0x3c
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
 800dfee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dff0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800dff2:	fb02 f303 	mul.w	r3, r2, r3
 800dff6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800dff8:	429a      	cmp	r2, r3
 800dffa:	d001      	beq.n	800e000 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x122>
 800dffc:	f011 fd30 	bl	801fa60 <abort>
  TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 800e000:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800e004:	f7f4 fc3e 	bl	8002884 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 800e008:	4602      	mov	r2, r0
 800e00a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e00c:	4293      	cmp	r3, r2
 800e00e:	d001      	beq.n	800e014 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x136>
 800e010:	f011 fd26 	bl	801fa60 <abort>

  for (int batch = 0; batch < batches; ++batch) {
 800e014:	2300      	movs	r3, #0
 800e016:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800e01a:	e118      	b.n	800e24e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x370>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 800e01c:	2300      	movs	r3, #0
 800e01e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800e022:	e109      	b.n	800e238 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x35a>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 800e024:	2300      	movs	r3, #0
 800e026:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e02a:	e0fa      	b.n	800e222 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x344>
        for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 800e02c:	2300      	movs	r3, #0
 800e02e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e032:	e0eb      	b.n	800e20c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x32e>
          for (int m = 0; m < depth_multiplier; ++m) {
 800e034:	2300      	movs	r3, #0
 800e036:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800e03a:	e0dc      	b.n	800e1f6 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x318>
            const int output_channel = m + in_channel * depth_multiplier;
 800e03c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e040:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e042:	fb02 f303 	mul.w	r3, r2, r3
 800e046:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800e04a:	4413      	add	r3, r2
 800e04c:	63bb      	str	r3, [r7, #56]	; 0x38
            const int in_x_origin = (out_x * stride_width) - pad_width;
 800e04e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e052:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e056:	fb03 f202 	mul.w	r2, r3, r2
 800e05a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e05c:	1ad3      	subs	r3, r2, r3
 800e05e:	637b      	str	r3, [r7, #52]	; 0x34
            const int in_y_origin = (out_y * stride_height) - pad_height;
 800e060:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e064:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800e066:	fb03 f202 	mul.w	r2, r3, r2
 800e06a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e06c:	1ad3      	subs	r3, r2, r3
 800e06e:	633b      	str	r3, [r7, #48]	; 0x30
            int32_t acc = 0;
 800e070:	2300      	movs	r3, #0
 800e072:	613b      	str	r3, [r7, #16]
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 800e074:	2300      	movs	r3, #0
 800e076:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800e07a:	e067      	b.n	800e14c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x26e>
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 800e07c:	2300      	movs	r3, #0
 800e07e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e082:	e059      	b.n	800e138 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x25a>
                const int in_x = in_x_origin + dilation_width_factor * filter_x;
 800e084:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e086:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800e08a:	fb02 f303 	mul.w	r3, r2, r3
 800e08e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e090:	4413      	add	r3, r2
 800e092:	62fb      	str	r3, [r7, #44]	; 0x2c
                const int in_y =
                    in_y_origin + dilation_height_factor * filter_y;
 800e094:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e096:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800e09a:	fb02 f303 	mul.w	r3, r2, r3
                const int in_y =
 800e09e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e0a0:	4413      	add	r3, r2
 800e0a2:	62bb      	str	r3, [r7, #40]	; 0x28
                // Zero padding by omitting the areas outside the image.
                const bool is_point_inside_image =
                    (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
 800e0a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	db0c      	blt.n	800e0c4 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1e6>
 800e0aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e0ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e0ae:	429a      	cmp	r2, r3
 800e0b0:	da08      	bge.n	800e0c4 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1e6>
 800e0b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	db05      	blt.n	800e0c4 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1e6>
 800e0b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e0ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e0bc:	429a      	cmp	r2, r3
 800e0be:	da01      	bge.n	800e0c4 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1e6>
 800e0c0:	2301      	movs	r3, #1
 800e0c2:	e000      	b.n	800e0c6 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1e8>
 800e0c4:	2300      	movs	r3, #0
                const bool is_point_inside_image =
 800e0c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                    (in_y < input_height);
                if (is_point_inside_image) {
 800e0ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d02d      	beq.n	800e12e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x250>
                  int32_t input_val = input_data[Offset(
 800e0d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e0d6:	9300      	str	r3, [sp, #0]
 800e0d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e0dc:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800e0e0:	6838      	ldr	r0, [r7, #0]
 800e0e2:	f7fd fd97 	bl	800bc14 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 800e0e6:	4603      	mov	r3, r0
 800e0e8:	461a      	mov	r2, r3
                      input_shape, batch, in_y, in_x, in_channel)];
 800e0ea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e0ee:	4413      	add	r3, r2
 800e0f0:	f993 3000 	ldrsb.w	r3, [r3]
 800e0f4:	623b      	str	r3, [r7, #32]
                  int32_t filter_val = filter_data[Offset(
 800e0f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0f8:	9300      	str	r3, [sp, #0]
 800e0fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e0fe:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800e102:	2100      	movs	r1, #0
 800e104:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 800e108:	f7fd fd84 	bl	800bc14 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 800e10c:	4603      	mov	r3, r0
 800e10e:	461a      	mov	r2, r3
                      filter_shape, 0, filter_y, filter_x, output_channel)];
 800e110:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e114:	4413      	add	r3, r2
 800e116:	f993 3000 	ldrsb.w	r3, [r3]
 800e11a:	61fb      	str	r3, [r7, #28]
                  // long as the filter size (filter_y * filter_x * in_channel)
                  // does not exceed 2^16, which is the case in all the models
                  // we have seen so far.
                  // TODO(b/174275578): Add a check to make sure the
                  // accumulator depth is smaller than 2^16.
                  acc += filter_val * (input_val + input_offset);
 800e11c:	6a3a      	ldr	r2, [r7, #32]
 800e11e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e120:	4413      	add	r3, r2
 800e122:	69fa      	ldr	r2, [r7, #28]
 800e124:	fb03 f202 	mul.w	r2, r3, r2
 800e128:	693b      	ldr	r3, [r7, #16]
 800e12a:	4413      	add	r3, r2
 800e12c:	613b      	str	r3, [r7, #16]
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 800e12e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e132:	3301      	adds	r3, #1
 800e134:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e138:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800e13c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e13e:	429a      	cmp	r2, r3
 800e140:	dba0      	blt.n	800e084 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1a6>
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 800e142:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e146:	3301      	adds	r3, #1
 800e148:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800e14c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800e150:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e152:	429a      	cmp	r2, r3
 800e154:	db92      	blt.n	800e07c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x19e>
                }
              }
            }
            if (bias_data) {
 800e156:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d008      	beq.n	800e170 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x292>
              acc += bias_data[output_channel];
 800e15e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e160:	009b      	lsls	r3, r3, #2
 800e162:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800e166:	4413      	add	r3, r2
 800e168:	681a      	ldr	r2, [r3, #0]
 800e16a:	693b      	ldr	r3, [r7, #16]
 800e16c:	4413      	add	r3, r2
 800e16e:	613b      	str	r3, [r7, #16]
            }
            acc = MultiplyByQuantizedMultiplier(
 800e170:	6938      	ldr	r0, [r7, #16]
                acc, output_multiplier[output_channel],
 800e172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e174:	009b      	lsls	r3, r3, #2
 800e176:	68ba      	ldr	r2, [r7, #8]
 800e178:	4413      	add	r3, r2
            acc = MultiplyByQuantizedMultiplier(
 800e17a:	6819      	ldr	r1, [r3, #0]
                output_shift[output_channel]);
 800e17c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e17e:	009b      	lsls	r3, r3, #2
 800e180:	687a      	ldr	r2, [r7, #4]
 800e182:	4413      	add	r3, r2
            acc = MultiplyByQuantizedMultiplier(
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	461a      	mov	r2, r3
 800e188:	f7f7 fc08 	bl	800599c <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 800e18c:	4603      	mov	r3, r0
 800e18e:	613b      	str	r3, [r7, #16]
            acc += output_offset;
 800e190:	693a      	ldr	r2, [r7, #16]
 800e192:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e194:	4413      	add	r3, r2
 800e196:	613b      	str	r3, [r7, #16]
            acc = std::max(acc, output_activation_min);
 800e198:	f107 0218 	add.w	r2, r7, #24
 800e19c:	f107 0310 	add.w	r3, r7, #16
 800e1a0:	4611      	mov	r1, r2
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	f7f8 f881 	bl	80062aa <_ZSt3maxIlERKT_S2_S2_>
 800e1a8:	4603      	mov	r3, r0
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	613b      	str	r3, [r7, #16]
            acc = std::min(acc, output_activation_max);
 800e1ae:	f107 0214 	add.w	r2, r7, #20
 800e1b2:	f107 0310 	add.w	r3, r7, #16
 800e1b6:	4611      	mov	r1, r2
 800e1b8:	4618      	mov	r0, r3
 800e1ba:	f7f8 f862 	bl	8006282 <_ZSt3minIlERKT_S2_S2_>
 800e1be:	4603      	mov	r3, r0
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	613b      	str	r3, [r7, #16]
            output_data[Offset(output_shape, batch, out_y, out_x,
                               output_channel)] = static_cast<int8_t>(acc);
 800e1c4:	693c      	ldr	r4, [r7, #16]
            output_data[Offset(output_shape, batch, out_y, out_x,
 800e1c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1c8:	9300      	str	r3, [sp, #0]
 800e1ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e1ce:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800e1d2:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800e1d6:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800e1da:	f7fd fd1b 	bl	800bc14 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 800e1de:	4603      	mov	r3, r0
 800e1e0:	461a      	mov	r2, r3
                               output_channel)] = static_cast<int8_t>(acc);
 800e1e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e1e6:	4413      	add	r3, r2
 800e1e8:	b262      	sxtb	r2, r4
 800e1ea:	701a      	strb	r2, [r3, #0]
          for (int m = 0; m < depth_multiplier; ++m) {
 800e1ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e1f0:	3301      	adds	r3, #1
 800e1f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800e1f6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800e1fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e1fc:	429a      	cmp	r2, r3
 800e1fe:	f6ff af1d 	blt.w	800e03c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x15e>
        for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 800e202:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e206:	3301      	adds	r3, #1
 800e208:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e20c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800e210:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e212:	429a      	cmp	r2, r3
 800e214:	f6ff af0e 	blt.w	800e034 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x156>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 800e218:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e21c:	3301      	adds	r3, #1
 800e21e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e222:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e226:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e228:	429a      	cmp	r2, r3
 800e22a:	f6ff aeff 	blt.w	800e02c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x14e>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 800e22e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e232:	3301      	adds	r3, #1
 800e234:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800e238:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800e23c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e23e:	429a      	cmp	r2, r3
 800e240:	f6ff aef0 	blt.w	800e024 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x146>
  for (int batch = 0; batch < batches; ++batch) {
 800e244:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e248:	3301      	adds	r3, #1
 800e24a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800e24e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800e252:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e254:	429a      	cmp	r2, r3
 800e256:	f6ff aee1 	blt.w	800e01c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x13e>
          }
        }
      }
    }
  }
}
 800e25a:	bf00      	nop
 800e25c:	bf00      	nop
 800e25e:	37a4      	adds	r7, #164	; 0xa4
 800e260:	46bd      	mov	sp, r7
 800e262:	bd90      	pop	{r4, r7, pc}

0800e264 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps>:
    const DepthwiseParams& params, const int32_t* output_multiplier,
    const int32_t* output_shift, const RuntimeShape& input_shape,
    const int16_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const std::int64_t* bias_data, const RuntimeShape& output_shape,
    int16_t* output_data) {
 800e264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e268:	b0b1      	sub	sp, #196	; 0xc4
 800e26a:	af02      	add	r7, sp, #8
 800e26c:	61f8      	str	r0, [r7, #28]
 800e26e:	61b9      	str	r1, [r7, #24]
 800e270:	617a      	str	r2, [r7, #20]
 800e272:	613b      	str	r3, [r7, #16]
  // Get parameters.
  const int stride_width = params.stride_width;
 800e274:	69fb      	ldr	r3, [r7, #28]
 800e276:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800e27a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  const int stride_height = params.stride_height;
 800e27e:	69fb      	ldr	r3, [r7, #28]
 800e280:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800e284:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  const int dilation_width_factor = params.dilation_width_factor;
 800e288:	69fb      	ldr	r3, [r7, #28]
 800e28a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800e28e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  const int dilation_height_factor = params.dilation_height_factor;
 800e292:	69fb      	ldr	r3, [r7, #28]
 800e294:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800e298:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  const int pad_width = params.padding_values.width;
 800e29c:	69fb      	ldr	r3, [r7, #28]
 800e29e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e2a2:	67fb      	str	r3, [r7, #124]	; 0x7c
  const int pad_height = params.padding_values.height;
 800e2a4:	69fb      	ldr	r3, [r7, #28]
 800e2a6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e2aa:	67bb      	str	r3, [r7, #120]	; 0x78
  const int depth_multiplier = params.depth_multiplier;
 800e2ac:	69fb      	ldr	r3, [r7, #28]
 800e2ae:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800e2b2:	677b      	str	r3, [r7, #116]	; 0x74
  const int32_t output_activation_min = params.quantized_activation_min;
 800e2b4:	69fb      	ldr	r3, [r7, #28]
 800e2b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  const int32_t output_activation_max = params.quantized_activation_max;
 800e2ba:	69fb      	ldr	r3, [r7, #28]
 800e2bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2be:	62bb      	str	r3, [r7, #40]	; 0x28

  // Check dimensions of the tensors.
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 800e2c0:	6938      	ldr	r0, [r7, #16]
 800e2c2:	f7f4 faad 	bl	8002820 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800e2c6:	4603      	mov	r3, r0
 800e2c8:	2b04      	cmp	r3, #4
 800e2ca:	d001      	beq.n	800e2d0 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x6c>
 800e2cc:	f011 fbc8 	bl	801fa60 <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 800e2d0:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 800e2d4:	f7f4 faa4 	bl	8002820 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800e2d8:	4603      	mov	r3, r0
 800e2da:	2b04      	cmp	r3, #4
 800e2dc:	d001      	beq.n	800e2e2 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x7e>
 800e2de:	f011 fbbf 	bl	801fa60 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 800e2e2:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800e2e6:	f7f4 fa9b 	bl	8002820 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800e2ea:	4603      	mov	r3, r0
 800e2ec:	2b04      	cmp	r3, #4
 800e2ee:	d001      	beq.n	800e2f4 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x90>
 800e2f0:	f011 fbb6 	bl	801fa60 <abort>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 800e2f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e2f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2f8:	429a      	cmp	r2, r3
 800e2fa:	dd01      	ble.n	800e300 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x9c>
 800e2fc:	f011 fbb0 	bl	801fa60 <abort>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 800e300:	2300      	movs	r3, #0
 800e302:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800e306:	2100      	movs	r1, #0
 800e308:	6938      	ldr	r0, [r7, #16]
 800e30a:	f7fd fd0b 	bl	800bd24 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800e30e:	6738      	str	r0, [r7, #112]	; 0x70
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
 800e310:	2303      	movs	r3, #3
 800e312:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800e316:	2103      	movs	r1, #3
 800e318:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 800e31c:	f7fd fd02 	bl	800bd24 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800e320:	66f8      	str	r0, [r7, #108]	; 0x6c
  const int input_height = input_shape.Dims(1);
 800e322:	2101      	movs	r1, #1
 800e324:	6938      	ldr	r0, [r7, #16]
 800e326:	f7f4 fa87 	bl	8002838 <_ZNK6tflite12RuntimeShape4DimsEi>
 800e32a:	66b8      	str	r0, [r7, #104]	; 0x68
  const int input_width = input_shape.Dims(2);
 800e32c:	2102      	movs	r1, #2
 800e32e:	6938      	ldr	r0, [r7, #16]
 800e330:	f7f4 fa82 	bl	8002838 <_ZNK6tflite12RuntimeShape4DimsEi>
 800e334:	6678      	str	r0, [r7, #100]	; 0x64
  const int input_depth = input_shape.Dims(3);
 800e336:	2103      	movs	r1, #3
 800e338:	6938      	ldr	r0, [r7, #16]
 800e33a:	f7f4 fa7d 	bl	8002838 <_ZNK6tflite12RuntimeShape4DimsEi>
 800e33e:	6638      	str	r0, [r7, #96]	; 0x60
  const int filter_height = filter_shape.Dims(1);
 800e340:	2101      	movs	r1, #1
 800e342:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 800e346:	f7f4 fa77 	bl	8002838 <_ZNK6tflite12RuntimeShape4DimsEi>
 800e34a:	65f8      	str	r0, [r7, #92]	; 0x5c
  const int filter_width = filter_shape.Dims(2);
 800e34c:	2102      	movs	r1, #2
 800e34e:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 800e352:	f7f4 fa71 	bl	8002838 <_ZNK6tflite12RuntimeShape4DimsEi>
 800e356:	65b8      	str	r0, [r7, #88]	; 0x58
  const int output_height = output_shape.Dims(1);
 800e358:	2101      	movs	r1, #1
 800e35a:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800e35e:	f7f4 fa6b 	bl	8002838 <_ZNK6tflite12RuntimeShape4DimsEi>
 800e362:	6578      	str	r0, [r7, #84]	; 0x54
  const int output_width = output_shape.Dims(2);
 800e364:	2102      	movs	r1, #2
 800e366:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800e36a:	f7f4 fa65 	bl	8002838 <_ZNK6tflite12RuntimeShape4DimsEi>
 800e36e:	6538      	str	r0, [r7, #80]	; 0x50
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
 800e370:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e372:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800e374:	fb02 f303 	mul.w	r3, r2, r3
 800e378:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e37a:	429a      	cmp	r2, r3
 800e37c:	d001      	beq.n	800e382 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x11e>
 800e37e:	f011 fb6f 	bl	801fa60 <abort>
  TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 800e382:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 800e386:	f7f4 fa7d 	bl	8002884 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 800e38a:	4602      	mov	r2, r0
 800e38c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e38e:	4293      	cmp	r3, r2
 800e390:	d001      	beq.n	800e396 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x132>
 800e392:	f011 fb65 	bl	801fa60 <abort>

  for (int batch = 0; batch < batches; ++batch) {
 800e396:	2300      	movs	r3, #0
 800e398:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e39c:	e138      	b.n	800e610 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x3ac>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 800e39e:	2300      	movs	r3, #0
 800e3a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e3a4:	e129      	b.n	800e5fa <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x396>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 800e3a6:	2300      	movs	r3, #0
 800e3a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e3ac:	e11a      	b.n	800e5e4 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x380>
        for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 800e3ae:	2300      	movs	r3, #0
 800e3b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800e3b4:	e10b      	b.n	800e5ce <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x36a>
          for (int m = 0; m < depth_multiplier; ++m) {
 800e3b6:	2300      	movs	r3, #0
 800e3b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800e3bc:	e0fc      	b.n	800e5b8 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x354>
            const int output_channel = m + in_channel * depth_multiplier;
 800e3be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e3c2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800e3c4:	fb02 f303 	mul.w	r3, r2, r3
 800e3c8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800e3cc:	4413      	add	r3, r2
 800e3ce:	64fb      	str	r3, [r7, #76]	; 0x4c
            const int in_x_origin = (out_x * stride_width) - pad_width;
 800e3d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e3d4:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800e3d8:	fb03 f202 	mul.w	r2, r3, r2
 800e3dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e3de:	1ad3      	subs	r3, r2, r3
 800e3e0:	64bb      	str	r3, [r7, #72]	; 0x48
            const int in_y_origin = (out_y * stride_height) - pad_height;
 800e3e2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e3e6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800e3ea:	fb03 f202 	mul.w	r2, r3, r2
 800e3ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e3f0:	1ad3      	subs	r3, r2, r3
 800e3f2:	647b      	str	r3, [r7, #68]	; 0x44
            std::int64_t acc = 0;
 800e3f4:	f04f 0200 	mov.w	r2, #0
 800e3f8:	f04f 0300 	mov.w	r3, #0
 800e3fc:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 800e400:	2300      	movs	r3, #0
 800e402:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e406:	e07b      	b.n	800e500 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x29c>
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 800e408:	2300      	movs	r3, #0
 800e40a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e40e:	e06d      	b.n	800e4ec <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x288>
                const int in_x = in_x_origin + dilation_width_factor * filter_x;
 800e410:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e414:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800e418:	fb02 f303 	mul.w	r3, r2, r3
 800e41c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e41e:	4413      	add	r3, r2
 800e420:	643b      	str	r3, [r7, #64]	; 0x40
                const int in_y =
                    in_y_origin + dilation_height_factor * filter_y;
 800e422:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e426:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e42a:	fb02 f303 	mul.w	r3, r2, r3
                const int in_y =
 800e42e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e430:	4413      	add	r3, r2
 800e432:	63fb      	str	r3, [r7, #60]	; 0x3c
                // Zero padding by omitting the areas outside the image.
                const bool is_point_inside_image =
                    (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
 800e434:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e436:	2b00      	cmp	r3, #0
 800e438:	db0c      	blt.n	800e454 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1f0>
 800e43a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e43c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e43e:	429a      	cmp	r2, r3
 800e440:	da08      	bge.n	800e454 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1f0>
 800e442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e444:	2b00      	cmp	r3, #0
 800e446:	db05      	blt.n	800e454 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1f0>
 800e448:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e44a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e44c:	429a      	cmp	r2, r3
 800e44e:	da01      	bge.n	800e454 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1f0>
 800e450:	2301      	movs	r3, #1
 800e452:	e000      	b.n	800e456 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1f2>
 800e454:	2300      	movs	r3, #0
                const bool is_point_inside_image =
 800e456:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                    (in_y < input_height);
                if (is_point_inside_image) {
 800e45a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d03f      	beq.n	800e4e2 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x27e>
                  int32_t input_val = input_data[Offset(
 800e462:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e466:	9300      	str	r3, [sp, #0]
 800e468:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e46a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e46c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800e470:	6938      	ldr	r0, [r7, #16]
 800e472:	f7fd fbcf 	bl	800bc14 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 800e476:	4603      	mov	r3, r0
                      input_shape, batch, in_y, in_x, in_channel)];
 800e478:	005b      	lsls	r3, r3, #1
 800e47a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800e47e:	4413      	add	r3, r2
 800e480:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e484:	637b      	str	r3, [r7, #52]	; 0x34
                  int32_t filter_val = filter_data[Offset(
 800e486:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e488:	9300      	str	r3, [sp, #0]
 800e48a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e48e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e492:	2100      	movs	r1, #0
 800e494:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 800e498:	f7fd fbbc 	bl	800bc14 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 800e49c:	4603      	mov	r3, r0
 800e49e:	461a      	mov	r2, r3
                      filter_shape, 0, filter_y, filter_x, output_channel)];
 800e4a0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800e4a4:	4413      	add	r3, r2
 800e4a6:	f993 3000 	ldrsb.w	r3, [r3]
 800e4aa:	633b      	str	r3, [r7, #48]	; 0x30
                  // Accumulate with 64 bits accumulator.
                  // We assume maximum of 2^16 accumulations as with the 8-bit
                  // case so actually the value in the accumulator should not
                  // exceed 40 bits
                  acc += static_cast<int64_t>(filter_val) *
 800e4ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4ae:	17da      	asrs	r2, r3, #31
 800e4b0:	4698      	mov	r8, r3
 800e4b2:	4691      	mov	r9, r2
                         static_cast<int64_t>(input_val);
 800e4b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4b6:	17da      	asrs	r2, r3, #31
 800e4b8:	469a      	mov	sl, r3
 800e4ba:	4693      	mov	fp, r2
                  acc += static_cast<int64_t>(filter_val) *
 800e4bc:	fb0a f209 	mul.w	r2, sl, r9
 800e4c0:	fb08 f30b 	mul.w	r3, r8, fp
 800e4c4:	4413      	add	r3, r2
 800e4c6:	fba8 450a 	umull	r4, r5, r8, sl
 800e4ca:	442b      	add	r3, r5
 800e4cc:	461d      	mov	r5, r3
 800e4ce:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800e4d2:	1911      	adds	r1, r2, r4
 800e4d4:	60b9      	str	r1, [r7, #8]
 800e4d6:	416b      	adcs	r3, r5
 800e4d8:	60fb      	str	r3, [r7, #12]
 800e4da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e4de:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 800e4e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e4e6:	3301      	adds	r3, #1
 800e4e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e4ec:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800e4f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e4f2:	429a      	cmp	r2, r3
 800e4f4:	db8c      	blt.n	800e410 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1ac>
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 800e4f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e4fa:	3301      	adds	r3, #1
 800e4fc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e500:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e504:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e506:	429a      	cmp	r2, r3
 800e508:	f6ff af7e 	blt.w	800e408 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1a4>
                }
              }
            }
            if (bias_data) {
 800e50c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800e510:	2b00      	cmp	r3, #0
 800e512:	d011      	beq.n	800e538 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2d4>
              acc += bias_data[output_channel];
 800e514:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e516:	00db      	lsls	r3, r3, #3
 800e518:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 800e51c:	4413      	add	r3, r2
 800e51e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e522:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800e526:	1886      	adds	r6, r0, r2
 800e528:	603e      	str	r6, [r7, #0]
 800e52a:	eb41 0303 	adc.w	r3, r1, r3
 800e52e:	607b      	str	r3, [r7, #4]
 800e530:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e534:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
            }
            int32_t scaled_acc = MultiplyByQuantizedMultiplier(
                acc, output_multiplier[output_channel],
 800e538:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e53a:	009b      	lsls	r3, r3, #2
 800e53c:	69ba      	ldr	r2, [r7, #24]
 800e53e:	4413      	add	r3, r2
            int32_t scaled_acc = MultiplyByQuantizedMultiplier(
 800e540:	6819      	ldr	r1, [r3, #0]
                output_shift[output_channel]);
 800e542:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e544:	009b      	lsls	r3, r3, #2
 800e546:	697a      	ldr	r2, [r7, #20]
 800e548:	4413      	add	r3, r2
            int32_t scaled_acc = MultiplyByQuantizedMultiplier(
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	460a      	mov	r2, r1
 800e54e:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800e552:	f7f7 fa47 	bl	80059e4 <_ZN6tflite29MultiplyByQuantizedMultiplierExli>
 800e556:	4603      	mov	r3, r0
                output_shift[output_channel]);
 800e558:	627b      	str	r3, [r7, #36]	; 0x24
            scaled_acc = std::max(scaled_acc, output_activation_min);
 800e55a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800e55e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e562:	4611      	mov	r1, r2
 800e564:	4618      	mov	r0, r3
 800e566:	f7f7 fea0 	bl	80062aa <_ZSt3maxIlERKT_S2_S2_>
 800e56a:	4603      	mov	r3, r0
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	627b      	str	r3, [r7, #36]	; 0x24
            scaled_acc = std::min(scaled_acc, output_activation_max);
 800e570:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800e574:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e578:	4611      	mov	r1, r2
 800e57a:	4618      	mov	r0, r3
 800e57c:	f7f7 fe81 	bl	8006282 <_ZSt3minIlERKT_S2_S2_>
 800e580:	4603      	mov	r3, r0
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	627b      	str	r3, [r7, #36]	; 0x24
            output_data[Offset(output_shape, batch, out_y, out_x,
                               output_channel)] =
 800e586:	6a7e      	ldr	r6, [r7, #36]	; 0x24
            output_data[Offset(output_shape, batch, out_y, out_x,
 800e588:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e58a:	9300      	str	r3, [sp, #0]
 800e58c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e590:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e594:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800e598:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800e59c:	f7fd fb3a 	bl	800bc14 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 800e5a0:	4603      	mov	r3, r0
                               output_channel)] =
 800e5a2:	005b      	lsls	r3, r3, #1
 800e5a4:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800e5a8:	4413      	add	r3, r2
 800e5aa:	b232      	sxth	r2, r6
 800e5ac:	801a      	strh	r2, [r3, #0]
          for (int m = 0; m < depth_multiplier; ++m) {
 800e5ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800e5b2:	3301      	adds	r3, #1
 800e5b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800e5b8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800e5bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e5be:	429a      	cmp	r2, r3
 800e5c0:	f6ff aefd 	blt.w	800e3be <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x15a>
        for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 800e5c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e5c8:	3301      	adds	r3, #1
 800e5ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800e5ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e5d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e5d4:	429a      	cmp	r2, r3
 800e5d6:	f6ff aeee 	blt.w	800e3b6 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x152>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 800e5da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e5de:	3301      	adds	r3, #1
 800e5e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e5e4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800e5e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e5ea:	429a      	cmp	r2, r3
 800e5ec:	f6ff aedf 	blt.w	800e3ae <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x14a>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 800e5f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e5f4:	3301      	adds	r3, #1
 800e5f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e5fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e5fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e600:	429a      	cmp	r2, r3
 800e602:	f6ff aed0 	blt.w	800e3a6 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x142>
  for (int batch = 0; batch < batches; ++batch) {
 800e606:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e60a:	3301      	adds	r3, #1
 800e60c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e610:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e614:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e616:	429a      	cmp	r2, r3
 800e618:	f6ff aec1 	blt.w	800e39e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x13a>
          }
        }
      }
    }
  }
}
 800e61c:	bf00      	nop
 800e61e:	bf00      	nop
 800e620:	37bc      	adds	r7, #188	; 0xbc
 800e622:	46bd      	mov	sp, r7
 800e624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e628 <_ZN6tflite12_GLOBAL__N_117DepthwiseConvInitEP13TfLiteContextPKcj>:

namespace tflite {
namespace {

void* DepthwiseConvInit(TfLiteContext* context, const char* buffer,
                        size_t length) {
 800e628:	b580      	push	{r7, lr}
 800e62a:	b084      	sub	sp, #16
 800e62c:	af00      	add	r7, sp, #0
 800e62e:	60f8      	str	r0, [r7, #12]
 800e630:	60b9      	str	r1, [r7, #8]
 800e632:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d101      	bne.n	800e640 <_ZN6tflite12_GLOBAL__N_117DepthwiseConvInitEP13TfLiteContextPKcj+0x18>
 800e63c:	f011 fa10 	bl	801fa60 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpDataConv));
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e644:	2138      	movs	r1, #56	; 0x38
 800e646:	68f8      	ldr	r0, [r7, #12]
 800e648:	4798      	blx	r3
 800e64a:	4603      	mov	r3, r0
}
 800e64c:	4618      	mov	r0, r3
 800e64e:	3710      	adds	r7, #16
 800e650:	46bd      	mov	sp, r7
 800e652:	bd80      	pop	{r7, pc}

0800e654 <_ZN6tflite12_GLOBAL__N_117DepthwiseConvEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus DepthwiseConvEval(TfLiteContext* context, TfLiteNode* node) {
 800e654:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e656:	f5ad 7d4b 	sub.w	sp, sp, #812	; 0x32c
 800e65a:	af08      	add	r7, sp, #32
 800e65c:	f507 7342 	add.w	r3, r7, #776	; 0x308
 800e660:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 800e664:	6018      	str	r0, [r3, #0]
 800e666:	f507 7342 	add.w	r3, r7, #776	; 0x308
 800e66a:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 800e66e:	6019      	str	r1, [r3, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 800e670:	f507 7342 	add.w	r3, r7, #776	; 0x308
 800e674:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	68db      	ldr	r3, [r3, #12]
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d101      	bne.n	800e684 <_ZN6tflite12_GLOBAL__N_117DepthwiseConvEvalEP13TfLiteContextP10TfLiteNode+0x30>
 800e680:	f011 f9ee 	bl	801fa60 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 800e684:	f507 7342 	add.w	r3, r7, #776	; 0x308
 800e688:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	691b      	ldr	r3, [r3, #16]
 800e690:	2b00      	cmp	r3, #0
 800e692:	d101      	bne.n	800e698 <_ZN6tflite12_GLOBAL__N_117DepthwiseConvEvalEP13TfLiteContextP10TfLiteNode+0x44>
 800e694:	f011 f9e4 	bl	801fa60 <abort>

  auto& params =
 800e698:	f507 7342 	add.w	r3, r7, #776	; 0x308
 800e69c:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	691b      	ldr	r3, [r3, #16]
 800e6a4:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
      *(reinterpret_cast<TfLiteDepthwiseConvParams*>(node->builtin_data));
  const OpDataConv& data = *(static_cast<const OpDataConv*>(node->user_data));
 800e6a8:	f507 7342 	add.w	r3, r7, #776	; 0x308
 800e6ac:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	68db      	ldr	r3, [r3, #12]
 800e6b4:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300

  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kDepthwiseConvOutputTensor);
 800e6b8:	4bb8      	ldr	r3, [pc, #736]	; (800e99c <_ZN6tflite12_GLOBAL__N_117DepthwiseConvEvalEP13TfLiteContextP10TfLiteNode+0x348>)
 800e6ba:	681a      	ldr	r2, [r3, #0]
 800e6bc:	f507 7342 	add.w	r3, r7, #776	; 0x308
 800e6c0:	f5a3 7140 	sub.w	r1, r3, #768	; 0x300
 800e6c4:	f507 7342 	add.w	r3, r7, #776	; 0x308
 800e6c8:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 800e6cc:	6809      	ldr	r1, [r1, #0]
 800e6ce:	6818      	ldr	r0, [r3, #0]
 800e6d0:	f002 f8e5 	bl	801089e <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 800e6d4:	f8c7 02fc 	str.w	r0, [r7, #764]	; 0x2fc
  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kDepthwiseConvInputTensor);
 800e6d8:	4bb1      	ldr	r3, [pc, #708]	; (800e9a0 <_ZN6tflite12_GLOBAL__N_117DepthwiseConvEvalEP13TfLiteContextP10TfLiteNode+0x34c>)
 800e6da:	681a      	ldr	r2, [r3, #0]
 800e6dc:	f507 7342 	add.w	r3, r7, #776	; 0x308
 800e6e0:	f5a3 7140 	sub.w	r1, r3, #768	; 0x300
 800e6e4:	f507 7342 	add.w	r3, r7, #776	; 0x308
 800e6e8:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 800e6ec:	6809      	ldr	r1, [r1, #0]
 800e6ee:	6818      	ldr	r0, [r3, #0]
 800e6f0:	f002 f8c5 	bl	801087e <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 800e6f4:	f8c7 02f8 	str.w	r0, [r7, #760]	; 0x2f8
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kDepthwiseConvWeightsTensor);
 800e6f8:	4baa      	ldr	r3, [pc, #680]	; (800e9a4 <_ZN6tflite12_GLOBAL__N_117DepthwiseConvEvalEP13TfLiteContextP10TfLiteNode+0x350>)
 800e6fa:	681a      	ldr	r2, [r3, #0]
 800e6fc:	f507 7342 	add.w	r3, r7, #776	; 0x308
 800e700:	f5a3 7140 	sub.w	r1, r3, #768	; 0x300
 800e704:	f507 7342 	add.w	r3, r7, #776	; 0x308
 800e708:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 800e70c:	6809      	ldr	r1, [r1, #0]
 800e70e:	6818      	ldr	r0, [r3, #0]
 800e710:	f002 f8b5 	bl	801087e <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 800e714:	f8c7 02f4 	str.w	r0, [r7, #756]	; 0x2f4
  const TfLiteEvalTensor* bias =
      (NumInputs(node) == 3)
 800e718:	f507 7342 	add.w	r3, r7, #776	; 0x308
 800e71c:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 800e720:	6818      	ldr	r0, [r3, #0]
 800e722:	f7f4 f8d2 	bl	80028ca <_ZN6tflite9NumInputsEPK10TfLiteNode>
 800e726:	4603      	mov	r3, r0
          ? tflite::micro::GetEvalInput(context, node, kDepthwiseConvBiasTensor)
 800e728:	2b03      	cmp	r3, #3
 800e72a:	d10f      	bne.n	800e74c <_ZN6tflite12_GLOBAL__N_117DepthwiseConvEvalEP13TfLiteContextP10TfLiteNode+0xf8>
 800e72c:	4b9e      	ldr	r3, [pc, #632]	; (800e9a8 <_ZN6tflite12_GLOBAL__N_117DepthwiseConvEvalEP13TfLiteContextP10TfLiteNode+0x354>)
 800e72e:	681a      	ldr	r2, [r3, #0]
 800e730:	f507 7342 	add.w	r3, r7, #776	; 0x308
 800e734:	f5a3 7140 	sub.w	r1, r3, #768	; 0x300
 800e738:	f507 7342 	add.w	r3, r7, #776	; 0x308
 800e73c:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 800e740:	6809      	ldr	r1, [r1, #0]
 800e742:	6818      	ldr	r0, [r3, #0]
 800e744:	f002 f89b 	bl	801087e <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 800e748:	4603      	mov	r3, r0
 800e74a:	e000      	b.n	800e74e <_ZN6tflite12_GLOBAL__N_117DepthwiseConvEvalEP13TfLiteContextP10TfLiteNode+0xfa>
 800e74c:	2300      	movs	r3, #0
          : nullptr;
 800e74e:	f8c7 32f0 	str.w	r3, [r7, #752]	; 0x2f0

  switch (input->type) {  // Already know in/out types are same.
 800e752:	f8d7 32f8 	ldr.w	r3, [r7, #760]	; 0x2f8
 800e756:	7a1b      	ldrb	r3, [r3, #8]
 800e758:	2b09      	cmp	r3, #9
 800e75a:	d073      	beq.n	800e844 <_ZN6tflite12_GLOBAL__N_117DepthwiseConvEvalEP13TfLiteContextP10TfLiteNode+0x1f0>
 800e75c:	2b09      	cmp	r3, #9
 800e75e:	f300 823e 	bgt.w	800ebde <_ZN6tflite12_GLOBAL__N_117DepthwiseConvEvalEP13TfLiteContextP10TfLiteNode+0x58a>
 800e762:	2b01      	cmp	r3, #1
 800e764:	d003      	beq.n	800e76e <_ZN6tflite12_GLOBAL__N_117DepthwiseConvEvalEP13TfLiteContextP10TfLiteNode+0x11a>
 800e766:	2b07      	cmp	r3, #7
 800e768:	f000 81ae 	beq.w	800eac8 <_ZN6tflite12_GLOBAL__N_117DepthwiseConvEvalEP13TfLiteContextP10TfLiteNode+0x474>
 800e76c:	e237      	b.n	800ebde <_ZN6tflite12_GLOBAL__N_117DepthwiseConvEvalEP13TfLiteContextP10TfLiteNode+0x58a>
    case kTfLiteFloat32: {
      tflite::reference_ops::DepthwiseConv(
          DepthwiseConvParamsFloat(params, data),
 800e76e:	f507 7342 	add.w	r3, r7, #776	; 0x308
 800e772:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 800e776:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 800e77a:	f8d7 1304 	ldr.w	r1, [r7, #772]	; 0x304
 800e77e:	4618      	mov	r0, r3
 800e780:	f000 fa62 	bl	800ec48 <_ZN6tflite24DepthwiseConvParamsFloatERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE>
          tflite::micro::GetTensorShape(input),
 800e784:	f507 7342 	add.w	r3, r7, #776	; 0x308
 800e788:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 800e78c:	f8d7 12f8 	ldr.w	r1, [r7, #760]	; 0x2f8
 800e790:	4618      	mov	r0, r3
 800e792:	f002 f8a4 	bl	80108de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::DepthwiseConv(
 800e796:	f8d7 02f8 	ldr.w	r0, [r7, #760]	; 0x2f8
 800e79a:	f7f4 f967 	bl	8002a6c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 800e79e:	4606      	mov	r6, r0
          tflite::micro::GetTensorData<float>(input),
          tflite::micro::GetTensorShape(filter),
 800e7a0:	f507 7342 	add.w	r3, r7, #776	; 0x308
 800e7a4:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 800e7a8:	f8d7 12f4 	ldr.w	r1, [r7, #756]	; 0x2f4
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	f002 f896 	bl	80108de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::DepthwiseConv(
 800e7b2:	f8d7 02f4 	ldr.w	r0, [r7, #756]	; 0x2f4
 800e7b6:	f7f4 f959 	bl	8002a6c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 800e7ba:	4604      	mov	r4, r0
          tflite::micro::GetTensorData<float>(filter),
          tflite::micro::GetTensorShape(bias),
 800e7bc:	f507 7342 	add.w	r3, r7, #776	; 0x308
 800e7c0:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 800e7c4:	f8d7 12f0 	ldr.w	r1, [r7, #752]	; 0x2f0
 800e7c8:	4618      	mov	r0, r3
 800e7ca:	f002 f888 	bl	80108de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::DepthwiseConv(
 800e7ce:	f8d7 02f0 	ldr.w	r0, [r7, #752]	; 0x2f0
 800e7d2:	f7fe fa07 	bl	800cbe4 <_ZN6tflite5micro21GetOptionalTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 800e7d6:	4605      	mov	r5, r0
          tflite::micro::GetOptionalTensorData<float>(bias),
          tflite::micro::GetTensorShape(output),
 800e7d8:	f507 7342 	add.w	r3, r7, #776	; 0x308
 800e7dc:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800e7e0:	f8d7 12fc 	ldr.w	r1, [r7, #764]	; 0x2fc
 800e7e4:	4618      	mov	r0, r3
 800e7e6:	f002 f87a 	bl	80108de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::DepthwiseConv(
 800e7ea:	f8d7 02fc 	ldr.w	r0, [r7, #764]	; 0x2fc
 800e7ee:	f7f4 f921 	bl	8002a34 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 800e7f2:	4603      	mov	r3, r0
 800e7f4:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800e7f8:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800e7fc:	f107 0010 	add.w	r0, r7, #16
 800e800:	9304      	str	r3, [sp, #16]
 800e802:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800e806:	9303      	str	r3, [sp, #12]
 800e808:	9502      	str	r5, [sp, #8]
 800e80a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800e80e:	9301      	str	r3, [sp, #4]
 800e810:	9400      	str	r4, [sp, #0]
 800e812:	4613      	mov	r3, r2
 800e814:	4632      	mov	r2, r6
 800e816:	f7ff f9db 	bl	800dbd0 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>
          tflite::micro::GetTensorShape(output),
 800e81a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800e81e:	4618      	mov	r0, r3
 800e820:	f7f3 fff3 	bl	800280a <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(bias),
 800e824:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800e828:	4618      	mov	r0, r3
 800e82a:	f7f3 ffee 	bl	800280a <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(filter),
 800e82e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800e832:	4618      	mov	r0, r3
 800e834:	f7f3 ffe9 	bl	800280a <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(input),
 800e838:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e83c:	4618      	mov	r0, r3
 800e83e:	f7f3 ffe4 	bl	800280a <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorData<float>(output));
      break;
 800e842:	e1dc      	b.n	800ebfe <_ZN6tflite12_GLOBAL__N_117DepthwiseConvEvalEP13TfLiteContextP10TfLiteNode+0x5aa>
    }
    case kTfLiteInt8: {
      switch (filter->type) {
 800e844:	f8d7 32f4 	ldr.w	r3, [r7, #756]	; 0x2f4
 800e848:	7a1b      	ldrb	r3, [r3, #8]
 800e84a:	2b09      	cmp	r3, #9
 800e84c:	f000 80ae 	beq.w	800e9ac <_ZN6tflite12_GLOBAL__N_117DepthwiseConvEvalEP13TfLiteContextP10TfLiteNode+0x358>
 800e850:	2b12      	cmp	r3, #18
 800e852:	f040 811f 	bne.w	800ea94 <_ZN6tflite12_GLOBAL__N_117DepthwiseConvEvalEP13TfLiteContextP10TfLiteNode+0x440>
        case kTfLiteInt4: {
          int8_t* unpacked_filter_data = static_cast<int8_t*>(
              context->GetScratchBuffer(context, data.filter_buffer_index));
 800e856:	f507 7342 	add.w	r3, r7, #776	; 0x308
 800e85a:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e862:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 800e866:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800e868:	f507 7242 	add.w	r2, r7, #776	; 0x308
 800e86c:	f5a2 723f 	sub.w	r2, r2, #764	; 0x2fc
 800e870:	6810      	ldr	r0, [r2, #0]
 800e872:	4798      	blx	r3
 800e874:	f8c7 02ec 	str.w	r0, [r7, #748]	; 0x2ec
          tflite::tensor_utils::UnpackDenseInt4IntoInt8(
 800e878:	f8d7 02f4 	ldr.w	r0, [r7, #756]	; 0x2f4
 800e87c:	f7fd f91f 	bl	800babe <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 800e880:	4604      	mov	r4, r0
              tflite::micro::GetTensorData<int8_t>(filter),
              tflite::micro::GetTensorShape(filter).FlatSize(),
 800e882:	f507 7342 	add.w	r3, r7, #776	; 0x308
 800e886:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 800e88a:	f8d7 12f4 	ldr.w	r1, [r7, #756]	; 0x2f4
 800e88e:	4618      	mov	r0, r3
 800e890:	f002 f825 	bl	80108de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          tflite::tensor_utils::UnpackDenseInt4IntoInt8(
 800e894:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800e898:	4618      	mov	r0, r3
 800e89a:	f7f3 fff3 	bl	8002884 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 800e89e:	4603      	mov	r3, r0
 800e8a0:	f8d7 22ec 	ldr.w	r2, [r7, #748]	; 0x2ec
 800e8a4:	4619      	mov	r1, r3
 800e8a6:	4620      	mov	r0, r4
 800e8a8:	f7f7 fa27 	bl	8005cfa <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa>
              tflite::micro::GetTensorShape(filter).FlatSize(),
 800e8ac:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800e8b0:	4618      	mov	r0, r3
 800e8b2:	f7f3 ffaa 	bl	800280a <_ZN6tflite12RuntimeShapeD1Ev>
              unpacked_filter_data);
          reference_integer_ops::DepthwiseConvPerChannel(
              DepthwiseConvParamsQuantized(params, data),
 800e8b6:	f507 7342 	add.w	r3, r7, #776	; 0x308
 800e8ba:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800e8be:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 800e8c2:	f8d7 1304 	ldr.w	r1, [r7, #772]	; 0x304
 800e8c6:	4618      	mov	r0, r3
 800e8c8:	f000 f9ff 	bl	800ecca <_ZN6tflite28DepthwiseConvParamsQuantizedERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE>
              data.per_channel_output_multiplier, data.per_channel_output_shift,
 800e8cc:	f8d7 3300 	ldr.w	r3, [r7, #768]	; 0x300
 800e8d0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e8d2:	f8d7 3300 	ldr.w	r3, [r7, #768]	; 0x300
 800e8d6:	6a9d      	ldr	r5, [r3, #40]	; 0x28
              tflite::micro::GetTensorShape(input),
 800e8d8:	f507 7342 	add.w	r3, r7, #776	; 0x308
 800e8dc:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800e8e0:	f8d7 12f8 	ldr.w	r1, [r7, #760]	; 0x2f8
 800e8e4:	4618      	mov	r0, r3
 800e8e6:	f001 fffa 	bl	80108de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          reference_integer_ops::DepthwiseConvPerChannel(
 800e8ea:	f8d7 02f8 	ldr.w	r0, [r7, #760]	; 0x2f8
 800e8ee:	f7fd f8e6 	bl	800babe <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 800e8f2:	4606      	mov	r6, r0
              tflite::micro::GetTensorData<int8_t>(input),
              tflite::micro::GetTensorShape(filter), unpacked_filter_data,
 800e8f4:	f507 7342 	add.w	r3, r7, #776	; 0x308
 800e8f8:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800e8fc:	f8d7 12f4 	ldr.w	r1, [r7, #756]	; 0x2f4
 800e900:	4618      	mov	r0, r3
 800e902:	f001 ffec 	bl	80108de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
              tflite::micro::GetTensorShape(bias),
 800e906:	f507 7342 	add.w	r3, r7, #776	; 0x308
 800e90a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800e90e:	f8d7 12f0 	ldr.w	r1, [r7, #752]	; 0x2f0
 800e912:	4618      	mov	r0, r3
 800e914:	f001 ffe3 	bl	80108de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          reference_integer_ops::DepthwiseConvPerChannel(
 800e918:	f8d7 02f0 	ldr.w	r0, [r7, #752]	; 0x2f0
 800e91c:	f7fe f973 	bl	800cc06 <_ZN6tflite5micro21GetOptionalTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 800e920:	6078      	str	r0, [r7, #4]
              tflite::micro::GetOptionalTensorData<int32_t>(bias),
              tflite::micro::GetTensorShape(output),
 800e922:	f507 7342 	add.w	r3, r7, #776	; 0x308
 800e926:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800e92a:	f8d7 12fc 	ldr.w	r1, [r7, #764]	; 0x2fc
 800e92e:	4618      	mov	r0, r3
 800e930:	f001 ffd5 	bl	80108de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          reference_integer_ops::DepthwiseConvPerChannel(
 800e934:	f8d7 02fc 	ldr.w	r0, [r7, #764]	; 0x2fc
 800e938:	f7fd f8d0 	bl	800badc <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 800e93c:	4603      	mov	r3, r0
 800e93e:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 800e942:	f107 00dc 	add.w	r0, r7, #220	; 0xdc
 800e946:	9306      	str	r3, [sp, #24]
 800e948:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800e94c:	9305      	str	r3, [sp, #20]
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	9304      	str	r3, [sp, #16]
 800e952:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800e956:	9303      	str	r3, [sp, #12]
 800e958:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 800e95c:	9302      	str	r3, [sp, #8]
 800e95e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800e962:	9301      	str	r3, [sp, #4]
 800e964:	9600      	str	r6, [sp, #0]
 800e966:	4613      	mov	r3, r2
 800e968:	462a      	mov	r2, r5
 800e96a:	4621      	mov	r1, r4
 800e96c:	f7ff fab7 	bl	800dede <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>
              tflite::micro::GetTensorShape(output),
 800e970:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800e974:	4618      	mov	r0, r3
 800e976:	f7f3 ff48 	bl	800280a <_ZN6tflite12RuntimeShapeD1Ev>
              tflite::micro::GetTensorShape(bias),
 800e97a:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800e97e:	4618      	mov	r0, r3
 800e980:	f7f3 ff43 	bl	800280a <_ZN6tflite12RuntimeShapeD1Ev>
              tflite::micro::GetTensorShape(filter), unpacked_filter_data,
 800e984:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800e988:	4618      	mov	r0, r3
 800e98a:	f7f3 ff3e 	bl	800280a <_ZN6tflite12RuntimeShapeD1Ev>
              tflite::micro::GetTensorShape(input),
 800e98e:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800e992:	4618      	mov	r0, r3
 800e994:	f7f3 ff39 	bl	800280a <_ZN6tflite12RuntimeShapeD1Ev>
              tflite::micro::GetTensorData<int8_t>(output));
          break;
 800e998:	e095      	b.n	800eac6 <_ZN6tflite12_GLOBAL__N_117DepthwiseConvEvalEP13TfLiteContextP10TfLiteNode+0x472>
 800e99a:	bf00      	nop
 800e99c:	08029320 	.word	0x08029320
 800e9a0:	08029314 	.word	0x08029314
 800e9a4:	08029318 	.word	0x08029318
 800e9a8:	0802931c 	.word	0x0802931c
        }
        case kTfLiteInt8: {
          reference_integer_ops::DepthwiseConvPerChannel(
              DepthwiseConvParamsQuantized(params, data),
 800e9ac:	f507 7342 	add.w	r3, r7, #776	; 0x308
 800e9b0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800e9b4:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 800e9b8:	f8d7 1304 	ldr.w	r1, [r7, #772]	; 0x304
 800e9bc:	4618      	mov	r0, r3
 800e9be:	f000 f984 	bl	800ecca <_ZN6tflite28DepthwiseConvParamsQuantizedERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE>
              data.per_channel_output_multiplier, data.per_channel_output_shift,
 800e9c2:	f8d7 3300 	ldr.w	r3, [r7, #768]	; 0x300
 800e9c6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e9c8:	f8d7 3300 	ldr.w	r3, [r7, #768]	; 0x300
 800e9cc:	6a9d      	ldr	r5, [r3, #40]	; 0x28
              tflite::micro::GetTensorShape(input),
 800e9ce:	f507 7342 	add.w	r3, r7, #776	; 0x308
 800e9d2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800e9d6:	f8d7 12f8 	ldr.w	r1, [r7, #760]	; 0x2f8
 800e9da:	4618      	mov	r0, r3
 800e9dc:	f001 ff7f 	bl	80108de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          reference_integer_ops::DepthwiseConvPerChannel(
 800e9e0:	f8d7 02f8 	ldr.w	r0, [r7, #760]	; 0x2f8
 800e9e4:	f7fd f86b 	bl	800babe <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 800e9e8:	4606      	mov	r6, r0
              tflite::micro::GetTensorData<int8_t>(input),
              tflite::micro::GetTensorShape(filter),
 800e9ea:	f507 7342 	add.w	r3, r7, #776	; 0x308
 800e9ee:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800e9f2:	f8d7 12f4 	ldr.w	r1, [r7, #756]	; 0x2f4
 800e9f6:	4618      	mov	r0, r3
 800e9f8:	f001 ff71 	bl	80108de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          reference_integer_ops::DepthwiseConvPerChannel(
 800e9fc:	f8d7 02f4 	ldr.w	r0, [r7, #756]	; 0x2f4
 800ea00:	f7fd f85d 	bl	800babe <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 800ea04:	6078      	str	r0, [r7, #4]
              tflite::micro::GetTensorData<int8_t>(filter),
              tflite::micro::GetTensorShape(bias),
 800ea06:	f507 7342 	add.w	r3, r7, #776	; 0x308
 800ea0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ea0e:	f8d7 12f0 	ldr.w	r1, [r7, #752]	; 0x2f0
 800ea12:	4618      	mov	r0, r3
 800ea14:	f001 ff63 	bl	80108de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          reference_integer_ops::DepthwiseConvPerChannel(
 800ea18:	f8d7 02f0 	ldr.w	r0, [r7, #752]	; 0x2f0
 800ea1c:	f7fe f8f3 	bl	800cc06 <_ZN6tflite5micro21GetOptionalTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 800ea20:	6038      	str	r0, [r7, #0]
              tflite::micro::GetOptionalTensorData<int32_t>(bias),
              tflite::micro::GetTensorShape(output),
 800ea22:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800ea26:	f8d7 12fc 	ldr.w	r1, [r7, #764]	; 0x2fc
 800ea2a:	4618      	mov	r0, r3
 800ea2c:	f001 ff57 	bl	80108de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          reference_integer_ops::DepthwiseConvPerChannel(
 800ea30:	f8d7 02fc 	ldr.w	r0, [r7, #764]	; 0x2fc
 800ea34:	f7fd f852 	bl	800badc <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 800ea38:	4603      	mov	r3, r0
 800ea3a:	f507 72e6 	add.w	r2, r7, #460	; 0x1cc
 800ea3e:	f507 70c6 	add.w	r0, r7, #396	; 0x18c
 800ea42:	9306      	str	r3, [sp, #24]
 800ea44:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800ea48:	9305      	str	r3, [sp, #20]
 800ea4a:	683b      	ldr	r3, [r7, #0]
 800ea4c:	9304      	str	r3, [sp, #16]
 800ea4e:	f507 7301 	add.w	r3, r7, #516	; 0x204
 800ea52:	9303      	str	r3, [sp, #12]
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	9302      	str	r3, [sp, #8]
 800ea58:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800ea5c:	9301      	str	r3, [sp, #4]
 800ea5e:	9600      	str	r6, [sp, #0]
 800ea60:	4613      	mov	r3, r2
 800ea62:	462a      	mov	r2, r5
 800ea64:	4621      	mov	r1, r4
 800ea66:	f7ff fa3a 	bl	800dede <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>
              tflite::micro::GetTensorShape(output),
 800ea6a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800ea6e:	4618      	mov	r0, r3
 800ea70:	f7f3 fecb 	bl	800280a <_ZN6tflite12RuntimeShapeD1Ev>
              tflite::micro::GetTensorShape(bias),
 800ea74:	f507 7301 	add.w	r3, r7, #516	; 0x204
 800ea78:	4618      	mov	r0, r3
 800ea7a:	f7f3 fec6 	bl	800280a <_ZN6tflite12RuntimeShapeD1Ev>
              tflite::micro::GetTensorShape(filter),
 800ea7e:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800ea82:	4618      	mov	r0, r3
 800ea84:	f7f3 fec1 	bl	800280a <_ZN6tflite12RuntimeShapeD1Ev>
              tflite::micro::GetTensorShape(input),
 800ea88:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 800ea8c:	4618      	mov	r0, r3
 800ea8e:	f7f3 febc 	bl	800280a <_ZN6tflite12RuntimeShapeD1Ev>
              tflite::micro::GetTensorData<int8_t>(output));
          break;
 800ea92:	e018      	b.n	800eac6 <_ZN6tflite12_GLOBAL__N_117DepthwiseConvEvalEP13TfLiteContextP10TfLiteNode+0x472>
        }
        default:
          MicroPrintf("Filter type %s (%d) for input type %s not supported.",
                      TfLiteTypeGetName(filter->type), filter->type,
 800ea94:	f8d7 32f4 	ldr.w	r3, [r7, #756]	; 0x2f4
 800ea98:	7a1b      	ldrb	r3, [r3, #8]
          MicroPrintf("Filter type %s (%d) for input type %s not supported.",
 800ea9a:	4618      	mov	r0, r3
 800ea9c:	f7f6 fe56 	bl	800574c <TfLiteTypeGetName>
 800eaa0:	4604      	mov	r4, r0
                      TfLiteTypeGetName(filter->type), filter->type,
 800eaa2:	f8d7 32f4 	ldr.w	r3, [r7, #756]	; 0x2f4
 800eaa6:	7a1b      	ldrb	r3, [r3, #8]
          MicroPrintf("Filter type %s (%d) for input type %s not supported.",
 800eaa8:	461d      	mov	r5, r3
                      TfLiteTypeGetName(input->type));
 800eaaa:	f8d7 32f8 	ldr.w	r3, [r7, #760]	; 0x2f8
 800eaae:	7a1b      	ldrb	r3, [r3, #8]
          MicroPrintf("Filter type %s (%d) for input type %s not supported.",
 800eab0:	4618      	mov	r0, r3
 800eab2:	f7f6 fe4b 	bl	800574c <TfLiteTypeGetName>
 800eab6:	4603      	mov	r3, r0
 800eab8:	462a      	mov	r2, r5
 800eaba:	4621      	mov	r1, r4
 800eabc:	4853      	ldr	r0, [pc, #332]	; (800ec0c <_ZN6tflite12_GLOBAL__N_117DepthwiseConvEvalEP13TfLiteContextP10TfLiteNode+0x5b8>)
 800eabe:	f7fc fea7 	bl	800b810 <_Z11MicroPrintfPKcz>
          return kTfLiteError;
 800eac2:	2301      	movs	r3, #1
 800eac4:	e09c      	b.n	800ec00 <_ZN6tflite12_GLOBAL__N_117DepthwiseConvEvalEP13TfLiteContextP10TfLiteNode+0x5ac>
      }
      break;
 800eac6:	e09a      	b.n	800ebfe <_ZN6tflite12_GLOBAL__N_117DepthwiseConvEvalEP13TfLiteContextP10TfLiteNode+0x5aa>
    }
    case kTfLiteInt16: {
      switch (filter->type) {
 800eac8:	f8d7 32f4 	ldr.w	r3, [r7, #756]	; 0x2f4
 800eacc:	7a1b      	ldrb	r3, [r3, #8]
 800eace:	2b09      	cmp	r3, #9
 800ead0:	d16c      	bne.n	800ebac <_ZN6tflite12_GLOBAL__N_117DepthwiseConvEvalEP13TfLiteContextP10TfLiteNode+0x558>
        case kTfLiteInt8: {
          reference_integer_ops::DepthwiseConvPerChannel(
              DepthwiseConvParamsQuantized(params, data),
 800ead2:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 800ead6:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 800eada:	f8d7 1304 	ldr.w	r1, [r7, #772]	; 0x304
 800eade:	4618      	mov	r0, r3
 800eae0:	f000 f8f3 	bl	800ecca <_ZN6tflite28DepthwiseConvParamsQuantizedERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE>
              data.per_channel_output_multiplier, data.per_channel_output_shift,
 800eae4:	f8d7 3300 	ldr.w	r3, [r7, #768]	; 0x300
 800eae8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800eaea:	f8d7 3300 	ldr.w	r3, [r7, #768]	; 0x300
 800eaee:	6a9d      	ldr	r5, [r3, #40]	; 0x28
              tflite::micro::GetTensorShape(input),
 800eaf0:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 800eaf4:	f8d7 12f8 	ldr.w	r1, [r7, #760]	; 0x2f8
 800eaf8:	4618      	mov	r0, r3
 800eafa:	f001 fef0 	bl	80108de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          reference_integer_ops::DepthwiseConvPerChannel(
 800eafe:	f8d7 02f8 	ldr.w	r0, [r7, #760]	; 0x2f8
 800eb02:	f7f3 ff14 	bl	800292e <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>
 800eb06:	4606      	mov	r6, r0
              tflite::micro::GetTensorData<int16_t>(input),
              tflite::micro::GetTensorShape(filter),
 800eb08:	f507 7326 	add.w	r3, r7, #664	; 0x298
 800eb0c:	f8d7 12f4 	ldr.w	r1, [r7, #756]	; 0x2f4
 800eb10:	4618      	mov	r0, r3
 800eb12:	f001 fee4 	bl	80108de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          reference_integer_ops::DepthwiseConvPerChannel(
 800eb16:	f8d7 02f4 	ldr.w	r0, [r7, #756]	; 0x2f4
 800eb1a:	f7fc ffd0 	bl	800babe <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 800eb1e:	6078      	str	r0, [r7, #4]
              tflite::micro::GetTensorData<int8_t>(filter),
              tflite::micro::GetTensorShape(bias),
 800eb20:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 800eb24:	f8d7 12f0 	ldr.w	r1, [r7, #752]	; 0x2f0
 800eb28:	4618      	mov	r0, r3
 800eb2a:	f001 fed8 	bl	80108de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          reference_integer_ops::DepthwiseConvPerChannel(
 800eb2e:	f8d7 02f0 	ldr.w	r0, [r7, #752]	; 0x2f0
 800eb32:	f7fe fa58 	bl	800cfe6 <_ZN6tflite5micro21GetOptionalTensorDataIxEEPKT_PK16TfLiteEvalTensor>
 800eb36:	6038      	str	r0, [r7, #0]
              tflite::micro::GetOptionalTensorData<int64_t>(bias),
              tflite::micro::GetTensorShape(output),
 800eb38:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800eb3c:	f8d7 12fc 	ldr.w	r1, [r7, #764]	; 0x2fc
 800eb40:	4618      	mov	r0, r3
 800eb42:	f001 fecc 	bl	80108de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          reference_integer_ops::DepthwiseConvPerChannel(
 800eb46:	f8d7 02fc 	ldr.w	r0, [r7, #764]	; 0x2fc
 800eb4a:	f7f3 feff 	bl	800294c <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
 800eb4e:	4603      	mov	r3, r0
 800eb50:	f507 721f 	add.w	r2, r7, #636	; 0x27c
 800eb54:	f507 700f 	add.w	r0, r7, #572	; 0x23c
 800eb58:	9306      	str	r3, [sp, #24]
 800eb5a:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800eb5e:	9305      	str	r3, [sp, #20]
 800eb60:	683b      	ldr	r3, [r7, #0]
 800eb62:	9304      	str	r3, [sp, #16]
 800eb64:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 800eb68:	9303      	str	r3, [sp, #12]
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	9302      	str	r3, [sp, #8]
 800eb6e:	f507 7326 	add.w	r3, r7, #664	; 0x298
 800eb72:	9301      	str	r3, [sp, #4]
 800eb74:	9600      	str	r6, [sp, #0]
 800eb76:	4613      	mov	r3, r2
 800eb78:	462a      	mov	r2, r5
 800eb7a:	4621      	mov	r1, r4
 800eb7c:	f7ff fb72 	bl	800e264 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps>
              tflite::micro::GetTensorShape(output),
 800eb80:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800eb84:	4618      	mov	r0, r3
 800eb86:	f7f3 fe40 	bl	800280a <_ZN6tflite12RuntimeShapeD1Ev>
              tflite::micro::GetTensorShape(bias),
 800eb8a:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 800eb8e:	4618      	mov	r0, r3
 800eb90:	f7f3 fe3b 	bl	800280a <_ZN6tflite12RuntimeShapeD1Ev>
              tflite::micro::GetTensorShape(filter),
 800eb94:	f507 7326 	add.w	r3, r7, #664	; 0x298
 800eb98:	4618      	mov	r0, r3
 800eb9a:	f7f3 fe36 	bl	800280a <_ZN6tflite12RuntimeShapeD1Ev>
              tflite::micro::GetTensorShape(input),
 800eb9e:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 800eba2:	4618      	mov	r0, r3
 800eba4:	f7f3 fe31 	bl	800280a <_ZN6tflite12RuntimeShapeD1Ev>
              tflite::micro::GetTensorData<int16_t>(output));
          break;
 800eba8:	bf00      	nop
          MicroPrintf("Filter type %s (%d) for input type %s not supported.",
                      TfLiteTypeGetName(filter->type), filter->type,
                      TfLiteTypeGetName(input->type));
          return kTfLiteError;
      }
      break;
 800ebaa:	e028      	b.n	800ebfe <_ZN6tflite12_GLOBAL__N_117DepthwiseConvEvalEP13TfLiteContextP10TfLiteNode+0x5aa>
                      TfLiteTypeGetName(filter->type), filter->type,
 800ebac:	f8d7 32f4 	ldr.w	r3, [r7, #756]	; 0x2f4
 800ebb0:	7a1b      	ldrb	r3, [r3, #8]
          MicroPrintf("Filter type %s (%d) for input type %s not supported.",
 800ebb2:	4618      	mov	r0, r3
 800ebb4:	f7f6 fdca 	bl	800574c <TfLiteTypeGetName>
 800ebb8:	4604      	mov	r4, r0
                      TfLiteTypeGetName(filter->type), filter->type,
 800ebba:	f8d7 32f4 	ldr.w	r3, [r7, #756]	; 0x2f4
 800ebbe:	7a1b      	ldrb	r3, [r3, #8]
          MicroPrintf("Filter type %s (%d) for input type %s not supported.",
 800ebc0:	461d      	mov	r5, r3
                      TfLiteTypeGetName(input->type));
 800ebc2:	f8d7 32f8 	ldr.w	r3, [r7, #760]	; 0x2f8
 800ebc6:	7a1b      	ldrb	r3, [r3, #8]
          MicroPrintf("Filter type %s (%d) for input type %s not supported.",
 800ebc8:	4618      	mov	r0, r3
 800ebca:	f7f6 fdbf 	bl	800574c <TfLiteTypeGetName>
 800ebce:	4603      	mov	r3, r0
 800ebd0:	462a      	mov	r2, r5
 800ebd2:	4621      	mov	r1, r4
 800ebd4:	480d      	ldr	r0, [pc, #52]	; (800ec0c <_ZN6tflite12_GLOBAL__N_117DepthwiseConvEvalEP13TfLiteContextP10TfLiteNode+0x5b8>)
 800ebd6:	f7fc fe1b 	bl	800b810 <_Z11MicroPrintfPKcz>
          return kTfLiteError;
 800ebda:	2301      	movs	r3, #1
 800ebdc:	e010      	b.n	800ec00 <_ZN6tflite12_GLOBAL__N_117DepthwiseConvEvalEP13TfLiteContextP10TfLiteNode+0x5ac>
    }
    default:
      MicroPrintf("Input type %s (%d) not supported.",
                  TfLiteTypeGetName(input->type), input->type);
 800ebde:	f8d7 32f8 	ldr.w	r3, [r7, #760]	; 0x2f8
 800ebe2:	7a1b      	ldrb	r3, [r3, #8]
      MicroPrintf("Input type %s (%d) not supported.",
 800ebe4:	4618      	mov	r0, r3
 800ebe6:	f7f6 fdb1 	bl	800574c <TfLiteTypeGetName>
 800ebea:	4601      	mov	r1, r0
                  TfLiteTypeGetName(input->type), input->type);
 800ebec:	f8d7 32f8 	ldr.w	r3, [r7, #760]	; 0x2f8
 800ebf0:	7a1b      	ldrb	r3, [r3, #8]
      MicroPrintf("Input type %s (%d) not supported.",
 800ebf2:	461a      	mov	r2, r3
 800ebf4:	4806      	ldr	r0, [pc, #24]	; (800ec10 <_ZN6tflite12_GLOBAL__N_117DepthwiseConvEvalEP13TfLiteContextP10TfLiteNode+0x5bc>)
 800ebf6:	f7fc fe0b 	bl	800b810 <_Z11MicroPrintfPKcz>
      return kTfLiteError;
 800ebfa:	2301      	movs	r3, #1
 800ebfc:	e000      	b.n	800ec00 <_ZN6tflite12_GLOBAL__N_117DepthwiseConvEvalEP13TfLiteContextP10TfLiteNode+0x5ac>
  }
  return kTfLiteOk;
 800ebfe:	2300      	movs	r3, #0
}
 800ec00:	4618      	mov	r0, r3
 800ec02:	f507 7743 	add.w	r7, r7, #780	; 0x30c
 800ec06:	46bd      	mov	sp, r7
 800ec08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec0a:	bf00      	nop
 800ec0c:	08027070 	.word	0x08027070
 800ec10:	080270a8 	.word	0x080270a8

0800ec14 <_ZN6tflite26Register_DEPTHWISE_CONV_2DEv>:

}  // namespace

TFLMRegistration Register_DEPTHWISE_CONV_2D() {
 800ec14:	b580      	push	{r7, lr}
 800ec16:	b084      	sub	sp, #16
 800ec18:	af02      	add	r7, sp, #8
 800ec1a:	6078      	str	r0, [r7, #4]
  return tflite::micro::RegisterOp(DepthwiseConvInit, DepthwiseConvPrepare,
 800ec1c:	6878      	ldr	r0, [r7, #4]
 800ec1e:	2300      	movs	r3, #0
 800ec20:	9301      	str	r3, [sp, #4]
 800ec22:	2300      	movs	r3, #0
 800ec24:	9300      	str	r3, [sp, #0]
 800ec26:	4b05      	ldr	r3, [pc, #20]	; (800ec3c <_ZN6tflite26Register_DEPTHWISE_CONV_2DEv+0x28>)
 800ec28:	4a05      	ldr	r2, [pc, #20]	; (800ec40 <_ZN6tflite26Register_DEPTHWISE_CONV_2DEv+0x2c>)
 800ec2a:	4906      	ldr	r1, [pc, #24]	; (800ec44 <_ZN6tflite26Register_DEPTHWISE_CONV_2DEv+0x30>)
 800ec2c:	f001 fdd4 	bl	80107d8 <_ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_ESE_>
                                   DepthwiseConvEval);
 800ec30:	bf00      	nop
}
 800ec32:	6878      	ldr	r0, [r7, #4]
 800ec34:	3708      	adds	r7, #8
 800ec36:	46bd      	mov	sp, r7
 800ec38:	bd80      	pop	{r7, pc}
 800ec3a:	bf00      	nop
 800ec3c:	0800e655 	.word	0x0800e655
 800ec40:	0800efdd 	.word	0x0800efdd
 800ec44:	0800e629 	.word	0x0800e629

0800ec48 <_ZN6tflite24DepthwiseConvParamsFloatERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE>:
const int kDepthwiseConvQuantizedDimension = 3;

// Returns a DepthwiseParams struct with all the parameters needed for a
// float computation.
DepthwiseParams DepthwiseConvParamsFloat(
    const TfLiteDepthwiseConvParams& params, const OpDataConv& data) {
 800ec48:	b580      	push	{r7, lr}
 800ec4a:	b084      	sub	sp, #16
 800ec4c:	af00      	add	r7, sp, #0
 800ec4e:	60f8      	str	r0, [r7, #12]
 800ec50:	60b9      	str	r1, [r7, #8]
 800ec52:	607a      	str	r2, [r7, #4]
  DepthwiseParams op_params;
  CalculateActivationRange(params.activation, &op_params.float_activation_min,
 800ec54:	68bb      	ldr	r3, [r7, #8]
 800ec56:	7c18      	ldrb	r0, [r3, #16]
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	3330      	adds	r3, #48	; 0x30
 800ec62:	4619      	mov	r1, r3
 800ec64:	f7fc ff84 	bl	800bb70 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
                           &op_params.float_activation_max);
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
 800ec68:	68bb      	ldr	r3, [r7, #8]
 800ec6a:	781b      	ldrb	r3, [r3, #0]
 800ec6c:	4618      	mov	r0, r3
 800ec6e:	f001 fe58 	bl	8010922 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
 800ec72:	4603      	mov	r3, r0
 800ec74:	461a      	mov	r2, r3
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	701a      	strb	r2, [r3, #0]
  op_params.padding_values.width = data.padding.width;
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	b21a      	sxth	r2, r3
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	805a      	strh	r2, [r3, #2]
  op_params.padding_values.height = data.padding.height;
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	685b      	ldr	r3, [r3, #4]
 800ec88:	b21a      	sxth	r2, r3
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	809a      	strh	r2, [r3, #4]
  op_params.stride_width = params.stride_width;
 800ec8e:	68bb      	ldr	r3, [r7, #8]
 800ec90:	685b      	ldr	r3, [r3, #4]
 800ec92:	b21a      	sxth	r2, r3
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	815a      	strh	r2, [r3, #10]
  op_params.stride_height = params.stride_height;
 800ec98:	68bb      	ldr	r3, [r7, #8]
 800ec9a:	689b      	ldr	r3, [r3, #8]
 800ec9c:	b21a      	sxth	r2, r3
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	819a      	strh	r2, [r3, #12]
  op_params.dilation_width_factor = params.dilation_width_factor;
 800eca2:	68bb      	ldr	r3, [r7, #8]
 800eca4:	695b      	ldr	r3, [r3, #20]
 800eca6:	b21a      	sxth	r2, r3
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	81da      	strh	r2, [r3, #14]
  op_params.dilation_height_factor = params.dilation_height_factor;
 800ecac:	68bb      	ldr	r3, [r7, #8]
 800ecae:	699b      	ldr	r3, [r3, #24]
 800ecb0:	b21a      	sxth	r2, r3
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	821a      	strh	r2, [r3, #16]
  op_params.depth_multiplier = params.depth_multiplier;
 800ecb6:	68bb      	ldr	r3, [r7, #8]
 800ecb8:	68db      	ldr	r3, [r3, #12]
 800ecba:	b21a      	sxth	r2, r3
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	825a      	strh	r2, [r3, #18]
  return op_params;
 800ecc0:	bf00      	nop
}
 800ecc2:	68f8      	ldr	r0, [r7, #12]
 800ecc4:	3710      	adds	r7, #16
 800ecc6:	46bd      	mov	sp, r7
 800ecc8:	bd80      	pop	{r7, pc}

0800ecca <_ZN6tflite28DepthwiseConvParamsQuantizedERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE>:

// Returns a DepthwiseParams struct with all the parameters needed for a
// quantized computation.
DepthwiseParams DepthwiseConvParamsQuantized(
    const TfLiteDepthwiseConvParams& params, const OpDataConv& data) {
 800ecca:	b580      	push	{r7, lr}
 800eccc:	b084      	sub	sp, #16
 800ecce:	af00      	add	r7, sp, #0
 800ecd0:	60f8      	str	r0, [r7, #12]
 800ecd2:	60b9      	str	r1, [r7, #8]
 800ecd4:	607a      	str	r2, [r7, #4]
  DepthwiseParams op_params;
  op_params.input_offset = -data.input_zero_point;
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	691b      	ldr	r3, [r3, #16]
 800ecda:	425a      	negs	r2, r3
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	615a      	str	r2, [r3, #20]
  op_params.weights_offset = -data.filter_zero_point;
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	695b      	ldr	r3, [r3, #20]
 800ece4:	425a      	negs	r2, r3
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	619a      	str	r2, [r3, #24]
  op_params.output_offset = data.output_zero_point;
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	699a      	ldr	r2, [r3, #24]
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	61da      	str	r2, [r3, #28]
  op_params.output_multiplier = data.output_multiplier;
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	69da      	ldr	r2, [r3, #28]
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	621a      	str	r2, [r3, #32]
  op_params.output_shift = -data.output_shift;
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	6a1b      	ldr	r3, [r3, #32]
 800ecfe:	425a      	negs	r2, r3
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	625a      	str	r2, [r3, #36]	; 0x24
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
 800ed04:	68bb      	ldr	r3, [r7, #8]
 800ed06:	781b      	ldrb	r3, [r3, #0]
 800ed08:	4618      	mov	r0, r3
 800ed0a:	f001 fe0a 	bl	8010922 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
 800ed0e:	4603      	mov	r3, r0
 800ed10:	461a      	mov	r2, r3
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	701a      	strb	r2, [r3, #0]
  op_params.padding_values.height = data.padding.height;
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	685b      	ldr	r3, [r3, #4]
 800ed1a:	b21a      	sxth	r2, r3
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	809a      	strh	r2, [r3, #4]
  op_params.padding_values.width = data.padding.width;
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	b21a      	sxth	r2, r3
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	805a      	strh	r2, [r3, #2]
  op_params.stride_height = params.stride_height;
 800ed2a:	68bb      	ldr	r3, [r7, #8]
 800ed2c:	689b      	ldr	r3, [r3, #8]
 800ed2e:	b21a      	sxth	r2, r3
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	819a      	strh	r2, [r3, #12]
  op_params.stride_width = params.stride_width;
 800ed34:	68bb      	ldr	r3, [r7, #8]
 800ed36:	685b      	ldr	r3, [r3, #4]
 800ed38:	b21a      	sxth	r2, r3
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	815a      	strh	r2, [r3, #10]
  op_params.dilation_height_factor = params.dilation_height_factor;
 800ed3e:	68bb      	ldr	r3, [r7, #8]
 800ed40:	699b      	ldr	r3, [r3, #24]
 800ed42:	b21a      	sxth	r2, r3
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	821a      	strh	r2, [r3, #16]
  op_params.dilation_width_factor = params.dilation_width_factor;
 800ed48:	68bb      	ldr	r3, [r7, #8]
 800ed4a:	695b      	ldr	r3, [r3, #20]
 800ed4c:	b21a      	sxth	r2, r3
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	81da      	strh	r2, [r3, #14]
  op_params.depth_multiplier = params.depth_multiplier;
 800ed52:	68bb      	ldr	r3, [r7, #8]
 800ed54:	68db      	ldr	r3, [r3, #12]
 800ed56:	b21a      	sxth	r2, r3
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	825a      	strh	r2, [r3, #18]
  op_params.quantized_activation_min = data.output_activation_min;
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	629a      	str	r2, [r3, #40]	; 0x28
  op_params.quantized_activation_max = data.output_activation_max;
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	62da      	str	r2, [r3, #44]	; 0x2c
  return op_params;
 800ed6c:	bf00      	nop
}
 800ed6e:	68f8      	ldr	r0, [r7, #12]
 800ed70:	3710      	adds	r7, #16
 800ed72:	46bd      	mov	sp, r7
 800ed74:	bd80      	pop	{r7, pc}
	...

0800ed78 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>:

TfLiteStatus CalculateOpDataDepthwiseConv(
    TfLiteContext* context, TfLiteNode* node,
    const TfLiteDepthwiseConvParams& params, int width, int height,
    int filter_width, int filter_height, int out_width, int out_height,
    const TfLiteType data_type, OpDataConv* data) {
 800ed78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ed7a:	b09d      	sub	sp, #116	; 0x74
 800ed7c:	af0a      	add	r7, sp, #40	; 0x28
 800ed7e:	6278      	str	r0, [r7, #36]	; 0x24
 800ed80:	6239      	str	r1, [r7, #32]
 800ed82:	61fa      	str	r2, [r7, #28]
 800ed84:	61bb      	str	r3, [r7, #24]
  bool has_bias = node->inputs->size == 3;
 800ed86:	6a3b      	ldr	r3, [r7, #32]
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	2b03      	cmp	r3, #3
 800ed8e:	bf0c      	ite	eq
 800ed90:	2301      	moveq	r3, #1
 800ed92:	2300      	movne	r3, #0
 800ed94:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  // Check number of inputs/outputs
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
 800ed98:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800ed9c:	f083 0301 	eor.w	r3, r3, #1
 800eda0:	b2db      	uxtb	r3, r3
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d00f      	beq.n	800edc6 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
 800eda6:	6a3b      	ldr	r3, [r7, #32]
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	2b02      	cmp	r3, #2
 800edae:	d00a      	beq.n	800edc6 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
 800edb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edb2:	695c      	ldr	r4, [r3, #20]
 800edb4:	4b7c      	ldr	r3, [pc, #496]	; (800efa8 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x230>)
 800edb6:	9300      	str	r3, [sp, #0]
 800edb8:	2357      	movs	r3, #87	; 0x57
 800edba:	4a7c      	ldr	r2, [pc, #496]	; (800efac <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x234>)
 800edbc:	497c      	ldr	r1, [pc, #496]	; (800efb0 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x238>)
 800edbe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800edc0:	47a0      	blx	r4
 800edc2:	2301      	movs	r3, #1
 800edc4:	e0ec      	b.n	800efa0 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x228>
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
 800edc6:	6a3b      	ldr	r3, [r7, #32]
 800edc8:	685b      	ldr	r3, [r3, #4]
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	2b01      	cmp	r3, #1
 800edce:	d012      	beq.n	800edf6 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x7e>
 800edd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edd2:	695c      	ldr	r4, [r3, #20]
 800edd4:	6a3b      	ldr	r3, [r7, #32]
 800edd6:	685b      	ldr	r3, [r3, #4]
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	2201      	movs	r2, #1
 800eddc:	9203      	str	r2, [sp, #12]
 800edde:	9302      	str	r3, [sp, #8]
 800ede0:	4b74      	ldr	r3, [pc, #464]	; (800efb4 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x23c>)
 800ede2:	9301      	str	r3, [sp, #4]
 800ede4:	4b74      	ldr	r3, [pc, #464]	; (800efb8 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x240>)
 800ede6:	9300      	str	r3, [sp, #0]
 800ede8:	2358      	movs	r3, #88	; 0x58
 800edea:	4a70      	ldr	r2, [pc, #448]	; (800efac <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x234>)
 800edec:	4973      	ldr	r1, [pc, #460]	; (800efbc <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x244>)
 800edee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800edf0:	47a0      	blx	r4
 800edf2:	2301      	movs	r3, #1
 800edf4:	e0d4      	b.n	800efa0 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x228>

  // Matching GetWindowedOutputSize in TensorFlow.
  auto padding = params.padding;
 800edf6:	69fb      	ldr	r3, [r7, #28]
 800edf8:	781b      	ldrb	r3, [r3, #0]
 800edfa:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  data->padding = ComputePaddingHeightWidth(
      params.stride_height, params.stride_width, params.dilation_height_factor,
 800edfe:	69fb      	ldr	r3, [r7, #28]
 800ee00:	6899      	ldr	r1, [r3, #8]
 800ee02:	69fb      	ldr	r3, [r7, #28]
 800ee04:	685c      	ldr	r4, [r3, #4]
 800ee06:	69fb      	ldr	r3, [r7, #28]
 800ee08:	699d      	ldr	r5, [r3, #24]
      params.dilation_width_factor, height, width, filter_height, filter_width,
 800ee0a:	69fb      	ldr	r3, [r7, #28]
 800ee0c:	695b      	ldr	r3, [r3, #20]
  data->padding = ComputePaddingHeightWidth(
 800ee0e:	6fbe      	ldr	r6, [r7, #120]	; 0x78
 800ee10:	f107 0008 	add.w	r0, r7, #8
 800ee14:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800ee18:	9207      	str	r2, [sp, #28]
 800ee1a:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800ee1e:	9206      	str	r2, [sp, #24]
 800ee20:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 800ee24:	9205      	str	r2, [sp, #20]
 800ee26:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ee28:	9204      	str	r2, [sp, #16]
 800ee2a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ee2c:	9203      	str	r2, [sp, #12]
 800ee2e:	69ba      	ldr	r2, [r7, #24]
 800ee30:	9202      	str	r2, [sp, #8]
 800ee32:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ee34:	9201      	str	r2, [sp, #4]
 800ee36:	9300      	str	r3, [sp, #0]
 800ee38:	462b      	mov	r3, r5
 800ee3a:	4622      	mov	r2, r4
 800ee3c:	f7fe fb32 	bl	800d4a4 <_ZN6tflite25ComputePaddingHeightWidthEiiiiiiii13TfLitePaddingPiS1_>
 800ee40:	4634      	mov	r4, r6
 800ee42:	f107 0308 	add.w	r3, r7, #8
 800ee46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ee48:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      padding, &out_height, &out_width);

  MicroContext* micro_context = GetMicroContext(context);
 800ee4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ee4e:	f7f3 fd62 	bl	8002916 <_ZN6tflite15GetMicroContextEPK13TfLiteContext>
 800ee52:	6438      	str	r0, [r7, #64]	; 0x40

  TfLiteTensor* input =
      micro_context->AllocateTempInputTensor(node, kConvInputTensor);
 800ee54:	4b5a      	ldr	r3, [pc, #360]	; (800efc0 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x248>)
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	461a      	mov	r2, r3
 800ee5a:	6a39      	ldr	r1, [r7, #32]
 800ee5c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800ee5e:	f7fb f8c7 	bl	8009ff0 <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei>
 800ee62:	63f8      	str	r0, [r7, #60]	; 0x3c
  TF_LITE_ENSURE(context, input != nullptr);
 800ee64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d10a      	bne.n	800ee80 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x108>
 800ee6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee6c:	695c      	ldr	r4, [r3, #20]
 800ee6e:	4b55      	ldr	r3, [pc, #340]	; (800efc4 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x24c>)
 800ee70:	9300      	str	r3, [sp, #0]
 800ee72:	2365      	movs	r3, #101	; 0x65
 800ee74:	4a4d      	ldr	r2, [pc, #308]	; (800efac <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x234>)
 800ee76:	494e      	ldr	r1, [pc, #312]	; (800efb0 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x238>)
 800ee78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ee7a:	47a0      	blx	r4
 800ee7c:	2301      	movs	r3, #1
 800ee7e:	e08f      	b.n	800efa0 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x228>
  TfLiteTensor* filter =
      micro_context->AllocateTempInputTensor(node, kConvWeightsTensor);
 800ee80:	4b51      	ldr	r3, [pc, #324]	; (800efc8 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x250>)
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	461a      	mov	r2, r3
 800ee86:	6a39      	ldr	r1, [r7, #32]
 800ee88:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800ee8a:	f7fb f8b1 	bl	8009ff0 <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei>
 800ee8e:	63b8      	str	r0, [r7, #56]	; 0x38
  TF_LITE_ENSURE(context, filter != nullptr);
 800ee90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d10a      	bne.n	800eeac <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x134>
 800ee96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee98:	695c      	ldr	r4, [r3, #20]
 800ee9a:	4b4c      	ldr	r3, [pc, #304]	; (800efcc <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x254>)
 800ee9c:	9300      	str	r3, [sp, #0]
 800ee9e:	2368      	movs	r3, #104	; 0x68
 800eea0:	4a42      	ldr	r2, [pc, #264]	; (800efac <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x234>)
 800eea2:	4943      	ldr	r1, [pc, #268]	; (800efb0 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x238>)
 800eea4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eea6:	47a0      	blx	r4
 800eea8:	2301      	movs	r3, #1
 800eeaa:	e079      	b.n	800efa0 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x228>
  TfLiteTensor* bias =
      micro_context->AllocateTempInputTensor(node, kConvBiasTensor);
 800eeac:	4b48      	ldr	r3, [pc, #288]	; (800efd0 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x258>)
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	461a      	mov	r2, r3
 800eeb2:	6a39      	ldr	r1, [r7, #32]
 800eeb4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800eeb6:	f7fb f89b 	bl	8009ff0 <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei>
 800eeba:	6378      	str	r0, [r7, #52]	; 0x34
  TfLiteTensor* output =
      micro_context->AllocateTempOutputTensor(node, kConvOutputTensor);
 800eebc:	4b45      	ldr	r3, [pc, #276]	; (800efd4 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x25c>)
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	461a      	mov	r2, r3
 800eec2:	6a39      	ldr	r1, [r7, #32]
 800eec4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800eec6:	f7fb f8b6 	bl	800a036 <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei>
 800eeca:	6338      	str	r0, [r7, #48]	; 0x30
  TF_LITE_ENSURE(context, output != nullptr);
 800eecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d10a      	bne.n	800eee8 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x170>
 800eed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eed4:	695c      	ldr	r4, [r3, #20]
 800eed6:	4b40      	ldr	r3, [pc, #256]	; (800efd8 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x260>)
 800eed8:	9300      	str	r3, [sp, #0]
 800eeda:	236d      	movs	r3, #109	; 0x6d
 800eedc:	4a33      	ldr	r2, [pc, #204]	; (800efac <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x234>)
 800eede:	4934      	ldr	r1, [pc, #208]	; (800efb0 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x238>)
 800eee0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eee2:	47a0      	blx	r4
 800eee4:	2301      	movs	r3, #1
 800eee6:	e05b      	b.n	800efa0 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x228>

  // Note that quantized inference requires that all tensors have their
  // parameters set. This is usually done during quantized training.
  if (data_type != kTfLiteFloat32) {
 800eee8:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800eeec:	2b01      	cmp	r3, #1
 800eeee:	d02e      	beq.n	800ef4e <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1d6>
    int output_channels = filter->dims->data[kDepthwiseConvQuantizedDimension];
 800eef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eef2:	695b      	ldr	r3, [r3, #20]
 800eef4:	691b      	ldr	r3, [r3, #16]
 800eef6:	62fb      	str	r3, [r7, #44]	; 0x2c

    TF_LITE_ENSURE_STATUS(tflite::PopulateConvolutionQuantizationParams(
 800eef8:	69fb      	ldr	r3, [r7, #28]
 800eefa:	3310      	adds	r3, #16
 800eefc:	607b      	str	r3, [r7, #4]
 800eefe:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ef00:	321c      	adds	r2, #28
 800ef02:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800ef04:	3120      	adds	r1, #32
 800ef06:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800ef08:	302c      	adds	r0, #44	; 0x2c
 800ef0a:	6fbc      	ldr	r4, [r7, #120]	; 0x78
 800ef0c:	3430      	adds	r4, #48	; 0x30
 800ef0e:	6fbd      	ldr	r5, [r7, #120]	; 0x78
 800ef10:	6a6d      	ldr	r5, [r5, #36]	; 0x24
 800ef12:	6fbe      	ldr	r6, [r7, #120]	; 0x78
 800ef14:	6ab6      	ldr	r6, [r6, #40]	; 0x28
 800ef16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef18:	9308      	str	r3, [sp, #32]
 800ef1a:	9607      	str	r6, [sp, #28]
 800ef1c:	9506      	str	r5, [sp, #24]
 800ef1e:	9405      	str	r4, [sp, #20]
 800ef20:	9004      	str	r0, [sp, #16]
 800ef22:	9103      	str	r1, [sp, #12]
 800ef24:	9202      	str	r2, [sp, #8]
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	9301      	str	r3, [sp, #4]
 800ef2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef2c:	9300      	str	r3, [sp, #0]
 800ef2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ef32:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ef34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ef36:	f7f7 fac3 	bl	80064c0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i>
 800ef3a:	4603      	mov	r3, r0
 800ef3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ef40:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d002      	beq.n	800ef4e <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1d6>
 800ef48:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ef4c:	e028      	b.n	800efa0 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x228>
        &data->output_activation_min, &data->output_activation_max,
        data->per_channel_output_multiplier, data->per_channel_output_shift,
        output_channels));
  }

  data->input_zero_point = input->params.zero_point;
 800ef4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef50:	68da      	ldr	r2, [r3, #12]
 800ef52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ef54:	611a      	str	r2, [r3, #16]
  data->filter_zero_point = filter->params.zero_point;
 800ef56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef58:	68da      	ldr	r2, [r3, #12]
 800ef5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ef5c:	615a      	str	r2, [r3, #20]
  data->output_zero_point = output->params.zero_point;
 800ef5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef60:	68da      	ldr	r2, [r3, #12]
 800ef62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ef64:	619a      	str	r2, [r3, #24]

  micro_context->DeallocateTempTfLiteTensor(input);
 800ef66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	3318      	adds	r3, #24
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ef70:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800ef72:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(filter);
 800ef74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	3318      	adds	r3, #24
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ef7e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800ef80:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(bias);
 800ef82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	3318      	adds	r3, #24
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ef8c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800ef8e:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(output);
 800ef90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	3318      	adds	r3, #24
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ef9a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800ef9c:	4798      	blx	r3

  return kTfLiteOk;
 800ef9e:	2300      	movs	r3, #0
}
 800efa0:	4618      	mov	r0, r3
 800efa2:	374c      	adds	r7, #76	; 0x4c
 800efa4:	46bd      	mov	sp, r7
 800efa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800efa8:	08027128 	.word	0x08027128
 800efac:	080270cc 	.word	0x080270cc
 800efb0:	08027110 	.word	0x08027110
 800efb4:	08027168 	.word	0x08027168
 800efb8:	0802716c 	.word	0x0802716c
 800efbc:	0802714c 	.word	0x0802714c
 800efc0:	08029304 	.word	0x08029304
 800efc4:	08027180 	.word	0x08027180
 800efc8:	08029308 	.word	0x08029308
 800efcc:	08027194 	.word	0x08027194
 800efd0:	0802930c 	.word	0x0802930c
 800efd4:	08029310 	.word	0x08029310
 800efd8:	080271a8 	.word	0x080271a8

0800efdc <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus DepthwiseConvPrepare(TfLiteContext* context, TfLiteNode* node) {
 800efdc:	b590      	push	{r4, r7, lr}
 800efde:	b0a3      	sub	sp, #140	; 0x8c
 800efe0:	af08      	add	r7, sp, #32
 800efe2:	6078      	str	r0, [r7, #4]
 800efe4:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 800efe6:	683b      	ldr	r3, [r7, #0]
 800efe8:	68db      	ldr	r3, [r3, #12]
 800efea:	2b00      	cmp	r3, #0
 800efec:	d101      	bne.n	800eff2 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x16>
 800efee:	f010 fd37 	bl	801fa60 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 800eff2:	683b      	ldr	r3, [r7, #0]
 800eff4:	691b      	ldr	r3, [r3, #16]
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d101      	bne.n	800effe <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x22>
 800effa:	f010 fd31 	bl	801fa60 <abort>

  OpDataConv* data = static_cast<OpDataConv*>(node->user_data);
 800effe:	683b      	ldr	r3, [r7, #0]
 800f000:	68db      	ldr	r3, [r3, #12]
 800f002:	667b      	str	r3, [r7, #100]	; 0x64
  const auto& params =
 800f004:	683b      	ldr	r3, [r7, #0]
 800f006:	691b      	ldr	r3, [r3, #16]
 800f008:	663b      	str	r3, [r7, #96]	; 0x60
      *(static_cast<const TfLiteDepthwiseConvParams*>(node->builtin_data));
  MicroContext* micro_context = GetMicroContext(context);
 800f00a:	6878      	ldr	r0, [r7, #4]
 800f00c:	f7f3 fc83 	bl	8002916 <_ZN6tflite15GetMicroContextEPK13TfLiteContext>
 800f010:	65f8      	str	r0, [r7, #92]	; 0x5c

  TfLiteTensor* output =
      micro_context->AllocateTempOutputTensor(node, kDepthwiseConvOutputTensor);
 800f012:	2200      	movs	r2, #0
 800f014:	6839      	ldr	r1, [r7, #0]
 800f016:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800f018:	f7fb f80d 	bl	800a036 <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei>
 800f01c:	65b8      	str	r0, [r7, #88]	; 0x58
  TF_LITE_ENSURE(context, output != nullptr);
 800f01e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f020:	2b00      	cmp	r3, #0
 800f022:	d10a      	bne.n	800f03a <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x5e>
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	695c      	ldr	r4, [r3, #20]
 800f028:	4b72      	ldr	r3, [pc, #456]	; (800f1f4 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x218>)
 800f02a:	9300      	str	r3, [sp, #0]
 800f02c:	2393      	movs	r3, #147	; 0x93
 800f02e:	4a72      	ldr	r2, [pc, #456]	; (800f1f8 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x21c>)
 800f030:	4972      	ldr	r1, [pc, #456]	; (800f1fc <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x220>)
 800f032:	6878      	ldr	r0, [r7, #4]
 800f034:	47a0      	blx	r4
 800f036:	2301      	movs	r3, #1
 800f038:	e14a      	b.n	800f2d0 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x2f4>
  TfLiteTensor* input =
      micro_context->AllocateTempInputTensor(node, kDepthwiseConvInputTensor);
 800f03a:	2200      	movs	r2, #0
 800f03c:	6839      	ldr	r1, [r7, #0]
 800f03e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800f040:	f7fa ffd6 	bl	8009ff0 <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei>
 800f044:	6578      	str	r0, [r7, #84]	; 0x54
  TF_LITE_ENSURE(context, input != nullptr);
 800f046:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d10a      	bne.n	800f062 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x86>
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	695c      	ldr	r4, [r3, #20]
 800f050:	4b6b      	ldr	r3, [pc, #428]	; (800f200 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x224>)
 800f052:	9300      	str	r3, [sp, #0]
 800f054:	2396      	movs	r3, #150	; 0x96
 800f056:	4a68      	ldr	r2, [pc, #416]	; (800f1f8 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x21c>)
 800f058:	4968      	ldr	r1, [pc, #416]	; (800f1fc <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x220>)
 800f05a:	6878      	ldr	r0, [r7, #4]
 800f05c:	47a0      	blx	r4
 800f05e:	2301      	movs	r3, #1
 800f060:	e136      	b.n	800f2d0 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x2f4>
  TfLiteTensor* filter =
      micro_context->AllocateTempInputTensor(node, kDepthwiseConvWeightsTensor);
 800f062:	2201      	movs	r2, #1
 800f064:	6839      	ldr	r1, [r7, #0]
 800f066:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800f068:	f7fa ffc2 	bl	8009ff0 <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei>
 800f06c:	6538      	str	r0, [r7, #80]	; 0x50
  TF_LITE_ENSURE(context, filter != nullptr);
 800f06e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f070:	2b00      	cmp	r3, #0
 800f072:	d10a      	bne.n	800f08a <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0xae>
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	695c      	ldr	r4, [r3, #20]
 800f078:	4b62      	ldr	r3, [pc, #392]	; (800f204 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x228>)
 800f07a:	9300      	str	r3, [sp, #0]
 800f07c:	2399      	movs	r3, #153	; 0x99
 800f07e:	4a5e      	ldr	r2, [pc, #376]	; (800f1f8 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x21c>)
 800f080:	495e      	ldr	r1, [pc, #376]	; (800f1fc <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x220>)
 800f082:	6878      	ldr	r0, [r7, #4]
 800f084:	47a0      	blx	r4
 800f086:	2301      	movs	r3, #1
 800f088:	e122      	b.n	800f2d0 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x2f4>

  const int input_width = input->dims->data[2];
 800f08a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f08c:	695b      	ldr	r3, [r3, #20]
 800f08e:	68db      	ldr	r3, [r3, #12]
 800f090:	64fb      	str	r3, [r7, #76]	; 0x4c
  const int input_height = input->dims->data[1];
 800f092:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f094:	695b      	ldr	r3, [r3, #20]
 800f096:	689b      	ldr	r3, [r3, #8]
 800f098:	64bb      	str	r3, [r7, #72]	; 0x48
  const int filter_width = filter->dims->data[2];
 800f09a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f09c:	695b      	ldr	r3, [r3, #20]
 800f09e:	68db      	ldr	r3, [r3, #12]
 800f0a0:	647b      	str	r3, [r7, #68]	; 0x44
  const int filter_height = filter->dims->data[1];
 800f0a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f0a4:	695b      	ldr	r3, [r3, #20]
 800f0a6:	689b      	ldr	r3, [r3, #8]
 800f0a8:	643b      	str	r3, [r7, #64]	; 0x40
  const int output_width = output->dims->data[2];
 800f0aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f0ac:	695b      	ldr	r3, [r3, #20]
 800f0ae:	68db      	ldr	r3, [r3, #12]
 800f0b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  const int output_height = output->dims->data[1];
 800f0b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f0b4:	695b      	ldr	r3, [r3, #20]
 800f0b6:	689b      	ldr	r3, [r3, #8]
 800f0b8:	63bb      	str	r3, [r7, #56]	; 0x38

  // Dynamically allocate per-channel quantization parameters.
  const int num_channels = filter->dims->data[kDepthwiseConvQuantizedDimension];
 800f0ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f0bc:	695b      	ldr	r3, [r3, #20]
 800f0be:	691b      	ldr	r3, [r3, #16]
 800f0c0:	637b      	str	r3, [r7, #52]	; 0x34
  data->per_channel_output_multiplier =
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          context, num_channels * sizeof(int32_t)));
 800f0c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
 800f0c8:	0092      	lsls	r2, r2, #2
 800f0ca:	4611      	mov	r1, r2
 800f0cc:	6878      	ldr	r0, [r7, #4]
 800f0ce:	4798      	blx	r3
 800f0d0:	4602      	mov	r2, r0
  data->per_channel_output_multiplier =
 800f0d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f0d4:	625a      	str	r2, [r3, #36]	; 0x24
  data->per_channel_output_shift =
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          context, num_channels * sizeof(int32_t)));
 800f0da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
 800f0dc:	0092      	lsls	r2, r2, #2
 800f0de:	4611      	mov	r1, r2
 800f0e0:	6878      	ldr	r0, [r7, #4]
 800f0e2:	4798      	blx	r3
 800f0e4:	4602      	mov	r2, r0
  data->per_channel_output_shift =
 800f0e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f0e8:	629a      	str	r2, [r3, #40]	; 0x28

  // All per-channel quantized tensors need valid zero point and scale arrays.
  if (input->type == kTfLiteInt8) {
 800f0ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f0ec:	7f1b      	ldrb	r3, [r3, #28]
 800f0ee:	2b09      	cmp	r3, #9
 800f0f0:	d15f      	bne.n	800f1b2 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x1d6>
    TF_LITE_ENSURE_EQ(context, filter->quantization.type,
 800f0f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f0f4:	781b      	ldrb	r3, [r3, #0]
 800f0f6:	2b01      	cmp	r3, #1
 800f0f8:	d012      	beq.n	800f120 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x144>
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	695c      	ldr	r4, [r3, #20]
 800f0fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f100:	781b      	ldrb	r3, [r3, #0]
 800f102:	461a      	mov	r2, r3
 800f104:	2301      	movs	r3, #1
 800f106:	9303      	str	r3, [sp, #12]
 800f108:	9202      	str	r2, [sp, #8]
 800f10a:	4b3f      	ldr	r3, [pc, #252]	; (800f208 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 800f10c:	9301      	str	r3, [sp, #4]
 800f10e:	4b3f      	ldr	r3, [pc, #252]	; (800f20c <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 800f110:	9300      	str	r3, [sp, #0]
 800f112:	23ad      	movs	r3, #173	; 0xad
 800f114:	4a38      	ldr	r2, [pc, #224]	; (800f1f8 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x21c>)
 800f116:	493e      	ldr	r1, [pc, #248]	; (800f210 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x234>)
 800f118:	6878      	ldr	r0, [r7, #4]
 800f11a:	47a0      	blx	r4
 800f11c:	2301      	movs	r3, #1
 800f11e:	e0d7      	b.n	800f2d0 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x2f4>
                      kTfLiteAffineQuantization);

    const auto* affine_quantization =
 800f120:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f122:	685b      	ldr	r3, [r3, #4]
 800f124:	633b      	str	r3, [r7, #48]	; 0x30
        static_cast<TfLiteAffineQuantization*>(filter->quantization.params);
    TFLITE_DCHECK(affine_quantization != nullptr);
 800f126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d101      	bne.n	800f130 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x154>
 800f12c:	f010 fc98 	bl	801fa60 <abort>
    TFLITE_DCHECK(affine_quantization->scale != nullptr);
 800f130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	2b00      	cmp	r3, #0
 800f136:	d101      	bne.n	800f13c <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x160>
 800f138:	f010 fc92 	bl	801fa60 <abort>
    TFLITE_DCHECK(affine_quantization->zero_point != nullptr);
 800f13c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f13e:	685b      	ldr	r3, [r3, #4]
 800f140:	2b00      	cmp	r3, #0
 800f142:	d101      	bne.n	800f148 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x16c>
 800f144:	f010 fc8c 	bl	801fa60 <abort>

    TF_LITE_ENSURE(
 800f148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	2b01      	cmp	r3, #1
 800f150:	d012      	beq.n	800f178 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x19c>
 800f152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	681a      	ldr	r2, [r3, #0]
 800f158:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f15a:	695b      	ldr	r3, [r3, #20]
 800f15c:	691b      	ldr	r3, [r3, #16]
 800f15e:	429a      	cmp	r2, r3
 800f160:	d00a      	beq.n	800f178 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x19c>
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	695c      	ldr	r4, [r3, #20]
 800f166:	4b2b      	ldr	r3, [pc, #172]	; (800f214 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x238>)
 800f168:	9300      	str	r3, [sp, #0]
 800f16a:	23b6      	movs	r3, #182	; 0xb6
 800f16c:	4a22      	ldr	r2, [pc, #136]	; (800f1f8 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x21c>)
 800f16e:	4923      	ldr	r1, [pc, #140]	; (800f1fc <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x220>)
 800f170:	6878      	ldr	r0, [r7, #4]
 800f172:	47a0      	blx	r4
 800f174:	2301      	movs	r3, #1
 800f176:	e0ab      	b.n	800f2d0 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x2f4>
        context, affine_quantization->scale->size == 1 ||
                     affine_quantization->scale->size ==
                         filter->dims->data[kDepthwiseConvQuantizedDimension]);

    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size,
 800f178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	681a      	ldr	r2, [r3, #0]
 800f17e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f180:	685b      	ldr	r3, [r3, #4]
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	429a      	cmp	r2, r3
 800f186:	d014      	beq.n	800f1b2 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x1d6>
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	695c      	ldr	r4, [r3, #20]
 800f18c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f194:	6852      	ldr	r2, [r2, #4]
 800f196:	6812      	ldr	r2, [r2, #0]
 800f198:	9203      	str	r2, [sp, #12]
 800f19a:	9302      	str	r3, [sp, #8]
 800f19c:	4b1e      	ldr	r3, [pc, #120]	; (800f218 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 800f19e:	9301      	str	r3, [sp, #4]
 800f1a0:	4b1e      	ldr	r3, [pc, #120]	; (800f21c <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 800f1a2:	9300      	str	r3, [sp, #0]
 800f1a4:	23bb      	movs	r3, #187	; 0xbb
 800f1a6:	4a14      	ldr	r2, [pc, #80]	; (800f1f8 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x21c>)
 800f1a8:	4919      	ldr	r1, [pc, #100]	; (800f210 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x234>)
 800f1aa:	6878      	ldr	r0, [r7, #4]
 800f1ac:	47a0      	blx	r4
 800f1ae:	2301      	movs	r3, #1
 800f1b0:	e08e      	b.n	800f2d0 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x2f4>
                      affine_quantization->zero_point->size);
  }

  TF_LITE_ENSURE_MSG(
 800f1b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f1b4:	7f1a      	ldrb	r2, [r3, #28]
 800f1b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f1b8:	7f1b      	ldrb	r3, [r3, #28]
 800f1ba:	429a      	cmp	r2, r3
 800f1bc:	d032      	beq.n	800f224 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x248>
 800f1be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f1c0:	7f1b      	ldrb	r3, [r3, #28]
 800f1c2:	2b09      	cmp	r3, #9
 800f1c4:	d107      	bne.n	800f1d6 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x1fa>
 800f1c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f1c8:	7f1b      	ldrb	r3, [r3, #28]
 800f1ca:	2b12      	cmp	r3, #18
 800f1cc:	d02a      	beq.n	800f224 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x248>
 800f1ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f1d0:	7f1b      	ldrb	r3, [r3, #28]
 800f1d2:	2b09      	cmp	r3, #9
 800f1d4:	d026      	beq.n	800f224 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x248>
 800f1d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f1d8:	7f1b      	ldrb	r3, [r3, #28]
 800f1da:	2b07      	cmp	r3, #7
 800f1dc:	d103      	bne.n	800f1e6 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x20a>
 800f1de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f1e0:	7f1b      	ldrb	r3, [r3, #28]
 800f1e2:	2b09      	cmp	r3, #9
 800f1e4:	d01e      	beq.n	800f224 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x248>
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	695b      	ldr	r3, [r3, #20]
 800f1ea:	490d      	ldr	r1, [pc, #52]	; (800f220 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 800f1ec:	6878      	ldr	r0, [r7, #4]
 800f1ee:	4798      	blx	r3
 800f1f0:	2301      	movs	r3, #1
 800f1f2:	e06d      	b.n	800f2d0 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x2f4>
 800f1f4:	080271a8 	.word	0x080271a8
 800f1f8:	080270cc 	.word	0x080270cc
 800f1fc:	08027110 	.word	0x08027110
 800f200:	08027180 	.word	0x08027180
 800f204:	08027194 	.word	0x08027194
 800f208:	080271bc 	.word	0x080271bc
 800f20c:	080271d8 	.word	0x080271d8
 800f210:	0802714c 	.word	0x0802714c
 800f214:	080271f4 	.word	0x080271f4
 800f218:	08027278 	.word	0x08027278
 800f21c:	080272a0 	.word	0x080272a0
 800f220:	080272c4 	.word	0x080272c4
          (input->type == kTfLiteInt8 &&
           (filter->type == kTfLiteInt4 || filter->type == kTfLiteInt8)) ||
          (input->type == kTfLiteInt16 && filter->type == kTfLiteInt8),
      "Hybrid models are not supported on TFLite Micro.");

  if (filter->type == kTfLiteInt4) {
 800f224:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f226:	7f1b      	ldrb	r3, [r3, #28]
 800f228:	2b12      	cmp	r3, #18
 800f22a:	d11c      	bne.n	800f266 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x28a>
    int filter_size =
        RuntimeShape(filter->dims->size,
 800f22c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f22e:	695b      	ldr	r3, [r3, #20]
 800f230:	6819      	ldr	r1, [r3, #0]
                     reinterpret_cast<const int32_t*>(filter->dims->data))
 800f232:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f234:	695b      	ldr	r3, [r3, #20]
 800f236:	1d1a      	adds	r2, r3, #4
        RuntimeShape(filter->dims->size,
 800f238:	f107 030c 	add.w	r3, r7, #12
 800f23c:	4618      	mov	r0, r3
 800f23e:	f7f6 ff84 	bl	800614a <_ZN6tflite12RuntimeShapeC1EiPKl>
            .FlatSize();
 800f242:	f107 030c 	add.w	r3, r7, #12
 800f246:	4618      	mov	r0, r3
 800f248:	f7f3 fb1c 	bl	8002884 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 800f24c:	62f8      	str	r0, [r7, #44]	; 0x2c
        RuntimeShape(filter->dims->size,
 800f24e:	f107 030c 	add.w	r3, r7, #12
 800f252:	4618      	mov	r0, r3
 800f254:	f7f3 fad9 	bl	800280a <_ZN6tflite12RuntimeShapeD1Ev>
    context->RequestScratchBufferInArena(context, filter_size,
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f25c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f25e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f260:	3234      	adds	r2, #52	; 0x34
 800f262:	6878      	ldr	r0, [r7, #4]
 800f264:	4798      	blx	r3
                                         &data->filter_buffer_index);
  }

  TF_LITE_ENSURE_STATUS(CalculateOpDataDepthwiseConv(
 800f266:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f268:	7f1b      	ldrb	r3, [r3, #28]
 800f26a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f26c:	9206      	str	r2, [sp, #24]
 800f26e:	9305      	str	r3, [sp, #20]
 800f270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f272:	9304      	str	r3, [sp, #16]
 800f274:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f276:	9303      	str	r3, [sp, #12]
 800f278:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f27a:	9302      	str	r3, [sp, #8]
 800f27c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f27e:	9301      	str	r3, [sp, #4]
 800f280:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f282:	9300      	str	r3, [sp, #0]
 800f284:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f286:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f288:	6839      	ldr	r1, [r7, #0]
 800f28a:	6878      	ldr	r0, [r7, #4]
 800f28c:	f7ff fd74 	bl	800ed78 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>
 800f290:	4603      	mov	r3, r0
 800f292:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f296:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d002      	beq.n	800f2a4 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x2c8>
 800f29e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f2a2:	e015      	b.n	800f2d0 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x2f4>
      context, node, params, input_width, input_height, filter_width,
      filter_height, output_width, output_height, input->type, data));

  micro_context->DeallocateTempTfLiteTensor(output);
 800f2a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	3318      	adds	r3, #24
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f2ae:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800f2b0:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(input);
 800f2b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	3318      	adds	r3, #24
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f2bc:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800f2be:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(filter);
 800f2c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	3318      	adds	r3, #24
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f2ca:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800f2cc:	4798      	blx	r3

  return kTfLiteOk;
 800f2ce:	2300      	movs	r3, #0
}
 800f2d0:	4618      	mov	r0, r3
 800f2d2:	376c      	adds	r7, #108	; 0x6c
 800f2d4:	46bd      	mov	sp, r7
 800f2d6:	bd90      	pop	{r4, r7, pc}

0800f2d8 <_ZSt3minIiERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800f2d8:	b480      	push	{r7}
 800f2da:	b083      	sub	sp, #12
 800f2dc:	af00      	add	r7, sp, #0
 800f2de:	6078      	str	r0, [r7, #4]
 800f2e0:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800f2e2:	683b      	ldr	r3, [r7, #0]
 800f2e4:	681a      	ldr	r2, [r3, #0]
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	429a      	cmp	r2, r3
 800f2ec:	da01      	bge.n	800f2f2 <_ZSt3minIiERKT_S2_S2_+0x1a>
	return __b;
 800f2ee:	683b      	ldr	r3, [r7, #0]
 800f2f0:	e000      	b.n	800f2f4 <_ZSt3minIiERKT_S2_S2_+0x1c>
      return __a;
 800f2f2:	687b      	ldr	r3, [r7, #4]
    }
 800f2f4:	4618      	mov	r0, r3
 800f2f6:	370c      	adds	r7, #12
 800f2f8:	46bd      	mov	sp, r7
 800f2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2fe:	4770      	bx	lr

0800f300 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_>:
inline std::int32_t RoundingHalfSum(std::int32_t a, std::int32_t b) {
 800f300:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800f304:	b08d      	sub	sp, #52	; 0x34
 800f306:	af00      	add	r7, sp, #0
 800f308:	60f8      	str	r0, [r7, #12]
 800f30a:	60b9      	str	r1, [r7, #8]
  std::int64_t a64 = a;
 800f30c:	68f9      	ldr	r1, [r7, #12]
 800f30e:	17c8      	asrs	r0, r1, #31
 800f310:	6039      	str	r1, [r7, #0]
 800f312:	6078      	str	r0, [r7, #4]
 800f314:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f318:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
  std::int64_t b64 = b;
 800f31c:	68b9      	ldr	r1, [r7, #8]
 800f31e:	17c8      	asrs	r0, r1, #31
 800f320:	460a      	mov	r2, r1
 800f322:	4603      	mov	r3, r0
 800f324:	e9c7 2308 	strd	r2, r3, [r7, #32]
  std::int64_t sum = a64 + b64;
 800f328:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800f32c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f330:	1884      	adds	r4, r0, r2
 800f332:	eb41 0503 	adc.w	r5, r1, r3
 800f336:	e9c7 4506 	strd	r4, r5, [r7, #24]
  std::int64_t sign = sum >= 0 ? 1 : -1;
 800f33a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f33e:	2b00      	cmp	r3, #0
 800f340:	db04      	blt.n	800f34c <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_+0x4c>
 800f342:	f04f 0201 	mov.w	r2, #1
 800f346:	f04f 0300 	mov.w	r3, #0
 800f34a:	e003      	b.n	800f354 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_+0x54>
 800f34c:	f04f 32ff 	mov.w	r2, #4294967295
 800f350:	f04f 33ff 	mov.w	r3, #4294967295
 800f354:	e9c7 2304 	strd	r2, r3, [r7, #16]
  return static_cast<std::int32_t>((sum + sign) / 2);
 800f358:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800f35c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f360:	eb10 0a02 	adds.w	sl, r0, r2
 800f364:	eb41 0b03 	adc.w	fp, r1, r3
 800f368:	4652      	mov	r2, sl
 800f36a:	465b      	mov	r3, fp
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	da05      	bge.n	800f37c <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_+0x7c>
 800f370:	f112 0801 	adds.w	r8, r2, #1
 800f374:	f143 0900 	adc.w	r9, r3, #0
 800f378:	4642      	mov	r2, r8
 800f37a:	464b      	mov	r3, r9
 800f37c:	f04f 0000 	mov.w	r0, #0
 800f380:	f04f 0100 	mov.w	r1, #0
 800f384:	0850      	lsrs	r0, r2, #1
 800f386:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 800f38a:	1059      	asrs	r1, r3, #1
 800f38c:	4602      	mov	r2, r0
 800f38e:	460b      	mov	r3, r1
 800f390:	4613      	mov	r3, r2
}
 800f392:	4618      	mov	r0, r3
 800f394:	3734      	adds	r7, #52	; 0x34
 800f396:	46bd      	mov	sp, r7
 800f398:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800f39c:	4770      	bx	lr

0800f39e <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>:
    int32_t x, int32_t quantized_multiplier, int left_shift) {
 800f39e:	b580      	push	{r7, lr}
 800f3a0:	b084      	sub	sp, #16
 800f3a2:	af00      	add	r7, sp, #0
 800f3a4:	60f8      	str	r0, [r7, #12]
 800f3a6:	60b9      	str	r1, [r7, #8]
 800f3a8:	607a      	str	r2, [r7, #4]
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
 800f3aa:	68fa      	ldr	r2, [r7, #12]
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	fa02 f303 	lsl.w	r3, r2, r3
 800f3b2:	68b9      	ldr	r1, [r7, #8]
 800f3b4:	4618      	mov	r0, r3
 800f3b6:	f7f6 fa7b 	bl	80058b0 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 800f3ba:	4603      	mov	r3, r0
}
 800f3bc:	4618      	mov	r0, r3
 800f3be:	3710      	adds	r7, #16
 800f3c0:	46bd      	mov	sp, r7
 800f3c2:	bd80      	pop	{r7, pc}

0800f3c4 <_ZN6tflite13GetReciprocalEliPi>:
                                                     InputIntegerBits>(
      input_val);
}

inline int32_t GetReciprocal(int32_t x, int x_integer_digits,
                             int* num_bits_over_unit) {
 800f3c4:	b580      	push	{r7, lr}
 800f3c6:	b088      	sub	sp, #32
 800f3c8:	af00      	add	r7, sp, #0
 800f3ca:	60f8      	str	r0, [r7, #12]
 800f3cc:	60b9      	str	r1, [r7, #8]
 800f3ce:	607a      	str	r2, [r7, #4]
  int headroom_plus_one = CountLeadingZeros(static_cast<uint32_t>(x));
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	4618      	mov	r0, r3
 800f3d4:	f7f6 ff7d 	bl	80062d2 <_ZN6tflite17CountLeadingZerosImEEiT_>
 800f3d8:	61f8      	str	r0, [r7, #28]
  // This is the number of bits to the left of the binary point above 1.0.
  // Consider x=1.25.  In that case shifted_scale=0.8 and
  // no later adjustment will be needed.
  *num_bits_over_unit = x_integer_digits - headroom_plus_one;
 800f3da:	68ba      	ldr	r2, [r7, #8]
 800f3dc:	69fb      	ldr	r3, [r7, #28]
 800f3de:	1ad2      	subs	r2, r2, r3
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	601a      	str	r2, [r3, #0]
  const int32_t shifted_sum_minus_one =
      static_cast<int32_t>((static_cast<uint32_t>(x) << headroom_plus_one) -
 800f3e4:	68fa      	ldr	r2, [r7, #12]
 800f3e6:	69fb      	ldr	r3, [r7, #28]
 800f3e8:	fa02 f303 	lsl.w	r3, r2, r3
 800f3ec:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  const int32_t shifted_sum_minus_one =
 800f3f0:	61bb      	str	r3, [r7, #24]
                           (static_cast<uint32_t>(1) << 31));

  gemmlowp::FixedPoint<int32_t, 0> shifted_scale =
      gemmlowp::one_over_one_plus_x_for_x_in_0_1(
 800f3f2:	69b8      	ldr	r0, [r7, #24]
 800f3f4:	f000 f811 	bl	800f41a <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800f3f8:	4603      	mov	r3, r0
 800f3fa:	4618      	mov	r0, r3
 800f3fc:	f000 f81e 	bl	800f43c <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>
 800f400:	4603      	mov	r3, r0
 800f402:	617b      	str	r3, [r7, #20]
          gemmlowp::FixedPoint<int32_t, 0>::FromRaw(shifted_sum_minus_one));
  return shifted_scale.raw();
 800f404:	f107 0314 	add.w	r3, r7, #20
 800f408:	4618      	mov	r0, r3
 800f40a:	f7f6 ff75 	bl	80062f8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800f40e:	4603      	mov	r3, r0
 800f410:	681b      	ldr	r3, [r3, #0]
}
 800f412:	4618      	mov	r0, r3
 800f414:	3720      	adds	r7, #32
 800f416:	46bd      	mov	sp, r7
 800f418:	bd80      	pop	{r7, pc}

0800f41a <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 800f41a:	b580      	push	{r7, lr}
 800f41c:	b084      	sub	sp, #16
 800f41e:	af00      	add	r7, sp, #0
 800f420:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 800f422:	f107 030c 	add.w	r3, r7, #12
 800f426:	4618      	mov	r0, r3
 800f428:	f7f6 ff66 	bl	80062f8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800f42c:	4602      	mov	r2, r0
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	6013      	str	r3, [r2, #0]
    return retval;
 800f432:	68fb      	ldr	r3, [r7, #12]
  }
 800f434:	4618      	mov	r0, r3
 800f436:	3710      	adds	r7, #16
 800f438:	46bd      	mov	sp, r7
 800f43a:	bd80      	pop	{r7, pc}

0800f43c <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>:

// Implementation of logistic function.

// Returns 1 / (1 + x) for x in (0, 1).
template <typename tRawType>
FixedPoint<tRawType, 0> one_over_one_plus_x_for_x_in_0_1(
 800f43c:	b580      	push	{r7, lr}
 800f43e:	b08a      	sub	sp, #40	; 0x28
 800f440:	af00      	add	r7, sp, #0
 800f442:	6078      	str	r0, [r7, #4]
    FixedPoint<tRawType, 0> a) {
  typedef FixedPoint<tRawType, 0> F0;
  typedef FixedPoint<tRawType, 2> F2;
  F0 half_denominator = RoundingHalfSum(a, F0::One());
 800f444:	f000 f85a 	bl	800f4fc <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>
 800f448:	4603      	mov	r3, r0
 800f44a:	4619      	mov	r1, r3
 800f44c:	6878      	ldr	r0, [r7, #4]
 800f44e:	f000 f860 	bl	800f512 <_ZN8gemmlowp15RoundingHalfSumIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800f452:	4603      	mov	r3, r0
 800f454:	623b      	str	r3, [r7, #32]
  // Newton-Raphson division
  // https://en.wikipedia.org/wiki/Division_algorithm#Newton.E2.80.93Raphson_division
  // Refer to that page for the logic behind the 48/17 and 32/17 constants.
  const F2 constant_48_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, 1515870810, 48.0 / 17.0);
 800f456:	f04f 305a 	mov.w	r0, #1515870810	; 0x5a5a5a5a
 800f45a:	f000 f88c 	bl	800f576 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>
 800f45e:	4603      	mov	r3, r0
 800f460:	4618      	mov	r0, r3
 800f462:	f000 f874 	bl	800f54e <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 800f466:	4603      	mov	r3, r0
 800f468:	61fb      	str	r3, [r7, #28]
  const F2 constant_neg_32_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, -1010580540, -32.0 / 17.0);
 800f46a:	4823      	ldr	r0, [pc, #140]	; (800f4f8 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xbc>)
 800f46c:	f000 f883 	bl	800f576 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>
 800f470:	4603      	mov	r3, r0
 800f472:	4618      	mov	r0, r3
 800f474:	f000 f86b 	bl	800f54e <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 800f478:	4603      	mov	r3, r0
 800f47a:	61bb      	str	r3, [r7, #24]
  F2 x = constant_48_over_17 + half_denominator * constant_neg_32_over_17;
 800f47c:	69b9      	ldr	r1, [r7, #24]
 800f47e:	6a38      	ldr	r0, [r7, #32]
 800f480:	f000 f886 	bl	800f590 <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800f484:	4603      	mov	r3, r0
 800f486:	4619      	mov	r1, r3
 800f488:	69f8      	ldr	r0, [r7, #28]
 800f48a:	f000 f8a3 	bl	800f5d4 <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800f48e:	4603      	mov	r3, r0
 800f490:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < 3; i++) {
 800f492:	2300      	movs	r3, #0
 800f494:	627b      	str	r3, [r7, #36]	; 0x24
 800f496:	e020      	b.n	800f4da <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x9e>
    F2 half_denominator_times_x = half_denominator * x;
 800f498:	6979      	ldr	r1, [r7, #20]
 800f49a:	6a38      	ldr	r0, [r7, #32]
 800f49c:	f000 f878 	bl	800f590 <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800f4a0:	4603      	mov	r3, r0
 800f4a2:	613b      	str	r3, [r7, #16]
    F2 one_minus_half_denominator_times_x =
        F2::One() - half_denominator_times_x;
 800f4a4:	f000 f8b4 	bl	800f610 <_ZN8gemmlowp10FixedPointIlLi2EE3OneEv>
 800f4a8:	4603      	mov	r3, r0
 800f4aa:	6939      	ldr	r1, [r7, #16]
 800f4ac:	4618      	mov	r0, r3
 800f4ae:	f000 f8b8 	bl	800f622 <_ZN8gemmlowpmiIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800f4b2:	4603      	mov	r3, r0
 800f4b4:	60fb      	str	r3, [r7, #12]
    x = x + Rescale<2>(x * one_minus_half_denominator_times_x);
 800f4b6:	68f9      	ldr	r1, [r7, #12]
 800f4b8:	6978      	ldr	r0, [r7, #20]
 800f4ba:	f000 f8d0 	bl	800f65e <_ZN8gemmlowpmlIlLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800f4be:	4603      	mov	r3, r0
 800f4c0:	4618      	mov	r0, r3
 800f4c2:	f000 f8ee 	bl	800f6a2 <_ZN8gemmlowp7RescaleILi2ElLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 800f4c6:	4603      	mov	r3, r0
 800f4c8:	4619      	mov	r1, r3
 800f4ca:	6978      	ldr	r0, [r7, #20]
 800f4cc:	f000 f882 	bl	800f5d4 <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800f4d0:	4603      	mov	r3, r0
 800f4d2:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < 3; i++) {
 800f4d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4d6:	3301      	adds	r3, #1
 800f4d8:	627b      	str	r3, [r7, #36]	; 0x24
 800f4da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4dc:	2b02      	cmp	r3, #2
 800f4de:	dddb      	ble.n	800f498 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x5c>
  }
  return Rescale<0>(ExactMulByPot<-1>(x));
 800f4e0:	6978      	ldr	r0, [r7, #20]
 800f4e2:	f000 f8f8 	bl	800f6d6 <_ZN8gemmlowp13ExactMulByPotILin1ElLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>
 800f4e6:	4603      	mov	r3, r0
 800f4e8:	4618      	mov	r0, r3
 800f4ea:	f000 f90a 	bl	800f702 <_ZN8gemmlowp7RescaleILi0ElLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 800f4ee:	4603      	mov	r3, r0
}
 800f4f0:	4618      	mov	r0, r3
 800f4f2:	3728      	adds	r7, #40	; 0x28
 800f4f4:	46bd      	mov	sp, r7
 800f4f6:	bd80      	pop	{r7, pc}
 800f4f8:	c3c3c3c4 	.word	0xc3c3c3c4

0800f4fc <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>:
  static FixedPoint One() {
 800f4fc:	b580      	push	{r7, lr}
 800f4fe:	af00      	add	r7, sp, #0
    return FromScalarRaw(
 800f500:	f000 f919 	bl	800f736 <_ZN8gemmlowp10FixedPointIlLi0EE12ScalarRawMaxEv>
 800f504:	4603      	mov	r3, r0
 800f506:	4618      	mov	r0, r3
 800f508:	f7f6 ff01 	bl	800630e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800f50c:	4603      	mov	r3, r0
  }
 800f50e:	4618      	mov	r0, r3
 800f510:	bd80      	pop	{r7, pc}

0800f512 <_ZN8gemmlowp15RoundingHalfSumIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(RoundingHalfSum, RoundingHalfSum)
 800f512:	b590      	push	{r4, r7, lr}
 800f514:	b083      	sub	sp, #12
 800f516:	af00      	add	r7, sp, #0
 800f518:	6078      	str	r0, [r7, #4]
 800f51a:	6039      	str	r1, [r7, #0]
 800f51c:	1d3b      	adds	r3, r7, #4
 800f51e:	4618      	mov	r0, r3
 800f520:	f7f6 feea 	bl	80062f8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800f524:	4603      	mov	r3, r0
 800f526:	681c      	ldr	r4, [r3, #0]
 800f528:	463b      	mov	r3, r7
 800f52a:	4618      	mov	r0, r3
 800f52c:	f7f6 fee4 	bl	80062f8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800f530:	4603      	mov	r3, r0
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	4619      	mov	r1, r3
 800f536:	4620      	mov	r0, r4
 800f538:	f7ff fee2 	bl	800f300 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_>
 800f53c:	4603      	mov	r3, r0
 800f53e:	4618      	mov	r0, r3
 800f540:	f7ff ff6b 	bl	800f41a <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800f544:	4603      	mov	r3, r0
 800f546:	4618      	mov	r0, r3
 800f548:	370c      	adds	r7, #12
 800f54a:	46bd      	mov	sp, r7
 800f54c:	bd90      	pop	{r4, r7, pc}

0800f54e <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 800f54e:	b590      	push	{r4, r7, lr}
 800f550:	b085      	sub	sp, #20
 800f552:	af00      	add	r7, sp, #0
 800f554:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 800f556:	f107 030c 	add.w	r3, r7, #12
 800f55a:	4618      	mov	r0, r3
 800f55c:	f000 f8f2 	bl	800f744 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800f560:	4604      	mov	r4, r0
 800f562:	6878      	ldr	r0, [r7, #4]
 800f564:	f7f6 fb4e 	bl	8005c04 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800f568:	4603      	mov	r3, r0
 800f56a:	6023      	str	r3, [r4, #0]
    return retval;
 800f56c:	68fb      	ldr	r3, [r7, #12]
  }
 800f56e:	4618      	mov	r0, r3
 800f570:	3714      	adds	r7, #20
 800f572:	46bd      	mov	sp, r7
 800f574:	bd90      	pop	{r4, r7, pc}

0800f576 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>:
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
 800f576:	b580      	push	{r7, lr}
 800f578:	b082      	sub	sp, #8
 800f57a:	af00      	add	r7, sp, #0
 800f57c:	6078      	str	r0, [r7, #4]
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
 800f57e:	2100      	movs	r1, #0
 800f580:	6878      	ldr	r0, [r7, #4]
 800f582:	f7f6 facb 	bl	8005b1c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 800f586:	4603      	mov	r3, r0
}
 800f588:	4618      	mov	r0, r3
 800f58a:	3708      	adds	r7, #8
 800f58c:	46bd      	mov	sp, r7
 800f58e:	bd80      	pop	{r7, pc}

0800f590 <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 800f590:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f592:	b085      	sub	sp, #20
 800f594:	af00      	add	r7, sp, #0
 800f596:	6078      	str	r0, [r7, #4]
 800f598:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 800f59a:	1d3b      	adds	r3, r7, #4
 800f59c:	4618      	mov	r0, r3
 800f59e:	f7f6 feab 	bl	80062f8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800f5a2:	4603      	mov	r3, r0
 800f5a4:	681d      	ldr	r5, [r3, #0]
 800f5a6:	463b      	mov	r3, r7
 800f5a8:	4618      	mov	r0, r3
 800f5aa:	f000 f8cb 	bl	800f744 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800f5ae:	4603      	mov	r3, r0
 800f5b0:	681e      	ldr	r6, [r3, #0]
 800f5b2:	f107 030c 	add.w	r3, r7, #12
 800f5b6:	4618      	mov	r0, r3
 800f5b8:	f000 f8c4 	bl	800f744 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800f5bc:	4604      	mov	r4, r0
 800f5be:	4631      	mov	r1, r6
 800f5c0:	4628      	mov	r0, r5
 800f5c2:	f7f6 f975 	bl	80058b0 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 800f5c6:	4603      	mov	r3, r0
 800f5c8:	6023      	str	r3, [r4, #0]
  return c;
 800f5ca:	68fb      	ldr	r3, [r7, #12]
}
 800f5cc:	4618      	mov	r0, r3
 800f5ce:	3714      	adds	r7, #20
 800f5d0:	46bd      	mov	sp, r7
 800f5d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f5d4 <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 800f5d4:	b590      	push	{r4, r7, lr}
 800f5d6:	b083      	sub	sp, #12
 800f5d8:	af00      	add	r7, sp, #0
 800f5da:	6078      	str	r0, [r7, #4]
 800f5dc:	6039      	str	r1, [r7, #0]
 800f5de:	1d3b      	adds	r3, r7, #4
 800f5e0:	4618      	mov	r0, r3
 800f5e2:	f000 f8af 	bl	800f744 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800f5e6:	4603      	mov	r3, r0
 800f5e8:	681c      	ldr	r4, [r3, #0]
 800f5ea:	463b      	mov	r3, r7
 800f5ec:	4618      	mov	r0, r3
 800f5ee:	f000 f8a9 	bl	800f744 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800f5f2:	4603      	mov	r3, r0
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	4619      	mov	r1, r3
 800f5f8:	4620      	mov	r0, r4
 800f5fa:	f7f6 fb3f 	bl	8005c7c <_ZN8gemmlowp3AddIlEET_S1_S1_>
 800f5fe:	4603      	mov	r3, r0
 800f600:	4618      	mov	r0, r3
 800f602:	f000 f8aa 	bl	800f75a <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>
 800f606:	4603      	mov	r3, r0
 800f608:	4618      	mov	r0, r3
 800f60a:	370c      	adds	r7, #12
 800f60c:	46bd      	mov	sp, r7
 800f60e:	bd90      	pop	{r4, r7, pc}

0800f610 <_ZN8gemmlowp10FixedPointIlLi2EE3OneEv>:
  static FixedPoint One() {
 800f610:	b580      	push	{r7, lr}
 800f612:	af00      	add	r7, sp, #0
    return FromScalarRaw(
 800f614:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 800f618:	f7ff ff99 	bl	800f54e <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 800f61c:	4603      	mov	r3, r0
  }
 800f61e:	4618      	mov	r0, r3
 800f620:	bd80      	pop	{r7, pc}

0800f622 <_ZN8gemmlowpmiIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
 800f622:	b590      	push	{r4, r7, lr}
 800f624:	b083      	sub	sp, #12
 800f626:	af00      	add	r7, sp, #0
 800f628:	6078      	str	r0, [r7, #4]
 800f62a:	6039      	str	r1, [r7, #0]
 800f62c:	1d3b      	adds	r3, r7, #4
 800f62e:	4618      	mov	r0, r3
 800f630:	f000 f888 	bl	800f744 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800f634:	4603      	mov	r3, r0
 800f636:	681c      	ldr	r4, [r3, #0]
 800f638:	463b      	mov	r3, r7
 800f63a:	4618      	mov	r0, r3
 800f63c:	f000 f882 	bl	800f744 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800f640:	4603      	mov	r3, r0
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	4619      	mov	r1, r3
 800f646:	4620      	mov	r0, r4
 800f648:	f7f6 fe8e 	bl	8006368 <_ZN8gemmlowp3SubIlEET_S1_S1_>
 800f64c:	4603      	mov	r3, r0
 800f64e:	4618      	mov	r0, r3
 800f650:	f000 f883 	bl	800f75a <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>
 800f654:	4603      	mov	r3, r0
 800f656:	4618      	mov	r0, r3
 800f658:	370c      	adds	r7, #12
 800f65a:	46bd      	mov	sp, r7
 800f65c:	bd90      	pop	{r4, r7, pc}

0800f65e <_ZN8gemmlowpmlIlLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 800f65e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f660:	b085      	sub	sp, #20
 800f662:	af00      	add	r7, sp, #0
 800f664:	6078      	str	r0, [r7, #4]
 800f666:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 800f668:	1d3b      	adds	r3, r7, #4
 800f66a:	4618      	mov	r0, r3
 800f66c:	f000 f86a 	bl	800f744 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800f670:	4603      	mov	r3, r0
 800f672:	681d      	ldr	r5, [r3, #0]
 800f674:	463b      	mov	r3, r7
 800f676:	4618      	mov	r0, r3
 800f678:	f000 f864 	bl	800f744 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800f67c:	4603      	mov	r3, r0
 800f67e:	681e      	ldr	r6, [r3, #0]
 800f680:	f107 030c 	add.w	r3, r7, #12
 800f684:	4618      	mov	r0, r3
 800f686:	f000 f879 	bl	800f77c <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>
 800f68a:	4604      	mov	r4, r0
 800f68c:	4631      	mov	r1, r6
 800f68e:	4628      	mov	r0, r5
 800f690:	f7f6 f90e 	bl	80058b0 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 800f694:	4603      	mov	r3, r0
 800f696:	6023      	str	r3, [r4, #0]
  return c;
 800f698:	68fb      	ldr	r3, [r7, #12]
}
 800f69a:	4618      	mov	r0, r3
 800f69c:	3714      	adds	r7, #20
 800f69e:	46bd      	mov	sp, r7
 800f6a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f6a2 <_ZN8gemmlowp7RescaleILi2ElLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 800f6a2:	b5b0      	push	{r4, r5, r7, lr}
 800f6a4:	b084      	sub	sp, #16
 800f6a6:	af00      	add	r7, sp, #0
 800f6a8:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 800f6aa:	1d3b      	adds	r3, r7, #4
 800f6ac:	4618      	mov	r0, r3
 800f6ae:	f000 f865 	bl	800f77c <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>
 800f6b2:	4603      	mov	r3, r0
 800f6b4:	681d      	ldr	r5, [r3, #0]
 800f6b6:	f107 030c 	add.w	r3, r7, #12
 800f6ba:	4618      	mov	r0, r3
 800f6bc:	f000 f842 	bl	800f744 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800f6c0:	4604      	mov	r4, r0
 800f6c2:	4628      	mov	r0, r5
 800f6c4:	f000 f865 	bl	800f792 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2ElEET0_S1_>
 800f6c8:	4603      	mov	r3, r0
 800f6ca:	6023      	str	r3, [r4, #0]
  return result;
 800f6cc:	68fb      	ldr	r3, [r7, #12]
}
 800f6ce:	4618      	mov	r0, r3
 800f6d0:	3710      	adds	r7, #16
 800f6d2:	46bd      	mov	sp, r7
 800f6d4:	bdb0      	pop	{r4, r5, r7, pc}

0800f6d6 <_ZN8gemmlowp13ExactMulByPotILin1ElLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tExponent + tIntegerBits> ExactMulByPot(
 800f6d6:	b590      	push	{r4, r7, lr}
 800f6d8:	b085      	sub	sp, #20
 800f6da:	af00      	add	r7, sp, #0
 800f6dc:	6078      	str	r0, [r7, #4]
  c.raw() = a.raw();
 800f6de:	1d3b      	adds	r3, r7, #4
 800f6e0:	4618      	mov	r0, r3
 800f6e2:	f000 f82f 	bl	800f744 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800f6e6:	4604      	mov	r4, r0
 800f6e8:	f107 030c 	add.w	r3, r7, #12
 800f6ec:	4618      	mov	r0, r3
 800f6ee:	f000 f85c 	bl	800f7aa <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>
 800f6f2:	4602      	mov	r2, r0
 800f6f4:	6823      	ldr	r3, [r4, #0]
 800f6f6:	6013      	str	r3, [r2, #0]
  return c;
 800f6f8:	68fb      	ldr	r3, [r7, #12]
}
 800f6fa:	4618      	mov	r0, r3
 800f6fc:	3714      	adds	r7, #20
 800f6fe:	46bd      	mov	sp, r7
 800f700:	bd90      	pop	{r4, r7, pc}

0800f702 <_ZN8gemmlowp7RescaleILi0ElLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 800f702:	b5b0      	push	{r4, r5, r7, lr}
 800f704:	b084      	sub	sp, #16
 800f706:	af00      	add	r7, sp, #0
 800f708:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 800f70a:	1d3b      	adds	r3, r7, #4
 800f70c:	4618      	mov	r0, r3
 800f70e:	f000 f84c 	bl	800f7aa <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>
 800f712:	4603      	mov	r3, r0
 800f714:	681d      	ldr	r5, [r3, #0]
 800f716:	f107 030c 	add.w	r3, r7, #12
 800f71a:	4618      	mov	r0, r3
 800f71c:	f7f6 fdec 	bl	80062f8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800f720:	4604      	mov	r4, r0
 800f722:	4628      	mov	r0, r5
 800f724:	f000 f84c 	bl	800f7c0 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1ElEET0_S1_>
 800f728:	4603      	mov	r3, r0
 800f72a:	6023      	str	r3, [r4, #0]
  return result;
 800f72c:	68fb      	ldr	r3, [r7, #12]
}
 800f72e:	4618      	mov	r0, r3
 800f730:	3710      	adds	r7, #16
 800f732:	46bd      	mov	sp, r7
 800f734:	bdb0      	pop	{r4, r5, r7, pc}

0800f736 <_ZN8gemmlowp10FixedPointIlLi0EE12ScalarRawMaxEv>:
  static const ScalarRawType ScalarRawMax() {
 800f736:	b580      	push	{r7, lr}
 800f738:	af00      	add	r7, sp, #0
    return std::numeric_limits<ScalarRawType>::max();
 800f73a:	f7f6 f8af 	bl	800589c <_ZNSt14numeric_limitsIlE3maxEv>
 800f73e:	4603      	mov	r3, r0
  }
 800f740:	4618      	mov	r0, r3
 800f742:	bd80      	pop	{r7, pc}

0800f744 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>:
  RawType& raw() { return i_; }
 800f744:	b480      	push	{r7}
 800f746:	b083      	sub	sp, #12
 800f748:	af00      	add	r7, sp, #0
 800f74a:	6078      	str	r0, [r7, #4]
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	4618      	mov	r0, r3
 800f750:	370c      	adds	r7, #12
 800f752:	46bd      	mov	sp, r7
 800f754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f758:	4770      	bx	lr

0800f75a <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 800f75a:	b580      	push	{r7, lr}
 800f75c:	b084      	sub	sp, #16
 800f75e:	af00      	add	r7, sp, #0
 800f760:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 800f762:	f107 030c 	add.w	r3, r7, #12
 800f766:	4618      	mov	r0, r3
 800f768:	f7ff ffec 	bl	800f744 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800f76c:	4602      	mov	r2, r0
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	6013      	str	r3, [r2, #0]
    return retval;
 800f772:	68fb      	ldr	r3, [r7, #12]
  }
 800f774:	4618      	mov	r0, r3
 800f776:	3710      	adds	r7, #16
 800f778:	46bd      	mov	sp, r7
 800f77a:	bd80      	pop	{r7, pc}

0800f77c <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>:
  RawType& raw() { return i_; }
 800f77c:	b480      	push	{r7}
 800f77e:	b083      	sub	sp, #12
 800f780:	af00      	add	r7, sp, #0
 800f782:	6078      	str	r0, [r7, #4]
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	4618      	mov	r0, r3
 800f788:	370c      	adds	r7, #12
 800f78a:	46bd      	mov	sp, r7
 800f78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f790:	4770      	bx	lr

0800f792 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 800f792:	b580      	push	{r7, lr}
 800f794:	b082      	sub	sp, #8
 800f796:	af00      	add	r7, sp, #0
 800f798:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 800f79a:	6878      	ldr	r0, [r7, #4]
 800f79c:	f000 f81c 	bl	800f7d8 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl>
 800f7a0:	4603      	mov	r3, r0
}
 800f7a2:	4618      	mov	r0, r3
 800f7a4:	3708      	adds	r7, #8
 800f7a6:	46bd      	mov	sp, r7
 800f7a8:	bd80      	pop	{r7, pc}

0800f7aa <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>:
  RawType& raw() { return i_; }
 800f7aa:	b480      	push	{r7}
 800f7ac:	b083      	sub	sp, #12
 800f7ae:	af00      	add	r7, sp, #0
 800f7b0:	6078      	str	r0, [r7, #4]
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	4618      	mov	r0, r3
 800f7b6:	370c      	adds	r7, #12
 800f7b8:	46bd      	mov	sp, r7
 800f7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7be:	4770      	bx	lr

0800f7c0 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 800f7c0:	b580      	push	{r7, lr}
 800f7c2:	b082      	sub	sp, #8
 800f7c4:	af00      	add	r7, sp, #0
 800f7c6:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 800f7c8:	6878      	ldr	r0, [r7, #4]
 800f7ca:	f000 f847 	bl	800f85c <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl>
 800f7ce:	4603      	mov	r3, r0
}
 800f7d0:	4618      	mov	r0, r3
 800f7d2:	3708      	adds	r7, #8
 800f7d4:	46bd      	mov	sp, r7
 800f7d6:	bd80      	pop	{r7, pc}

0800f7d8 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 800f7d8:	b580      	push	{r7, lr}
 800f7da:	b08a      	sub	sp, #40	; 0x28
 800f7dc:	af00      	add	r7, sp, #0
 800f7de:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 800f7e0:	f7f6 f853 	bl	800588a <_ZNSt14numeric_limitsIlE3minEv>
 800f7e4:	4603      	mov	r3, r0
 800f7e6:	4618      	mov	r0, r3
 800f7e8:	f7f6 fa0c 	bl	8005c04 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800f7ec:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 800f7ee:	f7f6 f855 	bl	800589c <_ZNSt14numeric_limitsIlE3maxEv>
 800f7f2:	4603      	mov	r3, r0
 800f7f4:	4618      	mov	r0, r3
 800f7f6:	f7f6 fa05 	bl	8005c04 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800f7fa:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 800f7fc:	2320      	movs	r3, #32
 800f7fe:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 800f800:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800f804:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 800f806:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
 800f80a:	f7f6 f9fb 	bl	8005c04 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800f80e:	4603      	mov	r3, r0
 800f810:	4619      	mov	r1, r3
 800f812:	6878      	ldr	r0, [r7, #4]
 800f814:	f7f6 fa40 	bl	8005c98 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 800f818:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 800f81a:	480f      	ldr	r0, [pc, #60]	; (800f858 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl+0x80>)
 800f81c:	f7f6 f9f2 	bl	8005c04 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800f820:	4603      	mov	r3, r0
 800f822:	4619      	mov	r1, r3
 800f824:	6878      	ldr	r0, [r7, #4]
 800f826:	f7f6 fa15 	bl	8005c54 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 800f82a:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 800f82c:	2102      	movs	r1, #2
 800f82e:	6878      	ldr	r0, [r7, #4]
 800f830:	f7f6 fdb5 	bl	800639e <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 800f834:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 800f836:	68fa      	ldr	r2, [r7, #12]
 800f838:	6a39      	ldr	r1, [r7, #32]
 800f83a:	6978      	ldr	r0, [r7, #20]
 800f83c:	f7f6 fdf3 	bl	8006426 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 800f840:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 800f842:	68fa      	ldr	r2, [r7, #12]
 800f844:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f846:	6938      	ldr	r0, [r7, #16]
 800f848:	f7f6 fded 	bl	8006426 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 800f84c:	60f8      	str	r0, [r7, #12]
    return result;
 800f84e:	68fb      	ldr	r3, [r7, #12]
  }
 800f850:	4618      	mov	r0, r3
 800f852:	3728      	adds	r7, #40	; 0x28
 800f854:	46bd      	mov	sp, r7
 800f856:	bd80      	pop	{r7, pc}
 800f858:	e0000001 	.word	0xe0000001

0800f85c <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 800f85c:	b580      	push	{r7, lr}
 800f85e:	b08a      	sub	sp, #40	; 0x28
 800f860:	af00      	add	r7, sp, #0
 800f862:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 800f864:	f7f6 f811 	bl	800588a <_ZNSt14numeric_limitsIlE3minEv>
 800f868:	4603      	mov	r3, r0
 800f86a:	4618      	mov	r0, r3
 800f86c:	f7f6 f9ca 	bl	8005c04 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800f870:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 800f872:	f7f6 f813 	bl	800589c <_ZNSt14numeric_limitsIlE3maxEv>
 800f876:	4603      	mov	r3, r0
 800f878:	4618      	mov	r0, r3
 800f87a:	f7f6 f9c3 	bl	8005c04 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800f87e:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 800f880:	2320      	movs	r3, #32
 800f882:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 800f884:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800f888:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 800f88a:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
 800f88e:	f7f6 f9b9 	bl	8005c04 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800f892:	4603      	mov	r3, r0
 800f894:	4619      	mov	r1, r3
 800f896:	6878      	ldr	r0, [r7, #4]
 800f898:	f7f6 f9fe 	bl	8005c98 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 800f89c:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 800f89e:	480f      	ldr	r0, [pc, #60]	; (800f8dc <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl+0x80>)
 800f8a0:	f7f6 f9b0 	bl	8005c04 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800f8a4:	4603      	mov	r3, r0
 800f8a6:	4619      	mov	r1, r3
 800f8a8:	6878      	ldr	r0, [r7, #4]
 800f8aa:	f7f6 f9d3 	bl	8005c54 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 800f8ae:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 800f8b0:	2101      	movs	r1, #1
 800f8b2:	6878      	ldr	r0, [r7, #4]
 800f8b4:	f7f6 fd73 	bl	800639e <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 800f8b8:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 800f8ba:	68fa      	ldr	r2, [r7, #12]
 800f8bc:	6a39      	ldr	r1, [r7, #32]
 800f8be:	6978      	ldr	r0, [r7, #20]
 800f8c0:	f7f6 fdb1 	bl	8006426 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 800f8c4:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 800f8c6:	68fa      	ldr	r2, [r7, #12]
 800f8c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f8ca:	6938      	ldr	r0, [r7, #16]
 800f8cc:	f7f6 fdab 	bl	8006426 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 800f8d0:	60f8      	str	r0, [r7, #12]
    return result;
 800f8d2:	68fb      	ldr	r3, [r7, #12]
  }
 800f8d4:	4618      	mov	r0, r3
 800f8d6:	3728      	adds	r7, #40	; 0x28
 800f8d8:	46bd      	mov	sp, r7
 800f8da:	bd80      	pop	{r7, pc}
 800f8dc:	c0000001 	.word	0xc0000001

0800f8e0 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>:
}

// Data is required to be contiguous, and so many operators can use either the
// full array flat size or the flat size with one dimension skipped (commonly
// the depth).
inline int FlatSizeSkipDim(const RuntimeShape& shape, int skip_dim) {
 800f8e0:	b580      	push	{r7, lr}
 800f8e2:	b086      	sub	sp, #24
 800f8e4:	af00      	add	r7, sp, #0
 800f8e6:	6078      	str	r0, [r7, #4]
 800f8e8:	6039      	str	r1, [r7, #0]
  const int dims_count = shape.DimensionsCount();
 800f8ea:	6878      	ldr	r0, [r7, #4]
 800f8ec:	f7f2 ff98 	bl	8002820 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800f8f0:	60f8      	str	r0, [r7, #12]
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
 800f8f2:	683b      	ldr	r3, [r7, #0]
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	db03      	blt.n	800f900 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x20>
 800f8f8:	683a      	ldr	r2, [r7, #0]
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	429a      	cmp	r2, r3
 800f8fe:	db01      	blt.n	800f904 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x24>
 800f900:	f010 f8ae 	bl	801fa60 <abort>
  const auto* dims_data = shape.DimsData();
 800f904:	6878      	ldr	r0, [r7, #4]
 800f906:	f7f2 ffb1 	bl	800286c <_ZNK6tflite12RuntimeShape8DimsDataEv>
 800f90a:	60b8      	str	r0, [r7, #8]
  int flat_size = 1;
 800f90c:	2301      	movs	r3, #1
 800f90e:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 800f910:	2300      	movs	r3, #0
 800f912:	613b      	str	r3, [r7, #16]
 800f914:	e011      	b.n	800f93a <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x5a>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 800f916:	693a      	ldr	r2, [r7, #16]
 800f918:	683b      	ldr	r3, [r7, #0]
 800f91a:	429a      	cmp	r2, r3
 800f91c:	d005      	beq.n	800f92a <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x4a>
 800f91e:	693b      	ldr	r3, [r7, #16]
 800f920:	009b      	lsls	r3, r3, #2
 800f922:	68ba      	ldr	r2, [r7, #8]
 800f924:	4413      	add	r3, r2
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	e000      	b.n	800f92c <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x4c>
 800f92a:	2301      	movs	r3, #1
 800f92c:	697a      	ldr	r2, [r7, #20]
 800f92e:	fb02 f303 	mul.w	r3, r2, r3
 800f932:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 800f934:	693b      	ldr	r3, [r7, #16]
 800f936:	3301      	adds	r3, #1
 800f938:	613b      	str	r3, [r7, #16]
 800f93a:	693a      	ldr	r2, [r7, #16]
 800f93c:	68fb      	ldr	r3, [r7, #12]
 800f93e:	429a      	cmp	r2, r3
 800f940:	dbe9      	blt.n	800f916 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x36>
  }
  return flat_size;
 800f942:	697b      	ldr	r3, [r7, #20]
}
 800f944:	4618      	mov	r0, r3
 800f946:	3718      	adds	r7, #24
 800f948:	46bd      	mov	sp, r7
 800f94a:	bd80      	pop	{r7, pc}

0800f94c <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const float* input_data, const RuntimeShape& weights_shape,
    const float* weights_data, const RuntimeShape& bias_shape,
    const float* bias_data, const RuntimeShape& output_shape,
    float* output_data) {
 800f94c:	b590      	push	{r4, r7, lr}
 800f94e:	b091      	sub	sp, #68	; 0x44
 800f950:	af00      	add	r7, sp, #0
 800f952:	60f8      	str	r0, [r7, #12]
 800f954:	60b9      	str	r1, [r7, #8]
 800f956:	607a      	str	r2, [r7, #4]
 800f958:	603b      	str	r3, [r7, #0]
  const float output_activation_min = params.float_activation_min;
 800f95a:	68fb      	ldr	r3, [r7, #12]
 800f95c:	69db      	ldr	r3, [r3, #28]
 800f95e:	62bb      	str	r3, [r7, #40]	; 0x28
  const float output_activation_max = params.float_activation_max;
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	6a1b      	ldr	r3, [r3, #32]
 800f964:	627b      	str	r3, [r7, #36]	; 0x24
  // TODO(b/62193649): This really should be:
  //     const int batches = ArraySize(output_dims, 1);
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dims_count = output_shape.DimensionsCount();
 800f966:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800f968:	f7f2 ff5a 	bl	8002820 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800f96c:	6238      	str	r0, [r7, #32]
  const int weights_dims_count = weights_shape.DimensionsCount();
 800f96e:	6838      	ldr	r0, [r7, #0]
 800f970:	f7f2 ff56 	bl	8002820 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800f974:	61f8      	str	r0, [r7, #28]
  const int batches = FlatSizeSkipDim(output_shape, output_dims_count - 1);
 800f976:	6a3b      	ldr	r3, [r7, #32]
 800f978:	3b01      	subs	r3, #1
 800f97a:	4619      	mov	r1, r3
 800f97c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800f97e:	f7ff ffaf 	bl	800f8e0 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 800f982:	61b8      	str	r0, [r7, #24]
  const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,
 800f984:	69fb      	ldr	r3, [r7, #28]
 800f986:	1e99      	subs	r1, r3, #2
 800f988:	6a3b      	ldr	r3, [r7, #32]
 800f98a:	3b01      	subs	r3, #1
 800f98c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f98e:	6838      	ldr	r0, [r7, #0]
 800f990:	f7fc f9c8 	bl	800bd24 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800f994:	6178      	str	r0, [r7, #20]
                                       output_shape, output_dims_count - 1);
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
 800f996:	69fb      	ldr	r3, [r7, #28]
 800f998:	3b01      	subs	r3, #1
 800f99a:	4619      	mov	r1, r3
 800f99c:	6838      	ldr	r0, [r7, #0]
 800f99e:	f7f2 ff4b 	bl	8002838 <_ZNK6tflite12RuntimeShape4DimsEi>
 800f9a2:	6138      	str	r0, [r7, #16]
  for (int b = 0; b < batches; ++b) {
 800f9a4:	2300      	movs	r3, #0
 800f9a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f9a8:	e05e      	b.n	800fa68 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x11c>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800f9aa:	2300      	movs	r3, #0
 800f9ac:	63bb      	str	r3, [r7, #56]	; 0x38
 800f9ae:	e054      	b.n	800fa5a <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x10e>
      float total = 0.f;
 800f9b0:	f04f 0300 	mov.w	r3, #0
 800f9b4:	637b      	str	r3, [r7, #52]	; 0x34
      for (int d = 0; d < accum_depth; ++d) {
 800f9b6:	2300      	movs	r3, #0
 800f9b8:	633b      	str	r3, [r7, #48]	; 0x30
 800f9ba:	e020      	b.n	800f9fe <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xb2>
        total += input_data[b * accum_depth + d] *
 800f9bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f9be:	693a      	ldr	r2, [r7, #16]
 800f9c0:	fb03 f202 	mul.w	r2, r3, r2
 800f9c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9c6:	4413      	add	r3, r2
 800f9c8:	009b      	lsls	r3, r3, #2
 800f9ca:	687a      	ldr	r2, [r7, #4]
 800f9cc:	4413      	add	r3, r2
 800f9ce:	ed93 7a00 	vldr	s14, [r3]
                 weights_data[out_c * accum_depth + d];
 800f9d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9d4:	693a      	ldr	r2, [r7, #16]
 800f9d6:	fb03 f202 	mul.w	r2, r3, r2
 800f9da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9dc:	4413      	add	r3, r2
 800f9de:	009b      	lsls	r3, r3, #2
 800f9e0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f9e2:	4413      	add	r3, r2
 800f9e4:	edd3 7a00 	vldr	s15, [r3]
        total += input_data[b * accum_depth + d] *
 800f9e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f9ec:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800f9f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f9f4:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
      for (int d = 0; d < accum_depth; ++d) {
 800f9f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9fa:	3301      	adds	r3, #1
 800f9fc:	633b      	str	r3, [r7, #48]	; 0x30
 800f9fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fa00:	693b      	ldr	r3, [r7, #16]
 800fa02:	429a      	cmp	r2, r3
 800fa04:	dbda      	blt.n	800f9bc <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x70>
      }
      float bias_value = 0.0f;
 800fa06:	f04f 0300 	mov.w	r3, #0
 800fa0a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (bias_data) {
 800fa0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d005      	beq.n	800fa1e <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xd2>
        bias_value = bias_data[out_c];
 800fa12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa14:	009b      	lsls	r3, r3, #2
 800fa16:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fa18:	4413      	add	r3, r2
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      output_data[out_c + output_depth * b] = ActivationFunctionWithMinMax(
 800fa1e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800fa22:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800fa26:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fa2a:	697b      	ldr	r3, [r7, #20]
 800fa2c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fa2e:	fb03 f202 	mul.w	r2, r3, r2
 800fa32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa34:	4413      	add	r3, r2
 800fa36:	009b      	lsls	r3, r3, #2
 800fa38:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fa3a:	18d4      	adds	r4, r2, r3
 800fa3c:	ed97 1a09 	vldr	s2, [r7, #36]	; 0x24
 800fa40:	edd7 0a0a 	vldr	s1, [r7, #40]	; 0x28
 800fa44:	eeb0 0a67 	vmov.f32	s0, s15
 800fa48:	f7fc f857 	bl	800bafa <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>
 800fa4c:	eef0 7a40 	vmov.f32	s15, s0
 800fa50:	edc4 7a00 	vstr	s15, [r4]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800fa54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa56:	3301      	adds	r3, #1
 800fa58:	63bb      	str	r3, [r7, #56]	; 0x38
 800fa5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fa5c:	697b      	ldr	r3, [r7, #20]
 800fa5e:	429a      	cmp	r2, r3
 800fa60:	dba6      	blt.n	800f9b0 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x64>
  for (int b = 0; b < batches; ++b) {
 800fa62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa64:	3301      	adds	r3, #1
 800fa66:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fa68:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fa6a:	69bb      	ldr	r3, [r7, #24]
 800fa6c:	429a      	cmp	r2, r3
 800fa6e:	db9c      	blt.n	800f9aa <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x5e>
          total + bias_value, output_activation_min, output_activation_max);
    }
  }
}
 800fa70:	bf00      	nop
 800fa72:	bf00      	nop
 800fa74:	3744      	adds	r7, #68	; 0x44
 800fa76:	46bd      	mov	sp, r7
 800fa78:	bd90      	pop	{r4, r7, pc}

0800fa7a <_ZN6tflite12_GLOBAL__N_118FullyConnectedInitEP13TfLiteContextPKcj>:

namespace tflite {
namespace {

void* FullyConnectedInit(TfLiteContext* context, const char* buffer,
                         size_t length) {
 800fa7a:	b580      	push	{r7, lr}
 800fa7c:	b084      	sub	sp, #16
 800fa7e:	af00      	add	r7, sp, #0
 800fa80:	60f8      	str	r0, [r7, #12]
 800fa82:	60b9      	str	r1, [r7, #8]
 800fa84:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d101      	bne.n	800fa92 <_ZN6tflite12_GLOBAL__N_118FullyConnectedInitEP13TfLiteContextPKcj+0x18>
 800fa8e:	f00f ffe7 	bl	801fa60 <abort>
  return context->AllocatePersistentBuffer(context,
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa96:	2124      	movs	r1, #36	; 0x24
 800fa98:	68f8      	ldr	r0, [r7, #12]
 800fa9a:	4798      	blx	r3
 800fa9c:	4603      	mov	r3, r0
                                           sizeof(OpDataFullyConnected));
}
 800fa9e:	4618      	mov	r0, r3
 800faa0:	3710      	adds	r7, #16
 800faa2:	46bd      	mov	sp, r7
 800faa4:	bd80      	pop	{r7, pc}
	...

0800faa8 <_ZN6tflite12_GLOBAL__N_121FullyConnectedPrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus FullyConnectedPrepare(TfLiteContext* context, TfLiteNode* node) {
 800faa8:	b5b0      	push	{r4, r5, r7, lr}
 800faaa:	b096      	sub	sp, #88	; 0x58
 800faac:	af04      	add	r7, sp, #16
 800faae:	6078      	str	r0, [r7, #4]
 800fab0:	6039      	str	r1, [r7, #0]
  MicroContext* micro_context = GetMicroContext(context);
 800fab2:	6878      	ldr	r0, [r7, #4]
 800fab4:	f7f2 ff2f 	bl	8002916 <_ZN6tflite15GetMicroContextEPK13TfLiteContext>
 800fab8:	6478      	str	r0, [r7, #68]	; 0x44

  TFLITE_DCHECK(node->user_data != nullptr);
 800faba:	683b      	ldr	r3, [r7, #0]
 800fabc:	68db      	ldr	r3, [r3, #12]
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d101      	bne.n	800fac6 <_ZN6tflite12_GLOBAL__N_121FullyConnectedPrepareEP13TfLiteContextP10TfLiteNode+0x1e>
 800fac2:	f00f ffcd 	bl	801fa60 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 800fac6:	683b      	ldr	r3, [r7, #0]
 800fac8:	691b      	ldr	r3, [r3, #16]
 800faca:	2b00      	cmp	r3, #0
 800facc:	d101      	bne.n	800fad2 <_ZN6tflite12_GLOBAL__N_121FullyConnectedPrepareEP13TfLiteContextP10TfLiteNode+0x2a>
 800face:	f00f ffc7 	bl	801fa60 <abort>

  auto* data = static_cast<OpDataFullyConnected*>(node->user_data);
 800fad2:	683b      	ldr	r3, [r7, #0]
 800fad4:	68db      	ldr	r3, [r3, #12]
 800fad6:	643b      	str	r3, [r7, #64]	; 0x40
  const auto params =
 800fad8:	683b      	ldr	r3, [r7, #0]
 800fada:	691b      	ldr	r3, [r3, #16]
 800fadc:	63fb      	str	r3, [r7, #60]	; 0x3c
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  TfLiteTensor* input =
      micro_context->AllocateTempInputTensor(node, kFullyConnectedInputTensor);
 800fade:	4b7c      	ldr	r3, [pc, #496]	; (800fcd0 <_ZN6tflite12_GLOBAL__N_121FullyConnectedPrepareEP13TfLiteContextP10TfLiteNode+0x228>)
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	461a      	mov	r2, r3
 800fae4:	6839      	ldr	r1, [r7, #0]
 800fae6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800fae8:	f7fa fa82 	bl	8009ff0 <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei>
 800faec:	63b8      	str	r0, [r7, #56]	; 0x38
  TF_LITE_ENSURE(context, input != nullptr);
 800faee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d10a      	bne.n	800fb0a <_ZN6tflite12_GLOBAL__N_121FullyConnectedPrepareEP13TfLiteContextP10TfLiteNode+0x62>
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	695c      	ldr	r4, [r3, #20]
 800faf8:	4b76      	ldr	r3, [pc, #472]	; (800fcd4 <_ZN6tflite12_GLOBAL__N_121FullyConnectedPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 800fafa:	9300      	str	r3, [sp, #0]
 800fafc:	2330      	movs	r3, #48	; 0x30
 800fafe:	4a76      	ldr	r2, [pc, #472]	; (800fcd8 <_ZN6tflite12_GLOBAL__N_121FullyConnectedPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 800fb00:	4976      	ldr	r1, [pc, #472]	; (800fcdc <_ZN6tflite12_GLOBAL__N_121FullyConnectedPrepareEP13TfLiteContextP10TfLiteNode+0x234>)
 800fb02:	6878      	ldr	r0, [r7, #4]
 800fb04:	47a0      	blx	r4
 800fb06:	2301      	movs	r3, #1
 800fb08:	e0de      	b.n	800fcc8 <_ZN6tflite12_GLOBAL__N_121FullyConnectedPrepareEP13TfLiteContextP10TfLiteNode+0x220>
  TfLiteTensor* filter = micro_context->AllocateTempInputTensor(
 800fb0a:	4b75      	ldr	r3, [pc, #468]	; (800fce0 <_ZN6tflite12_GLOBAL__N_121FullyConnectedPrepareEP13TfLiteContextP10TfLiteNode+0x238>)
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	461a      	mov	r2, r3
 800fb10:	6839      	ldr	r1, [r7, #0]
 800fb12:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800fb14:	f7fa fa6c 	bl	8009ff0 <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei>
 800fb18:	6378      	str	r0, [r7, #52]	; 0x34
      node, kFullyConnectedWeightsTensor);
  TF_LITE_ENSURE(context, filter != nullptr);
 800fb1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d10a      	bne.n	800fb36 <_ZN6tflite12_GLOBAL__N_121FullyConnectedPrepareEP13TfLiteContextP10TfLiteNode+0x8e>
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	695c      	ldr	r4, [r3, #20]
 800fb24:	4b6f      	ldr	r3, [pc, #444]	; (800fce4 <_ZN6tflite12_GLOBAL__N_121FullyConnectedPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 800fb26:	9300      	str	r3, [sp, #0]
 800fb28:	2333      	movs	r3, #51	; 0x33
 800fb2a:	4a6b      	ldr	r2, [pc, #428]	; (800fcd8 <_ZN6tflite12_GLOBAL__N_121FullyConnectedPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 800fb2c:	496b      	ldr	r1, [pc, #428]	; (800fcdc <_ZN6tflite12_GLOBAL__N_121FullyConnectedPrepareEP13TfLiteContextP10TfLiteNode+0x234>)
 800fb2e:	6878      	ldr	r0, [r7, #4]
 800fb30:	47a0      	blx	r4
 800fb32:	2301      	movs	r3, #1
 800fb34:	e0c8      	b.n	800fcc8 <_ZN6tflite12_GLOBAL__N_121FullyConnectedPrepareEP13TfLiteContextP10TfLiteNode+0x220>
  TfLiteTensor* bias =
      micro_context->AllocateTempInputTensor(node, kFullyConnectedBiasTensor);
 800fb36:	4b6c      	ldr	r3, [pc, #432]	; (800fce8 <_ZN6tflite12_GLOBAL__N_121FullyConnectedPrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	461a      	mov	r2, r3
 800fb3c:	6839      	ldr	r1, [r7, #0]
 800fb3e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800fb40:	f7fa fa56 	bl	8009ff0 <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei>
 800fb44:	6338      	str	r0, [r7, #48]	; 0x30
  TfLiteTensor* output = micro_context->AllocateTempOutputTensor(
 800fb46:	4b69      	ldr	r3, [pc, #420]	; (800fcec <_ZN6tflite12_GLOBAL__N_121FullyConnectedPrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	461a      	mov	r2, r3
 800fb4c:	6839      	ldr	r1, [r7, #0]
 800fb4e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800fb50:	f7fa fa71 	bl	800a036 <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei>
 800fb54:	62f8      	str	r0, [r7, #44]	; 0x2c
      node, kFullyConnectedOutputTensor);
  TF_LITE_ENSURE(context, output != nullptr);
 800fb56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d10a      	bne.n	800fb72 <_ZN6tflite12_GLOBAL__N_121FullyConnectedPrepareEP13TfLiteContextP10TfLiteNode+0xca>
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	695c      	ldr	r4, [r3, #20]
 800fb60:	4b63      	ldr	r3, [pc, #396]	; (800fcf0 <_ZN6tflite12_GLOBAL__N_121FullyConnectedPrepareEP13TfLiteContextP10TfLiteNode+0x248>)
 800fb62:	9300      	str	r3, [sp, #0]
 800fb64:	2338      	movs	r3, #56	; 0x38
 800fb66:	4a5c      	ldr	r2, [pc, #368]	; (800fcd8 <_ZN6tflite12_GLOBAL__N_121FullyConnectedPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 800fb68:	495c      	ldr	r1, [pc, #368]	; (800fcdc <_ZN6tflite12_GLOBAL__N_121FullyConnectedPrepareEP13TfLiteContextP10TfLiteNode+0x234>)
 800fb6a:	6878      	ldr	r0, [r7, #4]
 800fb6c:	47a0      	blx	r4
 800fb6e:	2301      	movs	r3, #1
 800fb70:	e0aa      	b.n	800fcc8 <_ZN6tflite12_GLOBAL__N_121FullyConnectedPrepareEP13TfLiteContextP10TfLiteNode+0x220>
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 800fb72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb74:	7f1a      	ldrb	r2, [r3, #28]
 800fb76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb78:	7f1b      	ldrb	r3, [r3, #28]
 800fb7a:	429a      	cmp	r2, r3
 800fb7c:	d01a      	beq.n	800fbb4 <_ZN6tflite12_GLOBAL__N_121FullyConnectedPrepareEP13TfLiteContextP10TfLiteNode+0x10c>
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	695c      	ldr	r4, [r3, #20]
 800fb82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb84:	7f1b      	ldrb	r3, [r3, #28]
 800fb86:	4618      	mov	r0, r3
 800fb88:	f7f5 fde0 	bl	800574c <TfLiteTypeGetName>
 800fb8c:	4605      	mov	r5, r0
 800fb8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb90:	7f1b      	ldrb	r3, [r3, #28]
 800fb92:	4618      	mov	r0, r3
 800fb94:	f7f5 fdda 	bl	800574c <TfLiteTypeGetName>
 800fb98:	4603      	mov	r3, r0
 800fb9a:	9303      	str	r3, [sp, #12]
 800fb9c:	9502      	str	r5, [sp, #8]
 800fb9e:	4b55      	ldr	r3, [pc, #340]	; (800fcf4 <_ZN6tflite12_GLOBAL__N_121FullyConnectedPrepareEP13TfLiteContextP10TfLiteNode+0x24c>)
 800fba0:	9301      	str	r3, [sp, #4]
 800fba2:	4b55      	ldr	r3, [pc, #340]	; (800fcf8 <_ZN6tflite12_GLOBAL__N_121FullyConnectedPrepareEP13TfLiteContextP10TfLiteNode+0x250>)
 800fba4:	9300      	str	r3, [sp, #0]
 800fba6:	2339      	movs	r3, #57	; 0x39
 800fba8:	4a4b      	ldr	r2, [pc, #300]	; (800fcd8 <_ZN6tflite12_GLOBAL__N_121FullyConnectedPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 800fbaa:	4954      	ldr	r1, [pc, #336]	; (800fcfc <_ZN6tflite12_GLOBAL__N_121FullyConnectedPrepareEP13TfLiteContextP10TfLiteNode+0x254>)
 800fbac:	6878      	ldr	r0, [r7, #4]
 800fbae:	47a0      	blx	r4
 800fbb0:	2301      	movs	r3, #1
 800fbb2:	e089      	b.n	800fcc8 <_ZN6tflite12_GLOBAL__N_121FullyConnectedPrepareEP13TfLiteContextP10TfLiteNode+0x220>

  if ((input->type == kTfLiteFloat32 && filter->type != kTfLiteFloat32) ||
 800fbb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbb6:	7f1b      	ldrb	r3, [r3, #28]
 800fbb8:	2b01      	cmp	r3, #1
 800fbba:	d103      	bne.n	800fbc4 <_ZN6tflite12_GLOBAL__N_121FullyConnectedPrepareEP13TfLiteContextP10TfLiteNode+0x11c>
 800fbbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbbe:	7f1b      	ldrb	r3, [r3, #28]
 800fbc0:	2b01      	cmp	r3, #1
 800fbc2:	d113      	bne.n	800fbec <_ZN6tflite12_GLOBAL__N_121FullyConnectedPrepareEP13TfLiteContextP10TfLiteNode+0x144>
      (input->type == kTfLiteInt8 &&
 800fbc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbc6:	7f1b      	ldrb	r3, [r3, #28]
  if ((input->type == kTfLiteFloat32 && filter->type != kTfLiteFloat32) ||
 800fbc8:	2b09      	cmp	r3, #9
 800fbca:	d107      	bne.n	800fbdc <_ZN6tflite12_GLOBAL__N_121FullyConnectedPrepareEP13TfLiteContextP10TfLiteNode+0x134>
       (filter->type != kTfLiteInt8 && filter->type != kTfLiteInt4)) ||
 800fbcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbce:	7f1b      	ldrb	r3, [r3, #28]
      (input->type == kTfLiteInt8 &&
 800fbd0:	2b09      	cmp	r3, #9
 800fbd2:	d003      	beq.n	800fbdc <_ZN6tflite12_GLOBAL__N_121FullyConnectedPrepareEP13TfLiteContextP10TfLiteNode+0x134>
       (filter->type != kTfLiteInt8 && filter->type != kTfLiteInt4)) ||
 800fbd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbd6:	7f1b      	ldrb	r3, [r3, #28]
 800fbd8:	2b12      	cmp	r3, #18
 800fbda:	d107      	bne.n	800fbec <_ZN6tflite12_GLOBAL__N_121FullyConnectedPrepareEP13TfLiteContextP10TfLiteNode+0x144>
      (input->type == kTfLiteInt16 && filter->type != kTfLiteInt8)) {
 800fbdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbde:	7f1b      	ldrb	r3, [r3, #28]
       (filter->type != kTfLiteInt8 && filter->type != kTfLiteInt4)) ||
 800fbe0:	2b07      	cmp	r3, #7
 800fbe2:	d116      	bne.n	800fc12 <_ZN6tflite12_GLOBAL__N_121FullyConnectedPrepareEP13TfLiteContextP10TfLiteNode+0x16a>
      (input->type == kTfLiteInt16 && filter->type != kTfLiteInt8)) {
 800fbe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbe6:	7f1b      	ldrb	r3, [r3, #28]
 800fbe8:	2b09      	cmp	r3, #9
 800fbea:	d012      	beq.n	800fc12 <_ZN6tflite12_GLOBAL__N_121FullyConnectedPrepareEP13TfLiteContextP10TfLiteNode+0x16a>
    MicroPrintf("Input type: %s with filter type : %s not supported.",
 800fbec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbee:	7f1b      	ldrb	r3, [r3, #28]
 800fbf0:	4618      	mov	r0, r3
 800fbf2:	f7f5 fdab 	bl	800574c <TfLiteTypeGetName>
 800fbf6:	4604      	mov	r4, r0
 800fbf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbfa:	7f1b      	ldrb	r3, [r3, #28]
 800fbfc:	4618      	mov	r0, r3
 800fbfe:	f7f5 fda5 	bl	800574c <TfLiteTypeGetName>
 800fc02:	4603      	mov	r3, r0
 800fc04:	461a      	mov	r2, r3
 800fc06:	4621      	mov	r1, r4
 800fc08:	483d      	ldr	r0, [pc, #244]	; (800fd00 <_ZN6tflite12_GLOBAL__N_121FullyConnectedPrepareEP13TfLiteContextP10TfLiteNode+0x258>)
 800fc0a:	f7fb fe01 	bl	800b810 <_Z11MicroPrintfPKcz>
                TfLiteTypeGetName(input->type),
                TfLiteTypeGetName(filter->type));
    return kTfLiteError;
 800fc0e:	2301      	movs	r3, #1
 800fc10:	e05a      	b.n	800fcc8 <_ZN6tflite12_GLOBAL__N_121FullyConnectedPrepareEP13TfLiteContextP10TfLiteNode+0x220>
  }

  if (filter->type == kTfLiteInt4) {
 800fc12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc14:	7f1b      	ldrb	r3, [r3, #28]
 800fc16:	2b12      	cmp	r3, #18
 800fc18:	d11c      	bne.n	800fc54 <_ZN6tflite12_GLOBAL__N_121FullyConnectedPrepareEP13TfLiteContextP10TfLiteNode+0x1ac>
    int filter_size =
        RuntimeShape(filter->dims->size,
 800fc1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc1c:	695b      	ldr	r3, [r3, #20]
 800fc1e:	6819      	ldr	r1, [r3, #0]
                     reinterpret_cast<const int32_t*>(filter->dims->data))
 800fc20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc22:	695b      	ldr	r3, [r3, #20]
 800fc24:	1d1a      	adds	r2, r3, #4
        RuntimeShape(filter->dims->size,
 800fc26:	f107 0308 	add.w	r3, r7, #8
 800fc2a:	4618      	mov	r0, r3
 800fc2c:	f7f6 fa8d 	bl	800614a <_ZN6tflite12RuntimeShapeC1EiPKl>
            .FlatSize();
 800fc30:	f107 0308 	add.w	r3, r7, #8
 800fc34:	4618      	mov	r0, r3
 800fc36:	f7f2 fe25 	bl	8002884 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 800fc3a:	62b8      	str	r0, [r7, #40]	; 0x28
        RuntimeShape(filter->dims->size,
 800fc3c:	f107 0308 	add.w	r3, r7, #8
 800fc40:	4618      	mov	r0, r3
 800fc42:	f7f2 fde2 	bl	800280a <_ZN6tflite12RuntimeShapeD1Ev>
    context->RequestScratchBufferInArena(context, filter_size,
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc4a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fc4c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fc4e:	3220      	adds	r2, #32
 800fc50:	6878      	ldr	r0, [r7, #4]
 800fc52:	4798      	blx	r3
                                         &data->filter_buffer_index);
  }

  TF_LITE_ENSURE_OK(context, CalculateOpDataFullyConnected(
 800fc54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc56:	7819      	ldrb	r1, [r3, #0]
 800fc58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc5a:	7f1a      	ldrb	r2, [r3, #28]
 800fc5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc5e:	9303      	str	r3, [sp, #12]
 800fc60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc62:	9302      	str	r3, [sp, #8]
 800fc64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc66:	9301      	str	r3, [sp, #4]
 800fc68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc6a:	9300      	str	r3, [sp, #0]
 800fc6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc6e:	6878      	ldr	r0, [r7, #4]
 800fc70:	f000 fd0e 	bl	8010690 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>
 800fc74:	4603      	mov	r3, r0
 800fc76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fc7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d002      	beq.n	800fc88 <_ZN6tflite12_GLOBAL__N_121FullyConnectedPrepareEP13TfLiteContextP10TfLiteNode+0x1e0>
 800fc82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fc86:	e01f      	b.n	800fcc8 <_ZN6tflite12_GLOBAL__N_121FullyConnectedPrepareEP13TfLiteContextP10TfLiteNode+0x220>
                                 context, params->activation, input->type,
                                 input, filter, bias, output, data));

  micro_context->DeallocateTempTfLiteTensor(input);
 800fc88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	3318      	adds	r3, #24
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fc92:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800fc94:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(filter);
 800fc96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	3318      	adds	r3, #24
 800fc9c:	681b      	ldr	r3, [r3, #0]
 800fc9e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800fca0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800fca2:	4798      	blx	r3
  if (bias != nullptr) {
 800fca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d006      	beq.n	800fcb8 <_ZN6tflite12_GLOBAL__N_121FullyConnectedPrepareEP13TfLiteContextP10TfLiteNode+0x210>
    micro_context->DeallocateTempTfLiteTensor(bias);
 800fcaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	3318      	adds	r3, #24
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fcb4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800fcb6:	4798      	blx	r3
  }
  micro_context->DeallocateTempTfLiteTensor(output);
 800fcb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	3318      	adds	r3, #24
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fcc2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800fcc4:	4798      	blx	r3
  return kTfLiteOk;
 800fcc6:	2300      	movs	r3, #0
}
 800fcc8:	4618      	mov	r0, r3
 800fcca:	3748      	adds	r7, #72	; 0x48
 800fccc:	46bd      	mov	sp, r7
 800fcce:	bdb0      	pop	{r4, r5, r7, pc}
 800fcd0:	08029324 	.word	0x08029324
 800fcd4:	08027390 	.word	0x08027390
 800fcd8:	08027338 	.word	0x08027338
 800fcdc:	08027378 	.word	0x08027378
 800fce0:	08029328 	.word	0x08029328
 800fce4:	080273a4 	.word	0x080273a4
 800fce8:	0802932c 	.word	0x0802932c
 800fcec:	08029330 	.word	0x08029330
 800fcf0:	080273b8 	.word	0x080273b8
 800fcf4:	080273e8 	.word	0x080273e8
 800fcf8:	080273f8 	.word	0x080273f8
 800fcfc:	080273cc 	.word	0x080273cc
 800fd00:	08027404 	.word	0x08027404

0800fd04 <_ZN6tflite12_GLOBAL__N_118FullyConnectedEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus FullyConnectedEval(TfLiteContext* context, TfLiteNode* node) {
 800fd04:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fd06:	f5ad 7d2f 	sub.w	sp, sp, #700	; 0x2bc
 800fd0a:	af06      	add	r7, sp, #24
 800fd0c:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800fd10:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 800fd14:	6018      	str	r0, [r3, #0]
 800fd16:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800fd1a:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 800fd1e:	6019      	str	r1, [r3, #0]
  TFLITE_DCHECK(node->builtin_data != nullptr);
 800fd20:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800fd24:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	691b      	ldr	r3, [r3, #16]
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d101      	bne.n	800fd34 <_ZN6tflite12_GLOBAL__N_118FullyConnectedEvalEP13TfLiteContextP10TfLiteNode+0x30>
 800fd30:	f00f fe96 	bl	801fa60 <abort>
  const auto* params =
 800fd34:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800fd38:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 800fd3c:	681b      	ldr	r3, [r3, #0]
 800fd3e:	691b      	ldr	r3, [r3, #16]
 800fd40:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedInputTensor);
 800fd44:	4bb4      	ldr	r3, [pc, #720]	; (8010018 <_ZN6tflite12_GLOBAL__N_118FullyConnectedEvalEP13TfLiteContextP10TfLiteNode+0x314>)
 800fd46:	681a      	ldr	r2, [r3, #0]
 800fd48:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800fd4c:	f5a3 7128 	sub.w	r1, r3, #672	; 0x2a0
 800fd50:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800fd54:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 800fd58:	6809      	ldr	r1, [r1, #0]
 800fd5a:	6818      	ldr	r0, [r3, #0]
 800fd5c:	f000 fd8f 	bl	801087e <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 800fd60:	f8c7 0298 	str.w	r0, [r7, #664]	; 0x298
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedWeightsTensor);
 800fd64:	4bad      	ldr	r3, [pc, #692]	; (801001c <_ZN6tflite12_GLOBAL__N_118FullyConnectedEvalEP13TfLiteContextP10TfLiteNode+0x318>)
 800fd66:	681a      	ldr	r2, [r3, #0]
 800fd68:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800fd6c:	f5a3 7128 	sub.w	r1, r3, #672	; 0x2a0
 800fd70:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800fd74:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 800fd78:	6809      	ldr	r1, [r1, #0]
 800fd7a:	6818      	ldr	r0, [r3, #0]
 800fd7c:	f000 fd7f 	bl	801087e <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 800fd80:	f8c7 0294 	str.w	r0, [r7, #660]	; 0x294
  const TfLiteEvalTensor* bias =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedBiasTensor);
 800fd84:	4ba6      	ldr	r3, [pc, #664]	; (8010020 <_ZN6tflite12_GLOBAL__N_118FullyConnectedEvalEP13TfLiteContextP10TfLiteNode+0x31c>)
 800fd86:	681a      	ldr	r2, [r3, #0]
 800fd88:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800fd8c:	f5a3 7128 	sub.w	r1, r3, #672	; 0x2a0
 800fd90:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800fd94:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 800fd98:	6809      	ldr	r1, [r1, #0]
 800fd9a:	6818      	ldr	r0, [r3, #0]
 800fd9c:	f000 fd6f 	bl	801087e <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 800fda0:	f8c7 0290 	str.w	r0, [r7, #656]	; 0x290
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kFullyConnectedOutputTensor);
 800fda4:	4b9f      	ldr	r3, [pc, #636]	; (8010024 <_ZN6tflite12_GLOBAL__N_118FullyConnectedEvalEP13TfLiteContextP10TfLiteNode+0x320>)
 800fda6:	681a      	ldr	r2, [r3, #0]
 800fda8:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800fdac:	f5a3 7128 	sub.w	r1, r3, #672	; 0x2a0
 800fdb0:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800fdb4:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 800fdb8:	6809      	ldr	r1, [r1, #0]
 800fdba:	6818      	ldr	r0, [r3, #0]
 800fdbc:	f000 fd6f 	bl	801089e <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 800fdc0:	f8c7 028c 	str.w	r0, [r7, #652]	; 0x28c

  TFLITE_DCHECK(node->user_data != nullptr);
 800fdc4:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800fdc8:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	68db      	ldr	r3, [r3, #12]
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d101      	bne.n	800fdd8 <_ZN6tflite12_GLOBAL__N_118FullyConnectedEvalEP13TfLiteContextP10TfLiteNode+0xd4>
 800fdd4:	f00f fe44 	bl	801fa60 <abort>

  const auto& data =
 800fdd8:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800fddc:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	68db      	ldr	r3, [r3, #12]
 800fde4:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
      *(static_cast<const OpDataFullyConnected*>(node->user_data));

  // Checks in Prepare ensure input, output and filter types are all the same.
  switch (input->type) {
 800fde8:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800fdec:	7a1b      	ldrb	r3, [r3, #8]
 800fdee:	2b09      	cmp	r3, #9
 800fdf0:	d073      	beq.n	800feda <_ZN6tflite12_GLOBAL__N_118FullyConnectedEvalEP13TfLiteContextP10TfLiteNode+0x1d6>
 800fdf2:	2b09      	cmp	r3, #9
 800fdf4:	f300 8203 	bgt.w	80101fe <_ZN6tflite12_GLOBAL__N_118FullyConnectedEvalEP13TfLiteContextP10TfLiteNode+0x4fa>
 800fdf8:	2b01      	cmp	r3, #1
 800fdfa:	d003      	beq.n	800fe04 <_ZN6tflite12_GLOBAL__N_118FullyConnectedEvalEP13TfLiteContextP10TfLiteNode+0x100>
 800fdfc:	2b07      	cmp	r3, #7
 800fdfe:	f000 8189 	beq.w	8010114 <_ZN6tflite12_GLOBAL__N_118FullyConnectedEvalEP13TfLiteContextP10TfLiteNode+0x410>
 800fe02:	e1fc      	b.n	80101fe <_ZN6tflite12_GLOBAL__N_118FullyConnectedEvalEP13TfLiteContextP10TfLiteNode+0x4fa>
    case kTfLiteFloat32: {
      tflite::reference_ops::FullyConnected(
          FullyConnectedParamsFloat(params->activation),
 800fe04:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800fe08:	781a      	ldrb	r2, [r3, #0]
 800fe0a:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800fe0e:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 800fe12:	4611      	mov	r1, r2
 800fe14:	4618      	mov	r0, r3
 800fe16:	f000 fc26 	bl	8010666 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation>
          tflite::micro::GetTensorShape(input),
 800fe1a:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800fe1e:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 800fe22:	f8d7 1298 	ldr.w	r1, [r7, #664]	; 0x298
 800fe26:	4618      	mov	r0, r3
 800fe28:	f000 fd59 	bl	80108de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 800fe2c:	f8d7 0298 	ldr.w	r0, [r7, #664]	; 0x298
 800fe30:	f7f2 fe1c 	bl	8002a6c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 800fe34:	4606      	mov	r6, r0
          tflite::micro::GetTensorData<float>(input),
          tflite::micro::GetTensorShape(filter),
 800fe36:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800fe3a:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 800fe3e:	f8d7 1294 	ldr.w	r1, [r7, #660]	; 0x294
 800fe42:	4618      	mov	r0, r3
 800fe44:	f000 fd4b 	bl	80108de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 800fe48:	f8d7 0294 	ldr.w	r0, [r7, #660]	; 0x294
 800fe4c:	f7f2 fe0e 	bl	8002a6c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 800fe50:	4604      	mov	r4, r0
          tflite::micro::GetTensorData<float>(filter),
          tflite::micro::GetTensorShape(bias),
 800fe52:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800fe56:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 800fe5a:	f8d7 1290 	ldr.w	r1, [r7, #656]	; 0x290
 800fe5e:	4618      	mov	r0, r3
 800fe60:	f000 fd3d 	bl	80108de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 800fe64:	f8d7 0290 	ldr.w	r0, [r7, #656]	; 0x290
 800fe68:	f7fc febc 	bl	800cbe4 <_ZN6tflite5micro21GetOptionalTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 800fe6c:	4605      	mov	r5, r0
          tflite::micro::GetOptionalTensorData<float>(bias),
          tflite::micro::GetTensorShape(output),
 800fe6e:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800fe72:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800fe76:	f8d7 128c 	ldr.w	r1, [r7, #652]	; 0x28c
 800fe7a:	4618      	mov	r0, r3
 800fe7c:	f000 fd2f 	bl	80108de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 800fe80:	f8d7 028c 	ldr.w	r0, [r7, #652]	; 0x28c
 800fe84:	f7f2 fdd6 	bl	8002a34 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 800fe88:	4603      	mov	r3, r0
 800fe8a:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800fe8e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800fe92:	f107 0008 	add.w	r0, r7, #8
 800fe96:	9304      	str	r3, [sp, #16]
 800fe98:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800fe9c:	9303      	str	r3, [sp, #12]
 800fe9e:	9502      	str	r5, [sp, #8]
 800fea0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800fea4:	9301      	str	r3, [sp, #4]
 800fea6:	9400      	str	r4, [sp, #0]
 800fea8:	4613      	mov	r3, r2
 800feaa:	4632      	mov	r2, r6
 800feac:	f7ff fd4e 	bl	800f94c <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>
          tflite::micro::GetTensorShape(output),
 800feb0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800feb4:	4618      	mov	r0, r3
 800feb6:	f7f2 fca8 	bl	800280a <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(bias),
 800feba:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800febe:	4618      	mov	r0, r3
 800fec0:	f7f2 fca3 	bl	800280a <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(filter),
 800fec4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800fec8:	4618      	mov	r0, r3
 800feca:	f7f2 fc9e 	bl	800280a <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(input),
 800fece:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800fed2:	4618      	mov	r0, r3
 800fed4:	f7f2 fc99 	bl	800280a <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorData<float>(output));
      break;
 800fed8:	e1a1      	b.n	801021e <_ZN6tflite12_GLOBAL__N_118FullyConnectedEvalEP13TfLiteContextP10TfLiteNode+0x51a>
    }

    case kTfLiteInt8: {
      switch (filter->type) {
 800feda:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 800fede:	7a1b      	ldrb	r3, [r3, #8]
 800fee0:	2b09      	cmp	r3, #9
 800fee2:	f000 80a1 	beq.w	8010028 <_ZN6tflite12_GLOBAL__N_118FullyConnectedEvalEP13TfLiteContextP10TfLiteNode+0x324>
 800fee6:	2b12      	cmp	r3, #18
 800fee8:	f040 8103 	bne.w	80100f2 <_ZN6tflite12_GLOBAL__N_118FullyConnectedEvalEP13TfLiteContextP10TfLiteNode+0x3ee>
        case kTfLiteInt4: {
          int8_t* unpacked_filter_data = static_cast<int8_t*>(
              context->GetScratchBuffer(context, data.filter_buffer_index));
 800feec:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800fef0:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 800fef4:	681b      	ldr	r3, [r3, #0]
 800fef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fef8:	f8d7 2288 	ldr.w	r2, [r7, #648]	; 0x288
 800fefc:	6a11      	ldr	r1, [r2, #32]
 800fefe:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 800ff02:	f5a2 7227 	sub.w	r2, r2, #668	; 0x29c
 800ff06:	6810      	ldr	r0, [r2, #0]
 800ff08:	4798      	blx	r3
 800ff0a:	f8c7 0284 	str.w	r0, [r7, #644]	; 0x284
          tflite::tensor_utils::UnpackDenseInt4IntoInt8(
 800ff0e:	f8d7 0294 	ldr.w	r0, [r7, #660]	; 0x294
 800ff12:	f7fb fdd4 	bl	800babe <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 800ff16:	4604      	mov	r4, r0
              tflite::micro::GetTensorData<int8_t>(filter),
              tflite::micro::GetTensorShape(filter).FlatSize(),
 800ff18:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800ff1c:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 800ff20:	f8d7 1294 	ldr.w	r1, [r7, #660]	; 0x294
 800ff24:	4618      	mov	r0, r3
 800ff26:	f000 fcda 	bl	80108de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          tflite::tensor_utils::UnpackDenseInt4IntoInt8(
 800ff2a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800ff2e:	4618      	mov	r0, r3
 800ff30:	f7f2 fca8 	bl	8002884 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 800ff34:	4603      	mov	r3, r0
 800ff36:	f8d7 2284 	ldr.w	r2, [r7, #644]	; 0x284
 800ff3a:	4619      	mov	r1, r3
 800ff3c:	4620      	mov	r0, r4
 800ff3e:	f7f5 fedc 	bl	8005cfa <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa>
              tflite::micro::GetTensorShape(filter).FlatSize(),
 800ff42:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800ff46:	4618      	mov	r0, r3
 800ff48:	f7f2 fc5f 	bl	800280a <_ZN6tflite12RuntimeShapeD1Ev>
              unpacked_filter_data);
          tflite::reference_integer_ops::FullyConnected(
              FullyConnectedParamsQuantized(data),
 800ff4c:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800ff50:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800ff54:	f8d7 1288 	ldr.w	r1, [r7, #648]	; 0x288
 800ff58:	4618      	mov	r0, r3
 800ff5a:	f000 fb5a 	bl	8010612 <_ZN6tflite29FullyConnectedParamsQuantizedERKNS_20OpDataFullyConnectedE>
              tflite::micro::GetTensorShape(input),
 800ff5e:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800ff62:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800ff66:	f8d7 1298 	ldr.w	r1, [r7, #664]	; 0x298
 800ff6a:	4618      	mov	r0, r3
 800ff6c:	f000 fcb7 	bl	80108de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          tflite::reference_integer_ops::FullyConnected(
 800ff70:	f8d7 0298 	ldr.w	r0, [r7, #664]	; 0x298
 800ff74:	f7fb fda3 	bl	800babe <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 800ff78:	4605      	mov	r5, r0
              tflite::micro::GetTensorData<int8_t>(input),
              tflite::micro::GetTensorShape(filter), unpacked_filter_data,
 800ff7a:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800ff7e:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800ff82:	f8d7 1294 	ldr.w	r1, [r7, #660]	; 0x294
 800ff86:	4618      	mov	r0, r3
 800ff88:	f000 fca9 	bl	80108de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
              tflite::micro::GetTensorShape(bias),
 800ff8c:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800ff90:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800ff94:	f8d7 1290 	ldr.w	r1, [r7, #656]	; 0x290
 800ff98:	4618      	mov	r0, r3
 800ff9a:	f000 fca0 	bl	80108de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          tflite::reference_integer_ops::FullyConnected(
 800ff9e:	f8d7 0290 	ldr.w	r0, [r7, #656]	; 0x290
 800ffa2:	f7fc fe30 	bl	800cc06 <_ZN6tflite5micro21GetOptionalTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 800ffa6:	4604      	mov	r4, r0
              tflite::micro::GetOptionalTensorData<int32_t>(bias),
              tflite::micro::GetTensorShape(output),
 800ffa8:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800ffac:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800ffb0:	f8d7 128c 	ldr.w	r1, [r7, #652]	; 0x28c
 800ffb4:	4618      	mov	r0, r3
 800ffb6:	f000 fc92 	bl	80108de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          tflite::reference_integer_ops::FullyConnected(
 800ffba:	f8d7 028c 	ldr.w	r0, [r7, #652]	; 0x28c
 800ffbe:	f7fb fd8d 	bl	800badc <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 800ffc2:	4603      	mov	r3, r0
 800ffc4:	f507 7280 	add.w	r2, r7, #256	; 0x100
 800ffc8:	f107 01e4 	add.w	r1, r7, #228	; 0xe4
 800ffcc:	f107 00bc 	add.w	r0, r7, #188	; 0xbc
 800ffd0:	9304      	str	r3, [sp, #16]
 800ffd2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ffd6:	9303      	str	r3, [sp, #12]
 800ffd8:	9402      	str	r4, [sp, #8]
 800ffda:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800ffde:	9301      	str	r3, [sp, #4]
 800ffe0:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 800ffe4:	9300      	str	r3, [sp, #0]
 800ffe6:	4613      	mov	r3, r2
 800ffe8:	462a      	mov	r2, r5
 800ffea:	f000 f93d 	bl	8010268 <_ZN6tflite21reference_integer_ops14FullyConnectedIaaalEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_>
              tflite::micro::GetTensorShape(output),
 800ffee:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800fff2:	4618      	mov	r0, r3
 800fff4:	f7f2 fc09 	bl	800280a <_ZN6tflite12RuntimeShapeD1Ev>
              tflite::micro::GetTensorShape(bias),
 800fff8:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800fffc:	4618      	mov	r0, r3
 800fffe:	f7f2 fc04 	bl	800280a <_ZN6tflite12RuntimeShapeD1Ev>
              tflite::micro::GetTensorShape(filter), unpacked_filter_data,
 8010002:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8010006:	4618      	mov	r0, r3
 8010008:	f7f2 fbff 	bl	800280a <_ZN6tflite12RuntimeShapeD1Ev>
              tflite::micro::GetTensorShape(input),
 801000c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8010010:	4618      	mov	r0, r3
 8010012:	f7f2 fbfa 	bl	800280a <_ZN6tflite12RuntimeShapeD1Ev>
              tflite::micro::GetTensorData<int8_t>(output));
          break;
 8010016:	e07c      	b.n	8010112 <_ZN6tflite12_GLOBAL__N_118FullyConnectedEvalEP13TfLiteContextP10TfLiteNode+0x40e>
 8010018:	08029324 	.word	0x08029324
 801001c:	08029328 	.word	0x08029328
 8010020:	0802932c 	.word	0x0802932c
 8010024:	08029330 	.word	0x08029330
        }
        case kTfLiteInt8: {
          tflite::reference_integer_ops::FullyConnected(
              FullyConnectedParamsQuantized(data),
 8010028:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 801002c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8010030:	f8d7 1288 	ldr.w	r1, [r7, #648]	; 0x288
 8010034:	4618      	mov	r0, r3
 8010036:	f000 faec 	bl	8010612 <_ZN6tflite29FullyConnectedParamsQuantizedERKNS_20OpDataFullyConnectedE>
              tflite::micro::GetTensorShape(input),
 801003a:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 801003e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8010042:	f8d7 1298 	ldr.w	r1, [r7, #664]	; 0x298
 8010046:	4618      	mov	r0, r3
 8010048:	f000 fc49 	bl	80108de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          tflite::reference_integer_ops::FullyConnected(
 801004c:	f8d7 0298 	ldr.w	r0, [r7, #664]	; 0x298
 8010050:	f7fb fd35 	bl	800babe <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8010054:	4606      	mov	r6, r0
              tflite::micro::GetTensorData<int8_t>(input),
              tflite::micro::GetTensorShape(filter),
 8010056:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 801005a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801005e:	f8d7 1294 	ldr.w	r1, [r7, #660]	; 0x294
 8010062:	4618      	mov	r0, r3
 8010064:	f000 fc3b 	bl	80108de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          tflite::reference_integer_ops::FullyConnected(
 8010068:	f8d7 0294 	ldr.w	r0, [r7, #660]	; 0x294
 801006c:	f7fb fd27 	bl	800babe <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8010070:	4604      	mov	r4, r0
              tflite::micro::GetTensorData<int8_t>(filter),
              tflite::micro::GetTensorShape(bias),
 8010072:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8010076:	f8d7 1290 	ldr.w	r1, [r7, #656]	; 0x290
 801007a:	4618      	mov	r0, r3
 801007c:	f000 fc2f 	bl	80108de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          tflite::reference_integer_ops::FullyConnected(
 8010080:	f8d7 0290 	ldr.w	r0, [r7, #656]	; 0x290
 8010084:	f7fc fdbf 	bl	800cc06 <_ZN6tflite5micro21GetOptionalTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 8010088:	4605      	mov	r5, r0
              tflite::micro::GetOptionalTensorData<int32_t>(bias),
              tflite::micro::GetTensorShape(output),
 801008a:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 801008e:	f8d7 128c 	ldr.w	r1, [r7, #652]	; 0x28c
 8010092:	4618      	mov	r0, r3
 8010094:	f000 fc23 	bl	80108de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          tflite::reference_integer_ops::FullyConnected(
 8010098:	f8d7 028c 	ldr.w	r0, [r7, #652]	; 0x28c
 801009c:	f7fb fd1e 	bl	800badc <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 80100a0:	4603      	mov	r3, r0
 80100a2:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 80100a6:	f507 71be 	add.w	r1, r7, #380	; 0x17c
 80100aa:	f507 70aa 	add.w	r0, r7, #340	; 0x154
 80100ae:	9304      	str	r3, [sp, #16]
 80100b0:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80100b4:	9303      	str	r3, [sp, #12]
 80100b6:	9502      	str	r5, [sp, #8]
 80100b8:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 80100bc:	9301      	str	r3, [sp, #4]
 80100be:	9400      	str	r4, [sp, #0]
 80100c0:	4613      	mov	r3, r2
 80100c2:	4632      	mov	r2, r6
 80100c4:	f000 f8d0 	bl	8010268 <_ZN6tflite21reference_integer_ops14FullyConnectedIaaalEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_>
              tflite::micro::GetTensorShape(output),
 80100c8:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80100cc:	4618      	mov	r0, r3
 80100ce:	f7f2 fb9c 	bl	800280a <_ZN6tflite12RuntimeShapeD1Ev>
              tflite::micro::GetTensorShape(bias),
 80100d2:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 80100d6:	4618      	mov	r0, r3
 80100d8:	f7f2 fb97 	bl	800280a <_ZN6tflite12RuntimeShapeD1Ev>
              tflite::micro::GetTensorShape(filter),
 80100dc:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80100e0:	4618      	mov	r0, r3
 80100e2:	f7f2 fb92 	bl	800280a <_ZN6tflite12RuntimeShapeD1Ev>
              tflite::micro::GetTensorShape(input),
 80100e6:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 80100ea:	4618      	mov	r0, r3
 80100ec:	f7f2 fb8d 	bl	800280a <_ZN6tflite12RuntimeShapeD1Ev>
              tflite::micro::GetTensorData<int8_t>(output));
          break;
 80100f0:	e00f      	b.n	8010112 <_ZN6tflite12_GLOBAL__N_118FullyConnectedEvalEP13TfLiteContextP10TfLiteNode+0x40e>
        }
        default: {
          MicroPrintf("Filter type %s (%d) not supported.",
                      TfLiteTypeGetName(filter->type), input->type);
 80100f2:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 80100f6:	7a1b      	ldrb	r3, [r3, #8]
          MicroPrintf("Filter type %s (%d) not supported.",
 80100f8:	4618      	mov	r0, r3
 80100fa:	f7f5 fb27 	bl	800574c <TfLiteTypeGetName>
 80100fe:	4601      	mov	r1, r0
                      TfLiteTypeGetName(filter->type), input->type);
 8010100:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8010104:	7a1b      	ldrb	r3, [r3, #8]
          MicroPrintf("Filter type %s (%d) not supported.",
 8010106:	461a      	mov	r2, r3
 8010108:	4848      	ldr	r0, [pc, #288]	; (801022c <_ZN6tflite12_GLOBAL__N_118FullyConnectedEvalEP13TfLiteContextP10TfLiteNode+0x528>)
 801010a:	f7fb fb81 	bl	800b810 <_Z11MicroPrintfPKcz>
          return kTfLiteError;
 801010e:	2301      	movs	r3, #1
 8010110:	e086      	b.n	8010220 <_ZN6tflite12_GLOBAL__N_118FullyConnectedEvalEP13TfLiteContextP10TfLiteNode+0x51c>
        }
      }
      break;
 8010112:	e084      	b.n	801021e <_ZN6tflite12_GLOBAL__N_118FullyConnectedEvalEP13TfLiteContextP10TfLiteNode+0x51a>
    }

    case kTfLiteInt16: {
      switch (filter->type) {
 8010114:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8010118:	7a1b      	ldrb	r3, [r3, #8]
 801011a:	2b09      	cmp	r3, #9
 801011c:	d15f      	bne.n	80101de <_ZN6tflite12_GLOBAL__N_118FullyConnectedEvalEP13TfLiteContextP10TfLiteNode+0x4da>
        case kTfLiteInt8: {
          tflite::reference_integer_ops::FullyConnected(
              FullyConnectedParamsQuantized(data),
 801011e:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 8010122:	f8d7 1288 	ldr.w	r1, [r7, #648]	; 0x288
 8010126:	4618      	mov	r0, r3
 8010128:	f000 fa73 	bl	8010612 <_ZN6tflite29FullyConnectedParamsQuantizedERKNS_20OpDataFullyConnectedE>
              tflite::micro::GetTensorShape(input),
 801012c:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8010130:	f8d7 1298 	ldr.w	r1, [r7, #664]	; 0x298
 8010134:	4618      	mov	r0, r3
 8010136:	f000 fbd2 	bl	80108de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          tflite::reference_integer_ops::FullyConnected(
 801013a:	f8d7 0298 	ldr.w	r0, [r7, #664]	; 0x298
 801013e:	f7f2 fbf6 	bl	800292e <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>
 8010142:	4606      	mov	r6, r0
              tflite::micro::GetTensorData<int16_t>(input),
              tflite::micro::GetTensorShape(filter),
 8010144:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8010148:	f8d7 1294 	ldr.w	r1, [r7, #660]	; 0x294
 801014c:	4618      	mov	r0, r3
 801014e:	f000 fbc6 	bl	80108de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          tflite::reference_integer_ops::FullyConnected(
 8010152:	f8d7 0294 	ldr.w	r0, [r7, #660]	; 0x294
 8010156:	f7fb fcb2 	bl	800babe <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 801015a:	4604      	mov	r4, r0
              tflite::micro::GetTensorData<int8_t>(filter),
              tflite::micro::GetTensorShape(bias),
 801015c:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 8010160:	f8d7 1290 	ldr.w	r1, [r7, #656]	; 0x290
 8010164:	4618      	mov	r0, r3
 8010166:	f000 fbba 	bl	80108de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          tflite::reference_integer_ops::FullyConnected(
 801016a:	f8d7 0290 	ldr.w	r0, [r7, #656]	; 0x290
 801016e:	f7fc ff3a 	bl	800cfe6 <_ZN6tflite5micro21GetOptionalTensorDataIxEEPKT_PK16TfLiteEvalTensor>
 8010172:	4605      	mov	r5, r0
              tflite::micro::GetOptionalTensorData<int64_t>(bias),
              tflite::micro::GetTensorShape(output),
 8010174:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8010178:	f8d7 128c 	ldr.w	r1, [r7, #652]	; 0x28c
 801017c:	4618      	mov	r0, r3
 801017e:	f000 fbae 	bl	80108de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          tflite::reference_integer_ops::FullyConnected(
 8010182:	f8d7 028c 	ldr.w	r0, [r7, #652]	; 0x28c
 8010186:	f7f2 fbe1 	bl	800294c <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
 801018a:	4603      	mov	r3, r0
 801018c:	f507 720c 	add.w	r2, r7, #560	; 0x230
 8010190:	f507 7105 	add.w	r1, r7, #532	; 0x214
 8010194:	f507 70f6 	add.w	r0, r7, #492	; 0x1ec
 8010198:	9304      	str	r3, [sp, #16]
 801019a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801019e:	9303      	str	r3, [sp, #12]
 80101a0:	9502      	str	r5, [sp, #8]
 80101a2:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 80101a6:	9301      	str	r3, [sp, #4]
 80101a8:	9400      	str	r4, [sp, #0]
 80101aa:	4613      	mov	r3, r2
 80101ac:	4632      	mov	r2, r6
 80101ae:	f000 f936 	bl	801041e <_ZN6tflite21reference_integer_ops14FullyConnectedIsasxEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_>
              tflite::micro::GetTensorShape(output),
 80101b2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80101b6:	4618      	mov	r0, r3
 80101b8:	f7f2 fb27 	bl	800280a <_ZN6tflite12RuntimeShapeD1Ev>
              tflite::micro::GetTensorShape(bias),
 80101bc:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 80101c0:	4618      	mov	r0, r3
 80101c2:	f7f2 fb22 	bl	800280a <_ZN6tflite12RuntimeShapeD1Ev>
              tflite::micro::GetTensorShape(filter),
 80101c6:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80101ca:	4618      	mov	r0, r3
 80101cc:	f7f2 fb1d 	bl	800280a <_ZN6tflite12RuntimeShapeD1Ev>
              tflite::micro::GetTensorShape(input),
 80101d0:	f507 7305 	add.w	r3, r7, #532	; 0x214
 80101d4:	4618      	mov	r0, r3
 80101d6:	f7f2 fb18 	bl	800280a <_ZN6tflite12RuntimeShapeD1Ev>
              tflite::micro::GetTensorData<int16_t>(output));
          break;
 80101da:	bf00      	nop
          MicroPrintf("Filter type %s (%d) not supported.",
                      TfLiteTypeGetName(filter->type), input->type);
          return kTfLiteError;
        }
      }
      break;
 80101dc:	e01f      	b.n	801021e <_ZN6tflite12_GLOBAL__N_118FullyConnectedEvalEP13TfLiteContextP10TfLiteNode+0x51a>
                      TfLiteTypeGetName(filter->type), input->type);
 80101de:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 80101e2:	7a1b      	ldrb	r3, [r3, #8]
          MicroPrintf("Filter type %s (%d) not supported.",
 80101e4:	4618      	mov	r0, r3
 80101e6:	f7f5 fab1 	bl	800574c <TfLiteTypeGetName>
 80101ea:	4601      	mov	r1, r0
                      TfLiteTypeGetName(filter->type), input->type);
 80101ec:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80101f0:	7a1b      	ldrb	r3, [r3, #8]
          MicroPrintf("Filter type %s (%d) not supported.",
 80101f2:	461a      	mov	r2, r3
 80101f4:	480d      	ldr	r0, [pc, #52]	; (801022c <_ZN6tflite12_GLOBAL__N_118FullyConnectedEvalEP13TfLiteContextP10TfLiteNode+0x528>)
 80101f6:	f7fb fb0b 	bl	800b810 <_Z11MicroPrintfPKcz>
          return kTfLiteError;
 80101fa:	2301      	movs	r3, #1
 80101fc:	e010      	b.n	8010220 <_ZN6tflite12_GLOBAL__N_118FullyConnectedEvalEP13TfLiteContextP10TfLiteNode+0x51c>
    }

    default: {
      MicroPrintf("Input type %s (%d) not supported.",
                  TfLiteTypeGetName(input->type), input->type);
 80101fe:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8010202:	7a1b      	ldrb	r3, [r3, #8]
      MicroPrintf("Input type %s (%d) not supported.",
 8010204:	4618      	mov	r0, r3
 8010206:	f7f5 faa1 	bl	800574c <TfLiteTypeGetName>
 801020a:	4601      	mov	r1, r0
                  TfLiteTypeGetName(input->type), input->type);
 801020c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8010210:	7a1b      	ldrb	r3, [r3, #8]
      MicroPrintf("Input type %s (%d) not supported.",
 8010212:	461a      	mov	r2, r3
 8010214:	4806      	ldr	r0, [pc, #24]	; (8010230 <_ZN6tflite12_GLOBAL__N_118FullyConnectedEvalEP13TfLiteContextP10TfLiteNode+0x52c>)
 8010216:	f7fb fafb 	bl	800b810 <_Z11MicroPrintfPKcz>
      return kTfLiteError;
 801021a:	2301      	movs	r3, #1
 801021c:	e000      	b.n	8010220 <_ZN6tflite12_GLOBAL__N_118FullyConnectedEvalEP13TfLiteContextP10TfLiteNode+0x51c>
    }
  }
  return kTfLiteOk;
 801021e:	2300      	movs	r3, #0
}
 8010220:	4618      	mov	r0, r3
 8010222:	f507 7729 	add.w	r7, r7, #676	; 0x2a4
 8010226:	46bd      	mov	sp, r7
 8010228:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801022a:	bf00      	nop
 801022c:	08027438 	.word	0x08027438
 8010230:	0802745c 	.word	0x0802745c

08010234 <_ZN6tflite24Register_FULLY_CONNECTEDEv>:

}  // namespace

TFLMRegistration Register_FULLY_CONNECTED() {
 8010234:	b580      	push	{r7, lr}
 8010236:	b084      	sub	sp, #16
 8010238:	af02      	add	r7, sp, #8
 801023a:	6078      	str	r0, [r7, #4]
  return tflite::micro::RegisterOp(FullyConnectedInit, FullyConnectedPrepare,
 801023c:	6878      	ldr	r0, [r7, #4]
 801023e:	2300      	movs	r3, #0
 8010240:	9301      	str	r3, [sp, #4]
 8010242:	2300      	movs	r3, #0
 8010244:	9300      	str	r3, [sp, #0]
 8010246:	4b05      	ldr	r3, [pc, #20]	; (801025c <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x28>)
 8010248:	4a05      	ldr	r2, [pc, #20]	; (8010260 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x2c>)
 801024a:	4906      	ldr	r1, [pc, #24]	; (8010264 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x30>)
 801024c:	f000 fac4 	bl	80107d8 <_ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_ESE_>
                                   FullyConnectedEval);
 8010250:	bf00      	nop
}
 8010252:	6878      	ldr	r0, [r7, #4]
 8010254:	3708      	adds	r7, #8
 8010256:	46bd      	mov	sp, r7
 8010258:	bd80      	pop	{r7, pc}
 801025a:	bf00      	nop
 801025c:	0800fd05 	.word	0x0800fd05
 8010260:	0800faa9 	.word	0x0800faa9
 8010264:	0800fa7b 	.word	0x0800fa7b

08010268 <_ZN6tflite21reference_integer_ops14FullyConnectedIaaalEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_>:
  }
}

template <typename InputType, typename WeightType, typename OutputType,
          typename BiasType>
void FullyConnected(const FullyConnectedParams& params,
 8010268:	b580      	push	{r7, lr}
 801026a:	b098      	sub	sp, #96	; 0x60
 801026c:	af00      	add	r7, sp, #0
 801026e:	60f8      	str	r0, [r7, #12]
 8010270:	60b9      	str	r1, [r7, #8]
 8010272:	607a      	str	r2, [r7, #4]
 8010274:	603b      	str	r3, [r7, #0]
                    const InputType* input_data,
                    const RuntimeShape& filter_shape,
                    const WeightType* filter_data,
                    const RuntimeShape& bias_shape, const BiasType* bias_data,
                    const RuntimeShape& output_shape, OutputType* output_data) {
  const int32_t input_offset = params.input_offset;
 8010276:	68fb      	ldr	r3, [r7, #12]
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	64fb      	str	r3, [r7, #76]	; 0x4c
  const int32_t filter_offset = params.weights_offset;
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	685b      	ldr	r3, [r3, #4]
 8010280:	64bb      	str	r3, [r7, #72]	; 0x48
  const int32_t output_offset = params.output_offset;
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	689b      	ldr	r3, [r3, #8]
 8010286:	647b      	str	r3, [r7, #68]	; 0x44
  const int32_t output_multiplier = params.output_multiplier;
 8010288:	68fb      	ldr	r3, [r7, #12]
 801028a:	68db      	ldr	r3, [r3, #12]
 801028c:	643b      	str	r3, [r7, #64]	; 0x40
  const int output_shift = params.output_shift;
 801028e:	68fb      	ldr	r3, [r7, #12]
 8010290:	691b      	ldr	r3, [r3, #16]
 8010292:	63fb      	str	r3, [r7, #60]	; 0x3c
  const int32_t output_activation_min = params.quantized_activation_min;
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	695b      	ldr	r3, [r3, #20]
 8010298:	61fb      	str	r3, [r7, #28]
  const int32_t output_activation_max = params.quantized_activation_max;
 801029a:	68fb      	ldr	r3, [r7, #12]
 801029c:	699b      	ldr	r3, [r3, #24]
 801029e:	61bb      	str	r3, [r7, #24]
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
 80102a0:	6838      	ldr	r0, [r7, #0]
 80102a2:	f7f2 fabd 	bl	8002820 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80102a6:	4603      	mov	r3, r0
 80102a8:	2b01      	cmp	r3, #1
 80102aa:	dc01      	bgt.n	80102b0 <_ZN6tflite21reference_integer_ops14FullyConnectedIaaalEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_+0x48>
 80102ac:	f00f fbd8 	bl	801fa60 <abort>
  TFLITE_DCHECK_GE(output_shape.DimensionsCount(), 1);
 80102b0:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80102b2:	f7f2 fab5 	bl	8002820 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80102b6:	4603      	mov	r3, r0
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	dc01      	bgt.n	80102c0 <_ZN6tflite21reference_integer_ops14FullyConnectedIaaalEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_+0x58>
 80102bc:	f00f fbd0 	bl	801fa60 <abort>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 80102c0:	69fa      	ldr	r2, [r7, #28]
 80102c2:	69bb      	ldr	r3, [r7, #24]
 80102c4:	429a      	cmp	r2, r3
 80102c6:	dd01      	ble.n	80102cc <_ZN6tflite21reference_integer_ops14FullyConnectedIaaalEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_+0x64>
 80102c8:	f00f fbca 	bl	801fa60 <abort>
  const int filter_dim_count = filter_shape.DimensionsCount();
 80102cc:	6838      	ldr	r0, [r7, #0]
 80102ce:	f7f2 faa7 	bl	8002820 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80102d2:	63b8      	str	r0, [r7, #56]	; 0x38
  const int output_dim_count = output_shape.DimensionsCount();
 80102d4:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80102d6:	f7f2 faa3 	bl	8002820 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80102da:	6378      	str	r0, [r7, #52]	; 0x34
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
 80102dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102de:	3b01      	subs	r3, #1
 80102e0:	4619      	mov	r1, r3
 80102e2:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80102e4:	f7ff fafc 	bl	800f8e0 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 80102e8:	6338      	str	r0, [r7, #48]	; 0x30
  const int output_depth = output_shape.Dims(output_dim_count - 1);
 80102ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102ec:	3b01      	subs	r3, #1
 80102ee:	4619      	mov	r1, r3
 80102f0:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80102f2:	f7f2 faa1 	bl	8002838 <_ZNK6tflite12RuntimeShape4DimsEi>
 80102f6:	62f8      	str	r0, [r7, #44]	; 0x2c
  TFLITE_DCHECK_LE(output_depth, filter_shape.Dims(filter_dim_count - 2));
 80102f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102fa:	3b02      	subs	r3, #2
 80102fc:	4619      	mov	r1, r3
 80102fe:	6838      	ldr	r0, [r7, #0]
 8010300:	f7f2 fa9a 	bl	8002838 <_ZNK6tflite12RuntimeShape4DimsEi>
 8010304:	4602      	mov	r2, r0
 8010306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010308:	4293      	cmp	r3, r2
 801030a:	dd01      	ble.n	8010310 <_ZN6tflite21reference_integer_ops14FullyConnectedIaaalEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_+0xa8>
 801030c:	f00f fba8 	bl	801fa60 <abort>
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 8010310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010312:	3b01      	subs	r3, #1
 8010314:	4619      	mov	r1, r3
 8010316:	6838      	ldr	r0, [r7, #0]
 8010318:	f7f2 fa8e 	bl	8002838 <_ZNK6tflite12RuntimeShape4DimsEi>
 801031c:	62b8      	str	r0, [r7, #40]	; 0x28
  for (int b = 0; b < batches; ++b) {
 801031e:	2300      	movs	r3, #0
 8010320:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010322:	e073      	b.n	801040c <_ZN6tflite21reference_integer_ops14FullyConnectedIaaalEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_+0x1a4>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 8010324:	2300      	movs	r3, #0
 8010326:	65bb      	str	r3, [r7, #88]	; 0x58
 8010328:	e069      	b.n	80103fe <_ZN6tflite21reference_integer_ops14FullyConnectedIaaalEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_+0x196>
      BiasType acc = 0;
 801032a:	2300      	movs	r3, #0
 801032c:	657b      	str	r3, [r7, #84]	; 0x54
      for (int d = 0; d < accum_depth; ++d) {
 801032e:	2300      	movs	r3, #0
 8010330:	653b      	str	r3, [r7, #80]	; 0x50
 8010332:	e025      	b.n	8010380 <_ZN6tflite21reference_integer_ops14FullyConnectedIaaalEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_+0x118>
        int32_t input_val = input_data[b * accum_depth + d];
 8010334:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010336:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010338:	fb03 f202 	mul.w	r2, r3, r2
 801033c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801033e:	4413      	add	r3, r2
 8010340:	461a      	mov	r2, r3
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	4413      	add	r3, r2
 8010346:	f993 3000 	ldrsb.w	r3, [r3]
 801034a:	627b      	str	r3, [r7, #36]	; 0x24
        int32_t filter_val = filter_data[out_c * accum_depth + d];
 801034c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801034e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010350:	fb03 f202 	mul.w	r2, r3, r2
 8010354:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010356:	4413      	add	r3, r2
 8010358:	461a      	mov	r2, r3
 801035a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801035c:	4413      	add	r3, r2
 801035e:	f993 3000 	ldrsb.w	r3, [r3]
 8010362:	623b      	str	r3, [r7, #32]
        acc += (filter_val + filter_offset) * (input_val + input_offset);
 8010364:	6a3a      	ldr	r2, [r7, #32]
 8010366:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010368:	4413      	add	r3, r2
 801036a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801036c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801036e:	440a      	add	r2, r1
 8010370:	fb02 f303 	mul.w	r3, r2, r3
 8010374:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010376:	4413      	add	r3, r2
 8010378:	657b      	str	r3, [r7, #84]	; 0x54
      for (int d = 0; d < accum_depth; ++d) {
 801037a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801037c:	3301      	adds	r3, #1
 801037e:	653b      	str	r3, [r7, #80]	; 0x50
 8010380:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010384:	429a      	cmp	r2, r3
 8010386:	dbd5      	blt.n	8010334 <_ZN6tflite21reference_integer_ops14FullyConnectedIaaalEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_+0xcc>
      }
      if (bias_data) {
 8010388:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801038a:	2b00      	cmp	r3, #0
 801038c:	d007      	beq.n	801039e <_ZN6tflite21reference_integer_ops14FullyConnectedIaaalEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_+0x136>
        acc += bias_data[out_c];
 801038e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010390:	009b      	lsls	r3, r3, #2
 8010392:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8010394:	4413      	add	r3, r2
 8010396:	681b      	ldr	r3, [r3, #0]
 8010398:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801039a:	4413      	add	r3, r2
 801039c:	657b      	str	r3, [r7, #84]	; 0x54
      }
      int32_t acc_scaled =
          MultiplyByQuantizedMultiplier(acc, output_multiplier, output_shift);
 801039e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80103a0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80103a2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80103a4:	f7f5 fafa 	bl	800599c <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 80103a8:	4603      	mov	r3, r0
      int32_t acc_scaled =
 80103aa:	617b      	str	r3, [r7, #20]
      acc_scaled += output_offset;
 80103ac:	697a      	ldr	r2, [r7, #20]
 80103ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80103b0:	4413      	add	r3, r2
 80103b2:	617b      	str	r3, [r7, #20]
      acc_scaled = std::max(acc_scaled, output_activation_min);
 80103b4:	f107 021c 	add.w	r2, r7, #28
 80103b8:	f107 0314 	add.w	r3, r7, #20
 80103bc:	4611      	mov	r1, r2
 80103be:	4618      	mov	r0, r3
 80103c0:	f7f5 ff73 	bl	80062aa <_ZSt3maxIlERKT_S2_S2_>
 80103c4:	4603      	mov	r3, r0
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	617b      	str	r3, [r7, #20]
      acc_scaled = std::min(acc_scaled, output_activation_max);
 80103ca:	f107 0218 	add.w	r2, r7, #24
 80103ce:	f107 0314 	add.w	r3, r7, #20
 80103d2:	4611      	mov	r1, r2
 80103d4:	4618      	mov	r0, r3
 80103d6:	f7f5 ff54 	bl	8006282 <_ZSt3minIlERKT_S2_S2_>
 80103da:	4603      	mov	r3, r0
 80103dc:	681b      	ldr	r3, [r3, #0]
 80103de:	617b      	str	r3, [r7, #20]
      output_data[out_c + output_depth * b] =
 80103e0:	6979      	ldr	r1, [r7, #20]
 80103e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80103e6:	fb03 f202 	mul.w	r2, r3, r2
 80103ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80103ec:	4413      	add	r3, r2
 80103ee:	461a      	mov	r2, r3
 80103f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80103f2:	4413      	add	r3, r2
 80103f4:	b24a      	sxtb	r2, r1
 80103f6:	701a      	strb	r2, [r3, #0]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 80103f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80103fa:	3301      	adds	r3, #1
 80103fc:	65bb      	str	r3, [r7, #88]	; 0x58
 80103fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010402:	429a      	cmp	r2, r3
 8010404:	db91      	blt.n	801032a <_ZN6tflite21reference_integer_ops14FullyConnectedIaaalEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_+0xc2>
  for (int b = 0; b < batches; ++b) {
 8010406:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010408:	3301      	adds	r3, #1
 801040a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801040c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801040e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010410:	429a      	cmp	r2, r3
 8010412:	db87      	blt.n	8010324 <_ZN6tflite21reference_integer_ops14FullyConnectedIaaalEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_+0xbc>
          static_cast<OutputType>(acc_scaled);
    }
  }
}
 8010414:	bf00      	nop
 8010416:	bf00      	nop
 8010418:	3760      	adds	r7, #96	; 0x60
 801041a:	46bd      	mov	sp, r7
 801041c:	bd80      	pop	{r7, pc}

0801041e <_ZN6tflite21reference_integer_ops14FullyConnectedIsasxEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_>:
void FullyConnected(const FullyConnectedParams& params,
 801041e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010422:	b098      	sub	sp, #96	; 0x60
 8010424:	af00      	add	r7, sp, #0
 8010426:	60f8      	str	r0, [r7, #12]
 8010428:	60b9      	str	r1, [r7, #8]
 801042a:	607a      	str	r2, [r7, #4]
 801042c:	603b      	str	r3, [r7, #0]
  const int32_t input_offset = params.input_offset;
 801042e:	68fb      	ldr	r3, [r7, #12]
 8010430:	681b      	ldr	r3, [r3, #0]
 8010432:	64bb      	str	r3, [r7, #72]	; 0x48
  const int32_t filter_offset = params.weights_offset;
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	685b      	ldr	r3, [r3, #4]
 8010438:	647b      	str	r3, [r7, #68]	; 0x44
  const int32_t output_offset = params.output_offset;
 801043a:	68fb      	ldr	r3, [r7, #12]
 801043c:	689b      	ldr	r3, [r3, #8]
 801043e:	643b      	str	r3, [r7, #64]	; 0x40
  const int32_t output_multiplier = params.output_multiplier;
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	68db      	ldr	r3, [r3, #12]
 8010444:	63fb      	str	r3, [r7, #60]	; 0x3c
  const int output_shift = params.output_shift;
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	691b      	ldr	r3, [r3, #16]
 801044a:	63bb      	str	r3, [r7, #56]	; 0x38
  const int32_t output_activation_min = params.quantized_activation_min;
 801044c:	68fb      	ldr	r3, [r7, #12]
 801044e:	695b      	ldr	r3, [r3, #20]
 8010450:	61bb      	str	r3, [r7, #24]
  const int32_t output_activation_max = params.quantized_activation_max;
 8010452:	68fb      	ldr	r3, [r7, #12]
 8010454:	699b      	ldr	r3, [r3, #24]
 8010456:	617b      	str	r3, [r7, #20]
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
 8010458:	6838      	ldr	r0, [r7, #0]
 801045a:	f7f2 f9e1 	bl	8002820 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801045e:	4603      	mov	r3, r0
 8010460:	2b01      	cmp	r3, #1
 8010462:	dc01      	bgt.n	8010468 <_ZN6tflite21reference_integer_ops14FullyConnectedIsasxEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_+0x4a>
 8010464:	f00f fafc 	bl	801fa60 <abort>
  TFLITE_DCHECK_GE(output_shape.DimensionsCount(), 1);
 8010468:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 801046c:	f7f2 f9d8 	bl	8002820 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8010470:	4603      	mov	r3, r0
 8010472:	2b00      	cmp	r3, #0
 8010474:	dc01      	bgt.n	801047a <_ZN6tflite21reference_integer_ops14FullyConnectedIsasxEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_+0x5c>
 8010476:	f00f faf3 	bl	801fa60 <abort>
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 801047a:	69ba      	ldr	r2, [r7, #24]
 801047c:	697b      	ldr	r3, [r7, #20]
 801047e:	429a      	cmp	r2, r3
 8010480:	dd01      	ble.n	8010486 <_ZN6tflite21reference_integer_ops14FullyConnectedIsasxEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_+0x68>
 8010482:	f00f faed 	bl	801fa60 <abort>
  const int filter_dim_count = filter_shape.DimensionsCount();
 8010486:	6838      	ldr	r0, [r7, #0]
 8010488:	f7f2 f9ca 	bl	8002820 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801048c:	6378      	str	r0, [r7, #52]	; 0x34
  const int output_dim_count = output_shape.DimensionsCount();
 801048e:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8010492:	f7f2 f9c5 	bl	8002820 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8010496:	6338      	str	r0, [r7, #48]	; 0x30
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
 8010498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801049a:	3b01      	subs	r3, #1
 801049c:	4619      	mov	r1, r3
 801049e:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80104a2:	f7ff fa1d 	bl	800f8e0 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 80104a6:	62f8      	str	r0, [r7, #44]	; 0x2c
  const int output_depth = output_shape.Dims(output_dim_count - 1);
 80104a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104aa:	3b01      	subs	r3, #1
 80104ac:	4619      	mov	r1, r3
 80104ae:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80104b2:	f7f2 f9c1 	bl	8002838 <_ZNK6tflite12RuntimeShape4DimsEi>
 80104b6:	62b8      	str	r0, [r7, #40]	; 0x28
  TFLITE_DCHECK_LE(output_depth, filter_shape.Dims(filter_dim_count - 2));
 80104b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104ba:	3b02      	subs	r3, #2
 80104bc:	4619      	mov	r1, r3
 80104be:	6838      	ldr	r0, [r7, #0]
 80104c0:	f7f2 f9ba 	bl	8002838 <_ZNK6tflite12RuntimeShape4DimsEi>
 80104c4:	4602      	mov	r2, r0
 80104c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104c8:	4293      	cmp	r3, r2
 80104ca:	dd01      	ble.n	80104d0 <_ZN6tflite21reference_integer_ops14FullyConnectedIsasxEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_+0xb2>
 80104cc:	f00f fac8 	bl	801fa60 <abort>
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 80104d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104d2:	3b01      	subs	r3, #1
 80104d4:	4619      	mov	r1, r3
 80104d6:	6838      	ldr	r0, [r7, #0]
 80104d8:	f7f2 f9ae 	bl	8002838 <_ZNK6tflite12RuntimeShape4DimsEi>
 80104dc:	6278      	str	r0, [r7, #36]	; 0x24
  for (int b = 0; b < batches; ++b) {
 80104de:	2300      	movs	r3, #0
 80104e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80104e2:	e08b      	b.n	80105fc <_ZN6tflite21reference_integer_ops14FullyConnectedIsasxEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_+0x1de>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 80104e4:	2300      	movs	r3, #0
 80104e6:	65bb      	str	r3, [r7, #88]	; 0x58
 80104e8:	e080      	b.n	80105ec <_ZN6tflite21reference_integer_ops14FullyConnectedIsasxEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_+0x1ce>
      BiasType acc = 0;
 80104ea:	f04f 0200 	mov.w	r2, #0
 80104ee:	f04f 0300 	mov.w	r3, #0
 80104f2:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
      for (int d = 0; d < accum_depth; ++d) {
 80104f6:	2300      	movs	r3, #0
 80104f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80104fa:	e02e      	b.n	801055a <_ZN6tflite21reference_integer_ops14FullyConnectedIsasxEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_+0x13c>
        int32_t input_val = input_data[b * accum_depth + d];
 80104fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80104fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010500:	fb03 f202 	mul.w	r2, r3, r2
 8010504:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010506:	4413      	add	r3, r2
 8010508:	005b      	lsls	r3, r3, #1
 801050a:	687a      	ldr	r2, [r7, #4]
 801050c:	4413      	add	r3, r2
 801050e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010512:	623b      	str	r3, [r7, #32]
        int32_t filter_val = filter_data[out_c * accum_depth + d];
 8010514:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010516:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010518:	fb03 f202 	mul.w	r2, r3, r2
 801051c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801051e:	4413      	add	r3, r2
 8010520:	461a      	mov	r2, r3
 8010522:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010526:	4413      	add	r3, r2
 8010528:	f993 3000 	ldrsb.w	r3, [r3]
 801052c:	61fb      	str	r3, [r7, #28]
        acc += (filter_val + filter_offset) * (input_val + input_offset);
 801052e:	69fa      	ldr	r2, [r7, #28]
 8010530:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010532:	4413      	add	r3, r2
 8010534:	6a39      	ldr	r1, [r7, #32]
 8010536:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010538:	440a      	add	r2, r1
 801053a:	fb02 f303 	mul.w	r3, r2, r3
 801053e:	17da      	asrs	r2, r3, #31
 8010540:	461c      	mov	r4, r3
 8010542:	4615      	mov	r5, r2
 8010544:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8010548:	eb12 0804 	adds.w	r8, r2, r4
 801054c:	eb43 0905 	adc.w	r9, r3, r5
 8010550:	e9c7 8914 	strd	r8, r9, [r7, #80]	; 0x50
      for (int d = 0; d < accum_depth; ++d) {
 8010554:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010556:	3301      	adds	r3, #1
 8010558:	64fb      	str	r3, [r7, #76]	; 0x4c
 801055a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801055c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801055e:	429a      	cmp	r2, r3
 8010560:	dbcc      	blt.n	80104fc <_ZN6tflite21reference_integer_ops14FullyConnectedIsasxEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_+0xde>
      if (bias_data) {
 8010562:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010566:	2b00      	cmp	r3, #0
 8010568:	d00e      	beq.n	8010588 <_ZN6tflite21reference_integer_ops14FullyConnectedIsasxEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_+0x16a>
        acc += bias_data[out_c];
 801056a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801056c:	00db      	lsls	r3, r3, #3
 801056e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8010572:	4413      	add	r3, r2
 8010574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010578:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 801057c:	eb10 0a02 	adds.w	sl, r0, r2
 8010580:	eb41 0b03 	adc.w	fp, r1, r3
 8010584:	e9c7 ab14 	strd	sl, fp, [r7, #80]	; 0x50
          MultiplyByQuantizedMultiplier(acc, output_multiplier, output_shift);
 8010588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801058a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801058c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8010590:	f7f5 fa28 	bl	80059e4 <_ZN6tflite29MultiplyByQuantizedMultiplierExli>
 8010594:	4603      	mov	r3, r0
      int32_t acc_scaled =
 8010596:	613b      	str	r3, [r7, #16]
      acc_scaled += output_offset;
 8010598:	693a      	ldr	r2, [r7, #16]
 801059a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801059c:	4413      	add	r3, r2
 801059e:	613b      	str	r3, [r7, #16]
      acc_scaled = std::max(acc_scaled, output_activation_min);
 80105a0:	f107 0218 	add.w	r2, r7, #24
 80105a4:	f107 0310 	add.w	r3, r7, #16
 80105a8:	4611      	mov	r1, r2
 80105aa:	4618      	mov	r0, r3
 80105ac:	f7f5 fe7d 	bl	80062aa <_ZSt3maxIlERKT_S2_S2_>
 80105b0:	4603      	mov	r3, r0
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	613b      	str	r3, [r7, #16]
      acc_scaled = std::min(acc_scaled, output_activation_max);
 80105b6:	f107 0214 	add.w	r2, r7, #20
 80105ba:	f107 0310 	add.w	r3, r7, #16
 80105be:	4611      	mov	r1, r2
 80105c0:	4618      	mov	r0, r3
 80105c2:	f7f5 fe5e 	bl	8006282 <_ZSt3minIlERKT_S2_S2_>
 80105c6:	4603      	mov	r3, r0
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	613b      	str	r3, [r7, #16]
      output_data[out_c + output_depth * b] =
 80105cc:	6939      	ldr	r1, [r7, #16]
 80105ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105d0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80105d2:	fb03 f202 	mul.w	r2, r3, r2
 80105d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80105d8:	4413      	add	r3, r2
 80105da:	005b      	lsls	r3, r3, #1
 80105dc:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80105e0:	4413      	add	r3, r2
 80105e2:	b20a      	sxth	r2, r1
 80105e4:	801a      	strh	r2, [r3, #0]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 80105e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80105e8:	3301      	adds	r3, #1
 80105ea:	65bb      	str	r3, [r7, #88]	; 0x58
 80105ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80105ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105f0:	429a      	cmp	r2, r3
 80105f2:	f6ff af7a 	blt.w	80104ea <_ZN6tflite21reference_integer_ops14FullyConnectedIsasxEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_+0xcc>
  for (int b = 0; b < batches; ++b) {
 80105f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80105f8:	3301      	adds	r3, #1
 80105fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80105fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80105fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010600:	429a      	cmp	r2, r3
 8010602:	f6ff af6f 	blt.w	80104e4 <_ZN6tflite21reference_integer_ops14FullyConnectedIsasxEEvRKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKT_S7_PKT0_S7_PKT2_S7_PT1_+0xc6>
}
 8010606:	bf00      	nop
 8010608:	bf00      	nop
 801060a:	3760      	adds	r7, #96	; 0x60
 801060c:	46bd      	mov	sp, r7
 801060e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08010612 <_ZN6tflite29FullyConnectedParamsQuantizedERKNS_20OpDataFullyConnectedE>:
const int kFullyConnectedWeightsTensor = 1;
const int kFullyConnectedBiasTensor = 2;
const int kFullyConnectedOutputTensor = 0;

FullyConnectedParams FullyConnectedParamsQuantized(
    const OpDataFullyConnected& op_data) {
 8010612:	b480      	push	{r7}
 8010614:	b083      	sub	sp, #12
 8010616:	af00      	add	r7, sp, #0
 8010618:	6078      	str	r0, [r7, #4]
 801061a:	6039      	str	r1, [r7, #0]
  FullyConnectedParams op_params;
  op_params.input_offset = -op_data.input_zero_point;
 801061c:	683b      	ldr	r3, [r7, #0]
 801061e:	695b      	ldr	r3, [r3, #20]
 8010620:	425a      	negs	r2, r3
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	601a      	str	r2, [r3, #0]
  op_params.weights_offset = -op_data.filter_zero_point;
 8010626:	683b      	ldr	r3, [r7, #0]
 8010628:	699b      	ldr	r3, [r3, #24]
 801062a:	425a      	negs	r2, r3
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	605a      	str	r2, [r3, #4]
  op_params.output_offset = op_data.output_zero_point;
 8010630:	683b      	ldr	r3, [r7, #0]
 8010632:	69da      	ldr	r2, [r3, #28]
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	609a      	str	r2, [r3, #8]
  op_params.output_multiplier = op_data.output_multiplier;
 8010638:	683b      	ldr	r3, [r7, #0]
 801063a:	681a      	ldr	r2, [r3, #0]
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	60da      	str	r2, [r3, #12]
  op_params.output_shift = op_data.output_shift;
 8010640:	683b      	ldr	r3, [r7, #0]
 8010642:	685a      	ldr	r2, [r3, #4]
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	611a      	str	r2, [r3, #16]
  op_params.quantized_activation_min = op_data.output_activation_min;
 8010648:	683b      	ldr	r3, [r7, #0]
 801064a:	689a      	ldr	r2, [r3, #8]
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	615a      	str	r2, [r3, #20]
  op_params.quantized_activation_max = op_data.output_activation_max;
 8010650:	683b      	ldr	r3, [r7, #0]
 8010652:	68da      	ldr	r2, [r3, #12]
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	619a      	str	r2, [r3, #24]
  return op_params;
 8010658:	bf00      	nop
}
 801065a:	6878      	ldr	r0, [r7, #4]
 801065c:	370c      	adds	r7, #12
 801065e:	46bd      	mov	sp, r7
 8010660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010664:	4770      	bx	lr

08010666 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation>:

FullyConnectedParams FullyConnectedParamsFloat(
    TfLiteFusedActivation activation) {
 8010666:	b580      	push	{r7, lr}
 8010668:	b082      	sub	sp, #8
 801066a:	af00      	add	r7, sp, #0
 801066c:	6078      	str	r0, [r7, #4]
 801066e:	460b      	mov	r3, r1
 8010670:	70fb      	strb	r3, [r7, #3]
  FullyConnectedParams op_params;
  CalculateActivationRange(activation, &op_params.float_activation_min,
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	f103 0220 	add.w	r2, r3, #32
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	f103 011c 	add.w	r1, r3, #28
 801067e:	78fb      	ldrb	r3, [r7, #3]
 8010680:	4618      	mov	r0, r3
 8010682:	f7fb fa75 	bl	800bb70 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
                           &op_params.float_activation_max);
  return op_params;
 8010686:	bf00      	nop
}
 8010688:	6878      	ldr	r0, [r7, #4]
 801068a:	3708      	adds	r7, #8
 801068c:	46bd      	mov	sp, r7
 801068e:	bd80      	pop	{r7, pc}

08010690 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>:

TfLiteStatus CalculateOpDataFullyConnected(
    TfLiteContext* context, TfLiteFusedActivation activation,
    TfLiteType data_type, const TfLiteTensor* input, const TfLiteTensor* filter,
    const TfLiteTensor* bias, TfLiteTensor* output,
    OpDataFullyConnected* data) {
 8010690:	b590      	push	{r4, r7, lr}
 8010692:	b08b      	sub	sp, #44	; 0x2c
 8010694:	af02      	add	r7, sp, #8
 8010696:	60f8      	str	r0, [r7, #12]
 8010698:	607b      	str	r3, [r7, #4]
 801069a:	460b      	mov	r3, r1
 801069c:	72fb      	strb	r3, [r7, #11]
 801069e:	4613      	mov	r3, r2
 80106a0:	72bb      	strb	r3, [r7, #10]
  // TODO(b/324385802): Support per-channel quantization for FullyConnected.
  // If you have hit this failure message, you will need to disable this
  // behavior. This can be done by setting the following flag to true:
  // TfLiteConverter._experimental_disable_per_channel_quantization_for_dense_layers
  // https://github.com/tensorflow/tensorflow/blob/377f47694fa790e98db6665b9adecde00b5e0d68/tensorflow/lite/python/lite.py#L674
  if (filter->quantization.type == kTfLiteAffineQuantization &&
 80106a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106a4:	781b      	ldrb	r3, [r3, #0]
 80106a6:	2b01      	cmp	r3, #1
 80106a8:	d121      	bne.n	80106ee <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x5e>
      filter->quantization.params != nullptr) {
 80106aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106ac:	685b      	ldr	r3, [r3, #4]
  if (filter->quantization.type == kTfLiteAffineQuantization &&
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d01d      	beq.n	80106ee <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x5e>
    TfLiteAffineQuantization* affine_quantization =
 80106b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106b4:	685b      	ldr	r3, [r3, #4]
 80106b6:	61fb      	str	r3, [r7, #28]
        reinterpret_cast<TfLiteAffineQuantization*>(
            filter->quantization.params);
    TF_LITE_ENSURE(context, affine_quantization->scale);
 80106b8:	69fb      	ldr	r3, [r7, #28]
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d10a      	bne.n	80106d6 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x46>
 80106c0:	68fb      	ldr	r3, [r7, #12]
 80106c2:	695c      	ldr	r4, [r3, #20]
 80106c4:	4b2f      	ldr	r3, [pc, #188]	; (8010784 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0xf4>)
 80106c6:	9300      	str	r3, [sp, #0]
 80106c8:	2346      	movs	r3, #70	; 0x46
 80106ca:	4a2f      	ldr	r2, [pc, #188]	; (8010788 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0xf8>)
 80106cc:	492f      	ldr	r1, [pc, #188]	; (801078c <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0xfc>)
 80106ce:	68f8      	ldr	r0, [r7, #12]
 80106d0:	47a0      	blx	r4
 80106d2:	2301      	movs	r3, #1
 80106d4:	e052      	b.n	801077c <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0xec>
    TF_LITE_ENSURE_MSG(
 80106d6:	69fb      	ldr	r3, [r7, #28]
 80106d8:	681b      	ldr	r3, [r3, #0]
 80106da:	681b      	ldr	r3, [r3, #0]
 80106dc:	2b01      	cmp	r3, #1
 80106de:	d006      	beq.n	80106ee <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x5e>
 80106e0:	68fb      	ldr	r3, [r7, #12]
 80106e2:	695b      	ldr	r3, [r3, #20]
 80106e4:	492a      	ldr	r1, [pc, #168]	; (8010790 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x100>)
 80106e6:	68f8      	ldr	r0, [r7, #12]
 80106e8:	4798      	blx	r3
 80106ea:	2301      	movs	r3, #1
 80106ec:	e046      	b.n	801077c <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0xec>
        "FullyConnected per-channel quantization not yet supported. Please set "
        "converter._experimental_disable_per_channel_quantization_for_dense_"
        "layers = True.");
  }

  if (data_type != kTfLiteFloat32) {
 80106ee:	7abb      	ldrb	r3, [r7, #10]
 80106f0:	2b01      	cmp	r3, #1
 80106f2:	d042      	beq.n	801077a <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0xea>
    double real_multiplier = 0.0;
 80106f4:	f04f 0200 	mov.w	r2, #0
 80106f8:	f04f 0300 	mov.w	r3, #0
 80106fc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 8010700:	f107 0310 	add.w	r3, r7, #16
 8010704:	9301      	str	r3, [sp, #4]
 8010706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010708:	9300      	str	r3, [sp, #0]
 801070a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801070c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801070e:	6879      	ldr	r1, [r7, #4]
 8010710:	68f8      	ldr	r0, [r7, #12]
 8010712:	f7f6 f859 	bl	80067c8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
 8010716:	4603      	mov	r3, r0
 8010718:	76fb      	strb	r3, [r7, #27]
 801071a:	7efb      	ldrb	r3, [r7, #27]
 801071c:	2b00      	cmp	r3, #0
 801071e:	d001      	beq.n	8010724 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x94>
 8010720:	7efb      	ldrb	r3, [r7, #27]
 8010722:	e02b      	b.n	801077c <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0xec>
        context, input, filter, bias, output, &real_multiplier));
    QuantizeMultiplier(real_multiplier, &data->output_multiplier,
 8010724:	ed97 7b04 	vldr	d7, [r7, #16]
 8010728:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801072a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801072c:	3304      	adds	r3, #4
 801072e:	4619      	mov	r1, r3
 8010730:	4610      	mov	r0, r2
 8010732:	eeb0 0b47 	vmov.f64	d0, d7
 8010736:	f7f5 fb7b 	bl	8005e30 <_ZN6tflite18QuantizeMultiplierEdPlPi>

    // Filter weights will always be symmetric quantized since we only support
    // int8 quantization. See
    // https://github.com/tensorflow/tensorflow/issues/44912 for additional
    // context.
    TFLITE_DCHECK(filter->params.zero_point == 0);
 801073a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801073c:	68db      	ldr	r3, [r3, #12]
 801073e:	2b00      	cmp	r3, #0
 8010740:	d001      	beq.n	8010746 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0xb6>
 8010742:	f00f f98d 	bl	801fa60 <abort>

    data->input_zero_point = input->params.zero_point;
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	68da      	ldr	r2, [r3, #12]
 801074a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801074c:	615a      	str	r2, [r3, #20]
    data->filter_zero_point = filter->params.zero_point;
 801074e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010750:	68da      	ldr	r2, [r3, #12]
 8010752:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010754:	619a      	str	r2, [r3, #24]
    data->output_zero_point = output->params.zero_point;
 8010756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010758:	68da      	ldr	r2, [r3, #12]
 801075a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801075c:	61da      	str	r2, [r3, #28]

    return CalculateActivationRangeQuantized(context, activation, output,
 801075e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010760:	f103 0208 	add.w	r2, r3, #8
 8010764:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010766:	330c      	adds	r3, #12
 8010768:	7af9      	ldrb	r1, [r7, #11]
 801076a:	9300      	str	r3, [sp, #0]
 801076c:	4613      	mov	r3, r2
 801076e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010770:	68f8      	ldr	r0, [r7, #12]
 8010772:	f7f6 f9f5 	bl	8006b60 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 8010776:	4603      	mov	r3, r0
                                             &data->output_activation_min,
                                             &data->output_activation_max);
 8010778:	e000      	b.n	801077c <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0xec>
  }
  return kTfLiteOk;
 801077a:	2300      	movs	r3, #0
}
 801077c:	4618      	mov	r0, r3
 801077e:	3724      	adds	r7, #36	; 0x24
 8010780:	46bd      	mov	sp, r7
 8010782:	bd90      	pop	{r4, r7, pc}
 8010784:	080274dc 	.word	0x080274dc
 8010788:	08027480 	.word	0x08027480
 801078c:	080274c4 	.word	0x080274c4
 8010790:	080274f8 	.word	0x080274f8

08010794 <_ZN6tflite5micro12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>:
namespace micro {

namespace {

int ValidateTensorIndexing(const TfLiteContext* context, int index,
                           int max_size, const int* tensor_indices) {
 8010794:	b480      	push	{r7}
 8010796:	b087      	sub	sp, #28
 8010798:	af00      	add	r7, sp, #0
 801079a:	60f8      	str	r0, [r7, #12]
 801079c:	60b9      	str	r1, [r7, #8]
 801079e:	607a      	str	r2, [r7, #4]
 80107a0:	603b      	str	r3, [r7, #0]
  if (index >= 0 && index < max_size) {
 80107a2:	68bb      	ldr	r3, [r7, #8]
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	db0f      	blt.n	80107c8 <_ZN6tflite5micro12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
 80107a8:	68ba      	ldr	r2, [r7, #8]
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	429a      	cmp	r2, r3
 80107ae:	da0b      	bge.n	80107c8 <_ZN6tflite5micro12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
    const int tensor_index = tensor_indices[index];
 80107b0:	68bb      	ldr	r3, [r7, #8]
 80107b2:	009b      	lsls	r3, r3, #2
 80107b4:	683a      	ldr	r2, [r7, #0]
 80107b6:	4413      	add	r3, r2
 80107b8:	681b      	ldr	r3, [r3, #0]
 80107ba:	617b      	str	r3, [r7, #20]
    if (tensor_index != kTfLiteOptionalTensor) {
 80107bc:	697b      	ldr	r3, [r7, #20]
 80107be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107c2:	d001      	beq.n	80107c8 <_ZN6tflite5micro12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
      return tensor_index;
 80107c4:	697b      	ldr	r3, [r7, #20]
 80107c6:	e001      	b.n	80107cc <_ZN6tflite5micro12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x38>
    }
  }
  return -1;
 80107c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80107cc:	4618      	mov	r0, r3
 80107ce:	371c      	adds	r7, #28
 80107d0:	46bd      	mov	sp, r7
 80107d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107d6:	4770      	bx	lr

080107d8 <_ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_ESE_>:
TFLMRegistration RegisterOp(
    void* (*init)(TfLiteContext* context, const char* buffer, size_t length),
    TfLiteStatus (*prepare)(TfLiteContext* context, TfLiteNode* node),
    TfLiteStatus (*invoke)(TfLiteContext* context, TfLiteNode* node),
    void (*free)(TfLiteContext* context, void* buffer),
    void (*reset)(TfLiteContext* context, void* buffer)) {
 80107d8:	b480      	push	{r7}
 80107da:	b085      	sub	sp, #20
 80107dc:	af00      	add	r7, sp, #0
 80107de:	60f8      	str	r0, [r7, #12]
 80107e0:	60b9      	str	r1, [r7, #8]
 80107e2:	607a      	str	r2, [r7, #4]
 80107e4:	603b      	str	r3, [r7, #0]
          /*free=*/free,
          /*prepare=*/prepare,
          /*invoke=*/invoke,
          /*reset*/ reset,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr};
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	68ba      	ldr	r2, [r7, #8]
 80107ea:	601a      	str	r2, [r3, #0]
 80107ec:	68fb      	ldr	r3, [r7, #12]
 80107ee:	69ba      	ldr	r2, [r7, #24]
 80107f0:	605a      	str	r2, [r3, #4]
 80107f2:	68fb      	ldr	r3, [r7, #12]
 80107f4:	687a      	ldr	r2, [r7, #4]
 80107f6:	609a      	str	r2, [r3, #8]
 80107f8:	68fb      	ldr	r3, [r7, #12]
 80107fa:	683a      	ldr	r2, [r7, #0]
 80107fc:	60da      	str	r2, [r3, #12]
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	69fa      	ldr	r2, [r7, #28]
 8010802:	611a      	str	r2, [r3, #16]
 8010804:	68fb      	ldr	r3, [r7, #12]
 8010806:	2200      	movs	r2, #0
 8010808:	615a      	str	r2, [r3, #20]
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	2200      	movs	r2, #0
 801080e:	619a      	str	r2, [r3, #24]
}
 8010810:	68f8      	ldr	r0, [r7, #12]
 8010812:	3714      	adds	r7, #20
 8010814:	46bd      	mov	sp, r7
 8010816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801081a:	4770      	bx	lr

0801081c <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>:
}

// Returns a mutable tensor for a given input index. is_variable must be checked
// during prepare when the full TfLiteTensor is available.
TfLiteEvalTensor* GetMutableEvalInput(const TfLiteContext* context,
                                      const TfLiteNode* node, int index) {
 801081c:	b580      	push	{r7, lr}
 801081e:	b086      	sub	sp, #24
 8010820:	af00      	add	r7, sp, #0
 8010822:	60f8      	str	r0, [r7, #12]
 8010824:	60b9      	str	r1, [r7, #8]
 8010826:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context != nullptr);
 8010828:	68fb      	ldr	r3, [r7, #12]
 801082a:	2b00      	cmp	r3, #0
 801082c:	d101      	bne.n	8010832 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x16>
 801082e:	f00f f917 	bl	801fa60 <abort>
  TFLITE_DCHECK(node != nullptr);
 8010832:	68bb      	ldr	r3, [r7, #8]
 8010834:	2b00      	cmp	r3, #0
 8010836:	d101      	bne.n	801083c <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x20>
 8010838:	f00f f912 	bl	801fa60 <abort>
  const int tensor_index = ValidateTensorIndexing(
      context, index, node->inputs->size, node->inputs->data);
 801083c:	68bb      	ldr	r3, [r7, #8]
 801083e:	681b      	ldr	r3, [r3, #0]
  const int tensor_index = ValidateTensorIndexing(
 8010840:	681a      	ldr	r2, [r3, #0]
      context, index, node->inputs->size, node->inputs->data);
 8010842:	68bb      	ldr	r3, [r7, #8]
 8010844:	681b      	ldr	r3, [r3, #0]
 8010846:	3304      	adds	r3, #4
  const int tensor_index = ValidateTensorIndexing(
 8010848:	6879      	ldr	r1, [r7, #4]
 801084a:	68f8      	ldr	r0, [r7, #12]
 801084c:	f7ff ffa2 	bl	8010794 <_ZN6tflite5micro12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>
 8010850:	6178      	str	r0, [r7, #20]

  if (tensor_index < 0) {
 8010852:	697b      	ldr	r3, [r7, #20]
 8010854:	2b00      	cmp	r3, #0
 8010856:	da01      	bge.n	801085c <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x40>
    return nullptr;
 8010858:	2300      	movs	r3, #0
 801085a:	e00c      	b.n	8010876 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x5a>
  }

  return context->GetEvalTensor(context, node->inputs->data[index]);
 801085c:	68fb      	ldr	r3, [r7, #12]
 801085e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010860:	68bb      	ldr	r3, [r7, #8]
 8010862:	6819      	ldr	r1, [r3, #0]
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	009b      	lsls	r3, r3, #2
 8010868:	440b      	add	r3, r1
 801086a:	685b      	ldr	r3, [r3, #4]
 801086c:	4619      	mov	r1, r3
 801086e:	68f8      	ldr	r0, [r7, #12]
 8010870:	4790      	blx	r2
 8010872:	4603      	mov	r3, r0
 8010874:	bf00      	nop
}
 8010876:	4618      	mov	r0, r3
 8010878:	3718      	adds	r7, #24
 801087a:	46bd      	mov	sp, r7
 801087c:	bd80      	pop	{r7, pc}

0801087e <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given input index in a node.
const TfLiteEvalTensor* GetEvalInput(const TfLiteContext* context,
                                     const TfLiteNode* node, int index) {
 801087e:	b580      	push	{r7, lr}
 8010880:	b084      	sub	sp, #16
 8010882:	af00      	add	r7, sp, #0
 8010884:	60f8      	str	r0, [r7, #12]
 8010886:	60b9      	str	r1, [r7, #8]
 8010888:	607a      	str	r2, [r7, #4]
  return GetMutableEvalInput(context, node, index);
 801088a:	687a      	ldr	r2, [r7, #4]
 801088c:	68b9      	ldr	r1, [r7, #8]
 801088e:	68f8      	ldr	r0, [r7, #12]
 8010890:	f7ff ffc4 	bl	801081c <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8010894:	4603      	mov	r3, r0
}
 8010896:	4618      	mov	r0, r3
 8010898:	3710      	adds	r7, #16
 801089a:	46bd      	mov	sp, r7
 801089c:	bd80      	pop	{r7, pc}

0801089e <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given output index in a node.
TfLiteEvalTensor* GetEvalOutput(const TfLiteContext* context,
                                const TfLiteNode* node, int index) {
 801089e:	b580      	push	{r7, lr}
 80108a0:	b084      	sub	sp, #16
 80108a2:	af00      	add	r7, sp, #0
 80108a4:	60f8      	str	r0, [r7, #12]
 80108a6:	60b9      	str	r1, [r7, #8]
 80108a8:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context != nullptr);
 80108aa:	68fb      	ldr	r3, [r7, #12]
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d101      	bne.n	80108b4 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x16>
 80108b0:	f00f f8d6 	bl	801fa60 <abort>
  TFLITE_DCHECK(node != nullptr);
 80108b4:	68bb      	ldr	r3, [r7, #8]
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d101      	bne.n	80108be <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x20>
 80108ba:	f00f f8d1 	bl	801fa60 <abort>
  return context->GetEvalTensor(context, node->outputs->data[index]);
 80108be:	68fb      	ldr	r3, [r7, #12]
 80108c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80108c2:	68bb      	ldr	r3, [r7, #8]
 80108c4:	6859      	ldr	r1, [r3, #4]
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	009b      	lsls	r3, r3, #2
 80108ca:	440b      	add	r3, r1
 80108cc:	685b      	ldr	r3, [r3, #4]
 80108ce:	4619      	mov	r1, r3
 80108d0:	68f8      	ldr	r0, [r7, #12]
 80108d2:	4790      	blx	r2
 80108d4:	4603      	mov	r3, r0
}
 80108d6:	4618      	mov	r0, r3
 80108d8:	3710      	adds	r7, #16
 80108da:	46bd      	mov	sp, r7
 80108dc:	bd80      	pop	{r7, pc}

080108de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>:
  TFLITE_DCHECK(input1 != nullptr);
  TFLITE_DCHECK(input2 != nullptr);
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
}

const RuntimeShape GetTensorShape(const TfLiteEvalTensor* tensor) {
 80108de:	b580      	push	{r7, lr}
 80108e0:	b086      	sub	sp, #24
 80108e2:	af00      	add	r7, sp, #0
 80108e4:	6078      	str	r0, [r7, #4]
 80108e6:	6039      	str	r1, [r7, #0]
  if (tensor == nullptr || tensor->dims == nullptr) {
 80108e8:	683b      	ldr	r3, [r7, #0]
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d003      	beq.n	80108f6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x18>
 80108ee:	683b      	ldr	r3, [r7, #0]
 80108f0:	685b      	ldr	r3, [r3, #4]
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d103      	bne.n	80108fe <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x20>
    return RuntimeShape();
 80108f6:	6878      	ldr	r0, [r7, #4]
 80108f8:	f7f5 fc19 	bl	800612e <_ZN6tflite12RuntimeShapeC1Ev>
 80108fc:	e00d      	b.n	801091a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x3c>
  }
  TfLiteIntArray* dims = tensor->dims;
 80108fe:	683b      	ldr	r3, [r7, #0]
 8010900:	685b      	ldr	r3, [r3, #4]
 8010902:	617b      	str	r3, [r7, #20]
  const int dims_size = dims->size;
 8010904:	697b      	ldr	r3, [r7, #20]
 8010906:	681b      	ldr	r3, [r3, #0]
 8010908:	613b      	str	r3, [r7, #16]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
 801090a:	697b      	ldr	r3, [r7, #20]
 801090c:	3304      	adds	r3, #4
 801090e:	60fb      	str	r3, [r7, #12]
  return RuntimeShape(dims_size, dims_data);
 8010910:	68fa      	ldr	r2, [r7, #12]
 8010912:	6939      	ldr	r1, [r7, #16]
 8010914:	6878      	ldr	r0, [r7, #4]
 8010916:	f7f5 fc18 	bl	800614a <_ZN6tflite12RuntimeShapeC1EiPKl>
}
 801091a:	6878      	ldr	r0, [r7, #4]
 801091c:	3718      	adds	r7, #24
 801091e:	46bd      	mov	sp, r7
 8010920:	bd80      	pop	{r7, pc}

08010922 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>:

PaddingType RuntimePaddingType(TfLitePadding padding) {
 8010922:	b480      	push	{r7}
 8010924:	b083      	sub	sp, #12
 8010926:	af00      	add	r7, sp, #0
 8010928:	4603      	mov	r3, r0
 801092a:	71fb      	strb	r3, [r7, #7]
  switch (padding) {
 801092c:	79fb      	ldrb	r3, [r7, #7]
 801092e:	2b01      	cmp	r3, #1
 8010930:	d002      	beq.n	8010938 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0x16>
 8010932:	2b02      	cmp	r3, #2
 8010934:	d002      	beq.n	801093c <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0x1a>
 8010936:	e003      	b.n	8010940 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0x1e>
    case TfLitePadding::kTfLitePaddingSame:
      return PaddingType::kSame;
 8010938:	2301      	movs	r3, #1
 801093a:	e002      	b.n	8010942 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0x20>
    case TfLitePadding::kTfLitePaddingValid:
      return PaddingType::kValid;
 801093c:	2302      	movs	r3, #2
 801093e:	e000      	b.n	8010942 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0x20>
    case TfLitePadding::kTfLitePaddingUnknown:
    default:
      return PaddingType::kNone;
 8010940:	2300      	movs	r3, #0
  }
}
 8010942:	4618      	mov	r0, r3
 8010944:	370c      	adds	r7, #12
 8010946:	46bd      	mov	sp, r7
 8010948:	f85d 7b04 	ldr.w	r7, [sp], #4
 801094c:	4770      	bx	lr
	...

08010950 <_ZN6tflite5micro32CreateWritableTensorDimsWithCopyEP13TfLiteContextP12TfLiteTensorP16TfLiteEvalTensor>:
// The old dims data is copied to the new storage area.
// The tensor and eval_tensor must be the same tensor.
// Only use during Prepare phase.
TfLiteStatus CreateWritableTensorDimsWithCopy(TfLiteContext* context,
                                              TfLiteTensor* tensor,
                                              TfLiteEvalTensor* eval_tensor) {
 8010950:	b590      	push	{r4, r7, lr}
 8010952:	b08d      	sub	sp, #52	; 0x34
 8010954:	af02      	add	r7, sp, #8
 8010956:	60f8      	str	r0, [r7, #12]
 8010958:	60b9      	str	r1, [r7, #8]
 801095a:	607a      	str	r2, [r7, #4]
  TF_LITE_ENSURE(context, tensor != nullptr);
 801095c:	68bb      	ldr	r3, [r7, #8]
 801095e:	2b00      	cmp	r3, #0
 8010960:	d10a      	bne.n	8010978 <_ZN6tflite5micro32CreateWritableTensorDimsWithCopyEP13TfLiteContextP12TfLiteTensorP16TfLiteEvalTensor+0x28>
 8010962:	68fb      	ldr	r3, [r7, #12]
 8010964:	695c      	ldr	r4, [r3, #20]
 8010966:	4b2c      	ldr	r3, [pc, #176]	; (8010a18 <_ZN6tflite5micro32CreateWritableTensorDimsWithCopyEP13TfLiteContextP12TfLiteTensorP16TfLiteEvalTensor+0xc8>)
 8010968:	9300      	str	r3, [sp, #0]
 801096a:	2383      	movs	r3, #131	; 0x83
 801096c:	4a2b      	ldr	r2, [pc, #172]	; (8010a1c <_ZN6tflite5micro32CreateWritableTensorDimsWithCopyEP13TfLiteContextP12TfLiteTensorP16TfLiteEvalTensor+0xcc>)
 801096e:	492c      	ldr	r1, [pc, #176]	; (8010a20 <_ZN6tflite5micro32CreateWritableTensorDimsWithCopyEP13TfLiteContextP12TfLiteTensorP16TfLiteEvalTensor+0xd0>)
 8010970:	68f8      	ldr	r0, [r7, #12]
 8010972:	47a0      	blx	r4
 8010974:	2301      	movs	r3, #1
 8010976:	e04b      	b.n	8010a10 <_ZN6tflite5micro32CreateWritableTensorDimsWithCopyEP13TfLiteContextP12TfLiteTensorP16TfLiteEvalTensor+0xc0>
  TF_LITE_ENSURE(context, eval_tensor != nullptr);
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	2b00      	cmp	r3, #0
 801097c:	d10a      	bne.n	8010994 <_ZN6tflite5micro32CreateWritableTensorDimsWithCopyEP13TfLiteContextP12TfLiteTensorP16TfLiteEvalTensor+0x44>
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	695c      	ldr	r4, [r3, #20]
 8010982:	4b28      	ldr	r3, [pc, #160]	; (8010a24 <_ZN6tflite5micro32CreateWritableTensorDimsWithCopyEP13TfLiteContextP12TfLiteTensorP16TfLiteEvalTensor+0xd4>)
 8010984:	9300      	str	r3, [sp, #0]
 8010986:	2384      	movs	r3, #132	; 0x84
 8010988:	4a24      	ldr	r2, [pc, #144]	; (8010a1c <_ZN6tflite5micro32CreateWritableTensorDimsWithCopyEP13TfLiteContextP12TfLiteTensorP16TfLiteEvalTensor+0xcc>)
 801098a:	4925      	ldr	r1, [pc, #148]	; (8010a20 <_ZN6tflite5micro32CreateWritableTensorDimsWithCopyEP13TfLiteContextP12TfLiteTensorP16TfLiteEvalTensor+0xd0>)
 801098c:	68f8      	ldr	r0, [r7, #12]
 801098e:	47a0      	blx	r4
 8010990:	2301      	movs	r3, #1
 8010992:	e03d      	b.n	8010a10 <_ZN6tflite5micro32CreateWritableTensorDimsWithCopyEP13TfLiteContextP12TfLiteTensorP16TfLiteEvalTensor+0xc0>
  TF_LITE_ENSURE(context, context->AllocatePersistentBuffer != nullptr);
 8010994:	68fb      	ldr	r3, [r7, #12]
 8010996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010998:	2b00      	cmp	r3, #0
 801099a:	d10a      	bne.n	80109b2 <_ZN6tflite5micro32CreateWritableTensorDimsWithCopyEP13TfLiteContextP12TfLiteTensorP16TfLiteEvalTensor+0x62>
 801099c:	68fb      	ldr	r3, [r7, #12]
 801099e:	695c      	ldr	r4, [r3, #20]
 80109a0:	4b21      	ldr	r3, [pc, #132]	; (8010a28 <_ZN6tflite5micro32CreateWritableTensorDimsWithCopyEP13TfLiteContextP12TfLiteTensorP16TfLiteEvalTensor+0xd8>)
 80109a2:	9300      	str	r3, [sp, #0]
 80109a4:	2385      	movs	r3, #133	; 0x85
 80109a6:	4a1d      	ldr	r2, [pc, #116]	; (8010a1c <_ZN6tflite5micro32CreateWritableTensorDimsWithCopyEP13TfLiteContextP12TfLiteTensorP16TfLiteEvalTensor+0xcc>)
 80109a8:	491d      	ldr	r1, [pc, #116]	; (8010a20 <_ZN6tflite5micro32CreateWritableTensorDimsWithCopyEP13TfLiteContextP12TfLiteTensorP16TfLiteEvalTensor+0xd0>)
 80109aa:	68f8      	ldr	r0, [r7, #12]
 80109ac:	47a0      	blx	r4
 80109ae:	2301      	movs	r3, #1
 80109b0:	e02e      	b.n	8010a10 <_ZN6tflite5micro32CreateWritableTensorDimsWithCopyEP13TfLiteContextP12TfLiteTensorP16TfLiteEvalTensor+0xc0>
  int ranks = tensor->dims->size;
 80109b2:	68bb      	ldr	r3, [r7, #8]
 80109b4:	695b      	ldr	r3, [r3, #20]
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	623b      	str	r3, [r7, #32]
  size_t alloc_size = TfLiteIntArrayGetSizeInBytes(ranks);
 80109ba:	6a38      	ldr	r0, [r7, #32]
 80109bc:	f7f4 feb9 	bl	8005732 <TfLiteIntArrayGetSizeInBytes>
 80109c0:	61f8      	str	r0, [r7, #28]
  TfLiteIntArray* new_dims = static_cast<TfLiteIntArray*>(
      context->AllocatePersistentBuffer(context, alloc_size));
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80109c6:	69f9      	ldr	r1, [r7, #28]
 80109c8:	68f8      	ldr	r0, [r7, #12]
 80109ca:	4798      	blx	r3
 80109cc:	61b8      	str	r0, [r7, #24]
  TfLiteIntArray* old_dims = tensor->dims;
 80109ce:	68bb      	ldr	r3, [r7, #8]
 80109d0:	695b      	ldr	r3, [r3, #20]
 80109d2:	617b      	str	r3, [r7, #20]
  new_dims->size = ranks;
 80109d4:	69bb      	ldr	r3, [r7, #24]
 80109d6:	6a3a      	ldr	r2, [r7, #32]
 80109d8:	601a      	str	r2, [r3, #0]
  tensor->dims = new_dims;
 80109da:	68bb      	ldr	r3, [r7, #8]
 80109dc:	69ba      	ldr	r2, [r7, #24]
 80109de:	615a      	str	r2, [r3, #20]
  eval_tensor->dims = new_dims;
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	69ba      	ldr	r2, [r7, #24]
 80109e4:	605a      	str	r2, [r3, #4]
  for (int i = 0; i < ranks; i++) {
 80109e6:	2300      	movs	r3, #0
 80109e8:	627b      	str	r3, [r7, #36]	; 0x24
 80109ea:	e00c      	b.n	8010a06 <_ZN6tflite5micro32CreateWritableTensorDimsWithCopyEP13TfLiteContextP12TfLiteTensorP16TfLiteEvalTensor+0xb6>
    new_dims->data[i] = old_dims->data[i];
 80109ec:	697a      	ldr	r2, [r7, #20]
 80109ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109f0:	009b      	lsls	r3, r3, #2
 80109f2:	4413      	add	r3, r2
 80109f4:	685a      	ldr	r2, [r3, #4]
 80109f6:	69b9      	ldr	r1, [r7, #24]
 80109f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109fa:	009b      	lsls	r3, r3, #2
 80109fc:	440b      	add	r3, r1
 80109fe:	605a      	str	r2, [r3, #4]
  for (int i = 0; i < ranks; i++) {
 8010a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a02:	3301      	adds	r3, #1
 8010a04:	627b      	str	r3, [r7, #36]	; 0x24
 8010a06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010a08:	6a3b      	ldr	r3, [r7, #32]
 8010a0a:	429a      	cmp	r2, r3
 8010a0c:	dbee      	blt.n	80109ec <_ZN6tflite5micro32CreateWritableTensorDimsWithCopyEP13TfLiteContextP12TfLiteTensorP16TfLiteEvalTensor+0x9c>
  }

  return kTfLiteOk;
 8010a0e:	2300      	movs	r3, #0
}
 8010a10:	4618      	mov	r0, r3
 8010a12:	372c      	adds	r7, #44	; 0x2c
 8010a14:	46bd      	mov	sp, r7
 8010a16:	bd90      	pop	{r4, r7, pc}
 8010a18:	08027628 	.word	0x08027628
 8010a1c:	080275d4 	.word	0x080275d4
 8010a20:	08027610 	.word	0x08027610
 8010a24:	0802763c 	.word	0x0802763c
 8010a28:	08027654 	.word	0x08027654

08010a2c <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>:

// A combination of MatchingFlatSize() and FlatSizeSkipDim().
inline int MatchingFlatSizeSkipDim(const RuntimeShape& shape, int skip_dim,
                                   const RuntimeShape& check_shape_0) {
 8010a2c:	b590      	push	{r4, r7, lr}
 8010a2e:	b087      	sub	sp, #28
 8010a30:	af00      	add	r7, sp, #0
 8010a32:	60f8      	str	r0, [r7, #12]
 8010a34:	60b9      	str	r1, [r7, #8]
 8010a36:	607a      	str	r2, [r7, #4]
  const int dims_count = shape.DimensionsCount();
 8010a38:	68f8      	ldr	r0, [r7, #12]
 8010a3a:	f7f1 fef1 	bl	8002820 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8010a3e:	6138      	str	r0, [r7, #16]
  for (int i = 0; i < dims_count; ++i) {
 8010a40:	2300      	movs	r3, #0
 8010a42:	617b      	str	r3, [r7, #20]
 8010a44:	e014      	b.n	8010a70 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x44>
    if (i != skip_dim) {
 8010a46:	697a      	ldr	r2, [r7, #20]
 8010a48:	68bb      	ldr	r3, [r7, #8]
 8010a4a:	429a      	cmp	r2, r3
 8010a4c:	d00d      	beq.n	8010a6a <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x3e>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 8010a4e:	6979      	ldr	r1, [r7, #20]
 8010a50:	68f8      	ldr	r0, [r7, #12]
 8010a52:	f7f1 fef1 	bl	8002838 <_ZNK6tflite12RuntimeShape4DimsEi>
 8010a56:	4604      	mov	r4, r0
 8010a58:	6979      	ldr	r1, [r7, #20]
 8010a5a:	6878      	ldr	r0, [r7, #4]
 8010a5c:	f7f1 feec 	bl	8002838 <_ZNK6tflite12RuntimeShape4DimsEi>
 8010a60:	4603      	mov	r3, r0
 8010a62:	429c      	cmp	r4, r3
 8010a64:	d001      	beq.n	8010a6a <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x3e>
 8010a66:	f00e fffb 	bl	801fa60 <abort>
  for (int i = 0; i < dims_count; ++i) {
 8010a6a:	697b      	ldr	r3, [r7, #20]
 8010a6c:	3301      	adds	r3, #1
 8010a6e:	617b      	str	r3, [r7, #20]
 8010a70:	697a      	ldr	r2, [r7, #20]
 8010a72:	693b      	ldr	r3, [r7, #16]
 8010a74:	429a      	cmp	r2, r3
 8010a76:	dbe6      	blt.n	8010a46 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x1a>
    }
  }
  return FlatSizeSkipDim(shape, skip_dim);
 8010a78:	68b9      	ldr	r1, [r7, #8]
 8010a7a:	68f8      	ldr	r0, [r7, #12]
 8010a7c:	f7fe ff30 	bl	800f8e0 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 8010a80:	4603      	mov	r3, r0
}
 8010a82:	4618      	mov	r0, r3
 8010a84:	371c      	adds	r7, #28
 8010a86:	46bd      	mov	sp, r7
 8010a88:	bd90      	pop	{r4, r7, pc}

08010a8a <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 8010a8a:	b580      	push	{r7, lr}
 8010a8c:	b084      	sub	sp, #16
 8010a8e:	af00      	add	r7, sp, #0
 8010a90:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 8010a92:	f107 030c 	add.w	r3, r7, #12
 8010a96:	4618      	mov	r0, r3
 8010a98:	f000 f988 	bl	8010dac <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8010a9c:	4602      	mov	r2, r0
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	6013      	str	r3, [r2, #0]
    return retval;
 8010aa2:	68fb      	ldr	r3, [r7, #12]
  }
 8010aa4:	4618      	mov	r0, r3
 8010aa6:	3710      	adds	r7, #16
 8010aa8:	46bd      	mov	sp, r7
 8010aaa:	bd80      	pop	{r7, pc}

08010aac <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>:
FixedPoint<tRawType, 0> exp_on_negative_values(
 8010aac:	b590      	push	{r4, r7, lr}
 8010aae:	b091      	sub	sp, #68	; 0x44
 8010ab0:	af00      	add	r7, sp, #0
 8010ab2:	6078      	str	r0, [r7, #4]
  const InputF kOneQuarter = InputF::template ConstantPOT<-2>();
 8010ab4:	f000 f985 	bl	8010dc2 <_ZN8gemmlowp10FixedPointIlLi5EE11ConstantPOTILin2EEES1_v>
 8010ab8:	4603      	mov	r3, r0
 8010aba:	637b      	str	r3, [r7, #52]	; 0x34
  InputF mask = kOneQuarter - InputF::FromScalarRaw(1);
 8010abc:	2001      	movs	r0, #1
 8010abe:	f000 f989 	bl	8010dd4 <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>
 8010ac2:	4603      	mov	r3, r0
 8010ac4:	4619      	mov	r1, r3
 8010ac6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010ac8:	f000 f998 	bl	8010dfc <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8010acc:	4603      	mov	r3, r0
 8010ace:	633b      	str	r3, [r7, #48]	; 0x30
  InputF a_mod_quarter_minus_one_quarter = (a & mask) - kOneQuarter;
 8010ad0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010ad2:	6878      	ldr	r0, [r7, #4]
 8010ad4:	f000 f9b0 	bl	8010e38 <_ZN8gemmlowpanIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8010ad8:	4603      	mov	r3, r0
 8010ada:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010adc:	4618      	mov	r0, r3
 8010ade:	f000 f98d 	bl	8010dfc <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8010ae2:	4603      	mov	r3, r0
 8010ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
  ResultF result = exp_on_interval_between_negative_one_quarter_and_0_excl(
 8010ae6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010ae8:	f000 f9c4 	bl	8010e74 <_ZN8gemmlowp7RescaleILi0ElLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 8010aec:	4603      	mov	r3, r0
 8010aee:	4618      	mov	r0, r3
 8010af0:	f000 f9da 	bl	8010ea8 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>
 8010af4:	4603      	mov	r3, r0
 8010af6:	62bb      	str	r3, [r7, #40]	; 0x28
  tRawType remainder = (a_mod_quarter_minus_one_quarter - a).raw();
 8010af8:	6879      	ldr	r1, [r7, #4]
 8010afa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010afc:	f000 f97e 	bl	8010dfc <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8010b00:	4603      	mov	r3, r0
 8010b02:	63bb      	str	r3, [r7, #56]	; 0x38
 8010b04:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010b08:	4618      	mov	r0, r3
 8010b0a:	f000 f94f 	bl	8010dac <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8010b0e:	4603      	mov	r3, r0
 8010b10:	681b      	ldr	r3, [r3, #0]
 8010b12:	63fb      	str	r3, [r7, #60]	; 0x3c
  GEMMLOWP_EXP_BARREL_SHIFTER(-2, 1672461947);
 8010b14:	4883      	ldr	r0, [pc, #524]	; (8010d24 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x278>)
 8010b16:	f7f5 fc0e 	bl	8006336 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8010b1a:	4603      	mov	r3, r0
 8010b1c:	4618      	mov	r0, r3
 8010b1e:	f7f5 fbf6 	bl	800630e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8010b22:	4603      	mov	r3, r0
 8010b24:	627b      	str	r3, [r7, #36]	; 0x24
 8010b26:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8010b2a:	f7f5 f86b 	bl	8005c04 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8010b2e:	4603      	mov	r3, r0
 8010b30:	4619      	mov	r1, r3
 8010b32:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010b34:	f7f5 f871 	bl	8005c1a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8010b38:	4603      	mov	r3, r0
 8010b3a:	4618      	mov	r0, r3
 8010b3c:	f7f5 f8c0 	bl	8005cc0 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8010b40:	4604      	mov	r4, r0
 8010b42:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010b44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010b46:	f000 fa11 	bl	8010f6c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8010b4a:	4603      	mov	r3, r0
 8010b4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010b4e:	4619      	mov	r1, r3
 8010b50:	4620      	mov	r0, r4
 8010b52:	f000 fa2d 	bl	8010fb0 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8010b56:	4603      	mov	r3, r0
 8010b58:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(-1, 1302514674);
 8010b5a:	4873      	ldr	r0, [pc, #460]	; (8010d28 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x27c>)
 8010b5c:	f7f5 fbeb 	bl	8006336 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8010b60:	4603      	mov	r3, r0
 8010b62:	4618      	mov	r0, r3
 8010b64:	f7f5 fbd3 	bl	800630e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8010b68:	4603      	mov	r3, r0
 8010b6a:	623b      	str	r3, [r7, #32]
 8010b6c:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8010b70:	f7f5 f848 	bl	8005c04 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8010b74:	4603      	mov	r3, r0
 8010b76:	4619      	mov	r1, r3
 8010b78:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010b7a:	f7f5 f84e 	bl	8005c1a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8010b7e:	4603      	mov	r3, r0
 8010b80:	4618      	mov	r0, r3
 8010b82:	f7f5 f89d 	bl	8005cc0 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8010b86:	4604      	mov	r4, r0
 8010b88:	6a39      	ldr	r1, [r7, #32]
 8010b8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010b8c:	f000 f9ee 	bl	8010f6c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8010b90:	4603      	mov	r3, r0
 8010b92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010b94:	4619      	mov	r1, r3
 8010b96:	4620      	mov	r0, r4
 8010b98:	f000 fa0a 	bl	8010fb0 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8010b9c:	4603      	mov	r3, r0
 8010b9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+0, 790015084);
 8010ba0:	4862      	ldr	r0, [pc, #392]	; (8010d2c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x280>)
 8010ba2:	f7f5 fbc8 	bl	8006336 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8010ba6:	4603      	mov	r3, r0
 8010ba8:	4618      	mov	r0, r3
 8010baa:	f7f5 fbb0 	bl	800630e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8010bae:	4603      	mov	r3, r0
 8010bb0:	61fb      	str	r3, [r7, #28]
 8010bb2:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8010bb6:	f7f5 f825 	bl	8005c04 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8010bba:	4603      	mov	r3, r0
 8010bbc:	4619      	mov	r1, r3
 8010bbe:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010bc0:	f7f5 f82b 	bl	8005c1a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8010bc4:	4603      	mov	r3, r0
 8010bc6:	4618      	mov	r0, r3
 8010bc8:	f7f5 f87a 	bl	8005cc0 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8010bcc:	4604      	mov	r4, r0
 8010bce:	69f9      	ldr	r1, [r7, #28]
 8010bd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010bd2:	f000 f9cb 	bl	8010f6c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8010bd6:	4603      	mov	r3, r0
 8010bd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010bda:	4619      	mov	r1, r3
 8010bdc:	4620      	mov	r0, r4
 8010bde:	f000 f9e7 	bl	8010fb0 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8010be2:	4603      	mov	r3, r0
 8010be4:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+1, 290630308);
 8010be6:	4852      	ldr	r0, [pc, #328]	; (8010d30 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x284>)
 8010be8:	f7f5 fba5 	bl	8006336 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8010bec:	4603      	mov	r3, r0
 8010bee:	4618      	mov	r0, r3
 8010bf0:	f7f5 fb8d 	bl	800630e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8010bf4:	4603      	mov	r3, r0
 8010bf6:	61bb      	str	r3, [r7, #24]
 8010bf8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8010bfc:	f7f5 f802 	bl	8005c04 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8010c00:	4603      	mov	r3, r0
 8010c02:	4619      	mov	r1, r3
 8010c04:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010c06:	f7f5 f808 	bl	8005c1a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8010c0a:	4603      	mov	r3, r0
 8010c0c:	4618      	mov	r0, r3
 8010c0e:	f7f5 f857 	bl	8005cc0 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8010c12:	4604      	mov	r4, r0
 8010c14:	69b9      	ldr	r1, [r7, #24]
 8010c16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010c18:	f000 f9a8 	bl	8010f6c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8010c1c:	4603      	mov	r3, r0
 8010c1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010c20:	4619      	mov	r1, r3
 8010c22:	4620      	mov	r0, r4
 8010c24:	f000 f9c4 	bl	8010fb0 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8010c28:	4603      	mov	r3, r0
 8010c2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+2, 39332535);
 8010c2c:	4841      	ldr	r0, [pc, #260]	; (8010d34 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x288>)
 8010c2e:	f7f5 fb82 	bl	8006336 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8010c32:	4603      	mov	r3, r0
 8010c34:	4618      	mov	r0, r3
 8010c36:	f7f5 fb6a 	bl	800630e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8010c3a:	4603      	mov	r3, r0
 8010c3c:	617b      	str	r3, [r7, #20]
 8010c3e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8010c42:	f7f4 ffdf 	bl	8005c04 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8010c46:	4603      	mov	r3, r0
 8010c48:	4619      	mov	r1, r3
 8010c4a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010c4c:	f7f4 ffe5 	bl	8005c1a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8010c50:	4603      	mov	r3, r0
 8010c52:	4618      	mov	r0, r3
 8010c54:	f7f5 f834 	bl	8005cc0 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8010c58:	4604      	mov	r4, r0
 8010c5a:	6979      	ldr	r1, [r7, #20]
 8010c5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010c5e:	f000 f985 	bl	8010f6c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8010c62:	4603      	mov	r3, r0
 8010c64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010c66:	4619      	mov	r1, r3
 8010c68:	4620      	mov	r0, r4
 8010c6a:	f000 f9a1 	bl	8010fb0 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8010c6e:	4603      	mov	r3, r0
 8010c70:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+3, 720401);
 8010c72:	4831      	ldr	r0, [pc, #196]	; (8010d38 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x28c>)
 8010c74:	f7f5 fb5f 	bl	8006336 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8010c78:	4603      	mov	r3, r0
 8010c7a:	4618      	mov	r0, r3
 8010c7c:	f7f5 fb47 	bl	800630e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8010c80:	4603      	mov	r3, r0
 8010c82:	613b      	str	r3, [r7, #16]
 8010c84:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8010c88:	f7f4 ffbc 	bl	8005c04 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8010c8c:	4603      	mov	r3, r0
 8010c8e:	4619      	mov	r1, r3
 8010c90:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010c92:	f7f4 ffc2 	bl	8005c1a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8010c96:	4603      	mov	r3, r0
 8010c98:	4618      	mov	r0, r3
 8010c9a:	f7f5 f811 	bl	8005cc0 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8010c9e:	4604      	mov	r4, r0
 8010ca0:	6939      	ldr	r1, [r7, #16]
 8010ca2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010ca4:	f000 f962 	bl	8010f6c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8010ca8:	4603      	mov	r3, r0
 8010caa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010cac:	4619      	mov	r1, r3
 8010cae:	4620      	mov	r0, r4
 8010cb0:	f000 f97e 	bl	8010fb0 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8010cb4:	4603      	mov	r3, r0
 8010cb6:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+4, 242);
 8010cb8:	20f2      	movs	r0, #242	; 0xf2
 8010cba:	f7f5 fb3c 	bl	8006336 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8010cbe:	4603      	mov	r3, r0
 8010cc0:	4618      	mov	r0, r3
 8010cc2:	f7f5 fb24 	bl	800630e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8010cc6:	4603      	mov	r3, r0
 8010cc8:	60fb      	str	r3, [r7, #12]
 8010cca:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8010cce:	f7f4 ff99 	bl	8005c04 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8010cd2:	4603      	mov	r3, r0
 8010cd4:	4619      	mov	r1, r3
 8010cd6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010cd8:	f7f4 ff9f 	bl	8005c1a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8010cdc:	4603      	mov	r3, r0
 8010cde:	4618      	mov	r0, r3
 8010ce0:	f7f4 ffee 	bl	8005cc0 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8010ce4:	4604      	mov	r4, r0
 8010ce6:	68f9      	ldr	r1, [r7, #12]
 8010ce8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010cea:	f000 f93f 	bl	8010f6c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8010cee:	4603      	mov	r3, r0
 8010cf0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010cf2:	4619      	mov	r1, r3
 8010cf4:	4620      	mov	r0, r4
 8010cf6:	f000 f95b 	bl	8010fb0 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8010cfa:	4603      	mov	r3, r0
 8010cfc:	62bb      	str	r3, [r7, #40]	; 0x28
  result = SelectUsingMask(MaskIfZero(a), ResultF::One(), result);
 8010cfe:	6878      	ldr	r0, [r7, #4]
 8010d00:	f000 f977 	bl	8010ff2 <_ZN8gemmlowp10MaskIfZeroIlLi5EEET_NS_10FixedPointIS1_XT0_EEE>
 8010d04:	4604      	mov	r4, r0
 8010d06:	f7fe fbf9 	bl	800f4fc <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>
 8010d0a:	4603      	mov	r3, r0
 8010d0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010d0e:	4619      	mov	r1, r3
 8010d10:	4620      	mov	r0, r4
 8010d12:	f000 f94d 	bl	8010fb0 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8010d16:	4603      	mov	r3, r0
 8010d18:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8010d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8010d1c:	4618      	mov	r0, r3
 8010d1e:	3744      	adds	r7, #68	; 0x44
 8010d20:	46bd      	mov	sp, r7
 8010d22:	bd90      	pop	{r4, r7, pc}
 8010d24:	63afbe7b 	.word	0x63afbe7b
 8010d28:	4da2cbf2 	.word	0x4da2cbf2
 8010d2c:	2f16ac6c 	.word	0x2f16ac6c
 8010d30:	1152aaa4 	.word	0x1152aaa4
 8010d34:	02582ab7 	.word	0x02582ab7
 8010d38:	000afe11 	.word	0x000afe11

08010d3c <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 8010d3c:	b5b0      	push	{r4, r5, r7, lr}
 8010d3e:	b084      	sub	sp, #16
 8010d40:	af00      	add	r7, sp, #0
 8010d42:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 8010d44:	1d3b      	adds	r3, r7, #4
 8010d46:	4618      	mov	r0, r3
 8010d48:	f7f5 fad6 	bl	80062f8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8010d4c:	4603      	mov	r3, r0
 8010d4e:	681d      	ldr	r5, [r3, #0]
 8010d50:	f107 030c 	add.w	r3, r7, #12
 8010d54:	4618      	mov	r0, r3
 8010d56:	f000 f95e 	bl	8011016 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8010d5a:	4604      	mov	r4, r0
 8010d5c:	4628      	mov	r0, r5
 8010d5e:	f000 f965 	bl	801102c <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12ElEET0_S1_>
 8010d62:	4603      	mov	r3, r0
 8010d64:	6023      	str	r3, [r4, #0]
  return result;
 8010d66:	68fb      	ldr	r3, [r7, #12]
}
 8010d68:	4618      	mov	r0, r3
 8010d6a:	3710      	adds	r7, #16
 8010d6c:	46bd      	mov	sp, r7
 8010d6e:	bdb0      	pop	{r4, r5, r7, pc}

08010d70 <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 8010d70:	b590      	push	{r4, r7, lr}
 8010d72:	b083      	sub	sp, #12
 8010d74:	af00      	add	r7, sp, #0
 8010d76:	6078      	str	r0, [r7, #4]
 8010d78:	6039      	str	r1, [r7, #0]
 8010d7a:	1d3b      	adds	r3, r7, #4
 8010d7c:	4618      	mov	r0, r3
 8010d7e:	f000 f94a 	bl	8011016 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8010d82:	4603      	mov	r3, r0
 8010d84:	681c      	ldr	r4, [r3, #0]
 8010d86:	463b      	mov	r3, r7
 8010d88:	4618      	mov	r0, r3
 8010d8a:	f000 f944 	bl	8011016 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8010d8e:	4603      	mov	r3, r0
 8010d90:	681b      	ldr	r3, [r3, #0]
 8010d92:	4619      	mov	r1, r3
 8010d94:	4620      	mov	r0, r4
 8010d96:	f7f4 ff71 	bl	8005c7c <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8010d9a:	4603      	mov	r3, r0
 8010d9c:	4618      	mov	r0, r3
 8010d9e:	f000 f951 	bl	8011044 <_ZN8gemmlowp10FixedPointIlLi12EE7FromRawEl>
 8010da2:	4603      	mov	r3, r0
 8010da4:	4618      	mov	r0, r3
 8010da6:	370c      	adds	r7, #12
 8010da8:	46bd      	mov	sp, r7
 8010daa:	bd90      	pop	{r4, r7, pc}

08010dac <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>:
  RawType& raw() { return i_; }
 8010dac:	b480      	push	{r7}
 8010dae:	b083      	sub	sp, #12
 8010db0:	af00      	add	r7, sp, #0
 8010db2:	6078      	str	r0, [r7, #4]
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	4618      	mov	r0, r3
 8010db8:	370c      	adds	r7, #12
 8010dba:	46bd      	mov	sp, r7
 8010dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dc0:	4770      	bx	lr

08010dc2 <_ZN8gemmlowp10FixedPointIlLi5EE11ConstantPOTILin2EEES1_v>:
  static FixedPoint ConstantPOT() {
 8010dc2:	b580      	push	{r7, lr}
 8010dc4:	af00      	add	r7, sp, #0
    return FromScalarRaw(ScalarRawType(1) << kOffset);
 8010dc6:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8010dca:	f000 f803 	bl	8010dd4 <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>
 8010dce:	4603      	mov	r3, r0
  }
 8010dd0:	4618      	mov	r0, r3
 8010dd2:	bd80      	pop	{r7, pc}

08010dd4 <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 8010dd4:	b590      	push	{r4, r7, lr}
 8010dd6:	b085      	sub	sp, #20
 8010dd8:	af00      	add	r7, sp, #0
 8010dda:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 8010ddc:	f107 030c 	add.w	r3, r7, #12
 8010de0:	4618      	mov	r0, r3
 8010de2:	f7ff ffe3 	bl	8010dac <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8010de6:	4604      	mov	r4, r0
 8010de8:	6878      	ldr	r0, [r7, #4]
 8010dea:	f7f4 ff0b 	bl	8005c04 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8010dee:	4603      	mov	r3, r0
 8010df0:	6023      	str	r3, [r4, #0]
    return retval;
 8010df2:	68fb      	ldr	r3, [r7, #12]
  }
 8010df4:	4618      	mov	r0, r3
 8010df6:	3714      	adds	r7, #20
 8010df8:	46bd      	mov	sp, r7
 8010dfa:	bd90      	pop	{r4, r7, pc}

08010dfc <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
 8010dfc:	b590      	push	{r4, r7, lr}
 8010dfe:	b083      	sub	sp, #12
 8010e00:	af00      	add	r7, sp, #0
 8010e02:	6078      	str	r0, [r7, #4]
 8010e04:	6039      	str	r1, [r7, #0]
 8010e06:	1d3b      	adds	r3, r7, #4
 8010e08:	4618      	mov	r0, r3
 8010e0a:	f7ff ffcf 	bl	8010dac <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8010e0e:	4603      	mov	r3, r0
 8010e10:	681c      	ldr	r4, [r3, #0]
 8010e12:	463b      	mov	r3, r7
 8010e14:	4618      	mov	r0, r3
 8010e16:	f7ff ffc9 	bl	8010dac <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8010e1a:	4603      	mov	r3, r0
 8010e1c:	681b      	ldr	r3, [r3, #0]
 8010e1e:	4619      	mov	r1, r3
 8010e20:	4620      	mov	r0, r4
 8010e22:	f7f5 faa1 	bl	8006368 <_ZN8gemmlowp3SubIlEET_S1_S1_>
 8010e26:	4603      	mov	r3, r0
 8010e28:	4618      	mov	r0, r3
 8010e2a:	f7ff fe2e 	bl	8010a8a <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 8010e2e:	4603      	mov	r3, r0
 8010e30:	4618      	mov	r0, r3
 8010e32:	370c      	adds	r7, #12
 8010e34:	46bd      	mov	sp, r7
 8010e36:	bd90      	pop	{r4, r7, pc}

08010e38 <_ZN8gemmlowpanIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator&, BitAnd)
 8010e38:	b590      	push	{r4, r7, lr}
 8010e3a:	b083      	sub	sp, #12
 8010e3c:	af00      	add	r7, sp, #0
 8010e3e:	6078      	str	r0, [r7, #4]
 8010e40:	6039      	str	r1, [r7, #0]
 8010e42:	1d3b      	adds	r3, r7, #4
 8010e44:	4618      	mov	r0, r3
 8010e46:	f7ff ffb1 	bl	8010dac <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8010e4a:	4603      	mov	r3, r0
 8010e4c:	681c      	ldr	r4, [r3, #0]
 8010e4e:	463b      	mov	r3, r7
 8010e50:	4618      	mov	r0, r3
 8010e52:	f7ff ffab 	bl	8010dac <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8010e56:	4603      	mov	r3, r0
 8010e58:	681b      	ldr	r3, [r3, #0]
 8010e5a:	4619      	mov	r1, r3
 8010e5c:	4620      	mov	r0, r4
 8010e5e:	f7f4 fedc 	bl	8005c1a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8010e62:	4603      	mov	r3, r0
 8010e64:	4618      	mov	r0, r3
 8010e66:	f7ff fe10 	bl	8010a8a <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 8010e6a:	4603      	mov	r3, r0
 8010e6c:	4618      	mov	r0, r3
 8010e6e:	370c      	adds	r7, #12
 8010e70:	46bd      	mov	sp, r7
 8010e72:	bd90      	pop	{r4, r7, pc}

08010e74 <_ZN8gemmlowp7RescaleILi0ElLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 8010e74:	b5b0      	push	{r4, r5, r7, lr}
 8010e76:	b084      	sub	sp, #16
 8010e78:	af00      	add	r7, sp, #0
 8010e7a:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 8010e7c:	1d3b      	adds	r3, r7, #4
 8010e7e:	4618      	mov	r0, r3
 8010e80:	f7ff ff94 	bl	8010dac <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8010e84:	4603      	mov	r3, r0
 8010e86:	681d      	ldr	r5, [r3, #0]
 8010e88:	f107 030c 	add.w	r3, r7, #12
 8010e8c:	4618      	mov	r0, r3
 8010e8e:	f7f5 fa33 	bl	80062f8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8010e92:	4604      	mov	r4, r0
 8010e94:	4628      	mov	r0, r5
 8010e96:	f000 f8e6 	bl	8011066 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5ElEET0_S1_>
 8010e9a:	4603      	mov	r3, r0
 8010e9c:	6023      	str	r3, [r4, #0]
  return result;
 8010e9e:	68fb      	ldr	r3, [r7, #12]
}
 8010ea0:	4618      	mov	r0, r3
 8010ea2:	3710      	adds	r7, #16
 8010ea4:	46bd      	mov	sp, r7
 8010ea6:	bdb0      	pop	{r4, r5, r7, pc}

08010ea8 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>:
FixedPoint<tRawType, 0> exp_on_interval_between_negative_one_quarter_and_0_excl(
 8010ea8:	b580      	push	{r7, lr}
 8010eaa:	b08a      	sub	sp, #40	; 0x28
 8010eac:	af00      	add	r7, sp, #0
 8010eae:	6078      	str	r0, [r7, #4]
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 1895147668, std::exp(-1.0 / 8.0));
 8010eb0:	482c      	ldr	r0, [pc, #176]	; (8010f64 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0xbc>)
 8010eb2:	f7f5 fa40 	bl	8006336 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8010eb6:	4603      	mov	r3, r0
 8010eb8:	4618      	mov	r0, r3
 8010eba:	f7f5 fa28 	bl	800630e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8010ebe:	4603      	mov	r3, r0
 8010ec0:	627b      	str	r3, [r7, #36]	; 0x24
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 715827883, 1.0 / 3.0);
 8010ec2:	4829      	ldr	r0, [pc, #164]	; (8010f68 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0xc0>)
 8010ec4:	f7f5 fa37 	bl	8006336 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8010ec8:	4603      	mov	r3, r0
 8010eca:	4618      	mov	r0, r3
 8010ecc:	f7f5 fa1f 	bl	800630e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8010ed0:	4603      	mov	r3, r0
 8010ed2:	623b      	str	r3, [r7, #32]
  F x = a + F::template ConstantPOT<-3>();
 8010ed4:	f000 f8d3 	bl	801107e <_ZN8gemmlowp10FixedPointIlLi0EE11ConstantPOTILin3EEES1_v>
 8010ed8:	4603      	mov	r3, r0
 8010eda:	4619      	mov	r1, r3
 8010edc:	6878      	ldr	r0, [r7, #4]
 8010ede:	f000 f8d7 	bl	8011090 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8010ee2:	4603      	mov	r3, r0
 8010ee4:	61fb      	str	r3, [r7, #28]
  F x2 = x * x;
 8010ee6:	69f9      	ldr	r1, [r7, #28]
 8010ee8:	69f8      	ldr	r0, [r7, #28]
 8010eea:	f000 f83f 	bl	8010f6c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8010eee:	4603      	mov	r3, r0
 8010ef0:	61bb      	str	r3, [r7, #24]
  F x3 = x2 * x;
 8010ef2:	69f9      	ldr	r1, [r7, #28]
 8010ef4:	69b8      	ldr	r0, [r7, #24]
 8010ef6:	f000 f839 	bl	8010f6c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8010efa:	4603      	mov	r3, r0
 8010efc:	617b      	str	r3, [r7, #20]
  F x4 = x2 * x2;
 8010efe:	69b9      	ldr	r1, [r7, #24]
 8010f00:	69b8      	ldr	r0, [r7, #24]
 8010f02:	f000 f833 	bl	8010f6c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8010f06:	4603      	mov	r3, r0
 8010f08:	613b      	str	r3, [r7, #16]
  F x4_over_4 = SaturatingRoundingMultiplyByPOT<-2>(x4);
 8010f0a:	6938      	ldr	r0, [r7, #16]
 8010f0c:	f000 f8de 	bl	80110cc <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>
 8010f10:	4603      	mov	r3, r0
 8010f12:	60fb      	str	r3, [r7, #12]
      SaturatingRoundingMultiplyByPOT<-1>(
 8010f14:	6979      	ldr	r1, [r7, #20]
 8010f16:	68f8      	ldr	r0, [r7, #12]
 8010f18:	f000 f8ba 	bl	8011090 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8010f1c:	4603      	mov	r3, r0
 8010f1e:	6a39      	ldr	r1, [r7, #32]
 8010f20:	4618      	mov	r0, r3
 8010f22:	f000 f823 	bl	8010f6c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8010f26:	4603      	mov	r3, r0
 8010f28:	69b9      	ldr	r1, [r7, #24]
 8010f2a:	4618      	mov	r0, r3
 8010f2c:	f000 f8b0 	bl	8011090 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8010f30:	4603      	mov	r3, r0
 8010f32:	4618      	mov	r0, r3
 8010f34:	f000 f8e0 	bl	80110f8 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>
 8010f38:	4603      	mov	r3, r0
 8010f3a:	60bb      	str	r3, [r7, #8]
  return AddSaturatingIf16Bit(
 8010f3c:	68b9      	ldr	r1, [r7, #8]
 8010f3e:	69f8      	ldr	r0, [r7, #28]
 8010f40:	f000 f8a6 	bl	8011090 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8010f44:	4603      	mov	r3, r0
 8010f46:	4619      	mov	r1, r3
 8010f48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010f4a:	f000 f80f 	bl	8010f6c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8010f4e:	4603      	mov	r3, r0
 8010f50:	4619      	mov	r1, r3
 8010f52:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010f54:	f000 f8e6 	bl	8011124 <_ZN8gemmlowp20AddSaturatingIf16BitIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8010f58:	4603      	mov	r3, r0
}
 8010f5a:	4618      	mov	r0, r3
 8010f5c:	3728      	adds	r7, #40	; 0x28
 8010f5e:	46bd      	mov	sp, r7
 8010f60:	bd80      	pop	{r7, pc}
 8010f62:	bf00      	nop
 8010f64:	70f5a894 	.word	0x70f5a894
 8010f68:	2aaaaaab 	.word	0x2aaaaaab

08010f6c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 8010f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f6e:	b085      	sub	sp, #20
 8010f70:	af00      	add	r7, sp, #0
 8010f72:	6078      	str	r0, [r7, #4]
 8010f74:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 8010f76:	1d3b      	adds	r3, r7, #4
 8010f78:	4618      	mov	r0, r3
 8010f7a:	f7f5 f9bd 	bl	80062f8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8010f7e:	4603      	mov	r3, r0
 8010f80:	681d      	ldr	r5, [r3, #0]
 8010f82:	463b      	mov	r3, r7
 8010f84:	4618      	mov	r0, r3
 8010f86:	f7f5 f9b7 	bl	80062f8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8010f8a:	4603      	mov	r3, r0
 8010f8c:	681e      	ldr	r6, [r3, #0]
 8010f8e:	f107 030c 	add.w	r3, r7, #12
 8010f92:	4618      	mov	r0, r3
 8010f94:	f7f5 f9b0 	bl	80062f8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8010f98:	4604      	mov	r4, r0
 8010f9a:	4631      	mov	r1, r6
 8010f9c:	4628      	mov	r0, r5
 8010f9e:	f7f4 fc87 	bl	80058b0 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 8010fa2:	4603      	mov	r3, r0
 8010fa4:	6023      	str	r3, [r4, #0]
  return c;
 8010fa6:	68fb      	ldr	r3, [r7, #12]
}
 8010fa8:	4618      	mov	r0, r3
 8010faa:	3714      	adds	r7, #20
 8010fac:	46bd      	mov	sp, r7
 8010fae:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010fb0 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>:
FixedPoint<tRawType, tIntegerBits> SelectUsingMask(
 8010fb0:	b590      	push	{r4, r7, lr}
 8010fb2:	b085      	sub	sp, #20
 8010fb4:	af00      	add	r7, sp, #0
 8010fb6:	60f8      	str	r0, [r7, #12]
 8010fb8:	60b9      	str	r1, [r7, #8]
 8010fba:	607a      	str	r2, [r7, #4]
      SelectUsingMask(if_mask, then_val.raw(), else_val.raw()));
 8010fbc:	f107 0308 	add.w	r3, r7, #8
 8010fc0:	4618      	mov	r0, r3
 8010fc2:	f7f5 f999 	bl	80062f8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8010fc6:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 8010fc8:	681c      	ldr	r4, [r3, #0]
      SelectUsingMask(if_mask, then_val.raw(), else_val.raw()));
 8010fca:	1d3b      	adds	r3, r7, #4
 8010fcc:	4618      	mov	r0, r3
 8010fce:	f7f5 f993 	bl	80062f8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8010fd2:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 8010fd4:	681b      	ldr	r3, [r3, #0]
 8010fd6:	461a      	mov	r2, r3
 8010fd8:	4621      	mov	r1, r4
 8010fda:	68f8      	ldr	r0, [r7, #12]
 8010fdc:	f7f5 fa23 	bl	8006426 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8010fe0:	4603      	mov	r3, r0
 8010fe2:	4618      	mov	r0, r3
 8010fe4:	f7fe fa19 	bl	800f41a <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8010fe8:	4603      	mov	r3, r0
}
 8010fea:	4618      	mov	r0, r3
 8010fec:	3714      	adds	r7, #20
 8010fee:	46bd      	mov	sp, r7
 8010ff0:	bd90      	pop	{r4, r7, pc}

08010ff2 <_ZN8gemmlowp10MaskIfZeroIlLi5EEET_NS_10FixedPointIS1_XT0_EEE>:
MAKE_FIXEDPOINT_UNARY_FUNC_RETURNING_RAW(MaskIfZero)
 8010ff2:	b580      	push	{r7, lr}
 8010ff4:	b082      	sub	sp, #8
 8010ff6:	af00      	add	r7, sp, #0
 8010ff8:	6078      	str	r0, [r7, #4]
 8010ffa:	1d3b      	adds	r3, r7, #4
 8010ffc:	4618      	mov	r0, r3
 8010ffe:	f7ff fed5 	bl	8010dac <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8011002:	4603      	mov	r3, r0
 8011004:	681b      	ldr	r3, [r3, #0]
 8011006:	4618      	mov	r0, r3
 8011008:	f000 f8aa 	bl	8011160 <_ZN8gemmlowp10MaskIfZeroIlEET_S1_>
 801100c:	4603      	mov	r3, r0
 801100e:	4618      	mov	r0, r3
 8011010:	3708      	adds	r7, #8
 8011012:	46bd      	mov	sp, r7
 8011014:	bd80      	pop	{r7, pc}

08011016 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>:
  RawType& raw() { return i_; }
 8011016:	b480      	push	{r7}
 8011018:	b083      	sub	sp, #12
 801101a:	af00      	add	r7, sp, #0
 801101c:	6078      	str	r0, [r7, #4]
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	4618      	mov	r0, r3
 8011022:	370c      	adds	r7, #12
 8011024:	46bd      	mov	sp, r7
 8011026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801102a:	4770      	bx	lr

0801102c <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 801102c:	b580      	push	{r7, lr}
 801102e:	b082      	sub	sp, #8
 8011030:	af00      	add	r7, sp, #0
 8011032:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 8011034:	6878      	ldr	r0, [r7, #4]
 8011036:	f000 f8a5 	bl	8011184 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin12ElLin1EE4evalEl>
 801103a:	4603      	mov	r3, r0
}
 801103c:	4618      	mov	r0, r3
 801103e:	3708      	adds	r7, #8
 8011040:	46bd      	mov	sp, r7
 8011042:	bd80      	pop	{r7, pc}

08011044 <_ZN8gemmlowp10FixedPointIlLi12EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 8011044:	b580      	push	{r7, lr}
 8011046:	b084      	sub	sp, #16
 8011048:	af00      	add	r7, sp, #0
 801104a:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 801104c:	f107 030c 	add.w	r3, r7, #12
 8011050:	4618      	mov	r0, r3
 8011052:	f7ff ffe0 	bl	8011016 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8011056:	4602      	mov	r2, r0
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	6013      	str	r3, [r2, #0]
    return retval;
 801105c:	68fb      	ldr	r3, [r7, #12]
  }
 801105e:	4618      	mov	r0, r3
 8011060:	3710      	adds	r7, #16
 8011062:	46bd      	mov	sp, r7
 8011064:	bd80      	pop	{r7, pc}

08011066 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 8011066:	b580      	push	{r7, lr}
 8011068:	b082      	sub	sp, #8
 801106a:	af00      	add	r7, sp, #0
 801106c:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 801106e:	6878      	ldr	r0, [r7, #4]
 8011070:	f000 f896 	bl	80111a0 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl>
 8011074:	4603      	mov	r3, r0
}
 8011076:	4618      	mov	r0, r3
 8011078:	3708      	adds	r7, #8
 801107a:	46bd      	mov	sp, r7
 801107c:	bd80      	pop	{r7, pc}

0801107e <_ZN8gemmlowp10FixedPointIlLi0EE11ConstantPOTILin3EEES1_v>:
  static FixedPoint ConstantPOT() {
 801107e:	b580      	push	{r7, lr}
 8011080:	af00      	add	r7, sp, #0
    return FromScalarRaw(ScalarRawType(1) << kOffset);
 8011082:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8011086:	f7f5 f942 	bl	800630e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801108a:	4603      	mov	r3, r0
  }
 801108c:	4618      	mov	r0, r3
 801108e:	bd80      	pop	{r7, pc}

08011090 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 8011090:	b590      	push	{r4, r7, lr}
 8011092:	b083      	sub	sp, #12
 8011094:	af00      	add	r7, sp, #0
 8011096:	6078      	str	r0, [r7, #4]
 8011098:	6039      	str	r1, [r7, #0]
 801109a:	1d3b      	adds	r3, r7, #4
 801109c:	4618      	mov	r0, r3
 801109e:	f7f5 f92b 	bl	80062f8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80110a2:	4603      	mov	r3, r0
 80110a4:	681c      	ldr	r4, [r3, #0]
 80110a6:	463b      	mov	r3, r7
 80110a8:	4618      	mov	r0, r3
 80110aa:	f7f5 f925 	bl	80062f8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80110ae:	4603      	mov	r3, r0
 80110b0:	681b      	ldr	r3, [r3, #0]
 80110b2:	4619      	mov	r1, r3
 80110b4:	4620      	mov	r0, r4
 80110b6:	f7f4 fde1 	bl	8005c7c <_ZN8gemmlowp3AddIlEET_S1_S1_>
 80110ba:	4603      	mov	r3, r0
 80110bc:	4618      	mov	r0, r3
 80110be:	f7fe f9ac 	bl	800f41a <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 80110c2:	4603      	mov	r3, r0
 80110c4:	4618      	mov	r0, r3
 80110c6:	370c      	adds	r7, #12
 80110c8:	46bd      	mov	sp, r7
 80110ca:	bd90      	pop	{r4, r7, pc}

080110cc <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
 80110cc:	b580      	push	{r7, lr}
 80110ce:	b082      	sub	sp, #8
 80110d0:	af00      	add	r7, sp, #0
 80110d2:	6078      	str	r0, [r7, #4]
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 80110d4:	1d3b      	adds	r3, r7, #4
 80110d6:	4618      	mov	r0, r3
 80110d8:	f7f5 f90e 	bl	80062f8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80110dc:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 80110de:	681b      	ldr	r3, [r3, #0]
 80110e0:	4618      	mov	r0, r3
 80110e2:	f000 f89f 	bl	8011224 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElEET0_S1_>
 80110e6:	4603      	mov	r3, r0
 80110e8:	4618      	mov	r0, r3
 80110ea:	f7fe f996 	bl	800f41a <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 80110ee:	4603      	mov	r3, r0
}
 80110f0:	4618      	mov	r0, r3
 80110f2:	3708      	adds	r7, #8
 80110f4:	46bd      	mov	sp, r7
 80110f6:	bd80      	pop	{r7, pc}

080110f8 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
 80110f8:	b580      	push	{r7, lr}
 80110fa:	b082      	sub	sp, #8
 80110fc:	af00      	add	r7, sp, #0
 80110fe:	6078      	str	r0, [r7, #4]
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 8011100:	1d3b      	adds	r3, r7, #4
 8011102:	4618      	mov	r0, r3
 8011104:	f7f5 f8f8 	bl	80062f8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8011108:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 801110a:	681b      	ldr	r3, [r3, #0]
 801110c:	4618      	mov	r0, r3
 801110e:	f7f5 f91f 	bl	8006350 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElEET0_S1_>
 8011112:	4603      	mov	r3, r0
 8011114:	4618      	mov	r0, r3
 8011116:	f7fe f980 	bl	800f41a <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 801111a:	4603      	mov	r3, r0
}
 801111c:	4618      	mov	r0, r3
 801111e:	3708      	adds	r7, #8
 8011120:	46bd      	mov	sp, r7
 8011122:	bd80      	pop	{r7, pc}

08011124 <_ZN8gemmlowp20AddSaturatingIf16BitIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
FixedPoint<tRawType, tIntegerBits> AddSaturatingIf16Bit(
 8011124:	b590      	push	{r4, r7, lr}
 8011126:	b083      	sub	sp, #12
 8011128:	af00      	add	r7, sp, #0
 801112a:	6078      	str	r0, [r7, #4]
 801112c:	6039      	str	r1, [r7, #0]
      AddSaturatingIf16Bit(a.raw(), b.raw()));
 801112e:	1d3b      	adds	r3, r7, #4
 8011130:	4618      	mov	r0, r3
 8011132:	f7f5 f8e1 	bl	80062f8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8011136:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 8011138:	681c      	ldr	r4, [r3, #0]
      AddSaturatingIf16Bit(a.raw(), b.raw()));
 801113a:	463b      	mov	r3, r7
 801113c:	4618      	mov	r0, r3
 801113e:	f7f5 f8db 	bl	80062f8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8011142:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 8011144:	681b      	ldr	r3, [r3, #0]
 8011146:	4619      	mov	r1, r3
 8011148:	4620      	mov	r0, r4
 801114a:	f000 f877 	bl	801123c <_ZN8gemmlowp20AddSaturatingIf16BitIlEET_S1_S1_>
 801114e:	4603      	mov	r3, r0
 8011150:	4618      	mov	r0, r3
 8011152:	f7fe f962 	bl	800f41a <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8011156:	4603      	mov	r3, r0
}
 8011158:	4618      	mov	r0, r3
 801115a:	370c      	adds	r7, #12
 801115c:	46bd      	mov	sp, r7
 801115e:	bd90      	pop	{r4, r7, pc}

08011160 <_ZN8gemmlowp10MaskIfZeroIlEET_S1_>:
tIntegerType MaskIfZero(tIntegerType a) {
 8011160:	b580      	push	{r7, lr}
 8011162:	b082      	sub	sp, #8
 8011164:	af00      	add	r7, sp, #0
 8011166:	6078      	str	r0, [r7, #4]
  return MaskIfNonZero<tIntegerType>(!a);
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	2b00      	cmp	r3, #0
 801116c:	bf0c      	ite	eq
 801116e:	2301      	moveq	r3, #1
 8011170:	2300      	movne	r3, #0
 8011172:	b2db      	uxtb	r3, r3
 8011174:	4618      	mov	r0, r3
 8011176:	f7f4 fda3 	bl	8005cc0 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801117a:	4603      	mov	r3, r0
}
 801117c:	4618      	mov	r0, r3
 801117e:	3708      	adds	r7, #8
 8011180:	46bd      	mov	sp, r7
 8011182:	bd80      	pop	{r7, pc}

08011184 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin12ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 8011184:	b580      	push	{r7, lr}
 8011186:	b082      	sub	sp, #8
 8011188:	af00      	add	r7, sp, #0
 801118a:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 801118c:	210c      	movs	r1, #12
 801118e:	6878      	ldr	r0, [r7, #4]
 8011190:	f7f4 fcc4 	bl	8005b1c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8011194:	4603      	mov	r3, r0
  }
 8011196:	4618      	mov	r0, r3
 8011198:	3708      	adds	r7, #8
 801119a:	46bd      	mov	sp, r7
 801119c:	bd80      	pop	{r7, pc}
	...

080111a0 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 80111a0:	b580      	push	{r7, lr}
 80111a2:	b08a      	sub	sp, #40	; 0x28
 80111a4:	af00      	add	r7, sp, #0
 80111a6:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 80111a8:	f7f4 fb6f 	bl	800588a <_ZNSt14numeric_limitsIlE3minEv>
 80111ac:	4603      	mov	r3, r0
 80111ae:	4618      	mov	r0, r3
 80111b0:	f7f4 fd28 	bl	8005c04 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80111b4:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 80111b6:	f7f4 fb71 	bl	800589c <_ZNSt14numeric_limitsIlE3maxEv>
 80111ba:	4603      	mov	r3, r0
 80111bc:	4618      	mov	r0, r3
 80111be:	f7f4 fd21 	bl	8005c04 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80111c2:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 80111c4:	2320      	movs	r3, #32
 80111c6:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 80111c8:	f06f 437c 	mvn.w	r3, #4227858432	; 0xfc000000
 80111cc:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 80111ce:	f06f 407c 	mvn.w	r0, #4227858432	; 0xfc000000
 80111d2:	f7f4 fd17 	bl	8005c04 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80111d6:	4603      	mov	r3, r0
 80111d8:	4619      	mov	r1, r3
 80111da:	6878      	ldr	r0, [r7, #4]
 80111dc:	f7f4 fd5c 	bl	8005c98 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 80111e0:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 80111e2:	480f      	ldr	r0, [pc, #60]	; (8011220 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl+0x80>)
 80111e4:	f7f4 fd0e 	bl	8005c04 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80111e8:	4603      	mov	r3, r0
 80111ea:	4619      	mov	r1, r3
 80111ec:	6878      	ldr	r0, [r7, #4]
 80111ee:	f7f4 fd31 	bl	8005c54 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 80111f2:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 80111f4:	2105      	movs	r1, #5
 80111f6:	6878      	ldr	r0, [r7, #4]
 80111f8:	f7f5 f8d1 	bl	800639e <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 80111fc:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 80111fe:	68fa      	ldr	r2, [r7, #12]
 8011200:	6a39      	ldr	r1, [r7, #32]
 8011202:	6978      	ldr	r0, [r7, #20]
 8011204:	f7f5 f90f 	bl	8006426 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8011208:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 801120a:	68fa      	ldr	r2, [r7, #12]
 801120c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801120e:	6938      	ldr	r0, [r7, #16]
 8011210:	f7f5 f909 	bl	8006426 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8011214:	60f8      	str	r0, [r7, #12]
    return result;
 8011216:	68fb      	ldr	r3, [r7, #12]
  }
 8011218:	4618      	mov	r0, r3
 801121a:	3728      	adds	r7, #40	; 0x28
 801121c:	46bd      	mov	sp, r7
 801121e:	bd80      	pop	{r7, pc}
 8011220:	fc000001 	.word	0xfc000001

08011224 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 8011224:	b580      	push	{r7, lr}
 8011226:	b082      	sub	sp, #8
 8011228:	af00      	add	r7, sp, #0
 801122a:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 801122c:	6878      	ldr	r0, [r7, #4]
 801122e:	f000 f813 	bl	8011258 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin2ElLin1EE4evalEl>
 8011232:	4603      	mov	r3, r0
}
 8011234:	4618      	mov	r0, r3
 8011236:	3708      	adds	r7, #8
 8011238:	46bd      	mov	sp, r7
 801123a:	bd80      	pop	{r7, pc}

0801123c <_ZN8gemmlowp20AddSaturatingIf16BitIlEET_S1_S1_>:
IntegerType AddSaturatingIf16Bit(IntegerType a, IntegerType b) {
 801123c:	b580      	push	{r7, lr}
 801123e:	b082      	sub	sp, #8
 8011240:	af00      	add	r7, sp, #0
 8011242:	6078      	str	r0, [r7, #4]
 8011244:	6039      	str	r1, [r7, #0]
  return AddSaturatingIf16BitImpl<IntegerType, sizeof(ScalarType) == 2>::Run(a,
 8011246:	6839      	ldr	r1, [r7, #0]
 8011248:	6878      	ldr	r0, [r7, #4]
 801124a:	f000 f812 	bl	8011272 <_ZN8gemmlowp24AddSaturatingIf16BitImplIlLb0EE3RunEll>
 801124e:	4603      	mov	r3, r0
}
 8011250:	4618      	mov	r0, r3
 8011252:	3708      	adds	r7, #8
 8011254:	46bd      	mov	sp, r7
 8011256:	bd80      	pop	{r7, pc}

08011258 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin2ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 8011258:	b580      	push	{r7, lr}
 801125a:	b082      	sub	sp, #8
 801125c:	af00      	add	r7, sp, #0
 801125e:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 8011260:	2102      	movs	r1, #2
 8011262:	6878      	ldr	r0, [r7, #4]
 8011264:	f7f4 fc5a 	bl	8005b1c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8011268:	4603      	mov	r3, r0
  }
 801126a:	4618      	mov	r0, r3
 801126c:	3708      	adds	r7, #8
 801126e:	46bd      	mov	sp, r7
 8011270:	bd80      	pop	{r7, pc}

08011272 <_ZN8gemmlowp24AddSaturatingIf16BitImplIlLb0EE3RunEll>:
  static IntegerType Run(IntegerType a, IntegerType b) { return Add(a, b); }
 8011272:	b580      	push	{r7, lr}
 8011274:	b082      	sub	sp, #8
 8011276:	af00      	add	r7, sp, #0
 8011278:	6078      	str	r0, [r7, #4]
 801127a:	6039      	str	r1, [r7, #0]
 801127c:	6839      	ldr	r1, [r7, #0]
 801127e:	6878      	ldr	r0, [r7, #4]
 8011280:	f7f4 fcfc 	bl	8005c7c <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8011284:	4603      	mov	r3, r0
 8011286:	4618      	mov	r0, r3
 8011288:	3708      	adds	r7, #8
 801128a:	46bd      	mov	sp, r7
 801128c:	bd80      	pop	{r7, pc}

0801128e <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa>:
namespace reference_integer_ops {

inline bool AveragePool(const PoolParams& params,
                        const RuntimeShape& input_shape,
                        const int8_t* input_data,
                        const RuntimeShape& output_shape, int8_t* output_data) {
 801128e:	b590      	push	{r4, r7, lr}
 8011290:	b0a5      	sub	sp, #148	; 0x94
 8011292:	af02      	add	r7, sp, #8
 8011294:	60f8      	str	r0, [r7, #12]
 8011296:	60b9      	str	r1, [r7, #8]
 8011298:	607a      	str	r2, [r7, #4]
 801129a:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_LE(params.quantized_activation_min,
 801129c:	68fb      	ldr	r3, [r7, #12]
 801129e:	69da      	ldr	r2, [r3, #28]
 80112a0:	68fb      	ldr	r3, [r7, #12]
 80112a2:	6a1b      	ldr	r3, [r3, #32]
 80112a4:	429a      	cmp	r2, r3
 80112a6:	dd01      	ble.n	80112ac <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x1e>
 80112a8:	f00e fbda 	bl	801fa60 <abort>
                   params.quantized_activation_max);
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 80112ac:	68b8      	ldr	r0, [r7, #8]
 80112ae:	f7f1 fab7 	bl	8002820 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80112b2:	4603      	mov	r3, r0
 80112b4:	2b04      	cmp	r3, #4
 80112b6:	d001      	beq.n	80112bc <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x2e>
 80112b8:	f00e fbd2 	bl	801fa60 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 80112bc:	6838      	ldr	r0, [r7, #0]
 80112be:	f7f1 faaf 	bl	8002820 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80112c2:	4603      	mov	r3, r0
 80112c4:	2b04      	cmp	r3, #4
 80112c6:	d001      	beq.n	80112cc <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x3e>
 80112c8:	f00e fbca 	bl	801fa60 <abort>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 80112cc:	2300      	movs	r3, #0
 80112ce:	683a      	ldr	r2, [r7, #0]
 80112d0:	2100      	movs	r1, #0
 80112d2:	68b8      	ldr	r0, [r7, #8]
 80112d4:	f7fa fd26 	bl	800bd24 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80112d8:	66b8      	str	r0, [r7, #104]	; 0x68
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 80112da:	2303      	movs	r3, #3
 80112dc:	683a      	ldr	r2, [r7, #0]
 80112de:	2103      	movs	r1, #3
 80112e0:	68b8      	ldr	r0, [r7, #8]
 80112e2:	f7fa fd1f 	bl	800bd24 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80112e6:	6678      	str	r0, [r7, #100]	; 0x64
  const int input_height = input_shape.Dims(1);
 80112e8:	2101      	movs	r1, #1
 80112ea:	68b8      	ldr	r0, [r7, #8]
 80112ec:	f7f1 faa4 	bl	8002838 <_ZNK6tflite12RuntimeShape4DimsEi>
 80112f0:	6638      	str	r0, [r7, #96]	; 0x60
  const int input_width = input_shape.Dims(2);
 80112f2:	2102      	movs	r1, #2
 80112f4:	68b8      	ldr	r0, [r7, #8]
 80112f6:	f7f1 fa9f 	bl	8002838 <_ZNK6tflite12RuntimeShape4DimsEi>
 80112fa:	65f8      	str	r0, [r7, #92]	; 0x5c
  const int output_height = output_shape.Dims(1);
 80112fc:	2101      	movs	r1, #1
 80112fe:	6838      	ldr	r0, [r7, #0]
 8011300:	f7f1 fa9a 	bl	8002838 <_ZNK6tflite12RuntimeShape4DimsEi>
 8011304:	65b8      	str	r0, [r7, #88]	; 0x58
  const int output_width = output_shape.Dims(2);
 8011306:	2102      	movs	r1, #2
 8011308:	6838      	ldr	r0, [r7, #0]
 801130a:	f7f1 fa95 	bl	8002838 <_ZNK6tflite12RuntimeShape4DimsEi>
 801130e:	6578      	str	r0, [r7, #84]	; 0x54
  const int stride_height = params.stride_height;
 8011310:	68fb      	ldr	r3, [r7, #12]
 8011312:	68db      	ldr	r3, [r3, #12]
 8011314:	653b      	str	r3, [r7, #80]	; 0x50
  const int stride_width = params.stride_width;
 8011316:	68fb      	ldr	r3, [r7, #12]
 8011318:	691b      	ldr	r3, [r3, #16]
 801131a:	64fb      	str	r3, [r7, #76]	; 0x4c
  for (int batch = 0; batch < batches; ++batch) {
 801131c:	2300      	movs	r3, #0
 801131e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011322:	e0fb      	b.n	801151c <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x28e>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8011324:	2300      	movs	r3, #0
 8011326:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801132a:	e0ec      	b.n	8011506 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x278>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 801132c:	2300      	movs	r3, #0
 801132e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8011330:	e0df      	b.n	80114f2 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x264>
        for (int channel = 0; channel < depth; ++channel) {
 8011332:	2300      	movs	r3, #0
 8011334:	67bb      	str	r3, [r7, #120]	; 0x78
 8011336:	e0d4      	b.n	80114e2 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x254>
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
 8011338:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801133a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801133c:	fb02 f303 	mul.w	r3, r2, r3
 8011340:	68fa      	ldr	r2, [r7, #12]
 8011342:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
          const int in_x_origin =
 8011346:	1a9b      	subs	r3, r3, r2
 8011348:	64bb      	str	r3, [r7, #72]	; 0x48
          const int in_y_origin =
              (out_y * stride_height) - params.padding_values.height;
 801134a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801134e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011350:	fb02 f303 	mul.w	r3, r2, r3
 8011354:	68fa      	ldr	r2, [r7, #12]
 8011356:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
          const int in_y_origin =
 801135a:	1a9b      	subs	r3, r3, r2
 801135c:	647b      	str	r3, [r7, #68]	; 0x44
          // Compute the boundaries of the filter region clamped so as to
          // ensure that the filter window fits in the input array.
          const int filter_x_start = std::max(0, -in_x_origin);
 801135e:	2300      	movs	r3, #0
 8011360:	617b      	str	r3, [r7, #20]
 8011362:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011364:	425b      	negs	r3, r3
 8011366:	61bb      	str	r3, [r7, #24]
 8011368:	f107 0218 	add.w	r2, r7, #24
 801136c:	f107 0314 	add.w	r3, r7, #20
 8011370:	4611      	mov	r1, r2
 8011372:	4618      	mov	r0, r3
 8011374:	f7f5 ff77 	bl	8007266 <_ZSt3maxIiERKT_S2_S2_>
 8011378:	4603      	mov	r3, r0
 801137a:	681b      	ldr	r3, [r3, #0]
 801137c:	643b      	str	r3, [r7, #64]	; 0x40
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
 801137e:	68fb      	ldr	r3, [r7, #12]
 8011380:	f103 0018 	add.w	r0, r3, #24
 8011384:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011386:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011388:	1ad3      	subs	r3, r2, r3
 801138a:	61fb      	str	r3, [r7, #28]
 801138c:	f107 031c 	add.w	r3, r7, #28
 8011390:	4619      	mov	r1, r3
 8011392:	f7fd ffa1 	bl	800f2d8 <_ZSt3minIiERKT_S2_S2_>
 8011396:	4603      	mov	r3, r0
 8011398:	681b      	ldr	r3, [r3, #0]
 801139a:	63fb      	str	r3, [r7, #60]	; 0x3c
          const int filter_y_start = std::max(0, -in_y_origin);
 801139c:	2300      	movs	r3, #0
 801139e:	623b      	str	r3, [r7, #32]
 80113a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80113a2:	425b      	negs	r3, r3
 80113a4:	627b      	str	r3, [r7, #36]	; 0x24
 80113a6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80113aa:	f107 0320 	add.w	r3, r7, #32
 80113ae:	4611      	mov	r1, r2
 80113b0:	4618      	mov	r0, r3
 80113b2:	f7f5 ff58 	bl	8007266 <_ZSt3maxIiERKT_S2_S2_>
 80113b6:	4603      	mov	r3, r0
 80113b8:	681b      	ldr	r3, [r3, #0]
 80113ba:	63bb      	str	r3, [r7, #56]	; 0x38
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
 80113bc:	68fb      	ldr	r3, [r7, #12]
 80113be:	f103 0014 	add.w	r0, r3, #20
 80113c2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80113c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80113c6:	1ad3      	subs	r3, r2, r3
 80113c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80113ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80113ce:	4619      	mov	r1, r3
 80113d0:	f7fd ff82 	bl	800f2d8 <_ZSt3minIiERKT_S2_S2_>
 80113d4:	4603      	mov	r3, r0
 80113d6:	681b      	ldr	r3, [r3, #0]
 80113d8:	637b      	str	r3, [r7, #52]	; 0x34
          int32_t acc = 0;
 80113da:	2300      	movs	r3, #0
 80113dc:	613b      	str	r3, [r7, #16]
          int filter_count = 0;
 80113de:	2300      	movs	r3, #0
 80113e0:	677b      	str	r3, [r7, #116]	; 0x74
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 80113e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113e4:	673b      	str	r3, [r7, #112]	; 0x70
 80113e6:	e02a      	b.n	801143e <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x1b0>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 80113e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80113ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 80113ec:	e020      	b.n	8011430 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x1a2>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
 80113ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80113f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80113f2:	4413      	add	r3, r2
 80113f4:	633b      	str	r3, [r7, #48]	; 0x30
              const int in_y = in_y_origin + filter_y;
 80113f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80113f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80113fa:	4413      	add	r3, r2
 80113fc:	62fb      	str	r3, [r7, #44]	; 0x2c
              acc +=
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
 80113fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011400:	9300      	str	r3, [sp, #0]
 8011402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011404:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011406:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 801140a:	68b8      	ldr	r0, [r7, #8]
 801140c:	f7fa fc02 	bl	800bc14 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8011410:	4603      	mov	r3, r0
 8011412:	461a      	mov	r2, r3
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	4413      	add	r3, r2
 8011418:	f993 3000 	ldrsb.w	r3, [r3]
              acc +=
 801141c:	461a      	mov	r2, r3
 801141e:	693b      	ldr	r3, [r7, #16]
 8011420:	4413      	add	r3, r2
 8011422:	613b      	str	r3, [r7, #16]
              filter_count++;
 8011424:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011426:	3301      	adds	r3, #1
 8011428:	677b      	str	r3, [r7, #116]	; 0x74
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 801142a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801142c:	3301      	adds	r3, #1
 801142e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8011430:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8011432:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011434:	429a      	cmp	r2, r3
 8011436:	dbda      	blt.n	80113ee <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x160>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 8011438:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801143a:	3301      	adds	r3, #1
 801143c:	673b      	str	r3, [r7, #112]	; 0x70
 801143e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011442:	429a      	cmp	r2, r3
 8011444:	dbd0      	blt.n	80113e8 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x15a>
            }
          }
          if (filter_count == 0) return false;
 8011446:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011448:	2b00      	cmp	r3, #0
 801144a:	d101      	bne.n	8011450 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x1c2>
 801144c:	2300      	movs	r3, #0
 801144e:	e06c      	b.n	801152a <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x29c>
          // Round to the closest integer value.
          acc = acc > 0 ? (acc + filter_count / 2) / filter_count
 8011450:	693b      	ldr	r3, [r7, #16]
 8011452:	2b00      	cmp	r3, #0
 8011454:	dd0b      	ble.n	801146e <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x1e0>
 8011456:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011458:	2b00      	cmp	r3, #0
 801145a:	da00      	bge.n	801145e <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x1d0>
 801145c:	3301      	adds	r3, #1
 801145e:	105b      	asrs	r3, r3, #1
 8011460:	461a      	mov	r2, r3
 8011462:	693b      	ldr	r3, [r7, #16]
 8011464:	441a      	add	r2, r3
 8011466:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011468:	fb92 f3f3 	sdiv	r3, r2, r3
 801146c:	e00b      	b.n	8011486 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x1f8>
                        : (acc - filter_count / 2) / filter_count;
 801146e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011470:	2b00      	cmp	r3, #0
 8011472:	da00      	bge.n	8011476 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x1e8>
 8011474:	3301      	adds	r3, #1
 8011476:	105b      	asrs	r3, r3, #1
 8011478:	425b      	negs	r3, r3
 801147a:	461a      	mov	r2, r3
 801147c:	693b      	ldr	r3, [r7, #16]
 801147e:	441a      	add	r2, r3
          acc = acc > 0 ? (acc + filter_count / 2) / filter_count
 8011480:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011482:	fb92 f3f3 	sdiv	r3, r2, r3
 8011486:	613b      	str	r3, [r7, #16]
          acc = std::max(acc, params.quantized_activation_min);
 8011488:	68fb      	ldr	r3, [r7, #12]
 801148a:	f103 021c 	add.w	r2, r3, #28
 801148e:	f107 0310 	add.w	r3, r7, #16
 8011492:	4611      	mov	r1, r2
 8011494:	4618      	mov	r0, r3
 8011496:	f7f4 ff08 	bl	80062aa <_ZSt3maxIlERKT_S2_S2_>
 801149a:	4603      	mov	r3, r0
 801149c:	681b      	ldr	r3, [r3, #0]
 801149e:	613b      	str	r3, [r7, #16]
          acc = std::min(acc, params.quantized_activation_max);
 80114a0:	68fb      	ldr	r3, [r7, #12]
 80114a2:	f103 0220 	add.w	r2, r3, #32
 80114a6:	f107 0310 	add.w	r3, r7, #16
 80114aa:	4611      	mov	r1, r2
 80114ac:	4618      	mov	r0, r3
 80114ae:	f7f4 fee8 	bl	8006282 <_ZSt3minIlERKT_S2_S2_>
 80114b2:	4603      	mov	r3, r0
 80114b4:	681b      	ldr	r3, [r3, #0]
 80114b6:	613b      	str	r3, [r7, #16]
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 80114b8:	693c      	ldr	r4, [r7, #16]
 80114ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80114bc:	9300      	str	r3, [sp, #0]
 80114be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80114c0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80114c4:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80114c8:	6838      	ldr	r0, [r7, #0]
 80114ca:	f7fa fba3 	bl	800bc14 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 80114ce:	4603      	mov	r3, r0
 80114d0:	461a      	mov	r2, r3
 80114d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80114d6:	4413      	add	r3, r2
 80114d8:	b262      	sxtb	r2, r4
 80114da:	701a      	strb	r2, [r3, #0]
        for (int channel = 0; channel < depth; ++channel) {
 80114dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80114de:	3301      	adds	r3, #1
 80114e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80114e2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80114e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80114e6:	429a      	cmp	r2, r3
 80114e8:	f6ff af26 	blt.w	8011338 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0xaa>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 80114ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80114ee:	3301      	adds	r3, #1
 80114f0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80114f2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80114f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80114f6:	429a      	cmp	r2, r3
 80114f8:	f6ff af1b 	blt.w	8011332 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0xa4>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 80114fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011500:	3301      	adds	r3, #1
 8011502:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011506:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801150a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801150c:	429a      	cmp	r2, r3
 801150e:	f6ff af0d 	blt.w	801132c <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x9e>
  for (int batch = 0; batch < batches; ++batch) {
 8011512:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011516:	3301      	adds	r3, #1
 8011518:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801151c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8011520:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011522:	429a      	cmp	r2, r3
 8011524:	f6ff aefe 	blt.w	8011324 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x96>
              static_cast<int8_t>(acc);
        }
      }
    }
  }
  return true;
 8011528:	2301      	movs	r3, #1
}
 801152a:	4618      	mov	r0, r3
 801152c:	378c      	adds	r7, #140	; 0x8c
 801152e:	46bd      	mov	sp, r7
 8011530:	bd90      	pop	{r4, r7, pc}

08011532 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKsS6_Ps>:

inline bool AveragePool(const PoolParams& params,
                        const RuntimeShape& input_shape,
                        const int16_t* input_data,
                        const RuntimeShape& output_shape,
                        int16_t* output_data) {
 8011532:	b590      	push	{r4, r7, lr}
 8011534:	b0a5      	sub	sp, #148	; 0x94
 8011536:	af02      	add	r7, sp, #8
 8011538:	60f8      	str	r0, [r7, #12]
 801153a:	60b9      	str	r1, [r7, #8]
 801153c:	607a      	str	r2, [r7, #4]
 801153e:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_LE(params.quantized_activation_min,
 8011540:	68fb      	ldr	r3, [r7, #12]
 8011542:	69da      	ldr	r2, [r3, #28]
 8011544:	68fb      	ldr	r3, [r7, #12]
 8011546:	6a1b      	ldr	r3, [r3, #32]
 8011548:	429a      	cmp	r2, r3
 801154a:	dd01      	ble.n	8011550 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x1e>
 801154c:	f00e fa88 	bl	801fa60 <abort>
                   params.quantized_activation_max);
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 8011550:	68b8      	ldr	r0, [r7, #8]
 8011552:	f7f1 f965 	bl	8002820 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8011556:	4603      	mov	r3, r0
 8011558:	2b04      	cmp	r3, #4
 801155a:	d001      	beq.n	8011560 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x2e>
 801155c:	f00e fa80 	bl	801fa60 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 8011560:	6838      	ldr	r0, [r7, #0]
 8011562:	f7f1 f95d 	bl	8002820 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8011566:	4603      	mov	r3, r0
 8011568:	2b04      	cmp	r3, #4
 801156a:	d001      	beq.n	8011570 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x3e>
 801156c:	f00e fa78 	bl	801fa60 <abort>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 8011570:	2300      	movs	r3, #0
 8011572:	683a      	ldr	r2, [r7, #0]
 8011574:	2100      	movs	r1, #0
 8011576:	68b8      	ldr	r0, [r7, #8]
 8011578:	f7fa fbd4 	bl	800bd24 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801157c:	66b8      	str	r0, [r7, #104]	; 0x68
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 801157e:	2303      	movs	r3, #3
 8011580:	683a      	ldr	r2, [r7, #0]
 8011582:	2103      	movs	r1, #3
 8011584:	68b8      	ldr	r0, [r7, #8]
 8011586:	f7fa fbcd 	bl	800bd24 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801158a:	6678      	str	r0, [r7, #100]	; 0x64
  const int input_height = input_shape.Dims(1);
 801158c:	2101      	movs	r1, #1
 801158e:	68b8      	ldr	r0, [r7, #8]
 8011590:	f7f1 f952 	bl	8002838 <_ZNK6tflite12RuntimeShape4DimsEi>
 8011594:	6638      	str	r0, [r7, #96]	; 0x60
  const int input_width = input_shape.Dims(2);
 8011596:	2102      	movs	r1, #2
 8011598:	68b8      	ldr	r0, [r7, #8]
 801159a:	f7f1 f94d 	bl	8002838 <_ZNK6tflite12RuntimeShape4DimsEi>
 801159e:	65f8      	str	r0, [r7, #92]	; 0x5c
  const int output_height = output_shape.Dims(1);
 80115a0:	2101      	movs	r1, #1
 80115a2:	6838      	ldr	r0, [r7, #0]
 80115a4:	f7f1 f948 	bl	8002838 <_ZNK6tflite12RuntimeShape4DimsEi>
 80115a8:	65b8      	str	r0, [r7, #88]	; 0x58
  const int output_width = output_shape.Dims(2);
 80115aa:	2102      	movs	r1, #2
 80115ac:	6838      	ldr	r0, [r7, #0]
 80115ae:	f7f1 f943 	bl	8002838 <_ZNK6tflite12RuntimeShape4DimsEi>
 80115b2:	6578      	str	r0, [r7, #84]	; 0x54
  const int stride_height = params.stride_height;
 80115b4:	68fb      	ldr	r3, [r7, #12]
 80115b6:	68db      	ldr	r3, [r3, #12]
 80115b8:	653b      	str	r3, [r7, #80]	; 0x50
  const int stride_width = params.stride_width;
 80115ba:	68fb      	ldr	r3, [r7, #12]
 80115bc:	691b      	ldr	r3, [r3, #16]
 80115be:	64fb      	str	r3, [r7, #76]	; 0x4c
  for (int batch = 0; batch < batches; ++batch) {
 80115c0:	2300      	movs	r3, #0
 80115c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80115c6:	e0fb      	b.n	80117c0 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x28e>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 80115c8:	2300      	movs	r3, #0
 80115ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80115ce:	e0ec      	b.n	80117aa <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x278>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 80115d0:	2300      	movs	r3, #0
 80115d2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80115d4:	e0df      	b.n	8011796 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x264>
        for (int channel = 0; channel < depth; ++channel) {
 80115d6:	2300      	movs	r3, #0
 80115d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80115da:	e0d4      	b.n	8011786 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x254>
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
 80115dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80115de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80115e0:	fb02 f303 	mul.w	r3, r2, r3
 80115e4:	68fa      	ldr	r2, [r7, #12]
 80115e6:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
          const int in_x_origin =
 80115ea:	1a9b      	subs	r3, r3, r2
 80115ec:	64bb      	str	r3, [r7, #72]	; 0x48
          const int in_y_origin =
              (out_y * stride_height) - params.padding_values.height;
 80115ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80115f2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80115f4:	fb02 f303 	mul.w	r3, r2, r3
 80115f8:	68fa      	ldr	r2, [r7, #12]
 80115fa:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
          const int in_y_origin =
 80115fe:	1a9b      	subs	r3, r3, r2
 8011600:	647b      	str	r3, [r7, #68]	; 0x44
          // Compute the boundaries of the filter region clamped so as to
          // ensure that the filter window fits in the input array.
          const int filter_x_start = std::max(0, -in_x_origin);
 8011602:	2300      	movs	r3, #0
 8011604:	617b      	str	r3, [r7, #20]
 8011606:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011608:	425b      	negs	r3, r3
 801160a:	61bb      	str	r3, [r7, #24]
 801160c:	f107 0218 	add.w	r2, r7, #24
 8011610:	f107 0314 	add.w	r3, r7, #20
 8011614:	4611      	mov	r1, r2
 8011616:	4618      	mov	r0, r3
 8011618:	f7f5 fe25 	bl	8007266 <_ZSt3maxIiERKT_S2_S2_>
 801161c:	4603      	mov	r3, r0
 801161e:	681b      	ldr	r3, [r3, #0]
 8011620:	643b      	str	r3, [r7, #64]	; 0x40
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
 8011622:	68fb      	ldr	r3, [r7, #12]
 8011624:	f103 0018 	add.w	r0, r3, #24
 8011628:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801162a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801162c:	1ad3      	subs	r3, r2, r3
 801162e:	61fb      	str	r3, [r7, #28]
 8011630:	f107 031c 	add.w	r3, r7, #28
 8011634:	4619      	mov	r1, r3
 8011636:	f7fd fe4f 	bl	800f2d8 <_ZSt3minIiERKT_S2_S2_>
 801163a:	4603      	mov	r3, r0
 801163c:	681b      	ldr	r3, [r3, #0]
 801163e:	63fb      	str	r3, [r7, #60]	; 0x3c
          const int filter_y_start = std::max(0, -in_y_origin);
 8011640:	2300      	movs	r3, #0
 8011642:	623b      	str	r3, [r7, #32]
 8011644:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011646:	425b      	negs	r3, r3
 8011648:	627b      	str	r3, [r7, #36]	; 0x24
 801164a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801164e:	f107 0320 	add.w	r3, r7, #32
 8011652:	4611      	mov	r1, r2
 8011654:	4618      	mov	r0, r3
 8011656:	f7f5 fe06 	bl	8007266 <_ZSt3maxIiERKT_S2_S2_>
 801165a:	4603      	mov	r3, r0
 801165c:	681b      	ldr	r3, [r3, #0]
 801165e:	63bb      	str	r3, [r7, #56]	; 0x38
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
 8011660:	68fb      	ldr	r3, [r7, #12]
 8011662:	f103 0014 	add.w	r0, r3, #20
 8011666:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011668:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801166a:	1ad3      	subs	r3, r2, r3
 801166c:	62bb      	str	r3, [r7, #40]	; 0x28
 801166e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011672:	4619      	mov	r1, r3
 8011674:	f7fd fe30 	bl	800f2d8 <_ZSt3minIiERKT_S2_S2_>
 8011678:	4603      	mov	r3, r0
 801167a:	681b      	ldr	r3, [r3, #0]
 801167c:	637b      	str	r3, [r7, #52]	; 0x34
          int32_t acc = 0;
 801167e:	2300      	movs	r3, #0
 8011680:	613b      	str	r3, [r7, #16]
          int filter_count = 0;
 8011682:	2300      	movs	r3, #0
 8011684:	677b      	str	r3, [r7, #116]	; 0x74
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 8011686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011688:	673b      	str	r3, [r7, #112]	; 0x70
 801168a:	e02a      	b.n	80116e2 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x1b0>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 801168c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801168e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8011690:	e020      	b.n	80116d4 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x1a2>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
 8011692:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011694:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011696:	4413      	add	r3, r2
 8011698:	633b      	str	r3, [r7, #48]	; 0x30
              const int in_y = in_y_origin + filter_y;
 801169a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801169c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801169e:	4413      	add	r3, r2
 80116a0:	62fb      	str	r3, [r7, #44]	; 0x2c
              acc +=
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
 80116a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80116a4:	9300      	str	r3, [sp, #0]
 80116a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80116aa:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80116ae:	68b8      	ldr	r0, [r7, #8]
 80116b0:	f7fa fab0 	bl	800bc14 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 80116b4:	4603      	mov	r3, r0
 80116b6:	005b      	lsls	r3, r3, #1
 80116b8:	687a      	ldr	r2, [r7, #4]
 80116ba:	4413      	add	r3, r2
 80116bc:	f9b3 3000 	ldrsh.w	r3, [r3]
              acc +=
 80116c0:	461a      	mov	r2, r3
 80116c2:	693b      	ldr	r3, [r7, #16]
 80116c4:	4413      	add	r3, r2
 80116c6:	613b      	str	r3, [r7, #16]
              filter_count++;
 80116c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80116ca:	3301      	adds	r3, #1
 80116cc:	677b      	str	r3, [r7, #116]	; 0x74
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 80116ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80116d0:	3301      	adds	r3, #1
 80116d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80116d4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80116d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80116d8:	429a      	cmp	r2, r3
 80116da:	dbda      	blt.n	8011692 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x160>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 80116dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80116de:	3301      	adds	r3, #1
 80116e0:	673b      	str	r3, [r7, #112]	; 0x70
 80116e2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80116e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116e6:	429a      	cmp	r2, r3
 80116e8:	dbd0      	blt.n	801168c <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x15a>
            }
          }
          if (filter_count == 0) return false;
 80116ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d101      	bne.n	80116f4 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x1c2>
 80116f0:	2300      	movs	r3, #0
 80116f2:	e06c      	b.n	80117ce <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x29c>
          // Round to the closest integer value.
          acc = acc > 0 ? (acc + filter_count / 2) / filter_count
 80116f4:	693b      	ldr	r3, [r7, #16]
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	dd0b      	ble.n	8011712 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x1e0>
 80116fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	da00      	bge.n	8011702 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x1d0>
 8011700:	3301      	adds	r3, #1
 8011702:	105b      	asrs	r3, r3, #1
 8011704:	461a      	mov	r2, r3
 8011706:	693b      	ldr	r3, [r7, #16]
 8011708:	441a      	add	r2, r3
 801170a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801170c:	fb92 f3f3 	sdiv	r3, r2, r3
 8011710:	e00b      	b.n	801172a <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x1f8>
                        : (acc - filter_count / 2) / filter_count;
 8011712:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011714:	2b00      	cmp	r3, #0
 8011716:	da00      	bge.n	801171a <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x1e8>
 8011718:	3301      	adds	r3, #1
 801171a:	105b      	asrs	r3, r3, #1
 801171c:	425b      	negs	r3, r3
 801171e:	461a      	mov	r2, r3
 8011720:	693b      	ldr	r3, [r7, #16]
 8011722:	441a      	add	r2, r3
          acc = acc > 0 ? (acc + filter_count / 2) / filter_count
 8011724:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011726:	fb92 f3f3 	sdiv	r3, r2, r3
 801172a:	613b      	str	r3, [r7, #16]
          acc = std::max(acc, params.quantized_activation_min);
 801172c:	68fb      	ldr	r3, [r7, #12]
 801172e:	f103 021c 	add.w	r2, r3, #28
 8011732:	f107 0310 	add.w	r3, r7, #16
 8011736:	4611      	mov	r1, r2
 8011738:	4618      	mov	r0, r3
 801173a:	f7f4 fdb6 	bl	80062aa <_ZSt3maxIlERKT_S2_S2_>
 801173e:	4603      	mov	r3, r0
 8011740:	681b      	ldr	r3, [r3, #0]
 8011742:	613b      	str	r3, [r7, #16]
          acc = std::min(acc, params.quantized_activation_max);
 8011744:	68fb      	ldr	r3, [r7, #12]
 8011746:	f103 0220 	add.w	r2, r3, #32
 801174a:	f107 0310 	add.w	r3, r7, #16
 801174e:	4611      	mov	r1, r2
 8011750:	4618      	mov	r0, r3
 8011752:	f7f4 fd96 	bl	8006282 <_ZSt3minIlERKT_S2_S2_>
 8011756:	4603      	mov	r3, r0
 8011758:	681b      	ldr	r3, [r3, #0]
 801175a:	613b      	str	r3, [r7, #16]
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 801175c:	693c      	ldr	r4, [r7, #16]
 801175e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011760:	9300      	str	r3, [sp, #0]
 8011762:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011764:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8011768:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 801176c:	6838      	ldr	r0, [r7, #0]
 801176e:	f7fa fa51 	bl	800bc14 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8011772:	4603      	mov	r3, r0
 8011774:	005b      	lsls	r3, r3, #1
 8011776:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801177a:	4413      	add	r3, r2
 801177c:	b222      	sxth	r2, r4
 801177e:	801a      	strh	r2, [r3, #0]
        for (int channel = 0; channel < depth; ++channel) {
 8011780:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011782:	3301      	adds	r3, #1
 8011784:	67bb      	str	r3, [r7, #120]	; 0x78
 8011786:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8011788:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801178a:	429a      	cmp	r2, r3
 801178c:	f6ff af26 	blt.w	80115dc <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKsS6_Ps+0xaa>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8011790:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011792:	3301      	adds	r3, #1
 8011794:	67fb      	str	r3, [r7, #124]	; 0x7c
 8011796:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8011798:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801179a:	429a      	cmp	r2, r3
 801179c:	f6ff af1b 	blt.w	80115d6 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKsS6_Ps+0xa4>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 80117a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80117a4:	3301      	adds	r3, #1
 80117a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80117aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80117ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80117b0:	429a      	cmp	r2, r3
 80117b2:	f6ff af0d 	blt.w	80115d0 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x9e>
  for (int batch = 0; batch < batches; ++batch) {
 80117b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80117ba:	3301      	adds	r3, #1
 80117bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80117c0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80117c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80117c6:	429a      	cmp	r2, r3
 80117c8:	f6ff aefe 	blt.w	80115c8 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x96>
              static_cast<int16_t>(acc);
        }
      }
    }
  }
  return true;
 80117cc:	2301      	movs	r3, #1
}
 80117ce:	4618      	mov	r0, r3
 80117d0:	378c      	adds	r7, #140	; 0x8c
 80117d2:	46bd      	mov	sp, r7
 80117d4:	bd90      	pop	{r4, r7, pc}
	...

080117d8 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode>:

namespace tflite {

namespace {

TfLiteStatus AverageEval(TfLiteContext* context, TfLiteNode* node) {
 80117d8:	b580      	push	{r7, lr}
 80117da:	b088      	sub	sp, #32
 80117dc:	af02      	add	r7, sp, #8
 80117de:	6078      	str	r0, [r7, #4]
 80117e0:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->builtin_data != nullptr);
 80117e2:	683b      	ldr	r3, [r7, #0]
 80117e4:	691b      	ldr	r3, [r3, #16]
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	d101      	bne.n	80117ee <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x16>
 80117ea:	f00e f939 	bl	801fa60 <abort>
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);
 80117ee:	683b      	ldr	r3, [r7, #0]
 80117f0:	691b      	ldr	r3, [r3, #16]
 80117f2:	617b      	str	r3, [r7, #20]

  TFLITE_DCHECK(node->user_data != nullptr);
 80117f4:	683b      	ldr	r3, [r7, #0]
 80117f6:	68db      	ldr	r3, [r3, #12]
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d101      	bne.n	8011800 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x28>
 80117fc:	f00e f930 	bl	801fa60 <abort>
  const OpDataPooling* data =
 8011800:	683b      	ldr	r3, [r7, #0]
 8011802:	68db      	ldr	r3, [r3, #12]
 8011804:	613b      	str	r3, [r7, #16]
      static_cast<const OpDataPooling*>(node->user_data);

  const TfLiteEvalTensor* input =
      micro::GetEvalInput(context, node, kPoolingInputTensor);
 8011806:	4b26      	ldr	r3, [pc, #152]	; (80118a0 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0xc8>)
 8011808:	681b      	ldr	r3, [r3, #0]
 801180a:	461a      	mov	r2, r3
 801180c:	6839      	ldr	r1, [r7, #0]
 801180e:	6878      	ldr	r0, [r7, #4]
 8011810:	f7ff f835 	bl	801087e <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8011814:	60f8      	str	r0, [r7, #12]
  TfLiteEvalTensor* output =
      micro::GetEvalOutput(context, node, kPoolingOutputTensor);
 8011816:	4b23      	ldr	r3, [pc, #140]	; (80118a4 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0xcc>)
 8011818:	681b      	ldr	r3, [r3, #0]
 801181a:	461a      	mov	r2, r3
 801181c:	6839      	ldr	r1, [r7, #0]
 801181e:	6878      	ldr	r0, [r7, #4]
 8011820:	f7ff f83d 	bl	801089e <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 8011824:	60b8      	str	r0, [r7, #8]

  // Inputs and outputs share the same type, guaranteed by the converter.
  switch (input->type) {
 8011826:	68fb      	ldr	r3, [r7, #12]
 8011828:	7a1b      	ldrb	r3, [r3, #8]
 801182a:	2b09      	cmp	r3, #9
 801182c:	d011      	beq.n	8011852 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x7a>
 801182e:	2b09      	cmp	r3, #9
 8011830:	dc25      	bgt.n	801187e <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0xa6>
 8011832:	2b01      	cmp	r3, #1
 8011834:	d002      	beq.n	801183c <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x64>
 8011836:	2b07      	cmp	r3, #7
 8011838:	d016      	beq.n	8011868 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x90>
 801183a:	e020      	b.n	801187e <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0xa6>
    case kTfLiteFloat32:
      AveragePoolingEvalFloat(context, node, params, data, input, output);
 801183c:	68bb      	ldr	r3, [r7, #8]
 801183e:	9301      	str	r3, [sp, #4]
 8011840:	68fb      	ldr	r3, [r7, #12]
 8011842:	9300      	str	r3, [sp, #0]
 8011844:	693b      	ldr	r3, [r7, #16]
 8011846:	697a      	ldr	r2, [r7, #20]
 8011848:	6839      	ldr	r1, [r7, #0]
 801184a:	6878      	ldr	r0, [r7, #4]
 801184c:	f000 fb44 	bl	8011ed8 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_>
      break;
 8011850:	e021      	b.n	8011896 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0xbe>
    case kTfLiteInt8:
      AveragePoolingEvalQuantized<int8_t>(context, node, params, data, input,
 8011852:	68bb      	ldr	r3, [r7, #8]
 8011854:	9301      	str	r3, [sp, #4]
 8011856:	68fb      	ldr	r3, [r7, #12]
 8011858:	9300      	str	r3, [sp, #0]
 801185a:	693b      	ldr	r3, [r7, #16]
 801185c:	697a      	ldr	r2, [r7, #20]
 801185e:	6839      	ldr	r1, [r7, #0]
 8011860:	6878      	ldr	r0, [r7, #4]
 8011862:	f000 f853 	bl	801190c <_ZN6tflite27AveragePoolingEvalQuantizedIaEEvP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_>
                                          output);
      break;
 8011866:	e016      	b.n	8011896 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0xbe>
    case kTfLiteInt16:
      AveragePoolingEvalQuantized<int16_t>(context, node, params, data, input,
 8011868:	68bb      	ldr	r3, [r7, #8]
 801186a:	9301      	str	r3, [sp, #4]
 801186c:	68fb      	ldr	r3, [r7, #12]
 801186e:	9300      	str	r3, [sp, #0]
 8011870:	693b      	ldr	r3, [r7, #16]
 8011872:	697a      	ldr	r2, [r7, #20]
 8011874:	6839      	ldr	r1, [r7, #0]
 8011876:	6878      	ldr	r0, [r7, #4]
 8011878:	f000 f8a5 	bl	80119c6 <_ZN6tflite27AveragePoolingEvalQuantizedIsEEvP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_>
                                           output);
      break;
 801187c:	e00b      	b.n	8011896 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0xbe>
    default:
      MicroPrintf("Input type %s is not currently supported",
                  TfLiteTypeGetName(input->type));
 801187e:	68fb      	ldr	r3, [r7, #12]
 8011880:	7a1b      	ldrb	r3, [r3, #8]
      MicroPrintf("Input type %s is not currently supported",
 8011882:	4618      	mov	r0, r3
 8011884:	f7f3 ff62 	bl	800574c <TfLiteTypeGetName>
 8011888:	4603      	mov	r3, r0
 801188a:	4619      	mov	r1, r3
 801188c:	4806      	ldr	r0, [pc, #24]	; (80118a8 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0xd0>)
 801188e:	f7f9 ffbf 	bl	800b810 <_Z11MicroPrintfPKcz>
      return kTfLiteError;
 8011892:	2301      	movs	r3, #1
 8011894:	e000      	b.n	8011898 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0xc0>
  }
  return kTfLiteOk;
 8011896:	2300      	movs	r3, #0
}
 8011898:	4618      	mov	r0, r3
 801189a:	3718      	adds	r7, #24
 801189c:	46bd      	mov	sp, r7
 801189e:	bd80      	pop	{r7, pc}
 80118a0:	08029334 	.word	0x08029334
 80118a4:	08029338 	.word	0x08029338
 80118a8:	080277e8 	.word	0x080277e8

080118ac <_ZN6tflite12_GLOBAL__N_18PoolInitEP13TfLiteContextPKcj>:
      return kTfLiteError;
  }
  return kTfLiteOk;
}

void* PoolInit(TfLiteContext* context, const char* buffer, size_t length) {
 80118ac:	b580      	push	{r7, lr}
 80118ae:	b084      	sub	sp, #16
 80118b0:	af00      	add	r7, sp, #0
 80118b2:	60f8      	str	r0, [r7, #12]
 80118b4:	60b9      	str	r1, [r7, #8]
 80118b6:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 80118b8:	68fb      	ldr	r3, [r7, #12]
 80118ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d101      	bne.n	80118c4 <_ZN6tflite12_GLOBAL__N_18PoolInitEP13TfLiteContextPKcj+0x18>
 80118c0:	f00e f8ce 	bl	801fa60 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpDataPooling));
 80118c4:	68fb      	ldr	r3, [r7, #12]
 80118c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80118c8:	2120      	movs	r1, #32
 80118ca:	68f8      	ldr	r0, [r7, #12]
 80118cc:	4798      	blx	r3
 80118ce:	4603      	mov	r3, r0
}
 80118d0:	4618      	mov	r0, r3
 80118d2:	3710      	adds	r7, #16
 80118d4:	46bd      	mov	sp, r7
 80118d6:	bd80      	pop	{r7, pc}

080118d8 <_ZN6tflite24Register_AVERAGE_POOL_2DEv>:

}  // namespace

TFLMRegistration Register_AVERAGE_POOL_2D() {
 80118d8:	b580      	push	{r7, lr}
 80118da:	b084      	sub	sp, #16
 80118dc:	af02      	add	r7, sp, #8
 80118de:	6078      	str	r0, [r7, #4]
  return tflite::micro::RegisterOp(PoolInit, PoolingPrepare, AverageEval);
 80118e0:	6878      	ldr	r0, [r7, #4]
 80118e2:	2300      	movs	r3, #0
 80118e4:	9301      	str	r3, [sp, #4]
 80118e6:	2300      	movs	r3, #0
 80118e8:	9300      	str	r3, [sp, #0]
 80118ea:	4b05      	ldr	r3, [pc, #20]	; (8011900 <_ZN6tflite24Register_AVERAGE_POOL_2DEv+0x28>)
 80118ec:	4a05      	ldr	r2, [pc, #20]	; (8011904 <_ZN6tflite24Register_AVERAGE_POOL_2DEv+0x2c>)
 80118ee:	4906      	ldr	r1, [pc, #24]	; (8011908 <_ZN6tflite24Register_AVERAGE_POOL_2DEv+0x30>)
 80118f0:	f7fe ff72 	bl	80107d8 <_ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_ESE_>
 80118f4:	bf00      	nop
}
 80118f6:	6878      	ldr	r0, [r7, #4]
 80118f8:	3708      	adds	r7, #8
 80118fa:	46bd      	mov	sp, r7
 80118fc:	bd80      	pop	{r7, pc}
 80118fe:	bf00      	nop
 8011900:	080117d9 	.word	0x080117d9
 8011904:	08011d95 	.word	0x08011d95
 8011908:	080118ad 	.word	0x080118ad

0801190c <_ZN6tflite27AveragePoolingEvalQuantizedIaEEvP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_>:
void AveragePoolingEvalQuantized(TfLiteContext* context, const TfLiteNode* node,
 801190c:	b590      	push	{r4, r7, lr}
 801190e:	b0a1      	sub	sp, #132	; 0x84
 8011910:	af02      	add	r7, sp, #8
 8011912:	60f8      	str	r0, [r7, #12]
 8011914:	60b9      	str	r1, [r7, #8]
 8011916:	607a      	str	r2, [r7, #4]
 8011918:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(input->type == kTfLiteInt8 || input->type == kTfLiteInt16);
 801191a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801191e:	7a1b      	ldrb	r3, [r3, #8]
 8011920:	2b09      	cmp	r3, #9
 8011922:	d006      	beq.n	8011932 <_ZN6tflite27AveragePoolingEvalQuantizedIaEEvP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x26>
 8011924:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011928:	7a1b      	ldrb	r3, [r3, #8]
 801192a:	2b07      	cmp	r3, #7
 801192c:	d001      	beq.n	8011932 <_ZN6tflite27AveragePoolingEvalQuantizedIaEEvP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x26>
 801192e:	f00e f897 	bl	801fa60 <abort>
  op_params.stride_height = params->stride_height;
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	689b      	ldr	r3, [r3, #8]
 8011936:	623b      	str	r3, [r7, #32]
  op_params.stride_width = params->stride_width;
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	685b      	ldr	r3, [r3, #4]
 801193c:	627b      	str	r3, [r7, #36]	; 0x24
  op_params.filter_height = params->filter_height;
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	691b      	ldr	r3, [r3, #16]
 8011942:	62bb      	str	r3, [r7, #40]	; 0x28
  op_params.filter_width = params->filter_width;
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	68db      	ldr	r3, [r3, #12]
 8011948:	62fb      	str	r3, [r7, #44]	; 0x2c
  op_params.padding_values.height = data->padding.height;
 801194a:	683b      	ldr	r3, [r7, #0]
 801194c:	685b      	ldr	r3, [r3, #4]
 801194e:	b21b      	sxth	r3, r3
 8011950:	833b      	strh	r3, [r7, #24]
  op_params.padding_values.width = data->padding.width;
 8011952:	683b      	ldr	r3, [r7, #0]
 8011954:	681b      	ldr	r3, [r3, #0]
 8011956:	b21b      	sxth	r3, r3
 8011958:	82fb      	strh	r3, [r7, #22]
  op_params.quantized_activation_min = data->activation_min;
 801195a:	683b      	ldr	r3, [r7, #0]
 801195c:	691b      	ldr	r3, [r3, #16]
 801195e:	633b      	str	r3, [r7, #48]	; 0x30
  op_params.quantized_activation_max = data->activation_max;
 8011960:	683b      	ldr	r3, [r7, #0]
 8011962:	695b      	ldr	r3, [r3, #20]
 8011964:	637b      	str	r3, [r7, #52]	; 0x34
  reference_integer_ops::AveragePool(op_params,
 8011966:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801196a:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 801196e:	4618      	mov	r0, r3
 8011970:	f7fe ffb5 	bl	80108de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 8011974:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8011978:	f7fa f8a1 	bl	800babe <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 801197c:	4604      	mov	r4, r0
 801197e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8011982:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8011986:	4618      	mov	r0, r3
 8011988:	f7fe ffa9 	bl	80108de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 801198c:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8011990:	f7fa f8a4 	bl	800badc <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 8011994:	4602      	mov	r2, r0
 8011996:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801199a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 801199e:	f107 0014 	add.w	r0, r7, #20
 80119a2:	9200      	str	r2, [sp, #0]
 80119a4:	4622      	mov	r2, r4
 80119a6:	f7ff fc72 	bl	801128e <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa>
 80119aa:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80119ae:	4618      	mov	r0, r3
 80119b0:	f7f0 ff2b 	bl	800280a <_ZN6tflite12RuntimeShapeD1Ev>
 80119b4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80119b8:	4618      	mov	r0, r3
 80119ba:	f7f0 ff26 	bl	800280a <_ZN6tflite12RuntimeShapeD1Ev>
}
 80119be:	bf00      	nop
 80119c0:	377c      	adds	r7, #124	; 0x7c
 80119c2:	46bd      	mov	sp, r7
 80119c4:	bd90      	pop	{r4, r7, pc}

080119c6 <_ZN6tflite27AveragePoolingEvalQuantizedIsEEvP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_>:
void AveragePoolingEvalQuantized(TfLiteContext* context, const TfLiteNode* node,
 80119c6:	b590      	push	{r4, r7, lr}
 80119c8:	b0a1      	sub	sp, #132	; 0x84
 80119ca:	af02      	add	r7, sp, #8
 80119cc:	60f8      	str	r0, [r7, #12]
 80119ce:	60b9      	str	r1, [r7, #8]
 80119d0:	607a      	str	r2, [r7, #4]
 80119d2:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(input->type == kTfLiteInt8 || input->type == kTfLiteInt16);
 80119d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80119d8:	7a1b      	ldrb	r3, [r3, #8]
 80119da:	2b09      	cmp	r3, #9
 80119dc:	d006      	beq.n	80119ec <_ZN6tflite27AveragePoolingEvalQuantizedIsEEvP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x26>
 80119de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80119e2:	7a1b      	ldrb	r3, [r3, #8]
 80119e4:	2b07      	cmp	r3, #7
 80119e6:	d001      	beq.n	80119ec <_ZN6tflite27AveragePoolingEvalQuantizedIsEEvP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x26>
 80119e8:	f00e f83a 	bl	801fa60 <abort>
  op_params.stride_height = params->stride_height;
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	689b      	ldr	r3, [r3, #8]
 80119f0:	623b      	str	r3, [r7, #32]
  op_params.stride_width = params->stride_width;
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	685b      	ldr	r3, [r3, #4]
 80119f6:	627b      	str	r3, [r7, #36]	; 0x24
  op_params.filter_height = params->filter_height;
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	691b      	ldr	r3, [r3, #16]
 80119fc:	62bb      	str	r3, [r7, #40]	; 0x28
  op_params.filter_width = params->filter_width;
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	68db      	ldr	r3, [r3, #12]
 8011a02:	62fb      	str	r3, [r7, #44]	; 0x2c
  op_params.padding_values.height = data->padding.height;
 8011a04:	683b      	ldr	r3, [r7, #0]
 8011a06:	685b      	ldr	r3, [r3, #4]
 8011a08:	b21b      	sxth	r3, r3
 8011a0a:	833b      	strh	r3, [r7, #24]
  op_params.padding_values.width = data->padding.width;
 8011a0c:	683b      	ldr	r3, [r7, #0]
 8011a0e:	681b      	ldr	r3, [r3, #0]
 8011a10:	b21b      	sxth	r3, r3
 8011a12:	82fb      	strh	r3, [r7, #22]
  op_params.quantized_activation_min = data->activation_min;
 8011a14:	683b      	ldr	r3, [r7, #0]
 8011a16:	691b      	ldr	r3, [r3, #16]
 8011a18:	633b      	str	r3, [r7, #48]	; 0x30
  op_params.quantized_activation_max = data->activation_max;
 8011a1a:	683b      	ldr	r3, [r7, #0]
 8011a1c:	695b      	ldr	r3, [r3, #20]
 8011a1e:	637b      	str	r3, [r7, #52]	; 0x34
  reference_integer_ops::AveragePool(op_params,
 8011a20:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011a24:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8011a28:	4618      	mov	r0, r3
 8011a2a:	f7fe ff58 	bl	80108de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 8011a2e:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8011a32:	f7f0 ff7c 	bl	800292e <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>
 8011a36:	4604      	mov	r4, r0
 8011a38:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8011a3c:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8011a40:	4618      	mov	r0, r3
 8011a42:	f7fe ff4c 	bl	80108de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 8011a46:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8011a4a:	f7f0 ff7f 	bl	800294c <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
 8011a4e:	4602      	mov	r2, r0
 8011a50:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8011a54:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8011a58:	f107 0014 	add.w	r0, r7, #20
 8011a5c:	9200      	str	r2, [sp, #0]
 8011a5e:	4622      	mov	r2, r4
 8011a60:	f7ff fd67 	bl	8011532 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKsS6_Ps>
 8011a64:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8011a68:	4618      	mov	r0, r3
 8011a6a:	f7f0 fece 	bl	800280a <_ZN6tflite12RuntimeShapeD1Ev>
 8011a6e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011a72:	4618      	mov	r0, r3
 8011a74:	f7f0 fec9 	bl	800280a <_ZN6tflite12RuntimeShapeD1Ev>
}
 8011a78:	bf00      	nop
 8011a7a:	377c      	adds	r7, #124	; 0x7c
 8011a7c:	46bd      	mov	sp, r7
 8011a7e:	bd90      	pop	{r4, r7, pc}

08011a80 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
namespace reference_ops {

inline bool AveragePool(const PoolParams& params,
                        const RuntimeShape& input_shape,
                        const float* input_data,
                        const RuntimeShape& output_shape, float* output_data) {
 8011a80:	b590      	push	{r4, r7, lr}
 8011a82:	ed2d 8b02 	vpush	{d8}
 8011a86:	b0a7      	sub	sp, #156	; 0x9c
 8011a88:	af02      	add	r7, sp, #8
 8011a8a:	60f8      	str	r0, [r7, #12]
 8011a8c:	60b9      	str	r1, [r7, #8]
 8011a8e:	607a      	str	r2, [r7, #4]
 8011a90:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 8011a92:	68b8      	ldr	r0, [r7, #8]
 8011a94:	f7f0 fec4 	bl	8002820 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8011a98:	4603      	mov	r3, r0
 8011a9a:	2b04      	cmp	r3, #4
 8011a9c:	d001      	beq.n	8011aa2 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x22>
 8011a9e:	f00d ffdf 	bl	801fa60 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 8011aa2:	6838      	ldr	r0, [r7, #0]
 8011aa4:	f7f0 febc 	bl	8002820 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8011aa8:	4603      	mov	r3, r0
 8011aaa:	2b04      	cmp	r3, #4
 8011aac:	d001      	beq.n	8011ab2 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x32>
 8011aae:	f00d ffd7 	bl	801fa60 <abort>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 8011ab2:	2300      	movs	r3, #0
 8011ab4:	683a      	ldr	r2, [r7, #0]
 8011ab6:	2100      	movs	r1, #0
 8011ab8:	68b8      	ldr	r0, [r7, #8]
 8011aba:	f7fa f933 	bl	800bd24 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8011abe:	66f8      	str	r0, [r7, #108]	; 0x6c
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 8011ac0:	2303      	movs	r3, #3
 8011ac2:	683a      	ldr	r2, [r7, #0]
 8011ac4:	2103      	movs	r1, #3
 8011ac6:	68b8      	ldr	r0, [r7, #8]
 8011ac8:	f7fa f92c 	bl	800bd24 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8011acc:	66b8      	str	r0, [r7, #104]	; 0x68
  const int input_height = input_shape.Dims(1);
 8011ace:	2101      	movs	r1, #1
 8011ad0:	68b8      	ldr	r0, [r7, #8]
 8011ad2:	f7f0 feb1 	bl	8002838 <_ZNK6tflite12RuntimeShape4DimsEi>
 8011ad6:	6678      	str	r0, [r7, #100]	; 0x64
  const int input_width = input_shape.Dims(2);
 8011ad8:	2102      	movs	r1, #2
 8011ada:	68b8      	ldr	r0, [r7, #8]
 8011adc:	f7f0 feac 	bl	8002838 <_ZNK6tflite12RuntimeShape4DimsEi>
 8011ae0:	6638      	str	r0, [r7, #96]	; 0x60
  const int output_height = output_shape.Dims(1);
 8011ae2:	2101      	movs	r1, #1
 8011ae4:	6838      	ldr	r0, [r7, #0]
 8011ae6:	f7f0 fea7 	bl	8002838 <_ZNK6tflite12RuntimeShape4DimsEi>
 8011aea:	65f8      	str	r0, [r7, #92]	; 0x5c
  const int output_width = output_shape.Dims(2);
 8011aec:	2102      	movs	r1, #2
 8011aee:	6838      	ldr	r0, [r7, #0]
 8011af0:	f7f0 fea2 	bl	8002838 <_ZNK6tflite12RuntimeShape4DimsEi>
 8011af4:	65b8      	str	r0, [r7, #88]	; 0x58
  const int stride_height = params.stride_height;
 8011af6:	68fb      	ldr	r3, [r7, #12]
 8011af8:	68db      	ldr	r3, [r3, #12]
 8011afa:	657b      	str	r3, [r7, #84]	; 0x54
  const int stride_width = params.stride_width;
 8011afc:	68fb      	ldr	r3, [r7, #12]
 8011afe:	691b      	ldr	r3, [r3, #16]
 8011b00:	653b      	str	r3, [r7, #80]	; 0x50
  for (int batch = 0; batch < batches; ++batch) {
 8011b02:	2300      	movs	r3, #0
 8011b04:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8011b08:	e0f7      	b.n	8011cfa <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x27a>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8011b0a:	2300      	movs	r3, #0
 8011b0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8011b10:	e0e8      	b.n	8011ce4 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x264>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8011b12:	2300      	movs	r3, #0
 8011b14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011b18:	e0d9      	b.n	8011cce <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x24e>
        for (int channel = 0; channel < depth; ++channel) {
 8011b1a:	2300      	movs	r3, #0
 8011b1c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011b20:	e0ca      	b.n	8011cb8 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x238>
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
 8011b22:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011b26:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011b28:	fb02 f303 	mul.w	r3, r2, r3
 8011b2c:	68fa      	ldr	r2, [r7, #12]
 8011b2e:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
          const int in_x_origin =
 8011b32:	1a9b      	subs	r3, r3, r2
 8011b34:	64fb      	str	r3, [r7, #76]	; 0x4c
          const int in_y_origin =
              (out_y * stride_height) - params.padding_values.height;
 8011b36:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011b3a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011b3c:	fb02 f303 	mul.w	r3, r2, r3
 8011b40:	68fa      	ldr	r2, [r7, #12]
 8011b42:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
          const int in_y_origin =
 8011b46:	1a9b      	subs	r3, r3, r2
 8011b48:	64bb      	str	r3, [r7, #72]	; 0x48
          // Compute the boundaries of the filter region clamped so as to
          // ensure that the filter window fits in the input array.
          const int filter_x_start = std::max(0, -in_x_origin);
 8011b4a:	2300      	movs	r3, #0
 8011b4c:	617b      	str	r3, [r7, #20]
 8011b4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b50:	425b      	negs	r3, r3
 8011b52:	61bb      	str	r3, [r7, #24]
 8011b54:	f107 0218 	add.w	r2, r7, #24
 8011b58:	f107 0314 	add.w	r3, r7, #20
 8011b5c:	4611      	mov	r1, r2
 8011b5e:	4618      	mov	r0, r3
 8011b60:	f7f5 fb81 	bl	8007266 <_ZSt3maxIiERKT_S2_S2_>
 8011b64:	4603      	mov	r3, r0
 8011b66:	681b      	ldr	r3, [r3, #0]
 8011b68:	647b      	str	r3, [r7, #68]	; 0x44
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
 8011b6a:	68fb      	ldr	r3, [r7, #12]
 8011b6c:	f103 0018 	add.w	r0, r3, #24
 8011b70:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011b72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b74:	1ad3      	subs	r3, r2, r3
 8011b76:	61fb      	str	r3, [r7, #28]
 8011b78:	f107 031c 	add.w	r3, r7, #28
 8011b7c:	4619      	mov	r1, r3
 8011b7e:	f7fd fbab 	bl	800f2d8 <_ZSt3minIiERKT_S2_S2_>
 8011b82:	4603      	mov	r3, r0
 8011b84:	681b      	ldr	r3, [r3, #0]
 8011b86:	643b      	str	r3, [r7, #64]	; 0x40
          const int filter_y_start = std::max(0, -in_y_origin);
 8011b88:	2300      	movs	r3, #0
 8011b8a:	623b      	str	r3, [r7, #32]
 8011b8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011b8e:	425b      	negs	r3, r3
 8011b90:	627b      	str	r3, [r7, #36]	; 0x24
 8011b92:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8011b96:	f107 0320 	add.w	r3, r7, #32
 8011b9a:	4611      	mov	r1, r2
 8011b9c:	4618      	mov	r0, r3
 8011b9e:	f7f5 fb62 	bl	8007266 <_ZSt3maxIiERKT_S2_S2_>
 8011ba2:	4603      	mov	r3, r0
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
 8011ba8:	68fb      	ldr	r3, [r7, #12]
 8011baa:	f103 0014 	add.w	r0, r3, #20
 8011bae:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011bb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011bb2:	1ad3      	subs	r3, r2, r3
 8011bb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8011bb6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011bba:	4619      	mov	r1, r3
 8011bbc:	f7fd fb8c 	bl	800f2d8 <_ZSt3minIiERKT_S2_S2_>
 8011bc0:	4603      	mov	r3, r0
 8011bc2:	681b      	ldr	r3, [r3, #0]
 8011bc4:	63bb      	str	r3, [r7, #56]	; 0x38
          float total = 0.f;
 8011bc6:	f04f 0300 	mov.w	r3, #0
 8011bca:	67fb      	str	r3, [r7, #124]	; 0x7c
          float filter_count = 0;
 8011bcc:	f04f 0300 	mov.w	r3, #0
 8011bd0:	67bb      	str	r3, [r7, #120]	; 0x78
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 8011bd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011bd4:	677b      	str	r3, [r7, #116]	; 0x74
 8011bd6:	e032      	b.n	8011c3e <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1be>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 8011bd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011bda:	673b      	str	r3, [r7, #112]	; 0x70
 8011bdc:	e028      	b.n	8011c30 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1b0>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
 8011bde:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011be0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011be2:	4413      	add	r3, r2
 8011be4:	633b      	str	r3, [r7, #48]	; 0x30
              const int in_y = in_y_origin + filter_y;
 8011be6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011be8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011bea:	4413      	add	r3, r2
 8011bec:	62fb      	str	r3, [r7, #44]	; 0x2c
              total +=
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
 8011bee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011bf2:	9300      	str	r3, [sp, #0]
 8011bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bf6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011bf8:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8011bfc:	68b8      	ldr	r0, [r7, #8]
 8011bfe:	f7fa f809 	bl	800bc14 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8011c02:	4603      	mov	r3, r0
 8011c04:	009b      	lsls	r3, r3, #2
 8011c06:	687a      	ldr	r2, [r7, #4]
 8011c08:	4413      	add	r3, r2
 8011c0a:	edd3 7a00 	vldr	s15, [r3]
              total +=
 8011c0e:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8011c12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011c16:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
              filter_count++;
 8011c1a:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8011c1e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011c22:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011c26:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 8011c2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011c2c:	3301      	adds	r3, #1
 8011c2e:	673b      	str	r3, [r7, #112]	; 0x70
 8011c30:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011c32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011c34:	429a      	cmp	r2, r3
 8011c36:	dbd2      	blt.n	8011bde <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x15e>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 8011c38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011c3a:	3301      	adds	r3, #1
 8011c3c:	677b      	str	r3, [r7, #116]	; 0x74
 8011c3e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8011c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c42:	429a      	cmp	r2, r3
 8011c44:	dbc8      	blt.n	8011bd8 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x158>
            }
          }
          if (filter_count == 0) return false;
 8011c46:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8011c4a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c52:	d101      	bne.n	8011c58 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1d8>
 8011c54:	2300      	movs	r3, #0
 8011c56:	e057      	b.n	8011d08 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x288>
          const float average = total / filter_count;
 8011c58:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 8011c5c:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8011c60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011c64:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
              ActivationFunctionWithMinMax(average, params.float_activation_min,
 8011c68:	68fb      	ldr	r3, [r7, #12]
 8011c6a:	ed93 8a09 	vldr	s16, [r3, #36]	; 0x24
                                           params.float_activation_max);
 8011c6e:	68fb      	ldr	r3, [r7, #12]
 8011c70:	edd3 8a0a 	vldr	s17, [r3, #40]	; 0x28
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 8011c74:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011c78:	9300      	str	r3, [sp, #0]
 8011c7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011c7e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8011c82:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8011c86:	6838      	ldr	r0, [r7, #0]
 8011c88:	f7f9 ffc4 	bl	800bc14 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8011c8c:	4603      	mov	r3, r0
 8011c8e:	009b      	lsls	r3, r3, #2
 8011c90:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8011c94:	18d4      	adds	r4, r2, r3
              ActivationFunctionWithMinMax(average, params.float_activation_min,
 8011c96:	eeb0 1a68 	vmov.f32	s2, s17
 8011c9a:	eef0 0a48 	vmov.f32	s1, s16
 8011c9e:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8011ca2:	f7f9 ff2a 	bl	800bafa <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>
 8011ca6:	eef0 7a40 	vmov.f32	s15, s0
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 8011caa:	edc4 7a00 	vstr	s15, [r4]
        for (int channel = 0; channel < depth; ++channel) {
 8011cae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011cb2:	3301      	adds	r3, #1
 8011cb4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011cb8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8011cbc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011cbe:	429a      	cmp	r2, r3
 8011cc0:	f6ff af2f 	blt.w	8011b22 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xa2>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8011cc4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011cc8:	3301      	adds	r3, #1
 8011cca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011cce:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8011cd2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011cd4:	429a      	cmp	r2, r3
 8011cd6:	f6ff af20 	blt.w	8011b1a <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x9a>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8011cda:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011cde:	3301      	adds	r3, #1
 8011ce0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8011ce4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8011ce8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011cea:	429a      	cmp	r2, r3
 8011cec:	f6ff af11 	blt.w	8011b12 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x92>
  for (int batch = 0; batch < batches; ++batch) {
 8011cf0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011cf4:	3301      	adds	r3, #1
 8011cf6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8011cfa:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8011cfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011d00:	429a      	cmp	r2, r3
 8011d02:	f6ff af02 	blt.w	8011b0a <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x8a>
        }
      }
    }
  }
  return true;
 8011d06:	2301      	movs	r3, #1
}
 8011d08:	4618      	mov	r0, r3
 8011d0a:	3794      	adds	r7, #148	; 0x94
 8011d0c:	46bd      	mov	sp, r7
 8011d0e:	ecbd 8b02 	vpop	{d8}
 8011d12:	bd90      	pop	{r4, r7, pc}

08011d14 <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE>:

TfLiteStatus CalculateOpDataPooling(const TfLiteContext* context,
                                    const TfLitePoolParams* params,
                                    const TfLiteTensor* input,
                                    const TfLiteTensor* output,
                                    OpDataPooling* data) {
 8011d14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011d16:	b097      	sub	sp, #92	; 0x5c
 8011d18:	af08      	add	r7, sp, #32
 8011d1a:	6278      	str	r0, [r7, #36]	; 0x24
 8011d1c:	6239      	str	r1, [r7, #32]
 8011d1e:	61fa      	str	r2, [r7, #28]
 8011d20:	61bb      	str	r3, [r7, #24]
  // input: batch, height, width, channel
  int height = SizeOfDimension(input, 1);
 8011d22:	2101      	movs	r1, #1
 8011d24:	69f8      	ldr	r0, [r7, #28]
 8011d26:	f7f9 ffec 	bl	800bd02 <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>
 8011d2a:	6378      	str	r0, [r7, #52]	; 0x34
  int width = SizeOfDimension(input, 2);
 8011d2c:	2102      	movs	r1, #2
 8011d2e:	69f8      	ldr	r0, [r7, #28]
 8011d30:	f7f9 ffe7 	bl	800bd02 <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>
 8011d34:	6338      	str	r0, [r7, #48]	; 0x30

  int out_height, out_width;

  data->padding = ComputePaddingHeightWidth(
      params->stride_height, params->stride_width,
 8011d36:	6a3b      	ldr	r3, [r7, #32]
 8011d38:	689d      	ldr	r5, [r3, #8]
 8011d3a:	6a3b      	ldr	r3, [r7, #32]
 8011d3c:	685e      	ldr	r6, [r3, #4]
      /*dilation_rate_height=*/1,
      /*dilation_rate_width=*/1, height, width, params->filter_height,
 8011d3e:	6a3b      	ldr	r3, [r7, #32]
 8011d40:	691b      	ldr	r3, [r3, #16]
      params->filter_width, params->padding, &out_height, &out_width);
 8011d42:	6a3a      	ldr	r2, [r7, #32]
 8011d44:	68d2      	ldr	r2, [r2, #12]
 8011d46:	6a39      	ldr	r1, [r7, #32]
 8011d48:	7809      	ldrb	r1, [r1, #0]
  data->padding = ComputePaddingHeightWidth(
 8011d4a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8011d4c:	6078      	str	r0, [r7, #4]
 8011d4e:	f107 0408 	add.w	r4, r7, #8
 8011d52:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8011d56:	9007      	str	r0, [sp, #28]
 8011d58:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8011d5c:	9006      	str	r0, [sp, #24]
 8011d5e:	9105      	str	r1, [sp, #20]
 8011d60:	9204      	str	r2, [sp, #16]
 8011d62:	9303      	str	r3, [sp, #12]
 8011d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d66:	9302      	str	r3, [sp, #8]
 8011d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d6a:	9301      	str	r3, [sp, #4]
 8011d6c:	2301      	movs	r3, #1
 8011d6e:	9300      	str	r3, [sp, #0]
 8011d70:	2301      	movs	r3, #1
 8011d72:	4632      	mov	r2, r6
 8011d74:	4629      	mov	r1, r5
 8011d76:	4620      	mov	r0, r4
 8011d78:	f7fb fb94 	bl	800d4a4 <_ZN6tflite25ComputePaddingHeightWidthEiiiiiiii13TfLitePaddingPiS1_>
 8011d7c:	687c      	ldr	r4, [r7, #4]
 8011d7e:	f107 0308 	add.w	r3, r7, #8
 8011d82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011d84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  return kTfLiteOk;
 8011d88:	2300      	movs	r3, #0
}
 8011d8a:	4618      	mov	r0, r3
 8011d8c:	373c      	adds	r7, #60	; 0x3c
 8011d8e:	46bd      	mov	sp, r7
 8011d90:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08011d94 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus PoolingPrepare(TfLiteContext* context, TfLiteNode* node) {
 8011d94:	b590      	push	{r4, r7, lr}
 8011d96:	b08b      	sub	sp, #44	; 0x2c
 8011d98:	af02      	add	r7, sp, #8
 8011d9a:	6078      	str	r0, [r7, #4]
 8011d9c:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->builtin_data != nullptr);
 8011d9e:	683b      	ldr	r3, [r7, #0]
 8011da0:	691b      	ldr	r3, [r3, #16]
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	d101      	bne.n	8011daa <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x16>
 8011da6:	f00d fe5b 	bl	801fa60 <abort>
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);
 8011daa:	683b      	ldr	r3, [r7, #0]
 8011dac:	691b      	ldr	r3, [r3, #16]
 8011dae:	61fb      	str	r3, [r7, #28]

  TFLITE_DCHECK(node->user_data != nullptr);
 8011db0:	683b      	ldr	r3, [r7, #0]
 8011db2:	68db      	ldr	r3, [r3, #12]
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	d101      	bne.n	8011dbc <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x28>
 8011db8:	f00d fe52 	bl	801fa60 <abort>
  OpDataPooling* data = static_cast<OpDataPooling*>(node->user_data);
 8011dbc:	683b      	ldr	r3, [r7, #0]
 8011dbe:	68db      	ldr	r3, [r3, #12]
 8011dc0:	61bb      	str	r3, [r7, #24]

  MicroContext* micro_context = GetMicroContext(context);
 8011dc2:	6878      	ldr	r0, [r7, #4]
 8011dc4:	f7f0 fda7 	bl	8002916 <_ZN6tflite15GetMicroContextEPK13TfLiteContext>
 8011dc8:	6178      	str	r0, [r7, #20]

  TfLiteTensor* input =
      micro_context->AllocateTempInputTensor(node, kPoolingInputTensor);
 8011dca:	2200      	movs	r2, #0
 8011dcc:	6839      	ldr	r1, [r7, #0]
 8011dce:	6978      	ldr	r0, [r7, #20]
 8011dd0:	f7f8 f90e 	bl	8009ff0 <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei>
 8011dd4:	6138      	str	r0, [r7, #16]
  TF_LITE_ENSURE(context, input != nullptr);
 8011dd6:	693b      	ldr	r3, [r7, #16]
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d10a      	bne.n	8011df2 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x5e>
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	695c      	ldr	r4, [r3, #20]
 8011de0:	4b38      	ldr	r3, [pc, #224]	; (8011ec4 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x130>)
 8011de2:	9300      	str	r3, [sp, #0]
 8011de4:	233d      	movs	r3, #61	; 0x3d
 8011de6:	4a38      	ldr	r2, [pc, #224]	; (8011ec8 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x134>)
 8011de8:	4938      	ldr	r1, [pc, #224]	; (8011ecc <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x138>)
 8011dea:	6878      	ldr	r0, [r7, #4]
 8011dec:	47a0      	blx	r4
 8011dee:	2301      	movs	r3, #1
 8011df0:	e064      	b.n	8011ebc <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x128>
  TfLiteTensor* output =
      micro_context->AllocateTempOutputTensor(node, kPoolingOutputTensor);
 8011df2:	2200      	movs	r2, #0
 8011df4:	6839      	ldr	r1, [r7, #0]
 8011df6:	6978      	ldr	r0, [r7, #20]
 8011df8:	f7f8 f91d 	bl	800a036 <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei>
 8011dfc:	60f8      	str	r0, [r7, #12]
  TF_LITE_ENSURE(context, output != nullptr);
 8011dfe:	68fb      	ldr	r3, [r7, #12]
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	d10a      	bne.n	8011e1a <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x86>
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	695c      	ldr	r4, [r3, #20]
 8011e08:	4b31      	ldr	r3, [pc, #196]	; (8011ed0 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x13c>)
 8011e0a:	9300      	str	r3, [sp, #0]
 8011e0c:	2340      	movs	r3, #64	; 0x40
 8011e0e:	4a2e      	ldr	r2, [pc, #184]	; (8011ec8 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x134>)
 8011e10:	492e      	ldr	r1, [pc, #184]	; (8011ecc <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x138>)
 8011e12:	6878      	ldr	r0, [r7, #4]
 8011e14:	47a0      	blx	r4
 8011e16:	2301      	movs	r3, #1
 8011e18:	e050      	b.n	8011ebc <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x128>

  TF_LITE_ENSURE_STATUS(
 8011e1a:	69bb      	ldr	r3, [r7, #24]
 8011e1c:	9300      	str	r3, [sp, #0]
 8011e1e:	68fb      	ldr	r3, [r7, #12]
 8011e20:	693a      	ldr	r2, [r7, #16]
 8011e22:	69f9      	ldr	r1, [r7, #28]
 8011e24:	6878      	ldr	r0, [r7, #4]
 8011e26:	f7ff ff75 	bl	8011d14 <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE>
 8011e2a:	4603      	mov	r3, r0
 8011e2c:	72fb      	strb	r3, [r7, #11]
 8011e2e:	7afb      	ldrb	r3, [r7, #11]
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	d001      	beq.n	8011e38 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xa4>
 8011e34:	7afb      	ldrb	r3, [r7, #11]
 8011e36:	e041      	b.n	8011ebc <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x128>
      CalculateOpDataPooling(context, params, input, output, data));

  if (input->type == kTfLiteFloat32) {
 8011e38:	693b      	ldr	r3, [r7, #16]
 8011e3a:	7f1b      	ldrb	r3, [r3, #28]
 8011e3c:	2b01      	cmp	r3, #1
 8011e3e:	d10a      	bne.n	8011e56 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xc2>
    CalculateActivationRange(params->activation, &data->activation_min_f32,
 8011e40:	69fb      	ldr	r3, [r7, #28]
 8011e42:	7d18      	ldrb	r0, [r3, #20]
 8011e44:	69bb      	ldr	r3, [r7, #24]
 8011e46:	f103 0118 	add.w	r1, r3, #24
 8011e4a:	69bb      	ldr	r3, [r7, #24]
 8011e4c:	331c      	adds	r3, #28
 8011e4e:	461a      	mov	r2, r3
 8011e50:	f7f9 fe8e 	bl	800bb70 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
 8011e54:	e023      	b.n	8011e9e <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x10a>
                             &data->activation_max_f32);
  } else if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
 8011e56:	693b      	ldr	r3, [r7, #16]
 8011e58:	7f1b      	ldrb	r3, [r3, #28]
 8011e5a:	2b09      	cmp	r3, #9
 8011e5c:	d003      	beq.n	8011e66 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xd2>
 8011e5e:	693b      	ldr	r3, [r7, #16]
 8011e60:	7f1b      	ldrb	r3, [r3, #28]
 8011e62:	2b07      	cmp	r3, #7
 8011e64:	d10d      	bne.n	8011e82 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xee>
    CalculateActivationRangeQuantized(context, params->activation, output,
 8011e66:	69fb      	ldr	r3, [r7, #28]
 8011e68:	7d19      	ldrb	r1, [r3, #20]
 8011e6a:	69bb      	ldr	r3, [r7, #24]
 8011e6c:	f103 0210 	add.w	r2, r3, #16
 8011e70:	69bb      	ldr	r3, [r7, #24]
 8011e72:	3314      	adds	r3, #20
 8011e74:	9300      	str	r3, [sp, #0]
 8011e76:	4613      	mov	r3, r2
 8011e78:	68fa      	ldr	r2, [r7, #12]
 8011e7a:	6878      	ldr	r0, [r7, #4]
 8011e7c:	f7f4 fe70 	bl	8006b60 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 8011e80:	e00d      	b.n	8011e9e <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x10a>
                                      &data->activation_min,
                                      &data->activation_max);
  } else {
    MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
 8011e82:	693b      	ldr	r3, [r7, #16]
 8011e84:	7f1b      	ldrb	r3, [r3, #28]
 8011e86:	4618      	mov	r0, r3
 8011e88:	f7f3 fc60 	bl	800574c <TfLiteTypeGetName>
 8011e8c:	4601      	mov	r1, r0
                input->type);
 8011e8e:	693b      	ldr	r3, [r7, #16]
 8011e90:	7f1b      	ldrb	r3, [r3, #28]
    MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
 8011e92:	461a      	mov	r2, r3
 8011e94:	480f      	ldr	r0, [pc, #60]	; (8011ed4 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x140>)
 8011e96:	f7f9 fcbb 	bl	800b810 <_Z11MicroPrintfPKcz>
    return kTfLiteError;
 8011e9a:	2301      	movs	r3, #1
 8011e9c:	e00e      	b.n	8011ebc <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x128>
  }

  micro_context->DeallocateTempTfLiteTensor(input);
 8011e9e:	697b      	ldr	r3, [r7, #20]
 8011ea0:	681b      	ldr	r3, [r3, #0]
 8011ea2:	3318      	adds	r3, #24
 8011ea4:	681b      	ldr	r3, [r3, #0]
 8011ea6:	6939      	ldr	r1, [r7, #16]
 8011ea8:	6978      	ldr	r0, [r7, #20]
 8011eaa:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(output);
 8011eac:	697b      	ldr	r3, [r7, #20]
 8011eae:	681b      	ldr	r3, [r3, #0]
 8011eb0:	3318      	adds	r3, #24
 8011eb2:	681b      	ldr	r3, [r3, #0]
 8011eb4:	68f9      	ldr	r1, [r7, #12]
 8011eb6:	6978      	ldr	r0, [r7, #20]
 8011eb8:	4798      	blx	r3

  return kTfLiteOk;
 8011eba:	2300      	movs	r3, #0
}
 8011ebc:	4618      	mov	r0, r3
 8011ebe:	3724      	adds	r7, #36	; 0x24
 8011ec0:	46bd      	mov	sp, r7
 8011ec2:	bd90      	pop	{r4, r7, pc}
 8011ec4:	0802788c 	.word	0x0802788c
 8011ec8:	08027838 	.word	0x08027838
 8011ecc:	08027874 	.word	0x08027874
 8011ed0:	080278a0 	.word	0x080278a0
 8011ed4:	080278b4 	.word	0x080278b4

08011ed8 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_>:
void AveragePoolingEvalFloat(const TfLiteContext* context,
                             const TfLiteNode* node,
                             const TfLitePoolParams* params,
                             const OpDataPooling* data,
                             const TfLiteEvalTensor* input,
                             TfLiteEvalTensor* output) {
 8011ed8:	b590      	push	{r4, r7, lr}
 8011eda:	b0a1      	sub	sp, #132	; 0x84
 8011edc:	af02      	add	r7, sp, #8
 8011ede:	60f8      	str	r0, [r7, #12]
 8011ee0:	60b9      	str	r1, [r7, #8]
 8011ee2:	607a      	str	r2, [r7, #4]
 8011ee4:	603b      	str	r3, [r7, #0]
  PoolParams op_params;
  op_params.stride_height = params->stride_height;
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	689b      	ldr	r3, [r3, #8]
 8011eea:	623b      	str	r3, [r7, #32]
  op_params.stride_width = params->stride_width;
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	685b      	ldr	r3, [r3, #4]
 8011ef0:	627b      	str	r3, [r7, #36]	; 0x24
  op_params.filter_height = params->filter_height;
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	691b      	ldr	r3, [r3, #16]
 8011ef6:	62bb      	str	r3, [r7, #40]	; 0x28
  op_params.filter_width = params->filter_width;
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	68db      	ldr	r3, [r3, #12]
 8011efc:	62fb      	str	r3, [r7, #44]	; 0x2c
  op_params.padding_values.height = data->padding.height;
 8011efe:	683b      	ldr	r3, [r7, #0]
 8011f00:	685b      	ldr	r3, [r3, #4]
 8011f02:	b21b      	sxth	r3, r3
 8011f04:	833b      	strh	r3, [r7, #24]
  op_params.padding_values.width = data->padding.width;
 8011f06:	683b      	ldr	r3, [r7, #0]
 8011f08:	681b      	ldr	r3, [r3, #0]
 8011f0a:	b21b      	sxth	r3, r3
 8011f0c:	82fb      	strh	r3, [r7, #22]
  op_params.float_activation_min = data->activation_min_f32;
 8011f0e:	683b      	ldr	r3, [r7, #0]
 8011f10:	699b      	ldr	r3, [r3, #24]
 8011f12:	63bb      	str	r3, [r7, #56]	; 0x38
  op_params.float_activation_max = data->activation_max_f32;
 8011f14:	683b      	ldr	r3, [r7, #0]
 8011f16:	69db      	ldr	r3, [r3, #28]
 8011f18:	63fb      	str	r3, [r7, #60]	; 0x3c
  reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
 8011f1a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011f1e:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8011f22:	4618      	mov	r0, r3
 8011f24:	f7fe fcdb 	bl	80108de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 8011f28:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8011f2c:	f7f0 fd9e 	bl	8002a6c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 8011f30:	4604      	mov	r4, r0
                             tflite::micro::GetTensorData<float>(input),
                             tflite::micro::GetTensorShape(output),
 8011f32:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8011f36:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8011f3a:	4618      	mov	r0, r3
 8011f3c:	f7fe fccf 	bl	80108de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
 8011f40:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8011f44:	f7f0 fd76 	bl	8002a34 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 8011f48:	4602      	mov	r2, r0
 8011f4a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8011f4e:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8011f52:	f107 0014 	add.w	r0, r7, #20
 8011f56:	9200      	str	r2, [sp, #0]
 8011f58:	4622      	mov	r2, r4
 8011f5a:	f7ff fd91 	bl	8011a80 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>
                             tflite::micro::GetTensorShape(output),
 8011f5e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8011f62:	4618      	mov	r0, r3
 8011f64:	f7f0 fc51 	bl	800280a <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
 8011f68:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011f6c:	4618      	mov	r0, r3
 8011f6e:	f7f0 fc4c 	bl	800280a <_ZN6tflite12RuntimeShapeD1Ev>
                             tflite::micro::GetTensorData<float>(output));
}
 8011f72:	bf00      	nop
 8011f74:	377c      	adds	r7, #124	; 0x7c
 8011f76:	46bd      	mov	sp, r7
 8011f78:	bd90      	pop	{r4, r7, pc}

08011f7a <_ZN6tflite12_GLOBAL__N_120EvalReshapeReferenceEP13TfLiteContextP10TfLiteNode>:
#include "tensorflow/lite/micro/micro_utils.h"

namespace tflite {
namespace {

TfLiteStatus EvalReshapeReference(TfLiteContext* context, TfLiteNode* node) {
 8011f7a:	b580      	push	{r7, lr}
 8011f7c:	b086      	sub	sp, #24
 8011f7e:	af00      	add	r7, sp, #0
 8011f80:	6078      	str	r0, [r7, #4]
 8011f82:	6039      	str	r1, [r7, #0]
  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kReshapeInputTensor);
 8011f84:	2200      	movs	r2, #0
 8011f86:	6839      	ldr	r1, [r7, #0]
 8011f88:	6878      	ldr	r0, [r7, #4]
 8011f8a:	f7fe fc78 	bl	801087e <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8011f8e:	6178      	str	r0, [r7, #20]
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kReshapeOutputTensor);
 8011f90:	2200      	movs	r2, #0
 8011f92:	6839      	ldr	r1, [r7, #0]
 8011f94:	6878      	ldr	r0, [r7, #4]
 8011f96:	f7fe fc82 	bl	801089e <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 8011f9a:	6138      	str	r0, [r7, #16]

  // TODO(b/162522304): storing input bytes in OpData increases some models
  // significantly, possibly due to alignment issues.
  size_t input_bytes;
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(input->type, &input_bytes));
 8011f9c:	697b      	ldr	r3, [r7, #20]
 8011f9e:	7a1b      	ldrb	r3, [r3, #8]
 8011fa0:	f107 0208 	add.w	r2, r7, #8
 8011fa4:	4611      	mov	r1, r2
 8011fa6:	4618      	mov	r0, r3
 8011fa8:	f7f5 fac0 	bl	800752c <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
 8011fac:	4603      	mov	r3, r0
 8011fae:	73fb      	strb	r3, [r7, #15]
 8011fb0:	7bfb      	ldrb	r3, [r7, #15]
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	d001      	beq.n	8011fba <_ZN6tflite12_GLOBAL__N_120EvalReshapeReferenceEP13TfLiteContextP10TfLiteNode+0x40>
 8011fb6:	7bfb      	ldrb	r3, [r7, #15]
 8011fb8:	e018      	b.n	8011fec <_ZN6tflite12_GLOBAL__N_120EvalReshapeReferenceEP13TfLiteContextP10TfLiteNode+0x72>
  input_bytes *= ElementCount(*input->dims);
 8011fba:	697b      	ldr	r3, [r7, #20]
 8011fbc:	685b      	ldr	r3, [r3, #4]
 8011fbe:	4618      	mov	r0, r3
 8011fc0:	f7f9 fcd9 	bl	800b976 <_ZN6tflite12ElementCountERK14TfLiteIntArray>
 8011fc4:	4602      	mov	r2, r0
 8011fc6:	68bb      	ldr	r3, [r7, #8]
 8011fc8:	fb02 f303 	mul.w	r3, r2, r3
 8011fcc:	60bb      	str	r3, [r7, #8]

  // Do nothing for in-place reshape.
  if (input->data.raw != output->data.raw) {
 8011fce:	697b      	ldr	r3, [r7, #20]
 8011fd0:	681a      	ldr	r2, [r3, #0]
 8011fd2:	693b      	ldr	r3, [r7, #16]
 8011fd4:	681b      	ldr	r3, [r3, #0]
 8011fd6:	429a      	cmp	r2, r3
 8011fd8:	d007      	beq.n	8011fea <_ZN6tflite12_GLOBAL__N_120EvalReshapeReferenceEP13TfLiteContextP10TfLiteNode+0x70>
    // Otherwise perform reshape with copy.
    memcpy(output->data.raw, input->data.raw, input_bytes);
 8011fda:	693b      	ldr	r3, [r7, #16]
 8011fdc:	6818      	ldr	r0, [r3, #0]
 8011fde:	697b      	ldr	r3, [r7, #20]
 8011fe0:	681b      	ldr	r3, [r3, #0]
 8011fe2:	68ba      	ldr	r2, [r7, #8]
 8011fe4:	4619      	mov	r1, r3
 8011fe6:	f00e fbe2 	bl	80207ae <memcpy>
  }
  return kTfLiteOk;
 8011fea:	2300      	movs	r3, #0
}
 8011fec:	4618      	mov	r0, r3
 8011fee:	3718      	adds	r7, #24
 8011ff0:	46bd      	mov	sp, r7
 8011ff2:	bd80      	pop	{r7, pc}

08011ff4 <_ZN6tflite16Register_RESHAPEEv>:

}  // namespace

TFLMRegistration Register_RESHAPE() {
 8011ff4:	b580      	push	{r7, lr}
 8011ff6:	b084      	sub	sp, #16
 8011ff8:	af02      	add	r7, sp, #8
 8011ffa:	6078      	str	r0, [r7, #4]
  return tflite::micro::RegisterOp(nullptr, PrepareReshapeReference,
 8011ffc:	6878      	ldr	r0, [r7, #4]
 8011ffe:	2300      	movs	r3, #0
 8012000:	9301      	str	r3, [sp, #4]
 8012002:	2300      	movs	r3, #0
 8012004:	9300      	str	r3, [sp, #0]
 8012006:	4b05      	ldr	r3, [pc, #20]	; (801201c <_ZN6tflite16Register_RESHAPEEv+0x28>)
 8012008:	4a05      	ldr	r2, [pc, #20]	; (8012020 <_ZN6tflite16Register_RESHAPEEv+0x2c>)
 801200a:	2100      	movs	r1, #0
 801200c:	f7fe fbe4 	bl	80107d8 <_ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_ESE_>
                                   EvalReshapeReference);
 8012010:	bf00      	nop
}
 8012012:	6878      	ldr	r0, [r7, #4]
 8012014:	3708      	adds	r7, #8
 8012016:	46bd      	mov	sp, r7
 8012018:	bd80      	pop	{r7, pc}
 801201a:	bf00      	nop
 801201c:	08011f7b 	.word	0x08011f7b
 8012020:	08012251 	.word	0x08012251

08012024 <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode>:

namespace tflite {

namespace {

TfLiteStatus ReshapeOutput(TfLiteContext* context, TfLiteNode* node) {
 8012024:	b5b0      	push	{r4, r5, r7, lr}
 8012026:	b092      	sub	sp, #72	; 0x48
 8012028:	af04      	add	r7, sp, #16
 801202a:	6078      	str	r0, [r7, #4]
 801202c:	6039      	str	r1, [r7, #0]
  MicroContext* micro_context = GetMicroContext(context);
 801202e:	6878      	ldr	r0, [r7, #4]
 8012030:	f7f0 fc71 	bl	8002916 <_ZN6tflite15GetMicroContextEPK13TfLiteContext>
 8012034:	62b8      	str	r0, [r7, #40]	; 0x28

  TfLiteTensor* input =
      micro_context->AllocateTempInputTensor(node, kReshapeInputTensor);
 8012036:	2200      	movs	r2, #0
 8012038:	6839      	ldr	r1, [r7, #0]
 801203a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801203c:	f7f7 ffd8 	bl	8009ff0 <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei>
 8012040:	6278      	str	r0, [r7, #36]	; 0x24
  TF_LITE_ENSURE(context, input != nullptr);
 8012042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012044:	2b00      	cmp	r3, #0
 8012046:	d10a      	bne.n	801205e <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x3a>
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	695c      	ldr	r4, [r3, #20]
 801204c:	4b74      	ldr	r3, [pc, #464]	; (8012220 <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1fc>)
 801204e:	9300      	str	r3, [sp, #0]
 8012050:	2325      	movs	r3, #37	; 0x25
 8012052:	4a74      	ldr	r2, [pc, #464]	; (8012224 <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x200>)
 8012054:	4974      	ldr	r1, [pc, #464]	; (8012228 <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x204>)
 8012056:	6878      	ldr	r0, [r7, #4]
 8012058:	47a0      	blx	r4
 801205a:	2301      	movs	r3, #1
 801205c:	e0db      	b.n	8012216 <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1f2>
  TfLiteTensor* output =
      micro_context->AllocateTempOutputTensor(node, kReshapeOutputTensor);
 801205e:	2200      	movs	r2, #0
 8012060:	6839      	ldr	r1, [r7, #0]
 8012062:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012064:	f7f7 ffe7 	bl	800a036 <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei>
 8012068:	6238      	str	r0, [r7, #32]
  TF_LITE_ENSURE(context, output != nullptr);
 801206a:	6a3b      	ldr	r3, [r7, #32]
 801206c:	2b00      	cmp	r3, #0
 801206e:	d10a      	bne.n	8012086 <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x62>
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	695c      	ldr	r4, [r3, #20]
 8012074:	4b6d      	ldr	r3, [pc, #436]	; (801222c <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x208>)
 8012076:	9300      	str	r3, [sp, #0]
 8012078:	2328      	movs	r3, #40	; 0x28
 801207a:	4a6a      	ldr	r2, [pc, #424]	; (8012224 <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x200>)
 801207c:	496a      	ldr	r1, [pc, #424]	; (8012228 <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x204>)
 801207e:	6878      	ldr	r0, [r7, #4]
 8012080:	47a0      	blx	r4
 8012082:	2301      	movs	r3, #1
 8012084:	e0c7      	b.n	8012216 <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1f2>
  // Tensorflow's Reshape allows one of the shape components to have the
  // special -1 value, meaning it will be calculated automatically based on the
  // input. Here we calculate what that dimension should be so that the number
  // of output elements in the same as the number of input elements.
  int num_input_elements = NumElements(input);
 8012086:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012088:	f7f9 fdb4 	bl	800bbf4 <_ZN6tflite11NumElementsEPK12TfLiteTensor>
 801208c:	4602      	mov	r2, r0
 801208e:	460b      	mov	r3, r1
 8012090:	4613      	mov	r3, r2
 8012092:	61fb      	str	r3, [r7, #28]
  TfLiteIntArray* output_shape = output->dims;
 8012094:	6a3b      	ldr	r3, [r7, #32]
 8012096:	695b      	ldr	r3, [r3, #20]
 8012098:	61bb      	str	r3, [r7, #24]

  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
 801209a:	6838      	ldr	r0, [r7, #0]
 801209c:	f7f0 fc15 	bl	80028ca <_ZN6tflite9NumInputsEPK10TfLiteNode>
 80120a0:	4603      	mov	r3, r0
      output_shape->size == 1 && output_shape->data[0] == 0) {
 80120a2:	2b01      	cmp	r3, #1
 80120a4:	d109      	bne.n	80120ba <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x96>
 80120a6:	69bb      	ldr	r3, [r7, #24]
 80120a8:	681b      	ldr	r3, [r3, #0]
  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
 80120aa:	2b01      	cmp	r3, #1
 80120ac:	d105      	bne.n	80120ba <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x96>
      output_shape->size == 1 && output_shape->data[0] == 0) {
 80120ae:	69bb      	ldr	r3, [r7, #24]
 80120b0:	685b      	ldr	r3, [r3, #4]
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	d101      	bne.n	80120ba <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x96>
 80120b6:	2301      	movs	r3, #1
 80120b8:	e000      	b.n	80120bc <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x98>
 80120ba:	2300      	movs	r3, #0
  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d002      	beq.n	80120c6 <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xa2>
    // Legacy tflite models use a shape parameter of [0] to indicate scalars,
    // so adjust accordingly. TODO(b/111614235): Allow zero-sized buffers during
    // toco conversion.
    output_shape->size = 0;
 80120c0:	69bb      	ldr	r3, [r7, #24]
 80120c2:	2200      	movs	r2, #0
 80120c4:	601a      	str	r2, [r3, #0]
  }

  int num_output_elements = 1;
 80120c6:	2301      	movs	r3, #1
 80120c8:	637b      	str	r3, [r7, #52]	; 0x34
  int stretch_dim = -1;
 80120ca:	f04f 33ff 	mov.w	r3, #4294967295
 80120ce:	633b      	str	r3, [r7, #48]	; 0x30
  for (int i = 0; i < output_shape->size; ++i) {
 80120d0:	2300      	movs	r3, #0
 80120d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80120d4:	e02a      	b.n	801212c <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x108>
    int value = output_shape->data[i];
 80120d6:	69ba      	ldr	r2, [r7, #24]
 80120d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120da:	009b      	lsls	r3, r3, #2
 80120dc:	4413      	add	r3, r2
 80120de:	685b      	ldr	r3, [r3, #4]
 80120e0:	60fb      	str	r3, [r7, #12]
    if (value == -1) {
 80120e2:	68fb      	ldr	r3, [r7, #12]
 80120e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80120e8:	d118      	bne.n	801211c <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xf8>
      TF_LITE_ENSURE_EQ(context, stretch_dim, -1);
 80120ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80120f0:	d011      	beq.n	8012116 <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xf2>
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	695c      	ldr	r4, [r3, #20]
 80120f6:	f04f 33ff 	mov.w	r3, #4294967295
 80120fa:	9303      	str	r3, [sp, #12]
 80120fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120fe:	9302      	str	r3, [sp, #8]
 8012100:	4b4b      	ldr	r3, [pc, #300]	; (8012230 <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x20c>)
 8012102:	9301      	str	r3, [sp, #4]
 8012104:	4b4b      	ldr	r3, [pc, #300]	; (8012234 <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x210>)
 8012106:	9300      	str	r3, [sp, #0]
 8012108:	233d      	movs	r3, #61	; 0x3d
 801210a:	4a46      	ldr	r2, [pc, #280]	; (8012224 <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x200>)
 801210c:	494a      	ldr	r1, [pc, #296]	; (8012238 <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x214>)
 801210e:	6878      	ldr	r0, [r7, #4]
 8012110:	47a0      	blx	r4
 8012112:	2301      	movs	r3, #1
 8012114:	e07f      	b.n	8012216 <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1f2>
      stretch_dim = i;
 8012116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012118:	633b      	str	r3, [r7, #48]	; 0x30
 801211a:	e004      	b.n	8012126 <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x102>
    } else {
      num_output_elements *= value;
 801211c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801211e:	68fa      	ldr	r2, [r7, #12]
 8012120:	fb02 f303 	mul.w	r3, r2, r3
 8012124:	637b      	str	r3, [r7, #52]	; 0x34
  for (int i = 0; i < output_shape->size; ++i) {
 8012126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012128:	3301      	adds	r3, #1
 801212a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801212c:	69bb      	ldr	r3, [r7, #24]
 801212e:	681b      	ldr	r3, [r3, #0]
 8012130:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012132:	429a      	cmp	r2, r3
 8012134:	dbcf      	blt.n	80120d6 <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xb2>
    }
  }
  if (stretch_dim != -1) {
 8012136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012138:	f1b3 3fff 	cmp.w	r3, #4294967295
 801213c:	d026      	beq.n	801218c <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x168>
    TfLiteEvalTensor* output_eval =
        tflite::micro::GetEvalOutput(context, node, kReshapeOutputTensor);
 801213e:	2200      	movs	r2, #0
 8012140:	6839      	ldr	r1, [r7, #0]
 8012142:	6878      	ldr	r0, [r7, #4]
 8012144:	f7fe fbab 	bl	801089e <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 8012148:	6178      	str	r0, [r7, #20]
    TF_LITE_ENSURE_STATUS(tflite::micro::CreateWritableTensorDimsWithCopy(
 801214a:	697a      	ldr	r2, [r7, #20]
 801214c:	6a39      	ldr	r1, [r7, #32]
 801214e:	6878      	ldr	r0, [r7, #4]
 8012150:	f7fe fbfe 	bl	8010950 <_ZN6tflite5micro32CreateWritableTensorDimsWithCopyEP13TfLiteContextP12TfLiteTensorP16TfLiteEvalTensor>
 8012154:	4603      	mov	r3, r0
 8012156:	74fb      	strb	r3, [r7, #19]
 8012158:	7cfb      	ldrb	r3, [r7, #19]
 801215a:	2b00      	cmp	r3, #0
 801215c:	d001      	beq.n	8012162 <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x13e>
 801215e:	7cfb      	ldrb	r3, [r7, #19]
 8012160:	e059      	b.n	8012216 <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1f2>
        context, output, output_eval));
    output_shape = output->dims;  // output tensor dims were moved
 8012162:	6a3b      	ldr	r3, [r7, #32]
 8012164:	695b      	ldr	r3, [r3, #20]
 8012166:	61bb      	str	r3, [r7, #24]
    output_shape->data[stretch_dim] = num_input_elements / num_output_elements;
 8012168:	69fa      	ldr	r2, [r7, #28]
 801216a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801216c:	fb92 f2f3 	sdiv	r2, r2, r3
 8012170:	69b9      	ldr	r1, [r7, #24]
 8012172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012174:	009b      	lsls	r3, r3, #2
 8012176:	440b      	add	r3, r1
 8012178:	605a      	str	r2, [r3, #4]
    num_output_elements *= output_shape->data[stretch_dim];
 801217a:	69ba      	ldr	r2, [r7, #24]
 801217c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801217e:	009b      	lsls	r3, r3, #2
 8012180:	4413      	add	r3, r2
 8012182:	685a      	ldr	r2, [r3, #4]
 8012184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012186:	fb02 f303 	mul.w	r3, r2, r3
 801218a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 801218c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801218e:	7f1a      	ldrb	r2, [r3, #28]
 8012190:	6a3b      	ldr	r3, [r7, #32]
 8012192:	7f1b      	ldrb	r3, [r3, #28]
 8012194:	429a      	cmp	r2, r3
 8012196:	d01a      	beq.n	80121ce <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1aa>
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	695c      	ldr	r4, [r3, #20]
 801219c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801219e:	7f1b      	ldrb	r3, [r3, #28]
 80121a0:	4618      	mov	r0, r3
 80121a2:	f7f3 fad3 	bl	800574c <TfLiteTypeGetName>
 80121a6:	4605      	mov	r5, r0
 80121a8:	6a3b      	ldr	r3, [r7, #32]
 80121aa:	7f1b      	ldrb	r3, [r3, #28]
 80121ac:	4618      	mov	r0, r3
 80121ae:	f7f3 facd 	bl	800574c <TfLiteTypeGetName>
 80121b2:	4603      	mov	r3, r0
 80121b4:	9303      	str	r3, [sp, #12]
 80121b6:	9502      	str	r5, [sp, #8]
 80121b8:	4b20      	ldr	r3, [pc, #128]	; (801223c <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x218>)
 80121ba:	9301      	str	r3, [sp, #4]
 80121bc:	4b20      	ldr	r3, [pc, #128]	; (8012240 <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x21c>)
 80121be:	9300      	str	r3, [sp, #0]
 80121c0:	234d      	movs	r3, #77	; 0x4d
 80121c2:	4a18      	ldr	r2, [pc, #96]	; (8012224 <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x200>)
 80121c4:	491f      	ldr	r1, [pc, #124]	; (8012244 <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x220>)
 80121c6:	6878      	ldr	r0, [r7, #4]
 80121c8:	47a0      	blx	r4
 80121ca:	2301      	movs	r3, #1
 80121cc:	e023      	b.n	8012216 <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1f2>
  TF_LITE_ENSURE_EQ(context, num_input_elements, num_output_elements);
 80121ce:	69fa      	ldr	r2, [r7, #28]
 80121d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121d2:	429a      	cmp	r2, r3
 80121d4:	d010      	beq.n	80121f8 <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1d4>
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	695c      	ldr	r4, [r3, #20]
 80121da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121dc:	9303      	str	r3, [sp, #12]
 80121de:	69fb      	ldr	r3, [r7, #28]
 80121e0:	9302      	str	r3, [sp, #8]
 80121e2:	4b19      	ldr	r3, [pc, #100]	; (8012248 <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x224>)
 80121e4:	9301      	str	r3, [sp, #4]
 80121e6:	4b19      	ldr	r3, [pc, #100]	; (801224c <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x228>)
 80121e8:	9300      	str	r3, [sp, #0]
 80121ea:	234e      	movs	r3, #78	; 0x4e
 80121ec:	4a0d      	ldr	r2, [pc, #52]	; (8012224 <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x200>)
 80121ee:	4912      	ldr	r1, [pc, #72]	; (8012238 <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x214>)
 80121f0:	6878      	ldr	r0, [r7, #4]
 80121f2:	47a0      	blx	r4
 80121f4:	2301      	movs	r3, #1
 80121f6:	e00e      	b.n	8012216 <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1f2>

  micro_context->DeallocateTempTfLiteTensor(input);
 80121f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121fa:	681b      	ldr	r3, [r3, #0]
 80121fc:	3318      	adds	r3, #24
 80121fe:	681b      	ldr	r3, [r3, #0]
 8012200:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012202:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012204:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(output);
 8012206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012208:	681b      	ldr	r3, [r3, #0]
 801220a:	3318      	adds	r3, #24
 801220c:	681b      	ldr	r3, [r3, #0]
 801220e:	6a39      	ldr	r1, [r7, #32]
 8012210:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012212:	4798      	blx	r3
  return kTfLiteOk;
 8012214:	2300      	movs	r3, #0
}
 8012216:	4618      	mov	r0, r3
 8012218:	3738      	adds	r7, #56	; 0x38
 801221a:	46bd      	mov	sp, r7
 801221c:	bdb0      	pop	{r4, r5, r7, pc}
 801221e:	bf00      	nop
 8012220:	0802795c 	.word	0x0802795c
 8012224:	08027908 	.word	0x08027908
 8012228:	08027944 	.word	0x08027944
 801222c:	08027970 	.word	0x08027970
 8012230:	080279a0 	.word	0x080279a0
 8012234:	080279a4 	.word	0x080279a4
 8012238:	08027984 	.word	0x08027984
 801223c:	080279cc 	.word	0x080279cc
 8012240:	080279dc 	.word	0x080279dc
 8012244:	080279b0 	.word	0x080279b0
 8012248:	080279e8 	.word	0x080279e8
 801224c:	080279fc 	.word	0x080279fc

08012250 <_ZN6tflite23PrepareReshapeReferenceEP13TfLiteContextP10TfLiteNode>:

}  // namespace

TfLiteStatus PrepareReshapeReference(TfLiteContext* context, TfLiteNode* node) {
 8012250:	b590      	push	{r4, r7, lr}
 8012252:	b087      	sub	sp, #28
 8012254:	af04      	add	r7, sp, #16
 8012256:	6078      	str	r0, [r7, #4]
 8012258:	6039      	str	r1, [r7, #0]
  TF_LITE_ENSURE(context, NumInputs(node) == 1 || NumInputs(node) == 2);
 801225a:	6838      	ldr	r0, [r7, #0]
 801225c:	f7f0 fb35 	bl	80028ca <_ZN6tflite9NumInputsEPK10TfLiteNode>
 8012260:	4603      	mov	r3, r0
 8012262:	2b01      	cmp	r3, #1
 8012264:	d007      	beq.n	8012276 <_ZN6tflite23PrepareReshapeReferenceEP13TfLiteContextP10TfLiteNode+0x26>
 8012266:	6838      	ldr	r0, [r7, #0]
 8012268:	f7f0 fb2f 	bl	80028ca <_ZN6tflite9NumInputsEPK10TfLiteNode>
 801226c:	4603      	mov	r3, r0
 801226e:	2b02      	cmp	r3, #2
 8012270:	d001      	beq.n	8012276 <_ZN6tflite23PrepareReshapeReferenceEP13TfLiteContextP10TfLiteNode+0x26>
 8012272:	2301      	movs	r3, #1
 8012274:	e000      	b.n	8012278 <_ZN6tflite23PrepareReshapeReferenceEP13TfLiteContextP10TfLiteNode+0x28>
 8012276:	2300      	movs	r3, #0
 8012278:	2b00      	cmp	r3, #0
 801227a:	d00a      	beq.n	8012292 <_ZN6tflite23PrepareReshapeReferenceEP13TfLiteContextP10TfLiteNode+0x42>
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	695c      	ldr	r4, [r3, #20]
 8012280:	4b27      	ldr	r3, [pc, #156]	; (8012320 <_ZN6tflite23PrepareReshapeReferenceEP13TfLiteContextP10TfLiteNode+0xd0>)
 8012282:	9300      	str	r3, [sp, #0]
 8012284:	2358      	movs	r3, #88	; 0x58
 8012286:	4a27      	ldr	r2, [pc, #156]	; (8012324 <_ZN6tflite23PrepareReshapeReferenceEP13TfLiteContextP10TfLiteNode+0xd4>)
 8012288:	4927      	ldr	r1, [pc, #156]	; (8012328 <_ZN6tflite23PrepareReshapeReferenceEP13TfLiteContextP10TfLiteNode+0xd8>)
 801228a:	6878      	ldr	r0, [r7, #4]
 801228c:	47a0      	blx	r4
 801228e:	2301      	movs	r3, #1
 8012290:	e041      	b.n	8012316 <_ZN6tflite23PrepareReshapeReferenceEP13TfLiteContextP10TfLiteNode+0xc6>
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 8012292:	6838      	ldr	r0, [r7, #0]
 8012294:	f7f0 fb2c 	bl	80028f0 <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 8012298:	4603      	mov	r3, r0
 801229a:	2b01      	cmp	r3, #1
 801229c:	bf14      	ite	ne
 801229e:	2301      	movne	r3, #1
 80122a0:	2300      	moveq	r3, #0
 80122a2:	b2db      	uxtb	r3, r3
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	d013      	beq.n	80122d0 <_ZN6tflite23PrepareReshapeReferenceEP13TfLiteContextP10TfLiteNode+0x80>
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	695c      	ldr	r4, [r3, #20]
 80122ac:	6838      	ldr	r0, [r7, #0]
 80122ae:	f7f0 fb1f 	bl	80028f0 <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 80122b2:	4603      	mov	r3, r0
 80122b4:	2201      	movs	r2, #1
 80122b6:	9203      	str	r2, [sp, #12]
 80122b8:	9302      	str	r3, [sp, #8]
 80122ba:	4b1c      	ldr	r3, [pc, #112]	; (801232c <_ZN6tflite23PrepareReshapeReferenceEP13TfLiteContextP10TfLiteNode+0xdc>)
 80122bc:	9301      	str	r3, [sp, #4]
 80122be:	4b1c      	ldr	r3, [pc, #112]	; (8012330 <_ZN6tflite23PrepareReshapeReferenceEP13TfLiteContextP10TfLiteNode+0xe0>)
 80122c0:	9300      	str	r3, [sp, #0]
 80122c2:	2359      	movs	r3, #89	; 0x59
 80122c4:	4a17      	ldr	r2, [pc, #92]	; (8012324 <_ZN6tflite23PrepareReshapeReferenceEP13TfLiteContextP10TfLiteNode+0xd4>)
 80122c6:	491b      	ldr	r1, [pc, #108]	; (8012334 <_ZN6tflite23PrepareReshapeReferenceEP13TfLiteContextP10TfLiteNode+0xe4>)
 80122c8:	6878      	ldr	r0, [r7, #4]
 80122ca:	47a0      	blx	r4
 80122cc:	2301      	movs	r3, #1
 80122ce:	e022      	b.n	8012316 <_ZN6tflite23PrepareReshapeReferenceEP13TfLiteContextP10TfLiteNode+0xc6>
  TF_LITE_ENSURE_EQ(context, ReshapeOutput(context, node), kTfLiteOk);
 80122d0:	6839      	ldr	r1, [r7, #0]
 80122d2:	6878      	ldr	r0, [r7, #4]
 80122d4:	f7ff fea6 	bl	8012024 <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode>
 80122d8:	4603      	mov	r3, r0
 80122da:	2b00      	cmp	r3, #0
 80122dc:	bf14      	ite	ne
 80122de:	2301      	movne	r3, #1
 80122e0:	2300      	moveq	r3, #0
 80122e2:	b2db      	uxtb	r3, r3
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	d015      	beq.n	8012314 <_ZN6tflite23PrepareReshapeReferenceEP13TfLiteContextP10TfLiteNode+0xc4>
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	695c      	ldr	r4, [r3, #20]
 80122ec:	6839      	ldr	r1, [r7, #0]
 80122ee:	6878      	ldr	r0, [r7, #4]
 80122f0:	f7ff fe98 	bl	8012024 <_ZN6tflite12_GLOBAL__N_113ReshapeOutputEP13TfLiteContextP10TfLiteNode>
 80122f4:	4603      	mov	r3, r0
 80122f6:	461a      	mov	r2, r3
 80122f8:	2300      	movs	r3, #0
 80122fa:	9303      	str	r3, [sp, #12]
 80122fc:	9202      	str	r2, [sp, #8]
 80122fe:	4b0e      	ldr	r3, [pc, #56]	; (8012338 <_ZN6tflite23PrepareReshapeReferenceEP13TfLiteContextP10TfLiteNode+0xe8>)
 8012300:	9301      	str	r3, [sp, #4]
 8012302:	4b0e      	ldr	r3, [pc, #56]	; (801233c <_ZN6tflite23PrepareReshapeReferenceEP13TfLiteContextP10TfLiteNode+0xec>)
 8012304:	9300      	str	r3, [sp, #0]
 8012306:	235a      	movs	r3, #90	; 0x5a
 8012308:	4a06      	ldr	r2, [pc, #24]	; (8012324 <_ZN6tflite23PrepareReshapeReferenceEP13TfLiteContextP10TfLiteNode+0xd4>)
 801230a:	490a      	ldr	r1, [pc, #40]	; (8012334 <_ZN6tflite23PrepareReshapeReferenceEP13TfLiteContextP10TfLiteNode+0xe4>)
 801230c:	6878      	ldr	r0, [r7, #4]
 801230e:	47a0      	blx	r4
 8012310:	2301      	movs	r3, #1
 8012312:	e000      	b.n	8012316 <_ZN6tflite23PrepareReshapeReferenceEP13TfLiteContextP10TfLiteNode+0xc6>
  return kTfLiteOk;
 8012314:	2300      	movs	r3, #0
}
 8012316:	4618      	mov	r0, r3
 8012318:	370c      	adds	r7, #12
 801231a:	46bd      	mov	sp, r7
 801231c:	bd90      	pop	{r4, r7, pc}
 801231e:	bf00      	nop
 8012320:	08027a10 	.word	0x08027a10
 8012324:	08027908 	.word	0x08027908
 8012328:	08027944 	.word	0x08027944
 801232c:	08027a40 	.word	0x08027a40
 8012330:	08027a44 	.word	0x08027a44
 8012334:	08027984 	.word	0x08027984
 8012338:	08027a58 	.word	0x08027a58
 801233c:	08027a64 	.word	0x08027a64

08012340 <_ZN6tflite9LUTLookupEsPKs>:
inline int16_t LUTLookup(int16_t value, const int16_t* lut) {
 8012340:	b580      	push	{r7, lr}
 8012342:	b086      	sub	sp, #24
 8012344:	af00      	add	r7, sp, #0
 8012346:	4603      	mov	r3, r0
 8012348:	6039      	str	r1, [r7, #0]
 801234a:	80fb      	strh	r3, [r7, #6]
  const uint16_t index = static_cast<uint16_t>(256 + (value >> 7));
 801234c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012350:	11db      	asrs	r3, r3, #7
 8012352:	b21b      	sxth	r3, r3
 8012354:	b29b      	uxth	r3, r3
 8012356:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801235a:	82fb      	strh	r3, [r7, #22]
  assert(index < 512 && "LUT index out of range.");
 801235c:	8afb      	ldrh	r3, [r7, #22]
 801235e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012362:	d306      	bcc.n	8012372 <_ZN6tflite9LUTLookupEsPKs+0x32>
 8012364:	4b1a      	ldr	r3, [pc, #104]	; (80123d0 <_ZN6tflite9LUTLookupEsPKs+0x90>)
 8012366:	4a1b      	ldr	r2, [pc, #108]	; (80123d4 <_ZN6tflite9LUTLookupEsPKs+0x94>)
 8012368:	f240 215b 	movw	r1, #603	; 0x25b
 801236c:	481a      	ldr	r0, [pc, #104]	; (80123d8 <_ZN6tflite9LUTLookupEsPKs+0x98>)
 801236e:	f00d fb7f 	bl	801fa70 <__assert_func>
  const int16_t offset = value & 0x7f;
 8012372:	88fb      	ldrh	r3, [r7, #6]
 8012374:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012378:	82bb      	strh	r3, [r7, #20]
  const int16_t base = lut[index];
 801237a:	8afb      	ldrh	r3, [r7, #22]
 801237c:	005b      	lsls	r3, r3, #1
 801237e:	683a      	ldr	r2, [r7, #0]
 8012380:	4413      	add	r3, r2
 8012382:	881b      	ldrh	r3, [r3, #0]
 8012384:	827b      	strh	r3, [r7, #18]
  const int16_t slope = lut[index + 1] - lut[index];
 8012386:	8afb      	ldrh	r3, [r7, #22]
 8012388:	3301      	adds	r3, #1
 801238a:	005b      	lsls	r3, r3, #1
 801238c:	683a      	ldr	r2, [r7, #0]
 801238e:	4413      	add	r3, r2
 8012390:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012394:	b29a      	uxth	r2, r3
 8012396:	8afb      	ldrh	r3, [r7, #22]
 8012398:	005b      	lsls	r3, r3, #1
 801239a:	6839      	ldr	r1, [r7, #0]
 801239c:	440b      	add	r3, r1
 801239e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80123a2:	b29b      	uxth	r3, r3
 80123a4:	1ad3      	subs	r3, r2, r3
 80123a6:	b29b      	uxth	r3, r3
 80123a8:	823b      	strh	r3, [r7, #16]
  const int delta = (slope * offset + 64) >> 7;
 80123aa:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80123ae:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80123b2:	fb02 f303 	mul.w	r3, r2, r3
 80123b6:	3340      	adds	r3, #64	; 0x40
 80123b8:	11db      	asrs	r3, r3, #7
 80123ba:	60fb      	str	r3, [r7, #12]
  return static_cast<int16_t>(base + delta);
 80123bc:	68fb      	ldr	r3, [r7, #12]
 80123be:	b29a      	uxth	r2, r3
 80123c0:	8a7b      	ldrh	r3, [r7, #18]
 80123c2:	4413      	add	r3, r2
 80123c4:	b29b      	uxth	r3, r3
 80123c6:	b21b      	sxth	r3, r3
}
 80123c8:	4618      	mov	r0, r3
 80123ca:	3718      	adds	r7, #24
 80123cc:	46bd      	mov	sp, r7
 80123ce:	bd80      	pop	{r7, pc}
 80123d0:	08027a84 	.word	0x08027a84
 80123d4:	08027ab0 	.word	0x08027ab0
 80123d8:	08027ae4 	.word	0x08027ae4

080123dc <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
namespace tflite {
namespace reference_ops {

inline void Softmax(const SoftmaxParams& params,
                    const RuntimeShape& input_shape, const float* input_data,
                    const RuntimeShape& output_shape, float* output_data) {
 80123dc:	b580      	push	{r7, lr}
 80123de:	b08e      	sub	sp, #56	; 0x38
 80123e0:	af00      	add	r7, sp, #0
 80123e2:	60f8      	str	r0, [r7, #12]
 80123e4:	60b9      	str	r1, [r7, #8]
 80123e6:	607a      	str	r2, [r7, #4]
 80123e8:	603b      	str	r3, [r7, #0]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 80123ea:	68b8      	ldr	r0, [r7, #8]
 80123ec:	f7f0 fa18 	bl	8002820 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80123f0:	4603      	mov	r3, r0
 80123f2:	3b01      	subs	r3, #1
 80123f4:	623b      	str	r3, [r7, #32]
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 80123f6:	683a      	ldr	r2, [r7, #0]
 80123f8:	6a39      	ldr	r1, [r7, #32]
 80123fa:	68b8      	ldr	r0, [r7, #8]
 80123fc:	f7fe fb16 	bl	8010a2c <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 8012400:	61f8      	str	r0, [r7, #28]
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 8012402:	6a3b      	ldr	r3, [r7, #32]
 8012404:	683a      	ldr	r2, [r7, #0]
 8012406:	6a39      	ldr	r1, [r7, #32]
 8012408:	68b8      	ldr	r0, [r7, #8]
 801240a:	f7f9 fc8b 	bl	800bd24 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801240e:	61b8      	str	r0, [r7, #24]

  for (int i = 0; i < outer_size; ++i) {
 8012410:	2300      	movs	r3, #0
 8012412:	637b      	str	r3, [r7, #52]	; 0x34
 8012414:	e081      	b.n	801251a <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x13e>
    // Find max element value which we'll use to ensure numerical stability
    // taking advantage of the following equality:
    // exp(x[i])/sum(exp(x[i])) == exp(x[i]+C)/sum(exp(x[i]+C))
    float max = std::numeric_limits<float>::lowest();
 8012416:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 801241a:	613b      	str	r3, [r7, #16]
    for (int c = 0; c < depth; ++c) {
 801241c:	2300      	movs	r3, #0
 801241e:	633b      	str	r3, [r7, #48]	; 0x30
 8012420:	e014      	b.n	801244c <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x70>
      max = std::max(max, input_data[i * depth + c]);
 8012422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012424:	69ba      	ldr	r2, [r7, #24]
 8012426:	fb03 f202 	mul.w	r2, r3, r2
 801242a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801242c:	4413      	add	r3, r2
 801242e:	009b      	lsls	r3, r3, #2
 8012430:	687a      	ldr	r2, [r7, #4]
 8012432:	441a      	add	r2, r3
 8012434:	f107 0310 	add.w	r3, r7, #16
 8012438:	4611      	mov	r1, r2
 801243a:	4618      	mov	r0, r3
 801243c:	f7f3 fcad 	bl	8005d9a <_ZSt3maxIfERKT_S2_S2_>
 8012440:	4603      	mov	r3, r0
 8012442:	681b      	ldr	r3, [r3, #0]
 8012444:	613b      	str	r3, [r7, #16]
    for (int c = 0; c < depth; ++c) {
 8012446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012448:	3301      	adds	r3, #1
 801244a:	633b      	str	r3, [r7, #48]	; 0x30
 801244c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801244e:	69bb      	ldr	r3, [r7, #24]
 8012450:	429a      	cmp	r2, r3
 8012452:	dbe6      	blt.n	8012422 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x46>
    }

    // Compute sum.
    float sum = 0.f;
 8012454:	f04f 0300 	mov.w	r3, #0
 8012458:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (int c = 0; c < depth; ++c) {
 801245a:	2300      	movs	r3, #0
 801245c:	62bb      	str	r3, [r7, #40]	; 0x28
 801245e:	e031      	b.n	80124c4 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xe8>
      const float exp_c = std::exp((input_data[i * depth + c] - max) *
 8012460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012462:	69ba      	ldr	r2, [r7, #24]
 8012464:	fb03 f202 	mul.w	r2, r3, r2
 8012468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801246a:	4413      	add	r3, r2
 801246c:	009b      	lsls	r3, r3, #2
 801246e:	687a      	ldr	r2, [r7, #4]
 8012470:	4413      	add	r3, r2
 8012472:	ed93 7a00 	vldr	s14, [r3]
 8012476:	edd7 7a04 	vldr	s15, [r7, #16]
 801247a:	ee77 6a67 	vsub.f32	s13, s14, s15
                                   static_cast<float>(params.beta));
 801247e:	68fb      	ldr	r3, [r7, #12]
 8012480:	ed93 7b00 	vldr	d7, [r3]
 8012484:	eef7 7bc7 	vcvt.f32.f64	s15, d7
      const float exp_c = std::exp((input_data[i * depth + c] - max) *
 8012488:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801248c:	eeb0 0a67 	vmov.f32	s0, s15
 8012490:	f7f3 fed3 	bl	800623a <_ZSt3expf>
 8012494:	ed87 0a05 	vstr	s0, [r7, #20]
      output_data[i * depth + c] = exp_c;
 8012498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801249a:	69ba      	ldr	r2, [r7, #24]
 801249c:	fb03 f202 	mul.w	r2, r3, r2
 80124a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124a2:	4413      	add	r3, r2
 80124a4:	009b      	lsls	r3, r3, #2
 80124a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80124a8:	4413      	add	r3, r2
 80124aa:	697a      	ldr	r2, [r7, #20]
 80124ac:	601a      	str	r2, [r3, #0]
      sum += exp_c;
 80124ae:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80124b2:	edd7 7a05 	vldr	s15, [r7, #20]
 80124b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80124ba:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    for (int c = 0; c < depth; ++c) {
 80124be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124c0:	3301      	adds	r3, #1
 80124c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80124c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80124c6:	69bb      	ldr	r3, [r7, #24]
 80124c8:	429a      	cmp	r2, r3
 80124ca:	dbc9      	blt.n	8012460 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x84>
    }

    // Compute result.
    for (int c = 0; c < depth; ++c) {
 80124cc:	2300      	movs	r3, #0
 80124ce:	627b      	str	r3, [r7, #36]	; 0x24
 80124d0:	e01c      	b.n	801250c <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x130>
      output_data[i * depth + c] = output_data[i * depth + c] / sum;
 80124d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80124d4:	69ba      	ldr	r2, [r7, #24]
 80124d6:	fb03 f202 	mul.w	r2, r3, r2
 80124da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124dc:	4413      	add	r3, r2
 80124de:	009b      	lsls	r3, r3, #2
 80124e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80124e2:	4413      	add	r3, r2
 80124e4:	edd3 6a00 	vldr	s13, [r3]
 80124e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80124ea:	69ba      	ldr	r2, [r7, #24]
 80124ec:	fb03 f202 	mul.w	r2, r3, r2
 80124f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124f2:	4413      	add	r3, r2
 80124f4:	009b      	lsls	r3, r3, #2
 80124f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80124f8:	4413      	add	r3, r2
 80124fa:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80124fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012502:	edc3 7a00 	vstr	s15, [r3]
    for (int c = 0; c < depth; ++c) {
 8012506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012508:	3301      	adds	r3, #1
 801250a:	627b      	str	r3, [r7, #36]	; 0x24
 801250c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801250e:	69bb      	ldr	r3, [r7, #24]
 8012510:	429a      	cmp	r2, r3
 8012512:	dbde      	blt.n	80124d2 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xf6>
  for (int i = 0; i < outer_size; ++i) {
 8012514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012516:	3301      	adds	r3, #1
 8012518:	637b      	str	r3, [r7, #52]	; 0x34
 801251a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801251c:	69fb      	ldr	r3, [r7, #28]
 801251e:	429a      	cmp	r2, r3
 8012520:	f6ff af79 	blt.w	8012416 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x3a>
    }
  }
}
 8012524:	bf00      	nop
 8012526:	bf00      	nop
 8012528:	3738      	adds	r7, #56	; 0x38
 801252a:	46bd      	mov	sp, r7
 801252c:	bd80      	pop	{r7, pc}
	...

08012530 <_ZN6tflite13reference_ops19SoftMaxCalculateExpERKNS_13SoftmaxParamsEPKsisii>:
}

// Computes exp(input - max_input)
inline int16_t SoftMaxCalculateExp(const SoftmaxParams& params,
                                   const int16_t* input_data, const int depth,
                                   int16_t max_in_row, int i, int c) {
 8012530:	b580      	push	{r7, lr}
 8012532:	b08a      	sub	sp, #40	; 0x28
 8012534:	af00      	add	r7, sp, #0
 8012536:	60f8      	str	r0, [r7, #12]
 8012538:	60b9      	str	r1, [r7, #8]
 801253a:	607a      	str	r2, [r7, #4]
 801253c:	807b      	strh	r3, [r7, #2]
  int32_t input_diff = input_data[i * depth + c] - max_in_row;
 801253e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012540:	687a      	ldr	r2, [r7, #4]
 8012542:	fb03 f202 	mul.w	r2, r3, r2
 8012546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012548:	4413      	add	r3, r2
 801254a:	005b      	lsls	r3, r3, #1
 801254c:	68ba      	ldr	r2, [r7, #8]
 801254e:	4413      	add	r3, r2
 8012550:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012554:	461a      	mov	r2, r3
 8012556:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801255a:	1ad3      	subs	r3, r2, r3
 801255c:	627b      	str	r3, [r7, #36]	; 0x24
  // scale the input_diff such that [-65535, 0] correspond to [-10.0, 0.0]
  // exp lut generated with range [-10, 0], as exp(-10) is negligible.
  int32_t scaled_diff = MultiplyByQuantizedMultiplier(
      input_diff, params.input_multiplier, params.input_left_shift);
 801255e:	68fb      	ldr	r3, [r7, #12]
 8012560:	6899      	ldr	r1, [r3, #8]
 8012562:	68fb      	ldr	r3, [r7, #12]
 8012564:	68db      	ldr	r3, [r3, #12]
  int32_t scaled_diff = MultiplyByQuantizedMultiplier(
 8012566:	461a      	mov	r2, r3
 8012568:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801256a:	f7f3 fa17 	bl	800599c <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 801256e:	6238      	str	r0, [r7, #32]
  // recenter to [-32768, 32767]
  int32_t sym_scaled_diff = scaled_diff + 32767;
 8012570:	6a3a      	ldr	r2, [r7, #32]
 8012572:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8012576:	4413      	add	r3, r2
 8012578:	613b      	str	r3, [r7, #16]
  int16_t sat_sym_scaled_diff =
      std::min(std::max(sym_scaled_diff, static_cast<int32_t>(-32768)),
 801257a:	4b12      	ldr	r3, [pc, #72]	; (80125c4 <_ZN6tflite13reference_ops19SoftMaxCalculateExpERKNS_13SoftmaxParamsEPKsisii+0x94>)
 801257c:	617b      	str	r3, [r7, #20]
 801257e:	f107 0214 	add.w	r2, r7, #20
 8012582:	f107 0310 	add.w	r3, r7, #16
 8012586:	4611      	mov	r1, r2
 8012588:	4618      	mov	r0, r3
 801258a:	f7f3 fe8e 	bl	80062aa <_ZSt3maxIlERKT_S2_S2_>
 801258e:	4602      	mov	r2, r0
               static_cast<int32_t>(32767));
 8012590:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8012594:	61bb      	str	r3, [r7, #24]
      std::min(std::max(sym_scaled_diff, static_cast<int32_t>(-32768)),
 8012596:	f107 0318 	add.w	r3, r7, #24
 801259a:	4619      	mov	r1, r3
 801259c:	4610      	mov	r0, r2
 801259e:	f7f3 fe70 	bl	8006282 <_ZSt3minIlERKT_S2_S2_>
 80125a2:	4603      	mov	r3, r0
 80125a4:	681b      	ldr	r3, [r3, #0]
               static_cast<int32_t>(32767));
 80125a6:	83fb      	strh	r3, [r7, #30]
  // apply the exp() LUT activation function
  return LUTLookup(sat_sym_scaled_diff, params.exp_lut);
 80125a8:	68fb      	ldr	r3, [r7, #12]
 80125aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80125ac:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80125b0:	4611      	mov	r1, r2
 80125b2:	4618      	mov	r0, r3
 80125b4:	f7ff fec4 	bl	8012340 <_ZN6tflite9LUTLookupEsPKs>
 80125b8:	4603      	mov	r3, r0
}
 80125ba:	4618      	mov	r0, r3
 80125bc:	3728      	adds	r7, #40	; 0x28
 80125be:	46bd      	mov	sp, r7
 80125c0:	bd80      	pop	{r7, pc}
 80125c2:	bf00      	nop
 80125c4:	ffff8000 	.word	0xffff8000

080125c8 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps>:
// Quantized softmax with int16_t input and int16_t output.
inline void SoftmaxInt16(const SoftmaxParams& params,
                         const RuntimeShape& input_shape,
                         const int16_t* input_data,
                         const RuntimeShape& output_shape,
                         int16_t* output_data) {
 80125c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125cc:	b0ab      	sub	sp, #172	; 0xac
 80125ce:	af02      	add	r7, sp, #8
 80125d0:	63f8      	str	r0, [r7, #60]	; 0x3c
 80125d2:	63b9      	str	r1, [r7, #56]	; 0x38
 80125d4:	637a      	str	r2, [r7, #52]	; 0x34
 80125d6:	633b      	str	r3, [r7, #48]	; 0x30
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 80125d8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80125da:	f7f0 f921 	bl	8002820 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80125de:	4603      	mov	r3, r0
 80125e0:	3b01      	subs	r3, #1
 80125e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 80125e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80125e8:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80125ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80125ee:	f7fe fa1d 	bl	8010a2c <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 80125f2:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 80125f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80125fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80125fc:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8012600:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012602:	f7f9 fb8f 	bl	800bd24 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8012606:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80

  for (int i = 0; i < outer_size; ++i) {
 801260a:	2300      	movs	r3, #0
 801260c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8012610:	e156      	b.n	80128c0 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x2f8>
    // Find the largest element
    int16_t max_in_row = std::numeric_limits<int16_t>::min();
 8012612:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012616:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    for (int c = 0; c < depth; ++c) {
 801261a:	2300      	movs	r3, #0
 801261c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012620:	e01b      	b.n	801265a <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x92>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 8012622:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8012626:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801262a:	fb03 f202 	mul.w	r2, r3, r2
 801262e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012632:	4413      	add	r3, r2
 8012634:	005a      	lsls	r2, r3, #1
 8012636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012638:	441a      	add	r2, r3
 801263a:	f107 034e 	add.w	r3, r7, #78	; 0x4e
 801263e:	4611      	mov	r1, r2
 8012640:	4618      	mov	r0, r3
 8012642:	f7f3 fdbe 	bl	80061c2 <_ZSt3maxIsERKT_S2_S2_>
 8012646:	4603      	mov	r3, r0
 8012648:	f9b3 3000 	ldrsh.w	r3, [r3]
 801264c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    for (int c = 0; c < depth; ++c) {
 8012650:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012654:	3301      	adds	r3, #1
 8012656:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801265a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801265e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012662:	429a      	cmp	r2, r3
 8012664:	dbdd      	blt.n	8012622 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x5a>

    // This loops computes the exp values and their sum. We will need the exp
    // values later on in the function so we cache them in the output_data
    // buffer. This is an optimization done to avoid calculating the exp values
    // twice making use of the output_data buffer as scratch memory.
    int32_t sum_of_exps = 0;  // Q16.15 fixed point format.
 8012666:	2300      	movs	r3, #0
 8012668:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    int16_t* exp_results_Q015 = output_data + i * depth;
 801266c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8012670:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012674:	fb02 f303 	mul.w	r3, r2, r3
 8012678:	005a      	lsls	r2, r3, #1
 801267a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801267e:	4413      	add	r3, r2
 8012680:	67fb      	str	r3, [r7, #124]	; 0x7c
    for (int c = 0; c < depth; ++c) {
 8012682:	2300      	movs	r3, #0
 8012684:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8012688:	e027      	b.n	80126da <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x112>
      exp_results_Q015[c] =
          SoftMaxCalculateExp(params, input_data, depth, max_in_row, i, c);
 801268a:	f9b7 104e 	ldrsh.w	r1, [r7, #78]	; 0x4e
      exp_results_Q015[c] =
 801268e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012692:	005a      	lsls	r2, r3, #1
 8012694:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012696:	189c      	adds	r4, r3, r2
          SoftMaxCalculateExp(params, input_data, depth, max_in_row, i, c);
 8012698:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801269c:	9301      	str	r3, [sp, #4]
 801269e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80126a2:	9300      	str	r3, [sp, #0]
 80126a4:	460b      	mov	r3, r1
 80126a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80126aa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80126ac:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80126ae:	f7ff ff3f 	bl	8012530 <_ZN6tflite13reference_ops19SoftMaxCalculateExpERKNS_13SoftmaxParamsEPKsisii>
 80126b2:	4603      	mov	r3, r0
      exp_results_Q015[c] =
 80126b4:	8023      	strh	r3, [r4, #0]
      sum_of_exps += exp_results_Q015[c];
 80126b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80126ba:	005a      	lsls	r2, r3, #1
 80126bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80126be:	4413      	add	r3, r2
 80126c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80126c4:	461a      	mov	r2, r3
 80126c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80126ca:	4413      	add	r3, r2
 80126cc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    for (int c = 0; c < depth; ++c) {
 80126d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80126d4:	3301      	adds	r3, #1
 80126d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80126da:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80126de:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80126e2:	429a      	cmp	r2, r3
 80126e4:	dbd1      	blt.n	801268a <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0xc2>
    }

    // Compute the reciprocal 1/sum_of_exps
    uint8_t headroom_plus_one =
        CountLeadingZeros(static_cast<uint32_t>(sum_of_exps));
 80126e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80126ea:	4618      	mov	r0, r3
 80126ec:	f7f3 fdf1 	bl	80062d2 <_ZN6tflite17CountLeadingZerosImEEiT_>
 80126f0:	4603      	mov	r3, r0
 80126f2:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
    int32_t shifted_sum =
        ((static_cast<int64_t>(sum_of_exps) << (headroom_plus_one - 1)) +
 80126f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80126fa:	17da      	asrs	r2, r3, #31
 80126fc:	623b      	str	r3, [r7, #32]
 80126fe:	627a      	str	r2, [r7, #36]	; 0x24
 8012700:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8012704:	1e59      	subs	r1, r3, #1
 8012706:	f1a1 0320 	sub.w	r3, r1, #32
 801270a:	f1c1 0220 	rsb	r2, r1, #32
 801270e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012710:	fa00 f901 	lsl.w	r9, r0, r1
 8012714:	6a38      	ldr	r0, [r7, #32]
 8012716:	fa00 f303 	lsl.w	r3, r0, r3
 801271a:	ea49 0903 	orr.w	r9, r9, r3
 801271e:	6a3b      	ldr	r3, [r7, #32]
 8012720:	fa23 f202 	lsr.w	r2, r3, r2
 8012724:	ea49 0902 	orr.w	r9, r9, r2
 8012728:	6a3b      	ldr	r3, [r7, #32]
 801272a:	fa03 f801 	lsl.w	r8, r3, r1
 801272e:	f518 5300 	adds.w	r3, r8, #8192	; 0x2000
 8012732:	61bb      	str	r3, [r7, #24]
 8012734:	f149 0300 	adc.w	r3, r9, #0
 8012738:	61fb      	str	r3, [r7, #28]
         (1 << 13)) >>
 801273a:	f04f 0200 	mov.w	r2, #0
 801273e:	f04f 0300 	mov.w	r3, #0
 8012742:	69b9      	ldr	r1, [r7, #24]
 8012744:	0b8a      	lsrs	r2, r1, #14
 8012746:	69f9      	ldr	r1, [r7, #28]
 8012748:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 801274c:	69f9      	ldr	r1, [r7, #28]
 801274e:	138b      	asrs	r3, r1, #14
    int32_t shifted_sum =
 8012750:	4613      	mov	r3, r2
 8012752:	677b      	str	r3, [r7, #116]	; 0x74
        14;
    // since the LUT computes 1/(1 + x) we need to first compute x = (sum - 1).
    // also, the LUT expects a symmetrical input, so we must also recenter x
    // from [0, 65535] to [-32768, 32767].
    int32_t sym_shifted_sum = shifted_sum + (-((1 << 15) + (1 << 16)));
 8012754:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012756:	f5a3 33c0 	sub.w	r3, r3, #98304	; 0x18000
 801275a:	64bb      	str	r3, [r7, #72]	; 0x48
    int16_t sat_sym_shifted_sum = static_cast<int16_t>(
        std::min(std::max(sym_shifted_sum, static_cast<int32_t>(-32768)),
 801275c:	4b5f      	ldr	r3, [pc, #380]	; (80128dc <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x314>)
 801275e:	653b      	str	r3, [r7, #80]	; 0x50
 8012760:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8012764:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012768:	4611      	mov	r1, r2
 801276a:	4618      	mov	r0, r3
 801276c:	f7f3 fd9d 	bl	80062aa <_ZSt3maxIlERKT_S2_S2_>
 8012770:	4602      	mov	r2, r0
                 static_cast<int32_t>(32767)));
 8012772:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8012776:	657b      	str	r3, [r7, #84]	; 0x54
        std::min(std::max(sym_shifted_sum, static_cast<int32_t>(-32768)),
 8012778:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801277c:	4619      	mov	r1, r3
 801277e:	4610      	mov	r0, r2
 8012780:	f7f3 fd7f 	bl	8006282 <_ZSt3minIlERKT_S2_S2_>
 8012784:	4603      	mov	r3, r0
 8012786:	681b      	ldr	r3, [r3, #0]
                 static_cast<int32_t>(32767)));
 8012788:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
    // apply 1/(1 + x) LUT activation function
    int16_t reciprocal_scale_Q015 =
        LUTLookup(sat_sym_shifted_sum, params.one_over_one_plus_x_lut);
 801278c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801278e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012790:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 8012794:	4611      	mov	r1, r2
 8012796:	4618      	mov	r0, r3
 8012798:	f7ff fdd2 	bl	8012340 <_ZN6tflite9LUTLookupEsPKs>
 801279c:	4603      	mov	r3, r0
 801279e:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70

    // Rescale the exp_result with reciprocal
    // range of output is [0, 32767] correspond to [0.0, 1.0]
    for (int c = 0; c < depth; ++c) {
 80127a2:	2300      	movs	r3, #0
 80127a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80127a8:	e07e      	b.n	80128a8 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x2e0>
      uint8_t right_shift = 31 - headroom_plus_one;
 80127aa:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80127ae:	f1c3 031f 	rsb	r3, r3, #31
 80127b2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      int64_t round = 1 << (right_shift - 1);
 80127b6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80127ba:	1e5a      	subs	r2, r3, #1
 80127bc:	2301      	movs	r3, #1
 80127be:	4093      	lsls	r3, r2
 80127c0:	17da      	asrs	r2, r3, #31
 80127c2:	603b      	str	r3, [r7, #0]
 80127c4:	607a      	str	r2, [r7, #4]
 80127c6:	e9d7 3400 	ldrd	r3, r4, [r7]
 80127ca:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
 80127ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80127d2:	005a      	lsls	r2, r3, #1
 80127d4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80127d6:	4413      	add	r3, r2
 80127d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80127dc:	b21b      	sxth	r3, r3
 80127de:	17da      	asrs	r2, r3, #31
 80127e0:	613b      	str	r3, [r7, #16]
 80127e2:	617a      	str	r2, [r7, #20]
                            static_cast<int64_t>(reciprocal_scale_Q015) +
 80127e4:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 80127e8:	17da      	asrs	r2, r3, #31
 80127ea:	60bb      	str	r3, [r7, #8]
 80127ec:	60fa      	str	r2, [r7, #12]
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
 80127ee:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80127f2:	460b      	mov	r3, r1
 80127f4:	68ba      	ldr	r2, [r7, #8]
 80127f6:	fb02 f203 	mul.w	r2, r2, r3
 80127fa:	68fb      	ldr	r3, [r7, #12]
 80127fc:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8012800:	4601      	mov	r1, r0
 8012802:	fb01 f303 	mul.w	r3, r1, r3
 8012806:	4413      	add	r3, r2
 8012808:	693a      	ldr	r2, [r7, #16]
 801280a:	68b9      	ldr	r1, [r7, #8]
 801280c:	fba2 ab01 	umull	sl, fp, r2, r1
 8012810:	445b      	add	r3, fp
 8012812:	469b      	mov	fp, r3
                            static_cast<int64_t>(reciprocal_scale_Q015) +
 8012814:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8012818:	eb1a 0502 	adds.w	r5, sl, r2
 801281c:	eb4b 0603 	adc.w	r6, fp, r3
                        round) >>
                       right_shift;
 8012820:	f897 106f 	ldrb.w	r1, [r7, #111]	; 0x6f
                        round) >>
 8012824:	f1c1 0320 	rsb	r3, r1, #32
 8012828:	f1b1 0220 	subs.w	r2, r1, #32
 801282c:	fa25 f001 	lsr.w	r0, r5, r1
 8012830:	62b8      	str	r0, [r7, #40]	; 0x28
 8012832:	fa06 f303 	lsl.w	r3, r6, r3
 8012836:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012838:	ea40 0003 	orr.w	r0, r0, r3
 801283c:	62b8      	str	r0, [r7, #40]	; 0x28
 801283e:	d404      	bmi.n	801284a <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x282>
 8012840:	fa46 f202 	asr.w	r2, r6, r2
 8012844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012846:	4313      	orrs	r3, r2
 8012848:	62bb      	str	r3, [r7, #40]	; 0x28
 801284a:	fa46 f301 	asr.w	r3, r6, r1
 801284e:	62fb      	str	r3, [r7, #44]	; 0x2c
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
 8012850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012852:	647b      	str	r3, [r7, #68]	; 0x44
      output_data[i * depth + c] = static_cast<int16_t>(
          std::min(std::max(result, static_cast<int32_t>(0)),
 8012854:	2300      	movs	r3, #0
 8012856:	65bb      	str	r3, [r7, #88]	; 0x58
 8012858:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801285c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8012860:	4611      	mov	r1, r2
 8012862:	4618      	mov	r0, r3
 8012864:	f7f3 fd21 	bl	80062aa <_ZSt3maxIlERKT_S2_S2_>
 8012868:	4602      	mov	r2, r0
                   static_cast<int32_t>(32767)));
 801286a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801286e:	65fb      	str	r3, [r7, #92]	; 0x5c
          std::min(std::max(result, static_cast<int32_t>(0)),
 8012870:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8012874:	4619      	mov	r1, r3
 8012876:	4610      	mov	r0, r2
 8012878:	f7f3 fd03 	bl	8006282 <_ZSt3minIlERKT_S2_S2_>
 801287c:	4603      	mov	r3, r0
 801287e:	6819      	ldr	r1, [r3, #0]
      output_data[i * depth + c] = static_cast<int16_t>(
 8012880:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8012884:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012888:	fb03 f202 	mul.w	r2, r3, r2
 801288c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012890:	4413      	add	r3, r2
 8012892:	005a      	lsls	r2, r3, #1
 8012894:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8012898:	441a      	add	r2, r3
 801289a:	b20b      	sxth	r3, r1
 801289c:	8013      	strh	r3, [r2, #0]
    for (int c = 0; c < depth; ++c) {
 801289e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80128a2:	3301      	adds	r3, #1
 80128a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80128a8:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80128ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80128b0:	429a      	cmp	r2, r3
 80128b2:	f6ff af7a 	blt.w	80127aa <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x1e2>
  for (int i = 0; i < outer_size; ++i) {
 80128b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80128ba:	3301      	adds	r3, #1
 80128bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80128c0:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80128c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80128c8:	429a      	cmp	r2, r3
 80128ca:	f6ff aea2 	blt.w	8012612 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x4a>
    }
  }
}
 80128ce:	bf00      	nop
 80128d0:	bf00      	nop
 80128d2:	37a4      	adds	r7, #164	; 0xa4
 80128d4:	46bd      	mov	sp, r7
 80128d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128da:	bf00      	nop
 80128dc:	ffff8000 	.word	0xffff8000

080128e0 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE>:

namespace tflite {
namespace {

void SoftmaxQuantized(const TfLiteEvalTensor* input, TfLiteEvalTensor* output,
                      const SoftmaxParams& op_data) {
 80128e0:	b590      	push	{r4, r7, lr}
 80128e2:	b0b1      	sub	sp, #196	; 0xc4
 80128e4:	af02      	add	r7, sp, #8
 80128e6:	60f8      	str	r0, [r7, #12]
 80128e8:	60b9      	str	r1, [r7, #8]
 80128ea:	607a      	str	r2, [r7, #4]
  if (input->type == kTfLiteInt8) {
 80128ec:	68fb      	ldr	r3, [r7, #12]
 80128ee:	7a1b      	ldrb	r3, [r3, #8]
 80128f0:	2b09      	cmp	r3, #9
 80128f2:	d153      	bne.n	801299c <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0xbc>
    if (output->type == kTfLiteInt16) {
 80128f4:	68bb      	ldr	r3, [r7, #8]
 80128f6:	7a1b      	ldrb	r3, [r3, #8]
 80128f8:	2b07      	cmp	r3, #7
 80128fa:	d127      	bne.n	801294c <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x6c>
      tflite::reference_ops::Softmax(
          op_data, tflite::micro::GetTensorShape(input),
 80128fc:	f107 0310 	add.w	r3, r7, #16
 8012900:	68f9      	ldr	r1, [r7, #12]
 8012902:	4618      	mov	r0, r3
 8012904:	f7fd ffeb 	bl	80108de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 8012908:	68f8      	ldr	r0, [r7, #12]
 801290a:	f7f9 f8d8 	bl	800babe <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 801290e:	4604      	mov	r4, r0
          tflite::micro::GetTensorData<int8_t>(input),
          tflite::micro::GetTensorShape(output),
 8012910:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012914:	68b9      	ldr	r1, [r7, #8]
 8012916:	4618      	mov	r0, r3
 8012918:	f7fd ffe1 	bl	80108de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 801291c:	68b8      	ldr	r0, [r7, #8]
 801291e:	f7f0 f815 	bl	800294c <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
 8012922:	4602      	mov	r2, r0
 8012924:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012928:	f107 0110 	add.w	r1, r7, #16
 801292c:	9200      	str	r2, [sp, #0]
 801292e:	4622      	mov	r2, r4
 8012930:	6878      	ldr	r0, [r7, #4]
 8012932:	f000 f8f1 	bl	8012b18 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
          tflite::micro::GetTensorShape(output),
 8012936:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801293a:	4618      	mov	r0, r3
 801293c:	f7ef ff65 	bl	800280a <_ZN6tflite12RuntimeShapeD1Ev>
          op_data, tflite::micro::GetTensorShape(input),
 8012940:	f107 0310 	add.w	r3, r7, #16
 8012944:	4618      	mov	r0, r3
 8012946:	f7ef ff60 	bl	800280a <_ZN6tflite12RuntimeShapeD1Ev>
        op_data, tflite::micro::GetTensorShape(input),
        tflite::micro::GetTensorData<int16_t>(input),
        tflite::micro::GetTensorShape(output),
        tflite::micro::GetTensorData<int16_t>(output));
  }
}
 801294a:	e04e      	b.n	80129ea <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x10a>
          op_data, tflite::micro::GetTensorShape(input),
 801294c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012950:	68f9      	ldr	r1, [r7, #12]
 8012952:	4618      	mov	r0, r3
 8012954:	f7fd ffc3 	bl	80108de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 8012958:	68f8      	ldr	r0, [r7, #12]
 801295a:	f7f9 f8b0 	bl	800babe <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 801295e:	4604      	mov	r4, r0
          tflite::micro::GetTensorShape(output),
 8012960:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8012964:	68b9      	ldr	r1, [r7, #8]
 8012966:	4618      	mov	r0, r3
 8012968:	f7fd ffb9 	bl	80108de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 801296c:	68b8      	ldr	r0, [r7, #8]
 801296e:	f7f9 f8b5 	bl	800badc <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 8012972:	4602      	mov	r2, r0
 8012974:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8012978:	f107 0148 	add.w	r1, r7, #72	; 0x48
 801297c:	9200      	str	r2, [sp, #0]
 801297e:	4622      	mov	r2, r4
 8012980:	6878      	ldr	r0, [r7, #4]
 8012982:	f000 f9f1 	bl	8012d68 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
          tflite::micro::GetTensorShape(output),
 8012986:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801298a:	4618      	mov	r0, r3
 801298c:	f7ef ff3d 	bl	800280a <_ZN6tflite12RuntimeShapeD1Ev>
          op_data, tflite::micro::GetTensorShape(input),
 8012990:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012994:	4618      	mov	r0, r3
 8012996:	f7ef ff38 	bl	800280a <_ZN6tflite12RuntimeShapeD1Ev>
}
 801299a:	e026      	b.n	80129ea <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x10a>
        op_data, tflite::micro::GetTensorShape(input),
 801299c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80129a0:	68f9      	ldr	r1, [r7, #12]
 80129a2:	4618      	mov	r0, r3
 80129a4:	f7fd ff9b 	bl	80108de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::SoftmaxInt16(
 80129a8:	68f8      	ldr	r0, [r7, #12]
 80129aa:	f7ef ffc0 	bl	800292e <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>
 80129ae:	4604      	mov	r4, r0
        tflite::micro::GetTensorShape(output),
 80129b0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80129b4:	68b9      	ldr	r1, [r7, #8]
 80129b6:	4618      	mov	r0, r3
 80129b8:	f7fd ff91 	bl	80108de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::SoftmaxInt16(
 80129bc:	68b8      	ldr	r0, [r7, #8]
 80129be:	f7ef ffc5 	bl	800294c <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
 80129c2:	4602      	mov	r2, r0
 80129c4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80129c8:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80129cc:	9200      	str	r2, [sp, #0]
 80129ce:	4622      	mov	r2, r4
 80129d0:	6878      	ldr	r0, [r7, #4]
 80129d2:	f7ff fdf9 	bl	80125c8 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps>
        tflite::micro::GetTensorShape(output),
 80129d6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80129da:	4618      	mov	r0, r3
 80129dc:	f7ef ff15 	bl	800280a <_ZN6tflite12RuntimeShapeD1Ev>
        op_data, tflite::micro::GetTensorShape(input),
 80129e0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80129e4:	4618      	mov	r0, r3
 80129e6:	f7ef ff10 	bl	800280a <_ZN6tflite12RuntimeShapeD1Ev>
}
 80129ea:	bf00      	nop
 80129ec:	37bc      	adds	r7, #188	; 0xbc
 80129ee:	46bd      	mov	sp, r7
 80129f0:	bd90      	pop	{r4, r7, pc}
	...

080129f4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
 80129f4:	b5b0      	push	{r4, r5, r7, lr}
 80129f6:	b0a2      	sub	sp, #136	; 0x88
 80129f8:	af02      	add	r7, sp, #8
 80129fa:	6078      	str	r0, [r7, #4]
 80129fc:	6039      	str	r1, [r7, #0]
  const TfLiteEvalTensor* input = tflite::micro::GetEvalInput(context, node, 0);
 80129fe:	2200      	movs	r2, #0
 8012a00:	6839      	ldr	r1, [r7, #0]
 8012a02:	6878      	ldr	r0, [r7, #4]
 8012a04:	f7fd ff3b 	bl	801087e <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8012a08:	67f8      	str	r0, [r7, #124]	; 0x7c
  TfLiteEvalTensor* output = tflite::micro::GetEvalOutput(context, node, 0);
 8012a0a:	2200      	movs	r2, #0
 8012a0c:	6839      	ldr	r1, [r7, #0]
 8012a0e:	6878      	ldr	r0, [r7, #4]
 8012a10:	f7fd ff45 	bl	801089e <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 8012a14:	67b8      	str	r0, [r7, #120]	; 0x78

  TFLITE_DCHECK(node->user_data != nullptr);
 8012a16:	683b      	ldr	r3, [r7, #0]
 8012a18:	68db      	ldr	r3, [r3, #12]
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	d101      	bne.n	8012a22 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x2e>
 8012a1e:	f00d f81f 	bl	801fa60 <abort>
  SoftmaxParams op_data = *static_cast<SoftmaxParams*>(node->user_data);
 8012a22:	683b      	ldr	r3, [r7, #0]
 8012a24:	68db      	ldr	r3, [r3, #12]
 8012a26:	f107 0408 	add.w	r4, r7, #8
 8012a2a:	461d      	mov	r5, r3
 8012a2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012a2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012a30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012a32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012a34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012a36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012a38:	e895 0003 	ldmia.w	r5, {r0, r1}
 8012a3c:	e884 0003 	stmia.w	r4, {r0, r1}

  switch (input->type) {
 8012a40:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012a42:	7a1b      	ldrb	r3, [r3, #8]
 8012a44:	2b09      	cmp	r3, #9
 8012a46:	d030      	beq.n	8012aaa <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xb6>
 8012a48:	2b09      	cmp	r3, #9
 8012a4a:	dc37      	bgt.n	8012abc <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xc8>
 8012a4c:	2b01      	cmp	r3, #1
 8012a4e:	d002      	beq.n	8012a56 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x62>
 8012a50:	2b07      	cmp	r3, #7
 8012a52:	d02a      	beq.n	8012aaa <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xb6>
 8012a54:	e032      	b.n	8012abc <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xc8>
    case kTfLiteFloat32: {
      tflite::reference_ops::Softmax(
          op_data, tflite::micro::GetTensorShape(input),
 8012a56:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8012a5a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8012a5c:	4618      	mov	r0, r3
 8012a5e:	f7fd ff3e 	bl	80108de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 8012a62:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8012a64:	f7f0 f802 	bl	8002a6c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 8012a68:	4604      	mov	r4, r0
          tflite::micro::GetTensorData<float>(input),
          tflite::micro::GetTensorShape(output),
 8012a6a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8012a6e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8012a70:	4618      	mov	r0, r3
 8012a72:	f7fd ff34 	bl	80108de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 8012a76:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8012a78:	f7ef ffdc 	bl	8002a34 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 8012a7c:	4602      	mov	r2, r0
 8012a7e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8012a82:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8012a86:	f107 0008 	add.w	r0, r7, #8
 8012a8a:	9200      	str	r2, [sp, #0]
 8012a8c:	4622      	mov	r2, r4
 8012a8e:	f7ff fca5 	bl	80123dc <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>
          tflite::micro::GetTensorShape(output),
 8012a92:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8012a96:	4618      	mov	r0, r3
 8012a98:	f7ef feb7 	bl	800280a <_ZN6tflite12RuntimeShapeD1Ev>
          op_data, tflite::micro::GetTensorShape(input),
 8012a9c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8012aa0:	4618      	mov	r0, r3
 8012aa2:	f7ef feb2 	bl	800280a <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorData<float>(output));
      return kTfLiteOk;
 8012aa6:	2300      	movs	r3, #0
 8012aa8:	e015      	b.n	8012ad6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe2>
    }
    case kTfLiteInt8:
    case kTfLiteInt16: {
      SoftmaxQuantized(input, output, op_data);
 8012aaa:	f107 0308 	add.w	r3, r7, #8
 8012aae:	461a      	mov	r2, r3
 8012ab0:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8012ab2:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8012ab4:	f7ff ff14 	bl	80128e0 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE>
      return kTfLiteOk;
 8012ab8:	2300      	movs	r3, #0
 8012aba:	e00c      	b.n	8012ad6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe2>
    }
    default:
      MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
 8012abc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012abe:	7a1b      	ldrb	r3, [r3, #8]
 8012ac0:	4618      	mov	r0, r3
 8012ac2:	f7f2 fe43 	bl	800574c <TfLiteTypeGetName>
 8012ac6:	4601      	mov	r1, r0
                  input->type);
 8012ac8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012aca:	7a1b      	ldrb	r3, [r3, #8]
      MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
 8012acc:	461a      	mov	r2, r3
 8012ace:	4804      	ldr	r0, [pc, #16]	; (8012ae0 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xec>)
 8012ad0:	f7f8 fe9e 	bl	800b810 <_Z11MicroPrintfPKcz>
      return kTfLiteError;
 8012ad4:	2301      	movs	r3, #1
  }
}
 8012ad6:	4618      	mov	r0, r3
 8012ad8:	3780      	adds	r7, #128	; 0x80
 8012ada:	46bd      	mov	sp, r7
 8012adc:	bdb0      	pop	{r4, r5, r7, pc}
 8012ade:	bf00      	nop
 8012ae0:	08027b1c 	.word	0x08027b1c

08012ae4 <_ZN6tflite16Register_SOFTMAXEv>:
}  // namespace

TFLMRegistration Register_SOFTMAX() {
 8012ae4:	b580      	push	{r7, lr}
 8012ae6:	b084      	sub	sp, #16
 8012ae8:	af02      	add	r7, sp, #8
 8012aea:	6078      	str	r0, [r7, #4]
  return tflite::micro::RegisterOp(SoftmaxInit, SoftmaxPrepare, SoftmaxEval);
 8012aec:	6878      	ldr	r0, [r7, #4]
 8012aee:	2300      	movs	r3, #0
 8012af0:	9301      	str	r3, [sp, #4]
 8012af2:	2300      	movs	r3, #0
 8012af4:	9300      	str	r3, [sp, #0]
 8012af6:	4b05      	ldr	r3, [pc, #20]	; (8012b0c <_ZN6tflite16Register_SOFTMAXEv+0x28>)
 8012af8:	4a05      	ldr	r2, [pc, #20]	; (8012b10 <_ZN6tflite16Register_SOFTMAXEv+0x2c>)
 8012afa:	4906      	ldr	r1, [pc, #24]	; (8012b14 <_ZN6tflite16Register_SOFTMAXEv+0x30>)
 8012afc:	f7fd fe6c 	bl	80107d8 <_ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_ESE_>
 8012b00:	bf00      	nop
}
 8012b02:	6878      	ldr	r0, [r7, #4]
 8012b04:	3708      	adds	r7, #8
 8012b06:	46bd      	mov	sp, r7
 8012b08:	bd80      	pop	{r7, pc}
 8012b0a:	bf00      	nop
 8012b0c:	080129f5 	.word	0x080129f5
 8012b10:	080136e9 	.word	0x080136e9
 8012b14:	080136bd 	.word	0x080136bd

08012b18 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
 8012b18:	b590      	push	{r4, r7, lr}
 8012b1a:	b0a1      	sub	sp, #132	; 0x84
 8012b1c:	af00      	add	r7, sp, #0
 8012b1e:	60f8      	str	r0, [r7, #12]
 8012b20:	60b9      	str	r1, [r7, #8]
 8012b22:	607a      	str	r2, [r7, #4]
 8012b24:	603b      	str	r3, [r7, #0]
  const int32_t input_beta_multiplier = params.input_multiplier;
 8012b26:	68fb      	ldr	r3, [r7, #12]
 8012b28:	689b      	ldr	r3, [r3, #8]
 8012b2a:	66fb      	str	r3, [r7, #108]	; 0x6c
  const int32_t input_beta_left_shift = params.input_left_shift;
 8012b2c:	68fb      	ldr	r3, [r7, #12]
 8012b2e:	68db      	ldr	r3, [r3, #12]
 8012b30:	66bb      	str	r3, [r7, #104]	; 0x68
  const int diff_min = params.diff_min;
 8012b32:	68fb      	ldr	r3, [r7, #12]
 8012b34:	699b      	ldr	r3, [r3, #24]
 8012b36:	667b      	str	r3, [r7, #100]	; 0x64
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 8012b38:	68b8      	ldr	r0, [r7, #8]
 8012b3a:	f7ef fe71 	bl	8002820 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8012b3e:	4603      	mov	r3, r0
 8012b40:	3b01      	subs	r3, #1
 8012b42:	663b      	str	r3, [r7, #96]	; 0x60
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 8012b44:	683a      	ldr	r2, [r7, #0]
 8012b46:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8012b48:	68b8      	ldr	r0, [r7, #8]
 8012b4a:	f7fd ff6f 	bl	8010a2c <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 8012b4e:	65f8      	str	r0, [r7, #92]	; 0x5c
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 8012b50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012b52:	683a      	ldr	r2, [r7, #0]
 8012b54:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8012b56:	68b8      	ldr	r0, [r7, #8]
 8012b58:	f7f9 f8e4 	bl	800bd24 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8012b5c:	65b8      	str	r0, [r7, #88]	; 0x58
  for (int i = 0; i < outer_size; ++i) {
 8012b5e:	2300      	movs	r3, #0
 8012b60:	67fb      	str	r3, [r7, #124]	; 0x7c
 8012b62:	e0f7      	b.n	8012d54 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x23c>
    InputT max_in_row = std::numeric_limits<InputT>::min();
 8012b64:	2380      	movs	r3, #128	; 0x80
 8012b66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    for (int c = 0; c < depth; ++c) {
 8012b6a:	2300      	movs	r3, #0
 8012b6c:	67bb      	str	r3, [r7, #120]	; 0x78
 8012b6e:	e016      	b.n	8012b9e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x86>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 8012b70:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012b72:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012b74:	fb03 f202 	mul.w	r2, r3, r2
 8012b78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012b7a:	4413      	add	r3, r2
 8012b7c:	461a      	mov	r2, r3
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	441a      	add	r2, r3
 8012b82:	f107 0333 	add.w	r3, r7, #51	; 0x33
 8012b86:	4611      	mov	r1, r2
 8012b88:	4618      	mov	r0, r3
 8012b8a:	f7f3 fb30 	bl	80061ee <_ZSt3maxIaERKT_S2_S2_>
 8012b8e:	4603      	mov	r3, r0
 8012b90:	f993 3000 	ldrsb.w	r3, [r3]
 8012b94:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    for (int c = 0; c < depth; ++c) {
 8012b98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012b9a:	3301      	adds	r3, #1
 8012b9c:	67bb      	str	r3, [r7, #120]	; 0x78
 8012b9e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8012ba0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012ba2:	429a      	cmp	r2, r3
 8012ba4:	dbe4      	blt.n	8012b70 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x58>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
 8012ba6:	f000 fa07 	bl	8012fb8 <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>
 8012baa:	4603      	mov	r3, r0
 8012bac:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (int c = 0; c < depth; ++c) {
 8012bae:	2300      	movs	r3, #0
 8012bb0:	677b      	str	r3, [r7, #116]	; 0x74
 8012bb2:	e02f      	b.n	8012c14 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xfc>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 8012bb4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012bb6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012bb8:	fb03 f202 	mul.w	r2, r3, r2
 8012bbc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012bbe:	4413      	add	r3, r2
 8012bc0:	461a      	mov	r2, r3
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	4413      	add	r3, r2
 8012bc6:	f993 3000 	ldrsb.w	r3, [r3]
 8012bca:	461a      	mov	r2, r3
 8012bcc:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
      int32_t input_diff =
 8012bd0:	1ad3      	subs	r3, r2, r3
 8012bd2:	647b      	str	r3, [r7, #68]	; 0x44
      if (input_diff >= diff_min) {
 8012bd4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012bd6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012bd8:	429a      	cmp	r2, r3
 8012bda:	db18      	blt.n	8012c0e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xf6>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 8012bdc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8012bde:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8012be0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8012be2:	f7fc fbdc 	bl	800f39e <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 8012be6:	6438      	str	r0, [r7, #64]	; 0x40
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 8012be8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8012bea:	f7fd ff4e 	bl	8010a8a <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 8012bee:	4603      	mov	r3, r0
 8012bf0:	623b      	str	r3, [r7, #32]
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
 8012bf2:	6a38      	ldr	r0, [r7, #32]
 8012bf4:	f7fd ff5a 	bl	8010aac <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 8012bf8:	4603      	mov	r3, r0
 8012bfa:	4618      	mov	r0, r3
 8012bfc:	f7fe f89e 	bl	8010d3c <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 8012c00:	4603      	mov	r3, r0
 8012c02:	4619      	mov	r1, r3
 8012c04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012c06:	f7fe f8b3 	bl	8010d70 <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8012c0a:	4603      	mov	r3, r0
 8012c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (int c = 0; c < depth; ++c) {
 8012c0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012c10:	3301      	adds	r3, #1
 8012c12:	677b      	str	r3, [r7, #116]	; 0x74
 8012c14:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8012c16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012c18:	429a      	cmp	r2, r3
 8012c1a:	dbcb      	blt.n	8012bb4 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x9c>
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));
 8012c1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012c20:	4618      	mov	r0, r3
 8012c22:	f7fe f9f8 	bl	8011016 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8012c26:	4603      	mov	r3, r0
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
 8012c28:	681b      	ldr	r3, [r3, #0]
 8012c2a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8012c2e:	210c      	movs	r1, #12
 8012c30:	4618      	mov	r0, r3
 8012c32:	f7fc fbc7 	bl	800f3c4 <_ZN6tflite13GetReciprocalEliPi>
 8012c36:	4603      	mov	r3, r0
 8012c38:	4618      	mov	r0, r3
 8012c3a:	f7fc fbee 	bl	800f41a <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8012c3e:	4603      	mov	r3, r0
 8012c40:	627b      	str	r3, [r7, #36]	; 0x24
    const int exponent = num_bits_over_unit + 31 - (sizeof(OutputT) * 8);
 8012c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c44:	330f      	adds	r3, #15
 8012c46:	657b      	str	r3, [r7, #84]	; 0x54
    TFLITE_CHECK(0 <= exponent && exponent <= 31);
 8012c48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012c4a:	2b00      	cmp	r3, #0
 8012c4c:	db02      	blt.n	8012c54 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x13c>
 8012c4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012c50:	2b1f      	cmp	r3, #31
 8012c52:	dd01      	ble.n	8012c58 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x140>
 8012c54:	f00c ff04 	bl	801fa60 <abort>
    for (int c = 0; c < depth; ++c) {
 8012c58:	2300      	movs	r3, #0
 8012c5a:	673b      	str	r3, [r7, #112]	; 0x70
 8012c5c:	e073      	b.n	8012d46 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x22e>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 8012c5e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012c60:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012c62:	fb03 f202 	mul.w	r2, r3, r2
 8012c66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012c68:	4413      	add	r3, r2
 8012c6a:	461a      	mov	r2, r3
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	4413      	add	r3, r2
 8012c70:	f993 3000 	ldrsb.w	r3, [r3]
 8012c74:	461a      	mov	r2, r3
 8012c76:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
      int32_t input_diff =
 8012c7a:	1ad3      	subs	r3, r2, r3
 8012c7c:	653b      	str	r3, [r7, #80]	; 0x50
      if (input_diff >= diff_min) {
 8012c7e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012c80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012c82:	429a      	cmp	r2, r3
 8012c84:	db4e      	blt.n	8012d24 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x20c>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 8012c86:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8012c88:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8012c8a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8012c8c:	f7fc fb87 	bl	800f39e <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 8012c90:	64f8      	str	r0, [r7, #76]	; 0x4c
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 8012c92:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8012c94:	f7fd fef9 	bl	8010a8a <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 8012c98:	4603      	mov	r3, r0
 8012c9a:	61fb      	str	r3, [r7, #28]
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
 8012c9c:	69f8      	ldr	r0, [r7, #28]
 8012c9e:	f7fd ff05 	bl	8010aac <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 8012ca2:	4603      	mov	r3, r0
 8012ca4:	61bb      	str	r3, [r7, #24]
            (shifted_scale * exp_in_0).raw(), exponent);
 8012ca6:	69b9      	ldr	r1, [r7, #24]
 8012ca8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012caa:	f7fe f95f 	bl	8010f6c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8012cae:	4603      	mov	r3, r0
 8012cb0:	637b      	str	r3, [r7, #52]	; 0x34
 8012cb2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8012cb6:	4618      	mov	r0, r3
 8012cb8:	f7f3 fb1e 	bl	80062f8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8012cbc:	4603      	mov	r3, r0
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 8012cbe:	681b      	ldr	r3, [r3, #0]
 8012cc0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012cc2:	4618      	mov	r0, r3
 8012cc4:	f7f2 ff2a 	bl	8005b1c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8012cc8:	64b8      	str	r0, [r7, #72]	; 0x48
            static_cast<int32_t>(std::numeric_limits<OutputT>::min());
 8012cca:	f7f3 fac7 	bl	800625c <_ZNSt14numeric_limitsIsE3minEv>
 8012cce:	4603      	mov	r3, r0
 8012cd0:	461a      	mov	r2, r3
            unsat_output +
 8012cd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012cd4:	4413      	add	r3, r2
        const int32_t shifted_output =
 8012cd6:	617b      	str	r3, [r7, #20]
                     static_cast<int32_t>(std::numeric_limits<OutputT>::max())),
 8012cd8:	f7f3 faca 	bl	8006270 <_ZNSt14numeric_limitsIsE3maxEv>
 8012cdc:	4603      	mov	r3, r0
 8012cde:	63bb      	str	r3, [r7, #56]	; 0x38
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
 8012ce0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8012ce4:	f107 0314 	add.w	r3, r7, #20
 8012ce8:	4611      	mov	r1, r2
 8012cea:	4618      	mov	r0, r3
 8012cec:	f7f3 fac9 	bl	8006282 <_ZSt3minIlERKT_S2_S2_>
 8012cf0:	4604      	mov	r4, r0
            static_cast<int32_t>(std::numeric_limits<OutputT>::min())));
 8012cf2:	f7f3 fab3 	bl	800625c <_ZNSt14numeric_limitsIsE3minEv>
 8012cf6:	4603      	mov	r3, r0
 8012cf8:	63fb      	str	r3, [r7, #60]	; 0x3c
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
 8012cfa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8012cfe:	4619      	mov	r1, r3
 8012d00:	4620      	mov	r0, r4
 8012d02:	f7f3 fad2 	bl	80062aa <_ZSt3maxIlERKT_S2_S2_>
 8012d06:	4603      	mov	r3, r0
 8012d08:	6819      	ldr	r1, [r3, #0]
 8012d0a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012d0c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012d0e:	fb03 f202 	mul.w	r2, r3, r2
 8012d12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012d14:	4413      	add	r3, r2
 8012d16:	005b      	lsls	r3, r3, #1
 8012d18:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8012d1c:	4413      	add	r3, r2
 8012d1e:	b20a      	sxth	r2, r1
 8012d20:	801a      	strh	r2, [r3, #0]
 8012d22:	e00d      	b.n	8012d40 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x228>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
 8012d24:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012d26:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012d28:	fb03 f202 	mul.w	r2, r3, r2
 8012d2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012d2e:	4413      	add	r3, r2
 8012d30:	005b      	lsls	r3, r3, #1
 8012d32:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8012d36:	18d4      	adds	r4, r2, r3
 8012d38:	f7f3 fa90 	bl	800625c <_ZNSt14numeric_limitsIsE3minEv>
 8012d3c:	4603      	mov	r3, r0
 8012d3e:	8023      	strh	r3, [r4, #0]
    for (int c = 0; c < depth; ++c) {
 8012d40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012d42:	3301      	adds	r3, #1
 8012d44:	673b      	str	r3, [r7, #112]	; 0x70
 8012d46:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8012d48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012d4a:	429a      	cmp	r2, r3
 8012d4c:	db87      	blt.n	8012c5e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x146>
  for (int i = 0; i < outer_size; ++i) {
 8012d4e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012d50:	3301      	adds	r3, #1
 8012d52:	67fb      	str	r3, [r7, #124]	; 0x7c
 8012d54:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8012d56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012d58:	429a      	cmp	r2, r3
 8012d5a:	f6ff af03 	blt.w	8012b64 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x4c>
}
 8012d5e:	bf00      	nop
 8012d60:	bf00      	nop
 8012d62:	3784      	adds	r7, #132	; 0x84
 8012d64:	46bd      	mov	sp, r7
 8012d66:	bd90      	pop	{r4, r7, pc}

08012d68 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
 8012d68:	b590      	push	{r4, r7, lr}
 8012d6a:	b0a1      	sub	sp, #132	; 0x84
 8012d6c:	af00      	add	r7, sp, #0
 8012d6e:	60f8      	str	r0, [r7, #12]
 8012d70:	60b9      	str	r1, [r7, #8]
 8012d72:	607a      	str	r2, [r7, #4]
 8012d74:	603b      	str	r3, [r7, #0]
  const int32_t input_beta_multiplier = params.input_multiplier;
 8012d76:	68fb      	ldr	r3, [r7, #12]
 8012d78:	689b      	ldr	r3, [r3, #8]
 8012d7a:	66fb      	str	r3, [r7, #108]	; 0x6c
  const int32_t input_beta_left_shift = params.input_left_shift;
 8012d7c:	68fb      	ldr	r3, [r7, #12]
 8012d7e:	68db      	ldr	r3, [r3, #12]
 8012d80:	66bb      	str	r3, [r7, #104]	; 0x68
  const int diff_min = params.diff_min;
 8012d82:	68fb      	ldr	r3, [r7, #12]
 8012d84:	699b      	ldr	r3, [r3, #24]
 8012d86:	667b      	str	r3, [r7, #100]	; 0x64
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 8012d88:	68b8      	ldr	r0, [r7, #8]
 8012d8a:	f7ef fd49 	bl	8002820 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8012d8e:	4603      	mov	r3, r0
 8012d90:	3b01      	subs	r3, #1
 8012d92:	663b      	str	r3, [r7, #96]	; 0x60
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 8012d94:	683a      	ldr	r2, [r7, #0]
 8012d96:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8012d98:	68b8      	ldr	r0, [r7, #8]
 8012d9a:	f7fd fe47 	bl	8010a2c <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 8012d9e:	65f8      	str	r0, [r7, #92]	; 0x5c
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 8012da0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012da2:	683a      	ldr	r2, [r7, #0]
 8012da4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8012da6:	68b8      	ldr	r0, [r7, #8]
 8012da8:	f7f8 ffbc 	bl	800bd24 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8012dac:	65b8      	str	r0, [r7, #88]	; 0x58
  for (int i = 0; i < outer_size; ++i) {
 8012dae:	2300      	movs	r3, #0
 8012db0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8012db2:	e0f7      	b.n	8012fa4 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x23c>
    InputT max_in_row = std::numeric_limits<InputT>::min();
 8012db4:	2380      	movs	r3, #128	; 0x80
 8012db6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    for (int c = 0; c < depth; ++c) {
 8012dba:	2300      	movs	r3, #0
 8012dbc:	67bb      	str	r3, [r7, #120]	; 0x78
 8012dbe:	e016      	b.n	8012dee <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x86>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 8012dc0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012dc2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012dc4:	fb03 f202 	mul.w	r2, r3, r2
 8012dc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012dca:	4413      	add	r3, r2
 8012dcc:	461a      	mov	r2, r3
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	441a      	add	r2, r3
 8012dd2:	f107 0333 	add.w	r3, r7, #51	; 0x33
 8012dd6:	4611      	mov	r1, r2
 8012dd8:	4618      	mov	r0, r3
 8012dda:	f7f3 fa08 	bl	80061ee <_ZSt3maxIaERKT_S2_S2_>
 8012dde:	4603      	mov	r3, r0
 8012de0:	f993 3000 	ldrsb.w	r3, [r3]
 8012de4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    for (int c = 0; c < depth; ++c) {
 8012de8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012dea:	3301      	adds	r3, #1
 8012dec:	67bb      	str	r3, [r7, #120]	; 0x78
 8012dee:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8012df0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012df2:	429a      	cmp	r2, r3
 8012df4:	dbe4      	blt.n	8012dc0 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x58>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
 8012df6:	f000 f8df 	bl	8012fb8 <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>
 8012dfa:	4603      	mov	r3, r0
 8012dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (int c = 0; c < depth; ++c) {
 8012dfe:	2300      	movs	r3, #0
 8012e00:	677b      	str	r3, [r7, #116]	; 0x74
 8012e02:	e02f      	b.n	8012e64 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xfc>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 8012e04:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012e06:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012e08:	fb03 f202 	mul.w	r2, r3, r2
 8012e0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012e0e:	4413      	add	r3, r2
 8012e10:	461a      	mov	r2, r3
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	4413      	add	r3, r2
 8012e16:	f993 3000 	ldrsb.w	r3, [r3]
 8012e1a:	461a      	mov	r2, r3
 8012e1c:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
      int32_t input_diff =
 8012e20:	1ad3      	subs	r3, r2, r3
 8012e22:	647b      	str	r3, [r7, #68]	; 0x44
      if (input_diff >= diff_min) {
 8012e24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012e26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012e28:	429a      	cmp	r2, r3
 8012e2a:	db18      	blt.n	8012e5e <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xf6>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 8012e2c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8012e2e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8012e30:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8012e32:	f7fc fab4 	bl	800f39e <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 8012e36:	6438      	str	r0, [r7, #64]	; 0x40
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 8012e38:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8012e3a:	f7fd fe26 	bl	8010a8a <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 8012e3e:	4603      	mov	r3, r0
 8012e40:	623b      	str	r3, [r7, #32]
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
 8012e42:	6a38      	ldr	r0, [r7, #32]
 8012e44:	f7fd fe32 	bl	8010aac <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 8012e48:	4603      	mov	r3, r0
 8012e4a:	4618      	mov	r0, r3
 8012e4c:	f7fd ff76 	bl	8010d3c <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 8012e50:	4603      	mov	r3, r0
 8012e52:	4619      	mov	r1, r3
 8012e54:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012e56:	f7fd ff8b 	bl	8010d70 <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8012e5a:	4603      	mov	r3, r0
 8012e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (int c = 0; c < depth; ++c) {
 8012e5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012e60:	3301      	adds	r3, #1
 8012e62:	677b      	str	r3, [r7, #116]	; 0x74
 8012e64:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8012e66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012e68:	429a      	cmp	r2, r3
 8012e6a:	dbcb      	blt.n	8012e04 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x9c>
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));
 8012e6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012e70:	4618      	mov	r0, r3
 8012e72:	f7fe f8d0 	bl	8011016 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8012e76:	4603      	mov	r3, r0
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
 8012e78:	681b      	ldr	r3, [r3, #0]
 8012e7a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8012e7e:	210c      	movs	r1, #12
 8012e80:	4618      	mov	r0, r3
 8012e82:	f7fc fa9f 	bl	800f3c4 <_ZN6tflite13GetReciprocalEliPi>
 8012e86:	4603      	mov	r3, r0
 8012e88:	4618      	mov	r0, r3
 8012e8a:	f7fc fac6 	bl	800f41a <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8012e8e:	4603      	mov	r3, r0
 8012e90:	627b      	str	r3, [r7, #36]	; 0x24
    const int exponent = num_bits_over_unit + 31 - (sizeof(OutputT) * 8);
 8012e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e94:	3317      	adds	r3, #23
 8012e96:	657b      	str	r3, [r7, #84]	; 0x54
    TFLITE_CHECK(0 <= exponent && exponent <= 31);
 8012e98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	db02      	blt.n	8012ea4 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x13c>
 8012e9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012ea0:	2b1f      	cmp	r3, #31
 8012ea2:	dd01      	ble.n	8012ea8 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x140>
 8012ea4:	f00c fddc 	bl	801fa60 <abort>
    for (int c = 0; c < depth; ++c) {
 8012ea8:	2300      	movs	r3, #0
 8012eaa:	673b      	str	r3, [r7, #112]	; 0x70
 8012eac:	e073      	b.n	8012f96 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x22e>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 8012eae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012eb0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012eb2:	fb03 f202 	mul.w	r2, r3, r2
 8012eb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012eb8:	4413      	add	r3, r2
 8012eba:	461a      	mov	r2, r3
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	4413      	add	r3, r2
 8012ec0:	f993 3000 	ldrsb.w	r3, [r3]
 8012ec4:	461a      	mov	r2, r3
 8012ec6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
      int32_t input_diff =
 8012eca:	1ad3      	subs	r3, r2, r3
 8012ecc:	653b      	str	r3, [r7, #80]	; 0x50
      if (input_diff >= diff_min) {
 8012ece:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012ed0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012ed2:	429a      	cmp	r2, r3
 8012ed4:	db4e      	blt.n	8012f74 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x20c>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 8012ed6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8012ed8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8012eda:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8012edc:	f7fc fa5f 	bl	800f39e <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 8012ee0:	64f8      	str	r0, [r7, #76]	; 0x4c
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 8012ee2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8012ee4:	f7fd fdd1 	bl	8010a8a <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 8012ee8:	4603      	mov	r3, r0
 8012eea:	61fb      	str	r3, [r7, #28]
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
 8012eec:	69f8      	ldr	r0, [r7, #28]
 8012eee:	f7fd fddd 	bl	8010aac <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 8012ef2:	4603      	mov	r3, r0
 8012ef4:	61bb      	str	r3, [r7, #24]
            (shifted_scale * exp_in_0).raw(), exponent);
 8012ef6:	69b9      	ldr	r1, [r7, #24]
 8012ef8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012efa:	f7fe f837 	bl	8010f6c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8012efe:	4603      	mov	r3, r0
 8012f00:	637b      	str	r3, [r7, #52]	; 0x34
 8012f02:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8012f06:	4618      	mov	r0, r3
 8012f08:	f7f3 f9f6 	bl	80062f8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8012f0c:	4603      	mov	r3, r0
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 8012f0e:	681b      	ldr	r3, [r3, #0]
 8012f10:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012f12:	4618      	mov	r0, r3
 8012f14:	f7f2 fe02 	bl	8005b1c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8012f18:	64b8      	str	r0, [r7, #72]	; 0x48
            static_cast<int32_t>(std::numeric_limits<OutputT>::min());
 8012f1a:	f7f3 faaf 	bl	800647c <_ZNSt14numeric_limitsIaE3minEv>
 8012f1e:	4603      	mov	r3, r0
 8012f20:	461a      	mov	r2, r3
            unsat_output +
 8012f22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012f24:	4413      	add	r3, r2
        const int32_t shifted_output =
 8012f26:	617b      	str	r3, [r7, #20]
                     static_cast<int32_t>(std::numeric_limits<OutputT>::max())),
 8012f28:	f7f3 fab1 	bl	800648e <_ZNSt14numeric_limitsIaE3maxEv>
 8012f2c:	4603      	mov	r3, r0
 8012f2e:	63bb      	str	r3, [r7, #56]	; 0x38
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
 8012f30:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8012f34:	f107 0314 	add.w	r3, r7, #20
 8012f38:	4611      	mov	r1, r2
 8012f3a:	4618      	mov	r0, r3
 8012f3c:	f7f3 f9a1 	bl	8006282 <_ZSt3minIlERKT_S2_S2_>
 8012f40:	4604      	mov	r4, r0
            static_cast<int32_t>(std::numeric_limits<OutputT>::min())));
 8012f42:	f7f3 fa9b 	bl	800647c <_ZNSt14numeric_limitsIaE3minEv>
 8012f46:	4603      	mov	r3, r0
 8012f48:	63fb      	str	r3, [r7, #60]	; 0x3c
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
 8012f4a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8012f4e:	4619      	mov	r1, r3
 8012f50:	4620      	mov	r0, r4
 8012f52:	f7f3 f9aa 	bl	80062aa <_ZSt3maxIlERKT_S2_S2_>
 8012f56:	4603      	mov	r3, r0
 8012f58:	6819      	ldr	r1, [r3, #0]
 8012f5a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012f5c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012f5e:	fb03 f202 	mul.w	r2, r3, r2
 8012f62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012f64:	4413      	add	r3, r2
 8012f66:	461a      	mov	r2, r3
 8012f68:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012f6c:	4413      	add	r3, r2
 8012f6e:	b24a      	sxtb	r2, r1
 8012f70:	701a      	strb	r2, [r3, #0]
 8012f72:	e00d      	b.n	8012f90 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x228>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
 8012f74:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012f76:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012f78:	fb03 f202 	mul.w	r2, r3, r2
 8012f7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012f7e:	4413      	add	r3, r2
 8012f80:	461a      	mov	r2, r3
 8012f82:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012f86:	189c      	adds	r4, r3, r2
 8012f88:	f7f3 fa78 	bl	800647c <_ZNSt14numeric_limitsIaE3minEv>
 8012f8c:	4603      	mov	r3, r0
 8012f8e:	7023      	strb	r3, [r4, #0]
    for (int c = 0; c < depth; ++c) {
 8012f90:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012f92:	3301      	adds	r3, #1
 8012f94:	673b      	str	r3, [r7, #112]	; 0x70
 8012f96:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8012f98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012f9a:	429a      	cmp	r2, r3
 8012f9c:	db87      	blt.n	8012eae <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x146>
  for (int i = 0; i < outer_size; ++i) {
 8012f9e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012fa0:	3301      	adds	r3, #1
 8012fa2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8012fa4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8012fa6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012fa8:	429a      	cmp	r2, r3
 8012faa:	f6ff af03 	blt.w	8012db4 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x4c>
}
 8012fae:	bf00      	nop
 8012fb0:	bf00      	nop
 8012fb2:	3784      	adds	r7, #132	; 0x84
 8012fb4:	46bd      	mov	sp, r7
 8012fb6:	bd90      	pop	{r4, r7, pc}

08012fb8 <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>:
  static FixedPoint Zero() { return FromScalarRaw(0); }
 8012fb8:	b580      	push	{r7, lr}
 8012fba:	af00      	add	r7, sp, #0
 8012fbc:	2000      	movs	r0, #0
 8012fbe:	f000 f803 	bl	8012fc8 <_ZN8gemmlowp10FixedPointIlLi12EE13FromScalarRawEl>
 8012fc2:	4603      	mov	r3, r0
 8012fc4:	4618      	mov	r0, r3
 8012fc6:	bd80      	pop	{r7, pc}

08012fc8 <_ZN8gemmlowp10FixedPointIlLi12EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 8012fc8:	b590      	push	{r4, r7, lr}
 8012fca:	b085      	sub	sp, #20
 8012fcc:	af00      	add	r7, sp, #0
 8012fce:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 8012fd0:	f107 030c 	add.w	r3, r7, #12
 8012fd4:	4618      	mov	r0, r3
 8012fd6:	f7fe f81e 	bl	8011016 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8012fda:	4604      	mov	r4, r0
 8012fdc:	6878      	ldr	r0, [r7, #4]
 8012fde:	f7f2 fe11 	bl	8005c04 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8012fe2:	4603      	mov	r3, r0
 8012fe4:	6023      	str	r3, [r4, #0]
    return retval;
 8012fe6:	68fb      	ldr	r3, [r7, #12]
  }
 8012fe8:	4618      	mov	r0, r3
 8012fea:	3714      	adds	r7, #20
 8012fec:	46bd      	mov	sp, r7
 8012fee:	bd90      	pop	{r4, r7, pc}

08012ff0 <_ZZN6tflite12_GLOBAL__N_121InitializeLutForInt16EP13TfLiteContextPK12TfLiteTensorPS3_PNS_13SoftmaxParamsEENKUlfE_clEf>:
    // we consider exp(-10.0) is insignificant to accumulation
    const int32_t range = std::numeric_limits<int16_t>::max() -
                          std::numeric_limits<int16_t>::min();
    LUTPopulate<int16_t>(
        10.0f / range, std::numeric_limits<int16_t>::max(), 2.0f / range, 0,
        [](float value) { return std::exp(value); }, op_data->exp_lut);
 8012ff0:	b580      	push	{r7, lr}
 8012ff2:	b082      	sub	sp, #8
 8012ff4:	af00      	add	r7, sp, #0
 8012ff6:	6078      	str	r0, [r7, #4]
 8012ff8:	ed87 0a00 	vstr	s0, [r7]
 8012ffc:	ed97 0a00 	vldr	s0, [r7]
 8013000:	f7f3 f91b 	bl	800623a <_ZSt3expf>
 8013004:	eef0 7a40 	vmov.f32	s15, s0
 8013008:	eeb0 0a67 	vmov.f32	s0, s15
 801300c:	3708      	adds	r7, #8
 801300e:	46bd      	mov	sp, r7
 8013010:	bd80      	pop	{r7, pc}

08013012 <_ZZN6tflite12_GLOBAL__N_121InitializeLutForInt16EP13TfLiteContextPK12TfLiteTensorPS3_PNS_13SoftmaxParamsEENUlfE_4_FUNEf>:
 8013012:	b580      	push	{r7, lr}
 8013014:	b082      	sub	sp, #8
 8013016:	af00      	add	r7, sp, #0
 8013018:	ed87 0a01 	vstr	s0, [r7, #4]
 801301c:	ed97 0a01 	vldr	s0, [r7, #4]
 8013020:	2000      	movs	r0, #0
 8013022:	f7ff ffe5 	bl	8012ff0 <_ZZN6tflite12_GLOBAL__N_121InitializeLutForInt16EP13TfLiteContextPK12TfLiteTensorPS3_PNS_13SoftmaxParamsEENKUlfE_clEf>
 8013026:	eef0 7a40 	vmov.f32	s15, s0
 801302a:	eeb0 0a67 	vmov.f32	s0, s15
 801302e:	3708      	adds	r7, #8
 8013030:	46bd      	mov	sp, r7
 8013032:	bd80      	pop	{r7, pc}

08013034 <_ZZN6tflite12_GLOBAL__N_121InitializeLutForInt16EP13TfLiteContextPK12TfLiteTensorPS3_PNS_13SoftmaxParamsEENKUlfE_cvPFffEEv>:
 8013034:	b480      	push	{r7}
 8013036:	b083      	sub	sp, #12
 8013038:	af00      	add	r7, sp, #0
 801303a:	6078      	str	r0, [r7, #4]
 801303c:	4b03      	ldr	r3, [pc, #12]	; (801304c <_ZZN6tflite12_GLOBAL__N_121InitializeLutForInt16EP13TfLiteContextPK12TfLiteTensorPS3_PNS_13SoftmaxParamsEENKUlfE_cvPFffEEv+0x18>)
 801303e:	4618      	mov	r0, r3
 8013040:	370c      	adds	r7, #12
 8013042:	46bd      	mov	sp, r7
 8013044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013048:	4770      	bx	lr
 801304a:	bf00      	nop
 801304c:	08013013 	.word	0x08013013

08013050 <_ZZN6tflite12_GLOBAL__N_121InitializeLutForInt16EP13TfLiteContextPK12TfLiteTensorPS3_PNS_13SoftmaxParamsEENKUlfE0_clEf>:

    LUTPopulate<int16_t>(
        1.0f / range, std::numeric_limits<int16_t>::min(), 2.0f / range, 0,
        [](float value) { return 1.0f / (1.0f + value); },
 8013050:	b480      	push	{r7}
 8013052:	b083      	sub	sp, #12
 8013054:	af00      	add	r7, sp, #0
 8013056:	6078      	str	r0, [r7, #4]
 8013058:	ed87 0a00 	vstr	s0, [r7]
 801305c:	edd7 7a00 	vldr	s15, [r7]
 8013060:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013064:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013068:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801306c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8013070:	eef0 7a66 	vmov.f32	s15, s13
 8013074:	eeb0 0a67 	vmov.f32	s0, s15
 8013078:	370c      	adds	r7, #12
 801307a:	46bd      	mov	sp, r7
 801307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013080:	4770      	bx	lr

08013082 <_ZZN6tflite12_GLOBAL__N_121InitializeLutForInt16EP13TfLiteContextPK12TfLiteTensorPS3_PNS_13SoftmaxParamsEENUlfE0_4_FUNEf>:
 8013082:	b580      	push	{r7, lr}
 8013084:	b082      	sub	sp, #8
 8013086:	af00      	add	r7, sp, #0
 8013088:	ed87 0a01 	vstr	s0, [r7, #4]
 801308c:	ed97 0a01 	vldr	s0, [r7, #4]
 8013090:	2000      	movs	r0, #0
 8013092:	f7ff ffdd 	bl	8013050 <_ZZN6tflite12_GLOBAL__N_121InitializeLutForInt16EP13TfLiteContextPK12TfLiteTensorPS3_PNS_13SoftmaxParamsEENKUlfE0_clEf>
 8013096:	eef0 7a40 	vmov.f32	s15, s0
 801309a:	eeb0 0a67 	vmov.f32	s0, s15
 801309e:	3708      	adds	r7, #8
 80130a0:	46bd      	mov	sp, r7
 80130a2:	bd80      	pop	{r7, pc}

080130a4 <_ZZN6tflite12_GLOBAL__N_121InitializeLutForInt16EP13TfLiteContextPK12TfLiteTensorPS3_PNS_13SoftmaxParamsEENKUlfE0_cvPFffEEv>:
 80130a4:	b480      	push	{r7}
 80130a6:	b083      	sub	sp, #12
 80130a8:	af00      	add	r7, sp, #0
 80130aa:	6078      	str	r0, [r7, #4]
 80130ac:	4b03      	ldr	r3, [pc, #12]	; (80130bc <_ZZN6tflite12_GLOBAL__N_121InitializeLutForInt16EP13TfLiteContextPK12TfLiteTensorPS3_PNS_13SoftmaxParamsEENKUlfE0_cvPFffEEv+0x18>)
 80130ae:	4618      	mov	r0, r3
 80130b0:	370c      	adds	r7, #12
 80130b2:	46bd      	mov	sp, r7
 80130b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130b8:	4770      	bx	lr
 80130ba:	bf00      	nop
 80130bc:	08013083 	.word	0x08013083

080130c0 <_ZN6tflite12_GLOBAL__N_121InitializeLutForInt16EP13TfLiteContextPK12TfLiteTensorPS3_PNS_13SoftmaxParamsE>:
                                   SoftmaxParams* op_data) {
 80130c0:	b590      	push	{r4, r7, lr}
 80130c2:	b08f      	sub	sp, #60	; 0x3c
 80130c4:	af04      	add	r7, sp, #16
 80130c6:	60f8      	str	r0, [r7, #12]
 80130c8:	60b9      	str	r1, [r7, #8]
 80130ca:	607a      	str	r2, [r7, #4]
 80130cc:	603b      	str	r3, [r7, #0]
  if (input->type == kTfLiteInt16) {
 80130ce:	68bb      	ldr	r3, [r7, #8]
 80130d0:	7f1b      	ldrb	r3, [r3, #28]
 80130d2:	2b07      	cmp	r3, #7
 80130d4:	d12f      	bne.n	8013136 <_ZN6tflite12_GLOBAL__N_121InitializeLutForInt16EP13TfLiteContextPK12TfLiteTensorPS3_PNS_13SoftmaxParamsE+0x76>
    void* raw_exp_lut = context->AllocatePersistentBuffer(
 80130d6:	68fb      	ldr	r3, [r7, #12]
 80130d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80130da:	f240 4102 	movw	r1, #1026	; 0x402
 80130de:	68f8      	ldr	r0, [r7, #12]
 80130e0:	4798      	blx	r3
 80130e2:	6278      	str	r0, [r7, #36]	; 0x24
    TF_LITE_ENSURE(context, raw_exp_lut != nullptr);
 80130e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	d10a      	bne.n	8013100 <_ZN6tflite12_GLOBAL__N_121InitializeLutForInt16EP13TfLiteContextPK12TfLiteTensorPS3_PNS_13SoftmaxParamsE+0x40>
 80130ea:	68fb      	ldr	r3, [r7, #12]
 80130ec:	695c      	ldr	r4, [r3, #20]
 80130ee:	4b53      	ldr	r3, [pc, #332]	; (801323c <_ZN6tflite12_GLOBAL__N_121InitializeLutForInt16EP13TfLiteContextPK12TfLiteTensorPS3_PNS_13SoftmaxParamsE+0x17c>)
 80130f0:	9300      	str	r3, [sp, #0]
 80130f2:	2327      	movs	r3, #39	; 0x27
 80130f4:	4a52      	ldr	r2, [pc, #328]	; (8013240 <_ZN6tflite12_GLOBAL__N_121InitializeLutForInt16EP13TfLiteContextPK12TfLiteTensorPS3_PNS_13SoftmaxParamsE+0x180>)
 80130f6:	4953      	ldr	r1, [pc, #332]	; (8013244 <_ZN6tflite12_GLOBAL__N_121InitializeLutForInt16EP13TfLiteContextPK12TfLiteTensorPS3_PNS_13SoftmaxParamsE+0x184>)
 80130f8:	68f8      	ldr	r0, [r7, #12]
 80130fa:	47a0      	blx	r4
 80130fc:	2301      	movs	r3, #1
 80130fe:	e099      	b.n	8013234 <_ZN6tflite12_GLOBAL__N_121InitializeLutForInt16EP13TfLiteContextPK12TfLiteTensorPS3_PNS_13SoftmaxParamsE+0x174>
    op_data->exp_lut = reinterpret_cast<int16_t*>(raw_exp_lut);
 8013100:	683b      	ldr	r3, [r7, #0]
 8013102:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013104:	629a      	str	r2, [r3, #40]	; 0x28
    void* one_over_one_plus_x_lut = context->AllocatePersistentBuffer(
 8013106:	68fb      	ldr	r3, [r7, #12]
 8013108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801310a:	f240 4102 	movw	r1, #1026	; 0x402
 801310e:	68f8      	ldr	r0, [r7, #12]
 8013110:	4798      	blx	r3
 8013112:	6238      	str	r0, [r7, #32]
    TF_LITE_ENSURE(context, one_over_one_plus_x_lut != nullptr);
 8013114:	6a3b      	ldr	r3, [r7, #32]
 8013116:	2b00      	cmp	r3, #0
 8013118:	d10a      	bne.n	8013130 <_ZN6tflite12_GLOBAL__N_121InitializeLutForInt16EP13TfLiteContextPK12TfLiteTensorPS3_PNS_13SoftmaxParamsE+0x70>
 801311a:	68fb      	ldr	r3, [r7, #12]
 801311c:	695c      	ldr	r4, [r3, #20]
 801311e:	4b4a      	ldr	r3, [pc, #296]	; (8013248 <_ZN6tflite12_GLOBAL__N_121InitializeLutForInt16EP13TfLiteContextPK12TfLiteTensorPS3_PNS_13SoftmaxParamsE+0x188>)
 8013120:	9300      	str	r3, [sp, #0]
 8013122:	232b      	movs	r3, #43	; 0x2b
 8013124:	4a46      	ldr	r2, [pc, #280]	; (8013240 <_ZN6tflite12_GLOBAL__N_121InitializeLutForInt16EP13TfLiteContextPK12TfLiteTensorPS3_PNS_13SoftmaxParamsE+0x180>)
 8013126:	4947      	ldr	r1, [pc, #284]	; (8013244 <_ZN6tflite12_GLOBAL__N_121InitializeLutForInt16EP13TfLiteContextPK12TfLiteTensorPS3_PNS_13SoftmaxParamsE+0x184>)
 8013128:	68f8      	ldr	r0, [r7, #12]
 801312a:	47a0      	blx	r4
 801312c:	2301      	movs	r3, #1
 801312e:	e081      	b.n	8013234 <_ZN6tflite12_GLOBAL__N_121InitializeLutForInt16EP13TfLiteContextPK12TfLiteTensorPS3_PNS_13SoftmaxParamsE+0x174>
    op_data->one_over_one_plus_x_lut =
 8013130:	683b      	ldr	r3, [r7, #0]
 8013132:	6a3a      	ldr	r2, [r7, #32]
 8013134:	62da      	str	r2, [r3, #44]	; 0x2c
  if (output->type == kTfLiteInt16) {
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	7f1b      	ldrb	r3, [r3, #28]
 801313a:	2b07      	cmp	r3, #7
 801313c:	d112      	bne.n	8013164 <_ZN6tflite12_GLOBAL__N_121InitializeLutForInt16EP13TfLiteContextPK12TfLiteTensorPS3_PNS_13SoftmaxParamsE+0xa4>
    TF_LITE_ENSURE(context,
 801313e:	68bb      	ldr	r3, [r7, #8]
 8013140:	7f1b      	ldrb	r3, [r3, #28]
 8013142:	2b09      	cmp	r3, #9
 8013144:	d028      	beq.n	8013198 <_ZN6tflite12_GLOBAL__N_121InitializeLutForInt16EP13TfLiteContextPK12TfLiteTensorPS3_PNS_13SoftmaxParamsE+0xd8>
 8013146:	68bb      	ldr	r3, [r7, #8]
 8013148:	7f1b      	ldrb	r3, [r3, #28]
 801314a:	2b07      	cmp	r3, #7
 801314c:	d024      	beq.n	8013198 <_ZN6tflite12_GLOBAL__N_121InitializeLutForInt16EP13TfLiteContextPK12TfLiteTensorPS3_PNS_13SoftmaxParamsE+0xd8>
 801314e:	68fb      	ldr	r3, [r7, #12]
 8013150:	695c      	ldr	r4, [r3, #20]
 8013152:	4b3e      	ldr	r3, [pc, #248]	; (801324c <_ZN6tflite12_GLOBAL__N_121InitializeLutForInt16EP13TfLiteContextPK12TfLiteTensorPS3_PNS_13SoftmaxParamsE+0x18c>)
 8013154:	9300      	str	r3, [sp, #0]
 8013156:	2331      	movs	r3, #49	; 0x31
 8013158:	4a39      	ldr	r2, [pc, #228]	; (8013240 <_ZN6tflite12_GLOBAL__N_121InitializeLutForInt16EP13TfLiteContextPK12TfLiteTensorPS3_PNS_13SoftmaxParamsE+0x180>)
 801315a:	493a      	ldr	r1, [pc, #232]	; (8013244 <_ZN6tflite12_GLOBAL__N_121InitializeLutForInt16EP13TfLiteContextPK12TfLiteTensorPS3_PNS_13SoftmaxParamsE+0x184>)
 801315c:	68f8      	ldr	r0, [r7, #12]
 801315e:	47a0      	blx	r4
 8013160:	2301      	movs	r3, #1
 8013162:	e067      	b.n	8013234 <_ZN6tflite12_GLOBAL__N_121InitializeLutForInt16EP13TfLiteContextPK12TfLiteTensorPS3_PNS_13SoftmaxParamsE+0x174>
    TF_LITE_ENSURE_EQ(context, input->type, output->type);
 8013164:	68bb      	ldr	r3, [r7, #8]
 8013166:	7f1a      	ldrb	r2, [r3, #28]
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	7f1b      	ldrb	r3, [r3, #28]
 801316c:	429a      	cmp	r2, r3
 801316e:	d013      	beq.n	8013198 <_ZN6tflite12_GLOBAL__N_121InitializeLutForInt16EP13TfLiteContextPK12TfLiteTensorPS3_PNS_13SoftmaxParamsE+0xd8>
 8013170:	68fb      	ldr	r3, [r7, #12]
 8013172:	695c      	ldr	r4, [r3, #20]
 8013174:	68bb      	ldr	r3, [r7, #8]
 8013176:	7f1b      	ldrb	r3, [r3, #28]
 8013178:	461a      	mov	r2, r3
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	7f1b      	ldrb	r3, [r3, #28]
 801317e:	9303      	str	r3, [sp, #12]
 8013180:	9202      	str	r2, [sp, #8]
 8013182:	4b33      	ldr	r3, [pc, #204]	; (8013250 <_ZN6tflite12_GLOBAL__N_121InitializeLutForInt16EP13TfLiteContextPK12TfLiteTensorPS3_PNS_13SoftmaxParamsE+0x190>)
 8013184:	9301      	str	r3, [sp, #4]
 8013186:	4b33      	ldr	r3, [pc, #204]	; (8013254 <_ZN6tflite12_GLOBAL__N_121InitializeLutForInt16EP13TfLiteContextPK12TfLiteTensorPS3_PNS_13SoftmaxParamsE+0x194>)
 8013188:	9300      	str	r3, [sp, #0]
 801318a:	2334      	movs	r3, #52	; 0x34
 801318c:	4a2c      	ldr	r2, [pc, #176]	; (8013240 <_ZN6tflite12_GLOBAL__N_121InitializeLutForInt16EP13TfLiteContextPK12TfLiteTensorPS3_PNS_13SoftmaxParamsE+0x180>)
 801318e:	4932      	ldr	r1, [pc, #200]	; (8013258 <_ZN6tflite12_GLOBAL__N_121InitializeLutForInt16EP13TfLiteContextPK12TfLiteTensorPS3_PNS_13SoftmaxParamsE+0x198>)
 8013190:	68f8      	ldr	r0, [r7, #12]
 8013192:	47a0      	blx	r4
 8013194:	2301      	movs	r3, #1
 8013196:	e04d      	b.n	8013234 <_ZN6tflite12_GLOBAL__N_121InitializeLutForInt16EP13TfLiteContextPK12TfLiteTensorPS3_PNS_13SoftmaxParamsE+0x174>
  if (input->type == kTfLiteInt16) {
 8013198:	68bb      	ldr	r3, [r7, #8]
 801319a:	7f1b      	ldrb	r3, [r3, #28]
 801319c:	2b07      	cmp	r3, #7
 801319e:	d148      	bne.n	8013232 <_ZN6tflite12_GLOBAL__N_121InitializeLutForInt16EP13TfLiteContextPK12TfLiteTensorPS3_PNS_13SoftmaxParamsE+0x172>
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	68db      	ldr	r3, [r3, #12]
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	d011      	beq.n	80131cc <_ZN6tflite12_GLOBAL__N_121InitializeLutForInt16EP13TfLiteContextPK12TfLiteTensorPS3_PNS_13SoftmaxParamsE+0x10c>
 80131a8:	68fb      	ldr	r3, [r7, #12]
 80131aa:	695c      	ldr	r4, [r3, #20]
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	68db      	ldr	r3, [r3, #12]
 80131b0:	2200      	movs	r2, #0
 80131b2:	9203      	str	r2, [sp, #12]
 80131b4:	9302      	str	r3, [sp, #8]
 80131b6:	4b29      	ldr	r3, [pc, #164]	; (801325c <_ZN6tflite12_GLOBAL__N_121InitializeLutForInt16EP13TfLiteContextPK12TfLiteTensorPS3_PNS_13SoftmaxParamsE+0x19c>)
 80131b8:	9301      	str	r3, [sp, #4]
 80131ba:	4b29      	ldr	r3, [pc, #164]	; (8013260 <_ZN6tflite12_GLOBAL__N_121InitializeLutForInt16EP13TfLiteContextPK12TfLiteTensorPS3_PNS_13SoftmaxParamsE+0x1a0>)
 80131bc:	9300      	str	r3, [sp, #0]
 80131be:	2339      	movs	r3, #57	; 0x39
 80131c0:	4a1f      	ldr	r2, [pc, #124]	; (8013240 <_ZN6tflite12_GLOBAL__N_121InitializeLutForInt16EP13TfLiteContextPK12TfLiteTensorPS3_PNS_13SoftmaxParamsE+0x180>)
 80131c2:	4925      	ldr	r1, [pc, #148]	; (8013258 <_ZN6tflite12_GLOBAL__N_121InitializeLutForInt16EP13TfLiteContextPK12TfLiteTensorPS3_PNS_13SoftmaxParamsE+0x198>)
 80131c4:	68f8      	ldr	r0, [r7, #12]
 80131c6:	47a0      	blx	r4
 80131c8:	2301      	movs	r3, #1
 80131ca:	e033      	b.n	8013234 <_ZN6tflite12_GLOBAL__N_121InitializeLutForInt16EP13TfLiteContextPK12TfLiteTensorPS3_PNS_13SoftmaxParamsE+0x174>
    const int32_t range = std::numeric_limits<int16_t>::max() -
 80131cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80131d0:	61fb      	str	r3, [r7, #28]
        10.0f / range, std::numeric_limits<int16_t>::max(), 2.0f / range, 0,
 80131d2:	f7f3 f84d 	bl	8006270 <_ZNSt14numeric_limitsIsE3maxEv>
 80131d6:	4603      	mov	r3, r0
    LUTPopulate<int16_t>(
 80131d8:	461c      	mov	r4, r3
 80131da:	f107 0314 	add.w	r3, r7, #20
 80131de:	4618      	mov	r0, r3
 80131e0:	f7ff ff28 	bl	8013034 <_ZZN6tflite12_GLOBAL__N_121InitializeLutForInt16EP13TfLiteContextPK12TfLiteTensorPS3_PNS_13SoftmaxParamsEENKUlfE_cvPFffEEv>
 80131e4:	4602      	mov	r2, r0
 80131e6:	683b      	ldr	r3, [r7, #0]
 80131e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80131ea:	2100      	movs	r1, #0
 80131ec:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8013264 <_ZN6tflite12_GLOBAL__N_121InitializeLutForInt16EP13TfLiteContextPK12TfLiteTensorPS3_PNS_13SoftmaxParamsE+0x1a4>
 80131f0:	4620      	mov	r0, r4
 80131f2:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 8013268 <_ZN6tflite12_GLOBAL__N_121InitializeLutForInt16EP13TfLiteContextPK12TfLiteTensorPS3_PNS_13SoftmaxParamsE+0x1a8>
 80131f6:	f000 fb43 	bl	8013880 <_ZN6tflite11LUTPopulateIsEENSt9enable_ifIXsrSt7is_sameIT_sE5valueEvE4typeEflflPFffEPS3_>
        1.0f / range, std::numeric_limits<int16_t>::min(), 2.0f / range, 0,
 80131fa:	f7f3 f82f 	bl	800625c <_ZNSt14numeric_limitsIsE3minEv>
 80131fe:	4603      	mov	r3, r0
    LUTPopulate<int16_t>(
 8013200:	461c      	mov	r4, r3
 8013202:	f107 0318 	add.w	r3, r7, #24
 8013206:	4618      	mov	r0, r3
 8013208:	f7ff ff4c 	bl	80130a4 <_ZZN6tflite12_GLOBAL__N_121InitializeLutForInt16EP13TfLiteContextPK12TfLiteTensorPS3_PNS_13SoftmaxParamsEENKUlfE0_cvPFffEEv>
 801320c:	4602      	mov	r2, r0
 801320e:	683b      	ldr	r3, [r7, #0]
 8013210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013212:	2100      	movs	r1, #0
 8013214:	eddf 0a13 	vldr	s1, [pc, #76]	; 8013264 <_ZN6tflite12_GLOBAL__N_121InitializeLutForInt16EP13TfLiteContextPK12TfLiteTensorPS3_PNS_13SoftmaxParamsE+0x1a4>
 8013218:	4620      	mov	r0, r4
 801321a:	ed9f 0a14 	vldr	s0, [pc, #80]	; 801326c <_ZN6tflite12_GLOBAL__N_121InitializeLutForInt16EP13TfLiteContextPK12TfLiteTensorPS3_PNS_13SoftmaxParamsE+0x1ac>
 801321e:	f000 fb2f 	bl	8013880 <_ZN6tflite11LUTPopulateIsEENSt9enable_ifIXsrSt7is_sameIT_sE5valueEvE4typeEflflPFffEPS3_>
        op_data->one_over_one_plus_x_lut);

    op_data->zero_point = output->params.zero_point;
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	68da      	ldr	r2, [r3, #12]
 8013226:	683b      	ldr	r3, [r7, #0]
 8013228:	61da      	str	r2, [r3, #28]
    op_data->scale = output->params.scale;
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	689a      	ldr	r2, [r3, #8]
 801322e:	683b      	ldr	r3, [r7, #0]
 8013230:	621a      	str	r2, [r3, #32]
  }

  return kTfLiteOk;
 8013232:	2300      	movs	r3, #0
}
 8013234:	4618      	mov	r0, r3
 8013236:	372c      	adds	r7, #44	; 0x2c
 8013238:	46bd      	mov	sp, r7
 801323a:	bd90      	pop	{r4, r7, pc}
 801323c:	08027c2c 	.word	0x08027c2c
 8013240:	08027bd8 	.word	0x08027bd8
 8013244:	08027c14 	.word	0x08027c14
 8013248:	08027c44 	.word	0x08027c44
 801324c:	08027c68 	.word	0x08027c68
 8013250:	08027cc0 	.word	0x08027cc0
 8013254:	08027cd0 	.word	0x08027cd0
 8013258:	08027ca4 	.word	0x08027ca4
 801325c:	08027cdc 	.word	0x08027cdc
 8013260:	08027ce0 	.word	0x08027ce0
 8013264:	38000080 	.word	0x38000080
 8013268:	392000a0 	.word	0x392000a0
 801326c:	37800080 	.word	0x37800080

08013270 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>:

TfLiteStatus CalculateSoftmaxParams(TfLiteContext* context,
                                    const TfLiteTensor* input,
                                    TfLiteTensor* output,
                                    const TfLiteSoftmaxParams* params,
                                    SoftmaxParams* op_data) {
 8013270:	b5b0      	push	{r4, r5, r7, lr}
 8013272:	b090      	sub	sp, #64	; 0x40
 8013274:	af06      	add	r7, sp, #24
 8013276:	60f8      	str	r0, [r7, #12]
 8013278:	60b9      	str	r1, [r7, #8]
 801327a:	607a      	str	r2, [r7, #4]
 801327c:	603b      	str	r3, [r7, #0]
  if (InitializeLutForInt16(context, input, output, op_data) != kTfLiteOk) {
 801327e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013280:	687a      	ldr	r2, [r7, #4]
 8013282:	68b9      	ldr	r1, [r7, #8]
 8013284:	68f8      	ldr	r0, [r7, #12]
 8013286:	f7ff ff1b 	bl	80130c0 <_ZN6tflite12_GLOBAL__N_121InitializeLutForInt16EP13TfLiteContextPK12TfLiteTensorPS3_PNS_13SoftmaxParamsE>
 801328a:	4603      	mov	r3, r0
 801328c:	2b00      	cmp	r3, #0
 801328e:	bf14      	ite	ne
 8013290:	2301      	movne	r3, #1
 8013292:	2300      	moveq	r3, #0
 8013294:	b2db      	uxtb	r3, r3
 8013296:	2b00      	cmp	r3, #0
 8013298:	d001      	beq.n	801329e <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e>
    return kTfLiteError;
 801329a:	2301      	movs	r3, #1
 801329c:	e200      	b.n	80136a0 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x430>
  }

  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
 801329e:	68bb      	ldr	r3, [r7, #8]
 80132a0:	7f1b      	ldrb	r3, [r3, #28]
 80132a2:	2b09      	cmp	r3, #9
 80132a4:	d004      	beq.n	80132b0 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x40>
 80132a6:	68bb      	ldr	r3, [r7, #8]
 80132a8:	7f1b      	ldrb	r3, [r3, #28]
 80132aa:	2b07      	cmp	r3, #7
 80132ac:	f040 81b5 	bne.w	801361a <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x3aa>
    if (input->type == kTfLiteInt16) {
 80132b0:	68bb      	ldr	r3, [r7, #8]
 80132b2:	7f1b      	ldrb	r3, [r3, #28]
 80132b4:	2b07      	cmp	r3, #7
 80132b6:	d16a      	bne.n	801338e <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x11e>
      TF_LITE_ENSURE_EQ(context, input->params.zero_point, 0);
 80132b8:	68bb      	ldr	r3, [r7, #8]
 80132ba:	68db      	ldr	r3, [r3, #12]
 80132bc:	2b00      	cmp	r3, #0
 80132be:	d011      	beq.n	80132e4 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x74>
 80132c0:	68fb      	ldr	r3, [r7, #12]
 80132c2:	695c      	ldr	r4, [r3, #20]
 80132c4:	68bb      	ldr	r3, [r7, #8]
 80132c6:	68db      	ldr	r3, [r3, #12]
 80132c8:	2200      	movs	r2, #0
 80132ca:	9203      	str	r2, [sp, #12]
 80132cc:	9302      	str	r3, [sp, #8]
 80132ce:	4ba4      	ldr	r3, [pc, #656]	; (8013560 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f0>)
 80132d0:	9301      	str	r3, [sp, #4]
 80132d2:	4ba4      	ldr	r3, [pc, #656]	; (8013564 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f4>)
 80132d4:	9300      	str	r3, [sp, #0]
 80132d6:	235b      	movs	r3, #91	; 0x5b
 80132d8:	4aa3      	ldr	r2, [pc, #652]	; (8013568 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f8>)
 80132da:	49a4      	ldr	r1, [pc, #656]	; (801356c <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2fc>)
 80132dc:	68f8      	ldr	r0, [r7, #12]
 80132de:	47a0      	blx	r4
 80132e0:	2301      	movs	r3, #1
 80132e2:	e1dd      	b.n	80136a0 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x430>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	68db      	ldr	r3, [r3, #12]
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	d011      	beq.n	8013310 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xa0>
 80132ec:	68fb      	ldr	r3, [r7, #12]
 80132ee:	695c      	ldr	r4, [r3, #20]
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	68db      	ldr	r3, [r3, #12]
 80132f4:	2200      	movs	r2, #0
 80132f6:	9203      	str	r2, [sp, #12]
 80132f8:	9302      	str	r3, [sp, #8]
 80132fa:	4b99      	ldr	r3, [pc, #612]	; (8013560 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f0>)
 80132fc:	9301      	str	r3, [sp, #4]
 80132fe:	4b9c      	ldr	r3, [pc, #624]	; (8013570 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>)
 8013300:	9300      	str	r3, [sp, #0]
 8013302:	235c      	movs	r3, #92	; 0x5c
 8013304:	4a98      	ldr	r2, [pc, #608]	; (8013568 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f8>)
 8013306:	4999      	ldr	r1, [pc, #612]	; (801356c <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2fc>)
 8013308:	68f8      	ldr	r0, [r7, #12]
 801330a:	47a0      	blx	r4
 801330c:	2301      	movs	r3, #1
 801330e:	e1c7      	b.n	80136a0 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x430>
      TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 32768,
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	edd3 7a02 	vldr	s15, [r3, #8]
 8013316:	ed9f 7a97 	vldr	s14, [pc, #604]	; 8013574 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x304>
 801331a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801331e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013322:	dd07      	ble.n	8013334 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xc4>
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	edd3 7a02 	vldr	s15, [r3, #8]
 801332a:	ed9f 7a92 	vldr	s14, [pc, #584]	; 8013574 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x304>
 801332e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013332:	e006      	b.n	8013342 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xd2>
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	edd3 7a02 	vldr	s15, [r3, #8]
 801333a:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8013574 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x304>
 801333e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013342:	edc7 7a08 	vstr	s15, [r7, #32]
 8013346:	edd7 7a08 	vldr	s15, [r7, #32]
 801334a:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8013578 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x308>
 801334e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013356:	f340 80d9 	ble.w	801350c <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x29c>
 801335a:	68fb      	ldr	r3, [r7, #12]
 801335c:	695c      	ldr	r4, [r3, #20]
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	edd3 7a02 	vldr	s15, [r3, #8]
 8013364:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8013368:	f04f 0200 	mov.w	r2, #0
 801336c:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8013370:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8013374:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013378:	4b80      	ldr	r3, [pc, #512]	; (801357c <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x30c>)
 801337a:	9301      	str	r3, [sp, #4]
 801337c:	4b80      	ldr	r3, [pc, #512]	; (8013580 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x310>)
 801337e:	9300      	str	r3, [sp, #0]
 8013380:	235d      	movs	r3, #93	; 0x5d
 8013382:	4a79      	ldr	r2, [pc, #484]	; (8013568 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f8>)
 8013384:	497f      	ldr	r1, [pc, #508]	; (8013584 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x314>)
 8013386:	68f8      	ldr	r0, [r7, #12]
 8013388:	47a0      	blx	r4
 801338a:	2301      	movs	r3, #1
 801338c:	e188      	b.n	80136a0 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x430>
                          (0.001f * 1.f / 32768));
    } else {  // input->type == kTfLiteInt8
      TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteInt8);
 801338e:	68bb      	ldr	r3, [r7, #8]
 8013390:	7f1b      	ldrb	r3, [r3, #28]
 8013392:	2b09      	cmp	r3, #9
 8013394:	d018      	beq.n	80133c8 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x158>
 8013396:	68fb      	ldr	r3, [r7, #12]
 8013398:	695c      	ldr	r4, [r3, #20]
 801339a:	68bb      	ldr	r3, [r7, #8]
 801339c:	7f1b      	ldrb	r3, [r3, #28]
 801339e:	4618      	mov	r0, r3
 80133a0:	f7f2 f9d4 	bl	800574c <TfLiteTypeGetName>
 80133a4:	4605      	mov	r5, r0
 80133a6:	2009      	movs	r0, #9
 80133a8:	f7f2 f9d0 	bl	800574c <TfLiteTypeGetName>
 80133ac:	4603      	mov	r3, r0
 80133ae:	9303      	str	r3, [sp, #12]
 80133b0:	9502      	str	r5, [sp, #8]
 80133b2:	4b75      	ldr	r3, [pc, #468]	; (8013588 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x318>)
 80133b4:	9301      	str	r3, [sp, #4]
 80133b6:	4b75      	ldr	r3, [pc, #468]	; (801358c <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x31c>)
 80133b8:	9300      	str	r3, [sp, #0]
 80133ba:	2360      	movs	r3, #96	; 0x60
 80133bc:	4a6a      	ldr	r2, [pc, #424]	; (8013568 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f8>)
 80133be:	4974      	ldr	r1, [pc, #464]	; (8013590 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x320>)
 80133c0:	68f8      	ldr	r0, [r7, #12]
 80133c2:	47a0      	blx	r4
 80133c4:	2301      	movs	r3, #1
 80133c6:	e16b      	b.n	80136a0 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x430>
      if (output->type == kTfLiteInt16) {
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	7f1b      	ldrb	r3, [r3, #28]
 80133cc:	2b07      	cmp	r3, #7
 80133ce:	d153      	bne.n	8013478 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x208>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -32768);
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	68db      	ldr	r3, [r3, #12]
 80133d4:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80133d8:	d011      	beq.n	80133fe <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x18e>
 80133da:	68fb      	ldr	r3, [r7, #12]
 80133dc:	695c      	ldr	r4, [r3, #20]
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	68db      	ldr	r3, [r3, #12]
 80133e2:	4a6c      	ldr	r2, [pc, #432]	; (8013594 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x324>)
 80133e4:	9203      	str	r2, [sp, #12]
 80133e6:	9302      	str	r3, [sp, #8]
 80133e8:	4b6b      	ldr	r3, [pc, #428]	; (8013598 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x328>)
 80133ea:	9301      	str	r3, [sp, #4]
 80133ec:	4b60      	ldr	r3, [pc, #384]	; (8013570 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>)
 80133ee:	9300      	str	r3, [sp, #0]
 80133f0:	2362      	movs	r3, #98	; 0x62
 80133f2:	4a5d      	ldr	r2, [pc, #372]	; (8013568 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f8>)
 80133f4:	495d      	ldr	r1, [pc, #372]	; (801356c <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2fc>)
 80133f6:	68f8      	ldr	r0, [r7, #12]
 80133f8:	47a0      	blx	r4
 80133fa:	2301      	movs	r3, #1
 80133fc:	e150      	b.n	80136a0 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x430>
        TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 65536,
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	edd3 7a02 	vldr	s15, [r3, #8]
 8013404:	ed9f 7a65 	vldr	s14, [pc, #404]	; 801359c <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x32c>
 8013408:	eef4 7ac7 	vcmpe.f32	s15, s14
 801340c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013410:	dd07      	ble.n	8013422 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1b2>
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	edd3 7a02 	vldr	s15, [r3, #8]
 8013418:	ed9f 7a60 	vldr	s14, [pc, #384]	; 801359c <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x32c>
 801341c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013420:	e006      	b.n	8013430 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1c0>
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	edd3 7a02 	vldr	s15, [r3, #8]
 8013428:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 801359c <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x32c>
 801342c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013430:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 8013434:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8013438:	ed9f 7a59 	vldr	s14, [pc, #356]	; 80135a0 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x330>
 801343c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013444:	dd62      	ble.n	801350c <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x29c>
 8013446:	68fb      	ldr	r3, [r7, #12]
 8013448:	695c      	ldr	r4, [r3, #20]
 801344a:	687b      	ldr	r3, [r7, #4]
 801344c:	edd3 7a02 	vldr	s15, [r3, #8]
 8013450:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8013454:	f04f 0200 	mov.w	r2, #0
 8013458:	4b52      	ldr	r3, [pc, #328]	; (80135a4 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x334>)
 801345a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801345e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013462:	4b51      	ldr	r3, [pc, #324]	; (80135a8 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x338>)
 8013464:	9301      	str	r3, [sp, #4]
 8013466:	4b46      	ldr	r3, [pc, #280]	; (8013580 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x310>)
 8013468:	9300      	str	r3, [sp, #0]
 801346a:	2363      	movs	r3, #99	; 0x63
 801346c:	4a3e      	ldr	r2, [pc, #248]	; (8013568 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f8>)
 801346e:	4945      	ldr	r1, [pc, #276]	; (8013584 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x314>)
 8013470:	68f8      	ldr	r0, [r7, #12]
 8013472:	47a0      	blx	r4
 8013474:	2301      	movs	r3, #1
 8013476:	e113      	b.n	80136a0 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x430>
                            (0.001f * 1.f / 65536));
      } else {  // output->type == kTfLiteint8
        TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	7f1b      	ldrb	r3, [r3, #28]
 801347c:	2b09      	cmp	r3, #9
 801347e:	d018      	beq.n	80134b2 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x242>
 8013480:	68fb      	ldr	r3, [r7, #12]
 8013482:	695c      	ldr	r4, [r3, #20]
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	7f1b      	ldrb	r3, [r3, #28]
 8013488:	4618      	mov	r0, r3
 801348a:	f7f2 f95f 	bl	800574c <TfLiteTypeGetName>
 801348e:	4605      	mov	r5, r0
 8013490:	2009      	movs	r0, #9
 8013492:	f7f2 f95b 	bl	800574c <TfLiteTypeGetName>
 8013496:	4603      	mov	r3, r0
 8013498:	9303      	str	r3, [sp, #12]
 801349a:	9502      	str	r5, [sp, #8]
 801349c:	4b3a      	ldr	r3, [pc, #232]	; (8013588 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x318>)
 801349e:	9301      	str	r3, [sp, #4]
 80134a0:	4b42      	ldr	r3, [pc, #264]	; (80135ac <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x33c>)
 80134a2:	9300      	str	r3, [sp, #0]
 80134a4:	2366      	movs	r3, #102	; 0x66
 80134a6:	4a30      	ldr	r2, [pc, #192]	; (8013568 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f8>)
 80134a8:	4939      	ldr	r1, [pc, #228]	; (8013590 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x320>)
 80134aa:	68f8      	ldr	r0, [r7, #12]
 80134ac:	47a0      	blx	r4
 80134ae:	2301      	movs	r3, #1
 80134b0:	e0f6      	b.n	80136a0 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x430>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -128);
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	68db      	ldr	r3, [r3, #12]
 80134b6:	f113 0f80 	cmn.w	r3, #128	; 0x80
 80134ba:	d012      	beq.n	80134e2 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x272>
 80134bc:	68fb      	ldr	r3, [r7, #12]
 80134be:	695c      	ldr	r4, [r3, #20]
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	68db      	ldr	r3, [r3, #12]
 80134c4:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 80134c8:	9203      	str	r2, [sp, #12]
 80134ca:	9302      	str	r3, [sp, #8]
 80134cc:	4b38      	ldr	r3, [pc, #224]	; (80135b0 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x340>)
 80134ce:	9301      	str	r3, [sp, #4]
 80134d0:	4b27      	ldr	r3, [pc, #156]	; (8013570 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>)
 80134d2:	9300      	str	r3, [sp, #0]
 80134d4:	2367      	movs	r3, #103	; 0x67
 80134d6:	4a24      	ldr	r2, [pc, #144]	; (8013568 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f8>)
 80134d8:	4924      	ldr	r1, [pc, #144]	; (801356c <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2fc>)
 80134da:	68f8      	ldr	r0, [r7, #12]
 80134dc:	47a0      	blx	r4
 80134de:	2301      	movs	r3, #1
 80134e0:	e0de      	b.n	80136a0 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x430>
        TF_LITE_ENSURE(context, output->params.scale == 1.f / 256);
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	edd3 7a02 	vldr	s15, [r3, #8]
 80134e8:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80135b4 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x344>
 80134ec:	eef4 7a47 	vcmp.f32	s15, s14
 80134f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134f4:	d00a      	beq.n	801350c <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x29c>
 80134f6:	68fb      	ldr	r3, [r7, #12]
 80134f8:	695c      	ldr	r4, [r3, #20]
 80134fa:	4b2f      	ldr	r3, [pc, #188]	; (80135b8 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x348>)
 80134fc:	9300      	str	r3, [sp, #0]
 80134fe:	2368      	movs	r3, #104	; 0x68
 8013500:	4a19      	ldr	r2, [pc, #100]	; (8013568 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f8>)
 8013502:	492e      	ldr	r1, [pc, #184]	; (80135bc <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x34c>)
 8013504:	68f8      	ldr	r0, [r7, #12]
 8013506:	47a0      	blx	r4
 8013508:	2301      	movs	r3, #1
 801350a:	e0c9      	b.n	80136a0 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x430>
    }

    static const int kScaledDiffIntegerBits = 5;

    // Calculate input_multiplier and input_left_shift
    if (input->type == kTfLiteInt16) {
 801350c:	68bb      	ldr	r3, [r7, #8]
 801350e:	7f1b      	ldrb	r3, [r3, #28]
 8013510:	2b07      	cmp	r3, #7
 8013512:	d155      	bne.n	80135c0 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x350>
      int input_left_shift;
      double input_scale_beta_rescale =
          static_cast<double>(input->params.scale) *
 8013514:	68bb      	ldr	r3, [r7, #8]
 8013516:	edd3 7a02 	vldr	s15, [r3, #8]
 801351a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
          static_cast<double>(params->beta) /
 801351e:	683b      	ldr	r3, [r7, #0]
 8013520:	edd3 7a00 	vldr	s15, [r3]
 8013524:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
          static_cast<double>(input->params.scale) *
 8013528:	ee26 6b07 	vmul.f64	d6, d6, d7
      double input_scale_beta_rescale =
 801352c:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 8013558 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>
 8013530:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8013534:	ed87 7b06 	vstr	d7, [r7, #24]
          (10.0 / 65535.0);  // scale the input_diff such that [-65535, 0]
                             // correspond to [-10.0, 0.0]
      QuantizeMultiplier(input_scale_beta_rescale, &op_data->input_multiplier,
 8013538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801353a:	3308      	adds	r3, #8
 801353c:	f107 0214 	add.w	r2, r7, #20
 8013540:	4611      	mov	r1, r2
 8013542:	4618      	mov	r0, r3
 8013544:	ed97 0b06 	vldr	d0, [r7, #24]
 8013548:	f7f2 fc72 	bl	8005e30 <_ZN6tflite18QuantizeMultiplierEdPlPi>
                         &input_left_shift);
      op_data->input_left_shift = input_left_shift;
 801354c:	697a      	ldr	r2, [r7, #20]
 801354e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013550:	60da      	str	r2, [r3, #12]
      op_data->input_left_shift = input_left_shift;
      op_data->diff_min =
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
                                              op_data->input_left_shift);
    }
  } else {
 8013552:	e0a4      	b.n	801369e <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x42e>
 8013554:	f3af 8000 	nop.w
 8013558:	00140014 	.word	0x00140014
 801355c:	3f240014 	.word	0x3f240014
 8013560:	08027cdc 	.word	0x08027cdc
 8013564:	08027cfc 	.word	0x08027cfc
 8013568:	08027bd8 	.word	0x08027bd8
 801356c:	08027ca4 	.word	0x08027ca4
 8013570:	08027ce0 	.word	0x08027ce0
 8013574:	38000000 	.word	0x38000000
 8013578:	3303126f 	.word	0x3303126f
 801357c:	08027d38 	.word	0x08027d38
 8013580:	08027d44 	.word	0x08027d44
 8013584:	08027d18 	.word	0x08027d18
 8013588:	08027d78 	.word	0x08027d78
 801358c:	08027cd0 	.word	0x08027cd0
 8013590:	08027d5c 	.word	0x08027d5c
 8013594:	ffff8000 	.word	0xffff8000
 8013598:	08027d84 	.word	0x08027d84
 801359c:	37800000 	.word	0x37800000
 80135a0:	3283126f 	.word	0x3283126f
 80135a4:	3ef00000 	.word	0x3ef00000
 80135a8:	08027d8c 	.word	0x08027d8c
 80135ac:	08027cc0 	.word	0x08027cc0
 80135b0:	08027d98 	.word	0x08027d98
 80135b4:	3b800000 	.word	0x3b800000
 80135b8:	08027da0 	.word	0x08027da0
 80135bc:	08027c14 	.word	0x08027c14
          static_cast<double>(params->beta),
 80135c0:	683b      	ldr	r3, [r7, #0]
 80135c2:	edd3 7a00 	vldr	s15, [r3]
      tflite::PreprocessSoftmaxScaling(
 80135c6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
          static_cast<double>(input->params.scale), kScaledDiffIntegerBits,
 80135ca:	68bb      	ldr	r3, [r7, #8]
 80135cc:	edd3 6a02 	vldr	s13, [r3, #8]
      tflite::PreprocessSoftmaxScaling(
 80135d0:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80135d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135d6:	3308      	adds	r3, #8
 80135d8:	f107 0210 	add.w	r2, r7, #16
 80135dc:	4619      	mov	r1, r3
 80135de:	2005      	movs	r0, #5
 80135e0:	eeb0 1b46 	vmov.f64	d1, d6
 80135e4:	eeb0 0b47 	vmov.f64	d0, d7
 80135e8:	f7f2 fce2 	bl	8005fb0 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>
      op_data->input_left_shift = input_left_shift;
 80135ec:	693a      	ldr	r2, [r7, #16]
 80135ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135f0:	60da      	str	r2, [r3, #12]
                                              op_data->input_left_shift);
 80135f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135f4:	68db      	ldr	r3, [r3, #12]
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
 80135f6:	221f      	movs	r2, #31
 80135f8:	4619      	mov	r1, r3
 80135fa:	2005      	movs	r0, #5
 80135fc:	f7f2 fd18 	bl	8006030 <_ZN6tflite20CalculateInputRadiusEiii>
 8013600:	ee07 0a90 	vmov	s15, r0
 8013604:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8013608:	eeb1 7b47 	vneg.f64	d7, d7
      op_data->diff_min =
 801360c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8013610:	ee17 2a90 	vmov	r2, s15
 8013614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013616:	619a      	str	r2, [r3, #24]
  } else {
 8013618:	e041      	b.n	801369e <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x42e>
    TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
 801361a:	68bb      	ldr	r3, [r7, #8]
 801361c:	7f1b      	ldrb	r3, [r3, #28]
 801361e:	2b01      	cmp	r3, #1
 8013620:	d018      	beq.n	8013654 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x3e4>
 8013622:	68fb      	ldr	r3, [r7, #12]
 8013624:	695c      	ldr	r4, [r3, #20]
 8013626:	68bb      	ldr	r3, [r7, #8]
 8013628:	7f1b      	ldrb	r3, [r3, #28]
 801362a:	4618      	mov	r0, r3
 801362c:	f7f2 f88e 	bl	800574c <TfLiteTypeGetName>
 8013630:	4605      	mov	r5, r0
 8013632:	2001      	movs	r0, #1
 8013634:	f7f2 f88a 	bl	800574c <TfLiteTypeGetName>
 8013638:	4603      	mov	r3, r0
 801363a:	9303      	str	r3, [sp, #12]
 801363c:	9502      	str	r5, [sp, #8]
 801363e:	4b1a      	ldr	r3, [pc, #104]	; (80136a8 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x438>)
 8013640:	9301      	str	r3, [sp, #4]
 8013642:	4b1a      	ldr	r3, [pc, #104]	; (80136ac <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x43c>)
 8013644:	9300      	str	r3, [sp, #0]
 8013646:	2385      	movs	r3, #133	; 0x85
 8013648:	4a19      	ldr	r2, [pc, #100]	; (80136b0 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x440>)
 801364a:	491a      	ldr	r1, [pc, #104]	; (80136b4 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x444>)
 801364c:	68f8      	ldr	r0, [r7, #12]
 801364e:	47a0      	blx	r4
 8013650:	2301      	movs	r3, #1
 8013652:	e025      	b.n	80136a0 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x430>
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	7f1b      	ldrb	r3, [r3, #28]
 8013658:	2b01      	cmp	r3, #1
 801365a:	d018      	beq.n	801368e <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x41e>
 801365c:	68fb      	ldr	r3, [r7, #12]
 801365e:	695c      	ldr	r4, [r3, #20]
 8013660:	687b      	ldr	r3, [r7, #4]
 8013662:	7f1b      	ldrb	r3, [r3, #28]
 8013664:	4618      	mov	r0, r3
 8013666:	f7f2 f871 	bl	800574c <TfLiteTypeGetName>
 801366a:	4605      	mov	r5, r0
 801366c:	2001      	movs	r0, #1
 801366e:	f7f2 f86d 	bl	800574c <TfLiteTypeGetName>
 8013672:	4603      	mov	r3, r0
 8013674:	9303      	str	r3, [sp, #12]
 8013676:	9502      	str	r5, [sp, #8]
 8013678:	4b0b      	ldr	r3, [pc, #44]	; (80136a8 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x438>)
 801367a:	9301      	str	r3, [sp, #4]
 801367c:	4b0e      	ldr	r3, [pc, #56]	; (80136b8 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x448>)
 801367e:	9300      	str	r3, [sp, #0]
 8013680:	2386      	movs	r3, #134	; 0x86
 8013682:	4a0b      	ldr	r2, [pc, #44]	; (80136b0 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x440>)
 8013684:	490b      	ldr	r1, [pc, #44]	; (80136b4 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x444>)
 8013686:	68f8      	ldr	r0, [r7, #12]
 8013688:	47a0      	blx	r4
 801368a:	2301      	movs	r3, #1
 801368c:	e008      	b.n	80136a0 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x430>
    op_data->beta = static_cast<double>(params->beta);
 801368e:	683b      	ldr	r3, [r7, #0]
 8013690:	edd3 7a00 	vldr	s15, [r3]
 8013694:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8013698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801369a:	ed83 7b00 	vstr	d7, [r3]
  }
  return kTfLiteOk;
 801369e:	2300      	movs	r3, #0
}
 80136a0:	4618      	mov	r0, r3
 80136a2:	3728      	adds	r7, #40	; 0x28
 80136a4:	46bd      	mov	sp, r7
 80136a6:	bdb0      	pop	{r4, r5, r7, pc}
 80136a8:	08027dc4 	.word	0x08027dc4
 80136ac:	08027cd0 	.word	0x08027cd0
 80136b0:	08027bd8 	.word	0x08027bd8
 80136b4:	08027d5c 	.word	0x08027d5c
 80136b8:	08027cc0 	.word	0x08027cc0

080136bc <_ZN6tflite11SoftmaxInitEP13TfLiteContextPKcj>:

void* SoftmaxInit(TfLiteContext* context, const char* buffer, size_t length) {
 80136bc:	b580      	push	{r7, lr}
 80136be:	b084      	sub	sp, #16
 80136c0:	af00      	add	r7, sp, #0
 80136c2:	60f8      	str	r0, [r7, #12]
 80136c4:	60b9      	str	r1, [r7, #8]
 80136c6:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 80136c8:	68fb      	ldr	r3, [r7, #12]
 80136ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80136cc:	2b00      	cmp	r3, #0
 80136ce:	d101      	bne.n	80136d4 <_ZN6tflite11SoftmaxInitEP13TfLiteContextPKcj+0x18>
 80136d0:	f00c f9c6 	bl	801fa60 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(SoftmaxParams));
 80136d4:	68fb      	ldr	r3, [r7, #12]
 80136d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80136d8:	2138      	movs	r1, #56	; 0x38
 80136da:	68f8      	ldr	r0, [r7, #12]
 80136dc:	4798      	blx	r3
 80136de:	4603      	mov	r3, r0
}
 80136e0:	4618      	mov	r0, r3
 80136e2:	3710      	adds	r7, #16
 80136e4:	46bd      	mov	sp, r7
 80136e6:	bd80      	pop	{r7, pc}

080136e8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
 80136e8:	b590      	push	{r4, r7, lr}
 80136ea:	b08d      	sub	sp, #52	; 0x34
 80136ec:	af04      	add	r7, sp, #16
 80136ee:	6078      	str	r0, [r7, #4]
 80136f0:	6039      	str	r1, [r7, #0]
  MicroContext* micro_context = GetMicroContext(context);
 80136f2:	6878      	ldr	r0, [r7, #4]
 80136f4:	f7ef f90f 	bl	8002916 <_ZN6tflite15GetMicroContextEPK13TfLiteContext>
 80136f8:	61f8      	str	r0, [r7, #28]

  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
 80136fa:	6838      	ldr	r0, [r7, #0]
 80136fc:	f7ef f8e5 	bl	80028ca <_ZN6tflite9NumInputsEPK10TfLiteNode>
 8013700:	4603      	mov	r3, r0
 8013702:	2b01      	cmp	r3, #1
 8013704:	bf14      	ite	ne
 8013706:	2301      	movne	r3, #1
 8013708:	2300      	moveq	r3, #0
 801370a:	b2db      	uxtb	r3, r3
 801370c:	2b00      	cmp	r3, #0
 801370e:	d013      	beq.n	8013738 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x50>
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	695c      	ldr	r4, [r3, #20]
 8013714:	6838      	ldr	r0, [r7, #0]
 8013716:	f7ef f8d8 	bl	80028ca <_ZN6tflite9NumInputsEPK10TfLiteNode>
 801371a:	4603      	mov	r3, r0
 801371c:	2201      	movs	r2, #1
 801371e:	9203      	str	r2, [sp, #12]
 8013720:	9302      	str	r3, [sp, #8]
 8013722:	4b4d      	ldr	r3, [pc, #308]	; (8013858 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x170>)
 8013724:	9301      	str	r3, [sp, #4]
 8013726:	4b4d      	ldr	r3, [pc, #308]	; (801385c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x174>)
 8013728:	9300      	str	r3, [sp, #0]
 801372a:	2394      	movs	r3, #148	; 0x94
 801372c:	4a4c      	ldr	r2, [pc, #304]	; (8013860 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x178>)
 801372e:	494d      	ldr	r1, [pc, #308]	; (8013864 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x17c>)
 8013730:	6878      	ldr	r0, [r7, #4]
 8013732:	47a0      	blx	r4
 8013734:	2301      	movs	r3, #1
 8013736:	e08a      	b.n	801384e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x166>
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 8013738:	6838      	ldr	r0, [r7, #0]
 801373a:	f7ef f8d9 	bl	80028f0 <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 801373e:	4603      	mov	r3, r0
 8013740:	2b01      	cmp	r3, #1
 8013742:	bf14      	ite	ne
 8013744:	2301      	movne	r3, #1
 8013746:	2300      	moveq	r3, #0
 8013748:	b2db      	uxtb	r3, r3
 801374a:	2b00      	cmp	r3, #0
 801374c:	d013      	beq.n	8013776 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x8e>
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	695c      	ldr	r4, [r3, #20]
 8013752:	6838      	ldr	r0, [r7, #0]
 8013754:	f7ef f8cc 	bl	80028f0 <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 8013758:	4603      	mov	r3, r0
 801375a:	2201      	movs	r2, #1
 801375c:	9203      	str	r2, [sp, #12]
 801375e:	9302      	str	r3, [sp, #8]
 8013760:	4b3d      	ldr	r3, [pc, #244]	; (8013858 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x170>)
 8013762:	9301      	str	r3, [sp, #4]
 8013764:	4b40      	ldr	r3, [pc, #256]	; (8013868 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x180>)
 8013766:	9300      	str	r3, [sp, #0]
 8013768:	2395      	movs	r3, #149	; 0x95
 801376a:	4a3d      	ldr	r2, [pc, #244]	; (8013860 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x178>)
 801376c:	493d      	ldr	r1, [pc, #244]	; (8013864 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x17c>)
 801376e:	6878      	ldr	r0, [r7, #4]
 8013770:	47a0      	blx	r4
 8013772:	2301      	movs	r3, #1
 8013774:	e06b      	b.n	801384e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x166>
  TfLiteTensor* input = micro_context->AllocateTempInputTensor(node, 0);
 8013776:	2200      	movs	r2, #0
 8013778:	6839      	ldr	r1, [r7, #0]
 801377a:	69f8      	ldr	r0, [r7, #28]
 801377c:	f7f6 fc38 	bl	8009ff0 <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei>
 8013780:	61b8      	str	r0, [r7, #24]
  TF_LITE_ENSURE(context, input != nullptr);
 8013782:	69bb      	ldr	r3, [r7, #24]
 8013784:	2b00      	cmp	r3, #0
 8013786:	d10a      	bne.n	801379e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xb6>
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	695c      	ldr	r4, [r3, #20]
 801378c:	4b37      	ldr	r3, [pc, #220]	; (801386c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x184>)
 801378e:	9300      	str	r3, [sp, #0]
 8013790:	2397      	movs	r3, #151	; 0x97
 8013792:	4a33      	ldr	r2, [pc, #204]	; (8013860 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x178>)
 8013794:	4936      	ldr	r1, [pc, #216]	; (8013870 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x188>)
 8013796:	6878      	ldr	r0, [r7, #4]
 8013798:	47a0      	blx	r4
 801379a:	2301      	movs	r3, #1
 801379c:	e057      	b.n	801384e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x166>
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
 801379e:	69b8      	ldr	r0, [r7, #24]
 80137a0:	f7ef f8e3 	bl	800296a <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>
 80137a4:	4603      	mov	r3, r0
 80137a6:	2b00      	cmp	r3, #0
 80137a8:	bfd4      	ite	le
 80137aa:	2301      	movle	r3, #1
 80137ac:	2300      	movgt	r3, #0
 80137ae:	b2db      	uxtb	r3, r3
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	d00a      	beq.n	80137ca <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xe2>
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	695c      	ldr	r4, [r3, #20]
 80137b8:	4b2e      	ldr	r3, [pc, #184]	; (8013874 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
 80137ba:	9300      	str	r3, [sp, #0]
 80137bc:	2398      	movs	r3, #152	; 0x98
 80137be:	4a28      	ldr	r2, [pc, #160]	; (8013860 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x178>)
 80137c0:	492b      	ldr	r1, [pc, #172]	; (8013870 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x188>)
 80137c2:	6878      	ldr	r0, [r7, #4]
 80137c4:	47a0      	blx	r4
 80137c6:	2301      	movs	r3, #1
 80137c8:	e041      	b.n	801384e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x166>
  TfLiteTensor* output = micro_context->AllocateTempOutputTensor(node, 0);
 80137ca:	2200      	movs	r2, #0
 80137cc:	6839      	ldr	r1, [r7, #0]
 80137ce:	69f8      	ldr	r0, [r7, #28]
 80137d0:	f7f6 fc31 	bl	800a036 <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei>
 80137d4:	6178      	str	r0, [r7, #20]
  TF_LITE_ENSURE(context, output != nullptr);
 80137d6:	697b      	ldr	r3, [r7, #20]
 80137d8:	2b00      	cmp	r3, #0
 80137da:	d10a      	bne.n	80137f2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x10a>
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	695c      	ldr	r4, [r3, #20]
 80137e0:	4b25      	ldr	r3, [pc, #148]	; (8013878 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x190>)
 80137e2:	9300      	str	r3, [sp, #0]
 80137e4:	239a      	movs	r3, #154	; 0x9a
 80137e6:	4a1e      	ldr	r2, [pc, #120]	; (8013860 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x178>)
 80137e8:	4921      	ldr	r1, [pc, #132]	; (8013870 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x188>)
 80137ea:	6878      	ldr	r0, [r7, #4]
 80137ec:	47a0      	blx	r4
 80137ee:	2301      	movs	r3, #1
 80137f0:	e02d      	b.n	801384e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x166>

  TF_LITE_ENSURE(context, node->user_data != nullptr);
 80137f2:	683b      	ldr	r3, [r7, #0]
 80137f4:	68db      	ldr	r3, [r3, #12]
 80137f6:	2b00      	cmp	r3, #0
 80137f8:	d10a      	bne.n	8013810 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x128>
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	695c      	ldr	r4, [r3, #20]
 80137fe:	4b1f      	ldr	r3, [pc, #124]	; (801387c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x194>)
 8013800:	9300      	str	r3, [sp, #0]
 8013802:	239c      	movs	r3, #156	; 0x9c
 8013804:	4a16      	ldr	r2, [pc, #88]	; (8013860 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x178>)
 8013806:	491a      	ldr	r1, [pc, #104]	; (8013870 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x188>)
 8013808:	6878      	ldr	r0, [r7, #4]
 801380a:	47a0      	blx	r4
 801380c:	2301      	movs	r3, #1
 801380e:	e01e      	b.n	801384e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x166>
  SoftmaxParams* op_data = static_cast<SoftmaxParams*>(node->user_data);
 8013810:	683b      	ldr	r3, [r7, #0]
 8013812:	68db      	ldr	r3, [r3, #12]
 8013814:	613b      	str	r3, [r7, #16]

  auto* params = static_cast<TfLiteSoftmaxParams*>(node->builtin_data);
 8013816:	683b      	ldr	r3, [r7, #0]
 8013818:	691b      	ldr	r3, [r3, #16]
 801381a:	60fb      	str	r3, [r7, #12]
  auto ret_val =
      CalculateSoftmaxParams(context, input, output, params, op_data);
 801381c:	693b      	ldr	r3, [r7, #16]
 801381e:	9300      	str	r3, [sp, #0]
 8013820:	68fb      	ldr	r3, [r7, #12]
 8013822:	697a      	ldr	r2, [r7, #20]
 8013824:	69b9      	ldr	r1, [r7, #24]
 8013826:	6878      	ldr	r0, [r7, #4]
 8013828:	f7ff fd22 	bl	8013270 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>
 801382c:	4603      	mov	r3, r0
 801382e:	72fb      	strb	r3, [r7, #11]

  micro_context->DeallocateTempTfLiteTensor(input);
 8013830:	69fb      	ldr	r3, [r7, #28]
 8013832:	681b      	ldr	r3, [r3, #0]
 8013834:	3318      	adds	r3, #24
 8013836:	681b      	ldr	r3, [r3, #0]
 8013838:	69b9      	ldr	r1, [r7, #24]
 801383a:	69f8      	ldr	r0, [r7, #28]
 801383c:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(output);
 801383e:	69fb      	ldr	r3, [r7, #28]
 8013840:	681b      	ldr	r3, [r3, #0]
 8013842:	3318      	adds	r3, #24
 8013844:	681b      	ldr	r3, [r3, #0]
 8013846:	6979      	ldr	r1, [r7, #20]
 8013848:	69f8      	ldr	r0, [r7, #28]
 801384a:	4798      	blx	r3
  return ret_val;
 801384c:	7afb      	ldrb	r3, [r7, #11]
}
 801384e:	4618      	mov	r0, r3
 8013850:	3724      	adds	r7, #36	; 0x24
 8013852:	46bd      	mov	sp, r7
 8013854:	bd90      	pop	{r4, r7, pc}
 8013856:	bf00      	nop
 8013858:	08027dd4 	.word	0x08027dd4
 801385c:	08027dd8 	.word	0x08027dd8
 8013860:	08027bd8 	.word	0x08027bd8
 8013864:	08027ca4 	.word	0x08027ca4
 8013868:	08027de8 	.word	0x08027de8
 801386c:	08027dfc 	.word	0x08027dfc
 8013870:	08027c14 	.word	0x08027c14
 8013874:	08027e10 	.word	0x08027e10
 8013878:	08027e2c 	.word	0x08027e2c
 801387c:	08027e40 	.word	0x08027e40

08013880 <_ZN6tflite11LUTPopulateIsEENSt9enable_ifIXsrSt7is_sameIT_sE5valueEvE4typeEflflPFffEPS3_>:
LUTPopulate(float input_scale, int32_t input_zero_point, float output_scale,
 8013880:	b580      	push	{r7, lr}
 8013882:	b088      	sub	sp, #32
 8013884:	af02      	add	r7, sp, #8
 8013886:	ed87 0a05 	vstr	s0, [r7, #20]
 801388a:	6138      	str	r0, [r7, #16]
 801388c:	edc7 0a03 	vstr	s1, [r7, #12]
 8013890:	60b9      	str	r1, [r7, #8]
 8013892:	607a      	str	r2, [r7, #4]
 8013894:	603b      	str	r3, [r7, #0]
  detail::LUTPopulateInt16<float>(input_scale, input_zero_point, output_scale,
 8013896:	683b      	ldr	r3, [r7, #0]
 8013898:	9300      	str	r3, [sp, #0]
 801389a:	2300      	movs	r3, #0
 801389c:	687a      	ldr	r2, [r7, #4]
 801389e:	68b9      	ldr	r1, [r7, #8]
 80138a0:	edd7 0a03 	vldr	s1, [r7, #12]
 80138a4:	6938      	ldr	r0, [r7, #16]
 80138a6:	ed97 0a05 	vldr	s0, [r7, #20]
 80138aa:	f000 f805 	bl	80138b8 <_ZN6tflite6detail16LUTPopulateInt16IfPFffEEEvT_lS4_lT0_PKvPs>
}
 80138ae:	bf00      	nop
 80138b0:	3718      	adds	r7, #24
 80138b2:	46bd      	mov	sp, r7
 80138b4:	bd80      	pop	{r7, pc}
	...

080138b8 <_ZN6tflite6detail16LUTPopulateInt16IfPFffEEEvT_lS4_lT0_PKvPs>:
inline void LUTPopulateInt16(FloatT input_scale, int32_t input_zero_point,
 80138b8:	b590      	push	{r4, r7, lr}
 80138ba:	ed2d 8b02 	vpush	{d8}
 80138be:	b09d      	sub	sp, #116	; 0x74
 80138c0:	af00      	add	r7, sp, #0
 80138c2:	ed87 0a05 	vstr	s0, [r7, #20]
 80138c6:	6138      	str	r0, [r7, #16]
 80138c8:	edc7 0a03 	vstr	s1, [r7, #12]
 80138cc:	60b9      	str	r1, [r7, #8]
 80138ce:	607a      	str	r2, [r7, #4]
 80138d0:	603b      	str	r3, [r7, #0]
      input_scale * (std::numeric_limits<int16_t>::min() - input_zero_point);
 80138d2:	f7f2 fcc3 	bl	800625c <_ZNSt14numeric_limitsIsE3minEv>
 80138d6:	4603      	mov	r3, r0
 80138d8:	461a      	mov	r2, r3
 80138da:	693b      	ldr	r3, [r7, #16]
 80138dc:	1ad3      	subs	r3, r2, r3
 80138de:	ee07 3a90 	vmov	s15, r3
 80138e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  const FloatT input_min =
 80138e6:	ed97 7a05 	vldr	s14, [r7, #20]
 80138ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80138ee:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
      input_scale * (std::numeric_limits<int16_t>::max() - input_zero_point);
 80138f2:	f7f2 fcbd 	bl	8006270 <_ZNSt14numeric_limitsIsE3maxEv>
 80138f6:	4603      	mov	r3, r0
 80138f8:	461a      	mov	r2, r3
 80138fa:	693b      	ldr	r3, [r7, #16]
 80138fc:	1ad3      	subs	r3, r2, r3
 80138fe:	ee07 3a90 	vmov	s15, r3
 8013902:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  const FloatT input_max =
 8013906:	ed97 7a05 	vldr	s14, [r7, #20]
 801390a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801390e:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
      output_scale * (std::numeric_limits<int16_t>::min() - output_zero_point);
 8013912:	f7f2 fca3 	bl	800625c <_ZNSt14numeric_limitsIsE3minEv>
 8013916:	4603      	mov	r3, r0
 8013918:	461a      	mov	r2, r3
 801391a:	68bb      	ldr	r3, [r7, #8]
 801391c:	1ad3      	subs	r3, r2, r3
 801391e:	ee07 3a90 	vmov	s15, r3
 8013922:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  const FloatT output_min =
 8013926:	ed97 7a03 	vldr	s14, [r7, #12]
 801392a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801392e:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
      output_scale * (std::numeric_limits<int16_t>::max() - output_zero_point);
 8013932:	f7f2 fc9d 	bl	8006270 <_ZNSt14numeric_limitsIsE3maxEv>
 8013936:	4603      	mov	r3, r0
 8013938:	461a      	mov	r2, r3
 801393a:	68bb      	ldr	r3, [r7, #8]
 801393c:	1ad3      	subs	r3, r2, r3
 801393e:	ee07 3a90 	vmov	s15, r3
 8013942:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  const FloatT output_max =
 8013946:	ed97 7a03 	vldr	s14, [r7, #12]
 801394a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801394e:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
  const int nb_steps = 512;
 8013952:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013956:	65bb      	str	r3, [r7, #88]	; 0x58
  const FloatT step = (input_max - input_min) / nb_steps;
 8013958:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 801395c:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8013960:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013964:	eddf 6a8e 	vldr	s13, [pc, #568]	; 8013ba0 <_ZN6tflite6detail16LUTPopulateInt16IfPFffEEEvT_lS4_lT0_PKvPs+0x2e8>
 8013968:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801396c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
  const FloatT half_step = step / 2;
 8013970:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8013974:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8013978:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801397c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
      static_cast<FloatT>(std::numeric_limits<int16_t>::max() -
 8013980:	f7f2 fc76 	bl	8006270 <_ZNSt14numeric_limitsIsE3maxEv>
 8013984:	4603      	mov	r3, r0
 8013986:	461c      	mov	r4, r3
                          std::numeric_limits<int16_t>::min() + 1) /
 8013988:	f7f2 fc68 	bl	800625c <_ZNSt14numeric_limitsIsE3minEv>
 801398c:	4603      	mov	r3, r0
      static_cast<FloatT>(std::numeric_limits<int16_t>::max() -
 801398e:	1ae3      	subs	r3, r4, r3
                          std::numeric_limits<int16_t>::min() + 1) /
 8013990:	3301      	adds	r3, #1
      static_cast<FloatT>(std::numeric_limits<int16_t>::max() -
 8013992:	ee07 3a90 	vmov	s15, r3
 8013996:	eef8 6ae7 	vcvt.f32.s32	s13, s15
      (output_max - output_min);
 801399a:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 801399e:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80139a2:	ee37 7a67 	vsub.f32	s14, s14, s15
  const FloatT output_scaling_inv =
 80139a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80139aa:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
  const FloatT table_min =
 80139ae:	f04f 4347 	mov.w	r3, #3338665984	; 0xc7000000
 80139b2:	623b      	str	r3, [r7, #32]
  const FloatT table_max =
 80139b4:	4b7b      	ldr	r3, [pc, #492]	; (8013ba4 <_ZN6tflite6detail16LUTPopulateInt16IfPFffEEEvT_lS4_lT0_PKvPs+0x2ec>)
 80139b6:	61fb      	str	r3, [r7, #28]
  for (int i = 0; i < nb_steps; i++) {
 80139b8:	2300      	movs	r3, #0
 80139ba:	66fb      	str	r3, [r7, #108]	; 0x6c
 80139bc:	e0b5      	b.n	8013b2a <_ZN6tflite6detail16LUTPopulateInt16IfPFffEEEvT_lS4_lT0_PKvPs+0x272>
        LUTTransform<FloatT>(transform, transform_params, input_min + i * step);
 80139be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80139c0:	ee07 3a90 	vmov	s15, r3
 80139c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80139c8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80139cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80139d0:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80139d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80139d8:	eeb0 0a67 	vmov.f32	s0, s15
 80139dc:	6839      	ldr	r1, [r7, #0]
 80139de:	6878      	ldr	r0, [r7, #4]
 80139e0:	f000 f8e2 	bl	8013ba8 <_ZN6tflite6detail12LUTTransformIfPFffEEENSt9enable_ifIXsrSt7is_sameIT0_PFT_S7_EE5valueES7_E4typeES6_PKvS7_>
 80139e4:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48
        transform, transform_params, input_min + i * step + half_step);
 80139e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80139ea:	ee07 3a90 	vmov	s15, r3
 80139ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80139f2:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80139f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80139fa:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80139fe:	ee37 7a27 	vadd.f32	s14, s14, s15
    const FloatT val_midpoint = LUTTransform<FloatT>(
 8013a02:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8013a06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013a0a:	eeb0 0a67 	vmov.f32	s0, s15
 8013a0e:	6839      	ldr	r1, [r7, #0]
 8013a10:	6878      	ldr	r0, [r7, #4]
 8013a12:	f000 f8c9 	bl	8013ba8 <_ZN6tflite6detail12LUTTransformIfPFffEEENSt9enable_ifIXsrSt7is_sameIT0_PFT_S7_EE5valueES7_E4typeES6_PKvS7_>
 8013a16:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44
                                                 input_min + (i + 1) * step);
 8013a1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013a1c:	3301      	adds	r3, #1
 8013a1e:	ee07 3a90 	vmov	s15, r3
 8013a22:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013a26:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8013a2a:	ee27 7a27 	vmul.f32	s14, s14, s15
    const FloatT val_next = LUTTransform<FloatT>(transform, transform_params,
 8013a2e:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8013a32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013a36:	eeb0 0a67 	vmov.f32	s0, s15
 8013a3a:	6839      	ldr	r1, [r7, #0]
 8013a3c:	6878      	ldr	r0, [r7, #4]
 8013a3e:	f000 f8b3 	bl	8013ba8 <_ZN6tflite6detail12LUTTransformIfPFffEEENSt9enable_ifIXsrSt7is_sameIT0_PFT_S7_EE5valueES7_E4typeES6_PKvS7_>
 8013a42:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
    const FloatT sample_val = TfLiteRound(val * output_scaling_inv);
 8013a46:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8013a4a:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8013a4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013a52:	eeb0 0a67 	vmov.f32	s0, s15
 8013a56:	f7f2 fb5a 	bl	800610e <_ZN6tflite11TfLiteRoundIfEET_S1_>
 8013a5a:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
        TfLiteRound((val_next * output_scaling_inv +
 8013a5e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8013a62:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8013a66:	ee27 8a27 	vmul.f32	s16, s14, s15
                     TfLiteRound(val * output_scaling_inv)) /
 8013a6a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8013a6e:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8013a72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013a76:	eeb0 0a67 	vmov.f32	s0, s15
 8013a7a:	f7f2 fb48 	bl	800610e <_ZN6tflite11TfLiteRoundIfEET_S1_>
 8013a7e:	eef0 7a40 	vmov.f32	s15, s0
        TfLiteRound((val_next * output_scaling_inv +
 8013a82:	ee78 7a27 	vadd.f32	s15, s16, s15
 8013a86:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8013a8a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8013a8e:	eeb0 0a47 	vmov.f32	s0, s14
 8013a92:	f7f2 fb3c 	bl	800610e <_ZN6tflite11TfLiteRoundIfEET_S1_>
 8013a96:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
    const FloatT midpoint_val = TfLiteRound(val_midpoint * output_scaling_inv);
 8013a9a:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8013a9e:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8013aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013aa6:	eeb0 0a67 	vmov.f32	s0, s15
 8013aaa:	f7f2 fb30 	bl	800610e <_ZN6tflite11TfLiteRoundIfEET_S1_>
 8013aae:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
    const FloatT midpoint_err = midpoint_interp_val - midpoint_val;
 8013ab2:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8013ab6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8013aba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013abe:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    const FloatT bias = TfLiteRound(midpoint_err / 2);
 8013ac2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8013ac6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8013aca:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8013ace:	eeb0 0a47 	vmov.f32	s0, s14
 8013ad2:	f7f2 fb1c 	bl	800610e <_ZN6tflite11TfLiteRoundIfEET_S1_>
 8013ad6:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
        std::max<FloatT>(sample_val - bias, table_min), table_max));
 8013ada:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8013ade:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8013ae2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013ae6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    lut[i] = static_cast<int16_t>(std::min<FloatT>(
 8013aea:	f107 0220 	add.w	r2, r7, #32
 8013aee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013af2:	4611      	mov	r1, r2
 8013af4:	4618      	mov	r0, r3
 8013af6:	f7f2 f950 	bl	8005d9a <_ZSt3maxIfERKT_S2_S2_>
 8013afa:	4602      	mov	r2, r0
 8013afc:	f107 031c 	add.w	r3, r7, #28
 8013b00:	4619      	mov	r1, r3
 8013b02:	4610      	mov	r0, r2
 8013b04:	f7f2 f962 	bl	8005dcc <_ZSt3minIfERKT_S2_S2_>
 8013b08:	4603      	mov	r3, r0
 8013b0a:	edd3 7a00 	vldr	s15, [r3]
 8013b0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013b10:	005b      	lsls	r3, r3, #1
 8013b12:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8013b16:	4413      	add	r3, r2
 8013b18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013b1c:	ee17 2a90 	vmov	r2, s15
 8013b20:	b212      	sxth	r2, r2
 8013b22:	801a      	strh	r2, [r3, #0]
  for (int i = 0; i < nb_steps; i++) {
 8013b24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013b26:	3301      	adds	r3, #1
 8013b28:	66fb      	str	r3, [r7, #108]	; 0x6c
 8013b2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013b2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013b30:	f6ff af45 	blt.w	80139be <_ZN6tflite6detail16LUTPopulateInt16IfPFffEEEvT_lS4_lT0_PKvPs+0x106>
      std::max<FloatT>(TfLiteRound(LUTTransform<FloatT>(
 8013b34:	ed97 0a19 	vldr	s0, [r7, #100]	; 0x64
 8013b38:	6839      	ldr	r1, [r7, #0]
 8013b3a:	6878      	ldr	r0, [r7, #4]
 8013b3c:	f000 f834 	bl	8013ba8 <_ZN6tflite6detail12LUTTransformIfPFffEEENSt9enable_ifIXsrSt7is_sameIT0_PFT_S7_EE5valueES7_E4typeES6_PKvS7_>
 8013b40:	eeb0 7a40 	vmov.f32	s14, s0
 8013b44:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8013b48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013b4c:	eeb0 0a67 	vmov.f32	s0, s15
 8013b50:	f7f2 fadd 	bl	800610e <_ZN6tflite11TfLiteRoundIfEET_S1_>
 8013b54:	eef0 7a40 	vmov.f32	s15, s0
 8013b58:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
  lut[nb_steps] = static_cast<int16_t>(std::min<FloatT>(
 8013b5c:	f107 0220 	add.w	r2, r7, #32
 8013b60:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013b64:	4611      	mov	r1, r2
 8013b66:	4618      	mov	r0, r3
 8013b68:	f7f2 f917 	bl	8005d9a <_ZSt3maxIfERKT_S2_S2_>
 8013b6c:	4602      	mov	r2, r0
 8013b6e:	f107 031c 	add.w	r3, r7, #28
 8013b72:	4619      	mov	r1, r3
 8013b74:	4610      	mov	r0, r2
 8013b76:	f7f2 f929 	bl	8005dcc <_ZSt3minIfERKT_S2_S2_>
 8013b7a:	4603      	mov	r3, r0
 8013b7c:	edd3 7a00 	vldr	s15, [r3]
 8013b80:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013b84:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013b88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013b8c:	ee17 2a90 	vmov	r2, s15
 8013b90:	b212      	sxth	r2, r2
 8013b92:	801a      	strh	r2, [r3, #0]
}
 8013b94:	bf00      	nop
 8013b96:	3774      	adds	r7, #116	; 0x74
 8013b98:	46bd      	mov	sp, r7
 8013b9a:	ecbd 8b02 	vpop	{d8}
 8013b9e:	bd90      	pop	{r4, r7, pc}
 8013ba0:	44000000 	.word	0x44000000
 8013ba4:	46fffe00 	.word	0x46fffe00

08013ba8 <_ZN6tflite6detail12LUTTransformIfPFffEEENSt9enable_ifIXsrSt7is_sameIT0_PFT_S7_EE5valueES7_E4typeES6_PKvS7_>:
LUTTransform(Func transform, const void* /*transform_params*/, FloatT value) {
 8013ba8:	b580      	push	{r7, lr}
 8013baa:	b084      	sub	sp, #16
 8013bac:	af00      	add	r7, sp, #0
 8013bae:	60f8      	str	r0, [r7, #12]
 8013bb0:	60b9      	str	r1, [r7, #8]
 8013bb2:	ed87 0a01 	vstr	s0, [r7, #4]
  return transform(value);
 8013bb6:	68fb      	ldr	r3, [r7, #12]
 8013bb8:	ed97 0a01 	vldr	s0, [r7, #4]
 8013bbc:	4798      	blx	r3
 8013bbe:	eef0 7a40 	vmov.f32	s15, s0
}
 8013bc2:	eeb0 0a67 	vmov.f32	s0, s15
 8013bc6:	3710      	adds	r7, #16
 8013bc8:	46bd      	mov	sp, r7
 8013bca:	bd80      	pop	{r7, pc}

08013bcc <_ZN6tflite18MicroMemoryPlannerC1Ev>:
// The goal is for applications to be able to experiment with different layout
// strategies without changing their client code, by swapping out classes that
// implement this interface.=
class MicroMemoryPlanner {
 public:
  MicroMemoryPlanner() {}
 8013bcc:	b480      	push	{r7}
 8013bce:	b083      	sub	sp, #12
 8013bd0:	af00      	add	r7, sp, #0
 8013bd2:	6078      	str	r0, [r7, #4]
 8013bd4:	4a04      	ldr	r2, [pc, #16]	; (8013be8 <_ZN6tflite18MicroMemoryPlannerC1Ev+0x1c>)
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	601a      	str	r2, [r3, #0]
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	4618      	mov	r0, r3
 8013bde:	370c      	adds	r7, #12
 8013be0:	46bd      	mov	sp, r7
 8013be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013be6:	4770      	bx	lr
 8013be8:	08029374 	.word	0x08029374

08013bec <_ZN6tflite18MicroMemoryPlannerD1Ev>:
  virtual ~MicroMemoryPlanner() {}
 8013bec:	b480      	push	{r7}
 8013bee:	b083      	sub	sp, #12
 8013bf0:	af00      	add	r7, sp, #0
 8013bf2:	6078      	str	r0, [r7, #4]
 8013bf4:	4a04      	ldr	r2, [pc, #16]	; (8013c08 <_ZN6tflite18MicroMemoryPlannerD1Ev+0x1c>)
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	601a      	str	r2, [r3, #0]
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	4618      	mov	r0, r3
 8013bfe:	370c      	adds	r7, #12
 8013c00:	46bd      	mov	sp, r7
 8013c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c06:	4770      	bx	lr
 8013c08:	08029374 	.word	0x08029374

08013c0c <_ZN6tflite18MicroMemoryPlannerD0Ev>:
 8013c0c:	b580      	push	{r7, lr}
 8013c0e:	b082      	sub	sp, #8
 8013c10:	af00      	add	r7, sp, #0
 8013c12:	6078      	str	r0, [r7, #4]
 8013c14:	6878      	ldr	r0, [r7, #4]
 8013c16:	f7ff ffe9 	bl	8013bec <_ZN6tflite18MicroMemoryPlannerD1Ev>
 8013c1a:	2104      	movs	r1, #4
 8013c1c:	6878      	ldr	r0, [r7, #4]
 8013c1e:	f00b fd7b 	bl	801f718 <_ZdlPvj>
 8013c22:	687b      	ldr	r3, [r7, #4]
 8013c24:	4618      	mov	r0, r3
 8013c26:	3708      	adds	r7, #8
 8013c28:	46bd      	mov	sp, r7
 8013c2a:	bd80      	pop	{r7, pc}

08013c2c <_ZN6tflite18MicroMemoryPlanner9AddBufferEiiii>:

  // Record details of an offline planned buffer offset we want to place.
  // offline_offset is the buffer offset from the start of the arena.
  // This is to support offline memory planning from the flatbuffer metadata.
  // By default, it returns an error.
  virtual TfLiteStatus AddBuffer(int size, int first_time_used,
 8013c2c:	b480      	push	{r7}
 8013c2e:	b085      	sub	sp, #20
 8013c30:	af00      	add	r7, sp, #0
 8013c32:	60f8      	str	r0, [r7, #12]
 8013c34:	60b9      	str	r1, [r7, #8]
 8013c36:	607a      	str	r2, [r7, #4]
 8013c38:	603b      	str	r3, [r7, #0]
                                 int last_time_used, int offline_offset) {
    return kTfLiteError;
 8013c3a:	2301      	movs	r3, #1
  }
 8013c3c:	4618      	mov	r0, r3
 8013c3e:	3714      	adds	r7, #20
 8013c40:	46bd      	mov	sp, r7
 8013c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c46:	4770      	bx	lr

08013c48 <_ZN6tflite18MicroMemoryPlanner4InitEPhi>:
  // Provides the scratch buffer in case that the memory planner needs it.
  // The lifetime of scratch buffers lifetime lasts until the static memory plan
  // is committed.
  // The default implementation is for the memory planner that does not need
  // scratch buffer and simply returns ok.
  virtual TfLiteStatus Init(unsigned char* scratch_buffer,
 8013c48:	b480      	push	{r7}
 8013c4a:	b085      	sub	sp, #20
 8013c4c:	af00      	add	r7, sp, #0
 8013c4e:	60f8      	str	r0, [r7, #12]
 8013c50:	60b9      	str	r1, [r7, #8]
 8013c52:	607a      	str	r2, [r7, #4]
                            int scratch_buffer_size) {
    return kTfLiteOk;
 8013c54:	2300      	movs	r3, #0
  }
 8013c56:	4618      	mov	r0, r3
 8013c58:	3714      	adds	r7, #20
 8013c5a:	46bd      	mov	sp, r7
 8013c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c60:	4770      	bx	lr

08013c62 <_ZN6tflite18MicroMemoryPlanner15PrintMemoryPlanEv>:

  // Method will return True if the MicroMemoryPlanner preserves all tensors
  // after invocation, and False if it doesn't.
  virtual bool preserves_all_tensors() const = 0;

  virtual void PrintMemoryPlan() {
 8013c62:	b480      	push	{r7}
 8013c64:	b083      	sub	sp, #12
 8013c66:	af00      	add	r7, sp, #0
 8013c68:	6078      	str	r0, [r7, #4]
    // Default does nothing.
  }
 8013c6a:	bf00      	nop
 8013c6c:	370c      	adds	r7, #12
 8013c6e:	46bd      	mov	sp, r7
 8013c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c74:	4770      	bx	lr

08013c76 <_ZN6tflite19GreedyMemoryPlanner15per_buffer_sizeEv>:
    int requirements_index;
    int next_entry_index;
  };

  // Number of bytes required in order to plan a buffer.
  static size_t per_buffer_size() {
 8013c76:	b480      	push	{r7}
 8013c78:	b083      	sub	sp, #12
 8013c7a:	af00      	add	r7, sp, #0
    const int per_buffer_size =
 8013c7c:	2328      	movs	r3, #40	; 0x28
 8013c7e:	607b      	str	r3, [r7, #4]
        sizeof(BufferRequirements) +  // requirements_
        sizeof(int) +                 // buffer_sizes_sorted_
        sizeof(int) +                 // buffer_ids_sorted_
        sizeof(ListEntry) +           // buffers_sorted_by_offset_
        sizeof(int);                  // buffer_offsets_;
    return per_buffer_size;
 8013c80:	2328      	movs	r3, #40	; 0x28
  }
 8013c82:	4618      	mov	r0, r3
 8013c84:	370c      	adds	r7, #12
 8013c86:	46bd      	mov	sp, r7
 8013c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c8c:	4770      	bx	lr

08013c8e <_ZNK6tflite19GreedyMemoryPlanner21preserves_all_tensorsEv>:

  // Returns False because the GreedyMemoryPlanner doesn't preserves all tensors
  // after invocation. Do to the fact that tensors that tensor data for tensors
  // that aren't being used during a phase of invocation are overwritten.
  bool preserves_all_tensors() const override { return false; }
 8013c8e:	b480      	push	{r7}
 8013c90:	b083      	sub	sp, #12
 8013c92:	af00      	add	r7, sp, #0
 8013c94:	6078      	str	r0, [r7, #4]
 8013c96:	2300      	movs	r3, #0
 8013c98:	4618      	mov	r0, r3
 8013c9a:	370c      	adds	r7, #12
 8013c9c:	46bd      	mov	sp, r7
 8013c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ca2:	4770      	bx	lr

08013ca4 <_ZN6tflite19GreedyMemoryPlannerdlEPv>:
  int* buffer_offsets_;

  // Whether buffers have been added since the last plan was calculated.
  bool need_to_calculate_offsets_;

  TF_LITE_REMOVE_VIRTUAL_DELETE
 8013ca4:	b480      	push	{r7}
 8013ca6:	b083      	sub	sp, #12
 8013ca8:	af00      	add	r7, sp, #0
 8013caa:	6078      	str	r0, [r7, #4]
 8013cac:	bf00      	nop
 8013cae:	370c      	adds	r7, #12
 8013cb0:	46bd      	mov	sp, r7
 8013cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cb6:	4770      	bx	lr

08013cb8 <_ZN6tflite12_GLOBAL__N_119GetOrdinalCharacterEi>:

namespace {

// Returns a character representing a numbered buffer
// for GreedyMemoryPlanner::PrintMemoryPlan()
char GetOrdinalCharacter(int i) {
 8013cb8:	b480      	push	{r7}
 8013cba:	b083      	sub	sp, #12
 8013cbc:	af00      	add	r7, sp, #0
 8013cbe:	6078      	str	r0, [r7, #4]
  if (i < 10) {
 8013cc0:	687b      	ldr	r3, [r7, #4]
 8013cc2:	2b09      	cmp	r3, #9
 8013cc4:	dc04      	bgt.n	8013cd0 <_ZN6tflite12_GLOBAL__N_119GetOrdinalCharacterEi+0x18>
    return '0' + i;
 8013cc6:	687b      	ldr	r3, [r7, #4]
 8013cc8:	b2db      	uxtb	r3, r3
 8013cca:	3330      	adds	r3, #48	; 0x30
 8013ccc:	b2db      	uxtb	r3, r3
 8013cce:	e010      	b.n	8013cf2 <_ZN6tflite12_GLOBAL__N_119GetOrdinalCharacterEi+0x3a>
  } else if (i < 36) {
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	2b23      	cmp	r3, #35	; 0x23
 8013cd4:	dc04      	bgt.n	8013ce0 <_ZN6tflite12_GLOBAL__N_119GetOrdinalCharacterEi+0x28>
    return 'a' + (i - 10);
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	b2db      	uxtb	r3, r3
 8013cda:	3357      	adds	r3, #87	; 0x57
 8013cdc:	b2db      	uxtb	r3, r3
 8013cde:	e008      	b.n	8013cf2 <_ZN6tflite12_GLOBAL__N_119GetOrdinalCharacterEi+0x3a>
  } else if (i < 62) {
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	2b3d      	cmp	r3, #61	; 0x3d
 8013ce4:	dc04      	bgt.n	8013cf0 <_ZN6tflite12_GLOBAL__N_119GetOrdinalCharacterEi+0x38>
    return 'A' + (i - 36);
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	b2db      	uxtb	r3, r3
 8013cea:	331d      	adds	r3, #29
 8013cec:	b2db      	uxtb	r3, r3
 8013cee:	e000      	b.n	8013cf2 <_ZN6tflite12_GLOBAL__N_119GetOrdinalCharacterEi+0x3a>
  }
  return '*';
 8013cf0:	232a      	movs	r3, #42	; 0x2a
}
 8013cf2:	4618      	mov	r0, r3
 8013cf4:	370c      	adds	r7, #12
 8013cf6:	46bd      	mov	sp, r7
 8013cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cfc:	4770      	bx	lr

08013cfe <_ZN6tflite18ReverseSortInPlaceEPiS0_i>:
}  // namespace

// Simple stable in-place sort function. Not time-efficient for large arrays.
// Would normally be in an anonymous namespace to keep it private, but we want
// to be able to test it externally.
void ReverseSortInPlace(int* values, int* ids, int size) {
 8013cfe:	b480      	push	{r7}
 8013d00:	b089      	sub	sp, #36	; 0x24
 8013d02:	af00      	add	r7, sp, #0
 8013d04:	60f8      	str	r0, [r7, #12]
 8013d06:	60b9      	str	r1, [r7, #8]
 8013d08:	607a      	str	r2, [r7, #4]
  bool any_swapped;
  do {
    any_swapped = false;
 8013d0a:	2300      	movs	r3, #0
 8013d0c:	77fb      	strb	r3, [r7, #31]
    for (int i = 1; i < size; ++i) {
 8013d0e:	2301      	movs	r3, #1
 8013d10:	61bb      	str	r3, [r7, #24]
 8013d12:	e04b      	b.n	8013dac <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xae>
      if (values[i - 1] < values[i]) {
 8013d14:	69ba      	ldr	r2, [r7, #24]
 8013d16:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8013d1a:	4413      	add	r3, r2
 8013d1c:	009b      	lsls	r3, r3, #2
 8013d1e:	68fa      	ldr	r2, [r7, #12]
 8013d20:	4413      	add	r3, r2
 8013d22:	681a      	ldr	r2, [r3, #0]
 8013d24:	69bb      	ldr	r3, [r7, #24]
 8013d26:	009b      	lsls	r3, r3, #2
 8013d28:	68f9      	ldr	r1, [r7, #12]
 8013d2a:	440b      	add	r3, r1
 8013d2c:	681b      	ldr	r3, [r3, #0]
 8013d2e:	429a      	cmp	r2, r3
 8013d30:	da39      	bge.n	8013da6 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xa8>
        const int value_temp = values[i - 1];
 8013d32:	69ba      	ldr	r2, [r7, #24]
 8013d34:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8013d38:	4413      	add	r3, r2
 8013d3a:	009b      	lsls	r3, r3, #2
 8013d3c:	68fa      	ldr	r2, [r7, #12]
 8013d3e:	4413      	add	r3, r2
 8013d40:	681b      	ldr	r3, [r3, #0]
 8013d42:	617b      	str	r3, [r7, #20]
        values[i - 1] = values[i];
 8013d44:	69bb      	ldr	r3, [r7, #24]
 8013d46:	009b      	lsls	r3, r3, #2
 8013d48:	68fa      	ldr	r2, [r7, #12]
 8013d4a:	441a      	add	r2, r3
 8013d4c:	69b9      	ldr	r1, [r7, #24]
 8013d4e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8013d52:	440b      	add	r3, r1
 8013d54:	009b      	lsls	r3, r3, #2
 8013d56:	68f9      	ldr	r1, [r7, #12]
 8013d58:	440b      	add	r3, r1
 8013d5a:	6812      	ldr	r2, [r2, #0]
 8013d5c:	601a      	str	r2, [r3, #0]
        values[i] = value_temp;
 8013d5e:	69bb      	ldr	r3, [r7, #24]
 8013d60:	009b      	lsls	r3, r3, #2
 8013d62:	68fa      	ldr	r2, [r7, #12]
 8013d64:	4413      	add	r3, r2
 8013d66:	697a      	ldr	r2, [r7, #20]
 8013d68:	601a      	str	r2, [r3, #0]
        const int id_temp = ids[i - 1];
 8013d6a:	69ba      	ldr	r2, [r7, #24]
 8013d6c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8013d70:	4413      	add	r3, r2
 8013d72:	009b      	lsls	r3, r3, #2
 8013d74:	68ba      	ldr	r2, [r7, #8]
 8013d76:	4413      	add	r3, r2
 8013d78:	681b      	ldr	r3, [r3, #0]
 8013d7a:	613b      	str	r3, [r7, #16]
        ids[i - 1] = ids[i];
 8013d7c:	69bb      	ldr	r3, [r7, #24]
 8013d7e:	009b      	lsls	r3, r3, #2
 8013d80:	68ba      	ldr	r2, [r7, #8]
 8013d82:	441a      	add	r2, r3
 8013d84:	69b9      	ldr	r1, [r7, #24]
 8013d86:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8013d8a:	440b      	add	r3, r1
 8013d8c:	009b      	lsls	r3, r3, #2
 8013d8e:	68b9      	ldr	r1, [r7, #8]
 8013d90:	440b      	add	r3, r1
 8013d92:	6812      	ldr	r2, [r2, #0]
 8013d94:	601a      	str	r2, [r3, #0]
        ids[i] = id_temp;
 8013d96:	69bb      	ldr	r3, [r7, #24]
 8013d98:	009b      	lsls	r3, r3, #2
 8013d9a:	68ba      	ldr	r2, [r7, #8]
 8013d9c:	4413      	add	r3, r2
 8013d9e:	693a      	ldr	r2, [r7, #16]
 8013da0:	601a      	str	r2, [r3, #0]
        any_swapped = true;
 8013da2:	2301      	movs	r3, #1
 8013da4:	77fb      	strb	r3, [r7, #31]
    for (int i = 1; i < size; ++i) {
 8013da6:	69bb      	ldr	r3, [r7, #24]
 8013da8:	3301      	adds	r3, #1
 8013daa:	61bb      	str	r3, [r7, #24]
 8013dac:	69ba      	ldr	r2, [r7, #24]
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	429a      	cmp	r2, r3
 8013db2:	dbaf      	blt.n	8013d14 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x16>
  do {
 8013db4:	7ffb      	ldrb	r3, [r7, #31]
 8013db6:	2b00      	cmp	r3, #0
 8013db8:	d1a7      	bne.n	8013d0a <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xc>
      }
    }
  } while (any_swapped);
}
 8013dba:	bf00      	nop
 8013dbc:	bf00      	nop
 8013dbe:	3724      	adds	r7, #36	; 0x24
 8013dc0:	46bd      	mov	sp, r7
 8013dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dc6:	4770      	bx	lr

08013dc8 <_ZN6tflite19GreedyMemoryPlannerC1Ev>:

GreedyMemoryPlanner::GreedyMemoryPlanner() {}
 8013dc8:	b580      	push	{r7, lr}
 8013dca:	b082      	sub	sp, #8
 8013dcc:	af00      	add	r7, sp, #0
 8013dce:	6078      	str	r0, [r7, #4]
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	4618      	mov	r0, r3
 8013dd4:	f7ff fefa 	bl	8013bcc <_ZN6tflite18MicroMemoryPlannerC1Ev>
 8013dd8:	4a03      	ldr	r2, [pc, #12]	; (8013de8 <_ZN6tflite19GreedyMemoryPlannerC1Ev+0x20>)
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	601a      	str	r2, [r3, #0]
 8013dde:	687b      	ldr	r3, [r7, #4]
 8013de0:	4618      	mov	r0, r3
 8013de2:	3708      	adds	r7, #8
 8013de4:	46bd      	mov	sp, r7
 8013de6:	bd80      	pop	{r7, pc}
 8013de8:	08029344 	.word	0x08029344

08013dec <_ZN6tflite19GreedyMemoryPlanner4InitEPhi>:

TfLiteStatus GreedyMemoryPlanner::Init(unsigned char* scratch_buffer,
                                       int scratch_buffer_size) {
 8013dec:	b590      	push	{r4, r7, lr}
 8013dee:	b087      	sub	sp, #28
 8013df0:	af00      	add	r7, sp, #0
 8013df2:	60f8      	str	r0, [r7, #12]
 8013df4:	60b9      	str	r1, [r7, #8]
 8013df6:	607a      	str	r2, [r7, #4]
  // Reset internal states
  buffer_count_ = 0;
 8013df8:	68fb      	ldr	r3, [r7, #12]
 8013dfa:	2200      	movs	r2, #0
 8013dfc:	609a      	str	r2, [r3, #8]
  need_to_calculate_offsets_ = true;
 8013dfe:	68fb      	ldr	r3, [r7, #12]
 8013e00:	2201      	movs	r2, #1
 8013e02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  // Allocate the arrays we need within the scratch buffer arena.
  max_buffer_count_ = scratch_buffer_size / per_buffer_size();
 8013e06:	687c      	ldr	r4, [r7, #4]
 8013e08:	f7ff ff35 	bl	8013c76 <_ZN6tflite19GreedyMemoryPlanner15per_buffer_sizeEv>
 8013e0c:	4603      	mov	r3, r0
 8013e0e:	fbb4 f3f3 	udiv	r3, r4, r3
 8013e12:	461a      	mov	r2, r3
 8013e14:	68fb      	ldr	r3, [r7, #12]
 8013e16:	605a      	str	r2, [r3, #4]

  unsigned char* next_free = scratch_buffer;
 8013e18:	68bb      	ldr	r3, [r7, #8]
 8013e1a:	617b      	str	r3, [r7, #20]
  requirements_ = reinterpret_cast<BufferRequirements*>(next_free);
 8013e1c:	68fb      	ldr	r3, [r7, #12]
 8013e1e:	697a      	ldr	r2, [r7, #20]
 8013e20:	60da      	str	r2, [r3, #12]
  next_free += sizeof(BufferRequirements) * max_buffer_count_;
 8013e22:	68fb      	ldr	r3, [r7, #12]
 8013e24:	685b      	ldr	r3, [r3, #4]
 8013e26:	011b      	lsls	r3, r3, #4
 8013e28:	697a      	ldr	r2, [r7, #20]
 8013e2a:	4413      	add	r3, r2
 8013e2c:	617b      	str	r3, [r7, #20]

  buffer_sizes_sorted_ = reinterpret_cast<int*>(next_free);
 8013e2e:	68fb      	ldr	r3, [r7, #12]
 8013e30:	697a      	ldr	r2, [r7, #20]
 8013e32:	611a      	str	r2, [r3, #16]
  next_free += sizeof(int) * max_buffer_count_;
 8013e34:	68fb      	ldr	r3, [r7, #12]
 8013e36:	685b      	ldr	r3, [r3, #4]
 8013e38:	009b      	lsls	r3, r3, #2
 8013e3a:	697a      	ldr	r2, [r7, #20]
 8013e3c:	4413      	add	r3, r2
 8013e3e:	617b      	str	r3, [r7, #20]

  buffer_ids_sorted_ = reinterpret_cast<int*>(next_free);
 8013e40:	68fb      	ldr	r3, [r7, #12]
 8013e42:	697a      	ldr	r2, [r7, #20]
 8013e44:	615a      	str	r2, [r3, #20]
  next_free += sizeof(int) * max_buffer_count_;
 8013e46:	68fb      	ldr	r3, [r7, #12]
 8013e48:	685b      	ldr	r3, [r3, #4]
 8013e4a:	009b      	lsls	r3, r3, #2
 8013e4c:	697a      	ldr	r2, [r7, #20]
 8013e4e:	4413      	add	r3, r2
 8013e50:	617b      	str	r3, [r7, #20]

  buffers_sorted_by_offset_ = reinterpret_cast<ListEntry*>(next_free);
 8013e52:	68fb      	ldr	r3, [r7, #12]
 8013e54:	697a      	ldr	r2, [r7, #20]
 8013e56:	619a      	str	r2, [r3, #24]
  next_free += sizeof(ListEntry) * max_buffer_count_;
 8013e58:	68fb      	ldr	r3, [r7, #12]
 8013e5a:	685b      	ldr	r3, [r3, #4]
 8013e5c:	461a      	mov	r2, r3
 8013e5e:	4613      	mov	r3, r2
 8013e60:	005b      	lsls	r3, r3, #1
 8013e62:	4413      	add	r3, r2
 8013e64:	009b      	lsls	r3, r3, #2
 8013e66:	461a      	mov	r2, r3
 8013e68:	697b      	ldr	r3, [r7, #20]
 8013e6a:	4413      	add	r3, r2
 8013e6c:	617b      	str	r3, [r7, #20]

  buffer_offsets_ = reinterpret_cast<int*>(next_free);
 8013e6e:	68fb      	ldr	r3, [r7, #12]
 8013e70:	697a      	ldr	r2, [r7, #20]
 8013e72:	625a      	str	r2, [r3, #36]	; 0x24
  return kTfLiteOk;
 8013e74:	2300      	movs	r3, #0
}
 8013e76:	4618      	mov	r0, r3
 8013e78:	371c      	adds	r7, #28
 8013e7a:	46bd      	mov	sp, r7
 8013e7c:	bd90      	pop	{r4, r7, pc}
	...

08013e80 <_ZN6tflite19GreedyMemoryPlannerD1Ev>:

GreedyMemoryPlanner::~GreedyMemoryPlanner() {
 8013e80:	b580      	push	{r7, lr}
 8013e82:	b082      	sub	sp, #8
 8013e84:	af00      	add	r7, sp, #0
 8013e86:	6078      	str	r0, [r7, #4]
 8013e88:	4a05      	ldr	r2, [pc, #20]	; (8013ea0 <_ZN6tflite19GreedyMemoryPlannerD1Ev+0x20>)
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	601a      	str	r2, [r3, #0]
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	4618      	mov	r0, r3
 8013e92:	f7ff feab 	bl	8013bec <_ZN6tflite18MicroMemoryPlannerD1Ev>
  // We don't own the scratch buffer, so don't deallocate anything.
}
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	4618      	mov	r0, r3
 8013e9a:	3708      	adds	r7, #8
 8013e9c:	46bd      	mov	sp, r7
 8013e9e:	bd80      	pop	{r7, pc}
 8013ea0:	08029344 	.word	0x08029344

08013ea4 <_ZN6tflite19GreedyMemoryPlannerD0Ev>:
GreedyMemoryPlanner::~GreedyMemoryPlanner() {
 8013ea4:	b580      	push	{r7, lr}
 8013ea6:	b082      	sub	sp, #8
 8013ea8:	af00      	add	r7, sp, #0
 8013eaa:	6078      	str	r0, [r7, #4]
}
 8013eac:	6878      	ldr	r0, [r7, #4]
 8013eae:	f7ff ffe7 	bl	8013e80 <_ZN6tflite19GreedyMemoryPlannerD1Ev>
 8013eb2:	6878      	ldr	r0, [r7, #4]
 8013eb4:	f7ff fef6 	bl	8013ca4 <_ZN6tflite19GreedyMemoryPlannerdlEPv>
 8013eb8:	687b      	ldr	r3, [r7, #4]
 8013eba:	4618      	mov	r0, r3
 8013ebc:	3708      	adds	r7, #8
 8013ebe:	46bd      	mov	sp, r7
 8013ec0:	bd80      	pop	{r7, pc}
	...

08013ec4 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEiii>:

TfLiteStatus GreedyMemoryPlanner::AddBuffer(int size, int first_time_used,
                                            int last_time_used) {
 8013ec4:	b580      	push	{r7, lr}
 8013ec6:	b086      	sub	sp, #24
 8013ec8:	af00      	add	r7, sp, #0
 8013eca:	60f8      	str	r0, [r7, #12]
 8013ecc:	60b9      	str	r1, [r7, #8]
 8013ece:	607a      	str	r2, [r7, #4]
 8013ed0:	603b      	str	r3, [r7, #0]
  if (buffer_count_ >= max_buffer_count_) {
 8013ed2:	68fb      	ldr	r3, [r7, #12]
 8013ed4:	689a      	ldr	r2, [r3, #8]
 8013ed6:	68fb      	ldr	r3, [r7, #12]
 8013ed8:	685b      	ldr	r3, [r3, #4]
 8013eda:	429a      	cmp	r2, r3
 8013edc:	db07      	blt.n	8013eee <_ZN6tflite19GreedyMemoryPlanner9AddBufferEiii+0x2a>
    MicroPrintf("Too many buffers (max is %d)", max_buffer_count_);
 8013ede:	68fb      	ldr	r3, [r7, #12]
 8013ee0:	685b      	ldr	r3, [r3, #4]
 8013ee2:	4619      	mov	r1, r3
 8013ee4:	4813      	ldr	r0, [pc, #76]	; (8013f34 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEiii+0x70>)
 8013ee6:	f7f7 fc93 	bl	800b810 <_Z11MicroPrintfPKcz>
    return kTfLiteError;
 8013eea:	2301      	movs	r3, #1
 8013eec:	e01d      	b.n	8013f2a <_ZN6tflite19GreedyMemoryPlanner9AddBufferEiii+0x66>
  }
  BufferRequirements* current = &requirements_[buffer_count_];
 8013eee:	68fb      	ldr	r3, [r7, #12]
 8013ef0:	68da      	ldr	r2, [r3, #12]
 8013ef2:	68fb      	ldr	r3, [r7, #12]
 8013ef4:	689b      	ldr	r3, [r3, #8]
 8013ef6:	011b      	lsls	r3, r3, #4
 8013ef8:	4413      	add	r3, r2
 8013efa:	617b      	str	r3, [r7, #20]
  current->size = size;
 8013efc:	697b      	ldr	r3, [r7, #20]
 8013efe:	68ba      	ldr	r2, [r7, #8]
 8013f00:	601a      	str	r2, [r3, #0]
  current->first_time_used = first_time_used;
 8013f02:	697b      	ldr	r3, [r7, #20]
 8013f04:	687a      	ldr	r2, [r7, #4]
 8013f06:	609a      	str	r2, [r3, #8]
  current->last_time_used = last_time_used;
 8013f08:	697b      	ldr	r3, [r7, #20]
 8013f0a:	683a      	ldr	r2, [r7, #0]
 8013f0c:	60da      	str	r2, [r3, #12]
  current->offline_offset = kOnlinePlannedBuffer;
 8013f0e:	697b      	ldr	r3, [r7, #20]
 8013f10:	f04f 32ff 	mov.w	r2, #4294967295
 8013f14:	605a      	str	r2, [r3, #4]
  ++buffer_count_;
 8013f16:	68fb      	ldr	r3, [r7, #12]
 8013f18:	689b      	ldr	r3, [r3, #8]
 8013f1a:	1c5a      	adds	r2, r3, #1
 8013f1c:	68fb      	ldr	r3, [r7, #12]
 8013f1e:	609a      	str	r2, [r3, #8]
  need_to_calculate_offsets_ = true;
 8013f20:	68fb      	ldr	r3, [r7, #12]
 8013f22:	2201      	movs	r2, #1
 8013f24:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  return kTfLiteOk;
 8013f28:	2300      	movs	r3, #0
}
 8013f2a:	4618      	mov	r0, r3
 8013f2c:	3718      	adds	r7, #24
 8013f2e:	46bd      	mov	sp, r7
 8013f30:	bd80      	pop	{r7, pc}
 8013f32:	bf00      	nop
 8013f34:	08027e5c 	.word	0x08027e5c

08013f38 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEiiii>:

TfLiteStatus GreedyMemoryPlanner::AddBuffer(int size, int first_time_used,
                                            int last_time_used,
                                            int offline_offset) {
 8013f38:	b590      	push	{r4, r7, lr}
 8013f3a:	b087      	sub	sp, #28
 8013f3c:	af00      	add	r7, sp, #0
 8013f3e:	60f8      	str	r0, [r7, #12]
 8013f40:	60b9      	str	r1, [r7, #8]
 8013f42:	607a      	str	r2, [r7, #4]
 8013f44:	603b      	str	r3, [r7, #0]
  BufferRequirements* current = &requirements_[buffer_count_];
 8013f46:	68fb      	ldr	r3, [r7, #12]
 8013f48:	68da      	ldr	r2, [r3, #12]
 8013f4a:	68fb      	ldr	r3, [r7, #12]
 8013f4c:	689b      	ldr	r3, [r3, #8]
 8013f4e:	011b      	lsls	r3, r3, #4
 8013f50:	4413      	add	r3, r2
 8013f52:	617b      	str	r3, [r7, #20]
  if (AddBuffer(size, first_time_used, last_time_used) != kTfLiteOk) {
 8013f54:	68fb      	ldr	r3, [r7, #12]
 8013f56:	681b      	ldr	r3, [r3, #0]
 8013f58:	3308      	adds	r3, #8
 8013f5a:	681c      	ldr	r4, [r3, #0]
 8013f5c:	683b      	ldr	r3, [r7, #0]
 8013f5e:	687a      	ldr	r2, [r7, #4]
 8013f60:	68b9      	ldr	r1, [r7, #8]
 8013f62:	68f8      	ldr	r0, [r7, #12]
 8013f64:	47a0      	blx	r4
 8013f66:	4603      	mov	r3, r0
 8013f68:	2b00      	cmp	r3, #0
 8013f6a:	bf14      	ite	ne
 8013f6c:	2301      	movne	r3, #1
 8013f6e:	2300      	moveq	r3, #0
 8013f70:	b2db      	uxtb	r3, r3
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	d001      	beq.n	8013f7a <_ZN6tflite19GreedyMemoryPlanner9AddBufferEiiii+0x42>
    return kTfLiteError;
 8013f76:	2301      	movs	r3, #1
 8013f78:	e003      	b.n	8013f82 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEiiii+0x4a>
  }
  current->offline_offset = offline_offset;
 8013f7a:	697b      	ldr	r3, [r7, #20]
 8013f7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013f7e:	605a      	str	r2, [r3, #4]
  return kTfLiteOk;
 8013f80:	2300      	movs	r3, #0
}
 8013f82:	4618      	mov	r0, r3
 8013f84:	371c      	adds	r7, #28
 8013f86:	46bd      	mov	sp, r7
 8013f88:	bd90      	pop	{r4, r7, pc}

08013f8a <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>:

bool GreedyMemoryPlanner::DoesEntryOverlapInTime(
    const GreedyMemoryPlanner::ListEntry* entry, const int first_time_used,
    const int last_time_used) const {
 8013f8a:	b480      	push	{r7}
 8013f8c:	b087      	sub	sp, #28
 8013f8e:	af00      	add	r7, sp, #0
 8013f90:	60f8      	str	r0, [r7, #12]
 8013f92:	60b9      	str	r1, [r7, #8]
 8013f94:	607a      	str	r2, [r7, #4]
 8013f96:	603b      	str	r3, [r7, #0]
  const BufferRequirements* entry_requirements =
      &requirements_[entry->requirements_index];
 8013f98:	68fb      	ldr	r3, [r7, #12]
 8013f9a:	68da      	ldr	r2, [r3, #12]
 8013f9c:	68bb      	ldr	r3, [r7, #8]
 8013f9e:	685b      	ldr	r3, [r3, #4]
 8013fa0:	011b      	lsls	r3, r3, #4
  const BufferRequirements* entry_requirements =
 8013fa2:	4413      	add	r3, r2
 8013fa4:	617b      	str	r3, [r7, #20]
  if (entry_requirements->first_time_used > last_time_used) {
 8013fa6:	697b      	ldr	r3, [r7, #20]
 8013fa8:	689b      	ldr	r3, [r3, #8]
 8013faa:	683a      	ldr	r2, [r7, #0]
 8013fac:	429a      	cmp	r2, r3
 8013fae:	da01      	bge.n	8013fb4 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x2a>
    return false;
 8013fb0:	2300      	movs	r3, #0
 8013fb2:	e007      	b.n	8013fc4 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x3a>
  }
  if (first_time_used > entry_requirements->last_time_used) {
 8013fb4:	697b      	ldr	r3, [r7, #20]
 8013fb6:	68db      	ldr	r3, [r3, #12]
 8013fb8:	687a      	ldr	r2, [r7, #4]
 8013fba:	429a      	cmp	r2, r3
 8013fbc:	dd01      	ble.n	8013fc2 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x38>
    return false;
 8013fbe:	2300      	movs	r3, #0
 8013fc0:	e000      	b.n	8013fc4 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x3a>
  }
  return true;
 8013fc2:	2301      	movs	r3, #1
}
 8013fc4:	4618      	mov	r0, r3
 8013fc6:	371c      	adds	r7, #28
 8013fc8:	46bd      	mov	sp, r7
 8013fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fce:	4770      	bx	lr

08013fd0 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>:

GreedyMemoryPlanner::ListEntry*
GreedyMemoryPlanner::NextSimultaneouslyActiveBuffer(
    const GreedyMemoryPlanner::ListEntry* start, const int first_time_used,
    const int last_time_used) {
 8013fd0:	b580      	push	{r7, lr}
 8013fd2:	b086      	sub	sp, #24
 8013fd4:	af00      	add	r7, sp, #0
 8013fd6:	60f8      	str	r0, [r7, #12]
 8013fd8:	60b9      	str	r1, [r7, #8]
 8013fda:	607a      	str	r2, [r7, #4]
 8013fdc:	603b      	str	r3, [r7, #0]
  ListEntry* result = nullptr;
 8013fde:	2300      	movs	r3, #0
 8013fe0:	617b      	str	r3, [r7, #20]
  ListEntry* candidate_next_entry;
  if (start == nullptr) {
 8013fe2:	68bb      	ldr	r3, [r7, #8]
 8013fe4:	2b00      	cmp	r3, #0
 8013fe6:	d10b      	bne.n	8014000 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x30>
    candidate_next_entry = &buffers_sorted_by_offset_[first_entry_index_];
 8013fe8:	68fb      	ldr	r3, [r7, #12]
 8013fea:	699a      	ldr	r2, [r3, #24]
 8013fec:	68fb      	ldr	r3, [r7, #12]
 8013fee:	6a1b      	ldr	r3, [r3, #32]
 8013ff0:	4619      	mov	r1, r3
 8013ff2:	460b      	mov	r3, r1
 8013ff4:	005b      	lsls	r3, r3, #1
 8013ff6:	440b      	add	r3, r1
 8013ff8:	009b      	lsls	r3, r3, #2
 8013ffa:	4413      	add	r3, r2
 8013ffc:	613b      	str	r3, [r7, #16]
 8013ffe:	e011      	b.n	8014024 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x54>
  } else {
    if (start->next_entry_index == -1) {
 8014000:	68bb      	ldr	r3, [r7, #8]
 8014002:	689b      	ldr	r3, [r3, #8]
 8014004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014008:	d101      	bne.n	801400e <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x3e>
      return nullptr;
 801400a:	2300      	movs	r3, #0
 801400c:	e029      	b.n	8014062 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x92>
    }
    candidate_next_entry = &buffers_sorted_by_offset_[start->next_entry_index];
 801400e:	68fb      	ldr	r3, [r7, #12]
 8014010:	699a      	ldr	r2, [r3, #24]
 8014012:	68bb      	ldr	r3, [r7, #8]
 8014014:	689b      	ldr	r3, [r3, #8]
 8014016:	4619      	mov	r1, r3
 8014018:	460b      	mov	r3, r1
 801401a:	005b      	lsls	r3, r3, #1
 801401c:	440b      	add	r3, r1
 801401e:	009b      	lsls	r3, r3, #2
 8014020:	4413      	add	r3, r2
 8014022:	613b      	str	r3, [r7, #16]
  }
  do {
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
 8014024:	683b      	ldr	r3, [r7, #0]
 8014026:	687a      	ldr	r2, [r7, #4]
 8014028:	6939      	ldr	r1, [r7, #16]
 801402a:	68f8      	ldr	r0, [r7, #12]
 801402c:	f7ff ffad 	bl	8013f8a <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>
 8014030:	4603      	mov	r3, r0
 8014032:	2b00      	cmp	r3, #0
 8014034:	d002      	beq.n	801403c <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x6c>
                               last_time_used)) {
      result = candidate_next_entry;
 8014036:	693b      	ldr	r3, [r7, #16]
 8014038:	617b      	str	r3, [r7, #20]
      break;
 801403a:	e011      	b.n	8014060 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x90>
    }
    if (candidate_next_entry->next_entry_index == -1) {
 801403c:	693b      	ldr	r3, [r7, #16]
 801403e:	689b      	ldr	r3, [r3, #8]
 8014040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014044:	d00b      	beq.n	801405e <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x8e>
      break;
    }
    candidate_next_entry =
        &buffers_sorted_by_offset_[candidate_next_entry->next_entry_index];
 8014046:	68fb      	ldr	r3, [r7, #12]
 8014048:	699a      	ldr	r2, [r3, #24]
 801404a:	693b      	ldr	r3, [r7, #16]
 801404c:	689b      	ldr	r3, [r3, #8]
 801404e:	4619      	mov	r1, r3
 8014050:	460b      	mov	r3, r1
 8014052:	005b      	lsls	r3, r3, #1
 8014054:	440b      	add	r3, r1
 8014056:	009b      	lsls	r3, r3, #2
    candidate_next_entry =
 8014058:	4413      	add	r3, r2
 801405a:	613b      	str	r3, [r7, #16]
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
 801405c:	e7e2      	b.n	8014024 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x54>
      break;
 801405e:	bf00      	nop
  } while (true);
  return result;
 8014060:	697b      	ldr	r3, [r7, #20]
}
 8014062:	4618      	mov	r0, r3
 8014064:	3718      	adds	r7, #24
 8014066:	46bd      	mov	sp, r7
 8014068:	bd80      	pop	{r7, pc}

0801406a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>:

void GreedyMemoryPlanner::CalculateOffsetsIfNeeded() {
 801406a:	b580      	push	{r7, lr}
 801406c:	b098      	sub	sp, #96	; 0x60
 801406e:	af00      	add	r7, sp, #0
 8014070:	6078      	str	r0, [r7, #4]
  if (!need_to_calculate_offsets_ || (buffer_count_ == 0)) {
 8014072:	687b      	ldr	r3, [r7, #4]
 8014074:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014078:	f083 0301 	eor.w	r3, r3, #1
 801407c:	b2db      	uxtb	r3, r3
 801407e:	2b00      	cmp	r3, #0
 8014080:	f040 8160 	bne.w	8014344 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2da>
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	689b      	ldr	r3, [r3, #8]
 8014088:	2b00      	cmp	r3, #0
 801408a:	f000 815b 	beq.w	8014344 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2da>
    return;
  }
  need_to_calculate_offsets_ = false;
 801408e:	687b      	ldr	r3, [r7, #4]
 8014090:	2200      	movs	r2, #0
 8014092:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  // This helps find a more compact layout. Intuitively, you can think
  // about putting the large buffers in place first, and then the
  // smaller buffers can fit in the gaps, rather than fragmenting the
  // gaps with small buffers at the beginning. Add offline planned offsets
  // first in the list, since they have a predetermined offset.
  int idx_from_tail = buffer_count_;
 8014096:	687b      	ldr	r3, [r7, #4]
 8014098:	689b      	ldr	r3, [r3, #8]
 801409a:	65fb      	str	r3, [r7, #92]	; 0x5c
  int idx_from_head = 0;
 801409c:	2300      	movs	r3, #0
 801409e:	65bb      	str	r3, [r7, #88]	; 0x58
  for (int i = 0; i < buffer_count_; ++i) {
 80140a0:	2300      	movs	r3, #0
 80140a2:	657b      	str	r3, [r7, #84]	; 0x54
 80140a4:	e04c      	b.n	8014140 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xd6>
    if (requirements_[i].offline_offset == kOnlinePlannedBuffer) {
 80140a6:	687b      	ldr	r3, [r7, #4]
 80140a8:	68da      	ldr	r2, [r3, #12]
 80140aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80140ac:	011b      	lsls	r3, r3, #4
 80140ae:	4413      	add	r3, r2
 80140b0:	685b      	ldr	r3, [r3, #4]
 80140b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80140b6:	d11e      	bne.n	80140f6 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x8c>
      idx_from_tail--;
 80140b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80140ba:	3b01      	subs	r3, #1
 80140bc:	65fb      	str	r3, [r7, #92]	; 0x5c
      buffer_sizes_sorted_[idx_from_tail] = requirements_[i].size;
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	68da      	ldr	r2, [r3, #12]
 80140c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80140c4:	011b      	lsls	r3, r3, #4
 80140c6:	441a      	add	r2, r3
 80140c8:	687b      	ldr	r3, [r7, #4]
 80140ca:	6919      	ldr	r1, [r3, #16]
 80140cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80140ce:	009b      	lsls	r3, r3, #2
 80140d0:	440b      	add	r3, r1
 80140d2:	6812      	ldr	r2, [r2, #0]
 80140d4:	601a      	str	r2, [r3, #0]
      buffer_ids_sorted_[idx_from_tail] = i;
 80140d6:	687b      	ldr	r3, [r7, #4]
 80140d8:	695a      	ldr	r2, [r3, #20]
 80140da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80140dc:	009b      	lsls	r3, r3, #2
 80140de:	4413      	add	r3, r2
 80140e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80140e2:	601a      	str	r2, [r3, #0]
      buffer_offsets_[i] = -1;
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80140e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80140ea:	009b      	lsls	r3, r3, #2
 80140ec:	4413      	add	r3, r2
 80140ee:	f04f 32ff 	mov.w	r2, #4294967295
 80140f2:	601a      	str	r2, [r3, #0]
 80140f4:	e021      	b.n	801413a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xd0>
    } else {
      buffer_sizes_sorted_[idx_from_head] = requirements_[i].size;
 80140f6:	687b      	ldr	r3, [r7, #4]
 80140f8:	68da      	ldr	r2, [r3, #12]
 80140fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80140fc:	011b      	lsls	r3, r3, #4
 80140fe:	441a      	add	r2, r3
 8014100:	687b      	ldr	r3, [r7, #4]
 8014102:	6919      	ldr	r1, [r3, #16]
 8014104:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014106:	009b      	lsls	r3, r3, #2
 8014108:	440b      	add	r3, r1
 801410a:	6812      	ldr	r2, [r2, #0]
 801410c:	601a      	str	r2, [r3, #0]
      buffer_ids_sorted_[idx_from_head] = i;
 801410e:	687b      	ldr	r3, [r7, #4]
 8014110:	695a      	ldr	r2, [r3, #20]
 8014112:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014114:	009b      	lsls	r3, r3, #2
 8014116:	4413      	add	r3, r2
 8014118:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801411a:	601a      	str	r2, [r3, #0]
      buffer_offsets_[i] = requirements_[i].offline_offset;
 801411c:	687b      	ldr	r3, [r7, #4]
 801411e:	68da      	ldr	r2, [r3, #12]
 8014120:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014122:	011b      	lsls	r3, r3, #4
 8014124:	441a      	add	r2, r3
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	6a59      	ldr	r1, [r3, #36]	; 0x24
 801412a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801412c:	009b      	lsls	r3, r3, #2
 801412e:	440b      	add	r3, r1
 8014130:	6852      	ldr	r2, [r2, #4]
 8014132:	601a      	str	r2, [r3, #0]
      idx_from_head++;
 8014134:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014136:	3301      	adds	r3, #1
 8014138:	65bb      	str	r3, [r7, #88]	; 0x58
  for (int i = 0; i < buffer_count_; ++i) {
 801413a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801413c:	3301      	adds	r3, #1
 801413e:	657b      	str	r3, [r7, #84]	; 0x54
 8014140:	687b      	ldr	r3, [r7, #4]
 8014142:	689b      	ldr	r3, [r3, #8]
 8014144:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014146:	429a      	cmp	r2, r3
 8014148:	dbad      	blt.n	80140a6 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x3c>
    }
  }

  // This sorting algorithm is naive, and may end up taking a very long time
  // with hundreds of buffers. Do not sort the offline planned offsets.
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	691a      	ldr	r2, [r3, #16]
 801414e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014150:	009b      	lsls	r3, r3, #2
 8014152:	18d0      	adds	r0, r2, r3
                     &buffer_ids_sorted_[idx_from_head],
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	695a      	ldr	r2, [r3, #20]
 8014158:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801415a:	009b      	lsls	r3, r3, #2
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
 801415c:	18d1      	adds	r1, r2, r3
                     buffer_count_ - idx_from_head);
 801415e:	687b      	ldr	r3, [r7, #4]
 8014160:	689a      	ldr	r2, [r3, #8]
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
 8014162:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014164:	1ad3      	subs	r3, r2, r3
 8014166:	461a      	mov	r2, r3
 8014168:	f7ff fdc9 	bl	8013cfe <_ZN6tflite18ReverseSortInPlaceEPiS0_i>
  // buffer_ids_sorted_.
  //   - If there are no offline planned offsets, the largest buffer will be
  //     first, and the buffers will be handled in size order.
  //   - If offline offsets are present, these will be handled first in order
  //     for the greedy algorithm to utilized gaps in the offline plan.
  first_entry_index_ = 0;
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	2200      	movs	r2, #0
 8014170:	621a      	str	r2, [r3, #32]
  next_free_entry_ = 1;
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	2201      	movs	r2, #1
 8014176:	61da      	str	r2, [r3, #28]
  ListEntry* first_entry = &buffers_sorted_by_offset_[first_entry_index_];
 8014178:	687b      	ldr	r3, [r7, #4]
 801417a:	699a      	ldr	r2, [r3, #24]
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	6a1b      	ldr	r3, [r3, #32]
 8014180:	4619      	mov	r1, r3
 8014182:	460b      	mov	r3, r1
 8014184:	005b      	lsls	r3, r3, #1
 8014186:	440b      	add	r3, r1
 8014188:	009b      	lsls	r3, r3, #2
 801418a:	4413      	add	r3, r2
 801418c:	653b      	str	r3, [r7, #80]	; 0x50
  first_entry->next_entry_index = -1;  // to mark the entry as end of list
 801418e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014190:	f04f 32ff 	mov.w	r2, #4294967295
 8014194:	609a      	str	r2, [r3, #8]
  int buffer_id = buffer_ids_sorted_[0];
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	695b      	ldr	r3, [r3, #20]
 801419a:	681b      	ldr	r3, [r3, #0]
 801419c:	63fb      	str	r3, [r7, #60]	; 0x3c
  first_entry->requirements_index = buffer_id;
 801419e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80141a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80141a2:	605a      	str	r2, [r3, #4]
  if (requirements_[buffer_id].offline_offset == kOnlinePlannedBuffer) {
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	68da      	ldr	r2, [r3, #12]
 80141a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80141aa:	011b      	lsls	r3, r3, #4
 80141ac:	4413      	add	r3, r2
 80141ae:	685b      	ldr	r3, [r3, #4]
 80141b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80141b4:	d106      	bne.n	80141c4 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x15a>
    buffer_offsets_[buffer_id] = 0;
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80141ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80141bc:	009b      	lsls	r3, r3, #2
 80141be:	4413      	add	r3, r2
 80141c0:	2200      	movs	r2, #0
 80141c2:	601a      	str	r2, [r3, #0]
  }
  first_entry->offset = buffer_offsets_[buffer_id];
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80141c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80141ca:	009b      	lsls	r3, r3, #2
 80141cc:	4413      	add	r3, r2
 80141ce:	681a      	ldr	r2, [r3, #0]
 80141d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80141d2:	601a      	str	r2, [r3, #0]

  // Work through the rest of the buffers to find a good gap to place each one.
  for (int i = 1; i < buffer_count_; ++i) {
 80141d4:	2301      	movs	r3, #1
 80141d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80141d8:	e0ad      	b.n	8014336 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2cc>
    // The id is the order the buffer was originally added by the client.
    buffer_id = buffer_ids_sorted_[i];
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	695a      	ldr	r2, [r3, #20]
 80141de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80141e0:	009b      	lsls	r3, r3, #2
 80141e2:	4413      	add	r3, r2
 80141e4:	681b      	ldr	r3, [r3, #0]
 80141e6:	63fb      	str	r3, [r7, #60]	; 0x3c
    // Look at what size and time range the buffer needs to be active.
    BufferRequirements* wanted_requirements = &requirements_[buffer_id];
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	68da      	ldr	r2, [r3, #12]
 80141ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80141ee:	011b      	lsls	r3, r3, #4
 80141f0:	4413      	add	r3, r2
 80141f2:	63bb      	str	r3, [r7, #56]	; 0x38
    const int wanted_size = wanted_requirements->size;
 80141f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141f6:	681b      	ldr	r3, [r3, #0]
 80141f8:	637b      	str	r3, [r7, #52]	; 0x34
    const int wanted_first_time_used = wanted_requirements->first_time_used;
 80141fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141fc:	689b      	ldr	r3, [r3, #8]
 80141fe:	633b      	str	r3, [r7, #48]	; 0x30
    const int wanted_last_time_used = wanted_requirements->last_time_used;
 8014200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014202:	68db      	ldr	r3, [r3, #12]
 8014204:	62fb      	str	r3, [r7, #44]	; 0x2c
    // buffers are stored in the order of their starting position in the arena
    // so that it's easy to find the next buffer in memory, and so the gap.
    // The candidate_entry variable holds the buffer that we're considering
    // placing the current buffer after.

    int candidate_offset = 0;
 8014206:	2300      	movs	r3, #0
 8014208:	64bb      	str	r3, [r7, #72]	; 0x48
    // Loop through the offset-ordered list of buffers, looking for gaps.
    if (wanted_requirements->offline_offset == kOnlinePlannedBuffer) {
 801420a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801420c:	685b      	ldr	r3, [r3, #4]
 801420e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014212:	d12d      	bne.n	8014270 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x206>
      ListEntry* prior_entry = nullptr;
 8014214:	2300      	movs	r3, #0
 8014216:	647b      	str	r3, [r7, #68]	; 0x44
      while (true) {
        // Find out what the next active buffer is.
        ListEntry* next_entry = NextSimultaneouslyActiveBuffer(
 8014218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801421a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801421c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801421e:	6878      	ldr	r0, [r7, #4]
 8014220:	f7ff fed6 	bl	8013fd0 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>
 8014224:	62b8      	str	r0, [r7, #40]	; 0x28
            prior_entry, wanted_first_time_used, wanted_last_time_used);

        if (prior_entry) {
 8014226:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014228:	2b00      	cmp	r3, #0
 801422a:	d012      	beq.n	8014252 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1e8>
          BufferRequirements* candidate_requirements =
              &requirements_[prior_entry->requirements_index];
 801422c:	687b      	ldr	r3, [r7, #4]
 801422e:	68da      	ldr	r2, [r3, #12]
 8014230:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014232:	685b      	ldr	r3, [r3, #4]
 8014234:	011b      	lsls	r3, r3, #4
          BufferRequirements* candidate_requirements =
 8014236:	4413      	add	r3, r2
 8014238:	627b      	str	r3, [r7, #36]	; 0x24
          const int prior_entry_offset =
              prior_entry->offset + candidate_requirements->size;
 801423a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801423c:	681a      	ldr	r2, [r3, #0]
 801423e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014240:	681b      	ldr	r3, [r3, #0]
          const int prior_entry_offset =
 8014242:	4413      	add	r3, r2
 8014244:	623b      	str	r3, [r7, #32]
          if (prior_entry_offset > candidate_offset) {
 8014246:	6a3a      	ldr	r2, [r7, #32]
 8014248:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801424a:	429a      	cmp	r2, r3
 801424c:	dd01      	ble.n	8014252 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1e8>
            candidate_offset = prior_entry_offset;
 801424e:	6a3b      	ldr	r3, [r7, #32]
 8014250:	64bb      	str	r3, [r7, #72]	; 0x48
          }
        }
        if (next_entry == nullptr) {
 8014252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014254:	2b00      	cmp	r3, #0
 8014256:	d00f      	beq.n	8014278 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x20e>
          // We're at the end of the list, so we can always append the buffer
          // here.
          break;
        }
        // Find out how much space there is between us and the next buffer.
        const int gap = next_entry->offset - candidate_offset;
 8014258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801425a:	681a      	ldr	r2, [r3, #0]
 801425c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801425e:	1ad3      	subs	r3, r2, r3
 8014260:	61fb      	str	r3, [r7, #28]
        if (gap >= wanted_size) {
 8014262:	69fa      	ldr	r2, [r7, #28]
 8014264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014266:	429a      	cmp	r2, r3
 8014268:	da08      	bge.n	801427c <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x212>
          // This entry has a big enough gap between it and the next, so
          // use it!
          break;
        }
        // The gap wasn't big enough, so move on to another candidate.
        prior_entry = next_entry;
 801426a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801426c:	647b      	str	r3, [r7, #68]	; 0x44
      }
 801426e:	e7d3      	b.n	8014218 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1ae>
    } else {
      // Offline planned offset are to be considered constant
      candidate_offset = wanted_requirements->offline_offset;
 8014270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014272:	685b      	ldr	r3, [r3, #4]
 8014274:	64bb      	str	r3, [r7, #72]	; 0x48
 8014276:	e002      	b.n	801427e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x214>
          break;
 8014278:	bf00      	nop
 801427a:	e000      	b.n	801427e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x214>
          break;
 801427c:	bf00      	nop
    }
    // At this point, we've either found a gap (possibly at the end of the
    // list) and want to place the buffer there, or there are no other active
    // buffers in this time range and so we can put it at offset zero.
    // Record the buffer's offset in our plan.
    buffer_offsets_[buffer_id] = candidate_offset;
 801427e:	687b      	ldr	r3, [r7, #4]
 8014280:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014282:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014284:	009b      	lsls	r3, r3, #2
 8014286:	4413      	add	r3, r2
 8014288:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801428a:	601a      	str	r2, [r3, #0]
    // Add the newly-placed buffer to our offset-ordered list, so that
    // subsequent passes can fit in their buffers around it.
    ListEntry* new_entry = &buffers_sorted_by_offset_[next_free_entry_];
 801428c:	687b      	ldr	r3, [r7, #4]
 801428e:	699a      	ldr	r2, [r3, #24]
 8014290:	687b      	ldr	r3, [r7, #4]
 8014292:	69db      	ldr	r3, [r3, #28]
 8014294:	4619      	mov	r1, r3
 8014296:	460b      	mov	r3, r1
 8014298:	005b      	lsls	r3, r3, #1
 801429a:	440b      	add	r3, r1
 801429c:	009b      	lsls	r3, r3, #2
 801429e:	4413      	add	r3, r2
 80142a0:	61bb      	str	r3, [r7, #24]
    new_entry->offset = candidate_offset;
 80142a2:	69bb      	ldr	r3, [r7, #24]
 80142a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80142a6:	601a      	str	r2, [r3, #0]
    new_entry->requirements_index = buffer_id;
 80142a8:	69bb      	ldr	r3, [r7, #24]
 80142aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80142ac:	605a      	str	r2, [r3, #4]
    const int new_entry_index = next_free_entry_;
 80142ae:	687b      	ldr	r3, [r7, #4]
 80142b0:	69db      	ldr	r3, [r3, #28]
 80142b2:	617b      	str	r3, [r7, #20]
    ++next_free_entry_;
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	69db      	ldr	r3, [r3, #28]
 80142b8:	1c5a      	adds	r2, r3, #1
 80142ba:	687b      	ldr	r3, [r7, #4]
 80142bc:	61da      	str	r2, [r3, #28]

    if (first_entry->offset > candidate_offset) {
 80142be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80142c0:	681b      	ldr	r3, [r3, #0]
 80142c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80142c4:	429a      	cmp	r2, r3
 80142c6:	da09      	bge.n	80142dc <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x272>
      // The new entry offset is smaller than the first entry offset =>
      // replace the first entry
      first_entry = new_entry;
 80142c8:	69bb      	ldr	r3, [r7, #24]
 80142ca:	653b      	str	r3, [r7, #80]	; 0x50
      first_entry->next_entry_index = first_entry_index_;
 80142cc:	687b      	ldr	r3, [r7, #4]
 80142ce:	6a1a      	ldr	r2, [r3, #32]
 80142d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80142d2:	609a      	str	r2, [r3, #8]
      first_entry_index_ = new_entry_index;
 80142d4:	687b      	ldr	r3, [r7, #4]
 80142d6:	697a      	ldr	r2, [r7, #20]
 80142d8:	621a      	str	r2, [r3, #32]
 80142da:	e029      	b.n	8014330 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2c6>
    } else {
      ListEntry* current_entry = first_entry;
 80142dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80142de:	643b      	str	r3, [r7, #64]	; 0x40
      // Make sure that we insert the buffer at the correct place in the
      // buffer-offset-ordered list
      while (true) {
        const int next_entry_index = current_entry->next_entry_index;
 80142e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80142e2:	689b      	ldr	r3, [r3, #8]
 80142e4:	613b      	str	r3, [r7, #16]
        if (next_entry_index == -1) {
 80142e6:	693b      	ldr	r3, [r7, #16]
 80142e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80142ec:	d107      	bne.n	80142fe <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x294>
          // We're at the end of the list, so just add the new entry here.
          current_entry->next_entry_index = new_entry_index;
 80142ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80142f0:	697a      	ldr	r2, [r7, #20]
 80142f2:	609a      	str	r2, [r3, #8]
          new_entry->next_entry_index = -1;
 80142f4:	69bb      	ldr	r3, [r7, #24]
 80142f6:	f04f 32ff 	mov.w	r2, #4294967295
 80142fa:	609a      	str	r2, [r3, #8]
          break;
 80142fc:	e018      	b.n	8014330 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2c6>
        }
        // not at the end of the list -> take a look at next entry
        ListEntry* next_entry = &buffers_sorted_by_offset_[next_entry_index];
 80142fe:	687b      	ldr	r3, [r7, #4]
 8014300:	6999      	ldr	r1, [r3, #24]
 8014302:	693a      	ldr	r2, [r7, #16]
 8014304:	4613      	mov	r3, r2
 8014306:	005b      	lsls	r3, r3, #1
 8014308:	4413      	add	r3, r2
 801430a:	009b      	lsls	r3, r3, #2
 801430c:	440b      	add	r3, r1
 801430e:	60fb      	str	r3, [r7, #12]
        if (next_entry->offset > candidate_offset) {
 8014310:	68fb      	ldr	r3, [r7, #12]
 8014312:	681b      	ldr	r3, [r3, #0]
 8014314:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014316:	429a      	cmp	r2, r3
 8014318:	da07      	bge.n	801432a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2c0>
          // We're at the right spot to do an insertion and retain the sorting
          // order, so place the new entry here.
          new_entry->next_entry_index = current_entry->next_entry_index;
 801431a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801431c:	689a      	ldr	r2, [r3, #8]
 801431e:	69bb      	ldr	r3, [r7, #24]
 8014320:	609a      	str	r2, [r3, #8]
          current_entry->next_entry_index = new_entry_index;
 8014322:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014324:	697a      	ldr	r2, [r7, #20]
 8014326:	609a      	str	r2, [r3, #8]
          break;
 8014328:	e002      	b.n	8014330 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2c6>
        }
        current_entry = next_entry;
 801432a:	68fb      	ldr	r3, [r7, #12]
 801432c:	643b      	str	r3, [r7, #64]	; 0x40
      }
 801432e:	e7d7      	b.n	80142e0 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x276>
  for (int i = 1; i < buffer_count_; ++i) {
 8014330:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014332:	3301      	adds	r3, #1
 8014334:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014336:	687b      	ldr	r3, [r7, #4]
 8014338:	689b      	ldr	r3, [r3, #8]
 801433a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801433c:	429a      	cmp	r2, r3
 801433e:	f6ff af4c 	blt.w	80141da <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x170>
 8014342:	e000      	b.n	8014346 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2dc>
    return;
 8014344:	bf00      	nop
    }
  }
}
 8014346:	3760      	adds	r7, #96	; 0x60
 8014348:	46bd      	mov	sp, r7
 801434a:	bd80      	pop	{r7, pc}

0801434c <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>:

size_t GreedyMemoryPlanner::GetMaximumMemorySize() {
 801434c:	b580      	push	{r7, lr}
 801434e:	b086      	sub	sp, #24
 8014350:	af00      	add	r7, sp, #0
 8014352:	6078      	str	r0, [r7, #4]
  CalculateOffsetsIfNeeded();
 8014354:	6878      	ldr	r0, [r7, #4]
 8014356:	f7ff fe88 	bl	801406a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if (buffer_count_ == 0) {
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	689b      	ldr	r3, [r3, #8]
 801435e:	2b00      	cmp	r3, #0
 8014360:	d101      	bne.n	8014366 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x1a>
    return 0;
 8014362:	2300      	movs	r3, #0
 8014364:	e036      	b.n	80143d4 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x88>
  }
  ListEntry* entry = &buffers_sorted_by_offset_[first_entry_index_];
 8014366:	687b      	ldr	r3, [r7, #4]
 8014368:	699a      	ldr	r2, [r3, #24]
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	6a1b      	ldr	r3, [r3, #32]
 801436e:	4619      	mov	r1, r3
 8014370:	460b      	mov	r3, r1
 8014372:	005b      	lsls	r3, r3, #1
 8014374:	440b      	add	r3, r1
 8014376:	009b      	lsls	r3, r3, #2
 8014378:	4413      	add	r3, r2
 801437a:	617b      	str	r3, [r7, #20]
  size_t max_size = 0;
 801437c:	2300      	movs	r3, #0
 801437e:	613b      	str	r3, [r7, #16]
  while (entry) {
 8014380:	e022      	b.n	80143c8 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x7c>
    BufferRequirements* requirements =
        &requirements_[entry->requirements_index];
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	68da      	ldr	r2, [r3, #12]
 8014386:	697b      	ldr	r3, [r7, #20]
 8014388:	685b      	ldr	r3, [r3, #4]
 801438a:	011b      	lsls	r3, r3, #4
    BufferRequirements* requirements =
 801438c:	4413      	add	r3, r2
 801438e:	60fb      	str	r3, [r7, #12]
    const size_t current_size = entry->offset + requirements->size;
 8014390:	697b      	ldr	r3, [r7, #20]
 8014392:	681a      	ldr	r2, [r3, #0]
 8014394:	68fb      	ldr	r3, [r7, #12]
 8014396:	681b      	ldr	r3, [r3, #0]
 8014398:	4413      	add	r3, r2
 801439a:	60bb      	str	r3, [r7, #8]
    if (current_size > max_size) {
 801439c:	68ba      	ldr	r2, [r7, #8]
 801439e:	693b      	ldr	r3, [r7, #16]
 80143a0:	429a      	cmp	r2, r3
 80143a2:	d901      	bls.n	80143a8 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x5c>
      max_size = current_size;
 80143a4:	68bb      	ldr	r3, [r7, #8]
 80143a6:	613b      	str	r3, [r7, #16]
    }
    if (entry->next_entry_index == -1) {
 80143a8:	697b      	ldr	r3, [r7, #20]
 80143aa:	689b      	ldr	r3, [r3, #8]
 80143ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80143b0:	d00e      	beq.n	80143d0 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x84>
      break;
    }
    entry = &buffers_sorted_by_offset_[entry->next_entry_index];
 80143b2:	687b      	ldr	r3, [r7, #4]
 80143b4:	699a      	ldr	r2, [r3, #24]
 80143b6:	697b      	ldr	r3, [r7, #20]
 80143b8:	689b      	ldr	r3, [r3, #8]
 80143ba:	4619      	mov	r1, r3
 80143bc:	460b      	mov	r3, r1
 80143be:	005b      	lsls	r3, r3, #1
 80143c0:	440b      	add	r3, r1
 80143c2:	009b      	lsls	r3, r3, #2
 80143c4:	4413      	add	r3, r2
 80143c6:	617b      	str	r3, [r7, #20]
  while (entry) {
 80143c8:	697b      	ldr	r3, [r7, #20]
 80143ca:	2b00      	cmp	r3, #0
 80143cc:	d1d9      	bne.n	8014382 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x36>
 80143ce:	e000      	b.n	80143d2 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x86>
      break;
 80143d0:	bf00      	nop
  }
  return max_size;
 80143d2:	693b      	ldr	r3, [r7, #16]
}
 80143d4:	4618      	mov	r0, r3
 80143d6:	3718      	adds	r7, #24
 80143d8:	46bd      	mov	sp, r7
 80143da:	bd80      	pop	{r7, pc}

080143dc <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv>:

void GreedyMemoryPlanner::PrintMemoryPlan() {
 80143dc:	b5b0      	push	{r4, r5, r7, lr}
 80143de:	b0ae      	sub	sp, #184	; 0xb8
 80143e0:	af04      	add	r7, sp, #16
 80143e2:	6078      	str	r0, [r7, #4]
  CalculateOffsetsIfNeeded();
 80143e4:	6878      	ldr	r0, [r7, #4]
 80143e6:	f7ff fe40 	bl	801406a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>

  for (int i = 0; i < buffer_count_; ++i) {
 80143ea:	2300      	movs	r3, #0
 80143ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80143f0:	e030      	b.n	8014454 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x78>
    MicroPrintf("%c (id=%d): size=%d, offset=%d, first_used=%d last_used=%d",
                GetOrdinalCharacter(i), i, requirements_[i].size,
 80143f2:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 80143f6:	f7ff fc5f 	bl	8013cb8 <_ZN6tflite12_GLOBAL__N_119GetOrdinalCharacterEi>
 80143fa:	4603      	mov	r3, r0
    MicroPrintf("%c (id=%d): size=%d, offset=%d, first_used=%d last_used=%d",
 80143fc:	461d      	mov	r5, r3
                GetOrdinalCharacter(i), i, requirements_[i].size,
 80143fe:	687b      	ldr	r3, [r7, #4]
 8014400:	68da      	ldr	r2, [r3, #12]
 8014402:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8014406:	011b      	lsls	r3, r3, #4
 8014408:	4413      	add	r3, r2
    MicroPrintf("%c (id=%d): size=%d, offset=%d, first_used=%d last_used=%d",
 801440a:	681c      	ldr	r4, [r3, #0]
                buffer_offsets_[i], requirements_[i].first_time_used,
 801440c:	687b      	ldr	r3, [r7, #4]
 801440e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014410:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8014414:	009b      	lsls	r3, r3, #2
 8014416:	4413      	add	r3, r2
    MicroPrintf("%c (id=%d): size=%d, offset=%d, first_used=%d last_used=%d",
 8014418:	681b      	ldr	r3, [r3, #0]
                buffer_offsets_[i], requirements_[i].first_time_used,
 801441a:	687a      	ldr	r2, [r7, #4]
 801441c:	68d1      	ldr	r1, [r2, #12]
 801441e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8014422:	0112      	lsls	r2, r2, #4
 8014424:	440a      	add	r2, r1
    MicroPrintf("%c (id=%d): size=%d, offset=%d, first_used=%d last_used=%d",
 8014426:	6892      	ldr	r2, [r2, #8]
                requirements_[i].last_time_used);
 8014428:	6879      	ldr	r1, [r7, #4]
 801442a:	68c8      	ldr	r0, [r1, #12]
 801442c:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8014430:	0109      	lsls	r1, r1, #4
 8014432:	4401      	add	r1, r0
    MicroPrintf("%c (id=%d): size=%d, offset=%d, first_used=%d last_used=%d",
 8014434:	68c9      	ldr	r1, [r1, #12]
 8014436:	9102      	str	r1, [sp, #8]
 8014438:	9201      	str	r2, [sp, #4]
 801443a:	9300      	str	r3, [sp, #0]
 801443c:	4623      	mov	r3, r4
 801443e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8014442:	4629      	mov	r1, r5
 8014444:	4889      	ldr	r0, [pc, #548]	; (801466c <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x290>)
 8014446:	f7f7 f9e3 	bl	800b810 <_Z11MicroPrintfPKcz>
  for (int i = 0; i < buffer_count_; ++i) {
 801444a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801444e:	3301      	adds	r3, #1
 8014450:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	689b      	ldr	r3, [r3, #8]
 8014458:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 801445c:	429a      	cmp	r2, r3
 801445e:	dbc8      	blt.n	80143f2 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x16>
  }

  constexpr int kLineWidth = 80;
 8014460:	2350      	movs	r3, #80	; 0x50
 8014462:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  int max_size = kLineWidth;
 8014466:	2350      	movs	r3, #80	; 0x50
 8014468:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  int max_time = 0;
 801446c:	2300      	movs	r3, #0
 801446e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  for (int i = 0; i < buffer_count_; ++i) {
 8014472:	2300      	movs	r3, #0
 8014474:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8014478:	e02b      	b.n	80144d2 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0xf6>
    BufferRequirements* requirements = &requirements_[i];
 801447a:	687b      	ldr	r3, [r7, #4]
 801447c:	68da      	ldr	r2, [r3, #12]
 801447e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8014482:	011b      	lsls	r3, r3, #4
 8014484:	4413      	add	r3, r2
 8014486:	66bb      	str	r3, [r7, #104]	; 0x68
    const int offset = buffer_offsets_[i];
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801448c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8014490:	009b      	lsls	r3, r3, #2
 8014492:	4413      	add	r3, r2
 8014494:	681b      	ldr	r3, [r3, #0]
 8014496:	667b      	str	r3, [r7, #100]	; 0x64
    const int last_time_used = requirements->last_time_used;
 8014498:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801449a:	68db      	ldr	r3, [r3, #12]
 801449c:	663b      	str	r3, [r7, #96]	; 0x60
    const int size = offset + requirements->size;
 801449e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80144a0:	681b      	ldr	r3, [r3, #0]
 80144a2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80144a4:	4413      	add	r3, r2
 80144a6:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (size > max_size) {
 80144a8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80144aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80144ae:	429a      	cmp	r2, r3
 80144b0:	dd02      	ble.n	80144b8 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0xdc>
      max_size = size;
 80144b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80144b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    }
    if (last_time_used > max_time) {
 80144b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80144ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80144be:	429a      	cmp	r2, r3
 80144c0:	dd02      	ble.n	80144c8 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0xec>
      max_time = last_time_used;
 80144c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80144c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  for (int i = 0; i < buffer_count_; ++i) {
 80144c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80144cc:	3301      	adds	r3, #1
 80144ce:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80144d2:	687b      	ldr	r3, [r7, #4]
 80144d4:	689b      	ldr	r3, [r3, #8]
 80144d6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80144da:	429a      	cmp	r2, r3
 80144dc:	dbcd      	blt.n	801447a <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x9e>
    }
  }

  char line[kLineWidth + 1];
  for (int t = 0; t <= max_time; ++t) {
 80144de:	2300      	movs	r3, #0
 80144e0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80144e4:	e0b5      	b.n	8014652 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x276>
    for (int c = 0; c < kLineWidth; ++c) {
 80144e6:	2300      	movs	r3, #0
 80144e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80144ec:	e00b      	b.n	8014506 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x12a>
      line[c] = '.';
 80144ee:	f107 0208 	add.w	r2, r7, #8
 80144f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80144f6:	4413      	add	r3, r2
 80144f8:	222e      	movs	r2, #46	; 0x2e
 80144fa:	701a      	strb	r2, [r3, #0]
    for (int c = 0; c < kLineWidth; ++c) {
 80144fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014500:	3301      	adds	r3, #1
 8014502:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8014506:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801450a:	2b4f      	cmp	r3, #79	; 0x4f
 801450c:	ddef      	ble.n	80144ee <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x112>
    }
    int memory_use = 0;
 801450e:	2300      	movs	r3, #0
 8014510:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    for (int i = 0; i < buffer_count_; ++i) {
 8014514:	2300      	movs	r3, #0
 8014516:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801451a:	e073      	b.n	8014604 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x228>
      BufferRequirements* requirements = &requirements_[i];
 801451c:	687b      	ldr	r3, [r7, #4]
 801451e:	68da      	ldr	r2, [r3, #12]
 8014520:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014524:	011b      	lsls	r3, r3, #4
 8014526:	4413      	add	r3, r2
 8014528:	67fb      	str	r3, [r7, #124]	; 0x7c
      if ((t < requirements->first_time_used) ||
 801452a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801452c:	689b      	ldr	r3, [r3, #8]
 801452e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8014532:	429a      	cmp	r2, r3
 8014534:	db5e      	blt.n	80145f4 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x218>
          (t > requirements->last_time_used)) {
 8014536:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014538:	68db      	ldr	r3, [r3, #12]
      if ((t < requirements->first_time_used) ||
 801453a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801453e:	429a      	cmp	r2, r3
 8014540:	dc58      	bgt.n	80145f4 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x218>
        continue;
      }
      const int offset = buffer_offsets_[i];
 8014542:	687b      	ldr	r3, [r7, #4]
 8014544:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014546:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801454a:	009b      	lsls	r3, r3, #2
 801454c:	4413      	add	r3, r2
 801454e:	681b      	ldr	r3, [r3, #0]
 8014550:	67bb      	str	r3, [r7, #120]	; 0x78
      if (offset == -1) {
 8014552:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014558:	d04e      	beq.n	80145f8 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x21c>
        continue;
      }
      const int size = requirements->size;
 801455a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801455c:	681b      	ldr	r3, [r3, #0]
 801455e:	677b      	str	r3, [r7, #116]	; 0x74
      memory_use += size;
 8014560:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8014564:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014566:	4413      	add	r3, r2
 8014568:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      const int line_start = (offset * kLineWidth) / max_size;
 801456c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801456e:	4613      	mov	r3, r2
 8014570:	009b      	lsls	r3, r3, #2
 8014572:	4413      	add	r3, r2
 8014574:	011b      	lsls	r3, r3, #4
 8014576:	461a      	mov	r2, r3
 8014578:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801457c:	fb92 f3f3 	sdiv	r3, r2, r3
 8014580:	673b      	str	r3, [r7, #112]	; 0x70
      const int line_end = ((offset + size) * kLineWidth) / max_size;
 8014582:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8014584:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014586:	441a      	add	r2, r3
 8014588:	4613      	mov	r3, r2
 801458a:	009b      	lsls	r3, r3, #2
 801458c:	4413      	add	r3, r2
 801458e:	011b      	lsls	r3, r3, #4
 8014590:	461a      	mov	r2, r3
 8014592:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8014596:	fb92 f3f3 	sdiv	r3, r2, r3
 801459a:	66fb      	str	r3, [r7, #108]	; 0x6c
      for (int n = line_start; n < line_end; ++n) {
 801459c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801459e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80145a2:	e021      	b.n	80145e8 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x20c>
        if (line[n] == '.') {
 80145a4:	f107 0208 	add.w	r2, r7, #8
 80145a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80145ac:	4413      	add	r3, r2
 80145ae:	781b      	ldrb	r3, [r3, #0]
 80145b0:	2b2e      	cmp	r3, #46	; 0x2e
 80145b2:	d10d      	bne.n	80145d0 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x1f4>
          line[n] = GetOrdinalCharacter(i);
 80145b4:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80145b8:	f7ff fb7e 	bl	8013cb8 <_ZN6tflite12_GLOBAL__N_119GetOrdinalCharacterEi>
 80145bc:	4603      	mov	r3, r0
 80145be:	4619      	mov	r1, r3
 80145c0:	f107 0208 	add.w	r2, r7, #8
 80145c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80145c8:	4413      	add	r3, r2
 80145ca:	460a      	mov	r2, r1
 80145cc:	701a      	strb	r2, [r3, #0]
 80145ce:	e006      	b.n	80145de <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x202>
        } else {
          line[n] = '!';
 80145d0:	f107 0208 	add.w	r2, r7, #8
 80145d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80145d8:	4413      	add	r3, r2
 80145da:	2221      	movs	r2, #33	; 0x21
 80145dc:	701a      	strb	r2, [r3, #0]
      for (int n = line_start; n < line_end; ++n) {
 80145de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80145e2:	3301      	adds	r3, #1
 80145e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80145e8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80145ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80145ee:	429a      	cmp	r2, r3
 80145f0:	dbd8      	blt.n	80145a4 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x1c8>
 80145f2:	e002      	b.n	80145fa <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x21e>
        continue;
 80145f4:	bf00      	nop
 80145f6:	e000      	b.n	80145fa <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x21e>
        continue;
 80145f8:	bf00      	nop
    for (int i = 0; i < buffer_count_; ++i) {
 80145fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80145fe:	3301      	adds	r3, #1
 8014600:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8014604:	687b      	ldr	r3, [r7, #4]
 8014606:	689b      	ldr	r3, [r3, #8]
 8014608:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801460c:	429a      	cmp	r2, r3
 801460e:	db85      	blt.n	801451c <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x140>
        }
      }
    }
    line[kLineWidth] = 0;
 8014610:	2300      	movs	r3, #0
 8014612:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58

    MicroPrintf("%s%d: %s (%dk)", t < 10 ? " " : "", t, (const char*)line,
 8014616:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801461a:	2b09      	cmp	r3, #9
 801461c:	dc01      	bgt.n	8014622 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x246>
 801461e:	4914      	ldr	r1, [pc, #80]	; (8014670 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x294>)
 8014620:	e000      	b.n	8014624 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x248>
 8014622:	4914      	ldr	r1, [pc, #80]	; (8014674 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x298>)
                (memory_use + 1023) / 1024);
 8014624:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014628:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
    MicroPrintf("%s%d: %s (%dk)", t < 10 ? " " : "", t, (const char*)line,
 801462c:	2b00      	cmp	r3, #0
 801462e:	da01      	bge.n	8014634 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x258>
 8014630:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8014634:	129b      	asrs	r3, r3, #10
 8014636:	461a      	mov	r2, r3
 8014638:	f107 0308 	add.w	r3, r7, #8
 801463c:	9200      	str	r2, [sp, #0]
 801463e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8014642:	480d      	ldr	r0, [pc, #52]	; (8014678 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x29c>)
 8014644:	f7f7 f8e4 	bl	800b810 <_Z11MicroPrintfPKcz>
  for (int t = 0; t <= max_time; ++t) {
 8014648:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801464c:	3301      	adds	r3, #1
 801464e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8014652:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8014656:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801465a:	429a      	cmp	r2, r3
 801465c:	f77f af43 	ble.w	80144e6 <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv+0x10a>
  }
}
 8014660:	bf00      	nop
 8014662:	bf00      	nop
 8014664:	37a8      	adds	r7, #168	; 0xa8
 8014666:	46bd      	mov	sp, r7
 8014668:	bdb0      	pop	{r4, r5, r7, pc}
 801466a:	bf00      	nop
 801466c:	08027e7c 	.word	0x08027e7c
 8014670:	08027eb8 	.word	0x08027eb8
 8014674:	08027ebc 	.word	0x08027ebc
 8014678:	08027ec0 	.word	0x08027ec0

0801467c <_ZN6tflite19GreedyMemoryPlanner14GetBufferCountEv>:

int GreedyMemoryPlanner::GetBufferCount() { return buffer_count_; }
 801467c:	b480      	push	{r7}
 801467e:	b083      	sub	sp, #12
 8014680:	af00      	add	r7, sp, #0
 8014682:	6078      	str	r0, [r7, #4]
 8014684:	687b      	ldr	r3, [r7, #4]
 8014686:	689b      	ldr	r3, [r3, #8]
 8014688:	4618      	mov	r0, r3
 801468a:	370c      	adds	r7, #12
 801468c:	46bd      	mov	sp, r7
 801468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014692:	4770      	bx	lr

08014694 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEiPi>:

TfLiteStatus GreedyMemoryPlanner::GetOffsetForBuffer(int buffer_index,
                                                     int* offset) {
 8014694:	b580      	push	{r7, lr}
 8014696:	b084      	sub	sp, #16
 8014698:	af00      	add	r7, sp, #0
 801469a:	60f8      	str	r0, [r7, #12]
 801469c:	60b9      	str	r1, [r7, #8]
 801469e:	607a      	str	r2, [r7, #4]
  CalculateOffsetsIfNeeded();
 80146a0:	68f8      	ldr	r0, [r7, #12]
 80146a2:	f7ff fce2 	bl	801406a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if ((buffer_index < 0) || (buffer_index >= buffer_count_)) {
 80146a6:	68bb      	ldr	r3, [r7, #8]
 80146a8:	2b00      	cmp	r3, #0
 80146aa:	db04      	blt.n	80146b6 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEiPi+0x22>
 80146ac:	68fb      	ldr	r3, [r7, #12]
 80146ae:	689b      	ldr	r3, [r3, #8]
 80146b0:	68ba      	ldr	r2, [r7, #8]
 80146b2:	429a      	cmp	r2, r3
 80146b4:	db08      	blt.n	80146c8 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEiPi+0x34>
    MicroPrintf("buffer index %d is outside range 0 to %d", buffer_index,
 80146b6:	68fb      	ldr	r3, [r7, #12]
 80146b8:	689b      	ldr	r3, [r3, #8]
 80146ba:	461a      	mov	r2, r3
 80146bc:	68b9      	ldr	r1, [r7, #8]
 80146be:	4809      	ldr	r0, [pc, #36]	; (80146e4 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEiPi+0x50>)
 80146c0:	f7f7 f8a6 	bl	800b810 <_Z11MicroPrintfPKcz>
                buffer_count_);
    return kTfLiteError;
 80146c4:	2301      	movs	r3, #1
 80146c6:	e008      	b.n	80146da <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEiPi+0x46>
  }
  *offset = buffer_offsets_[buffer_index];
 80146c8:	68fb      	ldr	r3, [r7, #12]
 80146ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80146cc:	68bb      	ldr	r3, [r7, #8]
 80146ce:	009b      	lsls	r3, r3, #2
 80146d0:	4413      	add	r3, r2
 80146d2:	681a      	ldr	r2, [r3, #0]
 80146d4:	687b      	ldr	r3, [r7, #4]
 80146d6:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 80146d8:	2300      	movs	r3, #0
}
 80146da:	4618      	mov	r0, r3
 80146dc:	3710      	adds	r7, #16
 80146de:	46bd      	mov	sp, r7
 80146e0:	bd80      	pop	{r7, pc}
 80146e2:	bf00      	nop
 80146e4:	08027ed0 	.word	0x08027ed0

080146e8 <_ZNK6tflite19LinearMemoryPlanner21preserves_all_tensorsEv>:
  int GetBufferCount() override;
  TfLiteStatus GetOffsetForBuffer(int buffer_index, int* offset) override;

  // Returns True because the LinearMemoryPlanner preserves all tensors after
  // invocation.
  bool preserves_all_tensors() const override { return true; }
 80146e8:	b480      	push	{r7}
 80146ea:	b083      	sub	sp, #12
 80146ec:	af00      	add	r7, sp, #0
 80146ee:	6078      	str	r0, [r7, #4]
 80146f0:	2301      	movs	r3, #1
 80146f2:	4618      	mov	r0, r3
 80146f4:	370c      	adds	r7, #12
 80146f6:	46bd      	mov	sp, r7
 80146f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146fc:	4770      	bx	lr

080146fe <_ZN6tflite19LinearMemoryPlannerdlEPv>:
  static constexpr int kMaxBufferCount = 1024;
  size_t buffer_offsets_[kMaxBufferCount];
  int current_buffer_count_;
  size_t next_free_offset_;

  TF_LITE_REMOVE_VIRTUAL_DELETE
 80146fe:	b480      	push	{r7}
 8014700:	b083      	sub	sp, #12
 8014702:	af00      	add	r7, sp, #0
 8014704:	6078      	str	r0, [r7, #4]
 8014706:	bf00      	nop
 8014708:	370c      	adds	r7, #12
 801470a:	46bd      	mov	sp, r7
 801470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014710:	4770      	bx	lr
	...

08014714 <_ZN6tflite19LinearMemoryPlannerC1Ev>:
namespace tflite {

// C++11 requires defining a constexpr static class member in a .cc file
constexpr int tflite::LinearMemoryPlanner::kMaxBufferCount;

LinearMemoryPlanner::LinearMemoryPlanner()
 8014714:	b580      	push	{r7, lr}
 8014716:	b082      	sub	sp, #8
 8014718:	af00      	add	r7, sp, #0
 801471a:	6078      	str	r0, [r7, #4]
    : current_buffer_count_(0), next_free_offset_(0) {}
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	4618      	mov	r0, r3
 8014720:	f7ff fa54 	bl	8013bcc <_ZN6tflite18MicroMemoryPlannerC1Ev>
 8014724:	4a09      	ldr	r2, [pc, #36]	; (801474c <_ZN6tflite19LinearMemoryPlannerC1Ev+0x38>)
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	601a      	str	r2, [r3, #0]
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014730:	461a      	mov	r2, r3
 8014732:	2300      	movs	r3, #0
 8014734:	6053      	str	r3, [r2, #4]
 8014736:	687b      	ldr	r3, [r7, #4]
 8014738:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801473c:	461a      	mov	r2, r3
 801473e:	2300      	movs	r3, #0
 8014740:	6093      	str	r3, [r2, #8]
 8014742:	687b      	ldr	r3, [r7, #4]
 8014744:	4618      	mov	r0, r3
 8014746:	3708      	adds	r7, #8
 8014748:	46bd      	mov	sp, r7
 801474a:	bd80      	pop	{r7, pc}
 801474c:	080293a4 	.word	0x080293a4

08014750 <_ZN6tflite19LinearMemoryPlannerD1Ev>:
LinearMemoryPlanner::~LinearMemoryPlanner() {}
 8014750:	b580      	push	{r7, lr}
 8014752:	b082      	sub	sp, #8
 8014754:	af00      	add	r7, sp, #0
 8014756:	6078      	str	r0, [r7, #4]
 8014758:	4a05      	ldr	r2, [pc, #20]	; (8014770 <_ZN6tflite19LinearMemoryPlannerD1Ev+0x20>)
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	601a      	str	r2, [r3, #0]
 801475e:	687b      	ldr	r3, [r7, #4]
 8014760:	4618      	mov	r0, r3
 8014762:	f7ff fa43 	bl	8013bec <_ZN6tflite18MicroMemoryPlannerD1Ev>
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	4618      	mov	r0, r3
 801476a:	3708      	adds	r7, #8
 801476c:	46bd      	mov	sp, r7
 801476e:	bd80      	pop	{r7, pc}
 8014770:	080293a4 	.word	0x080293a4

08014774 <_ZN6tflite19LinearMemoryPlannerD0Ev>:
 8014774:	b580      	push	{r7, lr}
 8014776:	b082      	sub	sp, #8
 8014778:	af00      	add	r7, sp, #0
 801477a:	6078      	str	r0, [r7, #4]
 801477c:	6878      	ldr	r0, [r7, #4]
 801477e:	f7ff ffe7 	bl	8014750 <_ZN6tflite19LinearMemoryPlannerD1Ev>
 8014782:	6878      	ldr	r0, [r7, #4]
 8014784:	f7ff ffbb 	bl	80146fe <_ZN6tflite19LinearMemoryPlannerdlEPv>
 8014788:	687b      	ldr	r3, [r7, #4]
 801478a:	4618      	mov	r0, r3
 801478c:	3708      	adds	r7, #8
 801478e:	46bd      	mov	sp, r7
 8014790:	bd80      	pop	{r7, pc}
	...

08014794 <_ZN6tflite19LinearMemoryPlanner9AddBufferEiii>:

TfLiteStatus LinearMemoryPlanner::AddBuffer(int size, int first_time_used,
                                            int last_time_used) {
 8014794:	b580      	push	{r7, lr}
 8014796:	b084      	sub	sp, #16
 8014798:	af00      	add	r7, sp, #0
 801479a:	60f8      	str	r0, [r7, #12]
 801479c:	60b9      	str	r1, [r7, #8]
 801479e:	607a      	str	r2, [r7, #4]
 80147a0:	603b      	str	r3, [r7, #0]
  if (current_buffer_count_ >= kMaxBufferCount) {
 80147a2:	68fb      	ldr	r3, [r7, #12]
 80147a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80147a8:	685b      	ldr	r3, [r3, #4]
 80147aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80147ae:	db06      	blt.n	80147be <_ZN6tflite19LinearMemoryPlanner9AddBufferEiii+0x2a>
    MicroPrintf("Too many buffers (max is %d)", kMaxBufferCount);
 80147b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80147b4:	4814      	ldr	r0, [pc, #80]	; (8014808 <_ZN6tflite19LinearMemoryPlanner9AddBufferEiii+0x74>)
 80147b6:	f7f7 f82b 	bl	800b810 <_Z11MicroPrintfPKcz>
    return kTfLiteError;
 80147ba:	2301      	movs	r3, #1
 80147bc:	e01f      	b.n	80147fe <_ZN6tflite19LinearMemoryPlanner9AddBufferEiii+0x6a>
  }
  buffer_offsets_[current_buffer_count_] = next_free_offset_;
 80147be:	68fb      	ldr	r3, [r7, #12]
 80147c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80147c4:	685b      	ldr	r3, [r3, #4]
 80147c6:	68fa      	ldr	r2, [r7, #12]
 80147c8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80147cc:	6892      	ldr	r2, [r2, #8]
 80147ce:	68f9      	ldr	r1, [r7, #12]
 80147d0:	009b      	lsls	r3, r3, #2
 80147d2:	440b      	add	r3, r1
 80147d4:	605a      	str	r2, [r3, #4]
  next_free_offset_ += size;
 80147d6:	68fb      	ldr	r3, [r7, #12]
 80147d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80147dc:	689a      	ldr	r2, [r3, #8]
 80147de:	68bb      	ldr	r3, [r7, #8]
 80147e0:	4413      	add	r3, r2
 80147e2:	68fa      	ldr	r2, [r7, #12]
 80147e4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80147e8:	6093      	str	r3, [r2, #8]
  ++current_buffer_count_;
 80147ea:	68fb      	ldr	r3, [r7, #12]
 80147ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80147f0:	685b      	ldr	r3, [r3, #4]
 80147f2:	3301      	adds	r3, #1
 80147f4:	68fa      	ldr	r2, [r7, #12]
 80147f6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80147fa:	6053      	str	r3, [r2, #4]
  return kTfLiteOk;
 80147fc:	2300      	movs	r3, #0
}
 80147fe:	4618      	mov	r0, r3
 8014800:	3710      	adds	r7, #16
 8014802:	46bd      	mov	sp, r7
 8014804:	bd80      	pop	{r7, pc}
 8014806:	bf00      	nop
 8014808:	08027f30 	.word	0x08027f30

0801480c <_ZN6tflite19LinearMemoryPlanner20GetMaximumMemorySizeEv>:

size_t LinearMemoryPlanner::GetMaximumMemorySize() { return next_free_offset_; }
 801480c:	b480      	push	{r7}
 801480e:	b083      	sub	sp, #12
 8014810:	af00      	add	r7, sp, #0
 8014812:	6078      	str	r0, [r7, #4]
 8014814:	687b      	ldr	r3, [r7, #4]
 8014816:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801481a:	689b      	ldr	r3, [r3, #8]
 801481c:	4618      	mov	r0, r3
 801481e:	370c      	adds	r7, #12
 8014820:	46bd      	mov	sp, r7
 8014822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014826:	4770      	bx	lr

08014828 <_ZN6tflite19LinearMemoryPlanner14GetBufferCountEv>:

int LinearMemoryPlanner::GetBufferCount() { return current_buffer_count_; }
 8014828:	b480      	push	{r7}
 801482a:	b083      	sub	sp, #12
 801482c:	af00      	add	r7, sp, #0
 801482e:	6078      	str	r0, [r7, #4]
 8014830:	687b      	ldr	r3, [r7, #4]
 8014832:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014836:	685b      	ldr	r3, [r3, #4]
 8014838:	4618      	mov	r0, r3
 801483a:	370c      	adds	r7, #12
 801483c:	46bd      	mov	sp, r7
 801483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014842:	4770      	bx	lr

08014844 <_ZN6tflite19LinearMemoryPlanner18GetOffsetForBufferEiPi>:

TfLiteStatus LinearMemoryPlanner::GetOffsetForBuffer(int buffer_index,
                                                     int* offset) {
 8014844:	b580      	push	{r7, lr}
 8014846:	b084      	sub	sp, #16
 8014848:	af00      	add	r7, sp, #0
 801484a:	60f8      	str	r0, [r7, #12]
 801484c:	60b9      	str	r1, [r7, #8]
 801484e:	607a      	str	r2, [r7, #4]
  if ((buffer_index < 0) || (buffer_index >= current_buffer_count_)) {
 8014850:	68bb      	ldr	r3, [r7, #8]
 8014852:	2b00      	cmp	r3, #0
 8014854:	db06      	blt.n	8014864 <_ZN6tflite19LinearMemoryPlanner18GetOffsetForBufferEiPi+0x20>
 8014856:	68fb      	ldr	r3, [r7, #12]
 8014858:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801485c:	685b      	ldr	r3, [r3, #4]
 801485e:	68ba      	ldr	r2, [r7, #8]
 8014860:	429a      	cmp	r2, r3
 8014862:	db0a      	blt.n	801487a <_ZN6tflite19LinearMemoryPlanner18GetOffsetForBufferEiPi+0x36>
    MicroPrintf("buffer index %d is outside range 0 to %d", buffer_index,
 8014864:	68fb      	ldr	r3, [r7, #12]
 8014866:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801486a:	685b      	ldr	r3, [r3, #4]
 801486c:	461a      	mov	r2, r3
 801486e:	68b9      	ldr	r1, [r7, #8]
 8014870:	4808      	ldr	r0, [pc, #32]	; (8014894 <_ZN6tflite19LinearMemoryPlanner18GetOffsetForBufferEiPi+0x50>)
 8014872:	f7f6 ffcd 	bl	800b810 <_Z11MicroPrintfPKcz>
                current_buffer_count_);
    return kTfLiteError;
 8014876:	2301      	movs	r3, #1
 8014878:	e008      	b.n	801488c <_ZN6tflite19LinearMemoryPlanner18GetOffsetForBufferEiPi+0x48>
  }
  *offset = buffer_offsets_[buffer_index];
 801487a:	68fa      	ldr	r2, [r7, #12]
 801487c:	68bb      	ldr	r3, [r7, #8]
 801487e:	009b      	lsls	r3, r3, #2
 8014880:	4413      	add	r3, r2
 8014882:	685b      	ldr	r3, [r3, #4]
 8014884:	461a      	mov	r2, r3
 8014886:	687b      	ldr	r3, [r7, #4]
 8014888:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 801488a:	2300      	movs	r3, #0
}
 801488c:	4618      	mov	r0, r3
 801488e:	3710      	adds	r7, #16
 8014890:	46bd      	mov	sp, r7
 8014892:	bd80      	pop	{r7, pc}
 8014894:	08027f50 	.word	0x08027f50

08014898 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteType>:
#include "tensorflow/lite/core/api/flatbuffer_conversions.h"
#include "tensorflow/lite/micro/tflite_bridge/micro_error_reporter.h"
#include "tensorflow/lite/schema/schema_generated.h"

namespace tflite {
TfLiteStatus ConvertTensorType(TensorType tensor_type, TfLiteType* type) {
 8014898:	b580      	push	{r7, lr}
 801489a:	b082      	sub	sp, #8
 801489c:	af00      	add	r7, sp, #0
 801489e:	4603      	mov	r3, r0
 80148a0:	6039      	str	r1, [r7, #0]
 80148a2:	71fb      	strb	r3, [r7, #7]
  return ConvertTensorType(tensor_type, type, tflite::GetMicroErrorReporter());
 80148a4:	f000 f88e 	bl	80149c4 <_ZN6tflite21GetMicroErrorReporterEv>
 80148a8:	4602      	mov	r2, r0
 80148aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80148ae:	6839      	ldr	r1, [r7, #0]
 80148b0:	4618      	mov	r0, r3
 80148b2:	f7ee fc89 	bl	80031c8 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
 80148b6:	4603      	mov	r3, r0
}
 80148b8:	4618      	mov	r0, r3
 80148ba:	3708      	adds	r7, #8
 80148bc:	46bd      	mov	sp, r7
 80148be:	bd80      	pop	{r7, pc}

080148c0 <_ZN6tflite24CallBuiltinParseFunctionEPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvES3_S7_S9_>:

TfLiteStatus CallBuiltinParseFunction(TfLiteBridgeBuiltinParseFunction parser,
                                      const Operator* op,
                                      BuiltinDataAllocator* allocator,
                                      void** builtin_data) {
 80148c0:	b590      	push	{r4, r7, lr}
 80148c2:	b085      	sub	sp, #20
 80148c4:	af00      	add	r7, sp, #0
 80148c6:	60f8      	str	r0, [r7, #12]
 80148c8:	60b9      	str	r1, [r7, #8]
 80148ca:	607a      	str	r2, [r7, #4]
 80148cc:	603b      	str	r3, [r7, #0]
  return parser(op, tflite::GetMicroErrorReporter(), allocator, builtin_data);
 80148ce:	f000 f879 	bl	80149c4 <_ZN6tflite21GetMicroErrorReporterEv>
 80148d2:	4601      	mov	r1, r0
 80148d4:	68fc      	ldr	r4, [r7, #12]
 80148d6:	683b      	ldr	r3, [r7, #0]
 80148d8:	687a      	ldr	r2, [r7, #4]
 80148da:	68b8      	ldr	r0, [r7, #8]
 80148dc:	47a0      	blx	r4
 80148de:	4603      	mov	r3, r0
}
 80148e0:	4618      	mov	r0, r3
 80148e2:	3714      	adds	r7, #20
 80148e4:	46bd      	mov	sp, r7
 80148e6:	bd90      	pop	{r4, r7, pc}

080148e8 <_ZN6tflite13ErrorReporterD1Ev>:
/// Subclass ErrorReporter to provide another reporting destination.
/// For example, if you have a GUI program, you might redirect to a buffer
/// that drives a GUI error log box.
class ErrorReporter {
 public:
  virtual ~ErrorReporter() = default;
 80148e8:	b480      	push	{r7}
 80148ea:	b083      	sub	sp, #12
 80148ec:	af00      	add	r7, sp, #0
 80148ee:	6078      	str	r0, [r7, #4]
 80148f0:	4a04      	ldr	r2, [pc, #16]	; (8014904 <_ZN6tflite13ErrorReporterD1Ev+0x1c>)
 80148f2:	687b      	ldr	r3, [r7, #4]
 80148f4:	601a      	str	r2, [r3, #0]
 80148f6:	687b      	ldr	r3, [r7, #4]
 80148f8:	4618      	mov	r0, r3
 80148fa:	370c      	adds	r7, #12
 80148fc:	46bd      	mov	sp, r7
 80148fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014902:	4770      	bx	lr
 8014904:	08072a04 	.word	0x08072a04

08014908 <_ZN6tflite13ErrorReporterD0Ev>:
 8014908:	b580      	push	{r7, lr}
 801490a:	b082      	sub	sp, #8
 801490c:	af00      	add	r7, sp, #0
 801490e:	6078      	str	r0, [r7, #4]
 8014910:	6878      	ldr	r0, [r7, #4]
 8014912:	f7ff ffe9 	bl	80148e8 <_ZN6tflite13ErrorReporterD1Ev>
 8014916:	2104      	movs	r1, #4
 8014918:	6878      	ldr	r0, [r7, #4]
 801491a:	f00a fefd 	bl	801f718 <_ZdlPvj>
 801491e:	687b      	ldr	r3, [r7, #4]
 8014920:	4618      	mov	r0, r3
 8014922:	3708      	adds	r7, #8
 8014924:	46bd      	mov	sp, r7
 8014926:	bd80      	pop	{r7, pc}

08014928 <_ZN6tflite18MicroErrorReporterD1Ev>:
namespace tflite {
// Get a pointer to a singleton global error reporter.
ErrorReporter* GetMicroErrorReporter();
class MicroErrorReporter : public ErrorReporter {
 public:
  ~MicroErrorReporter() override {}
 8014928:	b580      	push	{r7, lr}
 801492a:	b082      	sub	sp, #8
 801492c:	af00      	add	r7, sp, #0
 801492e:	6078      	str	r0, [r7, #4]
 8014930:	4a05      	ldr	r2, [pc, #20]	; (8014948 <_ZN6tflite18MicroErrorReporterD1Ev+0x20>)
 8014932:	687b      	ldr	r3, [r7, #4]
 8014934:	601a      	str	r2, [r3, #0]
 8014936:	687b      	ldr	r3, [r7, #4]
 8014938:	4618      	mov	r0, r3
 801493a:	f7ff ffd5 	bl	80148e8 <_ZN6tflite13ErrorReporterD1Ev>
 801493e:	687b      	ldr	r3, [r7, #4]
 8014940:	4618      	mov	r0, r3
 8014942:	3708      	adds	r7, #8
 8014944:	46bd      	mov	sp, r7
 8014946:	bd80      	pop	{r7, pc}
 8014948:	080729f0 	.word	0x080729f0

0801494c <_ZN6tflite18MicroErrorReporterD0Ev>:
 801494c:	b580      	push	{r7, lr}
 801494e:	b082      	sub	sp, #8
 8014950:	af00      	add	r7, sp, #0
 8014952:	6078      	str	r0, [r7, #4]
 8014954:	6878      	ldr	r0, [r7, #4]
 8014956:	f7ff ffe7 	bl	8014928 <_ZN6tflite18MicroErrorReporterD1Ev>
 801495a:	6878      	ldr	r0, [r7, #4]
 801495c:	f000 f805 	bl	801496a <_ZN6tflite18MicroErrorReporterdlEPv>
 8014960:	687b      	ldr	r3, [r7, #4]
 8014962:	4618      	mov	r0, r3
 8014964:	3708      	adds	r7, #8
 8014966:	46bd      	mov	sp, r7
 8014968:	bd80      	pop	{r7, pc}

0801496a <_ZN6tflite18MicroErrorReporterdlEPv>:
  int Report(const char* format, va_list args) override;

 private:
  TF_LITE_REMOVE_VIRTUAL_DELETE
 801496a:	b480      	push	{r7}
 801496c:	b083      	sub	sp, #12
 801496e:	af00      	add	r7, sp, #0
 8014970:	6078      	str	r0, [r7, #4]
 8014972:	bf00      	nop
 8014974:	370c      	adds	r7, #12
 8014976:	46bd      	mov	sp, r7
 8014978:	f85d 7b04 	ldr.w	r7, [sp], #4
 801497c:	4770      	bx	lr
	...

08014980 <_ZN6tflite13ErrorReporterC1Ev>:
class ErrorReporter {
 8014980:	b480      	push	{r7}
 8014982:	b083      	sub	sp, #12
 8014984:	af00      	add	r7, sp, #0
 8014986:	6078      	str	r0, [r7, #4]
 8014988:	4a04      	ldr	r2, [pc, #16]	; (801499c <_ZN6tflite13ErrorReporterC1Ev+0x1c>)
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	601a      	str	r2, [r3, #0]
 801498e:	687b      	ldr	r3, [r7, #4]
 8014990:	4618      	mov	r0, r3
 8014992:	370c      	adds	r7, #12
 8014994:	46bd      	mov	sp, r7
 8014996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801499a:	4770      	bx	lr
 801499c:	08072a04 	.word	0x08072a04

080149a0 <_ZN6tflite18MicroErrorReporterC1Ev>:
class MicroErrorReporter : public ErrorReporter {
 80149a0:	b580      	push	{r7, lr}
 80149a2:	b082      	sub	sp, #8
 80149a4:	af00      	add	r7, sp, #0
 80149a6:	6078      	str	r0, [r7, #4]
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	4618      	mov	r0, r3
 80149ac:	f7ff ffe8 	bl	8014980 <_ZN6tflite13ErrorReporterC1Ev>
 80149b0:	4a03      	ldr	r2, [pc, #12]	; (80149c0 <_ZN6tflite18MicroErrorReporterC1Ev+0x20>)
 80149b2:	687b      	ldr	r3, [r7, #4]
 80149b4:	601a      	str	r2, [r3, #0]
 80149b6:	687b      	ldr	r3, [r7, #4]
 80149b8:	4618      	mov	r0, r3
 80149ba:	3708      	adds	r7, #8
 80149bc:	46bd      	mov	sp, r7
 80149be:	bd80      	pop	{r7, pc}
 80149c0:	080729f0 	.word	0x080729f0

080149c4 <_ZN6tflite21GetMicroErrorReporterEv>:
tflite::MicroErrorReporter* error_reporter_ = nullptr;

}  // namespace

namespace tflite {
ErrorReporter* GetMicroErrorReporter() {
 80149c4:	b598      	push	{r3, r4, r7, lr}
 80149c6:	af00      	add	r7, sp, #0
  if (error_reporter_ == nullptr) {
 80149c8:	4b09      	ldr	r3, [pc, #36]	; (80149f0 <_ZN6tflite21GetMicroErrorReporterEv+0x2c>)
 80149ca:	681b      	ldr	r3, [r3, #0]
 80149cc:	2b00      	cmp	r3, #0
 80149ce:	d10b      	bne.n	80149e8 <_ZN6tflite21GetMicroErrorReporterEv+0x24>
    error_reporter_ = new (micro_error_reporter_buffer) MicroErrorReporter();
 80149d0:	4908      	ldr	r1, [pc, #32]	; (80149f4 <_ZN6tflite21GetMicroErrorReporterEv+0x30>)
 80149d2:	2004      	movs	r0, #4
 80149d4:	f7ee f88c 	bl	8002af0 <_ZnwjPv>
 80149d8:	4604      	mov	r4, r0
 80149da:	2300      	movs	r3, #0
 80149dc:	6023      	str	r3, [r4, #0]
 80149de:	4620      	mov	r0, r4
 80149e0:	f7ff ffde 	bl	80149a0 <_ZN6tflite18MicroErrorReporterC1Ev>
 80149e4:	4b02      	ldr	r3, [pc, #8]	; (80149f0 <_ZN6tflite21GetMicroErrorReporterEv+0x2c>)
 80149e6:	601c      	str	r4, [r3, #0]
  }
  return error_reporter_;
 80149e8:	4b01      	ldr	r3, [pc, #4]	; (80149f0 <_ZN6tflite21GetMicroErrorReporterEv+0x2c>)
 80149ea:	681b      	ldr	r3, [r3, #0]
}
 80149ec:	4618      	mov	r0, r3
 80149ee:	bd98      	pop	{r3, r4, r7, pc}
 80149f0:	2404ed2c 	.word	0x2404ed2c
 80149f4:	2404ed28 	.word	0x2404ed28

080149f8 <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list>:

int MicroErrorReporter::Report(const char* format, va_list args) {
 80149f8:	b580      	push	{r7, lr}
 80149fa:	b084      	sub	sp, #16
 80149fc:	af00      	add	r7, sp, #0
 80149fe:	60f8      	str	r0, [r7, #12]
 8014a00:	60b9      	str	r1, [r7, #8]
 8014a02:	607a      	str	r2, [r7, #4]
  VMicroPrintf(format, args);
 8014a04:	6879      	ldr	r1, [r7, #4]
 8014a06:	68b8      	ldr	r0, [r7, #8]
 8014a08:	f7f6 fef0 	bl	800b7ec <_Z12VMicroPrintfPKcSt9__va_list>
  return 0;
 8014a0c:	2300      	movs	r3, #0
}
 8014a0e:	4618      	mov	r0, r3
 8014a10:	3710      	adds	r7, #16
 8014a12:	46bd      	mov	sp, r7
 8014a14:	bd80      	pop	{r7, pc}

08014a16 <_ZNK6tflite12OperatorCode23deprecated_builtin_codeEv>:
  int8_t deprecated_builtin_code() const {
 8014a16:	b580      	push	{r7, lr}
 8014a18:	b082      	sub	sp, #8
 8014a1a:	af00      	add	r7, sp, #0
 8014a1c:	6078      	str	r0, [r7, #4]
    return GetField<int8_t>(VT_DEPRECATED_BUILTIN_CODE, 0);
 8014a1e:	687b      	ldr	r3, [r7, #4]
 8014a20:	2200      	movs	r2, #0
 8014a22:	2104      	movs	r1, #4
 8014a24:	4618      	mov	r0, r3
 8014a26:	f7ef f88e 	bl	8003b46 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8014a2a:	4603      	mov	r3, r0
  }
 8014a2c:	4618      	mov	r0, r3
 8014a2e:	3708      	adds	r7, #8
 8014a30:	46bd      	mov	sp, r7
 8014a32:	bd80      	pop	{r7, pc}

08014a34 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>:
// assigned to the `deprecated_builtin_code` field. In such cases, the
// value of the `builtin_code` field should be used for the builtin operator
// code. In the case, the maximum value of the two fields will be the value of
// the `builtin_code` as the right value.

BuiltinOperator GetBuiltinCode(const OperatorCode* op_code) {
 8014a34:	b580      	push	{r7, lr}
 8014a36:	b084      	sub	sp, #16
 8014a38:	af00      	add	r7, sp, #0
 8014a3a:	6078      	str	r0, [r7, #4]
  // Caller should guarantee that the given argument value is not a nullptr.
  TFLITE_DCHECK(op_code != nullptr);
 8014a3c:	687b      	ldr	r3, [r7, #4]
 8014a3e:	2b00      	cmp	r3, #0
 8014a40:	d101      	bne.n	8014a46 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x12>
 8014a42:	f00b f80d 	bl	801fa60 <abort>

  return std::max(
      op_code->builtin_code(),
 8014a46:	6878      	ldr	r0, [r7, #4]
 8014a48:	f7f2 feb6 	bl	80077b8 <_ZNK6tflite12OperatorCode12builtin_codeEv>
 8014a4c:	4603      	mov	r3, r0
 8014a4e:	60bb      	str	r3, [r7, #8]
      static_cast<BuiltinOperator>(op_code->deprecated_builtin_code()));
 8014a50:	6878      	ldr	r0, [r7, #4]
 8014a52:	f7ff ffe0 	bl	8014a16 <_ZNK6tflite12OperatorCode23deprecated_builtin_codeEv>
 8014a56:	4603      	mov	r3, r0
 8014a58:	60fb      	str	r3, [r7, #12]
  return std::max(
 8014a5a:	f107 020c 	add.w	r2, r7, #12
 8014a5e:	f107 0308 	add.w	r3, r7, #8
 8014a62:	4611      	mov	r1, r2
 8014a64:	4618      	mov	r0, r3
 8014a66:	f000 f806 	bl	8014a76 <_ZSt3maxIN6tflite15BuiltinOperatorEERKT_S4_S4_>
 8014a6a:	4603      	mov	r3, r0
      static_cast<BuiltinOperator>(op_code->deprecated_builtin_code()));
 8014a6c:	681b      	ldr	r3, [r3, #0]
}
 8014a6e:	4618      	mov	r0, r3
 8014a70:	3710      	adds	r7, #16
 8014a72:	46bd      	mov	sp, r7
 8014a74:	bd80      	pop	{r7, pc}

08014a76 <_ZSt3maxIN6tflite15BuiltinOperatorEERKT_S4_S4_>:
    max(const _Tp& __a, const _Tp& __b)
 8014a76:	b480      	push	{r7}
 8014a78:	b083      	sub	sp, #12
 8014a7a:	af00      	add	r7, sp, #0
 8014a7c:	6078      	str	r0, [r7, #4]
 8014a7e:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8014a80:	687b      	ldr	r3, [r7, #4]
 8014a82:	681a      	ldr	r2, [r3, #0]
 8014a84:	683b      	ldr	r3, [r7, #0]
 8014a86:	681b      	ldr	r3, [r3, #0]
 8014a88:	429a      	cmp	r2, r3
 8014a8a:	da01      	bge.n	8014a90 <_ZSt3maxIN6tflite15BuiltinOperatorEERKT_S4_S4_+0x1a>
	return __b;
 8014a8c:	683b      	ldr	r3, [r7, #0]
 8014a8e:	e000      	b.n	8014a92 <_ZSt3maxIN6tflite15BuiltinOperatorEERKT_S4_S4_+0x1c>
      return __a;
 8014a90:	687b      	ldr	r3, [r7, #4]
    }
 8014a92:	4618      	mov	r0, r3
 8014a94:	370c      	adds	r7, #12
 8014a96:	46bd      	mov	sp, r7
 8014a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a9c:	4770      	bx	lr

08014a9e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8014a9e:	b580      	push	{r7, lr}
 8014aa0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8014aa2:	f001 f98f 	bl	8015dc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8014aa6:	f000 f80f 	bl	8014ac8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8014aaa:	f000 f9fd 	bl	8014ea8 <MX_GPIO_Init>
  MX_DMA_Init();
 8014aae:	f000 f9d3 	bl	8014e58 <MX_DMA_Init>
  MX_SPI2_Init();
 8014ab2:	f000 f92f 	bl	8014d14 <MX_SPI2_Init>
  MX_DCMI_Init();
 8014ab6:	f000 f8b9 	bl	8014c2c <MX_DCMI_Init>
  MX_USART1_UART_Init();
 8014aba:	f000 f981 	bl	8014dc0 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8014abe:	f000 f8e9 	bl	8014c94 <MX_I2C2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  myMain();
 8014ac2:	f7ec fccb 	bl	800145c <myMain>
  while (1)
 8014ac6:	e7fe      	b.n	8014ac6 <main+0x28>

08014ac8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8014ac8:	b580      	push	{r7, lr}
 8014aca:	b09e      	sub	sp, #120	; 0x78
 8014acc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8014ace:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014ad2:	224c      	movs	r2, #76	; 0x4c
 8014ad4:	2100      	movs	r1, #0
 8014ad6:	4618      	mov	r0, r3
 8014ad8:	f00b fd88 	bl	80205ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8014adc:	f107 030c 	add.w	r3, r7, #12
 8014ae0:	2220      	movs	r2, #32
 8014ae2:	2100      	movs	r1, #0
 8014ae4:	4618      	mov	r0, r3
 8014ae6:	f00b fd81 	bl	80205ec <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8014aea:	2002      	movs	r0, #2
 8014aec:	f005 fe98 	bl	801a820 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8014af0:	2300      	movs	r3, #0
 8014af2:	60bb      	str	r3, [r7, #8]
 8014af4:	4b4a      	ldr	r3, [pc, #296]	; (8014c20 <SystemClock_Config+0x158>)
 8014af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014af8:	4a49      	ldr	r2, [pc, #292]	; (8014c20 <SystemClock_Config+0x158>)
 8014afa:	f023 0301 	bic.w	r3, r3, #1
 8014afe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8014b00:	4b47      	ldr	r3, [pc, #284]	; (8014c20 <SystemClock_Config+0x158>)
 8014b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b04:	f003 0301 	and.w	r3, r3, #1
 8014b08:	60bb      	str	r3, [r7, #8]
 8014b0a:	4b46      	ldr	r3, [pc, #280]	; (8014c24 <SystemClock_Config+0x15c>)
 8014b0c:	699b      	ldr	r3, [r3, #24]
 8014b0e:	4a45      	ldr	r2, [pc, #276]	; (8014c24 <SystemClock_Config+0x15c>)
 8014b10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8014b14:	6193      	str	r3, [r2, #24]
 8014b16:	4b43      	ldr	r3, [pc, #268]	; (8014c24 <SystemClock_Config+0x15c>)
 8014b18:	699b      	ldr	r3, [r3, #24]
 8014b1a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8014b1e:	60bb      	str	r3, [r7, #8]
 8014b20:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8014b22:	bf00      	nop
 8014b24:	4b3f      	ldr	r3, [pc, #252]	; (8014c24 <SystemClock_Config+0x15c>)
 8014b26:	699b      	ldr	r3, [r3, #24]
 8014b28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8014b2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014b30:	d1f8      	bne.n	8014b24 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8014b32:	4b3d      	ldr	r3, [pc, #244]	; (8014c28 <SystemClock_Config+0x160>)
 8014b34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8014b38:	4a3b      	ldr	r2, [pc, #236]	; (8014c28 <SystemClock_Config+0x160>)
 8014b3a:	f043 0302 	orr.w	r3, r3, #2
 8014b3e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8014b42:	4b39      	ldr	r3, [pc, #228]	; (8014c28 <SystemClock_Config+0x160>)
 8014b44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8014b48:	f003 0302 	and.w	r3, r3, #2
 8014b4c:	607b      	str	r3, [r7, #4]
 8014b4e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8014b50:	2300      	movs	r3, #0
 8014b52:	603b      	str	r3, [r7, #0]
 8014b54:	4b33      	ldr	r3, [pc, #204]	; (8014c24 <SystemClock_Config+0x15c>)
 8014b56:	699b      	ldr	r3, [r3, #24]
 8014b58:	4a32      	ldr	r2, [pc, #200]	; (8014c24 <SystemClock_Config+0x15c>)
 8014b5a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8014b5e:	6193      	str	r3, [r2, #24]
 8014b60:	4b30      	ldr	r3, [pc, #192]	; (8014c24 <SystemClock_Config+0x15c>)
 8014b62:	699b      	ldr	r3, [r3, #24]
 8014b64:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8014b68:	603b      	str	r3, [r7, #0]
 8014b6a:	4b2d      	ldr	r3, [pc, #180]	; (8014c20 <SystemClock_Config+0x158>)
 8014b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b6e:	4a2c      	ldr	r2, [pc, #176]	; (8014c20 <SystemClock_Config+0x158>)
 8014b70:	f043 0301 	orr.w	r3, r3, #1
 8014b74:	62d3      	str	r3, [r2, #44]	; 0x2c
 8014b76:	4b2a      	ldr	r3, [pc, #168]	; (8014c20 <SystemClock_Config+0x158>)
 8014b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b7a:	f003 0301 	and.w	r3, r3, #1
 8014b7e:	603b      	str	r3, [r7, #0]
 8014b80:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8014b82:	bf00      	nop
 8014b84:	4b27      	ldr	r3, [pc, #156]	; (8014c24 <SystemClock_Config+0x15c>)
 8014b86:	699b      	ldr	r3, [r3, #24]
 8014b88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8014b8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014b90:	d1f8      	bne.n	8014b84 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8014b92:	2303      	movs	r3, #3
 8014b94:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8014b96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8014b9a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8014b9c:	2301      	movs	r3, #1
 8014b9e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8014ba0:	2340      	movs	r3, #64	; 0x40
 8014ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8014ba4:	2302      	movs	r3, #2
 8014ba6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8014ba8:	2302      	movs	r3, #2
 8014baa:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 8014bac:	2305      	movs	r3, #5
 8014bae:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 8014bb0:	23c0      	movs	r3, #192	; 0xc0
 8014bb2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8014bb4:	2302      	movs	r3, #2
 8014bb6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 20;
 8014bb8:	2314      	movs	r3, #20
 8014bba:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8014bbc:	2302      	movs	r3, #2
 8014bbe:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8014bc0:	2308      	movs	r3, #8
 8014bc2:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8014bc4:	2300      	movs	r3, #0
 8014bc6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8014bc8:	2300      	movs	r3, #0
 8014bca:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8014bcc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014bd0:	4618      	mov	r0, r3
 8014bd2:	f005 fe5f 	bl	801a894 <HAL_RCC_OscConfig>
 8014bd6:	4603      	mov	r3, r0
 8014bd8:	2b00      	cmp	r3, #0
 8014bda:	d001      	beq.n	8014be0 <SystemClock_Config+0x118>
  {
    Error_Handler();
 8014bdc:	f000 fbae 	bl	801533c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8014be0:	233f      	movs	r3, #63	; 0x3f
 8014be2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8014be4:	2303      	movs	r3, #3
 8014be6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8014be8:	2300      	movs	r3, #0
 8014bea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8014bec:	2308      	movs	r3, #8
 8014bee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8014bf0:	2340      	movs	r3, #64	; 0x40
 8014bf2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8014bf4:	2340      	movs	r3, #64	; 0x40
 8014bf6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8014bf8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014bfc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8014bfe:	2340      	movs	r3, #64	; 0x40
 8014c00:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8014c02:	f107 030c 	add.w	r3, r7, #12
 8014c06:	2104      	movs	r1, #4
 8014c08:	4618      	mov	r0, r3
 8014c0a:	f006 fa9d 	bl	801b148 <HAL_RCC_ClockConfig>
 8014c0e:	4603      	mov	r3, r0
 8014c10:	2b00      	cmp	r3, #0
 8014c12:	d001      	beq.n	8014c18 <SystemClock_Config+0x150>
  {
    Error_Handler();
 8014c14:	f000 fb92 	bl	801533c <Error_Handler>
  }
}
 8014c18:	bf00      	nop
 8014c1a:	3778      	adds	r7, #120	; 0x78
 8014c1c:	46bd      	mov	sp, r7
 8014c1e:	bd80      	pop	{r7, pc}
 8014c20:	58000400 	.word	0x58000400
 8014c24:	58024800 	.word	0x58024800
 8014c28:	58024400 	.word	0x58024400

08014c2c <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8014c2c:	b580      	push	{r7, lr}
 8014c2e:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8014c30:	4b16      	ldr	r3, [pc, #88]	; (8014c8c <MX_DCMI_Init+0x60>)
 8014c32:	4a17      	ldr	r2, [pc, #92]	; (8014c90 <MX_DCMI_Init+0x64>)
 8014c34:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8014c36:	4b15      	ldr	r3, [pc, #84]	; (8014c8c <MX_DCMI_Init+0x60>)
 8014c38:	2200      	movs	r2, #0
 8014c3a:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8014c3c:	4b13      	ldr	r3, [pc, #76]	; (8014c8c <MX_DCMI_Init+0x60>)
 8014c3e:	2220      	movs	r2, #32
 8014c40:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8014c42:	4b12      	ldr	r3, [pc, #72]	; (8014c8c <MX_DCMI_Init+0x60>)
 8014c44:	2200      	movs	r2, #0
 8014c46:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8014c48:	4b10      	ldr	r3, [pc, #64]	; (8014c8c <MX_DCMI_Init+0x60>)
 8014c4a:	2200      	movs	r2, #0
 8014c4c:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8014c4e:	4b0f      	ldr	r3, [pc, #60]	; (8014c8c <MX_DCMI_Init+0x60>)
 8014c50:	2200      	movs	r2, #0
 8014c52:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8014c54:	4b0d      	ldr	r3, [pc, #52]	; (8014c8c <MX_DCMI_Init+0x60>)
 8014c56:	2200      	movs	r2, #0
 8014c58:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8014c5a:	4b0c      	ldr	r3, [pc, #48]	; (8014c8c <MX_DCMI_Init+0x60>)
 8014c5c:	2200      	movs	r2, #0
 8014c5e:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8014c60:	4b0a      	ldr	r3, [pc, #40]	; (8014c8c <MX_DCMI_Init+0x60>)
 8014c62:	2200      	movs	r2, #0
 8014c64:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8014c66:	4b09      	ldr	r3, [pc, #36]	; (8014c8c <MX_DCMI_Init+0x60>)
 8014c68:	2200      	movs	r2, #0
 8014c6a:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8014c6c:	4b07      	ldr	r3, [pc, #28]	; (8014c8c <MX_DCMI_Init+0x60>)
 8014c6e:	2200      	movs	r2, #0
 8014c70:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8014c72:	4b06      	ldr	r3, [pc, #24]	; (8014c8c <MX_DCMI_Init+0x60>)
 8014c74:	2200      	movs	r2, #0
 8014c76:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8014c78:	4804      	ldr	r0, [pc, #16]	; (8014c8c <MX_DCMI_Init+0x60>)
 8014c7a:	f001 fa75 	bl	8016168 <HAL_DCMI_Init>
 8014c7e:	4603      	mov	r3, r0
 8014c80:	2b00      	cmp	r3, #0
 8014c82:	d001      	beq.n	8014c88 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8014c84:	f000 fb5a 	bl	801533c <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8014c88:	bf00      	nop
 8014c8a:	bd80      	pop	{r7, pc}
 8014c8c:	2404ed30 	.word	0x2404ed30
 8014c90:	48020000 	.word	0x48020000

08014c94 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8014c94:	b580      	push	{r7, lr}
 8014c96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8014c98:	4b1b      	ldr	r3, [pc, #108]	; (8014d08 <MX_I2C2_Init+0x74>)
 8014c9a:	4a1c      	ldr	r2, [pc, #112]	; (8014d0c <MX_I2C2_Init+0x78>)
 8014c9c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10707DBC;
 8014c9e:	4b1a      	ldr	r3, [pc, #104]	; (8014d08 <MX_I2C2_Init+0x74>)
 8014ca0:	4a1b      	ldr	r2, [pc, #108]	; (8014d10 <MX_I2C2_Init+0x7c>)
 8014ca2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8014ca4:	4b18      	ldr	r3, [pc, #96]	; (8014d08 <MX_I2C2_Init+0x74>)
 8014ca6:	2200      	movs	r2, #0
 8014ca8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8014caa:	4b17      	ldr	r3, [pc, #92]	; (8014d08 <MX_I2C2_Init+0x74>)
 8014cac:	2201      	movs	r2, #1
 8014cae:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8014cb0:	4b15      	ldr	r3, [pc, #84]	; (8014d08 <MX_I2C2_Init+0x74>)
 8014cb2:	2200      	movs	r2, #0
 8014cb4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8014cb6:	4b14      	ldr	r3, [pc, #80]	; (8014d08 <MX_I2C2_Init+0x74>)
 8014cb8:	2200      	movs	r2, #0
 8014cba:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8014cbc:	4b12      	ldr	r3, [pc, #72]	; (8014d08 <MX_I2C2_Init+0x74>)
 8014cbe:	2200      	movs	r2, #0
 8014cc0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8014cc2:	4b11      	ldr	r3, [pc, #68]	; (8014d08 <MX_I2C2_Init+0x74>)
 8014cc4:	2200      	movs	r2, #0
 8014cc6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8014cc8:	4b0f      	ldr	r3, [pc, #60]	; (8014d08 <MX_I2C2_Init+0x74>)
 8014cca:	2200      	movs	r2, #0
 8014ccc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8014cce:	480e      	ldr	r0, [pc, #56]	; (8014d08 <MX_I2C2_Init+0x74>)
 8014cd0:	f004 fe94 	bl	80199fc <HAL_I2C_Init>
 8014cd4:	4603      	mov	r3, r0
 8014cd6:	2b00      	cmp	r3, #0
 8014cd8:	d001      	beq.n	8014cde <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8014cda:	f000 fb2f 	bl	801533c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8014cde:	2100      	movs	r1, #0
 8014ce0:	4809      	ldr	r0, [pc, #36]	; (8014d08 <MX_I2C2_Init+0x74>)
 8014ce2:	f005 fd05 	bl	801a6f0 <HAL_I2CEx_ConfigAnalogFilter>
 8014ce6:	4603      	mov	r3, r0
 8014ce8:	2b00      	cmp	r3, #0
 8014cea:	d001      	beq.n	8014cf0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8014cec:	f000 fb26 	bl	801533c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8014cf0:	2100      	movs	r1, #0
 8014cf2:	4805      	ldr	r0, [pc, #20]	; (8014d08 <MX_I2C2_Init+0x74>)
 8014cf4:	f005 fd47 	bl	801a786 <HAL_I2CEx_ConfigDigitalFilter>
 8014cf8:	4603      	mov	r3, r0
 8014cfa:	2b00      	cmp	r3, #0
 8014cfc:	d001      	beq.n	8014d02 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8014cfe:	f000 fb1d 	bl	801533c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8014d02:	bf00      	nop
 8014d04:	bd80      	pop	{r7, pc}
 8014d06:	bf00      	nop
 8014d08:	2404edf8 	.word	0x2404edf8
 8014d0c:	40005800 	.word	0x40005800
 8014d10:	10707dbc 	.word	0x10707dbc

08014d14 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8014d14:	b580      	push	{r7, lr}
 8014d16:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8014d18:	4b27      	ldr	r3, [pc, #156]	; (8014db8 <MX_SPI2_Init+0xa4>)
 8014d1a:	4a28      	ldr	r2, [pc, #160]	; (8014dbc <MX_SPI2_Init+0xa8>)
 8014d1c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8014d1e:	4b26      	ldr	r3, [pc, #152]	; (8014db8 <MX_SPI2_Init+0xa4>)
 8014d20:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8014d24:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8014d26:	4b24      	ldr	r3, [pc, #144]	; (8014db8 <MX_SPI2_Init+0xa4>)
 8014d28:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8014d2c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8014d2e:	4b22      	ldr	r3, [pc, #136]	; (8014db8 <MX_SPI2_Init+0xa4>)
 8014d30:	2207      	movs	r2, #7
 8014d32:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8014d34:	4b20      	ldr	r3, [pc, #128]	; (8014db8 <MX_SPI2_Init+0xa4>)
 8014d36:	2200      	movs	r2, #0
 8014d38:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8014d3a:	4b1f      	ldr	r3, [pc, #124]	; (8014db8 <MX_SPI2_Init+0xa4>)
 8014d3c:	2200      	movs	r2, #0
 8014d3e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8014d40:	4b1d      	ldr	r3, [pc, #116]	; (8014db8 <MX_SPI2_Init+0xa4>)
 8014d42:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8014d46:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8014d48:	4b1b      	ldr	r3, [pc, #108]	; (8014db8 <MX_SPI2_Init+0xa4>)
 8014d4a:	2200      	movs	r2, #0
 8014d4c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8014d4e:	4b1a      	ldr	r3, [pc, #104]	; (8014db8 <MX_SPI2_Init+0xa4>)
 8014d50:	2200      	movs	r2, #0
 8014d52:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8014d54:	4b18      	ldr	r3, [pc, #96]	; (8014db8 <MX_SPI2_Init+0xa4>)
 8014d56:	2200      	movs	r2, #0
 8014d58:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8014d5a:	4b17      	ldr	r3, [pc, #92]	; (8014db8 <MX_SPI2_Init+0xa4>)
 8014d5c:	2200      	movs	r2, #0
 8014d5e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8014d60:	4b15      	ldr	r3, [pc, #84]	; (8014db8 <MX_SPI2_Init+0xa4>)
 8014d62:	2200      	movs	r2, #0
 8014d64:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8014d66:	4b14      	ldr	r3, [pc, #80]	; (8014db8 <MX_SPI2_Init+0xa4>)
 8014d68:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8014d6c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8014d6e:	4b12      	ldr	r3, [pc, #72]	; (8014db8 <MX_SPI2_Init+0xa4>)
 8014d70:	2200      	movs	r2, #0
 8014d72:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8014d74:	4b10      	ldr	r3, [pc, #64]	; (8014db8 <MX_SPI2_Init+0xa4>)
 8014d76:	2200      	movs	r2, #0
 8014d78:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8014d7a:	4b0f      	ldr	r3, [pc, #60]	; (8014db8 <MX_SPI2_Init+0xa4>)
 8014d7c:	2200      	movs	r2, #0
 8014d7e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8014d80:	4b0d      	ldr	r3, [pc, #52]	; (8014db8 <MX_SPI2_Init+0xa4>)
 8014d82:	2200      	movs	r2, #0
 8014d84:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8014d86:	4b0c      	ldr	r3, [pc, #48]	; (8014db8 <MX_SPI2_Init+0xa4>)
 8014d88:	2200      	movs	r2, #0
 8014d8a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8014d8c:	4b0a      	ldr	r3, [pc, #40]	; (8014db8 <MX_SPI2_Init+0xa4>)
 8014d8e:	2200      	movs	r2, #0
 8014d90:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8014d92:	4b09      	ldr	r3, [pc, #36]	; (8014db8 <MX_SPI2_Init+0xa4>)
 8014d94:	2200      	movs	r2, #0
 8014d96:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8014d98:	4b07      	ldr	r3, [pc, #28]	; (8014db8 <MX_SPI2_Init+0xa4>)
 8014d9a:	2200      	movs	r2, #0
 8014d9c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8014d9e:	4b06      	ldr	r3, [pc, #24]	; (8014db8 <MX_SPI2_Init+0xa4>)
 8014da0:	2200      	movs	r2, #0
 8014da2:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8014da4:	4804      	ldr	r0, [pc, #16]	; (8014db8 <MX_SPI2_Init+0xa4>)
 8014da6:	f008 fb87 	bl	801d4b8 <HAL_SPI_Init>
 8014daa:	4603      	mov	r3, r0
 8014dac:	2b00      	cmp	r3, #0
 8014dae:	d001      	beq.n	8014db4 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8014db0:	f000 fac4 	bl	801533c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8014db4:	bf00      	nop
 8014db6:	bd80      	pop	{r7, pc}
 8014db8:	2404ee4c 	.word	0x2404ee4c
 8014dbc:	40003800 	.word	0x40003800

08014dc0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8014dc0:	b580      	push	{r7, lr}
 8014dc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8014dc4:	4b22      	ldr	r3, [pc, #136]	; (8014e50 <MX_USART1_UART_Init+0x90>)
 8014dc6:	4a23      	ldr	r2, [pc, #140]	; (8014e54 <MX_USART1_UART_Init+0x94>)
 8014dc8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8014dca:	4b21      	ldr	r3, [pc, #132]	; (8014e50 <MX_USART1_UART_Init+0x90>)
 8014dcc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8014dd0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8014dd2:	4b1f      	ldr	r3, [pc, #124]	; (8014e50 <MX_USART1_UART_Init+0x90>)
 8014dd4:	2200      	movs	r2, #0
 8014dd6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8014dd8:	4b1d      	ldr	r3, [pc, #116]	; (8014e50 <MX_USART1_UART_Init+0x90>)
 8014dda:	2200      	movs	r2, #0
 8014ddc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8014dde:	4b1c      	ldr	r3, [pc, #112]	; (8014e50 <MX_USART1_UART_Init+0x90>)
 8014de0:	2200      	movs	r2, #0
 8014de2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8014de4:	4b1a      	ldr	r3, [pc, #104]	; (8014e50 <MX_USART1_UART_Init+0x90>)
 8014de6:	220c      	movs	r2, #12
 8014de8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8014dea:	4b19      	ldr	r3, [pc, #100]	; (8014e50 <MX_USART1_UART_Init+0x90>)
 8014dec:	2200      	movs	r2, #0
 8014dee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8014df0:	4b17      	ldr	r3, [pc, #92]	; (8014e50 <MX_USART1_UART_Init+0x90>)
 8014df2:	2200      	movs	r2, #0
 8014df4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8014df6:	4b16      	ldr	r3, [pc, #88]	; (8014e50 <MX_USART1_UART_Init+0x90>)
 8014df8:	2200      	movs	r2, #0
 8014dfa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8014dfc:	4b14      	ldr	r3, [pc, #80]	; (8014e50 <MX_USART1_UART_Init+0x90>)
 8014dfe:	2200      	movs	r2, #0
 8014e00:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8014e02:	4b13      	ldr	r3, [pc, #76]	; (8014e50 <MX_USART1_UART_Init+0x90>)
 8014e04:	2200      	movs	r2, #0
 8014e06:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8014e08:	4811      	ldr	r0, [pc, #68]	; (8014e50 <MX_USART1_UART_Init+0x90>)
 8014e0a:	f009 fb20 	bl	801e44e <HAL_UART_Init>
 8014e0e:	4603      	mov	r3, r0
 8014e10:	2b00      	cmp	r3, #0
 8014e12:	d001      	beq.n	8014e18 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8014e14:	f000 fa92 	bl	801533c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8014e18:	2100      	movs	r1, #0
 8014e1a:	480d      	ldr	r0, [pc, #52]	; (8014e50 <MX_USART1_UART_Init+0x90>)
 8014e1c:	f00a fbb1 	bl	801f582 <HAL_UARTEx_SetTxFifoThreshold>
 8014e20:	4603      	mov	r3, r0
 8014e22:	2b00      	cmp	r3, #0
 8014e24:	d001      	beq.n	8014e2a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8014e26:	f000 fa89 	bl	801533c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8014e2a:	2100      	movs	r1, #0
 8014e2c:	4808      	ldr	r0, [pc, #32]	; (8014e50 <MX_USART1_UART_Init+0x90>)
 8014e2e:	f00a fbe6 	bl	801f5fe <HAL_UARTEx_SetRxFifoThreshold>
 8014e32:	4603      	mov	r3, r0
 8014e34:	2b00      	cmp	r3, #0
 8014e36:	d001      	beq.n	8014e3c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8014e38:	f000 fa80 	bl	801533c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8014e3c:	4804      	ldr	r0, [pc, #16]	; (8014e50 <MX_USART1_UART_Init+0x90>)
 8014e3e:	f00a fb67 	bl	801f510 <HAL_UARTEx_DisableFifoMode>
 8014e42:	4603      	mov	r3, r0
 8014e44:	2b00      	cmp	r3, #0
 8014e46:	d001      	beq.n	8014e4c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8014e48:	f000 fa78 	bl	801533c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8014e4c:	bf00      	nop
 8014e4e:	bd80      	pop	{r7, pc}
 8014e50:	2404ef4c 	.word	0x2404ef4c
 8014e54:	40011000 	.word	0x40011000

08014e58 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8014e58:	b580      	push	{r7, lr}
 8014e5a:	b082      	sub	sp, #8
 8014e5c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8014e5e:	4b11      	ldr	r3, [pc, #68]	; (8014ea4 <MX_DMA_Init+0x4c>)
 8014e60:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8014e64:	4a0f      	ldr	r2, [pc, #60]	; (8014ea4 <MX_DMA_Init+0x4c>)
 8014e66:	f043 0301 	orr.w	r3, r3, #1
 8014e6a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8014e6e:	4b0d      	ldr	r3, [pc, #52]	; (8014ea4 <MX_DMA_Init+0x4c>)
 8014e70:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8014e74:	f003 0301 	and.w	r3, r3, #1
 8014e78:	607b      	str	r3, [r7, #4]
 8014e7a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8014e7c:	2200      	movs	r2, #0
 8014e7e:	2100      	movs	r1, #0
 8014e80:	200b      	movs	r0, #11
 8014e82:	f001 f93c 	bl	80160fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8014e86:	200b      	movs	r0, #11
 8014e88:	f001 f953 	bl	8016132 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8014e8c:	2200      	movs	r2, #0
 8014e8e:	2100      	movs	r1, #0
 8014e90:	200c      	movs	r0, #12
 8014e92:	f001 f934 	bl	80160fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8014e96:	200c      	movs	r0, #12
 8014e98:	f001 f94b 	bl	8016132 <HAL_NVIC_EnableIRQ>

}
 8014e9c:	bf00      	nop
 8014e9e:	3708      	adds	r7, #8
 8014ea0:	46bd      	mov	sp, r7
 8014ea2:	bd80      	pop	{r7, pc}
 8014ea4:	58024400 	.word	0x58024400

08014ea8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8014ea8:	b580      	push	{r7, lr}
 8014eaa:	b090      	sub	sp, #64	; 0x40
 8014eac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014eae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014eb2:	2200      	movs	r2, #0
 8014eb4:	601a      	str	r2, [r3, #0]
 8014eb6:	605a      	str	r2, [r3, #4]
 8014eb8:	609a      	str	r2, [r3, #8]
 8014eba:	60da      	str	r2, [r3, #12]
 8014ebc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8014ebe:	4bbe      	ldr	r3, [pc, #760]	; (80151b8 <MX_GPIO_Init+0x310>)
 8014ec0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014ec4:	4abc      	ldr	r2, [pc, #752]	; (80151b8 <MX_GPIO_Init+0x310>)
 8014ec6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8014eca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8014ece:	4bba      	ldr	r3, [pc, #744]	; (80151b8 <MX_GPIO_Init+0x310>)
 8014ed0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014ed4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8014ed8:	62bb      	str	r3, [r7, #40]	; 0x28
 8014eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8014edc:	4bb6      	ldr	r3, [pc, #728]	; (80151b8 <MX_GPIO_Init+0x310>)
 8014ede:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014ee2:	4ab5      	ldr	r2, [pc, #724]	; (80151b8 <MX_GPIO_Init+0x310>)
 8014ee4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014ee8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8014eec:	4bb2      	ldr	r3, [pc, #712]	; (80151b8 <MX_GPIO_Init+0x310>)
 8014eee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014ef6:	627b      	str	r3, [r7, #36]	; 0x24
 8014ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8014efa:	4baf      	ldr	r3, [pc, #700]	; (80151b8 <MX_GPIO_Init+0x310>)
 8014efc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014f00:	4aad      	ldr	r2, [pc, #692]	; (80151b8 <MX_GPIO_Init+0x310>)
 8014f02:	f043 0302 	orr.w	r3, r3, #2
 8014f06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8014f0a:	4bab      	ldr	r3, [pc, #684]	; (80151b8 <MX_GPIO_Init+0x310>)
 8014f0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014f10:	f003 0302 	and.w	r3, r3, #2
 8014f14:	623b      	str	r3, [r7, #32]
 8014f16:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8014f18:	4ba7      	ldr	r3, [pc, #668]	; (80151b8 <MX_GPIO_Init+0x310>)
 8014f1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014f1e:	4aa6      	ldr	r2, [pc, #664]	; (80151b8 <MX_GPIO_Init+0x310>)
 8014f20:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8014f24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8014f28:	4ba3      	ldr	r3, [pc, #652]	; (80151b8 <MX_GPIO_Init+0x310>)
 8014f2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014f2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8014f32:	61fb      	str	r3, [r7, #28]
 8014f34:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8014f36:	4ba0      	ldr	r3, [pc, #640]	; (80151b8 <MX_GPIO_Init+0x310>)
 8014f38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014f3c:	4a9e      	ldr	r2, [pc, #632]	; (80151b8 <MX_GPIO_Init+0x310>)
 8014f3e:	f043 0308 	orr.w	r3, r3, #8
 8014f42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8014f46:	4b9c      	ldr	r3, [pc, #624]	; (80151b8 <MX_GPIO_Init+0x310>)
 8014f48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014f4c:	f003 0308 	and.w	r3, r3, #8
 8014f50:	61bb      	str	r3, [r7, #24]
 8014f52:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8014f54:	4b98      	ldr	r3, [pc, #608]	; (80151b8 <MX_GPIO_Init+0x310>)
 8014f56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014f5a:	4a97      	ldr	r2, [pc, #604]	; (80151b8 <MX_GPIO_Init+0x310>)
 8014f5c:	f043 0304 	orr.w	r3, r3, #4
 8014f60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8014f64:	4b94      	ldr	r3, [pc, #592]	; (80151b8 <MX_GPIO_Init+0x310>)
 8014f66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014f6a:	f003 0304 	and.w	r3, r3, #4
 8014f6e:	617b      	str	r3, [r7, #20]
 8014f70:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8014f72:	4b91      	ldr	r3, [pc, #580]	; (80151b8 <MX_GPIO_Init+0x310>)
 8014f74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014f78:	4a8f      	ldr	r2, [pc, #572]	; (80151b8 <MX_GPIO_Init+0x310>)
 8014f7a:	f043 0310 	orr.w	r3, r3, #16
 8014f7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8014f82:	4b8d      	ldr	r3, [pc, #564]	; (80151b8 <MX_GPIO_Init+0x310>)
 8014f84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014f88:	f003 0310 	and.w	r3, r3, #16
 8014f8c:	613b      	str	r3, [r7, #16]
 8014f8e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8014f90:	4b89      	ldr	r3, [pc, #548]	; (80151b8 <MX_GPIO_Init+0x310>)
 8014f92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014f96:	4a88      	ldr	r2, [pc, #544]	; (80151b8 <MX_GPIO_Init+0x310>)
 8014f98:	f043 0301 	orr.w	r3, r3, #1
 8014f9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8014fa0:	4b85      	ldr	r3, [pc, #532]	; (80151b8 <MX_GPIO_Init+0x310>)
 8014fa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014fa6:	f003 0301 	and.w	r3, r3, #1
 8014faa:	60fb      	str	r3, [r7, #12]
 8014fac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8014fae:	4b82      	ldr	r3, [pc, #520]	; (80151b8 <MX_GPIO_Init+0x310>)
 8014fb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014fb4:	4a80      	ldr	r2, [pc, #512]	; (80151b8 <MX_GPIO_Init+0x310>)
 8014fb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014fba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8014fbe:	4b7e      	ldr	r3, [pc, #504]	; (80151b8 <MX_GPIO_Init+0x310>)
 8014fc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014fc8:	60bb      	str	r3, [r7, #8]
 8014fca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8014fcc:	4b7a      	ldr	r3, [pc, #488]	; (80151b8 <MX_GPIO_Init+0x310>)
 8014fce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014fd2:	4a79      	ldr	r2, [pc, #484]	; (80151b8 <MX_GPIO_Init+0x310>)
 8014fd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014fd8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8014fdc:	4b76      	ldr	r3, [pc, #472]	; (80151b8 <MX_GPIO_Init+0x310>)
 8014fde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014fe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014fe6:	607b      	str	r3, [r7, #4]
 8014fe8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8014fea:	4b73      	ldr	r3, [pc, #460]	; (80151b8 <MX_GPIO_Init+0x310>)
 8014fec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014ff0:	4a71      	ldr	r2, [pc, #452]	; (80151b8 <MX_GPIO_Init+0x310>)
 8014ff2:	f043 0320 	orr.w	r3, r3, #32
 8014ff6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8014ffa:	4b6f      	ldr	r3, [pc, #444]	; (80151b8 <MX_GPIO_Init+0x310>)
 8014ffc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8015000:	f003 0320 	and.w	r3, r3, #32
 8015004:	603b      	str	r3, [r7, #0]
 8015006:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15|GPIO_PIN_0, GPIO_PIN_RESET);
 8015008:	2200      	movs	r2, #0
 801500a:	f248 0101 	movw	r1, #32769	; 0x8001
 801500e:	486b      	ldr	r0, [pc, #428]	; (80151bc <MX_GPIO_Init+0x314>)
 8015010:	f004 fcc0 	bl	8019994 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8015014:	2201      	movs	r2, #1
 8015016:	2104      	movs	r1, #4
 8015018:	4869      	ldr	r0, [pc, #420]	; (80151c0 <MX_GPIO_Init+0x318>)
 801501a:	f004 fcbb 	bl	8019994 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_15, GPIO_PIN_RESET);
 801501e:	2200      	movs	r2, #0
 8015020:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8015024:	4867      	ldr	r0, [pc, #412]	; (80151c4 <MX_GPIO_Init+0x31c>)
 8015026:	f004 fcb5 	bl	8019994 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 801502a:	2200      	movs	r2, #0
 801502c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8015030:	4865      	ldr	r0, [pc, #404]	; (80151c8 <MX_GPIO_Init+0x320>)
 8015032:	f004 fcaf 	bl	8019994 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8015036:	2200      	movs	r2, #0
 8015038:	2120      	movs	r1, #32
 801503a:	4864      	ldr	r0, [pc, #400]	; (80151cc <MX_GPIO_Init+0x324>)
 801503c:	f004 fcaa 	bl	8019994 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8015040:	2200      	movs	r2, #0
 8015042:	2101      	movs	r1, #1
 8015044:	4862      	ldr	r0, [pc, #392]	; (80151d0 <MX_GPIO_Init+0x328>)
 8015046:	f004 fca5 	bl	8019994 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PK5 PK4 PK6 PK3
                           PK2 PK0 PK1 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
 801504a:	237f      	movs	r3, #127	; 0x7f
 801504c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801504e:	2302      	movs	r3, #2
 8015050:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015052:	2300      	movs	r3, #0
 8015054:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015056:	2300      	movs	r3, #0
 8015058:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 801505a:	230e      	movs	r3, #14
 801505c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 801505e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015062:	4619      	mov	r1, r3
 8015064:	485b      	ldr	r0, [pc, #364]	; (80151d4 <MX_GPIO_Init+0x32c>)
 8015066:	f004 fae5 	bl	8019634 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ15 PJ0 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_0;
 801506a:	f248 0301 	movw	r3, #32769	; 0x8001
 801506e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8015070:	2301      	movs	r3, #1
 8015072:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015074:	2300      	movs	r3, #0
 8015076:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015078:	2300      	movs	r3, #0
 801507a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 801507c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015080:	4619      	mov	r1, r3
 8015082:	484e      	ldr	r0, [pc, #312]	; (80151bc <MX_GPIO_Init+0x314>)
 8015084:	f004 fad6 	bl	8019634 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8015088:	2340      	movs	r3, #64	; 0x40
 801508a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801508c:	2302      	movs	r3, #2
 801508e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015090:	2300      	movs	r3, #0
 8015092:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015094:	2303      	movs	r3, #3
 8015096:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_SDIO2;
 8015098:	230b      	movs	r3, #11
 801509a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 801509c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80150a0:	4619      	mov	r1, r3
 80150a2:	4849      	ldr	r0, [pc, #292]	; (80151c8 <MX_GPIO_Init+0x320>)
 80150a4:	f004 fac6 	bl	8019634 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80150a8:	2308      	movs	r3, #8
 80150aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80150ac:	2302      	movs	r3, #2
 80150ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80150b0:	2300      	movs	r3, #0
 80150b2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80150b4:	2303      	movs	r3, #3
 80150b6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_SDIO2;
 80150b8:	2309      	movs	r3, #9
 80150ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80150bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80150c0:	4619      	mov	r1, r3
 80150c2:	4843      	ldr	r0, [pc, #268]	; (80151d0 <MX_GPIO_Init+0x328>)
 80150c4:	f004 fab6 	bl	8019634 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG12 PG14 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_13;
 80150c8:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80150cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80150ce:	2302      	movs	r3, #2
 80150d0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80150d2:	2300      	movs	r3, #0
 80150d4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80150d6:	2300      	movs	r3, #0
 80150d8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 80150da:	2305      	movs	r3, #5
 80150dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80150de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80150e2:	4619      	mov	r1, r3
 80150e4:	483c      	ldr	r0, [pc, #240]	; (80151d8 <MX_GPIO_Init+0x330>)
 80150e6:	f004 faa5 	bl	8019634 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80150ea:	2340      	movs	r3, #64	; 0x40
 80150ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80150ee:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80150f2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80150f4:	2300      	movs	r3, #0
 80150f6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80150f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80150fc:	4619      	mov	r1, r3
 80150fe:	4837      	ldr	r0, [pc, #220]	; (80151dc <MX_GPIO_Init+0x334>)
 8015100:	f004 fa98 	bl	8019634 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ13 PJ11 PJ10 PJ9
                           PJ8 PJ7 PJ1 PJ5
                           PJ2 PJ3 PJ4 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
 8015104:	f642 73be 	movw	r3, #12222	; 0x2fbe
 8015108:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_1|GPIO_PIN_5
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801510a:	2302      	movs	r3, #2
 801510c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801510e:	2300      	movs	r3, #0
 8015110:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015112:	2300      	movs	r3, #0
 8015114:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8015116:	230e      	movs	r3, #14
 8015118:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 801511a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801511e:	4619      	mov	r1, r3
 8015120:	4826      	ldr	r0, [pc, #152]	; (80151bc <MX_GPIO_Init+0x314>)
 8015122:	f004 fa87 	bl	8019634 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8015126:	2340      	movs	r3, #64	; 0x40
 8015128:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801512a:	2302      	movs	r3, #2
 801512c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801512e:	2300      	movs	r3, #0
 8015130:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015132:	2300      	movs	r3, #0
 8015134:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8015136:	230a      	movs	r3, #10
 8015138:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 801513a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801513e:	4619      	mov	r1, r3
 8015140:	4825      	ldr	r0, [pc, #148]	; (80151d8 <MX_GPIO_Init+0x330>)
 8015142:	f004 fa77 	bl	8019634 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI12 PI13 PI14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8015146:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 801514a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801514c:	2302      	movs	r3, #2
 801514e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015150:	2300      	movs	r3, #0
 8015152:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015154:	2300      	movs	r3, #0
 8015156:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8015158:	230e      	movs	r3, #14
 801515a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 801515c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015160:	4619      	mov	r1, r3
 8015162:	4818      	ldr	r0, [pc, #96]	; (80151c4 <MX_GPIO_Init+0x31c>)
 8015164:	f004 fa66 	bl	8019634 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8015168:	2380      	movs	r3, #128	; 0x80
 801516a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801516c:	2302      	movs	r3, #2
 801516e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015170:	2300      	movs	r3, #0
 8015172:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015174:	2300      	movs	r3, #0
 8015176:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8015178:	2309      	movs	r3, #9
 801517a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801517c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015180:	4619      	mov	r1, r3
 8015182:	4817      	ldr	r0, [pc, #92]	; (80151e0 <MX_GPIO_Init+0x338>)
 8015184:	f004 fa56 	bl	8019634 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8015188:	2304      	movs	r3, #4
 801518a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801518c:	2301      	movs	r3, #1
 801518e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015190:	2300      	movs	r3, #0
 8015192:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015194:	2300      	movs	r3, #0
 8015196:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015198:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801519c:	4619      	mov	r1, r3
 801519e:	4808      	ldr	r0, [pc, #32]	; (80151c0 <MX_GPIO_Init+0x318>)
 80151a0:	f004 fa48 	bl	8019634 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80151a4:	2301      	movs	r3, #1
 80151a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80151a8:	2302      	movs	r3, #2
 80151aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80151ac:	2300      	movs	r3, #0
 80151ae:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80151b0:	2303      	movs	r3, #3
 80151b2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_SDIO2;
 80151b4:	2309      	movs	r3, #9
 80151b6:	e015      	b.n	80151e4 <MX_GPIO_Init+0x33c>
 80151b8:	58024400 	.word	0x58024400
 80151bc:	58022400 	.word	0x58022400
 80151c0:	58020000 	.word	0x58020000
 80151c4:	58022000 	.word	0x58022000
 80151c8:	58020c00 	.word	0x58020c00
 80151cc:	58020800 	.word	0x58020800
 80151d0:	58020400 	.word	0x58020400
 80151d4:	58022800 	.word	0x58022800
 80151d8:	58021800 	.word	0x58021800
 80151dc:	58021000 	.word	0x58021000
 80151e0:	58021400 	.word	0x58021400
 80151e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80151e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80151ea:	4619      	mov	r1, r3
 80151ec:	484d      	ldr	r0, [pc, #308]	; (8015324 <MX_GPIO_Init+0x47c>)
 80151ee:	f004 fa21 	bl	8019634 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80151f2:	2310      	movs	r3, #16
 80151f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80151f6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80151fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80151fc:	2301      	movs	r3, #1
 80151fe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8015200:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015204:	4619      	mov	r1, r3
 8015206:	4848      	ldr	r0, [pc, #288]	; (8015328 <MX_GPIO_Init+0x480>)
 8015208:	f004 fa14 	bl	8019634 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH5 PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 801520c:	23a0      	movs	r3, #160	; 0xa0
 801520e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015210:	2302      	movs	r3, #2
 8015212:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015214:	2300      	movs	r3, #0
 8015216:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015218:	2303      	movs	r3, #3
 801521a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 801521c:	230c      	movs	r3, #12
 801521e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8015220:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015224:	4619      	mov	r1, r3
 8015226:	4840      	ldr	r0, [pc, #256]	; (8015328 <MX_GPIO_Init+0x480>)
 8015228:	f004 fa04 	bl	8019634 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 801522c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8015230:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8015232:	2301      	movs	r3, #1
 8015234:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015236:	2300      	movs	r3, #0
 8015238:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801523a:	2300      	movs	r3, #0
 801523c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 801523e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015242:	4619      	mov	r1, r3
 8015244:	4839      	ldr	r0, [pc, #228]	; (801532c <MX_GPIO_Init+0x484>)
 8015246:	f004 f9f5 	bl	8019634 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 801524a:	2380      	movs	r3, #128	; 0x80
 801524c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801524e:	2302      	movs	r3, #2
 8015250:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015252:	2300      	movs	r3, #0
 8015254:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015256:	2300      	movs	r3, #0
 8015258:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 801525a:	2305      	movs	r3, #5
 801525c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801525e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015262:	4619      	mov	r1, r3
 8015264:	482f      	ldr	r0, [pc, #188]	; (8015324 <MX_GPIO_Init+0x47c>)
 8015266:	f004 f9e5 	bl	8019634 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 801526a:	2304      	movs	r3, #4
 801526c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801526e:	2302      	movs	r3, #2
 8015270:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015272:	2300      	movs	r3, #0
 8015274:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015276:	2300      	movs	r3, #0
 8015278:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 801527a:	2309      	movs	r3, #9
 801527c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801527e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015282:	4619      	mov	r1, r3
 8015284:	482a      	ldr	r0, [pc, #168]	; (8015330 <MX_GPIO_Init+0x488>)
 8015286:	f004 f9d5 	bl	8019634 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 801528a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801528e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8015290:	2301      	movs	r3, #1
 8015292:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015294:	2300      	movs	r3, #0
 8015296:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015298:	2300      	movs	r3, #0
 801529a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 801529c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80152a0:	4619      	mov	r1, r3
 80152a2:	4824      	ldr	r0, [pc, #144]	; (8015334 <MX_GPIO_Init+0x48c>)
 80152a4:	f004 f9c6 	bl	8019634 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80152a8:	2320      	movs	r3, #32
 80152aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80152ac:	2301      	movs	r3, #1
 80152ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80152b0:	2300      	movs	r3, #0
 80152b2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80152b4:	2300      	movs	r3, #0
 80152b6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80152b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80152bc:	4619      	mov	r1, r3
 80152be:	481e      	ldr	r0, [pc, #120]	; (8015338 <MX_GPIO_Init+0x490>)
 80152c0:	f004 f9b8 	bl	8019634 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80152c4:	2301      	movs	r3, #1
 80152c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80152c8:	2301      	movs	r3, #1
 80152ca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80152cc:	2300      	movs	r3, #0
 80152ce:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80152d0:	2300      	movs	r3, #0
 80152d2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80152d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80152d8:	4619      	mov	r1, r3
 80152da:	4815      	ldr	r0, [pc, #84]	; (8015330 <MX_GPIO_Init+0x488>)
 80152dc:	f004 f9aa 	bl	8019634 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80152e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80152e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80152e6:	2300      	movs	r3, #0
 80152e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80152ea:	2301      	movs	r3, #1
 80152ec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80152ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80152f2:	4619      	mov	r1, r3
 80152f4:	480e      	ldr	r0, [pc, #56]	; (8015330 <MX_GPIO_Init+0x488>)
 80152f6:	f004 f99d 	bl	8019634 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80152fa:	2200      	movs	r2, #0
 80152fc:	2100      	movs	r1, #0
 80152fe:	200a      	movs	r0, #10
 8015300:	f000 fefd 	bl	80160fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8015304:	200a      	movs	r0, #10
 8015306:	f000 ff14 	bl	8016132 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 15, 0);
 801530a:	2200      	movs	r2, #0
 801530c:	210f      	movs	r1, #15
 801530e:	2017      	movs	r0, #23
 8015310:	f000 fef5 	bl	80160fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8015314:	2017      	movs	r0, #23
 8015316:	f000 ff0c 	bl	8016132 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 801531a:	bf00      	nop
 801531c:	3740      	adds	r7, #64	; 0x40
 801531e:	46bd      	mov	sp, r7
 8015320:	bd80      	pop	{r7, pc}
 8015322:	bf00      	nop
 8015324:	58020000 	.word	0x58020000
 8015328:	58021c00 	.word	0x58021c00
 801532c:	58022000 	.word	0x58022000
 8015330:	58020400 	.word	0x58020400
 8015334:	58020c00 	.word	0x58020c00
 8015338:	58020800 	.word	0x58020800

0801533c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 801533c:	b480      	push	{r7}
 801533e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8015340:	b672      	cpsid	i
}
 8015342:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8015344:	e7fe      	b.n	8015344 <Error_Handler+0x8>
	...

08015348 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8015348:	b480      	push	{r7}
 801534a:	b083      	sub	sp, #12
 801534c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801534e:	4b0a      	ldr	r3, [pc, #40]	; (8015378 <HAL_MspInit+0x30>)
 8015350:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8015354:	4a08      	ldr	r2, [pc, #32]	; (8015378 <HAL_MspInit+0x30>)
 8015356:	f043 0302 	orr.w	r3, r3, #2
 801535a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 801535e:	4b06      	ldr	r3, [pc, #24]	; (8015378 <HAL_MspInit+0x30>)
 8015360:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8015364:	f003 0302 	and.w	r3, r3, #2
 8015368:	607b      	str	r3, [r7, #4]
 801536a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 801536c:	bf00      	nop
 801536e:	370c      	adds	r7, #12
 8015370:	46bd      	mov	sp, r7
 8015372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015376:	4770      	bx	lr
 8015378:	58024400 	.word	0x58024400

0801537c <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 801537c:	b580      	push	{r7, lr}
 801537e:	b08e      	sub	sp, #56	; 0x38
 8015380:	af00      	add	r7, sp, #0
 8015382:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015384:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015388:	2200      	movs	r2, #0
 801538a:	601a      	str	r2, [r3, #0]
 801538c:	605a      	str	r2, [r3, #4]
 801538e:	609a      	str	r2, [r3, #8]
 8015390:	60da      	str	r2, [r3, #12]
 8015392:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8015394:	687b      	ldr	r3, [r7, #4]
 8015396:	681b      	ldr	r3, [r3, #0]
 8015398:	4a8a      	ldr	r2, [pc, #552]	; (80155c4 <HAL_DCMI_MspInit+0x248>)
 801539a:	4293      	cmp	r3, r2
 801539c:	f040 810d 	bne.w	80155ba <HAL_DCMI_MspInit+0x23e>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 80153a0:	4b89      	ldr	r3, [pc, #548]	; (80155c8 <HAL_DCMI_MspInit+0x24c>)
 80153a2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80153a6:	4a88      	ldr	r2, [pc, #544]	; (80155c8 <HAL_DCMI_MspInit+0x24c>)
 80153a8:	f043 0301 	orr.w	r3, r3, #1
 80153ac:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80153b0:	4b85      	ldr	r3, [pc, #532]	; (80155c8 <HAL_DCMI_MspInit+0x24c>)
 80153b2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80153b6:	f003 0301 	and.w	r3, r3, #1
 80153ba:	623b      	str	r3, [r7, #32]
 80153bc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80153be:	4b82      	ldr	r3, [pc, #520]	; (80155c8 <HAL_DCMI_MspInit+0x24c>)
 80153c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80153c4:	4a80      	ldr	r2, [pc, #512]	; (80155c8 <HAL_DCMI_MspInit+0x24c>)
 80153c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80153ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80153ce:	4b7e      	ldr	r3, [pc, #504]	; (80155c8 <HAL_DCMI_MspInit+0x24c>)
 80153d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80153d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80153d8:	61fb      	str	r3, [r7, #28]
 80153da:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80153dc:	4b7a      	ldr	r3, [pc, #488]	; (80155c8 <HAL_DCMI_MspInit+0x24c>)
 80153de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80153e2:	4a79      	ldr	r2, [pc, #484]	; (80155c8 <HAL_DCMI_MspInit+0x24c>)
 80153e4:	f043 0308 	orr.w	r3, r3, #8
 80153e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80153ec:	4b76      	ldr	r3, [pc, #472]	; (80155c8 <HAL_DCMI_MspInit+0x24c>)
 80153ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80153f2:	f003 0308 	and.w	r3, r3, #8
 80153f6:	61bb      	str	r3, [r7, #24]
 80153f8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80153fa:	4b73      	ldr	r3, [pc, #460]	; (80155c8 <HAL_DCMI_MspInit+0x24c>)
 80153fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8015400:	4a71      	ldr	r2, [pc, #452]	; (80155c8 <HAL_DCMI_MspInit+0x24c>)
 8015402:	f043 0302 	orr.w	r3, r3, #2
 8015406:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801540a:	4b6f      	ldr	r3, [pc, #444]	; (80155c8 <HAL_DCMI_MspInit+0x24c>)
 801540c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8015410:	f003 0302 	and.w	r3, r3, #2
 8015414:	617b      	str	r3, [r7, #20]
 8015416:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8015418:	4b6b      	ldr	r3, [pc, #428]	; (80155c8 <HAL_DCMI_MspInit+0x24c>)
 801541a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801541e:	4a6a      	ldr	r2, [pc, #424]	; (80155c8 <HAL_DCMI_MspInit+0x24c>)
 8015420:	f043 0310 	orr.w	r3, r3, #16
 8015424:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8015428:	4b67      	ldr	r3, [pc, #412]	; (80155c8 <HAL_DCMI_MspInit+0x24c>)
 801542a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801542e:	f003 0310 	and.w	r3, r3, #16
 8015432:	613b      	str	r3, [r7, #16]
 8015434:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8015436:	4b64      	ldr	r3, [pc, #400]	; (80155c8 <HAL_DCMI_MspInit+0x24c>)
 8015438:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801543c:	4a62      	ldr	r2, [pc, #392]	; (80155c8 <HAL_DCMI_MspInit+0x24c>)
 801543e:	f043 0304 	orr.w	r3, r3, #4
 8015442:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8015446:	4b60      	ldr	r3, [pc, #384]	; (80155c8 <HAL_DCMI_MspInit+0x24c>)
 8015448:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801544c:	f003 0304 	and.w	r3, r3, #4
 8015450:	60fb      	str	r3, [r7, #12]
 8015452:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015454:	4b5c      	ldr	r3, [pc, #368]	; (80155c8 <HAL_DCMI_MspInit+0x24c>)
 8015456:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801545a:	4a5b      	ldr	r2, [pc, #364]	; (80155c8 <HAL_DCMI_MspInit+0x24c>)
 801545c:	f043 0301 	orr.w	r3, r3, #1
 8015460:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8015464:	4b58      	ldr	r3, [pc, #352]	; (80155c8 <HAL_DCMI_MspInit+0x24c>)
 8015466:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801546a:	f003 0301 	and.w	r3, r3, #1
 801546e:	60bb      	str	r3, [r7, #8]
 8015470:	68bb      	ldr	r3, [r7, #8]
    PC7     ------> DCMI_D1
    PC6     ------> DCMI_D0
    PA6     ------> DCMI_PIXCLK
    PA4     ------> DCMI_HSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8015472:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8015476:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015478:	2302      	movs	r3, #2
 801547a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801547c:	2300      	movs	r3, #0
 801547e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015480:	2300      	movs	r3, #0
 8015482:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8015484:	230d      	movs	r3, #13
 8015486:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8015488:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801548c:	4619      	mov	r1, r3
 801548e:	484f      	ldr	r0, [pc, #316]	; (80155cc <HAL_DCMI_MspInit+0x250>)
 8015490:	f004 f8d0 	bl	8019634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8015494:	2308      	movs	r3, #8
 8015496:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015498:	2302      	movs	r3, #2
 801549a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801549c:	2300      	movs	r3, #0
 801549e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80154a0:	2300      	movs	r3, #0
 80154a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80154a4:	230d      	movs	r3, #13
 80154a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80154a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80154ac:	4619      	mov	r1, r3
 80154ae:	4848      	ldr	r0, [pc, #288]	; (80155d0 <HAL_DCMI_MspInit+0x254>)
 80154b0:	f004 f8c0 	bl	8019634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_8;
 80154b4:	f44f 7360 	mov.w	r3, #896	; 0x380
 80154b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80154ba:	2302      	movs	r3, #2
 80154bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80154be:	2300      	movs	r3, #0
 80154c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80154c2:	2300      	movs	r3, #0
 80154c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80154c6:	230d      	movs	r3, #13
 80154c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80154ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80154ce:	4619      	mov	r1, r3
 80154d0:	4840      	ldr	r0, [pc, #256]	; (80155d4 <HAL_DCMI_MspInit+0x258>)
 80154d2:	f004 f8af 	bl	8019634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80154d6:	2310      	movs	r3, #16
 80154d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80154da:	2302      	movs	r3, #2
 80154dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80154de:	2300      	movs	r3, #0
 80154e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80154e2:	2300      	movs	r3, #0
 80154e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80154e6:	230d      	movs	r3, #13
 80154e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80154ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80154ee:	4619      	mov	r1, r3
 80154f0:	4839      	ldr	r0, [pc, #228]	; (80155d8 <HAL_DCMI_MspInit+0x25c>)
 80154f2:	f004 f89f 	bl	8019634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80154f6:	23c0      	movs	r3, #192	; 0xc0
 80154f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80154fa:	2302      	movs	r3, #2
 80154fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80154fe:	2300      	movs	r3, #0
 8015500:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015502:	2300      	movs	r3, #0
 8015504:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8015506:	230d      	movs	r3, #13
 8015508:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801550a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801550e:	4619      	mov	r1, r3
 8015510:	4832      	ldr	r0, [pc, #200]	; (80155dc <HAL_DCMI_MspInit+0x260>)
 8015512:	f004 f88f 	bl	8019634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_4;
 8015516:	2350      	movs	r3, #80	; 0x50
 8015518:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801551a:	2302      	movs	r3, #2
 801551c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801551e:	2300      	movs	r3, #0
 8015520:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015522:	2300      	movs	r3, #0
 8015524:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8015526:	230d      	movs	r3, #13
 8015528:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801552a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801552e:	4619      	mov	r1, r3
 8015530:	482b      	ldr	r0, [pc, #172]	; (80155e0 <HAL_DCMI_MspInit+0x264>)
 8015532:	f004 f87f 	bl	8019634 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA1_Stream0;
 8015536:	4b2b      	ldr	r3, [pc, #172]	; (80155e4 <HAL_DCMI_MspInit+0x268>)
 8015538:	4a2b      	ldr	r2, [pc, #172]	; (80155e8 <HAL_DCMI_MspInit+0x26c>)
 801553a:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI;
 801553c:	4b29      	ldr	r3, [pc, #164]	; (80155e4 <HAL_DCMI_MspInit+0x268>)
 801553e:	224b      	movs	r2, #75	; 0x4b
 8015540:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8015542:	4b28      	ldr	r3, [pc, #160]	; (80155e4 <HAL_DCMI_MspInit+0x268>)
 8015544:	2200      	movs	r2, #0
 8015546:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8015548:	4b26      	ldr	r3, [pc, #152]	; (80155e4 <HAL_DCMI_MspInit+0x268>)
 801554a:	2200      	movs	r2, #0
 801554c:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 801554e:	4b25      	ldr	r3, [pc, #148]	; (80155e4 <HAL_DCMI_MspInit+0x268>)
 8015550:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8015554:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8015556:	4b23      	ldr	r3, [pc, #140]	; (80155e4 <HAL_DCMI_MspInit+0x268>)
 8015558:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801555c:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 801555e:	4b21      	ldr	r3, [pc, #132]	; (80155e4 <HAL_DCMI_MspInit+0x268>)
 8015560:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8015564:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 8015566:	4b1f      	ldr	r3, [pc, #124]	; (80155e4 <HAL_DCMI_MspInit+0x268>)
 8015568:	f44f 7280 	mov.w	r2, #256	; 0x100
 801556c:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 801556e:	4b1d      	ldr	r3, [pc, #116]	; (80155e4 <HAL_DCMI_MspInit+0x268>)
 8015570:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8015574:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8015576:	4b1b      	ldr	r3, [pc, #108]	; (80155e4 <HAL_DCMI_MspInit+0x268>)
 8015578:	2204      	movs	r2, #4
 801557a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 801557c:	4b19      	ldr	r3, [pc, #100]	; (80155e4 <HAL_DCMI_MspInit+0x268>)
 801557e:	2203      	movs	r2, #3
 8015580:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_dcmi.Init.MemBurst = DMA_MBURST_SINGLE;
 8015582:	4b18      	ldr	r3, [pc, #96]	; (80155e4 <HAL_DCMI_MspInit+0x268>)
 8015584:	2200      	movs	r2, #0
 8015586:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8015588:	4b16      	ldr	r3, [pc, #88]	; (80155e4 <HAL_DCMI_MspInit+0x268>)
 801558a:	2200      	movs	r2, #0
 801558c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 801558e:	4815      	ldr	r0, [pc, #84]	; (80155e4 <HAL_DCMI_MspInit+0x268>)
 8015590:	f001 f876 	bl	8016680 <HAL_DMA_Init>
 8015594:	4603      	mov	r3, r0
 8015596:	2b00      	cmp	r3, #0
 8015598:	d001      	beq.n	801559e <HAL_DCMI_MspInit+0x222>
    {
      Error_Handler();
 801559a:	f7ff fecf 	bl	801533c <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 801559e:	687b      	ldr	r3, [r7, #4]
 80155a0:	4a10      	ldr	r2, [pc, #64]	; (80155e4 <HAL_DCMI_MspInit+0x268>)
 80155a2:	649a      	str	r2, [r3, #72]	; 0x48
 80155a4:	4a0f      	ldr	r2, [pc, #60]	; (80155e4 <HAL_DCMI_MspInit+0x268>)
 80155a6:	687b      	ldr	r3, [r7, #4]
 80155a8:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 80155aa:	2200      	movs	r2, #0
 80155ac:	2100      	movs	r1, #0
 80155ae:	204e      	movs	r0, #78	; 0x4e
 80155b0:	f000 fda5 	bl	80160fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 80155b4:	204e      	movs	r0, #78	; 0x4e
 80155b6:	f000 fdbc 	bl	8016132 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 80155ba:	bf00      	nop
 80155bc:	3738      	adds	r7, #56	; 0x38
 80155be:	46bd      	mov	sp, r7
 80155c0:	bd80      	pop	{r7, pc}
 80155c2:	bf00      	nop
 80155c4:	48020000 	.word	0x48020000
 80155c8:	58024400 	.word	0x58024400
 80155cc:	58021800 	.word	0x58021800
 80155d0:	58020c00 	.word	0x58020c00
 80155d4:	58020400 	.word	0x58020400
 80155d8:	58021000 	.word	0x58021000
 80155dc:	58020800 	.word	0x58020800
 80155e0:	58020000 	.word	0x58020000
 80155e4:	2404ed80 	.word	0x2404ed80
 80155e8:	40020010 	.word	0x40020010

080155ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80155ec:	b580      	push	{r7, lr}
 80155ee:	b0ba      	sub	sp, #232	; 0xe8
 80155f0:	af00      	add	r7, sp, #0
 80155f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80155f4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80155f8:	2200      	movs	r2, #0
 80155fa:	601a      	str	r2, [r3, #0]
 80155fc:	605a      	str	r2, [r3, #4]
 80155fe:	609a      	str	r2, [r3, #8]
 8015600:	60da      	str	r2, [r3, #12]
 8015602:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8015604:	f107 0310 	add.w	r3, r7, #16
 8015608:	22c0      	movs	r2, #192	; 0xc0
 801560a:	2100      	movs	r1, #0
 801560c:	4618      	mov	r0, r3
 801560e:	f00a ffed 	bl	80205ec <memset>
  if(hi2c->Instance==I2C2)
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	681b      	ldr	r3, [r3, #0]
 8015616:	4a27      	ldr	r2, [pc, #156]	; (80156b4 <HAL_I2C_MspInit+0xc8>)
 8015618:	4293      	cmp	r3, r2
 801561a:	d147      	bne.n	80156ac <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 801561c:	f04f 0208 	mov.w	r2, #8
 8015620:	f04f 0300 	mov.w	r3, #0
 8015624:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_HSI;
 8015628:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801562c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8015630:	f107 0310 	add.w	r3, r7, #16
 8015634:	4618      	mov	r0, r3
 8015636:	f006 f913 	bl	801b860 <HAL_RCCEx_PeriphCLKConfig>
 801563a:	4603      	mov	r3, r0
 801563c:	2b00      	cmp	r3, #0
 801563e:	d001      	beq.n	8015644 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 8015640:	f7ff fe7c 	bl	801533c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8015644:	4b1c      	ldr	r3, [pc, #112]	; (80156b8 <HAL_I2C_MspInit+0xcc>)
 8015646:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801564a:	4a1b      	ldr	r2, [pc, #108]	; (80156b8 <HAL_I2C_MspInit+0xcc>)
 801564c:	f043 0302 	orr.w	r3, r3, #2
 8015650:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8015654:	4b18      	ldr	r3, [pc, #96]	; (80156b8 <HAL_I2C_MspInit+0xcc>)
 8015656:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801565a:	f003 0302 	and.w	r3, r3, #2
 801565e:	60fb      	str	r3, [r7, #12]
 8015660:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8015662:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8015666:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 801566a:	2312      	movs	r3, #18
 801566c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015670:	2300      	movs	r3, #0
 8015672:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015676:	2300      	movs	r3, #0
 8015678:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 801567c:	2304      	movs	r3, #4
 801567e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8015682:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8015686:	4619      	mov	r1, r3
 8015688:	480c      	ldr	r0, [pc, #48]	; (80156bc <HAL_I2C_MspInit+0xd0>)
 801568a:	f003 ffd3 	bl	8019634 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 801568e:	4b0a      	ldr	r3, [pc, #40]	; (80156b8 <HAL_I2C_MspInit+0xcc>)
 8015690:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8015694:	4a08      	ldr	r2, [pc, #32]	; (80156b8 <HAL_I2C_MspInit+0xcc>)
 8015696:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 801569a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 801569e:	4b06      	ldr	r3, [pc, #24]	; (80156b8 <HAL_I2C_MspInit+0xcc>)
 80156a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80156a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80156a8:	60bb      	str	r3, [r7, #8]
 80156aa:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80156ac:	bf00      	nop
 80156ae:	37e8      	adds	r7, #232	; 0xe8
 80156b0:	46bd      	mov	sp, r7
 80156b2:	bd80      	pop	{r7, pc}
 80156b4:	40005800 	.word	0x40005800
 80156b8:	58024400 	.word	0x58024400
 80156bc:	58020400 	.word	0x58020400

080156c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80156c0:	b580      	push	{r7, lr}
 80156c2:	b0bc      	sub	sp, #240	; 0xf0
 80156c4:	af00      	add	r7, sp, #0
 80156c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80156c8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80156cc:	2200      	movs	r2, #0
 80156ce:	601a      	str	r2, [r3, #0]
 80156d0:	605a      	str	r2, [r3, #4]
 80156d2:	609a      	str	r2, [r3, #8]
 80156d4:	60da      	str	r2, [r3, #12]
 80156d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80156d8:	f107 0318 	add.w	r3, r7, #24
 80156dc:	22c0      	movs	r2, #192	; 0xc0
 80156de:	2100      	movs	r1, #0
 80156e0:	4618      	mov	r0, r3
 80156e2:	f00a ff83 	bl	80205ec <memset>
  if(hspi->Instance==SPI2)
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	681b      	ldr	r3, [r3, #0]
 80156ea:	4a7a      	ldr	r2, [pc, #488]	; (80158d4 <HAL_SPI_MspInit+0x214>)
 80156ec:	4293      	cmp	r3, r2
 80156ee:	f040 80ec 	bne.w	80158ca <HAL_SPI_MspInit+0x20a>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80156f2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80156f6:	f04f 0300 	mov.w	r3, #0
 80156fa:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 5;
 80156fe:	2305      	movs	r3, #5
 8015700:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 160;
 8015702:	23a0      	movs	r3, #160	; 0xa0
 8015704:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 5;
 8015706:	2305      	movs	r3, #5
 8015708:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 6;
 801570a:	2306      	movs	r3, #6
 801570c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 128;
 801570e:	2380      	movs	r3, #128	; 0x80
 8015710:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8015712:	2380      	movs	r3, #128	; 0x80
 8015714:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8015716:	2300      	movs	r3, #0
 8015718:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 801571a:	2300      	movs	r3, #0
 801571c:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 801571e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8015722:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8015724:	f107 0318 	add.w	r3, r7, #24
 8015728:	4618      	mov	r0, r3
 801572a:	f006 f899 	bl	801b860 <HAL_RCCEx_PeriphCLKConfig>
 801572e:	4603      	mov	r3, r0
 8015730:	2b00      	cmp	r3, #0
 8015732:	d001      	beq.n	8015738 <HAL_SPI_MspInit+0x78>
    {
      Error_Handler();
 8015734:	f7ff fe02 	bl	801533c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8015738:	4b67      	ldr	r3, [pc, #412]	; (80158d8 <HAL_SPI_MspInit+0x218>)
 801573a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 801573e:	4a66      	ldr	r2, [pc, #408]	; (80158d8 <HAL_SPI_MspInit+0x218>)
 8015740:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8015744:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8015748:	4b63      	ldr	r3, [pc, #396]	; (80158d8 <HAL_SPI_MspInit+0x218>)
 801574a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 801574e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015752:	617b      	str	r3, [r7, #20]
 8015754:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015756:	4b60      	ldr	r3, [pc, #384]	; (80158d8 <HAL_SPI_MspInit+0x218>)
 8015758:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801575c:	4a5e      	ldr	r2, [pc, #376]	; (80158d8 <HAL_SPI_MspInit+0x218>)
 801575e:	f043 0301 	orr.w	r3, r3, #1
 8015762:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8015766:	4b5c      	ldr	r3, [pc, #368]	; (80158d8 <HAL_SPI_MspInit+0x218>)
 8015768:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801576c:	f003 0301 	and.w	r3, r3, #1
 8015770:	613b      	str	r3, [r7, #16]
 8015772:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8015774:	4b58      	ldr	r3, [pc, #352]	; (80158d8 <HAL_SPI_MspInit+0x218>)
 8015776:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801577a:	4a57      	ldr	r2, [pc, #348]	; (80158d8 <HAL_SPI_MspInit+0x218>)
 801577c:	f043 0304 	orr.w	r3, r3, #4
 8015780:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8015784:	4b54      	ldr	r3, [pc, #336]	; (80158d8 <HAL_SPI_MspInit+0x218>)
 8015786:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801578a:	f003 0304 	and.w	r3, r3, #4
 801578e:	60fb      	str	r3, [r7, #12]
 8015790:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8015792:	4b51      	ldr	r3, [pc, #324]	; (80158d8 <HAL_SPI_MspInit+0x218>)
 8015794:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8015798:	4a4f      	ldr	r2, [pc, #316]	; (80158d8 <HAL_SPI_MspInit+0x218>)
 801579a:	f043 0302 	orr.w	r3, r3, #2
 801579e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80157a2:	4b4d      	ldr	r3, [pc, #308]	; (80158d8 <HAL_SPI_MspInit+0x218>)
 80157a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80157a8:	f003 0302 	and.w	r3, r3, #2
 80157ac:	60bb      	str	r3, [r7, #8]
 80157ae:	68bb      	ldr	r3, [r7, #8]
    PA9     ------> SPI2_SCK
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB12     ------> SPI2_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80157b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80157b4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80157b8:	2302      	movs	r3, #2
 80157ba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80157be:	2300      	movs	r3, #0
 80157c0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80157c4:	2303      	movs	r3, #3
 80157c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80157ca:	2305      	movs	r3, #5
 80157cc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80157d0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80157d4:	4619      	mov	r1, r3
 80157d6:	4841      	ldr	r0, [pc, #260]	; (80158dc <HAL_SPI_MspInit+0x21c>)
 80157d8:	f003 ff2c 	bl	8019634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80157dc:	2304      	movs	r3, #4
 80157de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80157e2:	2302      	movs	r3, #2
 80157e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80157e8:	2300      	movs	r3, #0
 80157ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80157ee:	2300      	movs	r3, #0
 80157f0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80157f4:	2305      	movs	r3, #5
 80157f6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80157fa:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80157fe:	4619      	mov	r1, r3
 8015800:	4837      	ldr	r0, [pc, #220]	; (80158e0 <HAL_SPI_MspInit+0x220>)
 8015802:	f003 ff17 	bl	8019634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8015806:	2308      	movs	r3, #8
 8015808:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801580c:	2302      	movs	r3, #2
 801580e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015812:	2300      	movs	r3, #0
 8015814:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015818:	2303      	movs	r3, #3
 801581a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 801581e:	2305      	movs	r3, #5
 8015820:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8015824:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8015828:	4619      	mov	r1, r3
 801582a:	482d      	ldr	r0, [pc, #180]	; (80158e0 <HAL_SPI_MspInit+0x220>)
 801582c:	f003 ff02 	bl	8019634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8015830:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8015834:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015838:	2302      	movs	r3, #2
 801583a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801583e:	2300      	movs	r3, #0
 8015840:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015844:	2303      	movs	r3, #3
 8015846:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 801584a:	2305      	movs	r3, #5
 801584c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8015850:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8015854:	4619      	mov	r1, r3
 8015856:	4823      	ldr	r0, [pc, #140]	; (80158e4 <HAL_SPI_MspInit+0x224>)
 8015858:	f003 feec 	bl	8019634 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream1;
 801585c:	4b22      	ldr	r3, [pc, #136]	; (80158e8 <HAL_SPI_MspInit+0x228>)
 801585e:	4a23      	ldr	r2, [pc, #140]	; (80158ec <HAL_SPI_MspInit+0x22c>)
 8015860:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8015862:	4b21      	ldr	r3, [pc, #132]	; (80158e8 <HAL_SPI_MspInit+0x228>)
 8015864:	2228      	movs	r2, #40	; 0x28
 8015866:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8015868:	4b1f      	ldr	r3, [pc, #124]	; (80158e8 <HAL_SPI_MspInit+0x228>)
 801586a:	2240      	movs	r2, #64	; 0x40
 801586c:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 801586e:	4b1e      	ldr	r3, [pc, #120]	; (80158e8 <HAL_SPI_MspInit+0x228>)
 8015870:	2200      	movs	r2, #0
 8015872:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8015874:	4b1c      	ldr	r3, [pc, #112]	; (80158e8 <HAL_SPI_MspInit+0x228>)
 8015876:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801587a:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 801587c:	4b1a      	ldr	r3, [pc, #104]	; (80158e8 <HAL_SPI_MspInit+0x228>)
 801587e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015882:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8015884:	4b18      	ldr	r3, [pc, #96]	; (80158e8 <HAL_SPI_MspInit+0x228>)
 8015886:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801588a:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 801588c:	4b16      	ldr	r3, [pc, #88]	; (80158e8 <HAL_SPI_MspInit+0x228>)
 801588e:	2200      	movs	r2, #0
 8015890:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8015892:	4b15      	ldr	r3, [pc, #84]	; (80158e8 <HAL_SPI_MspInit+0x228>)
 8015894:	2200      	movs	r2, #0
 8015896:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8015898:	4b13      	ldr	r3, [pc, #76]	; (80158e8 <HAL_SPI_MspInit+0x228>)
 801589a:	2200      	movs	r2, #0
 801589c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 801589e:	4812      	ldr	r0, [pc, #72]	; (80158e8 <HAL_SPI_MspInit+0x228>)
 80158a0:	f000 feee 	bl	8016680 <HAL_DMA_Init>
 80158a4:	4603      	mov	r3, r0
 80158a6:	2b00      	cmp	r3, #0
 80158a8:	d001      	beq.n	80158ae <HAL_SPI_MspInit+0x1ee>
    {
      Error_Handler();
 80158aa:	f7ff fd47 	bl	801533c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80158ae:	687b      	ldr	r3, [r7, #4]
 80158b0:	4a0d      	ldr	r2, [pc, #52]	; (80158e8 <HAL_SPI_MspInit+0x228>)
 80158b2:	679a      	str	r2, [r3, #120]	; 0x78
 80158b4:	4a0c      	ldr	r2, [pc, #48]	; (80158e8 <HAL_SPI_MspInit+0x228>)
 80158b6:	687b      	ldr	r3, [r7, #4]
 80158b8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80158ba:	2200      	movs	r2, #0
 80158bc:	2100      	movs	r1, #0
 80158be:	2024      	movs	r0, #36	; 0x24
 80158c0:	f000 fc1d 	bl	80160fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80158c4:	2024      	movs	r0, #36	; 0x24
 80158c6:	f000 fc34 	bl	8016132 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80158ca:	bf00      	nop
 80158cc:	37f0      	adds	r7, #240	; 0xf0
 80158ce:	46bd      	mov	sp, r7
 80158d0:	bd80      	pop	{r7, pc}
 80158d2:	bf00      	nop
 80158d4:	40003800 	.word	0x40003800
 80158d8:	58024400 	.word	0x58024400
 80158dc:	58020000 	.word	0x58020000
 80158e0:	58020800 	.word	0x58020800
 80158e4:	58020400 	.word	0x58020400
 80158e8:	2404eed4 	.word	0x2404eed4
 80158ec:	40020028 	.word	0x40020028

080158f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80158f0:	b580      	push	{r7, lr}
 80158f2:	b0bc      	sub	sp, #240	; 0xf0
 80158f4:	af00      	add	r7, sp, #0
 80158f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80158f8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80158fc:	2200      	movs	r2, #0
 80158fe:	601a      	str	r2, [r3, #0]
 8015900:	605a      	str	r2, [r3, #4]
 8015902:	609a      	str	r2, [r3, #8]
 8015904:	60da      	str	r2, [r3, #12]
 8015906:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8015908:	f107 0318 	add.w	r3, r7, #24
 801590c:	22c0      	movs	r2, #192	; 0xc0
 801590e:	2100      	movs	r1, #0
 8015910:	4618      	mov	r0, r3
 8015912:	f00a fe6b 	bl	80205ec <memset>
  if(huart->Instance==USART1)
 8015916:	687b      	ldr	r3, [r7, #4]
 8015918:	681b      	ldr	r3, [r3, #0]
 801591a:	4a39      	ldr	r2, [pc, #228]	; (8015a00 <HAL_UART_MspInit+0x110>)
 801591c:	4293      	cmp	r3, r2
 801591e:	d16a      	bne.n	80159f6 <HAL_UART_MspInit+0x106>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8015920:	f04f 0201 	mov.w	r2, #1
 8015924:	f04f 0300 	mov.w	r3, #0
 8015928:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 801592c:	2300      	movs	r3, #0
 801592e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8015932:	f107 0318 	add.w	r3, r7, #24
 8015936:	4618      	mov	r0, r3
 8015938:	f005 ff92 	bl	801b860 <HAL_RCCEx_PeriphCLKConfig>
 801593c:	4603      	mov	r3, r0
 801593e:	2b00      	cmp	r3, #0
 8015940:	d001      	beq.n	8015946 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8015942:	f7ff fcfb 	bl	801533c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8015946:	4b2f      	ldr	r3, [pc, #188]	; (8015a04 <HAL_UART_MspInit+0x114>)
 8015948:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 801594c:	4a2d      	ldr	r2, [pc, #180]	; (8015a04 <HAL_UART_MspInit+0x114>)
 801594e:	f043 0310 	orr.w	r3, r3, #16
 8015952:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8015956:	4b2b      	ldr	r3, [pc, #172]	; (8015a04 <HAL_UART_MspInit+0x114>)
 8015958:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 801595c:	f003 0310 	and.w	r3, r3, #16
 8015960:	617b      	str	r3, [r7, #20]
 8015962:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8015964:	4b27      	ldr	r3, [pc, #156]	; (8015a04 <HAL_UART_MspInit+0x114>)
 8015966:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801596a:	4a26      	ldr	r2, [pc, #152]	; (8015a04 <HAL_UART_MspInit+0x114>)
 801596c:	f043 0302 	orr.w	r3, r3, #2
 8015970:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8015974:	4b23      	ldr	r3, [pc, #140]	; (8015a04 <HAL_UART_MspInit+0x114>)
 8015976:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801597a:	f003 0302 	and.w	r3, r3, #2
 801597e:	613b      	str	r3, [r7, #16]
 8015980:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015982:	4b20      	ldr	r3, [pc, #128]	; (8015a04 <HAL_UART_MspInit+0x114>)
 8015984:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8015988:	4a1e      	ldr	r2, [pc, #120]	; (8015a04 <HAL_UART_MspInit+0x114>)
 801598a:	f043 0301 	orr.w	r3, r3, #1
 801598e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8015992:	4b1c      	ldr	r3, [pc, #112]	; (8015a04 <HAL_UART_MspInit+0x114>)
 8015994:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8015998:	f003 0301 	and.w	r3, r3, #1
 801599c:	60fb      	str	r3, [r7, #12]
 801599e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80159a0:	2340      	movs	r3, #64	; 0x40
 80159a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80159a6:	2302      	movs	r3, #2
 80159a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80159ac:	2300      	movs	r3, #0
 80159ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80159b2:	2300      	movs	r3, #0
 80159b4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80159b8:	2307      	movs	r3, #7
 80159ba:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80159be:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80159c2:	4619      	mov	r1, r3
 80159c4:	4810      	ldr	r0, [pc, #64]	; (8015a08 <HAL_UART_MspInit+0x118>)
 80159c6:	f003 fe35 	bl	8019634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80159ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80159ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80159d2:	2302      	movs	r3, #2
 80159d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80159d8:	2300      	movs	r3, #0
 80159da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80159de:	2300      	movs	r3, #0
 80159e0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80159e4:	2307      	movs	r3, #7
 80159e6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80159ea:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80159ee:	4619      	mov	r1, r3
 80159f0:	4806      	ldr	r0, [pc, #24]	; (8015a0c <HAL_UART_MspInit+0x11c>)
 80159f2:	f003 fe1f 	bl	8019634 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80159f6:	bf00      	nop
 80159f8:	37f0      	adds	r7, #240	; 0xf0
 80159fa:	46bd      	mov	sp, r7
 80159fc:	bd80      	pop	{r7, pc}
 80159fe:	bf00      	nop
 8015a00:	40011000 	.word	0x40011000
 8015a04:	58024400 	.word	0x58024400
 8015a08:	58020400 	.word	0x58020400
 8015a0c:	58020000 	.word	0x58020000

08015a10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8015a10:	b480      	push	{r7}
 8015a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8015a14:	e7fe      	b.n	8015a14 <NMI_Handler+0x4>

08015a16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8015a16:	b480      	push	{r7}
 8015a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8015a1a:	e7fe      	b.n	8015a1a <HardFault_Handler+0x4>

08015a1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8015a1c:	b480      	push	{r7}
 8015a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8015a20:	e7fe      	b.n	8015a20 <MemManage_Handler+0x4>

08015a22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8015a22:	b480      	push	{r7}
 8015a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8015a26:	e7fe      	b.n	8015a26 <BusFault_Handler+0x4>

08015a28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8015a28:	b480      	push	{r7}
 8015a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8015a2c:	e7fe      	b.n	8015a2c <UsageFault_Handler+0x4>

08015a2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8015a2e:	b480      	push	{r7}
 8015a30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8015a32:	bf00      	nop
 8015a34:	46bd      	mov	sp, r7
 8015a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a3a:	4770      	bx	lr

08015a3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8015a3c:	b480      	push	{r7}
 8015a3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8015a40:	bf00      	nop
 8015a42:	46bd      	mov	sp, r7
 8015a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a48:	4770      	bx	lr

08015a4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8015a4a:	b480      	push	{r7}
 8015a4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8015a4e:	bf00      	nop
 8015a50:	46bd      	mov	sp, r7
 8015a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a56:	4770      	bx	lr

08015a58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8015a58:	b580      	push	{r7, lr}
 8015a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8015a5c:	f000 fa24 	bl	8015ea8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8015a60:	bf00      	nop
 8015a62:	bd80      	pop	{r7, pc}

08015a64 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8015a64:	b580      	push	{r7, lr}
 8015a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8015a68:	2010      	movs	r0, #16
 8015a6a:	f003 ffac 	bl	80199c6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8015a6e:	bf00      	nop
 8015a70:	bd80      	pop	{r7, pc}
	...

08015a74 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8015a74:	b580      	push	{r7, lr}
 8015a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8015a78:	4802      	ldr	r0, [pc, #8]	; (8015a84 <DMA1_Stream0_IRQHandler+0x10>)
 8015a7a:	f001 fe0d 	bl	8017698 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8015a7e:	bf00      	nop
 8015a80:	bd80      	pop	{r7, pc}
 8015a82:	bf00      	nop
 8015a84:	2404ed80 	.word	0x2404ed80

08015a88 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8015a88:	b580      	push	{r7, lr}
 8015a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8015a8c:	4802      	ldr	r0, [pc, #8]	; (8015a98 <DMA1_Stream1_IRQHandler+0x10>)
 8015a8e:	f001 fe03 	bl	8017698 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8015a92:	bf00      	nop
 8015a94:	bd80      	pop	{r7, pc}
 8015a96:	bf00      	nop
 8015a98:	2404eed4 	.word	0x2404eed4

08015a9c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8015a9c:	b580      	push	{r7, lr}
 8015a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8015aa0:	2040      	movs	r0, #64	; 0x40
 8015aa2:	f003 ff90 	bl	80199c6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8015aa6:	bf00      	nop
 8015aa8:	bd80      	pop	{r7, pc}
	...

08015aac <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8015aac:	b580      	push	{r7, lr}
 8015aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8015ab0:	4802      	ldr	r0, [pc, #8]	; (8015abc <SPI2_IRQHandler+0x10>)
 8015ab2:	f008 f975 	bl	801dda0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8015ab6:	bf00      	nop
 8015ab8:	bd80      	pop	{r7, pc}
 8015aba:	bf00      	nop
 8015abc:	2404ee4c 	.word	0x2404ee4c

08015ac0 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8015ac0:	b580      	push	{r7, lr}
 8015ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8015ac4:	4802      	ldr	r0, [pc, #8]	; (8015ad0 <DCMI_IRQHandler+0x10>)
 8015ac6:	f000 fc8b 	bl	80163e0 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 8015aca:	bf00      	nop
 8015acc:	bd80      	pop	{r7, pc}
 8015ace:	bf00      	nop
 8015ad0:	2404ed30 	.word	0x2404ed30

08015ad4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8015ad4:	b480      	push	{r7}
 8015ad6:	af00      	add	r7, sp, #0
  return 1;
 8015ad8:	2301      	movs	r3, #1
}
 8015ada:	4618      	mov	r0, r3
 8015adc:	46bd      	mov	sp, r7
 8015ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ae2:	4770      	bx	lr

08015ae4 <_kill>:

int _kill(int pid, int sig)
{
 8015ae4:	b580      	push	{r7, lr}
 8015ae6:	b082      	sub	sp, #8
 8015ae8:	af00      	add	r7, sp, #0
 8015aea:	6078      	str	r0, [r7, #4]
 8015aec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8015aee:	f00a fe31 	bl	8020754 <__errno>
 8015af2:	4603      	mov	r3, r0
 8015af4:	2216      	movs	r2, #22
 8015af6:	601a      	str	r2, [r3, #0]
  return -1;
 8015af8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015afc:	4618      	mov	r0, r3
 8015afe:	3708      	adds	r7, #8
 8015b00:	46bd      	mov	sp, r7
 8015b02:	bd80      	pop	{r7, pc}

08015b04 <_exit>:

void _exit (int status)
{
 8015b04:	b580      	push	{r7, lr}
 8015b06:	b082      	sub	sp, #8
 8015b08:	af00      	add	r7, sp, #0
 8015b0a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8015b0c:	f04f 31ff 	mov.w	r1, #4294967295
 8015b10:	6878      	ldr	r0, [r7, #4]
 8015b12:	f7ff ffe7 	bl	8015ae4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8015b16:	e7fe      	b.n	8015b16 <_exit+0x12>

08015b18 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8015b18:	b580      	push	{r7, lr}
 8015b1a:	b086      	sub	sp, #24
 8015b1c:	af00      	add	r7, sp, #0
 8015b1e:	60f8      	str	r0, [r7, #12]
 8015b20:	60b9      	str	r1, [r7, #8]
 8015b22:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8015b24:	2300      	movs	r3, #0
 8015b26:	617b      	str	r3, [r7, #20]
 8015b28:	e00a      	b.n	8015b40 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8015b2a:	f3af 8000 	nop.w
 8015b2e:	4601      	mov	r1, r0
 8015b30:	68bb      	ldr	r3, [r7, #8]
 8015b32:	1c5a      	adds	r2, r3, #1
 8015b34:	60ba      	str	r2, [r7, #8]
 8015b36:	b2ca      	uxtb	r2, r1
 8015b38:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8015b3a:	697b      	ldr	r3, [r7, #20]
 8015b3c:	3301      	adds	r3, #1
 8015b3e:	617b      	str	r3, [r7, #20]
 8015b40:	697a      	ldr	r2, [r7, #20]
 8015b42:	687b      	ldr	r3, [r7, #4]
 8015b44:	429a      	cmp	r2, r3
 8015b46:	dbf0      	blt.n	8015b2a <_read+0x12>
  }

  return len;
 8015b48:	687b      	ldr	r3, [r7, #4]
}
 8015b4a:	4618      	mov	r0, r3
 8015b4c:	3718      	adds	r7, #24
 8015b4e:	46bd      	mov	sp, r7
 8015b50:	bd80      	pop	{r7, pc}

08015b52 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8015b52:	b580      	push	{r7, lr}
 8015b54:	b086      	sub	sp, #24
 8015b56:	af00      	add	r7, sp, #0
 8015b58:	60f8      	str	r0, [r7, #12]
 8015b5a:	60b9      	str	r1, [r7, #8]
 8015b5c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8015b5e:	2300      	movs	r3, #0
 8015b60:	617b      	str	r3, [r7, #20]
 8015b62:	e009      	b.n	8015b78 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8015b64:	68bb      	ldr	r3, [r7, #8]
 8015b66:	1c5a      	adds	r2, r3, #1
 8015b68:	60ba      	str	r2, [r7, #8]
 8015b6a:	781b      	ldrb	r3, [r3, #0]
 8015b6c:	4618      	mov	r0, r3
 8015b6e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8015b72:	697b      	ldr	r3, [r7, #20]
 8015b74:	3301      	adds	r3, #1
 8015b76:	617b      	str	r3, [r7, #20]
 8015b78:	697a      	ldr	r2, [r7, #20]
 8015b7a:	687b      	ldr	r3, [r7, #4]
 8015b7c:	429a      	cmp	r2, r3
 8015b7e:	dbf1      	blt.n	8015b64 <_write+0x12>
  }
  return len;
 8015b80:	687b      	ldr	r3, [r7, #4]
}
 8015b82:	4618      	mov	r0, r3
 8015b84:	3718      	adds	r7, #24
 8015b86:	46bd      	mov	sp, r7
 8015b88:	bd80      	pop	{r7, pc}

08015b8a <_close>:

int _close(int file)
{
 8015b8a:	b480      	push	{r7}
 8015b8c:	b083      	sub	sp, #12
 8015b8e:	af00      	add	r7, sp, #0
 8015b90:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8015b92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015b96:	4618      	mov	r0, r3
 8015b98:	370c      	adds	r7, #12
 8015b9a:	46bd      	mov	sp, r7
 8015b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ba0:	4770      	bx	lr

08015ba2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8015ba2:	b480      	push	{r7}
 8015ba4:	b083      	sub	sp, #12
 8015ba6:	af00      	add	r7, sp, #0
 8015ba8:	6078      	str	r0, [r7, #4]
 8015baa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8015bac:	683b      	ldr	r3, [r7, #0]
 8015bae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8015bb2:	605a      	str	r2, [r3, #4]
  return 0;
 8015bb4:	2300      	movs	r3, #0
}
 8015bb6:	4618      	mov	r0, r3
 8015bb8:	370c      	adds	r7, #12
 8015bba:	46bd      	mov	sp, r7
 8015bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bc0:	4770      	bx	lr

08015bc2 <_isatty>:

int _isatty(int file)
{
 8015bc2:	b480      	push	{r7}
 8015bc4:	b083      	sub	sp, #12
 8015bc6:	af00      	add	r7, sp, #0
 8015bc8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8015bca:	2301      	movs	r3, #1
}
 8015bcc:	4618      	mov	r0, r3
 8015bce:	370c      	adds	r7, #12
 8015bd0:	46bd      	mov	sp, r7
 8015bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bd6:	4770      	bx	lr

08015bd8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8015bd8:	b480      	push	{r7}
 8015bda:	b085      	sub	sp, #20
 8015bdc:	af00      	add	r7, sp, #0
 8015bde:	60f8      	str	r0, [r7, #12]
 8015be0:	60b9      	str	r1, [r7, #8]
 8015be2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8015be4:	2300      	movs	r3, #0
}
 8015be6:	4618      	mov	r0, r3
 8015be8:	3714      	adds	r7, #20
 8015bea:	46bd      	mov	sp, r7
 8015bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bf0:	4770      	bx	lr
	...

08015bf4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8015bf4:	b580      	push	{r7, lr}
 8015bf6:	b086      	sub	sp, #24
 8015bf8:	af00      	add	r7, sp, #0
 8015bfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8015bfc:	4a14      	ldr	r2, [pc, #80]	; (8015c50 <_sbrk+0x5c>)
 8015bfe:	4b15      	ldr	r3, [pc, #84]	; (8015c54 <_sbrk+0x60>)
 8015c00:	1ad3      	subs	r3, r2, r3
 8015c02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8015c04:	697b      	ldr	r3, [r7, #20]
 8015c06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8015c08:	4b13      	ldr	r3, [pc, #76]	; (8015c58 <_sbrk+0x64>)
 8015c0a:	681b      	ldr	r3, [r3, #0]
 8015c0c:	2b00      	cmp	r3, #0
 8015c0e:	d102      	bne.n	8015c16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8015c10:	4b11      	ldr	r3, [pc, #68]	; (8015c58 <_sbrk+0x64>)
 8015c12:	4a12      	ldr	r2, [pc, #72]	; (8015c5c <_sbrk+0x68>)
 8015c14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8015c16:	4b10      	ldr	r3, [pc, #64]	; (8015c58 <_sbrk+0x64>)
 8015c18:	681a      	ldr	r2, [r3, #0]
 8015c1a:	687b      	ldr	r3, [r7, #4]
 8015c1c:	4413      	add	r3, r2
 8015c1e:	693a      	ldr	r2, [r7, #16]
 8015c20:	429a      	cmp	r2, r3
 8015c22:	d207      	bcs.n	8015c34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8015c24:	f00a fd96 	bl	8020754 <__errno>
 8015c28:	4603      	mov	r3, r0
 8015c2a:	220c      	movs	r2, #12
 8015c2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8015c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8015c32:	e009      	b.n	8015c48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8015c34:	4b08      	ldr	r3, [pc, #32]	; (8015c58 <_sbrk+0x64>)
 8015c36:	681b      	ldr	r3, [r3, #0]
 8015c38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8015c3a:	4b07      	ldr	r3, [pc, #28]	; (8015c58 <_sbrk+0x64>)
 8015c3c:	681a      	ldr	r2, [r3, #0]
 8015c3e:	687b      	ldr	r3, [r7, #4]
 8015c40:	4413      	add	r3, r2
 8015c42:	4a05      	ldr	r2, [pc, #20]	; (8015c58 <_sbrk+0x64>)
 8015c44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8015c46:	68fb      	ldr	r3, [r7, #12]
}
 8015c48:	4618      	mov	r0, r3
 8015c4a:	3718      	adds	r7, #24
 8015c4c:	46bd      	mov	sp, r7
 8015c4e:	bd80      	pop	{r7, pc}
 8015c50:	24080000 	.word	0x24080000
 8015c54:	00000400 	.word	0x00000400
 8015c58:	2404efe0 	.word	0x2404efe0
 8015c5c:	2404f1c8 	.word	0x2404f1c8

08015c60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8015c60:	b480      	push	{r7}
 8015c62:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8015c64:	4b37      	ldr	r3, [pc, #220]	; (8015d44 <SystemInit+0xe4>)
 8015c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015c6a:	4a36      	ldr	r2, [pc, #216]	; (8015d44 <SystemInit+0xe4>)
 8015c6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8015c70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8015c74:	4b34      	ldr	r3, [pc, #208]	; (8015d48 <SystemInit+0xe8>)
 8015c76:	681b      	ldr	r3, [r3, #0]
 8015c78:	f003 030f 	and.w	r3, r3, #15
 8015c7c:	2b06      	cmp	r3, #6
 8015c7e:	d807      	bhi.n	8015c90 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8015c80:	4b31      	ldr	r3, [pc, #196]	; (8015d48 <SystemInit+0xe8>)
 8015c82:	681b      	ldr	r3, [r3, #0]
 8015c84:	f023 030f 	bic.w	r3, r3, #15
 8015c88:	4a2f      	ldr	r2, [pc, #188]	; (8015d48 <SystemInit+0xe8>)
 8015c8a:	f043 0307 	orr.w	r3, r3, #7
 8015c8e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8015c90:	4b2e      	ldr	r3, [pc, #184]	; (8015d4c <SystemInit+0xec>)
 8015c92:	681b      	ldr	r3, [r3, #0]
 8015c94:	4a2d      	ldr	r2, [pc, #180]	; (8015d4c <SystemInit+0xec>)
 8015c96:	f043 0301 	orr.w	r3, r3, #1
 8015c9a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8015c9c:	4b2b      	ldr	r3, [pc, #172]	; (8015d4c <SystemInit+0xec>)
 8015c9e:	2200      	movs	r2, #0
 8015ca0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8015ca2:	4b2a      	ldr	r3, [pc, #168]	; (8015d4c <SystemInit+0xec>)
 8015ca4:	681a      	ldr	r2, [r3, #0]
 8015ca6:	4929      	ldr	r1, [pc, #164]	; (8015d4c <SystemInit+0xec>)
 8015ca8:	4b29      	ldr	r3, [pc, #164]	; (8015d50 <SystemInit+0xf0>)
 8015caa:	4013      	ands	r3, r2
 8015cac:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8015cae:	4b26      	ldr	r3, [pc, #152]	; (8015d48 <SystemInit+0xe8>)
 8015cb0:	681b      	ldr	r3, [r3, #0]
 8015cb2:	f003 0308 	and.w	r3, r3, #8
 8015cb6:	2b00      	cmp	r3, #0
 8015cb8:	d007      	beq.n	8015cca <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8015cba:	4b23      	ldr	r3, [pc, #140]	; (8015d48 <SystemInit+0xe8>)
 8015cbc:	681b      	ldr	r3, [r3, #0]
 8015cbe:	f023 030f 	bic.w	r3, r3, #15
 8015cc2:	4a21      	ldr	r2, [pc, #132]	; (8015d48 <SystemInit+0xe8>)
 8015cc4:	f043 0307 	orr.w	r3, r3, #7
 8015cc8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8015cca:	4b20      	ldr	r3, [pc, #128]	; (8015d4c <SystemInit+0xec>)
 8015ccc:	2200      	movs	r2, #0
 8015cce:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8015cd0:	4b1e      	ldr	r3, [pc, #120]	; (8015d4c <SystemInit+0xec>)
 8015cd2:	2200      	movs	r2, #0
 8015cd4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8015cd6:	4b1d      	ldr	r3, [pc, #116]	; (8015d4c <SystemInit+0xec>)
 8015cd8:	2200      	movs	r2, #0
 8015cda:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8015cdc:	4b1b      	ldr	r3, [pc, #108]	; (8015d4c <SystemInit+0xec>)
 8015cde:	4a1d      	ldr	r2, [pc, #116]	; (8015d54 <SystemInit+0xf4>)
 8015ce0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8015ce2:	4b1a      	ldr	r3, [pc, #104]	; (8015d4c <SystemInit+0xec>)
 8015ce4:	4a1c      	ldr	r2, [pc, #112]	; (8015d58 <SystemInit+0xf8>)
 8015ce6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8015ce8:	4b18      	ldr	r3, [pc, #96]	; (8015d4c <SystemInit+0xec>)
 8015cea:	4a1c      	ldr	r2, [pc, #112]	; (8015d5c <SystemInit+0xfc>)
 8015cec:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8015cee:	4b17      	ldr	r3, [pc, #92]	; (8015d4c <SystemInit+0xec>)
 8015cf0:	2200      	movs	r2, #0
 8015cf2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8015cf4:	4b15      	ldr	r3, [pc, #84]	; (8015d4c <SystemInit+0xec>)
 8015cf6:	4a19      	ldr	r2, [pc, #100]	; (8015d5c <SystemInit+0xfc>)
 8015cf8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8015cfa:	4b14      	ldr	r3, [pc, #80]	; (8015d4c <SystemInit+0xec>)
 8015cfc:	2200      	movs	r2, #0
 8015cfe:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8015d00:	4b12      	ldr	r3, [pc, #72]	; (8015d4c <SystemInit+0xec>)
 8015d02:	4a16      	ldr	r2, [pc, #88]	; (8015d5c <SystemInit+0xfc>)
 8015d04:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8015d06:	4b11      	ldr	r3, [pc, #68]	; (8015d4c <SystemInit+0xec>)
 8015d08:	2200      	movs	r2, #0
 8015d0a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8015d0c:	4b0f      	ldr	r3, [pc, #60]	; (8015d4c <SystemInit+0xec>)
 8015d0e:	681b      	ldr	r3, [r3, #0]
 8015d10:	4a0e      	ldr	r2, [pc, #56]	; (8015d4c <SystemInit+0xec>)
 8015d12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8015d16:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8015d18:	4b0c      	ldr	r3, [pc, #48]	; (8015d4c <SystemInit+0xec>)
 8015d1a:	2200      	movs	r2, #0
 8015d1c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8015d1e:	4b10      	ldr	r3, [pc, #64]	; (8015d60 <SystemInit+0x100>)
 8015d20:	681a      	ldr	r2, [r3, #0]
 8015d22:	4b10      	ldr	r3, [pc, #64]	; (8015d64 <SystemInit+0x104>)
 8015d24:	4013      	ands	r3, r2
 8015d26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8015d2a:	d202      	bcs.n	8015d32 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8015d2c:	4b0e      	ldr	r3, [pc, #56]	; (8015d68 <SystemInit+0x108>)
 8015d2e:	2201      	movs	r2, #1
 8015d30:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8015d32:	4b0e      	ldr	r3, [pc, #56]	; (8015d6c <SystemInit+0x10c>)
 8015d34:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8015d38:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8015d3a:	bf00      	nop
 8015d3c:	46bd      	mov	sp, r7
 8015d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d42:	4770      	bx	lr
 8015d44:	e000ed00 	.word	0xe000ed00
 8015d48:	52002000 	.word	0x52002000
 8015d4c:	58024400 	.word	0x58024400
 8015d50:	eaf6ed7f 	.word	0xeaf6ed7f
 8015d54:	02020200 	.word	0x02020200
 8015d58:	01ff0000 	.word	0x01ff0000
 8015d5c:	01010280 	.word	0x01010280
 8015d60:	5c001000 	.word	0x5c001000
 8015d64:	ffff0000 	.word	0xffff0000
 8015d68:	51008108 	.word	0x51008108
 8015d6c:	52004000 	.word	0x52004000

08015d70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8015d70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8015da8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8015d74:	f7ff ff74 	bl	8015c60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8015d78:	480c      	ldr	r0, [pc, #48]	; (8015dac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8015d7a:	490d      	ldr	r1, [pc, #52]	; (8015db0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8015d7c:	4a0d      	ldr	r2, [pc, #52]	; (8015db4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8015d7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8015d80:	e002      	b.n	8015d88 <LoopCopyDataInit>

08015d82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8015d82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8015d84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8015d86:	3304      	adds	r3, #4

08015d88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8015d88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8015d8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8015d8c:	d3f9      	bcc.n	8015d82 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8015d8e:	4a0a      	ldr	r2, [pc, #40]	; (8015db8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8015d90:	4c0a      	ldr	r4, [pc, #40]	; (8015dbc <LoopFillZerobss+0x22>)
  movs r3, #0
 8015d92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8015d94:	e001      	b.n	8015d9a <LoopFillZerobss>

08015d96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8015d96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8015d98:	3204      	adds	r2, #4

08015d9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8015d9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8015d9c:	d3fb      	bcc.n	8015d96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8015d9e:	f00a fcdf 	bl	8020760 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8015da2:	f7fe fe7c 	bl	8014a9e <main>
  bx  lr
 8015da6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8015da8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8015dac:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8015db0:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8015db4:	08072c18 	.word	0x08072c18
  ldr r2, =_sbss
 8015db8:	24000080 	.word	0x24000080
  ldr r4, =_ebss
 8015dbc:	2404f1c4 	.word	0x2404f1c4

08015dc0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8015dc0:	e7fe      	b.n	8015dc0 <ADC3_IRQHandler>
	...

08015dc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8015dc4:	b580      	push	{r7, lr}
 8015dc6:	b082      	sub	sp, #8
 8015dc8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8015dca:	2003      	movs	r0, #3
 8015dcc:	f000 f98c 	bl	80160e8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8015dd0:	f005 fb70 	bl	801b4b4 <HAL_RCC_GetSysClockFreq>
 8015dd4:	4602      	mov	r2, r0
 8015dd6:	4b15      	ldr	r3, [pc, #84]	; (8015e2c <HAL_Init+0x68>)
 8015dd8:	699b      	ldr	r3, [r3, #24]
 8015dda:	0a1b      	lsrs	r3, r3, #8
 8015ddc:	f003 030f 	and.w	r3, r3, #15
 8015de0:	4913      	ldr	r1, [pc, #76]	; (8015e30 <HAL_Init+0x6c>)
 8015de2:	5ccb      	ldrb	r3, [r1, r3]
 8015de4:	f003 031f 	and.w	r3, r3, #31
 8015de8:	fa22 f303 	lsr.w	r3, r2, r3
 8015dec:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8015dee:	4b0f      	ldr	r3, [pc, #60]	; (8015e2c <HAL_Init+0x68>)
 8015df0:	699b      	ldr	r3, [r3, #24]
 8015df2:	f003 030f 	and.w	r3, r3, #15
 8015df6:	4a0e      	ldr	r2, [pc, #56]	; (8015e30 <HAL_Init+0x6c>)
 8015df8:	5cd3      	ldrb	r3, [r2, r3]
 8015dfa:	f003 031f 	and.w	r3, r3, #31
 8015dfe:	687a      	ldr	r2, [r7, #4]
 8015e00:	fa22 f303 	lsr.w	r3, r2, r3
 8015e04:	4a0b      	ldr	r2, [pc, #44]	; (8015e34 <HAL_Init+0x70>)
 8015e06:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8015e08:	4a0b      	ldr	r2, [pc, #44]	; (8015e38 <HAL_Init+0x74>)
 8015e0a:	687b      	ldr	r3, [r7, #4]
 8015e0c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8015e0e:	200e      	movs	r0, #14
 8015e10:	f000 f814 	bl	8015e3c <HAL_InitTick>
 8015e14:	4603      	mov	r3, r0
 8015e16:	2b00      	cmp	r3, #0
 8015e18:	d001      	beq.n	8015e1e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8015e1a:	2301      	movs	r3, #1
 8015e1c:	e002      	b.n	8015e24 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8015e1e:	f7ff fa93 	bl	8015348 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8015e22:	2300      	movs	r3, #0
}
 8015e24:	4618      	mov	r0, r3
 8015e26:	3708      	adds	r7, #8
 8015e28:	46bd      	mov	sp, r7
 8015e2a:	bd80      	pop	{r7, pc}
 8015e2c:	58024400 	.word	0x58024400
 8015e30:	08072a10 	.word	0x08072a10
 8015e34:	24000008 	.word	0x24000008
 8015e38:	24000004 	.word	0x24000004

08015e3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8015e3c:	b580      	push	{r7, lr}
 8015e3e:	b082      	sub	sp, #8
 8015e40:	af00      	add	r7, sp, #0
 8015e42:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8015e44:	4b15      	ldr	r3, [pc, #84]	; (8015e9c <HAL_InitTick+0x60>)
 8015e46:	781b      	ldrb	r3, [r3, #0]
 8015e48:	2b00      	cmp	r3, #0
 8015e4a:	d101      	bne.n	8015e50 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8015e4c:	2301      	movs	r3, #1
 8015e4e:	e021      	b.n	8015e94 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8015e50:	4b13      	ldr	r3, [pc, #76]	; (8015ea0 <HAL_InitTick+0x64>)
 8015e52:	681a      	ldr	r2, [r3, #0]
 8015e54:	4b11      	ldr	r3, [pc, #68]	; (8015e9c <HAL_InitTick+0x60>)
 8015e56:	781b      	ldrb	r3, [r3, #0]
 8015e58:	4619      	mov	r1, r3
 8015e5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8015e5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8015e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8015e66:	4618      	mov	r0, r3
 8015e68:	f000 f971 	bl	801614e <HAL_SYSTICK_Config>
 8015e6c:	4603      	mov	r3, r0
 8015e6e:	2b00      	cmp	r3, #0
 8015e70:	d001      	beq.n	8015e76 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8015e72:	2301      	movs	r3, #1
 8015e74:	e00e      	b.n	8015e94 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8015e76:	687b      	ldr	r3, [r7, #4]
 8015e78:	2b0f      	cmp	r3, #15
 8015e7a:	d80a      	bhi.n	8015e92 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8015e7c:	2200      	movs	r2, #0
 8015e7e:	6879      	ldr	r1, [r7, #4]
 8015e80:	f04f 30ff 	mov.w	r0, #4294967295
 8015e84:	f000 f93b 	bl	80160fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8015e88:	4a06      	ldr	r2, [pc, #24]	; (8015ea4 <HAL_InitTick+0x68>)
 8015e8a:	687b      	ldr	r3, [r7, #4]
 8015e8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8015e8e:	2300      	movs	r3, #0
 8015e90:	e000      	b.n	8015e94 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8015e92:	2301      	movs	r3, #1
}
 8015e94:	4618      	mov	r0, r3
 8015e96:	3708      	adds	r7, #8
 8015e98:	46bd      	mov	sp, r7
 8015e9a:	bd80      	pop	{r7, pc}
 8015e9c:	24000010 	.word	0x24000010
 8015ea0:	24000004 	.word	0x24000004
 8015ea4:	2400000c 	.word	0x2400000c

08015ea8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8015ea8:	b480      	push	{r7}
 8015eaa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8015eac:	4b06      	ldr	r3, [pc, #24]	; (8015ec8 <HAL_IncTick+0x20>)
 8015eae:	781b      	ldrb	r3, [r3, #0]
 8015eb0:	461a      	mov	r2, r3
 8015eb2:	4b06      	ldr	r3, [pc, #24]	; (8015ecc <HAL_IncTick+0x24>)
 8015eb4:	681b      	ldr	r3, [r3, #0]
 8015eb6:	4413      	add	r3, r2
 8015eb8:	4a04      	ldr	r2, [pc, #16]	; (8015ecc <HAL_IncTick+0x24>)
 8015eba:	6013      	str	r3, [r2, #0]
}
 8015ebc:	bf00      	nop
 8015ebe:	46bd      	mov	sp, r7
 8015ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ec4:	4770      	bx	lr
 8015ec6:	bf00      	nop
 8015ec8:	24000010 	.word	0x24000010
 8015ecc:	2404efe4 	.word	0x2404efe4

08015ed0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8015ed0:	b480      	push	{r7}
 8015ed2:	af00      	add	r7, sp, #0
  return uwTick;
 8015ed4:	4b03      	ldr	r3, [pc, #12]	; (8015ee4 <HAL_GetTick+0x14>)
 8015ed6:	681b      	ldr	r3, [r3, #0]
}
 8015ed8:	4618      	mov	r0, r3
 8015eda:	46bd      	mov	sp, r7
 8015edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ee0:	4770      	bx	lr
 8015ee2:	bf00      	nop
 8015ee4:	2404efe4 	.word	0x2404efe4

08015ee8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8015ee8:	b580      	push	{r7, lr}
 8015eea:	b084      	sub	sp, #16
 8015eec:	af00      	add	r7, sp, #0
 8015eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8015ef0:	f7ff ffee 	bl	8015ed0 <HAL_GetTick>
 8015ef4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8015ef6:	687b      	ldr	r3, [r7, #4]
 8015ef8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8015efa:	68fb      	ldr	r3, [r7, #12]
 8015efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015f00:	d005      	beq.n	8015f0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8015f02:	4b0a      	ldr	r3, [pc, #40]	; (8015f2c <HAL_Delay+0x44>)
 8015f04:	781b      	ldrb	r3, [r3, #0]
 8015f06:	461a      	mov	r2, r3
 8015f08:	68fb      	ldr	r3, [r7, #12]
 8015f0a:	4413      	add	r3, r2
 8015f0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8015f0e:	bf00      	nop
 8015f10:	f7ff ffde 	bl	8015ed0 <HAL_GetTick>
 8015f14:	4602      	mov	r2, r0
 8015f16:	68bb      	ldr	r3, [r7, #8]
 8015f18:	1ad3      	subs	r3, r2, r3
 8015f1a:	68fa      	ldr	r2, [r7, #12]
 8015f1c:	429a      	cmp	r2, r3
 8015f1e:	d8f7      	bhi.n	8015f10 <HAL_Delay+0x28>
  {
  }
}
 8015f20:	bf00      	nop
 8015f22:	bf00      	nop
 8015f24:	3710      	adds	r7, #16
 8015f26:	46bd      	mov	sp, r7
 8015f28:	bd80      	pop	{r7, pc}
 8015f2a:	bf00      	nop
 8015f2c:	24000010 	.word	0x24000010

08015f30 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8015f30:	b480      	push	{r7}
 8015f32:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8015f34:	4b03      	ldr	r3, [pc, #12]	; (8015f44 <HAL_GetREVID+0x14>)
 8015f36:	681b      	ldr	r3, [r3, #0]
 8015f38:	0c1b      	lsrs	r3, r3, #16
}
 8015f3a:	4618      	mov	r0, r3
 8015f3c:	46bd      	mov	sp, r7
 8015f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f42:	4770      	bx	lr
 8015f44:	5c001000 	.word	0x5c001000

08015f48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8015f48:	b480      	push	{r7}
 8015f4a:	b085      	sub	sp, #20
 8015f4c:	af00      	add	r7, sp, #0
 8015f4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8015f50:	687b      	ldr	r3, [r7, #4]
 8015f52:	f003 0307 	and.w	r3, r3, #7
 8015f56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8015f58:	4b0b      	ldr	r3, [pc, #44]	; (8015f88 <__NVIC_SetPriorityGrouping+0x40>)
 8015f5a:	68db      	ldr	r3, [r3, #12]
 8015f5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8015f5e:	68ba      	ldr	r2, [r7, #8]
 8015f60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8015f64:	4013      	ands	r3, r2
 8015f66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8015f68:	68fb      	ldr	r3, [r7, #12]
 8015f6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8015f6c:	68bb      	ldr	r3, [r7, #8]
 8015f6e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8015f70:	4b06      	ldr	r3, [pc, #24]	; (8015f8c <__NVIC_SetPriorityGrouping+0x44>)
 8015f72:	4313      	orrs	r3, r2
 8015f74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8015f76:	4a04      	ldr	r2, [pc, #16]	; (8015f88 <__NVIC_SetPriorityGrouping+0x40>)
 8015f78:	68bb      	ldr	r3, [r7, #8]
 8015f7a:	60d3      	str	r3, [r2, #12]
}
 8015f7c:	bf00      	nop
 8015f7e:	3714      	adds	r7, #20
 8015f80:	46bd      	mov	sp, r7
 8015f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f86:	4770      	bx	lr
 8015f88:	e000ed00 	.word	0xe000ed00
 8015f8c:	05fa0000 	.word	0x05fa0000

08015f90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8015f90:	b480      	push	{r7}
 8015f92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8015f94:	4b04      	ldr	r3, [pc, #16]	; (8015fa8 <__NVIC_GetPriorityGrouping+0x18>)
 8015f96:	68db      	ldr	r3, [r3, #12]
 8015f98:	0a1b      	lsrs	r3, r3, #8
 8015f9a:	f003 0307 	and.w	r3, r3, #7
}
 8015f9e:	4618      	mov	r0, r3
 8015fa0:	46bd      	mov	sp, r7
 8015fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fa6:	4770      	bx	lr
 8015fa8:	e000ed00 	.word	0xe000ed00

08015fac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8015fac:	b480      	push	{r7}
 8015fae:	b083      	sub	sp, #12
 8015fb0:	af00      	add	r7, sp, #0
 8015fb2:	4603      	mov	r3, r0
 8015fb4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8015fb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015fba:	2b00      	cmp	r3, #0
 8015fbc:	db0b      	blt.n	8015fd6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8015fbe:	88fb      	ldrh	r3, [r7, #6]
 8015fc0:	f003 021f 	and.w	r2, r3, #31
 8015fc4:	4907      	ldr	r1, [pc, #28]	; (8015fe4 <__NVIC_EnableIRQ+0x38>)
 8015fc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015fca:	095b      	lsrs	r3, r3, #5
 8015fcc:	2001      	movs	r0, #1
 8015fce:	fa00 f202 	lsl.w	r2, r0, r2
 8015fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8015fd6:	bf00      	nop
 8015fd8:	370c      	adds	r7, #12
 8015fda:	46bd      	mov	sp, r7
 8015fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fe0:	4770      	bx	lr
 8015fe2:	bf00      	nop
 8015fe4:	e000e100 	.word	0xe000e100

08015fe8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8015fe8:	b480      	push	{r7}
 8015fea:	b083      	sub	sp, #12
 8015fec:	af00      	add	r7, sp, #0
 8015fee:	4603      	mov	r3, r0
 8015ff0:	6039      	str	r1, [r7, #0]
 8015ff2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8015ff4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015ff8:	2b00      	cmp	r3, #0
 8015ffa:	db0a      	blt.n	8016012 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015ffc:	683b      	ldr	r3, [r7, #0]
 8015ffe:	b2da      	uxtb	r2, r3
 8016000:	490c      	ldr	r1, [pc, #48]	; (8016034 <__NVIC_SetPriority+0x4c>)
 8016002:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016006:	0112      	lsls	r2, r2, #4
 8016008:	b2d2      	uxtb	r2, r2
 801600a:	440b      	add	r3, r1
 801600c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8016010:	e00a      	b.n	8016028 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016012:	683b      	ldr	r3, [r7, #0]
 8016014:	b2da      	uxtb	r2, r3
 8016016:	4908      	ldr	r1, [pc, #32]	; (8016038 <__NVIC_SetPriority+0x50>)
 8016018:	88fb      	ldrh	r3, [r7, #6]
 801601a:	f003 030f 	and.w	r3, r3, #15
 801601e:	3b04      	subs	r3, #4
 8016020:	0112      	lsls	r2, r2, #4
 8016022:	b2d2      	uxtb	r2, r2
 8016024:	440b      	add	r3, r1
 8016026:	761a      	strb	r2, [r3, #24]
}
 8016028:	bf00      	nop
 801602a:	370c      	adds	r7, #12
 801602c:	46bd      	mov	sp, r7
 801602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016032:	4770      	bx	lr
 8016034:	e000e100 	.word	0xe000e100
 8016038:	e000ed00 	.word	0xe000ed00

0801603c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801603c:	b480      	push	{r7}
 801603e:	b089      	sub	sp, #36	; 0x24
 8016040:	af00      	add	r7, sp, #0
 8016042:	60f8      	str	r0, [r7, #12]
 8016044:	60b9      	str	r1, [r7, #8]
 8016046:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8016048:	68fb      	ldr	r3, [r7, #12]
 801604a:	f003 0307 	and.w	r3, r3, #7
 801604e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8016050:	69fb      	ldr	r3, [r7, #28]
 8016052:	f1c3 0307 	rsb	r3, r3, #7
 8016056:	2b04      	cmp	r3, #4
 8016058:	bf28      	it	cs
 801605a:	2304      	movcs	r3, #4
 801605c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801605e:	69fb      	ldr	r3, [r7, #28]
 8016060:	3304      	adds	r3, #4
 8016062:	2b06      	cmp	r3, #6
 8016064:	d902      	bls.n	801606c <NVIC_EncodePriority+0x30>
 8016066:	69fb      	ldr	r3, [r7, #28]
 8016068:	3b03      	subs	r3, #3
 801606a:	e000      	b.n	801606e <NVIC_EncodePriority+0x32>
 801606c:	2300      	movs	r3, #0
 801606e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8016070:	f04f 32ff 	mov.w	r2, #4294967295
 8016074:	69bb      	ldr	r3, [r7, #24]
 8016076:	fa02 f303 	lsl.w	r3, r2, r3
 801607a:	43da      	mvns	r2, r3
 801607c:	68bb      	ldr	r3, [r7, #8]
 801607e:	401a      	ands	r2, r3
 8016080:	697b      	ldr	r3, [r7, #20]
 8016082:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8016084:	f04f 31ff 	mov.w	r1, #4294967295
 8016088:	697b      	ldr	r3, [r7, #20]
 801608a:	fa01 f303 	lsl.w	r3, r1, r3
 801608e:	43d9      	mvns	r1, r3
 8016090:	687b      	ldr	r3, [r7, #4]
 8016092:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8016094:	4313      	orrs	r3, r2
         );
}
 8016096:	4618      	mov	r0, r3
 8016098:	3724      	adds	r7, #36	; 0x24
 801609a:	46bd      	mov	sp, r7
 801609c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160a0:	4770      	bx	lr
	...

080160a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80160a4:	b580      	push	{r7, lr}
 80160a6:	b082      	sub	sp, #8
 80160a8:	af00      	add	r7, sp, #0
 80160aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80160ac:	687b      	ldr	r3, [r7, #4]
 80160ae:	3b01      	subs	r3, #1
 80160b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80160b4:	d301      	bcc.n	80160ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80160b6:	2301      	movs	r3, #1
 80160b8:	e00f      	b.n	80160da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80160ba:	4a0a      	ldr	r2, [pc, #40]	; (80160e4 <SysTick_Config+0x40>)
 80160bc:	687b      	ldr	r3, [r7, #4]
 80160be:	3b01      	subs	r3, #1
 80160c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80160c2:	210f      	movs	r1, #15
 80160c4:	f04f 30ff 	mov.w	r0, #4294967295
 80160c8:	f7ff ff8e 	bl	8015fe8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80160cc:	4b05      	ldr	r3, [pc, #20]	; (80160e4 <SysTick_Config+0x40>)
 80160ce:	2200      	movs	r2, #0
 80160d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80160d2:	4b04      	ldr	r3, [pc, #16]	; (80160e4 <SysTick_Config+0x40>)
 80160d4:	2207      	movs	r2, #7
 80160d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80160d8:	2300      	movs	r3, #0
}
 80160da:	4618      	mov	r0, r3
 80160dc:	3708      	adds	r7, #8
 80160de:	46bd      	mov	sp, r7
 80160e0:	bd80      	pop	{r7, pc}
 80160e2:	bf00      	nop
 80160e4:	e000e010 	.word	0xe000e010

080160e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80160e8:	b580      	push	{r7, lr}
 80160ea:	b082      	sub	sp, #8
 80160ec:	af00      	add	r7, sp, #0
 80160ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80160f0:	6878      	ldr	r0, [r7, #4]
 80160f2:	f7ff ff29 	bl	8015f48 <__NVIC_SetPriorityGrouping>
}
 80160f6:	bf00      	nop
 80160f8:	3708      	adds	r7, #8
 80160fa:	46bd      	mov	sp, r7
 80160fc:	bd80      	pop	{r7, pc}

080160fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80160fe:	b580      	push	{r7, lr}
 8016100:	b086      	sub	sp, #24
 8016102:	af00      	add	r7, sp, #0
 8016104:	4603      	mov	r3, r0
 8016106:	60b9      	str	r1, [r7, #8]
 8016108:	607a      	str	r2, [r7, #4]
 801610a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 801610c:	f7ff ff40 	bl	8015f90 <__NVIC_GetPriorityGrouping>
 8016110:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8016112:	687a      	ldr	r2, [r7, #4]
 8016114:	68b9      	ldr	r1, [r7, #8]
 8016116:	6978      	ldr	r0, [r7, #20]
 8016118:	f7ff ff90 	bl	801603c <NVIC_EncodePriority>
 801611c:	4602      	mov	r2, r0
 801611e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8016122:	4611      	mov	r1, r2
 8016124:	4618      	mov	r0, r3
 8016126:	f7ff ff5f 	bl	8015fe8 <__NVIC_SetPriority>
}
 801612a:	bf00      	nop
 801612c:	3718      	adds	r7, #24
 801612e:	46bd      	mov	sp, r7
 8016130:	bd80      	pop	{r7, pc}

08016132 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8016132:	b580      	push	{r7, lr}
 8016134:	b082      	sub	sp, #8
 8016136:	af00      	add	r7, sp, #0
 8016138:	4603      	mov	r3, r0
 801613a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801613c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016140:	4618      	mov	r0, r3
 8016142:	f7ff ff33 	bl	8015fac <__NVIC_EnableIRQ>
}
 8016146:	bf00      	nop
 8016148:	3708      	adds	r7, #8
 801614a:	46bd      	mov	sp, r7
 801614c:	bd80      	pop	{r7, pc}

0801614e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801614e:	b580      	push	{r7, lr}
 8016150:	b082      	sub	sp, #8
 8016152:	af00      	add	r7, sp, #0
 8016154:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8016156:	6878      	ldr	r0, [r7, #4]
 8016158:	f7ff ffa4 	bl	80160a4 <SysTick_Config>
 801615c:	4603      	mov	r3, r0
}
 801615e:	4618      	mov	r0, r3
 8016160:	3708      	adds	r7, #8
 8016162:	46bd      	mov	sp, r7
 8016164:	bd80      	pop	{r7, pc}
	...

08016168 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8016168:	b580      	push	{r7, lr}
 801616a:	b082      	sub	sp, #8
 801616c:	af00      	add	r7, sp, #0
 801616e:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8016170:	687b      	ldr	r3, [r7, #4]
 8016172:	2b00      	cmp	r3, #0
 8016174:	d101      	bne.n	801617a <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8016176:	2301      	movs	r3, #1
 8016178:	e069      	b.n	801624e <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 801617a:	687b      	ldr	r3, [r7, #4]
 801617c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8016180:	b2db      	uxtb	r3, r3
 8016182:	2b00      	cmp	r3, #0
 8016184:	d102      	bne.n	801618c <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8016186:	6878      	ldr	r0, [r7, #4]
 8016188:	f7ff f8f8 	bl	801537c <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 801618c:	687b      	ldr	r3, [r7, #4]
 801618e:	2202      	movs	r2, #2
 8016190:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8016194:	687b      	ldr	r3, [r7, #4]
 8016196:	699b      	ldr	r3, [r3, #24]
 8016198:	2b00      	cmp	r3, #0
 801619a:	d002      	beq.n	80161a2 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 801619c:	687b      	ldr	r3, [r7, #4]
 801619e:	2200      	movs	r2, #0
 80161a0:	625a      	str	r2, [r3, #36]	; 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 80161a2:	687b      	ldr	r3, [r7, #4]
 80161a4:	681b      	ldr	r3, [r3, #0]
 80161a6:	6819      	ldr	r1, [r3, #0]
 80161a8:	687b      	ldr	r3, [r7, #4]
 80161aa:	681a      	ldr	r2, [r3, #0]
 80161ac:	4b2a      	ldr	r3, [pc, #168]	; (8016258 <HAL_DCMI_Init+0xf0>)
 80161ae:	400b      	ands	r3, r1
 80161b0:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80161b2:	687b      	ldr	r3, [r7, #4]
 80161b4:	681b      	ldr	r3, [r3, #0]
 80161b6:	6819      	ldr	r1, [r3, #0]
 80161b8:	687b      	ldr	r3, [r7, #4]
 80161ba:	685a      	ldr	r2, [r3, #4]
 80161bc:	687b      	ldr	r3, [r7, #4]
 80161be:	695b      	ldr	r3, [r3, #20]
 80161c0:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80161c2:	687b      	ldr	r3, [r7, #4]
 80161c4:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80161c6:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80161c8:	687b      	ldr	r3, [r7, #4]
 80161ca:	691b      	ldr	r3, [r3, #16]
 80161cc:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80161ce:	687b      	ldr	r3, [r7, #4]
 80161d0:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80161d2:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80161d4:	687b      	ldr	r3, [r7, #4]
 80161d6:	699b      	ldr	r3, [r3, #24]
 80161d8:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80161da:	687b      	ldr	r3, [r7, #4]
 80161dc:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80161de:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80161e0:	687b      	ldr	r3, [r7, #4]
 80161e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80161e4:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80161e6:	687b      	ldr	r3, [r7, #4]
 80161e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80161ea:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80161ec:	687b      	ldr	r3, [r7, #4]
 80161ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80161f0:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 80161f2:	687b      	ldr	r3, [r7, #4]
 80161f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80161f6:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80161f8:	687b      	ldr	r3, [r7, #4]
 80161fa:	681b      	ldr	r3, [r3, #0]
 80161fc:	430a      	orrs	r2, r1
 80161fe:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8016200:	687b      	ldr	r3, [r7, #4]
 8016202:	685b      	ldr	r3, [r3, #4]
 8016204:	2b10      	cmp	r3, #16
 8016206:	d112      	bne.n	801622e <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8016208:	687b      	ldr	r3, [r7, #4]
 801620a:	7f1b      	ldrb	r3, [r3, #28]
 801620c:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 801620e:	687b      	ldr	r3, [r7, #4]
 8016210:	7f5b      	ldrb	r3, [r3, #29]
 8016212:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8016214:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8016216:	687b      	ldr	r3, [r7, #4]
 8016218:	7f9b      	ldrb	r3, [r3, #30]
 801621a:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 801621c:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8016220:	687b      	ldr	r3, [r7, #4]
 8016222:	7fdb      	ldrb	r3, [r3, #31]
 8016224:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8016226:	687b      	ldr	r3, [r7, #4]
 8016228:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 801622a:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 801622c:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 801622e:	687b      	ldr	r3, [r7, #4]
 8016230:	681b      	ldr	r3, [r3, #0]
 8016232:	68da      	ldr	r2, [r3, #12]
 8016234:	687b      	ldr	r3, [r7, #4]
 8016236:	681b      	ldr	r3, [r3, #0]
 8016238:	f042 021e 	orr.w	r2, r2, #30
 801623c:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 801623e:	687b      	ldr	r3, [r7, #4]
 8016240:	2200      	movs	r2, #0
 8016242:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8016244:	687b      	ldr	r3, [r7, #4]
 8016246:	2201      	movs	r2, #1
 8016248:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 801624c:	2300      	movs	r3, #0
}
 801624e:	4618      	mov	r0, r3
 8016250:	3708      	adds	r7, #8
 8016252:	46bd      	mov	sp, r7
 8016254:	bd80      	pop	{r7, pc}
 8016256:	bf00      	nop
 8016258:	ffe0f007 	.word	0xffe0f007

0801625c <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 801625c:	b580      	push	{r7, lr}
 801625e:	b088      	sub	sp, #32
 8016260:	af02      	add	r7, sp, #8
 8016262:	60f8      	str	r0, [r7, #12]
 8016264:	60b9      	str	r1, [r7, #8]
 8016266:	607a      	str	r2, [r7, #4]
 8016268:	603b      	str	r3, [r7, #0]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 801626a:	68fb      	ldr	r3, [r7, #12]
 801626c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8016270:	2b01      	cmp	r3, #1
 8016272:	d101      	bne.n	8016278 <HAL_DCMI_Start_DMA+0x1c>
 8016274:	2302      	movs	r3, #2
 8016276:	e0ab      	b.n	80163d0 <HAL_DCMI_Start_DMA+0x174>
 8016278:	68fb      	ldr	r3, [r7, #12]
 801627a:	2201      	movs	r2, #1
 801627c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8016280:	68fb      	ldr	r3, [r7, #12]
 8016282:	2202      	movs	r2, #2
 8016284:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8016288:	68fb      	ldr	r3, [r7, #12]
 801628a:	681b      	ldr	r3, [r3, #0]
 801628c:	681a      	ldr	r2, [r3, #0]
 801628e:	68fb      	ldr	r3, [r7, #12]
 8016290:	681b      	ldr	r3, [r3, #0]
 8016292:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8016296:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8016298:	68fb      	ldr	r3, [r7, #12]
 801629a:	681b      	ldr	r3, [r3, #0]
 801629c:	681a      	ldr	r2, [r3, #0]
 801629e:	68fb      	ldr	r3, [r7, #12]
 80162a0:	681b      	ldr	r3, [r3, #0]
 80162a2:	f022 0202 	bic.w	r2, r2, #2
 80162a6:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 80162a8:	68fb      	ldr	r3, [r7, #12]
 80162aa:	681b      	ldr	r3, [r3, #0]
 80162ac:	6819      	ldr	r1, [r3, #0]
 80162ae:	68fb      	ldr	r3, [r7, #12]
 80162b0:	681b      	ldr	r3, [r3, #0]
 80162b2:	68ba      	ldr	r2, [r7, #8]
 80162b4:	430a      	orrs	r2, r1
 80162b6:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 80162b8:	68fb      	ldr	r3, [r7, #12]
 80162ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80162bc:	4a46      	ldr	r2, [pc, #280]	; (80163d8 <HAL_DCMI_Start_DMA+0x17c>)
 80162be:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 80162c0:	68fb      	ldr	r3, [r7, #12]
 80162c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80162c4:	4a45      	ldr	r2, [pc, #276]	; (80163dc <HAL_DCMI_Start_DMA+0x180>)
 80162c6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 80162c8:	68fb      	ldr	r3, [r7, #12]
 80162ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80162cc:	2200      	movs	r2, #0
 80162ce:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 80162d0:	68fb      	ldr	r3, [r7, #12]
 80162d2:	2200      	movs	r2, #0
 80162d4:	639a      	str	r2, [r3, #56]	; 0x38
  hdcmi->XferTransferNumber = 0;
 80162d6:	68fb      	ldr	r3, [r7, #12]
 80162d8:	2200      	movs	r2, #0
 80162da:	641a      	str	r2, [r3, #64]	; 0x40
  hdcmi->XferSize = 0;
 80162dc:	68fb      	ldr	r3, [r7, #12]
 80162de:	2200      	movs	r2, #0
 80162e0:	63da      	str	r2, [r3, #60]	; 0x3c
  hdcmi->pBuffPtr = 0;
 80162e2:	68fb      	ldr	r3, [r7, #12]
 80162e4:	2200      	movs	r2, #0
 80162e6:	645a      	str	r2, [r3, #68]	; 0x44

  if (Length <= 0xFFFFU)
 80162e8:	683b      	ldr	r3, [r7, #0]
 80162ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80162ee:	d219      	bcs.n	8016324 <HAL_DCMI_Start_DMA+0xc8>
  {
    /* Enable the DMA Stream */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 80162f0:	68fb      	ldr	r3, [r7, #12]
 80162f2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80162f4:	68fb      	ldr	r3, [r7, #12]
 80162f6:	681b      	ldr	r3, [r3, #0]
 80162f8:	3328      	adds	r3, #40	; 0x28
 80162fa:	4619      	mov	r1, r3
 80162fc:	683b      	ldr	r3, [r7, #0]
 80162fe:	687a      	ldr	r2, [r7, #4]
 8016300:	f000 fd1a 	bl	8016d38 <HAL_DMA_Start_IT>
 8016304:	4603      	mov	r3, r0
 8016306:	2b00      	cmp	r3, #0
 8016308:	d055      	beq.n	80163b6 <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 801630a:	68fb      	ldr	r3, [r7, #12]
 801630c:	2240      	movs	r2, #64	; 0x40
 801630e:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8016310:	68fb      	ldr	r3, [r7, #12]
 8016312:	2201      	movs	r2, #1
 8016314:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8016318:	68fb      	ldr	r3, [r7, #12]
 801631a:	2200      	movs	r2, #0
 801631c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      return HAL_ERROR;
 8016320:	2301      	movs	r3, #1
 8016322:	e055      	b.n	80163d0 <HAL_DCMI_Start_DMA+0x174>
    }
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8016324:	68fb      	ldr	r3, [r7, #12]
 8016326:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016328:	4a2b      	ldr	r2, [pc, #172]	; (80163d8 <HAL_DCMI_Start_DMA+0x17c>)
 801632a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 801632c:	68fb      	ldr	r3, [r7, #12]
 801632e:	2201      	movs	r2, #1
 8016330:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferSize = Length;
 8016332:	68fb      	ldr	r3, [r7, #12]
 8016334:	683a      	ldr	r2, [r7, #0]
 8016336:	63da      	str	r2, [r3, #60]	; 0x3c
    hdcmi->pBuffPtr = pData;
 8016338:	68fb      	ldr	r3, [r7, #12]
 801633a:	687a      	ldr	r2, [r7, #4]
 801633c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 801633e:	e009      	b.n	8016354 <HAL_DCMI_Start_DMA+0xf8>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 8016340:	68fb      	ldr	r3, [r7, #12]
 8016342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016344:	085a      	lsrs	r2, r3, #1
 8016346:	68fb      	ldr	r3, [r7, #12]
 8016348:	63da      	str	r2, [r3, #60]	; 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 801634a:	68fb      	ldr	r3, [r7, #12]
 801634c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801634e:	005a      	lsls	r2, r3, #1
 8016350:	68fb      	ldr	r3, [r7, #12]
 8016352:	639a      	str	r2, [r3, #56]	; 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 8016354:	68fb      	ldr	r3, [r7, #12]
 8016356:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016358:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801635c:	d2f0      	bcs.n	8016340 <HAL_DCMI_Start_DMA+0xe4>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 801635e:	68fb      	ldr	r3, [r7, #12]
 8016360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016362:	1e9a      	subs	r2, r3, #2
 8016364:	68fb      	ldr	r3, [r7, #12]
 8016366:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8016368:	68fb      	ldr	r3, [r7, #12]
 801636a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801636c:	68fb      	ldr	r3, [r7, #12]
 801636e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U * hdcmi->XferSize));
 8016370:	68fb      	ldr	r3, [r7, #12]
 8016372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016374:	009b      	lsls	r3, r3, #2
 8016376:	687a      	ldr	r2, [r7, #4]
 8016378:	4413      	add	r3, r2
 801637a:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 801637c:	68fb      	ldr	r3, [r7, #12]
 801637e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8016380:	68fb      	ldr	r3, [r7, #12]
 8016382:	681b      	ldr	r3, [r3, #0]
 8016384:	3328      	adds	r3, #40	; 0x28
 8016386:	4619      	mov	r1, r3
 8016388:	68fb      	ldr	r3, [r7, #12]
 801638a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801638c:	9300      	str	r3, [sp, #0]
 801638e:	697b      	ldr	r3, [r7, #20]
 8016390:	687a      	ldr	r2, [r7, #4]
 8016392:	f002 fc9f 	bl	8018cd4 <HAL_DMAEx_MultiBufferStart_IT>
 8016396:	4603      	mov	r3, r0
 8016398:	2b00      	cmp	r3, #0
 801639a:	d00c      	beq.n	80163b6 <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 801639c:	68fb      	ldr	r3, [r7, #12]
 801639e:	2240      	movs	r2, #64	; 0x40
 80163a0:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 80163a2:	68fb      	ldr	r3, [r7, #12]
 80163a4:	2201      	movs	r2, #1
 80163a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 80163aa:	68fb      	ldr	r3, [r7, #12]
 80163ac:	2200      	movs	r2, #0
 80163ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      return HAL_ERROR;
 80163b2:	2301      	movs	r3, #1
 80163b4:	e00c      	b.n	80163d0 <HAL_DCMI_Start_DMA+0x174>
    }
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 80163b6:	68fb      	ldr	r3, [r7, #12]
 80163b8:	681b      	ldr	r3, [r3, #0]
 80163ba:	681a      	ldr	r2, [r3, #0]
 80163bc:	68fb      	ldr	r3, [r7, #12]
 80163be:	681b      	ldr	r3, [r3, #0]
 80163c0:	f042 0201 	orr.w	r2, r2, #1
 80163c4:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 80163c6:	68fb      	ldr	r3, [r7, #12]
 80163c8:	2200      	movs	r2, #0
 80163ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return HAL_OK;
 80163ce:	2300      	movs	r3, #0
}
 80163d0:	4618      	mov	r0, r3
 80163d2:	3718      	adds	r7, #24
 80163d4:	46bd      	mov	sp, r7
 80163d6:	bd80      	pop	{r7, pc}
 80163d8:	08016521 	.word	0x08016521
 80163dc:	08016647 	.word	0x08016647

080163e0 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 80163e0:	b580      	push	{r7, lr}
 80163e2:	b084      	sub	sp, #16
 80163e4:	af00      	add	r7, sp, #0
 80163e6:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 80163e8:	687b      	ldr	r3, [r7, #4]
 80163ea:	681b      	ldr	r3, [r3, #0]
 80163ec:	691b      	ldr	r3, [r3, #16]
 80163ee:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 80163f0:	68fb      	ldr	r3, [r7, #12]
 80163f2:	f003 0304 	and.w	r3, r3, #4
 80163f6:	2b00      	cmp	r3, #0
 80163f8:	d016      	beq.n	8016428 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 80163fa:	687b      	ldr	r3, [r7, #4]
 80163fc:	681b      	ldr	r3, [r3, #0]
 80163fe:	2204      	movs	r2, #4
 8016400:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8016402:	687b      	ldr	r3, [r7, #4]
 8016404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016406:	f043 0202 	orr.w	r2, r3, #2
 801640a:	687b      	ldr	r3, [r7, #4]
 801640c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 801640e:	687b      	ldr	r3, [r7, #4]
 8016410:	2204      	movs	r2, #4
 8016412:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8016416:	687b      	ldr	r3, [r7, #4]
 8016418:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801641a:	4a31      	ldr	r2, [pc, #196]	; (80164e0 <HAL_DCMI_IRQHandler+0x100>)
 801641c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 801641e:	687b      	ldr	r3, [r7, #4]
 8016420:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016422:	4618      	mov	r0, r3
 8016424:	f000 fef2 	bl	801720c <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8016428:	68fb      	ldr	r3, [r7, #12]
 801642a:	f003 0302 	and.w	r3, r3, #2
 801642e:	2b00      	cmp	r3, #0
 8016430:	d016      	beq.n	8016460 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8016432:	687b      	ldr	r3, [r7, #4]
 8016434:	681b      	ldr	r3, [r3, #0]
 8016436:	2202      	movs	r2, #2
 8016438:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 801643a:	687b      	ldr	r3, [r7, #4]
 801643c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801643e:	f043 0201 	orr.w	r2, r3, #1
 8016442:	687b      	ldr	r3, [r7, #4]
 8016444:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8016446:	687b      	ldr	r3, [r7, #4]
 8016448:	2204      	movs	r2, #4
 801644a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 801644e:	687b      	ldr	r3, [r7, #4]
 8016450:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016452:	4a23      	ldr	r2, [pc, #140]	; (80164e0 <HAL_DCMI_IRQHandler+0x100>)
 8016454:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8016456:	687b      	ldr	r3, [r7, #4]
 8016458:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801645a:	4618      	mov	r0, r3
 801645c:	f000 fed6 	bl	801720c <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8016460:	68fb      	ldr	r3, [r7, #12]
 8016462:	f003 0310 	and.w	r3, r3, #16
 8016466:	2b00      	cmp	r3, #0
 8016468:	d006      	beq.n	8016478 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 801646a:	687b      	ldr	r3, [r7, #4]
 801646c:	681b      	ldr	r3, [r3, #0]
 801646e:	2210      	movs	r2, #16
 8016470:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8016472:	6878      	ldr	r0, [r7, #4]
 8016474:	f000 f840 	bl	80164f8 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8016478:	68fb      	ldr	r3, [r7, #12]
 801647a:	f003 0308 	and.w	r3, r3, #8
 801647e:	2b00      	cmp	r3, #0
 8016480:	d006      	beq.n	8016490 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8016482:	687b      	ldr	r3, [r7, #4]
 8016484:	681b      	ldr	r3, [r3, #0]
 8016486:	2208      	movs	r2, #8
 8016488:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 801648a:	6878      	ldr	r0, [r7, #4]
 801648c:	f000 f83e 	bl	801650c <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8016490:	68fb      	ldr	r3, [r7, #12]
 8016492:	f003 0301 	and.w	r3, r3, #1
 8016496:	2b00      	cmp	r3, #0
 8016498:	d01d      	beq.n	80164d6 <HAL_DCMI_IRQHandler+0xf6>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 801649a:	687b      	ldr	r3, [r7, #4]
 801649c:	681b      	ldr	r3, [r3, #0]
 801649e:	681b      	ldr	r3, [r3, #0]
 80164a0:	f003 0302 	and.w	r3, r3, #2
 80164a4:	2b02      	cmp	r3, #2
 80164a6:	d107      	bne.n	80164b8 <HAL_DCMI_IRQHandler+0xd8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80164a8:	687b      	ldr	r3, [r7, #4]
 80164aa:	681b      	ldr	r3, [r3, #0]
 80164ac:	68da      	ldr	r2, [r3, #12]
 80164ae:	687b      	ldr	r3, [r7, #4]
 80164b0:	681b      	ldr	r3, [r3, #0]
 80164b2:	f022 021e 	bic.w	r2, r2, #30
 80164b6:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 80164b8:	687b      	ldr	r3, [r7, #4]
 80164ba:	681b      	ldr	r3, [r3, #0]
 80164bc:	68da      	ldr	r2, [r3, #12]
 80164be:	687b      	ldr	r3, [r7, #4]
 80164c0:	681b      	ldr	r3, [r3, #0]
 80164c2:	f022 0201 	bic.w	r2, r2, #1
 80164c6:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 80164c8:	687b      	ldr	r3, [r7, #4]
 80164ca:	681b      	ldr	r3, [r3, #0]
 80164cc:	2201      	movs	r2, #1
 80164ce:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 80164d0:	6878      	ldr	r0, [r7, #4]
 80164d2:	f7ea fd77 	bl	8000fc4 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 80164d6:	bf00      	nop
 80164d8:	3710      	adds	r7, #16
 80164da:	46bd      	mov	sp, r7
 80164dc:	bd80      	pop	{r7, pc}
 80164de:	bf00      	nop
 80164e0:	08016647 	.word	0x08016647

080164e4 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 80164e4:	b480      	push	{r7}
 80164e6:	b083      	sub	sp, #12
 80164e8:	af00      	add	r7, sp, #0
 80164ea:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 80164ec:	bf00      	nop
 80164ee:	370c      	adds	r7, #12
 80164f0:	46bd      	mov	sp, r7
 80164f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164f6:	4770      	bx	lr

080164f8 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80164f8:	b480      	push	{r7}
 80164fa:	b083      	sub	sp, #12
 80164fc:	af00      	add	r7, sp, #0
 80164fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8016500:	bf00      	nop
 8016502:	370c      	adds	r7, #12
 8016504:	46bd      	mov	sp, r7
 8016506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801650a:	4770      	bx	lr

0801650c <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 801650c:	b480      	push	{r7}
 801650e:	b083      	sub	sp, #12
 8016510:	af00      	add	r7, sp, #0
 8016512:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 8016514:	bf00      	nop
 8016516:	370c      	adds	r7, #12
 8016518:	46bd      	mov	sp, r7
 801651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801651e:	4770      	bx	lr

08016520 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8016520:	b580      	push	{r7, lr}
 8016522:	b084      	sub	sp, #16
 8016524:	af00      	add	r7, sp, #0
 8016526:	6078      	str	r0, [r7, #4]
  uint32_t tmp ;

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8016528:	687b      	ldr	r3, [r7, #4]
 801652a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801652c:	60fb      	str	r3, [r7, #12]

  if (hdcmi->XferCount != 0U)
 801652e:	68fb      	ldr	r3, [r7, #12]
 8016530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016532:	2b00      	cmp	r3, #0
 8016534:	d043      	beq.n	80165be <DCMI_DMAXferCplt+0x9e>
  {
    /* Update memory 0 address location */
    tmp = ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR) & DMA_SxCR_CT);
 8016536:	68fb      	ldr	r3, [r7, #12]
 8016538:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801653a:	681b      	ldr	r3, [r3, #0]
 801653c:	681b      	ldr	r3, [r3, #0]
 801653e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8016542:	60bb      	str	r3, [r7, #8]
    if (((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 8016544:	68fb      	ldr	r3, [r7, #12]
 8016546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016548:	f003 0301 	and.w	r3, r3, #1
 801654c:	2b00      	cmp	r3, #0
 801654e:	d118      	bne.n	8016582 <DCMI_DMAXferCplt+0x62>
 8016550:	68bb      	ldr	r3, [r7, #8]
 8016552:	2b00      	cmp	r3, #0
 8016554:	d015      	beq.n	8016582 <DCMI_DMAXferCplt+0x62>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR;
 8016556:	68fb      	ldr	r3, [r7, #12]
 8016558:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801655a:	681b      	ldr	r3, [r3, #0]
 801655c:	68db      	ldr	r3, [r3, #12]
 801655e:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY0);
 8016560:	68fb      	ldr	r3, [r7, #12]
 8016562:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8016564:	68fb      	ldr	r3, [r7, #12]
 8016566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016568:	00da      	lsls	r2, r3, #3
 801656a:	68bb      	ldr	r3, [r7, #8]
 801656c:	4413      	add	r3, r2
 801656e:	2200      	movs	r2, #0
 8016570:	4619      	mov	r1, r3
 8016572:	f002 ff0d 	bl	8019390 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8016576:	68fb      	ldr	r3, [r7, #12]
 8016578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801657a:	1e5a      	subs	r2, r3, #1
 801657c:	68fb      	ldr	r3, [r7, #12]
 801657e:	639a      	str	r2, [r3, #56]	; 0x38
 8016580:	e044      	b.n	801660c <DCMI_DMAXferCplt+0xec>
    }
    /* Update memory 1 address location */
    else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8016582:	68fb      	ldr	r3, [r7, #12]
 8016584:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016586:	681b      	ldr	r3, [r3, #0]
 8016588:	681b      	ldr	r3, [r3, #0]
 801658a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801658e:	2b00      	cmp	r3, #0
 8016590:	d13c      	bne.n	801660c <DCMI_DMAXferCplt+0xec>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR;
 8016592:	68fb      	ldr	r3, [r7, #12]
 8016594:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016596:	681b      	ldr	r3, [r3, #0]
 8016598:	691b      	ldr	r3, [r3, #16]
 801659a:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY1);
 801659c:	68fb      	ldr	r3, [r7, #12]
 801659e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80165a0:	68fb      	ldr	r3, [r7, #12]
 80165a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80165a4:	00da      	lsls	r2, r3, #3
 80165a6:	68bb      	ldr	r3, [r7, #8]
 80165a8:	4413      	add	r3, r2
 80165aa:	2201      	movs	r2, #1
 80165ac:	4619      	mov	r1, r3
 80165ae:	f002 feef 	bl	8019390 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 80165b2:	68fb      	ldr	r3, [r7, #12]
 80165b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80165b6:	1e5a      	subs	r2, r3, #1
 80165b8:	68fb      	ldr	r3, [r7, #12]
 80165ba:	639a      	str	r2, [r3, #56]	; 0x38
 80165bc:	e026      	b.n	801660c <DCMI_DMAXferCplt+0xec>
    {
      /* Nothing to do */
    }
  }
  /* Update memory 0 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) != 0U)
 80165be:	68fb      	ldr	r3, [r7, #12]
 80165c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80165c2:	681b      	ldr	r3, [r3, #0]
 80165c4:	681b      	ldr	r3, [r3, #0]
 80165c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80165ca:	2b00      	cmp	r3, #0
 80165cc:	d006      	beq.n	80165dc <DCMI_DMAXferCplt+0xbc>
  {
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR = hdcmi->pBuffPtr;
 80165ce:	68fb      	ldr	r3, [r7, #12]
 80165d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80165d2:	681b      	ldr	r3, [r3, #0]
 80165d4:	68fa      	ldr	r2, [r7, #12]
 80165d6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80165d8:	60da      	str	r2, [r3, #12]
 80165da:	e017      	b.n	801660c <DCMI_DMAXferCplt+0xec>
  }
  /* Update memory 1 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 80165dc:	68fb      	ldr	r3, [r7, #12]
 80165de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80165e0:	681b      	ldr	r3, [r3, #0]
 80165e2:	681b      	ldr	r3, [r3, #0]
 80165e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80165e8:	2b00      	cmp	r3, #0
 80165ea:	d10f      	bne.n	801660c <DCMI_DMAXferCplt+0xec>
  {
    tmp = hdcmi->pBuffPtr;
 80165ec:	68fb      	ldr	r3, [r7, #12]
 80165ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80165f0:	60bb      	str	r3, [r7, #8]
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR = (tmp + (4U * hdcmi->XferSize));
 80165f2:	68fb      	ldr	r3, [r7, #12]
 80165f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80165f6:	0099      	lsls	r1, r3, #2
 80165f8:	68fb      	ldr	r3, [r7, #12]
 80165fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80165fc:	681b      	ldr	r3, [r3, #0]
 80165fe:	68ba      	ldr	r2, [r7, #8]
 8016600:	440a      	add	r2, r1
 8016602:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8016604:	68fb      	ldr	r3, [r7, #12]
 8016606:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8016608:	68fb      	ldr	r3, [r7, #12]
 801660a:	639a      	str	r2, [r3, #56]	; 0x38
  {
    /* Nothing to do */
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 801660c:	68fb      	ldr	r3, [r7, #12]
 801660e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016610:	68fb      	ldr	r3, [r7, #12]
 8016612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016614:	429a      	cmp	r2, r3
 8016616:	d112      	bne.n	801663e <DCMI_DMAXferCplt+0x11e>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8016618:	68fb      	ldr	r3, [r7, #12]
 801661a:	681b      	ldr	r3, [r3, #0]
 801661c:	68da      	ldr	r2, [r3, #12]
 801661e:	68fb      	ldr	r3, [r7, #12]
 8016620:	681b      	ldr	r3, [r3, #0]
 8016622:	f042 0201 	orr.w	r2, r2, #1
 8016626:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8016628:	68fb      	ldr	r3, [r7, #12]
 801662a:	681b      	ldr	r3, [r3, #0]
 801662c:	681b      	ldr	r3, [r3, #0]
 801662e:	f003 0302 	and.w	r3, r3, #2
 8016632:	2b02      	cmp	r3, #2
 8016634:	d103      	bne.n	801663e <DCMI_DMAXferCplt+0x11e>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 8016636:	68fb      	ldr	r3, [r7, #12]
 8016638:	2201      	movs	r2, #1
 801663a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }
  }
}
 801663e:	bf00      	nop
 8016640:	3710      	adds	r7, #16
 8016642:	46bd      	mov	sp, r7
 8016644:	bd80      	pop	{r7, pc}

08016646 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8016646:	b580      	push	{r7, lr}
 8016648:	b084      	sub	sp, #16
 801664a:	af00      	add	r7, sp, #0
 801664c:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801664e:	687b      	ldr	r3, [r7, #4]
 8016650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016652:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8016654:	68fb      	ldr	r3, [r7, #12]
 8016656:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801665a:	2b02      	cmp	r3, #2
 801665c:	d009      	beq.n	8016672 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 801665e:	68fb      	ldr	r3, [r7, #12]
 8016660:	2201      	movs	r2, #1
 8016662:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8016666:	68fb      	ldr	r3, [r7, #12]
 8016668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801666a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801666e:	68fb      	ldr	r3, [r7, #12]
 8016670:	64da      	str	r2, [r3, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8016672:	68f8      	ldr	r0, [r7, #12]
 8016674:	f7ff ff36 	bl	80164e4 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 8016678:	bf00      	nop
 801667a:	3710      	adds	r7, #16
 801667c:	46bd      	mov	sp, r7
 801667e:	bd80      	pop	{r7, pc}

08016680 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8016680:	b580      	push	{r7, lr}
 8016682:	b086      	sub	sp, #24
 8016684:	af00      	add	r7, sp, #0
 8016686:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8016688:	f7ff fc22 	bl	8015ed0 <HAL_GetTick>
 801668c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 801668e:	687b      	ldr	r3, [r7, #4]
 8016690:	2b00      	cmp	r3, #0
 8016692:	d101      	bne.n	8016698 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8016694:	2301      	movs	r3, #1
 8016696:	e316      	b.n	8016cc6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8016698:	687b      	ldr	r3, [r7, #4]
 801669a:	681b      	ldr	r3, [r3, #0]
 801669c:	4a66      	ldr	r2, [pc, #408]	; (8016838 <HAL_DMA_Init+0x1b8>)
 801669e:	4293      	cmp	r3, r2
 80166a0:	d04a      	beq.n	8016738 <HAL_DMA_Init+0xb8>
 80166a2:	687b      	ldr	r3, [r7, #4]
 80166a4:	681b      	ldr	r3, [r3, #0]
 80166a6:	4a65      	ldr	r2, [pc, #404]	; (801683c <HAL_DMA_Init+0x1bc>)
 80166a8:	4293      	cmp	r3, r2
 80166aa:	d045      	beq.n	8016738 <HAL_DMA_Init+0xb8>
 80166ac:	687b      	ldr	r3, [r7, #4]
 80166ae:	681b      	ldr	r3, [r3, #0]
 80166b0:	4a63      	ldr	r2, [pc, #396]	; (8016840 <HAL_DMA_Init+0x1c0>)
 80166b2:	4293      	cmp	r3, r2
 80166b4:	d040      	beq.n	8016738 <HAL_DMA_Init+0xb8>
 80166b6:	687b      	ldr	r3, [r7, #4]
 80166b8:	681b      	ldr	r3, [r3, #0]
 80166ba:	4a62      	ldr	r2, [pc, #392]	; (8016844 <HAL_DMA_Init+0x1c4>)
 80166bc:	4293      	cmp	r3, r2
 80166be:	d03b      	beq.n	8016738 <HAL_DMA_Init+0xb8>
 80166c0:	687b      	ldr	r3, [r7, #4]
 80166c2:	681b      	ldr	r3, [r3, #0]
 80166c4:	4a60      	ldr	r2, [pc, #384]	; (8016848 <HAL_DMA_Init+0x1c8>)
 80166c6:	4293      	cmp	r3, r2
 80166c8:	d036      	beq.n	8016738 <HAL_DMA_Init+0xb8>
 80166ca:	687b      	ldr	r3, [r7, #4]
 80166cc:	681b      	ldr	r3, [r3, #0]
 80166ce:	4a5f      	ldr	r2, [pc, #380]	; (801684c <HAL_DMA_Init+0x1cc>)
 80166d0:	4293      	cmp	r3, r2
 80166d2:	d031      	beq.n	8016738 <HAL_DMA_Init+0xb8>
 80166d4:	687b      	ldr	r3, [r7, #4]
 80166d6:	681b      	ldr	r3, [r3, #0]
 80166d8:	4a5d      	ldr	r2, [pc, #372]	; (8016850 <HAL_DMA_Init+0x1d0>)
 80166da:	4293      	cmp	r3, r2
 80166dc:	d02c      	beq.n	8016738 <HAL_DMA_Init+0xb8>
 80166de:	687b      	ldr	r3, [r7, #4]
 80166e0:	681b      	ldr	r3, [r3, #0]
 80166e2:	4a5c      	ldr	r2, [pc, #368]	; (8016854 <HAL_DMA_Init+0x1d4>)
 80166e4:	4293      	cmp	r3, r2
 80166e6:	d027      	beq.n	8016738 <HAL_DMA_Init+0xb8>
 80166e8:	687b      	ldr	r3, [r7, #4]
 80166ea:	681b      	ldr	r3, [r3, #0]
 80166ec:	4a5a      	ldr	r2, [pc, #360]	; (8016858 <HAL_DMA_Init+0x1d8>)
 80166ee:	4293      	cmp	r3, r2
 80166f0:	d022      	beq.n	8016738 <HAL_DMA_Init+0xb8>
 80166f2:	687b      	ldr	r3, [r7, #4]
 80166f4:	681b      	ldr	r3, [r3, #0]
 80166f6:	4a59      	ldr	r2, [pc, #356]	; (801685c <HAL_DMA_Init+0x1dc>)
 80166f8:	4293      	cmp	r3, r2
 80166fa:	d01d      	beq.n	8016738 <HAL_DMA_Init+0xb8>
 80166fc:	687b      	ldr	r3, [r7, #4]
 80166fe:	681b      	ldr	r3, [r3, #0]
 8016700:	4a57      	ldr	r2, [pc, #348]	; (8016860 <HAL_DMA_Init+0x1e0>)
 8016702:	4293      	cmp	r3, r2
 8016704:	d018      	beq.n	8016738 <HAL_DMA_Init+0xb8>
 8016706:	687b      	ldr	r3, [r7, #4]
 8016708:	681b      	ldr	r3, [r3, #0]
 801670a:	4a56      	ldr	r2, [pc, #344]	; (8016864 <HAL_DMA_Init+0x1e4>)
 801670c:	4293      	cmp	r3, r2
 801670e:	d013      	beq.n	8016738 <HAL_DMA_Init+0xb8>
 8016710:	687b      	ldr	r3, [r7, #4]
 8016712:	681b      	ldr	r3, [r3, #0]
 8016714:	4a54      	ldr	r2, [pc, #336]	; (8016868 <HAL_DMA_Init+0x1e8>)
 8016716:	4293      	cmp	r3, r2
 8016718:	d00e      	beq.n	8016738 <HAL_DMA_Init+0xb8>
 801671a:	687b      	ldr	r3, [r7, #4]
 801671c:	681b      	ldr	r3, [r3, #0]
 801671e:	4a53      	ldr	r2, [pc, #332]	; (801686c <HAL_DMA_Init+0x1ec>)
 8016720:	4293      	cmp	r3, r2
 8016722:	d009      	beq.n	8016738 <HAL_DMA_Init+0xb8>
 8016724:	687b      	ldr	r3, [r7, #4]
 8016726:	681b      	ldr	r3, [r3, #0]
 8016728:	4a51      	ldr	r2, [pc, #324]	; (8016870 <HAL_DMA_Init+0x1f0>)
 801672a:	4293      	cmp	r3, r2
 801672c:	d004      	beq.n	8016738 <HAL_DMA_Init+0xb8>
 801672e:	687b      	ldr	r3, [r7, #4]
 8016730:	681b      	ldr	r3, [r3, #0]
 8016732:	4a50      	ldr	r2, [pc, #320]	; (8016874 <HAL_DMA_Init+0x1f4>)
 8016734:	4293      	cmp	r3, r2
 8016736:	d101      	bne.n	801673c <HAL_DMA_Init+0xbc>
 8016738:	2301      	movs	r3, #1
 801673a:	e000      	b.n	801673e <HAL_DMA_Init+0xbe>
 801673c:	2300      	movs	r3, #0
 801673e:	2b00      	cmp	r3, #0
 8016740:	f000 813b 	beq.w	80169ba <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8016744:	687b      	ldr	r3, [r7, #4]
 8016746:	2202      	movs	r2, #2
 8016748:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 801674c:	687b      	ldr	r3, [r7, #4]
 801674e:	2200      	movs	r2, #0
 8016750:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8016754:	687b      	ldr	r3, [r7, #4]
 8016756:	681b      	ldr	r3, [r3, #0]
 8016758:	4a37      	ldr	r2, [pc, #220]	; (8016838 <HAL_DMA_Init+0x1b8>)
 801675a:	4293      	cmp	r3, r2
 801675c:	d04a      	beq.n	80167f4 <HAL_DMA_Init+0x174>
 801675e:	687b      	ldr	r3, [r7, #4]
 8016760:	681b      	ldr	r3, [r3, #0]
 8016762:	4a36      	ldr	r2, [pc, #216]	; (801683c <HAL_DMA_Init+0x1bc>)
 8016764:	4293      	cmp	r3, r2
 8016766:	d045      	beq.n	80167f4 <HAL_DMA_Init+0x174>
 8016768:	687b      	ldr	r3, [r7, #4]
 801676a:	681b      	ldr	r3, [r3, #0]
 801676c:	4a34      	ldr	r2, [pc, #208]	; (8016840 <HAL_DMA_Init+0x1c0>)
 801676e:	4293      	cmp	r3, r2
 8016770:	d040      	beq.n	80167f4 <HAL_DMA_Init+0x174>
 8016772:	687b      	ldr	r3, [r7, #4]
 8016774:	681b      	ldr	r3, [r3, #0]
 8016776:	4a33      	ldr	r2, [pc, #204]	; (8016844 <HAL_DMA_Init+0x1c4>)
 8016778:	4293      	cmp	r3, r2
 801677a:	d03b      	beq.n	80167f4 <HAL_DMA_Init+0x174>
 801677c:	687b      	ldr	r3, [r7, #4]
 801677e:	681b      	ldr	r3, [r3, #0]
 8016780:	4a31      	ldr	r2, [pc, #196]	; (8016848 <HAL_DMA_Init+0x1c8>)
 8016782:	4293      	cmp	r3, r2
 8016784:	d036      	beq.n	80167f4 <HAL_DMA_Init+0x174>
 8016786:	687b      	ldr	r3, [r7, #4]
 8016788:	681b      	ldr	r3, [r3, #0]
 801678a:	4a30      	ldr	r2, [pc, #192]	; (801684c <HAL_DMA_Init+0x1cc>)
 801678c:	4293      	cmp	r3, r2
 801678e:	d031      	beq.n	80167f4 <HAL_DMA_Init+0x174>
 8016790:	687b      	ldr	r3, [r7, #4]
 8016792:	681b      	ldr	r3, [r3, #0]
 8016794:	4a2e      	ldr	r2, [pc, #184]	; (8016850 <HAL_DMA_Init+0x1d0>)
 8016796:	4293      	cmp	r3, r2
 8016798:	d02c      	beq.n	80167f4 <HAL_DMA_Init+0x174>
 801679a:	687b      	ldr	r3, [r7, #4]
 801679c:	681b      	ldr	r3, [r3, #0]
 801679e:	4a2d      	ldr	r2, [pc, #180]	; (8016854 <HAL_DMA_Init+0x1d4>)
 80167a0:	4293      	cmp	r3, r2
 80167a2:	d027      	beq.n	80167f4 <HAL_DMA_Init+0x174>
 80167a4:	687b      	ldr	r3, [r7, #4]
 80167a6:	681b      	ldr	r3, [r3, #0]
 80167a8:	4a2b      	ldr	r2, [pc, #172]	; (8016858 <HAL_DMA_Init+0x1d8>)
 80167aa:	4293      	cmp	r3, r2
 80167ac:	d022      	beq.n	80167f4 <HAL_DMA_Init+0x174>
 80167ae:	687b      	ldr	r3, [r7, #4]
 80167b0:	681b      	ldr	r3, [r3, #0]
 80167b2:	4a2a      	ldr	r2, [pc, #168]	; (801685c <HAL_DMA_Init+0x1dc>)
 80167b4:	4293      	cmp	r3, r2
 80167b6:	d01d      	beq.n	80167f4 <HAL_DMA_Init+0x174>
 80167b8:	687b      	ldr	r3, [r7, #4]
 80167ba:	681b      	ldr	r3, [r3, #0]
 80167bc:	4a28      	ldr	r2, [pc, #160]	; (8016860 <HAL_DMA_Init+0x1e0>)
 80167be:	4293      	cmp	r3, r2
 80167c0:	d018      	beq.n	80167f4 <HAL_DMA_Init+0x174>
 80167c2:	687b      	ldr	r3, [r7, #4]
 80167c4:	681b      	ldr	r3, [r3, #0]
 80167c6:	4a27      	ldr	r2, [pc, #156]	; (8016864 <HAL_DMA_Init+0x1e4>)
 80167c8:	4293      	cmp	r3, r2
 80167ca:	d013      	beq.n	80167f4 <HAL_DMA_Init+0x174>
 80167cc:	687b      	ldr	r3, [r7, #4]
 80167ce:	681b      	ldr	r3, [r3, #0]
 80167d0:	4a25      	ldr	r2, [pc, #148]	; (8016868 <HAL_DMA_Init+0x1e8>)
 80167d2:	4293      	cmp	r3, r2
 80167d4:	d00e      	beq.n	80167f4 <HAL_DMA_Init+0x174>
 80167d6:	687b      	ldr	r3, [r7, #4]
 80167d8:	681b      	ldr	r3, [r3, #0]
 80167da:	4a24      	ldr	r2, [pc, #144]	; (801686c <HAL_DMA_Init+0x1ec>)
 80167dc:	4293      	cmp	r3, r2
 80167de:	d009      	beq.n	80167f4 <HAL_DMA_Init+0x174>
 80167e0:	687b      	ldr	r3, [r7, #4]
 80167e2:	681b      	ldr	r3, [r3, #0]
 80167e4:	4a22      	ldr	r2, [pc, #136]	; (8016870 <HAL_DMA_Init+0x1f0>)
 80167e6:	4293      	cmp	r3, r2
 80167e8:	d004      	beq.n	80167f4 <HAL_DMA_Init+0x174>
 80167ea:	687b      	ldr	r3, [r7, #4]
 80167ec:	681b      	ldr	r3, [r3, #0]
 80167ee:	4a21      	ldr	r2, [pc, #132]	; (8016874 <HAL_DMA_Init+0x1f4>)
 80167f0:	4293      	cmp	r3, r2
 80167f2:	d108      	bne.n	8016806 <HAL_DMA_Init+0x186>
 80167f4:	687b      	ldr	r3, [r7, #4]
 80167f6:	681b      	ldr	r3, [r3, #0]
 80167f8:	681a      	ldr	r2, [r3, #0]
 80167fa:	687b      	ldr	r3, [r7, #4]
 80167fc:	681b      	ldr	r3, [r3, #0]
 80167fe:	f022 0201 	bic.w	r2, r2, #1
 8016802:	601a      	str	r2, [r3, #0]
 8016804:	e007      	b.n	8016816 <HAL_DMA_Init+0x196>
 8016806:	687b      	ldr	r3, [r7, #4]
 8016808:	681b      	ldr	r3, [r3, #0]
 801680a:	681a      	ldr	r2, [r3, #0]
 801680c:	687b      	ldr	r3, [r7, #4]
 801680e:	681b      	ldr	r3, [r3, #0]
 8016810:	f022 0201 	bic.w	r2, r2, #1
 8016814:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8016816:	e02f      	b.n	8016878 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8016818:	f7ff fb5a 	bl	8015ed0 <HAL_GetTick>
 801681c:	4602      	mov	r2, r0
 801681e:	693b      	ldr	r3, [r7, #16]
 8016820:	1ad3      	subs	r3, r2, r3
 8016822:	2b05      	cmp	r3, #5
 8016824:	d928      	bls.n	8016878 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8016826:	687b      	ldr	r3, [r7, #4]
 8016828:	2220      	movs	r2, #32
 801682a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 801682c:	687b      	ldr	r3, [r7, #4]
 801682e:	2203      	movs	r2, #3
 8016830:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8016834:	2301      	movs	r3, #1
 8016836:	e246      	b.n	8016cc6 <HAL_DMA_Init+0x646>
 8016838:	40020010 	.word	0x40020010
 801683c:	40020028 	.word	0x40020028
 8016840:	40020040 	.word	0x40020040
 8016844:	40020058 	.word	0x40020058
 8016848:	40020070 	.word	0x40020070
 801684c:	40020088 	.word	0x40020088
 8016850:	400200a0 	.word	0x400200a0
 8016854:	400200b8 	.word	0x400200b8
 8016858:	40020410 	.word	0x40020410
 801685c:	40020428 	.word	0x40020428
 8016860:	40020440 	.word	0x40020440
 8016864:	40020458 	.word	0x40020458
 8016868:	40020470 	.word	0x40020470
 801686c:	40020488 	.word	0x40020488
 8016870:	400204a0 	.word	0x400204a0
 8016874:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8016878:	687b      	ldr	r3, [r7, #4]
 801687a:	681b      	ldr	r3, [r3, #0]
 801687c:	681b      	ldr	r3, [r3, #0]
 801687e:	f003 0301 	and.w	r3, r3, #1
 8016882:	2b00      	cmp	r3, #0
 8016884:	d1c8      	bne.n	8016818 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8016886:	687b      	ldr	r3, [r7, #4]
 8016888:	681b      	ldr	r3, [r3, #0]
 801688a:	681b      	ldr	r3, [r3, #0]
 801688c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 801688e:	697a      	ldr	r2, [r7, #20]
 8016890:	4b83      	ldr	r3, [pc, #524]	; (8016aa0 <HAL_DMA_Init+0x420>)
 8016892:	4013      	ands	r3, r2
 8016894:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8016896:	687b      	ldr	r3, [r7, #4]
 8016898:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801689a:	687b      	ldr	r3, [r7, #4]
 801689c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 801689e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80168a0:	687b      	ldr	r3, [r7, #4]
 80168a2:	691b      	ldr	r3, [r3, #16]
 80168a4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80168a6:	687b      	ldr	r3, [r7, #4]
 80168a8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80168aa:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80168ac:	687b      	ldr	r3, [r7, #4]
 80168ae:	699b      	ldr	r3, [r3, #24]
 80168b0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80168b2:	687b      	ldr	r3, [r7, #4]
 80168b4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80168b6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80168b8:	687b      	ldr	r3, [r7, #4]
 80168ba:	6a1b      	ldr	r3, [r3, #32]
 80168bc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80168be:	697a      	ldr	r2, [r7, #20]
 80168c0:	4313      	orrs	r3, r2
 80168c2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80168c4:	687b      	ldr	r3, [r7, #4]
 80168c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80168c8:	2b04      	cmp	r3, #4
 80168ca:	d107      	bne.n	80168dc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80168cc:	687b      	ldr	r3, [r7, #4]
 80168ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80168d0:	687b      	ldr	r3, [r7, #4]
 80168d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80168d4:	4313      	orrs	r3, r2
 80168d6:	697a      	ldr	r2, [r7, #20]
 80168d8:	4313      	orrs	r3, r2
 80168da:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80168dc:	4b71      	ldr	r3, [pc, #452]	; (8016aa4 <HAL_DMA_Init+0x424>)
 80168de:	681a      	ldr	r2, [r3, #0]
 80168e0:	4b71      	ldr	r3, [pc, #452]	; (8016aa8 <HAL_DMA_Init+0x428>)
 80168e2:	4013      	ands	r3, r2
 80168e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80168e8:	d328      	bcc.n	801693c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80168ea:	687b      	ldr	r3, [r7, #4]
 80168ec:	685b      	ldr	r3, [r3, #4]
 80168ee:	2b28      	cmp	r3, #40	; 0x28
 80168f0:	d903      	bls.n	80168fa <HAL_DMA_Init+0x27a>
 80168f2:	687b      	ldr	r3, [r7, #4]
 80168f4:	685b      	ldr	r3, [r3, #4]
 80168f6:	2b2e      	cmp	r3, #46	; 0x2e
 80168f8:	d917      	bls.n	801692a <HAL_DMA_Init+0x2aa>
 80168fa:	687b      	ldr	r3, [r7, #4]
 80168fc:	685b      	ldr	r3, [r3, #4]
 80168fe:	2b3e      	cmp	r3, #62	; 0x3e
 8016900:	d903      	bls.n	801690a <HAL_DMA_Init+0x28a>
 8016902:	687b      	ldr	r3, [r7, #4]
 8016904:	685b      	ldr	r3, [r3, #4]
 8016906:	2b42      	cmp	r3, #66	; 0x42
 8016908:	d90f      	bls.n	801692a <HAL_DMA_Init+0x2aa>
 801690a:	687b      	ldr	r3, [r7, #4]
 801690c:	685b      	ldr	r3, [r3, #4]
 801690e:	2b46      	cmp	r3, #70	; 0x46
 8016910:	d903      	bls.n	801691a <HAL_DMA_Init+0x29a>
 8016912:	687b      	ldr	r3, [r7, #4]
 8016914:	685b      	ldr	r3, [r3, #4]
 8016916:	2b48      	cmp	r3, #72	; 0x48
 8016918:	d907      	bls.n	801692a <HAL_DMA_Init+0x2aa>
 801691a:	687b      	ldr	r3, [r7, #4]
 801691c:	685b      	ldr	r3, [r3, #4]
 801691e:	2b4e      	cmp	r3, #78	; 0x4e
 8016920:	d905      	bls.n	801692e <HAL_DMA_Init+0x2ae>
 8016922:	687b      	ldr	r3, [r7, #4]
 8016924:	685b      	ldr	r3, [r3, #4]
 8016926:	2b52      	cmp	r3, #82	; 0x52
 8016928:	d801      	bhi.n	801692e <HAL_DMA_Init+0x2ae>
 801692a:	2301      	movs	r3, #1
 801692c:	e000      	b.n	8016930 <HAL_DMA_Init+0x2b0>
 801692e:	2300      	movs	r3, #0
 8016930:	2b00      	cmp	r3, #0
 8016932:	d003      	beq.n	801693c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8016934:	697b      	ldr	r3, [r7, #20]
 8016936:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801693a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 801693c:	687b      	ldr	r3, [r7, #4]
 801693e:	681b      	ldr	r3, [r3, #0]
 8016940:	697a      	ldr	r2, [r7, #20]
 8016942:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8016944:	687b      	ldr	r3, [r7, #4]
 8016946:	681b      	ldr	r3, [r3, #0]
 8016948:	695b      	ldr	r3, [r3, #20]
 801694a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 801694c:	697b      	ldr	r3, [r7, #20]
 801694e:	f023 0307 	bic.w	r3, r3, #7
 8016952:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8016954:	687b      	ldr	r3, [r7, #4]
 8016956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016958:	697a      	ldr	r2, [r7, #20]
 801695a:	4313      	orrs	r3, r2
 801695c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801695e:	687b      	ldr	r3, [r7, #4]
 8016960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016962:	2b04      	cmp	r3, #4
 8016964:	d117      	bne.n	8016996 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8016966:	687b      	ldr	r3, [r7, #4]
 8016968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801696a:	697a      	ldr	r2, [r7, #20]
 801696c:	4313      	orrs	r3, r2
 801696e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8016970:	687b      	ldr	r3, [r7, #4]
 8016972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016974:	2b00      	cmp	r3, #0
 8016976:	d00e      	beq.n	8016996 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8016978:	6878      	ldr	r0, [r7, #4]
 801697a:	f002 f821 	bl	80189c0 <DMA_CheckFifoParam>
 801697e:	4603      	mov	r3, r0
 8016980:	2b00      	cmp	r3, #0
 8016982:	d008      	beq.n	8016996 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8016984:	687b      	ldr	r3, [r7, #4]
 8016986:	2240      	movs	r2, #64	; 0x40
 8016988:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 801698a:	687b      	ldr	r3, [r7, #4]
 801698c:	2201      	movs	r2, #1
 801698e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8016992:	2301      	movs	r3, #1
 8016994:	e197      	b.n	8016cc6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8016996:	687b      	ldr	r3, [r7, #4]
 8016998:	681b      	ldr	r3, [r3, #0]
 801699a:	697a      	ldr	r2, [r7, #20]
 801699c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 801699e:	6878      	ldr	r0, [r7, #4]
 80169a0:	f001 ff5c 	bl	801885c <DMA_CalcBaseAndBitshift>
 80169a4:	4603      	mov	r3, r0
 80169a6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80169a8:	687b      	ldr	r3, [r7, #4]
 80169aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80169ac:	f003 031f 	and.w	r3, r3, #31
 80169b0:	223f      	movs	r2, #63	; 0x3f
 80169b2:	409a      	lsls	r2, r3
 80169b4:	68bb      	ldr	r3, [r7, #8]
 80169b6:	609a      	str	r2, [r3, #8]
 80169b8:	e0cd      	b.n	8016b56 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80169ba:	687b      	ldr	r3, [r7, #4]
 80169bc:	681b      	ldr	r3, [r3, #0]
 80169be:	4a3b      	ldr	r2, [pc, #236]	; (8016aac <HAL_DMA_Init+0x42c>)
 80169c0:	4293      	cmp	r3, r2
 80169c2:	d022      	beq.n	8016a0a <HAL_DMA_Init+0x38a>
 80169c4:	687b      	ldr	r3, [r7, #4]
 80169c6:	681b      	ldr	r3, [r3, #0]
 80169c8:	4a39      	ldr	r2, [pc, #228]	; (8016ab0 <HAL_DMA_Init+0x430>)
 80169ca:	4293      	cmp	r3, r2
 80169cc:	d01d      	beq.n	8016a0a <HAL_DMA_Init+0x38a>
 80169ce:	687b      	ldr	r3, [r7, #4]
 80169d0:	681b      	ldr	r3, [r3, #0]
 80169d2:	4a38      	ldr	r2, [pc, #224]	; (8016ab4 <HAL_DMA_Init+0x434>)
 80169d4:	4293      	cmp	r3, r2
 80169d6:	d018      	beq.n	8016a0a <HAL_DMA_Init+0x38a>
 80169d8:	687b      	ldr	r3, [r7, #4]
 80169da:	681b      	ldr	r3, [r3, #0]
 80169dc:	4a36      	ldr	r2, [pc, #216]	; (8016ab8 <HAL_DMA_Init+0x438>)
 80169de:	4293      	cmp	r3, r2
 80169e0:	d013      	beq.n	8016a0a <HAL_DMA_Init+0x38a>
 80169e2:	687b      	ldr	r3, [r7, #4]
 80169e4:	681b      	ldr	r3, [r3, #0]
 80169e6:	4a35      	ldr	r2, [pc, #212]	; (8016abc <HAL_DMA_Init+0x43c>)
 80169e8:	4293      	cmp	r3, r2
 80169ea:	d00e      	beq.n	8016a0a <HAL_DMA_Init+0x38a>
 80169ec:	687b      	ldr	r3, [r7, #4]
 80169ee:	681b      	ldr	r3, [r3, #0]
 80169f0:	4a33      	ldr	r2, [pc, #204]	; (8016ac0 <HAL_DMA_Init+0x440>)
 80169f2:	4293      	cmp	r3, r2
 80169f4:	d009      	beq.n	8016a0a <HAL_DMA_Init+0x38a>
 80169f6:	687b      	ldr	r3, [r7, #4]
 80169f8:	681b      	ldr	r3, [r3, #0]
 80169fa:	4a32      	ldr	r2, [pc, #200]	; (8016ac4 <HAL_DMA_Init+0x444>)
 80169fc:	4293      	cmp	r3, r2
 80169fe:	d004      	beq.n	8016a0a <HAL_DMA_Init+0x38a>
 8016a00:	687b      	ldr	r3, [r7, #4]
 8016a02:	681b      	ldr	r3, [r3, #0]
 8016a04:	4a30      	ldr	r2, [pc, #192]	; (8016ac8 <HAL_DMA_Init+0x448>)
 8016a06:	4293      	cmp	r3, r2
 8016a08:	d101      	bne.n	8016a0e <HAL_DMA_Init+0x38e>
 8016a0a:	2301      	movs	r3, #1
 8016a0c:	e000      	b.n	8016a10 <HAL_DMA_Init+0x390>
 8016a0e:	2300      	movs	r3, #0
 8016a10:	2b00      	cmp	r3, #0
 8016a12:	f000 8097 	beq.w	8016b44 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8016a16:	687b      	ldr	r3, [r7, #4]
 8016a18:	681b      	ldr	r3, [r3, #0]
 8016a1a:	4a24      	ldr	r2, [pc, #144]	; (8016aac <HAL_DMA_Init+0x42c>)
 8016a1c:	4293      	cmp	r3, r2
 8016a1e:	d021      	beq.n	8016a64 <HAL_DMA_Init+0x3e4>
 8016a20:	687b      	ldr	r3, [r7, #4]
 8016a22:	681b      	ldr	r3, [r3, #0]
 8016a24:	4a22      	ldr	r2, [pc, #136]	; (8016ab0 <HAL_DMA_Init+0x430>)
 8016a26:	4293      	cmp	r3, r2
 8016a28:	d01c      	beq.n	8016a64 <HAL_DMA_Init+0x3e4>
 8016a2a:	687b      	ldr	r3, [r7, #4]
 8016a2c:	681b      	ldr	r3, [r3, #0]
 8016a2e:	4a21      	ldr	r2, [pc, #132]	; (8016ab4 <HAL_DMA_Init+0x434>)
 8016a30:	4293      	cmp	r3, r2
 8016a32:	d017      	beq.n	8016a64 <HAL_DMA_Init+0x3e4>
 8016a34:	687b      	ldr	r3, [r7, #4]
 8016a36:	681b      	ldr	r3, [r3, #0]
 8016a38:	4a1f      	ldr	r2, [pc, #124]	; (8016ab8 <HAL_DMA_Init+0x438>)
 8016a3a:	4293      	cmp	r3, r2
 8016a3c:	d012      	beq.n	8016a64 <HAL_DMA_Init+0x3e4>
 8016a3e:	687b      	ldr	r3, [r7, #4]
 8016a40:	681b      	ldr	r3, [r3, #0]
 8016a42:	4a1e      	ldr	r2, [pc, #120]	; (8016abc <HAL_DMA_Init+0x43c>)
 8016a44:	4293      	cmp	r3, r2
 8016a46:	d00d      	beq.n	8016a64 <HAL_DMA_Init+0x3e4>
 8016a48:	687b      	ldr	r3, [r7, #4]
 8016a4a:	681b      	ldr	r3, [r3, #0]
 8016a4c:	4a1c      	ldr	r2, [pc, #112]	; (8016ac0 <HAL_DMA_Init+0x440>)
 8016a4e:	4293      	cmp	r3, r2
 8016a50:	d008      	beq.n	8016a64 <HAL_DMA_Init+0x3e4>
 8016a52:	687b      	ldr	r3, [r7, #4]
 8016a54:	681b      	ldr	r3, [r3, #0]
 8016a56:	4a1b      	ldr	r2, [pc, #108]	; (8016ac4 <HAL_DMA_Init+0x444>)
 8016a58:	4293      	cmp	r3, r2
 8016a5a:	d003      	beq.n	8016a64 <HAL_DMA_Init+0x3e4>
 8016a5c:	687b      	ldr	r3, [r7, #4]
 8016a5e:	681b      	ldr	r3, [r3, #0]
 8016a60:	4a19      	ldr	r2, [pc, #100]	; (8016ac8 <HAL_DMA_Init+0x448>)
 8016a62:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8016a64:	687b      	ldr	r3, [r7, #4]
 8016a66:	2202      	movs	r2, #2
 8016a68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8016a6c:	687b      	ldr	r3, [r7, #4]
 8016a6e:	2200      	movs	r2, #0
 8016a70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8016a74:	687b      	ldr	r3, [r7, #4]
 8016a76:	681b      	ldr	r3, [r3, #0]
 8016a78:	681b      	ldr	r3, [r3, #0]
 8016a7a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8016a7c:	697a      	ldr	r2, [r7, #20]
 8016a7e:	4b13      	ldr	r3, [pc, #76]	; (8016acc <HAL_DMA_Init+0x44c>)
 8016a80:	4013      	ands	r3, r2
 8016a82:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8016a84:	687b      	ldr	r3, [r7, #4]
 8016a86:	689b      	ldr	r3, [r3, #8]
 8016a88:	2b40      	cmp	r3, #64	; 0x40
 8016a8a:	d021      	beq.n	8016ad0 <HAL_DMA_Init+0x450>
 8016a8c:	687b      	ldr	r3, [r7, #4]
 8016a8e:	689b      	ldr	r3, [r3, #8]
 8016a90:	2b80      	cmp	r3, #128	; 0x80
 8016a92:	d102      	bne.n	8016a9a <HAL_DMA_Init+0x41a>
 8016a94:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8016a98:	e01b      	b.n	8016ad2 <HAL_DMA_Init+0x452>
 8016a9a:	2300      	movs	r3, #0
 8016a9c:	e019      	b.n	8016ad2 <HAL_DMA_Init+0x452>
 8016a9e:	bf00      	nop
 8016aa0:	fe10803f 	.word	0xfe10803f
 8016aa4:	5c001000 	.word	0x5c001000
 8016aa8:	ffff0000 	.word	0xffff0000
 8016aac:	58025408 	.word	0x58025408
 8016ab0:	5802541c 	.word	0x5802541c
 8016ab4:	58025430 	.word	0x58025430
 8016ab8:	58025444 	.word	0x58025444
 8016abc:	58025458 	.word	0x58025458
 8016ac0:	5802546c 	.word	0x5802546c
 8016ac4:	58025480 	.word	0x58025480
 8016ac8:	58025494 	.word	0x58025494
 8016acc:	fffe000f 	.word	0xfffe000f
 8016ad0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8016ad2:	687a      	ldr	r2, [r7, #4]
 8016ad4:	68d2      	ldr	r2, [r2, #12]
 8016ad6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8016ad8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8016ada:	687b      	ldr	r3, [r7, #4]
 8016adc:	691b      	ldr	r3, [r3, #16]
 8016ade:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8016ae0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8016ae2:	687b      	ldr	r3, [r7, #4]
 8016ae4:	695b      	ldr	r3, [r3, #20]
 8016ae6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8016ae8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8016aea:	687b      	ldr	r3, [r7, #4]
 8016aec:	699b      	ldr	r3, [r3, #24]
 8016aee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8016af0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8016af2:	687b      	ldr	r3, [r7, #4]
 8016af4:	69db      	ldr	r3, [r3, #28]
 8016af6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8016af8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8016afa:	687b      	ldr	r3, [r7, #4]
 8016afc:	6a1b      	ldr	r3, [r3, #32]
 8016afe:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8016b00:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8016b02:	697a      	ldr	r2, [r7, #20]
 8016b04:	4313      	orrs	r3, r2
 8016b06:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8016b08:	687b      	ldr	r3, [r7, #4]
 8016b0a:	681b      	ldr	r3, [r3, #0]
 8016b0c:	697a      	ldr	r2, [r7, #20]
 8016b0e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8016b10:	687b      	ldr	r3, [r7, #4]
 8016b12:	681b      	ldr	r3, [r3, #0]
 8016b14:	461a      	mov	r2, r3
 8016b16:	4b6e      	ldr	r3, [pc, #440]	; (8016cd0 <HAL_DMA_Init+0x650>)
 8016b18:	4413      	add	r3, r2
 8016b1a:	4a6e      	ldr	r2, [pc, #440]	; (8016cd4 <HAL_DMA_Init+0x654>)
 8016b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8016b20:	091b      	lsrs	r3, r3, #4
 8016b22:	009a      	lsls	r2, r3, #2
 8016b24:	687b      	ldr	r3, [r7, #4]
 8016b26:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8016b28:	6878      	ldr	r0, [r7, #4]
 8016b2a:	f001 fe97 	bl	801885c <DMA_CalcBaseAndBitshift>
 8016b2e:	4603      	mov	r3, r0
 8016b30:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8016b32:	687b      	ldr	r3, [r7, #4]
 8016b34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016b36:	f003 031f 	and.w	r3, r3, #31
 8016b3a:	2201      	movs	r2, #1
 8016b3c:	409a      	lsls	r2, r3
 8016b3e:	68fb      	ldr	r3, [r7, #12]
 8016b40:	605a      	str	r2, [r3, #4]
 8016b42:	e008      	b.n	8016b56 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8016b44:	687b      	ldr	r3, [r7, #4]
 8016b46:	2240      	movs	r2, #64	; 0x40
 8016b48:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8016b4a:	687b      	ldr	r3, [r7, #4]
 8016b4c:	2203      	movs	r2, #3
 8016b4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8016b52:	2301      	movs	r3, #1
 8016b54:	e0b7      	b.n	8016cc6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8016b56:	687b      	ldr	r3, [r7, #4]
 8016b58:	681b      	ldr	r3, [r3, #0]
 8016b5a:	4a5f      	ldr	r2, [pc, #380]	; (8016cd8 <HAL_DMA_Init+0x658>)
 8016b5c:	4293      	cmp	r3, r2
 8016b5e:	d072      	beq.n	8016c46 <HAL_DMA_Init+0x5c6>
 8016b60:	687b      	ldr	r3, [r7, #4]
 8016b62:	681b      	ldr	r3, [r3, #0]
 8016b64:	4a5d      	ldr	r2, [pc, #372]	; (8016cdc <HAL_DMA_Init+0x65c>)
 8016b66:	4293      	cmp	r3, r2
 8016b68:	d06d      	beq.n	8016c46 <HAL_DMA_Init+0x5c6>
 8016b6a:	687b      	ldr	r3, [r7, #4]
 8016b6c:	681b      	ldr	r3, [r3, #0]
 8016b6e:	4a5c      	ldr	r2, [pc, #368]	; (8016ce0 <HAL_DMA_Init+0x660>)
 8016b70:	4293      	cmp	r3, r2
 8016b72:	d068      	beq.n	8016c46 <HAL_DMA_Init+0x5c6>
 8016b74:	687b      	ldr	r3, [r7, #4]
 8016b76:	681b      	ldr	r3, [r3, #0]
 8016b78:	4a5a      	ldr	r2, [pc, #360]	; (8016ce4 <HAL_DMA_Init+0x664>)
 8016b7a:	4293      	cmp	r3, r2
 8016b7c:	d063      	beq.n	8016c46 <HAL_DMA_Init+0x5c6>
 8016b7e:	687b      	ldr	r3, [r7, #4]
 8016b80:	681b      	ldr	r3, [r3, #0]
 8016b82:	4a59      	ldr	r2, [pc, #356]	; (8016ce8 <HAL_DMA_Init+0x668>)
 8016b84:	4293      	cmp	r3, r2
 8016b86:	d05e      	beq.n	8016c46 <HAL_DMA_Init+0x5c6>
 8016b88:	687b      	ldr	r3, [r7, #4]
 8016b8a:	681b      	ldr	r3, [r3, #0]
 8016b8c:	4a57      	ldr	r2, [pc, #348]	; (8016cec <HAL_DMA_Init+0x66c>)
 8016b8e:	4293      	cmp	r3, r2
 8016b90:	d059      	beq.n	8016c46 <HAL_DMA_Init+0x5c6>
 8016b92:	687b      	ldr	r3, [r7, #4]
 8016b94:	681b      	ldr	r3, [r3, #0]
 8016b96:	4a56      	ldr	r2, [pc, #344]	; (8016cf0 <HAL_DMA_Init+0x670>)
 8016b98:	4293      	cmp	r3, r2
 8016b9a:	d054      	beq.n	8016c46 <HAL_DMA_Init+0x5c6>
 8016b9c:	687b      	ldr	r3, [r7, #4]
 8016b9e:	681b      	ldr	r3, [r3, #0]
 8016ba0:	4a54      	ldr	r2, [pc, #336]	; (8016cf4 <HAL_DMA_Init+0x674>)
 8016ba2:	4293      	cmp	r3, r2
 8016ba4:	d04f      	beq.n	8016c46 <HAL_DMA_Init+0x5c6>
 8016ba6:	687b      	ldr	r3, [r7, #4]
 8016ba8:	681b      	ldr	r3, [r3, #0]
 8016baa:	4a53      	ldr	r2, [pc, #332]	; (8016cf8 <HAL_DMA_Init+0x678>)
 8016bac:	4293      	cmp	r3, r2
 8016bae:	d04a      	beq.n	8016c46 <HAL_DMA_Init+0x5c6>
 8016bb0:	687b      	ldr	r3, [r7, #4]
 8016bb2:	681b      	ldr	r3, [r3, #0]
 8016bb4:	4a51      	ldr	r2, [pc, #324]	; (8016cfc <HAL_DMA_Init+0x67c>)
 8016bb6:	4293      	cmp	r3, r2
 8016bb8:	d045      	beq.n	8016c46 <HAL_DMA_Init+0x5c6>
 8016bba:	687b      	ldr	r3, [r7, #4]
 8016bbc:	681b      	ldr	r3, [r3, #0]
 8016bbe:	4a50      	ldr	r2, [pc, #320]	; (8016d00 <HAL_DMA_Init+0x680>)
 8016bc0:	4293      	cmp	r3, r2
 8016bc2:	d040      	beq.n	8016c46 <HAL_DMA_Init+0x5c6>
 8016bc4:	687b      	ldr	r3, [r7, #4]
 8016bc6:	681b      	ldr	r3, [r3, #0]
 8016bc8:	4a4e      	ldr	r2, [pc, #312]	; (8016d04 <HAL_DMA_Init+0x684>)
 8016bca:	4293      	cmp	r3, r2
 8016bcc:	d03b      	beq.n	8016c46 <HAL_DMA_Init+0x5c6>
 8016bce:	687b      	ldr	r3, [r7, #4]
 8016bd0:	681b      	ldr	r3, [r3, #0]
 8016bd2:	4a4d      	ldr	r2, [pc, #308]	; (8016d08 <HAL_DMA_Init+0x688>)
 8016bd4:	4293      	cmp	r3, r2
 8016bd6:	d036      	beq.n	8016c46 <HAL_DMA_Init+0x5c6>
 8016bd8:	687b      	ldr	r3, [r7, #4]
 8016bda:	681b      	ldr	r3, [r3, #0]
 8016bdc:	4a4b      	ldr	r2, [pc, #300]	; (8016d0c <HAL_DMA_Init+0x68c>)
 8016bde:	4293      	cmp	r3, r2
 8016be0:	d031      	beq.n	8016c46 <HAL_DMA_Init+0x5c6>
 8016be2:	687b      	ldr	r3, [r7, #4]
 8016be4:	681b      	ldr	r3, [r3, #0]
 8016be6:	4a4a      	ldr	r2, [pc, #296]	; (8016d10 <HAL_DMA_Init+0x690>)
 8016be8:	4293      	cmp	r3, r2
 8016bea:	d02c      	beq.n	8016c46 <HAL_DMA_Init+0x5c6>
 8016bec:	687b      	ldr	r3, [r7, #4]
 8016bee:	681b      	ldr	r3, [r3, #0]
 8016bf0:	4a48      	ldr	r2, [pc, #288]	; (8016d14 <HAL_DMA_Init+0x694>)
 8016bf2:	4293      	cmp	r3, r2
 8016bf4:	d027      	beq.n	8016c46 <HAL_DMA_Init+0x5c6>
 8016bf6:	687b      	ldr	r3, [r7, #4]
 8016bf8:	681b      	ldr	r3, [r3, #0]
 8016bfa:	4a47      	ldr	r2, [pc, #284]	; (8016d18 <HAL_DMA_Init+0x698>)
 8016bfc:	4293      	cmp	r3, r2
 8016bfe:	d022      	beq.n	8016c46 <HAL_DMA_Init+0x5c6>
 8016c00:	687b      	ldr	r3, [r7, #4]
 8016c02:	681b      	ldr	r3, [r3, #0]
 8016c04:	4a45      	ldr	r2, [pc, #276]	; (8016d1c <HAL_DMA_Init+0x69c>)
 8016c06:	4293      	cmp	r3, r2
 8016c08:	d01d      	beq.n	8016c46 <HAL_DMA_Init+0x5c6>
 8016c0a:	687b      	ldr	r3, [r7, #4]
 8016c0c:	681b      	ldr	r3, [r3, #0]
 8016c0e:	4a44      	ldr	r2, [pc, #272]	; (8016d20 <HAL_DMA_Init+0x6a0>)
 8016c10:	4293      	cmp	r3, r2
 8016c12:	d018      	beq.n	8016c46 <HAL_DMA_Init+0x5c6>
 8016c14:	687b      	ldr	r3, [r7, #4]
 8016c16:	681b      	ldr	r3, [r3, #0]
 8016c18:	4a42      	ldr	r2, [pc, #264]	; (8016d24 <HAL_DMA_Init+0x6a4>)
 8016c1a:	4293      	cmp	r3, r2
 8016c1c:	d013      	beq.n	8016c46 <HAL_DMA_Init+0x5c6>
 8016c1e:	687b      	ldr	r3, [r7, #4]
 8016c20:	681b      	ldr	r3, [r3, #0]
 8016c22:	4a41      	ldr	r2, [pc, #260]	; (8016d28 <HAL_DMA_Init+0x6a8>)
 8016c24:	4293      	cmp	r3, r2
 8016c26:	d00e      	beq.n	8016c46 <HAL_DMA_Init+0x5c6>
 8016c28:	687b      	ldr	r3, [r7, #4]
 8016c2a:	681b      	ldr	r3, [r3, #0]
 8016c2c:	4a3f      	ldr	r2, [pc, #252]	; (8016d2c <HAL_DMA_Init+0x6ac>)
 8016c2e:	4293      	cmp	r3, r2
 8016c30:	d009      	beq.n	8016c46 <HAL_DMA_Init+0x5c6>
 8016c32:	687b      	ldr	r3, [r7, #4]
 8016c34:	681b      	ldr	r3, [r3, #0]
 8016c36:	4a3e      	ldr	r2, [pc, #248]	; (8016d30 <HAL_DMA_Init+0x6b0>)
 8016c38:	4293      	cmp	r3, r2
 8016c3a:	d004      	beq.n	8016c46 <HAL_DMA_Init+0x5c6>
 8016c3c:	687b      	ldr	r3, [r7, #4]
 8016c3e:	681b      	ldr	r3, [r3, #0]
 8016c40:	4a3c      	ldr	r2, [pc, #240]	; (8016d34 <HAL_DMA_Init+0x6b4>)
 8016c42:	4293      	cmp	r3, r2
 8016c44:	d101      	bne.n	8016c4a <HAL_DMA_Init+0x5ca>
 8016c46:	2301      	movs	r3, #1
 8016c48:	e000      	b.n	8016c4c <HAL_DMA_Init+0x5cc>
 8016c4a:	2300      	movs	r3, #0
 8016c4c:	2b00      	cmp	r3, #0
 8016c4e:	d032      	beq.n	8016cb6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8016c50:	6878      	ldr	r0, [r7, #4]
 8016c52:	f001 ff31 	bl	8018ab8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8016c56:	687b      	ldr	r3, [r7, #4]
 8016c58:	689b      	ldr	r3, [r3, #8]
 8016c5a:	2b80      	cmp	r3, #128	; 0x80
 8016c5c:	d102      	bne.n	8016c64 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8016c5e:	687b      	ldr	r3, [r7, #4]
 8016c60:	2200      	movs	r2, #0
 8016c62:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8016c64:	687b      	ldr	r3, [r7, #4]
 8016c66:	685a      	ldr	r2, [r3, #4]
 8016c68:	687b      	ldr	r3, [r7, #4]
 8016c6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016c6c:	b2d2      	uxtb	r2, r2
 8016c6e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8016c70:	687b      	ldr	r3, [r7, #4]
 8016c72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016c74:	687a      	ldr	r2, [r7, #4]
 8016c76:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8016c78:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8016c7a:	687b      	ldr	r3, [r7, #4]
 8016c7c:	685b      	ldr	r3, [r3, #4]
 8016c7e:	2b00      	cmp	r3, #0
 8016c80:	d010      	beq.n	8016ca4 <HAL_DMA_Init+0x624>
 8016c82:	687b      	ldr	r3, [r7, #4]
 8016c84:	685b      	ldr	r3, [r3, #4]
 8016c86:	2b08      	cmp	r3, #8
 8016c88:	d80c      	bhi.n	8016ca4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8016c8a:	6878      	ldr	r0, [r7, #4]
 8016c8c:	f001 ffae 	bl	8018bec <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8016c90:	687b      	ldr	r3, [r7, #4]
 8016c92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016c94:	2200      	movs	r2, #0
 8016c96:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8016c98:	687b      	ldr	r3, [r7, #4]
 8016c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016c9c:	687a      	ldr	r2, [r7, #4]
 8016c9e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8016ca0:	605a      	str	r2, [r3, #4]
 8016ca2:	e008      	b.n	8016cb6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8016ca4:	687b      	ldr	r3, [r7, #4]
 8016ca6:	2200      	movs	r2, #0
 8016ca8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8016caa:	687b      	ldr	r3, [r7, #4]
 8016cac:	2200      	movs	r2, #0
 8016cae:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8016cb0:	687b      	ldr	r3, [r7, #4]
 8016cb2:	2200      	movs	r2, #0
 8016cb4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8016cb6:	687b      	ldr	r3, [r7, #4]
 8016cb8:	2200      	movs	r2, #0
 8016cba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8016cbc:	687b      	ldr	r3, [r7, #4]
 8016cbe:	2201      	movs	r2, #1
 8016cc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8016cc4:	2300      	movs	r3, #0
}
 8016cc6:	4618      	mov	r0, r3
 8016cc8:	3718      	adds	r7, #24
 8016cca:	46bd      	mov	sp, r7
 8016ccc:	bd80      	pop	{r7, pc}
 8016cce:	bf00      	nop
 8016cd0:	a7fdabf8 	.word	0xa7fdabf8
 8016cd4:	cccccccd 	.word	0xcccccccd
 8016cd8:	40020010 	.word	0x40020010
 8016cdc:	40020028 	.word	0x40020028
 8016ce0:	40020040 	.word	0x40020040
 8016ce4:	40020058 	.word	0x40020058
 8016ce8:	40020070 	.word	0x40020070
 8016cec:	40020088 	.word	0x40020088
 8016cf0:	400200a0 	.word	0x400200a0
 8016cf4:	400200b8 	.word	0x400200b8
 8016cf8:	40020410 	.word	0x40020410
 8016cfc:	40020428 	.word	0x40020428
 8016d00:	40020440 	.word	0x40020440
 8016d04:	40020458 	.word	0x40020458
 8016d08:	40020470 	.word	0x40020470
 8016d0c:	40020488 	.word	0x40020488
 8016d10:	400204a0 	.word	0x400204a0
 8016d14:	400204b8 	.word	0x400204b8
 8016d18:	58025408 	.word	0x58025408
 8016d1c:	5802541c 	.word	0x5802541c
 8016d20:	58025430 	.word	0x58025430
 8016d24:	58025444 	.word	0x58025444
 8016d28:	58025458 	.word	0x58025458
 8016d2c:	5802546c 	.word	0x5802546c
 8016d30:	58025480 	.word	0x58025480
 8016d34:	58025494 	.word	0x58025494

08016d38 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8016d38:	b580      	push	{r7, lr}
 8016d3a:	b086      	sub	sp, #24
 8016d3c:	af00      	add	r7, sp, #0
 8016d3e:	60f8      	str	r0, [r7, #12]
 8016d40:	60b9      	str	r1, [r7, #8]
 8016d42:	607a      	str	r2, [r7, #4]
 8016d44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8016d46:	2300      	movs	r3, #0
 8016d48:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8016d4a:	68fb      	ldr	r3, [r7, #12]
 8016d4c:	2b00      	cmp	r3, #0
 8016d4e:	d101      	bne.n	8016d54 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8016d50:	2301      	movs	r3, #1
 8016d52:	e226      	b.n	80171a2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8016d54:	68fb      	ldr	r3, [r7, #12]
 8016d56:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8016d5a:	2b01      	cmp	r3, #1
 8016d5c:	d101      	bne.n	8016d62 <HAL_DMA_Start_IT+0x2a>
 8016d5e:	2302      	movs	r3, #2
 8016d60:	e21f      	b.n	80171a2 <HAL_DMA_Start_IT+0x46a>
 8016d62:	68fb      	ldr	r3, [r7, #12]
 8016d64:	2201      	movs	r2, #1
 8016d66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8016d6a:	68fb      	ldr	r3, [r7, #12]
 8016d6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8016d70:	b2db      	uxtb	r3, r3
 8016d72:	2b01      	cmp	r3, #1
 8016d74:	f040 820a 	bne.w	801718c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8016d78:	68fb      	ldr	r3, [r7, #12]
 8016d7a:	2202      	movs	r2, #2
 8016d7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8016d80:	68fb      	ldr	r3, [r7, #12]
 8016d82:	2200      	movs	r2, #0
 8016d84:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8016d86:	68fb      	ldr	r3, [r7, #12]
 8016d88:	681b      	ldr	r3, [r3, #0]
 8016d8a:	4a68      	ldr	r2, [pc, #416]	; (8016f2c <HAL_DMA_Start_IT+0x1f4>)
 8016d8c:	4293      	cmp	r3, r2
 8016d8e:	d04a      	beq.n	8016e26 <HAL_DMA_Start_IT+0xee>
 8016d90:	68fb      	ldr	r3, [r7, #12]
 8016d92:	681b      	ldr	r3, [r3, #0]
 8016d94:	4a66      	ldr	r2, [pc, #408]	; (8016f30 <HAL_DMA_Start_IT+0x1f8>)
 8016d96:	4293      	cmp	r3, r2
 8016d98:	d045      	beq.n	8016e26 <HAL_DMA_Start_IT+0xee>
 8016d9a:	68fb      	ldr	r3, [r7, #12]
 8016d9c:	681b      	ldr	r3, [r3, #0]
 8016d9e:	4a65      	ldr	r2, [pc, #404]	; (8016f34 <HAL_DMA_Start_IT+0x1fc>)
 8016da0:	4293      	cmp	r3, r2
 8016da2:	d040      	beq.n	8016e26 <HAL_DMA_Start_IT+0xee>
 8016da4:	68fb      	ldr	r3, [r7, #12]
 8016da6:	681b      	ldr	r3, [r3, #0]
 8016da8:	4a63      	ldr	r2, [pc, #396]	; (8016f38 <HAL_DMA_Start_IT+0x200>)
 8016daa:	4293      	cmp	r3, r2
 8016dac:	d03b      	beq.n	8016e26 <HAL_DMA_Start_IT+0xee>
 8016dae:	68fb      	ldr	r3, [r7, #12]
 8016db0:	681b      	ldr	r3, [r3, #0]
 8016db2:	4a62      	ldr	r2, [pc, #392]	; (8016f3c <HAL_DMA_Start_IT+0x204>)
 8016db4:	4293      	cmp	r3, r2
 8016db6:	d036      	beq.n	8016e26 <HAL_DMA_Start_IT+0xee>
 8016db8:	68fb      	ldr	r3, [r7, #12]
 8016dba:	681b      	ldr	r3, [r3, #0]
 8016dbc:	4a60      	ldr	r2, [pc, #384]	; (8016f40 <HAL_DMA_Start_IT+0x208>)
 8016dbe:	4293      	cmp	r3, r2
 8016dc0:	d031      	beq.n	8016e26 <HAL_DMA_Start_IT+0xee>
 8016dc2:	68fb      	ldr	r3, [r7, #12]
 8016dc4:	681b      	ldr	r3, [r3, #0]
 8016dc6:	4a5f      	ldr	r2, [pc, #380]	; (8016f44 <HAL_DMA_Start_IT+0x20c>)
 8016dc8:	4293      	cmp	r3, r2
 8016dca:	d02c      	beq.n	8016e26 <HAL_DMA_Start_IT+0xee>
 8016dcc:	68fb      	ldr	r3, [r7, #12]
 8016dce:	681b      	ldr	r3, [r3, #0]
 8016dd0:	4a5d      	ldr	r2, [pc, #372]	; (8016f48 <HAL_DMA_Start_IT+0x210>)
 8016dd2:	4293      	cmp	r3, r2
 8016dd4:	d027      	beq.n	8016e26 <HAL_DMA_Start_IT+0xee>
 8016dd6:	68fb      	ldr	r3, [r7, #12]
 8016dd8:	681b      	ldr	r3, [r3, #0]
 8016dda:	4a5c      	ldr	r2, [pc, #368]	; (8016f4c <HAL_DMA_Start_IT+0x214>)
 8016ddc:	4293      	cmp	r3, r2
 8016dde:	d022      	beq.n	8016e26 <HAL_DMA_Start_IT+0xee>
 8016de0:	68fb      	ldr	r3, [r7, #12]
 8016de2:	681b      	ldr	r3, [r3, #0]
 8016de4:	4a5a      	ldr	r2, [pc, #360]	; (8016f50 <HAL_DMA_Start_IT+0x218>)
 8016de6:	4293      	cmp	r3, r2
 8016de8:	d01d      	beq.n	8016e26 <HAL_DMA_Start_IT+0xee>
 8016dea:	68fb      	ldr	r3, [r7, #12]
 8016dec:	681b      	ldr	r3, [r3, #0]
 8016dee:	4a59      	ldr	r2, [pc, #356]	; (8016f54 <HAL_DMA_Start_IT+0x21c>)
 8016df0:	4293      	cmp	r3, r2
 8016df2:	d018      	beq.n	8016e26 <HAL_DMA_Start_IT+0xee>
 8016df4:	68fb      	ldr	r3, [r7, #12]
 8016df6:	681b      	ldr	r3, [r3, #0]
 8016df8:	4a57      	ldr	r2, [pc, #348]	; (8016f58 <HAL_DMA_Start_IT+0x220>)
 8016dfa:	4293      	cmp	r3, r2
 8016dfc:	d013      	beq.n	8016e26 <HAL_DMA_Start_IT+0xee>
 8016dfe:	68fb      	ldr	r3, [r7, #12]
 8016e00:	681b      	ldr	r3, [r3, #0]
 8016e02:	4a56      	ldr	r2, [pc, #344]	; (8016f5c <HAL_DMA_Start_IT+0x224>)
 8016e04:	4293      	cmp	r3, r2
 8016e06:	d00e      	beq.n	8016e26 <HAL_DMA_Start_IT+0xee>
 8016e08:	68fb      	ldr	r3, [r7, #12]
 8016e0a:	681b      	ldr	r3, [r3, #0]
 8016e0c:	4a54      	ldr	r2, [pc, #336]	; (8016f60 <HAL_DMA_Start_IT+0x228>)
 8016e0e:	4293      	cmp	r3, r2
 8016e10:	d009      	beq.n	8016e26 <HAL_DMA_Start_IT+0xee>
 8016e12:	68fb      	ldr	r3, [r7, #12]
 8016e14:	681b      	ldr	r3, [r3, #0]
 8016e16:	4a53      	ldr	r2, [pc, #332]	; (8016f64 <HAL_DMA_Start_IT+0x22c>)
 8016e18:	4293      	cmp	r3, r2
 8016e1a:	d004      	beq.n	8016e26 <HAL_DMA_Start_IT+0xee>
 8016e1c:	68fb      	ldr	r3, [r7, #12]
 8016e1e:	681b      	ldr	r3, [r3, #0]
 8016e20:	4a51      	ldr	r2, [pc, #324]	; (8016f68 <HAL_DMA_Start_IT+0x230>)
 8016e22:	4293      	cmp	r3, r2
 8016e24:	d108      	bne.n	8016e38 <HAL_DMA_Start_IT+0x100>
 8016e26:	68fb      	ldr	r3, [r7, #12]
 8016e28:	681b      	ldr	r3, [r3, #0]
 8016e2a:	681a      	ldr	r2, [r3, #0]
 8016e2c:	68fb      	ldr	r3, [r7, #12]
 8016e2e:	681b      	ldr	r3, [r3, #0]
 8016e30:	f022 0201 	bic.w	r2, r2, #1
 8016e34:	601a      	str	r2, [r3, #0]
 8016e36:	e007      	b.n	8016e48 <HAL_DMA_Start_IT+0x110>
 8016e38:	68fb      	ldr	r3, [r7, #12]
 8016e3a:	681b      	ldr	r3, [r3, #0]
 8016e3c:	681a      	ldr	r2, [r3, #0]
 8016e3e:	68fb      	ldr	r3, [r7, #12]
 8016e40:	681b      	ldr	r3, [r3, #0]
 8016e42:	f022 0201 	bic.w	r2, r2, #1
 8016e46:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8016e48:	683b      	ldr	r3, [r7, #0]
 8016e4a:	687a      	ldr	r2, [r7, #4]
 8016e4c:	68b9      	ldr	r1, [r7, #8]
 8016e4e:	68f8      	ldr	r0, [r7, #12]
 8016e50:	f001 fb58 	bl	8018504 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8016e54:	68fb      	ldr	r3, [r7, #12]
 8016e56:	681b      	ldr	r3, [r3, #0]
 8016e58:	4a34      	ldr	r2, [pc, #208]	; (8016f2c <HAL_DMA_Start_IT+0x1f4>)
 8016e5a:	4293      	cmp	r3, r2
 8016e5c:	d04a      	beq.n	8016ef4 <HAL_DMA_Start_IT+0x1bc>
 8016e5e:	68fb      	ldr	r3, [r7, #12]
 8016e60:	681b      	ldr	r3, [r3, #0]
 8016e62:	4a33      	ldr	r2, [pc, #204]	; (8016f30 <HAL_DMA_Start_IT+0x1f8>)
 8016e64:	4293      	cmp	r3, r2
 8016e66:	d045      	beq.n	8016ef4 <HAL_DMA_Start_IT+0x1bc>
 8016e68:	68fb      	ldr	r3, [r7, #12]
 8016e6a:	681b      	ldr	r3, [r3, #0]
 8016e6c:	4a31      	ldr	r2, [pc, #196]	; (8016f34 <HAL_DMA_Start_IT+0x1fc>)
 8016e6e:	4293      	cmp	r3, r2
 8016e70:	d040      	beq.n	8016ef4 <HAL_DMA_Start_IT+0x1bc>
 8016e72:	68fb      	ldr	r3, [r7, #12]
 8016e74:	681b      	ldr	r3, [r3, #0]
 8016e76:	4a30      	ldr	r2, [pc, #192]	; (8016f38 <HAL_DMA_Start_IT+0x200>)
 8016e78:	4293      	cmp	r3, r2
 8016e7a:	d03b      	beq.n	8016ef4 <HAL_DMA_Start_IT+0x1bc>
 8016e7c:	68fb      	ldr	r3, [r7, #12]
 8016e7e:	681b      	ldr	r3, [r3, #0]
 8016e80:	4a2e      	ldr	r2, [pc, #184]	; (8016f3c <HAL_DMA_Start_IT+0x204>)
 8016e82:	4293      	cmp	r3, r2
 8016e84:	d036      	beq.n	8016ef4 <HAL_DMA_Start_IT+0x1bc>
 8016e86:	68fb      	ldr	r3, [r7, #12]
 8016e88:	681b      	ldr	r3, [r3, #0]
 8016e8a:	4a2d      	ldr	r2, [pc, #180]	; (8016f40 <HAL_DMA_Start_IT+0x208>)
 8016e8c:	4293      	cmp	r3, r2
 8016e8e:	d031      	beq.n	8016ef4 <HAL_DMA_Start_IT+0x1bc>
 8016e90:	68fb      	ldr	r3, [r7, #12]
 8016e92:	681b      	ldr	r3, [r3, #0]
 8016e94:	4a2b      	ldr	r2, [pc, #172]	; (8016f44 <HAL_DMA_Start_IT+0x20c>)
 8016e96:	4293      	cmp	r3, r2
 8016e98:	d02c      	beq.n	8016ef4 <HAL_DMA_Start_IT+0x1bc>
 8016e9a:	68fb      	ldr	r3, [r7, #12]
 8016e9c:	681b      	ldr	r3, [r3, #0]
 8016e9e:	4a2a      	ldr	r2, [pc, #168]	; (8016f48 <HAL_DMA_Start_IT+0x210>)
 8016ea0:	4293      	cmp	r3, r2
 8016ea2:	d027      	beq.n	8016ef4 <HAL_DMA_Start_IT+0x1bc>
 8016ea4:	68fb      	ldr	r3, [r7, #12]
 8016ea6:	681b      	ldr	r3, [r3, #0]
 8016ea8:	4a28      	ldr	r2, [pc, #160]	; (8016f4c <HAL_DMA_Start_IT+0x214>)
 8016eaa:	4293      	cmp	r3, r2
 8016eac:	d022      	beq.n	8016ef4 <HAL_DMA_Start_IT+0x1bc>
 8016eae:	68fb      	ldr	r3, [r7, #12]
 8016eb0:	681b      	ldr	r3, [r3, #0]
 8016eb2:	4a27      	ldr	r2, [pc, #156]	; (8016f50 <HAL_DMA_Start_IT+0x218>)
 8016eb4:	4293      	cmp	r3, r2
 8016eb6:	d01d      	beq.n	8016ef4 <HAL_DMA_Start_IT+0x1bc>
 8016eb8:	68fb      	ldr	r3, [r7, #12]
 8016eba:	681b      	ldr	r3, [r3, #0]
 8016ebc:	4a25      	ldr	r2, [pc, #148]	; (8016f54 <HAL_DMA_Start_IT+0x21c>)
 8016ebe:	4293      	cmp	r3, r2
 8016ec0:	d018      	beq.n	8016ef4 <HAL_DMA_Start_IT+0x1bc>
 8016ec2:	68fb      	ldr	r3, [r7, #12]
 8016ec4:	681b      	ldr	r3, [r3, #0]
 8016ec6:	4a24      	ldr	r2, [pc, #144]	; (8016f58 <HAL_DMA_Start_IT+0x220>)
 8016ec8:	4293      	cmp	r3, r2
 8016eca:	d013      	beq.n	8016ef4 <HAL_DMA_Start_IT+0x1bc>
 8016ecc:	68fb      	ldr	r3, [r7, #12]
 8016ece:	681b      	ldr	r3, [r3, #0]
 8016ed0:	4a22      	ldr	r2, [pc, #136]	; (8016f5c <HAL_DMA_Start_IT+0x224>)
 8016ed2:	4293      	cmp	r3, r2
 8016ed4:	d00e      	beq.n	8016ef4 <HAL_DMA_Start_IT+0x1bc>
 8016ed6:	68fb      	ldr	r3, [r7, #12]
 8016ed8:	681b      	ldr	r3, [r3, #0]
 8016eda:	4a21      	ldr	r2, [pc, #132]	; (8016f60 <HAL_DMA_Start_IT+0x228>)
 8016edc:	4293      	cmp	r3, r2
 8016ede:	d009      	beq.n	8016ef4 <HAL_DMA_Start_IT+0x1bc>
 8016ee0:	68fb      	ldr	r3, [r7, #12]
 8016ee2:	681b      	ldr	r3, [r3, #0]
 8016ee4:	4a1f      	ldr	r2, [pc, #124]	; (8016f64 <HAL_DMA_Start_IT+0x22c>)
 8016ee6:	4293      	cmp	r3, r2
 8016ee8:	d004      	beq.n	8016ef4 <HAL_DMA_Start_IT+0x1bc>
 8016eea:	68fb      	ldr	r3, [r7, #12]
 8016eec:	681b      	ldr	r3, [r3, #0]
 8016eee:	4a1e      	ldr	r2, [pc, #120]	; (8016f68 <HAL_DMA_Start_IT+0x230>)
 8016ef0:	4293      	cmp	r3, r2
 8016ef2:	d101      	bne.n	8016ef8 <HAL_DMA_Start_IT+0x1c0>
 8016ef4:	2301      	movs	r3, #1
 8016ef6:	e000      	b.n	8016efa <HAL_DMA_Start_IT+0x1c2>
 8016ef8:	2300      	movs	r3, #0
 8016efa:	2b00      	cmp	r3, #0
 8016efc:	d036      	beq.n	8016f6c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8016efe:	68fb      	ldr	r3, [r7, #12]
 8016f00:	681b      	ldr	r3, [r3, #0]
 8016f02:	681b      	ldr	r3, [r3, #0]
 8016f04:	f023 021e 	bic.w	r2, r3, #30
 8016f08:	68fb      	ldr	r3, [r7, #12]
 8016f0a:	681b      	ldr	r3, [r3, #0]
 8016f0c:	f042 0216 	orr.w	r2, r2, #22
 8016f10:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8016f12:	68fb      	ldr	r3, [r7, #12]
 8016f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016f16:	2b00      	cmp	r3, #0
 8016f18:	d03e      	beq.n	8016f98 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8016f1a:	68fb      	ldr	r3, [r7, #12]
 8016f1c:	681b      	ldr	r3, [r3, #0]
 8016f1e:	681a      	ldr	r2, [r3, #0]
 8016f20:	68fb      	ldr	r3, [r7, #12]
 8016f22:	681b      	ldr	r3, [r3, #0]
 8016f24:	f042 0208 	orr.w	r2, r2, #8
 8016f28:	601a      	str	r2, [r3, #0]
 8016f2a:	e035      	b.n	8016f98 <HAL_DMA_Start_IT+0x260>
 8016f2c:	40020010 	.word	0x40020010
 8016f30:	40020028 	.word	0x40020028
 8016f34:	40020040 	.word	0x40020040
 8016f38:	40020058 	.word	0x40020058
 8016f3c:	40020070 	.word	0x40020070
 8016f40:	40020088 	.word	0x40020088
 8016f44:	400200a0 	.word	0x400200a0
 8016f48:	400200b8 	.word	0x400200b8
 8016f4c:	40020410 	.word	0x40020410
 8016f50:	40020428 	.word	0x40020428
 8016f54:	40020440 	.word	0x40020440
 8016f58:	40020458 	.word	0x40020458
 8016f5c:	40020470 	.word	0x40020470
 8016f60:	40020488 	.word	0x40020488
 8016f64:	400204a0 	.word	0x400204a0
 8016f68:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8016f6c:	68fb      	ldr	r3, [r7, #12]
 8016f6e:	681b      	ldr	r3, [r3, #0]
 8016f70:	681b      	ldr	r3, [r3, #0]
 8016f72:	f023 020e 	bic.w	r2, r3, #14
 8016f76:	68fb      	ldr	r3, [r7, #12]
 8016f78:	681b      	ldr	r3, [r3, #0]
 8016f7a:	f042 020a 	orr.w	r2, r2, #10
 8016f7e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8016f80:	68fb      	ldr	r3, [r7, #12]
 8016f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016f84:	2b00      	cmp	r3, #0
 8016f86:	d007      	beq.n	8016f98 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8016f88:	68fb      	ldr	r3, [r7, #12]
 8016f8a:	681b      	ldr	r3, [r3, #0]
 8016f8c:	681a      	ldr	r2, [r3, #0]
 8016f8e:	68fb      	ldr	r3, [r7, #12]
 8016f90:	681b      	ldr	r3, [r3, #0]
 8016f92:	f042 0204 	orr.w	r2, r2, #4
 8016f96:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8016f98:	68fb      	ldr	r3, [r7, #12]
 8016f9a:	681b      	ldr	r3, [r3, #0]
 8016f9c:	4a83      	ldr	r2, [pc, #524]	; (80171ac <HAL_DMA_Start_IT+0x474>)
 8016f9e:	4293      	cmp	r3, r2
 8016fa0:	d072      	beq.n	8017088 <HAL_DMA_Start_IT+0x350>
 8016fa2:	68fb      	ldr	r3, [r7, #12]
 8016fa4:	681b      	ldr	r3, [r3, #0]
 8016fa6:	4a82      	ldr	r2, [pc, #520]	; (80171b0 <HAL_DMA_Start_IT+0x478>)
 8016fa8:	4293      	cmp	r3, r2
 8016faa:	d06d      	beq.n	8017088 <HAL_DMA_Start_IT+0x350>
 8016fac:	68fb      	ldr	r3, [r7, #12]
 8016fae:	681b      	ldr	r3, [r3, #0]
 8016fb0:	4a80      	ldr	r2, [pc, #512]	; (80171b4 <HAL_DMA_Start_IT+0x47c>)
 8016fb2:	4293      	cmp	r3, r2
 8016fb4:	d068      	beq.n	8017088 <HAL_DMA_Start_IT+0x350>
 8016fb6:	68fb      	ldr	r3, [r7, #12]
 8016fb8:	681b      	ldr	r3, [r3, #0]
 8016fba:	4a7f      	ldr	r2, [pc, #508]	; (80171b8 <HAL_DMA_Start_IT+0x480>)
 8016fbc:	4293      	cmp	r3, r2
 8016fbe:	d063      	beq.n	8017088 <HAL_DMA_Start_IT+0x350>
 8016fc0:	68fb      	ldr	r3, [r7, #12]
 8016fc2:	681b      	ldr	r3, [r3, #0]
 8016fc4:	4a7d      	ldr	r2, [pc, #500]	; (80171bc <HAL_DMA_Start_IT+0x484>)
 8016fc6:	4293      	cmp	r3, r2
 8016fc8:	d05e      	beq.n	8017088 <HAL_DMA_Start_IT+0x350>
 8016fca:	68fb      	ldr	r3, [r7, #12]
 8016fcc:	681b      	ldr	r3, [r3, #0]
 8016fce:	4a7c      	ldr	r2, [pc, #496]	; (80171c0 <HAL_DMA_Start_IT+0x488>)
 8016fd0:	4293      	cmp	r3, r2
 8016fd2:	d059      	beq.n	8017088 <HAL_DMA_Start_IT+0x350>
 8016fd4:	68fb      	ldr	r3, [r7, #12]
 8016fd6:	681b      	ldr	r3, [r3, #0]
 8016fd8:	4a7a      	ldr	r2, [pc, #488]	; (80171c4 <HAL_DMA_Start_IT+0x48c>)
 8016fda:	4293      	cmp	r3, r2
 8016fdc:	d054      	beq.n	8017088 <HAL_DMA_Start_IT+0x350>
 8016fde:	68fb      	ldr	r3, [r7, #12]
 8016fe0:	681b      	ldr	r3, [r3, #0]
 8016fe2:	4a79      	ldr	r2, [pc, #484]	; (80171c8 <HAL_DMA_Start_IT+0x490>)
 8016fe4:	4293      	cmp	r3, r2
 8016fe6:	d04f      	beq.n	8017088 <HAL_DMA_Start_IT+0x350>
 8016fe8:	68fb      	ldr	r3, [r7, #12]
 8016fea:	681b      	ldr	r3, [r3, #0]
 8016fec:	4a77      	ldr	r2, [pc, #476]	; (80171cc <HAL_DMA_Start_IT+0x494>)
 8016fee:	4293      	cmp	r3, r2
 8016ff0:	d04a      	beq.n	8017088 <HAL_DMA_Start_IT+0x350>
 8016ff2:	68fb      	ldr	r3, [r7, #12]
 8016ff4:	681b      	ldr	r3, [r3, #0]
 8016ff6:	4a76      	ldr	r2, [pc, #472]	; (80171d0 <HAL_DMA_Start_IT+0x498>)
 8016ff8:	4293      	cmp	r3, r2
 8016ffa:	d045      	beq.n	8017088 <HAL_DMA_Start_IT+0x350>
 8016ffc:	68fb      	ldr	r3, [r7, #12]
 8016ffe:	681b      	ldr	r3, [r3, #0]
 8017000:	4a74      	ldr	r2, [pc, #464]	; (80171d4 <HAL_DMA_Start_IT+0x49c>)
 8017002:	4293      	cmp	r3, r2
 8017004:	d040      	beq.n	8017088 <HAL_DMA_Start_IT+0x350>
 8017006:	68fb      	ldr	r3, [r7, #12]
 8017008:	681b      	ldr	r3, [r3, #0]
 801700a:	4a73      	ldr	r2, [pc, #460]	; (80171d8 <HAL_DMA_Start_IT+0x4a0>)
 801700c:	4293      	cmp	r3, r2
 801700e:	d03b      	beq.n	8017088 <HAL_DMA_Start_IT+0x350>
 8017010:	68fb      	ldr	r3, [r7, #12]
 8017012:	681b      	ldr	r3, [r3, #0]
 8017014:	4a71      	ldr	r2, [pc, #452]	; (80171dc <HAL_DMA_Start_IT+0x4a4>)
 8017016:	4293      	cmp	r3, r2
 8017018:	d036      	beq.n	8017088 <HAL_DMA_Start_IT+0x350>
 801701a:	68fb      	ldr	r3, [r7, #12]
 801701c:	681b      	ldr	r3, [r3, #0]
 801701e:	4a70      	ldr	r2, [pc, #448]	; (80171e0 <HAL_DMA_Start_IT+0x4a8>)
 8017020:	4293      	cmp	r3, r2
 8017022:	d031      	beq.n	8017088 <HAL_DMA_Start_IT+0x350>
 8017024:	68fb      	ldr	r3, [r7, #12]
 8017026:	681b      	ldr	r3, [r3, #0]
 8017028:	4a6e      	ldr	r2, [pc, #440]	; (80171e4 <HAL_DMA_Start_IT+0x4ac>)
 801702a:	4293      	cmp	r3, r2
 801702c:	d02c      	beq.n	8017088 <HAL_DMA_Start_IT+0x350>
 801702e:	68fb      	ldr	r3, [r7, #12]
 8017030:	681b      	ldr	r3, [r3, #0]
 8017032:	4a6d      	ldr	r2, [pc, #436]	; (80171e8 <HAL_DMA_Start_IT+0x4b0>)
 8017034:	4293      	cmp	r3, r2
 8017036:	d027      	beq.n	8017088 <HAL_DMA_Start_IT+0x350>
 8017038:	68fb      	ldr	r3, [r7, #12]
 801703a:	681b      	ldr	r3, [r3, #0]
 801703c:	4a6b      	ldr	r2, [pc, #428]	; (80171ec <HAL_DMA_Start_IT+0x4b4>)
 801703e:	4293      	cmp	r3, r2
 8017040:	d022      	beq.n	8017088 <HAL_DMA_Start_IT+0x350>
 8017042:	68fb      	ldr	r3, [r7, #12]
 8017044:	681b      	ldr	r3, [r3, #0]
 8017046:	4a6a      	ldr	r2, [pc, #424]	; (80171f0 <HAL_DMA_Start_IT+0x4b8>)
 8017048:	4293      	cmp	r3, r2
 801704a:	d01d      	beq.n	8017088 <HAL_DMA_Start_IT+0x350>
 801704c:	68fb      	ldr	r3, [r7, #12]
 801704e:	681b      	ldr	r3, [r3, #0]
 8017050:	4a68      	ldr	r2, [pc, #416]	; (80171f4 <HAL_DMA_Start_IT+0x4bc>)
 8017052:	4293      	cmp	r3, r2
 8017054:	d018      	beq.n	8017088 <HAL_DMA_Start_IT+0x350>
 8017056:	68fb      	ldr	r3, [r7, #12]
 8017058:	681b      	ldr	r3, [r3, #0]
 801705a:	4a67      	ldr	r2, [pc, #412]	; (80171f8 <HAL_DMA_Start_IT+0x4c0>)
 801705c:	4293      	cmp	r3, r2
 801705e:	d013      	beq.n	8017088 <HAL_DMA_Start_IT+0x350>
 8017060:	68fb      	ldr	r3, [r7, #12]
 8017062:	681b      	ldr	r3, [r3, #0]
 8017064:	4a65      	ldr	r2, [pc, #404]	; (80171fc <HAL_DMA_Start_IT+0x4c4>)
 8017066:	4293      	cmp	r3, r2
 8017068:	d00e      	beq.n	8017088 <HAL_DMA_Start_IT+0x350>
 801706a:	68fb      	ldr	r3, [r7, #12]
 801706c:	681b      	ldr	r3, [r3, #0]
 801706e:	4a64      	ldr	r2, [pc, #400]	; (8017200 <HAL_DMA_Start_IT+0x4c8>)
 8017070:	4293      	cmp	r3, r2
 8017072:	d009      	beq.n	8017088 <HAL_DMA_Start_IT+0x350>
 8017074:	68fb      	ldr	r3, [r7, #12]
 8017076:	681b      	ldr	r3, [r3, #0]
 8017078:	4a62      	ldr	r2, [pc, #392]	; (8017204 <HAL_DMA_Start_IT+0x4cc>)
 801707a:	4293      	cmp	r3, r2
 801707c:	d004      	beq.n	8017088 <HAL_DMA_Start_IT+0x350>
 801707e:	68fb      	ldr	r3, [r7, #12]
 8017080:	681b      	ldr	r3, [r3, #0]
 8017082:	4a61      	ldr	r2, [pc, #388]	; (8017208 <HAL_DMA_Start_IT+0x4d0>)
 8017084:	4293      	cmp	r3, r2
 8017086:	d101      	bne.n	801708c <HAL_DMA_Start_IT+0x354>
 8017088:	2301      	movs	r3, #1
 801708a:	e000      	b.n	801708e <HAL_DMA_Start_IT+0x356>
 801708c:	2300      	movs	r3, #0
 801708e:	2b00      	cmp	r3, #0
 8017090:	d01a      	beq.n	80170c8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8017092:	68fb      	ldr	r3, [r7, #12]
 8017094:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017096:	681b      	ldr	r3, [r3, #0]
 8017098:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801709c:	2b00      	cmp	r3, #0
 801709e:	d007      	beq.n	80170b0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80170a0:	68fb      	ldr	r3, [r7, #12]
 80170a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80170a4:	681a      	ldr	r2, [r3, #0]
 80170a6:	68fb      	ldr	r3, [r7, #12]
 80170a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80170aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80170ae:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80170b0:	68fb      	ldr	r3, [r7, #12]
 80170b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80170b4:	2b00      	cmp	r3, #0
 80170b6:	d007      	beq.n	80170c8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80170b8:	68fb      	ldr	r3, [r7, #12]
 80170ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80170bc:	681a      	ldr	r2, [r3, #0]
 80170be:	68fb      	ldr	r3, [r7, #12]
 80170c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80170c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80170c6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80170c8:	68fb      	ldr	r3, [r7, #12]
 80170ca:	681b      	ldr	r3, [r3, #0]
 80170cc:	4a37      	ldr	r2, [pc, #220]	; (80171ac <HAL_DMA_Start_IT+0x474>)
 80170ce:	4293      	cmp	r3, r2
 80170d0:	d04a      	beq.n	8017168 <HAL_DMA_Start_IT+0x430>
 80170d2:	68fb      	ldr	r3, [r7, #12]
 80170d4:	681b      	ldr	r3, [r3, #0]
 80170d6:	4a36      	ldr	r2, [pc, #216]	; (80171b0 <HAL_DMA_Start_IT+0x478>)
 80170d8:	4293      	cmp	r3, r2
 80170da:	d045      	beq.n	8017168 <HAL_DMA_Start_IT+0x430>
 80170dc:	68fb      	ldr	r3, [r7, #12]
 80170de:	681b      	ldr	r3, [r3, #0]
 80170e0:	4a34      	ldr	r2, [pc, #208]	; (80171b4 <HAL_DMA_Start_IT+0x47c>)
 80170e2:	4293      	cmp	r3, r2
 80170e4:	d040      	beq.n	8017168 <HAL_DMA_Start_IT+0x430>
 80170e6:	68fb      	ldr	r3, [r7, #12]
 80170e8:	681b      	ldr	r3, [r3, #0]
 80170ea:	4a33      	ldr	r2, [pc, #204]	; (80171b8 <HAL_DMA_Start_IT+0x480>)
 80170ec:	4293      	cmp	r3, r2
 80170ee:	d03b      	beq.n	8017168 <HAL_DMA_Start_IT+0x430>
 80170f0:	68fb      	ldr	r3, [r7, #12]
 80170f2:	681b      	ldr	r3, [r3, #0]
 80170f4:	4a31      	ldr	r2, [pc, #196]	; (80171bc <HAL_DMA_Start_IT+0x484>)
 80170f6:	4293      	cmp	r3, r2
 80170f8:	d036      	beq.n	8017168 <HAL_DMA_Start_IT+0x430>
 80170fa:	68fb      	ldr	r3, [r7, #12]
 80170fc:	681b      	ldr	r3, [r3, #0]
 80170fe:	4a30      	ldr	r2, [pc, #192]	; (80171c0 <HAL_DMA_Start_IT+0x488>)
 8017100:	4293      	cmp	r3, r2
 8017102:	d031      	beq.n	8017168 <HAL_DMA_Start_IT+0x430>
 8017104:	68fb      	ldr	r3, [r7, #12]
 8017106:	681b      	ldr	r3, [r3, #0]
 8017108:	4a2e      	ldr	r2, [pc, #184]	; (80171c4 <HAL_DMA_Start_IT+0x48c>)
 801710a:	4293      	cmp	r3, r2
 801710c:	d02c      	beq.n	8017168 <HAL_DMA_Start_IT+0x430>
 801710e:	68fb      	ldr	r3, [r7, #12]
 8017110:	681b      	ldr	r3, [r3, #0]
 8017112:	4a2d      	ldr	r2, [pc, #180]	; (80171c8 <HAL_DMA_Start_IT+0x490>)
 8017114:	4293      	cmp	r3, r2
 8017116:	d027      	beq.n	8017168 <HAL_DMA_Start_IT+0x430>
 8017118:	68fb      	ldr	r3, [r7, #12]
 801711a:	681b      	ldr	r3, [r3, #0]
 801711c:	4a2b      	ldr	r2, [pc, #172]	; (80171cc <HAL_DMA_Start_IT+0x494>)
 801711e:	4293      	cmp	r3, r2
 8017120:	d022      	beq.n	8017168 <HAL_DMA_Start_IT+0x430>
 8017122:	68fb      	ldr	r3, [r7, #12]
 8017124:	681b      	ldr	r3, [r3, #0]
 8017126:	4a2a      	ldr	r2, [pc, #168]	; (80171d0 <HAL_DMA_Start_IT+0x498>)
 8017128:	4293      	cmp	r3, r2
 801712a:	d01d      	beq.n	8017168 <HAL_DMA_Start_IT+0x430>
 801712c:	68fb      	ldr	r3, [r7, #12]
 801712e:	681b      	ldr	r3, [r3, #0]
 8017130:	4a28      	ldr	r2, [pc, #160]	; (80171d4 <HAL_DMA_Start_IT+0x49c>)
 8017132:	4293      	cmp	r3, r2
 8017134:	d018      	beq.n	8017168 <HAL_DMA_Start_IT+0x430>
 8017136:	68fb      	ldr	r3, [r7, #12]
 8017138:	681b      	ldr	r3, [r3, #0]
 801713a:	4a27      	ldr	r2, [pc, #156]	; (80171d8 <HAL_DMA_Start_IT+0x4a0>)
 801713c:	4293      	cmp	r3, r2
 801713e:	d013      	beq.n	8017168 <HAL_DMA_Start_IT+0x430>
 8017140:	68fb      	ldr	r3, [r7, #12]
 8017142:	681b      	ldr	r3, [r3, #0]
 8017144:	4a25      	ldr	r2, [pc, #148]	; (80171dc <HAL_DMA_Start_IT+0x4a4>)
 8017146:	4293      	cmp	r3, r2
 8017148:	d00e      	beq.n	8017168 <HAL_DMA_Start_IT+0x430>
 801714a:	68fb      	ldr	r3, [r7, #12]
 801714c:	681b      	ldr	r3, [r3, #0]
 801714e:	4a24      	ldr	r2, [pc, #144]	; (80171e0 <HAL_DMA_Start_IT+0x4a8>)
 8017150:	4293      	cmp	r3, r2
 8017152:	d009      	beq.n	8017168 <HAL_DMA_Start_IT+0x430>
 8017154:	68fb      	ldr	r3, [r7, #12]
 8017156:	681b      	ldr	r3, [r3, #0]
 8017158:	4a22      	ldr	r2, [pc, #136]	; (80171e4 <HAL_DMA_Start_IT+0x4ac>)
 801715a:	4293      	cmp	r3, r2
 801715c:	d004      	beq.n	8017168 <HAL_DMA_Start_IT+0x430>
 801715e:	68fb      	ldr	r3, [r7, #12]
 8017160:	681b      	ldr	r3, [r3, #0]
 8017162:	4a21      	ldr	r2, [pc, #132]	; (80171e8 <HAL_DMA_Start_IT+0x4b0>)
 8017164:	4293      	cmp	r3, r2
 8017166:	d108      	bne.n	801717a <HAL_DMA_Start_IT+0x442>
 8017168:	68fb      	ldr	r3, [r7, #12]
 801716a:	681b      	ldr	r3, [r3, #0]
 801716c:	681a      	ldr	r2, [r3, #0]
 801716e:	68fb      	ldr	r3, [r7, #12]
 8017170:	681b      	ldr	r3, [r3, #0]
 8017172:	f042 0201 	orr.w	r2, r2, #1
 8017176:	601a      	str	r2, [r3, #0]
 8017178:	e012      	b.n	80171a0 <HAL_DMA_Start_IT+0x468>
 801717a:	68fb      	ldr	r3, [r7, #12]
 801717c:	681b      	ldr	r3, [r3, #0]
 801717e:	681a      	ldr	r2, [r3, #0]
 8017180:	68fb      	ldr	r3, [r7, #12]
 8017182:	681b      	ldr	r3, [r3, #0]
 8017184:	f042 0201 	orr.w	r2, r2, #1
 8017188:	601a      	str	r2, [r3, #0]
 801718a:	e009      	b.n	80171a0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 801718c:	68fb      	ldr	r3, [r7, #12]
 801718e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8017192:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8017194:	68fb      	ldr	r3, [r7, #12]
 8017196:	2200      	movs	r2, #0
 8017198:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 801719c:	2301      	movs	r3, #1
 801719e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80171a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80171a2:	4618      	mov	r0, r3
 80171a4:	3718      	adds	r7, #24
 80171a6:	46bd      	mov	sp, r7
 80171a8:	bd80      	pop	{r7, pc}
 80171aa:	bf00      	nop
 80171ac:	40020010 	.word	0x40020010
 80171b0:	40020028 	.word	0x40020028
 80171b4:	40020040 	.word	0x40020040
 80171b8:	40020058 	.word	0x40020058
 80171bc:	40020070 	.word	0x40020070
 80171c0:	40020088 	.word	0x40020088
 80171c4:	400200a0 	.word	0x400200a0
 80171c8:	400200b8 	.word	0x400200b8
 80171cc:	40020410 	.word	0x40020410
 80171d0:	40020428 	.word	0x40020428
 80171d4:	40020440 	.word	0x40020440
 80171d8:	40020458 	.word	0x40020458
 80171dc:	40020470 	.word	0x40020470
 80171e0:	40020488 	.word	0x40020488
 80171e4:	400204a0 	.word	0x400204a0
 80171e8:	400204b8 	.word	0x400204b8
 80171ec:	58025408 	.word	0x58025408
 80171f0:	5802541c 	.word	0x5802541c
 80171f4:	58025430 	.word	0x58025430
 80171f8:	58025444 	.word	0x58025444
 80171fc:	58025458 	.word	0x58025458
 8017200:	5802546c 	.word	0x5802546c
 8017204:	58025480 	.word	0x58025480
 8017208:	58025494 	.word	0x58025494

0801720c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 801720c:	b580      	push	{r7, lr}
 801720e:	b084      	sub	sp, #16
 8017210:	af00      	add	r7, sp, #0
 8017212:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8017214:	687b      	ldr	r3, [r7, #4]
 8017216:	2b00      	cmp	r3, #0
 8017218:	d101      	bne.n	801721e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 801721a:	2301      	movs	r3, #1
 801721c:	e237      	b.n	801768e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 801721e:	687b      	ldr	r3, [r7, #4]
 8017220:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8017224:	b2db      	uxtb	r3, r3
 8017226:	2b02      	cmp	r3, #2
 8017228:	d004      	beq.n	8017234 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801722a:	687b      	ldr	r3, [r7, #4]
 801722c:	2280      	movs	r2, #128	; 0x80
 801722e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8017230:	2301      	movs	r3, #1
 8017232:	e22c      	b.n	801768e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8017234:	687b      	ldr	r3, [r7, #4]
 8017236:	681b      	ldr	r3, [r3, #0]
 8017238:	4a5c      	ldr	r2, [pc, #368]	; (80173ac <HAL_DMA_Abort_IT+0x1a0>)
 801723a:	4293      	cmp	r3, r2
 801723c:	d04a      	beq.n	80172d4 <HAL_DMA_Abort_IT+0xc8>
 801723e:	687b      	ldr	r3, [r7, #4]
 8017240:	681b      	ldr	r3, [r3, #0]
 8017242:	4a5b      	ldr	r2, [pc, #364]	; (80173b0 <HAL_DMA_Abort_IT+0x1a4>)
 8017244:	4293      	cmp	r3, r2
 8017246:	d045      	beq.n	80172d4 <HAL_DMA_Abort_IT+0xc8>
 8017248:	687b      	ldr	r3, [r7, #4]
 801724a:	681b      	ldr	r3, [r3, #0]
 801724c:	4a59      	ldr	r2, [pc, #356]	; (80173b4 <HAL_DMA_Abort_IT+0x1a8>)
 801724e:	4293      	cmp	r3, r2
 8017250:	d040      	beq.n	80172d4 <HAL_DMA_Abort_IT+0xc8>
 8017252:	687b      	ldr	r3, [r7, #4]
 8017254:	681b      	ldr	r3, [r3, #0]
 8017256:	4a58      	ldr	r2, [pc, #352]	; (80173b8 <HAL_DMA_Abort_IT+0x1ac>)
 8017258:	4293      	cmp	r3, r2
 801725a:	d03b      	beq.n	80172d4 <HAL_DMA_Abort_IT+0xc8>
 801725c:	687b      	ldr	r3, [r7, #4]
 801725e:	681b      	ldr	r3, [r3, #0]
 8017260:	4a56      	ldr	r2, [pc, #344]	; (80173bc <HAL_DMA_Abort_IT+0x1b0>)
 8017262:	4293      	cmp	r3, r2
 8017264:	d036      	beq.n	80172d4 <HAL_DMA_Abort_IT+0xc8>
 8017266:	687b      	ldr	r3, [r7, #4]
 8017268:	681b      	ldr	r3, [r3, #0]
 801726a:	4a55      	ldr	r2, [pc, #340]	; (80173c0 <HAL_DMA_Abort_IT+0x1b4>)
 801726c:	4293      	cmp	r3, r2
 801726e:	d031      	beq.n	80172d4 <HAL_DMA_Abort_IT+0xc8>
 8017270:	687b      	ldr	r3, [r7, #4]
 8017272:	681b      	ldr	r3, [r3, #0]
 8017274:	4a53      	ldr	r2, [pc, #332]	; (80173c4 <HAL_DMA_Abort_IT+0x1b8>)
 8017276:	4293      	cmp	r3, r2
 8017278:	d02c      	beq.n	80172d4 <HAL_DMA_Abort_IT+0xc8>
 801727a:	687b      	ldr	r3, [r7, #4]
 801727c:	681b      	ldr	r3, [r3, #0]
 801727e:	4a52      	ldr	r2, [pc, #328]	; (80173c8 <HAL_DMA_Abort_IT+0x1bc>)
 8017280:	4293      	cmp	r3, r2
 8017282:	d027      	beq.n	80172d4 <HAL_DMA_Abort_IT+0xc8>
 8017284:	687b      	ldr	r3, [r7, #4]
 8017286:	681b      	ldr	r3, [r3, #0]
 8017288:	4a50      	ldr	r2, [pc, #320]	; (80173cc <HAL_DMA_Abort_IT+0x1c0>)
 801728a:	4293      	cmp	r3, r2
 801728c:	d022      	beq.n	80172d4 <HAL_DMA_Abort_IT+0xc8>
 801728e:	687b      	ldr	r3, [r7, #4]
 8017290:	681b      	ldr	r3, [r3, #0]
 8017292:	4a4f      	ldr	r2, [pc, #316]	; (80173d0 <HAL_DMA_Abort_IT+0x1c4>)
 8017294:	4293      	cmp	r3, r2
 8017296:	d01d      	beq.n	80172d4 <HAL_DMA_Abort_IT+0xc8>
 8017298:	687b      	ldr	r3, [r7, #4]
 801729a:	681b      	ldr	r3, [r3, #0]
 801729c:	4a4d      	ldr	r2, [pc, #308]	; (80173d4 <HAL_DMA_Abort_IT+0x1c8>)
 801729e:	4293      	cmp	r3, r2
 80172a0:	d018      	beq.n	80172d4 <HAL_DMA_Abort_IT+0xc8>
 80172a2:	687b      	ldr	r3, [r7, #4]
 80172a4:	681b      	ldr	r3, [r3, #0]
 80172a6:	4a4c      	ldr	r2, [pc, #304]	; (80173d8 <HAL_DMA_Abort_IT+0x1cc>)
 80172a8:	4293      	cmp	r3, r2
 80172aa:	d013      	beq.n	80172d4 <HAL_DMA_Abort_IT+0xc8>
 80172ac:	687b      	ldr	r3, [r7, #4]
 80172ae:	681b      	ldr	r3, [r3, #0]
 80172b0:	4a4a      	ldr	r2, [pc, #296]	; (80173dc <HAL_DMA_Abort_IT+0x1d0>)
 80172b2:	4293      	cmp	r3, r2
 80172b4:	d00e      	beq.n	80172d4 <HAL_DMA_Abort_IT+0xc8>
 80172b6:	687b      	ldr	r3, [r7, #4]
 80172b8:	681b      	ldr	r3, [r3, #0]
 80172ba:	4a49      	ldr	r2, [pc, #292]	; (80173e0 <HAL_DMA_Abort_IT+0x1d4>)
 80172bc:	4293      	cmp	r3, r2
 80172be:	d009      	beq.n	80172d4 <HAL_DMA_Abort_IT+0xc8>
 80172c0:	687b      	ldr	r3, [r7, #4]
 80172c2:	681b      	ldr	r3, [r3, #0]
 80172c4:	4a47      	ldr	r2, [pc, #284]	; (80173e4 <HAL_DMA_Abort_IT+0x1d8>)
 80172c6:	4293      	cmp	r3, r2
 80172c8:	d004      	beq.n	80172d4 <HAL_DMA_Abort_IT+0xc8>
 80172ca:	687b      	ldr	r3, [r7, #4]
 80172cc:	681b      	ldr	r3, [r3, #0]
 80172ce:	4a46      	ldr	r2, [pc, #280]	; (80173e8 <HAL_DMA_Abort_IT+0x1dc>)
 80172d0:	4293      	cmp	r3, r2
 80172d2:	d101      	bne.n	80172d8 <HAL_DMA_Abort_IT+0xcc>
 80172d4:	2301      	movs	r3, #1
 80172d6:	e000      	b.n	80172da <HAL_DMA_Abort_IT+0xce>
 80172d8:	2300      	movs	r3, #0
 80172da:	2b00      	cmp	r3, #0
 80172dc:	f000 8086 	beq.w	80173ec <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80172e0:	687b      	ldr	r3, [r7, #4]
 80172e2:	2204      	movs	r2, #4
 80172e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80172e8:	687b      	ldr	r3, [r7, #4]
 80172ea:	681b      	ldr	r3, [r3, #0]
 80172ec:	4a2f      	ldr	r2, [pc, #188]	; (80173ac <HAL_DMA_Abort_IT+0x1a0>)
 80172ee:	4293      	cmp	r3, r2
 80172f0:	d04a      	beq.n	8017388 <HAL_DMA_Abort_IT+0x17c>
 80172f2:	687b      	ldr	r3, [r7, #4]
 80172f4:	681b      	ldr	r3, [r3, #0]
 80172f6:	4a2e      	ldr	r2, [pc, #184]	; (80173b0 <HAL_DMA_Abort_IT+0x1a4>)
 80172f8:	4293      	cmp	r3, r2
 80172fa:	d045      	beq.n	8017388 <HAL_DMA_Abort_IT+0x17c>
 80172fc:	687b      	ldr	r3, [r7, #4]
 80172fe:	681b      	ldr	r3, [r3, #0]
 8017300:	4a2c      	ldr	r2, [pc, #176]	; (80173b4 <HAL_DMA_Abort_IT+0x1a8>)
 8017302:	4293      	cmp	r3, r2
 8017304:	d040      	beq.n	8017388 <HAL_DMA_Abort_IT+0x17c>
 8017306:	687b      	ldr	r3, [r7, #4]
 8017308:	681b      	ldr	r3, [r3, #0]
 801730a:	4a2b      	ldr	r2, [pc, #172]	; (80173b8 <HAL_DMA_Abort_IT+0x1ac>)
 801730c:	4293      	cmp	r3, r2
 801730e:	d03b      	beq.n	8017388 <HAL_DMA_Abort_IT+0x17c>
 8017310:	687b      	ldr	r3, [r7, #4]
 8017312:	681b      	ldr	r3, [r3, #0]
 8017314:	4a29      	ldr	r2, [pc, #164]	; (80173bc <HAL_DMA_Abort_IT+0x1b0>)
 8017316:	4293      	cmp	r3, r2
 8017318:	d036      	beq.n	8017388 <HAL_DMA_Abort_IT+0x17c>
 801731a:	687b      	ldr	r3, [r7, #4]
 801731c:	681b      	ldr	r3, [r3, #0]
 801731e:	4a28      	ldr	r2, [pc, #160]	; (80173c0 <HAL_DMA_Abort_IT+0x1b4>)
 8017320:	4293      	cmp	r3, r2
 8017322:	d031      	beq.n	8017388 <HAL_DMA_Abort_IT+0x17c>
 8017324:	687b      	ldr	r3, [r7, #4]
 8017326:	681b      	ldr	r3, [r3, #0]
 8017328:	4a26      	ldr	r2, [pc, #152]	; (80173c4 <HAL_DMA_Abort_IT+0x1b8>)
 801732a:	4293      	cmp	r3, r2
 801732c:	d02c      	beq.n	8017388 <HAL_DMA_Abort_IT+0x17c>
 801732e:	687b      	ldr	r3, [r7, #4]
 8017330:	681b      	ldr	r3, [r3, #0]
 8017332:	4a25      	ldr	r2, [pc, #148]	; (80173c8 <HAL_DMA_Abort_IT+0x1bc>)
 8017334:	4293      	cmp	r3, r2
 8017336:	d027      	beq.n	8017388 <HAL_DMA_Abort_IT+0x17c>
 8017338:	687b      	ldr	r3, [r7, #4]
 801733a:	681b      	ldr	r3, [r3, #0]
 801733c:	4a23      	ldr	r2, [pc, #140]	; (80173cc <HAL_DMA_Abort_IT+0x1c0>)
 801733e:	4293      	cmp	r3, r2
 8017340:	d022      	beq.n	8017388 <HAL_DMA_Abort_IT+0x17c>
 8017342:	687b      	ldr	r3, [r7, #4]
 8017344:	681b      	ldr	r3, [r3, #0]
 8017346:	4a22      	ldr	r2, [pc, #136]	; (80173d0 <HAL_DMA_Abort_IT+0x1c4>)
 8017348:	4293      	cmp	r3, r2
 801734a:	d01d      	beq.n	8017388 <HAL_DMA_Abort_IT+0x17c>
 801734c:	687b      	ldr	r3, [r7, #4]
 801734e:	681b      	ldr	r3, [r3, #0]
 8017350:	4a20      	ldr	r2, [pc, #128]	; (80173d4 <HAL_DMA_Abort_IT+0x1c8>)
 8017352:	4293      	cmp	r3, r2
 8017354:	d018      	beq.n	8017388 <HAL_DMA_Abort_IT+0x17c>
 8017356:	687b      	ldr	r3, [r7, #4]
 8017358:	681b      	ldr	r3, [r3, #0]
 801735a:	4a1f      	ldr	r2, [pc, #124]	; (80173d8 <HAL_DMA_Abort_IT+0x1cc>)
 801735c:	4293      	cmp	r3, r2
 801735e:	d013      	beq.n	8017388 <HAL_DMA_Abort_IT+0x17c>
 8017360:	687b      	ldr	r3, [r7, #4]
 8017362:	681b      	ldr	r3, [r3, #0]
 8017364:	4a1d      	ldr	r2, [pc, #116]	; (80173dc <HAL_DMA_Abort_IT+0x1d0>)
 8017366:	4293      	cmp	r3, r2
 8017368:	d00e      	beq.n	8017388 <HAL_DMA_Abort_IT+0x17c>
 801736a:	687b      	ldr	r3, [r7, #4]
 801736c:	681b      	ldr	r3, [r3, #0]
 801736e:	4a1c      	ldr	r2, [pc, #112]	; (80173e0 <HAL_DMA_Abort_IT+0x1d4>)
 8017370:	4293      	cmp	r3, r2
 8017372:	d009      	beq.n	8017388 <HAL_DMA_Abort_IT+0x17c>
 8017374:	687b      	ldr	r3, [r7, #4]
 8017376:	681b      	ldr	r3, [r3, #0]
 8017378:	4a1a      	ldr	r2, [pc, #104]	; (80173e4 <HAL_DMA_Abort_IT+0x1d8>)
 801737a:	4293      	cmp	r3, r2
 801737c:	d004      	beq.n	8017388 <HAL_DMA_Abort_IT+0x17c>
 801737e:	687b      	ldr	r3, [r7, #4]
 8017380:	681b      	ldr	r3, [r3, #0]
 8017382:	4a19      	ldr	r2, [pc, #100]	; (80173e8 <HAL_DMA_Abort_IT+0x1dc>)
 8017384:	4293      	cmp	r3, r2
 8017386:	d108      	bne.n	801739a <HAL_DMA_Abort_IT+0x18e>
 8017388:	687b      	ldr	r3, [r7, #4]
 801738a:	681b      	ldr	r3, [r3, #0]
 801738c:	681a      	ldr	r2, [r3, #0]
 801738e:	687b      	ldr	r3, [r7, #4]
 8017390:	681b      	ldr	r3, [r3, #0]
 8017392:	f022 0201 	bic.w	r2, r2, #1
 8017396:	601a      	str	r2, [r3, #0]
 8017398:	e178      	b.n	801768c <HAL_DMA_Abort_IT+0x480>
 801739a:	687b      	ldr	r3, [r7, #4]
 801739c:	681b      	ldr	r3, [r3, #0]
 801739e:	681a      	ldr	r2, [r3, #0]
 80173a0:	687b      	ldr	r3, [r7, #4]
 80173a2:	681b      	ldr	r3, [r3, #0]
 80173a4:	f022 0201 	bic.w	r2, r2, #1
 80173a8:	601a      	str	r2, [r3, #0]
 80173aa:	e16f      	b.n	801768c <HAL_DMA_Abort_IT+0x480>
 80173ac:	40020010 	.word	0x40020010
 80173b0:	40020028 	.word	0x40020028
 80173b4:	40020040 	.word	0x40020040
 80173b8:	40020058 	.word	0x40020058
 80173bc:	40020070 	.word	0x40020070
 80173c0:	40020088 	.word	0x40020088
 80173c4:	400200a0 	.word	0x400200a0
 80173c8:	400200b8 	.word	0x400200b8
 80173cc:	40020410 	.word	0x40020410
 80173d0:	40020428 	.word	0x40020428
 80173d4:	40020440 	.word	0x40020440
 80173d8:	40020458 	.word	0x40020458
 80173dc:	40020470 	.word	0x40020470
 80173e0:	40020488 	.word	0x40020488
 80173e4:	400204a0 	.word	0x400204a0
 80173e8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80173ec:	687b      	ldr	r3, [r7, #4]
 80173ee:	681b      	ldr	r3, [r3, #0]
 80173f0:	681a      	ldr	r2, [r3, #0]
 80173f2:	687b      	ldr	r3, [r7, #4]
 80173f4:	681b      	ldr	r3, [r3, #0]
 80173f6:	f022 020e 	bic.w	r2, r2, #14
 80173fa:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80173fc:	687b      	ldr	r3, [r7, #4]
 80173fe:	681b      	ldr	r3, [r3, #0]
 8017400:	4a6c      	ldr	r2, [pc, #432]	; (80175b4 <HAL_DMA_Abort_IT+0x3a8>)
 8017402:	4293      	cmp	r3, r2
 8017404:	d04a      	beq.n	801749c <HAL_DMA_Abort_IT+0x290>
 8017406:	687b      	ldr	r3, [r7, #4]
 8017408:	681b      	ldr	r3, [r3, #0]
 801740a:	4a6b      	ldr	r2, [pc, #428]	; (80175b8 <HAL_DMA_Abort_IT+0x3ac>)
 801740c:	4293      	cmp	r3, r2
 801740e:	d045      	beq.n	801749c <HAL_DMA_Abort_IT+0x290>
 8017410:	687b      	ldr	r3, [r7, #4]
 8017412:	681b      	ldr	r3, [r3, #0]
 8017414:	4a69      	ldr	r2, [pc, #420]	; (80175bc <HAL_DMA_Abort_IT+0x3b0>)
 8017416:	4293      	cmp	r3, r2
 8017418:	d040      	beq.n	801749c <HAL_DMA_Abort_IT+0x290>
 801741a:	687b      	ldr	r3, [r7, #4]
 801741c:	681b      	ldr	r3, [r3, #0]
 801741e:	4a68      	ldr	r2, [pc, #416]	; (80175c0 <HAL_DMA_Abort_IT+0x3b4>)
 8017420:	4293      	cmp	r3, r2
 8017422:	d03b      	beq.n	801749c <HAL_DMA_Abort_IT+0x290>
 8017424:	687b      	ldr	r3, [r7, #4]
 8017426:	681b      	ldr	r3, [r3, #0]
 8017428:	4a66      	ldr	r2, [pc, #408]	; (80175c4 <HAL_DMA_Abort_IT+0x3b8>)
 801742a:	4293      	cmp	r3, r2
 801742c:	d036      	beq.n	801749c <HAL_DMA_Abort_IT+0x290>
 801742e:	687b      	ldr	r3, [r7, #4]
 8017430:	681b      	ldr	r3, [r3, #0]
 8017432:	4a65      	ldr	r2, [pc, #404]	; (80175c8 <HAL_DMA_Abort_IT+0x3bc>)
 8017434:	4293      	cmp	r3, r2
 8017436:	d031      	beq.n	801749c <HAL_DMA_Abort_IT+0x290>
 8017438:	687b      	ldr	r3, [r7, #4]
 801743a:	681b      	ldr	r3, [r3, #0]
 801743c:	4a63      	ldr	r2, [pc, #396]	; (80175cc <HAL_DMA_Abort_IT+0x3c0>)
 801743e:	4293      	cmp	r3, r2
 8017440:	d02c      	beq.n	801749c <HAL_DMA_Abort_IT+0x290>
 8017442:	687b      	ldr	r3, [r7, #4]
 8017444:	681b      	ldr	r3, [r3, #0]
 8017446:	4a62      	ldr	r2, [pc, #392]	; (80175d0 <HAL_DMA_Abort_IT+0x3c4>)
 8017448:	4293      	cmp	r3, r2
 801744a:	d027      	beq.n	801749c <HAL_DMA_Abort_IT+0x290>
 801744c:	687b      	ldr	r3, [r7, #4]
 801744e:	681b      	ldr	r3, [r3, #0]
 8017450:	4a60      	ldr	r2, [pc, #384]	; (80175d4 <HAL_DMA_Abort_IT+0x3c8>)
 8017452:	4293      	cmp	r3, r2
 8017454:	d022      	beq.n	801749c <HAL_DMA_Abort_IT+0x290>
 8017456:	687b      	ldr	r3, [r7, #4]
 8017458:	681b      	ldr	r3, [r3, #0]
 801745a:	4a5f      	ldr	r2, [pc, #380]	; (80175d8 <HAL_DMA_Abort_IT+0x3cc>)
 801745c:	4293      	cmp	r3, r2
 801745e:	d01d      	beq.n	801749c <HAL_DMA_Abort_IT+0x290>
 8017460:	687b      	ldr	r3, [r7, #4]
 8017462:	681b      	ldr	r3, [r3, #0]
 8017464:	4a5d      	ldr	r2, [pc, #372]	; (80175dc <HAL_DMA_Abort_IT+0x3d0>)
 8017466:	4293      	cmp	r3, r2
 8017468:	d018      	beq.n	801749c <HAL_DMA_Abort_IT+0x290>
 801746a:	687b      	ldr	r3, [r7, #4]
 801746c:	681b      	ldr	r3, [r3, #0]
 801746e:	4a5c      	ldr	r2, [pc, #368]	; (80175e0 <HAL_DMA_Abort_IT+0x3d4>)
 8017470:	4293      	cmp	r3, r2
 8017472:	d013      	beq.n	801749c <HAL_DMA_Abort_IT+0x290>
 8017474:	687b      	ldr	r3, [r7, #4]
 8017476:	681b      	ldr	r3, [r3, #0]
 8017478:	4a5a      	ldr	r2, [pc, #360]	; (80175e4 <HAL_DMA_Abort_IT+0x3d8>)
 801747a:	4293      	cmp	r3, r2
 801747c:	d00e      	beq.n	801749c <HAL_DMA_Abort_IT+0x290>
 801747e:	687b      	ldr	r3, [r7, #4]
 8017480:	681b      	ldr	r3, [r3, #0]
 8017482:	4a59      	ldr	r2, [pc, #356]	; (80175e8 <HAL_DMA_Abort_IT+0x3dc>)
 8017484:	4293      	cmp	r3, r2
 8017486:	d009      	beq.n	801749c <HAL_DMA_Abort_IT+0x290>
 8017488:	687b      	ldr	r3, [r7, #4]
 801748a:	681b      	ldr	r3, [r3, #0]
 801748c:	4a57      	ldr	r2, [pc, #348]	; (80175ec <HAL_DMA_Abort_IT+0x3e0>)
 801748e:	4293      	cmp	r3, r2
 8017490:	d004      	beq.n	801749c <HAL_DMA_Abort_IT+0x290>
 8017492:	687b      	ldr	r3, [r7, #4]
 8017494:	681b      	ldr	r3, [r3, #0]
 8017496:	4a56      	ldr	r2, [pc, #344]	; (80175f0 <HAL_DMA_Abort_IT+0x3e4>)
 8017498:	4293      	cmp	r3, r2
 801749a:	d108      	bne.n	80174ae <HAL_DMA_Abort_IT+0x2a2>
 801749c:	687b      	ldr	r3, [r7, #4]
 801749e:	681b      	ldr	r3, [r3, #0]
 80174a0:	681a      	ldr	r2, [r3, #0]
 80174a2:	687b      	ldr	r3, [r7, #4]
 80174a4:	681b      	ldr	r3, [r3, #0]
 80174a6:	f022 0201 	bic.w	r2, r2, #1
 80174aa:	601a      	str	r2, [r3, #0]
 80174ac:	e007      	b.n	80174be <HAL_DMA_Abort_IT+0x2b2>
 80174ae:	687b      	ldr	r3, [r7, #4]
 80174b0:	681b      	ldr	r3, [r3, #0]
 80174b2:	681a      	ldr	r2, [r3, #0]
 80174b4:	687b      	ldr	r3, [r7, #4]
 80174b6:	681b      	ldr	r3, [r3, #0]
 80174b8:	f022 0201 	bic.w	r2, r2, #1
 80174bc:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80174be:	687b      	ldr	r3, [r7, #4]
 80174c0:	681b      	ldr	r3, [r3, #0]
 80174c2:	4a3c      	ldr	r2, [pc, #240]	; (80175b4 <HAL_DMA_Abort_IT+0x3a8>)
 80174c4:	4293      	cmp	r3, r2
 80174c6:	d072      	beq.n	80175ae <HAL_DMA_Abort_IT+0x3a2>
 80174c8:	687b      	ldr	r3, [r7, #4]
 80174ca:	681b      	ldr	r3, [r3, #0]
 80174cc:	4a3a      	ldr	r2, [pc, #232]	; (80175b8 <HAL_DMA_Abort_IT+0x3ac>)
 80174ce:	4293      	cmp	r3, r2
 80174d0:	d06d      	beq.n	80175ae <HAL_DMA_Abort_IT+0x3a2>
 80174d2:	687b      	ldr	r3, [r7, #4]
 80174d4:	681b      	ldr	r3, [r3, #0]
 80174d6:	4a39      	ldr	r2, [pc, #228]	; (80175bc <HAL_DMA_Abort_IT+0x3b0>)
 80174d8:	4293      	cmp	r3, r2
 80174da:	d068      	beq.n	80175ae <HAL_DMA_Abort_IT+0x3a2>
 80174dc:	687b      	ldr	r3, [r7, #4]
 80174de:	681b      	ldr	r3, [r3, #0]
 80174e0:	4a37      	ldr	r2, [pc, #220]	; (80175c0 <HAL_DMA_Abort_IT+0x3b4>)
 80174e2:	4293      	cmp	r3, r2
 80174e4:	d063      	beq.n	80175ae <HAL_DMA_Abort_IT+0x3a2>
 80174e6:	687b      	ldr	r3, [r7, #4]
 80174e8:	681b      	ldr	r3, [r3, #0]
 80174ea:	4a36      	ldr	r2, [pc, #216]	; (80175c4 <HAL_DMA_Abort_IT+0x3b8>)
 80174ec:	4293      	cmp	r3, r2
 80174ee:	d05e      	beq.n	80175ae <HAL_DMA_Abort_IT+0x3a2>
 80174f0:	687b      	ldr	r3, [r7, #4]
 80174f2:	681b      	ldr	r3, [r3, #0]
 80174f4:	4a34      	ldr	r2, [pc, #208]	; (80175c8 <HAL_DMA_Abort_IT+0x3bc>)
 80174f6:	4293      	cmp	r3, r2
 80174f8:	d059      	beq.n	80175ae <HAL_DMA_Abort_IT+0x3a2>
 80174fa:	687b      	ldr	r3, [r7, #4]
 80174fc:	681b      	ldr	r3, [r3, #0]
 80174fe:	4a33      	ldr	r2, [pc, #204]	; (80175cc <HAL_DMA_Abort_IT+0x3c0>)
 8017500:	4293      	cmp	r3, r2
 8017502:	d054      	beq.n	80175ae <HAL_DMA_Abort_IT+0x3a2>
 8017504:	687b      	ldr	r3, [r7, #4]
 8017506:	681b      	ldr	r3, [r3, #0]
 8017508:	4a31      	ldr	r2, [pc, #196]	; (80175d0 <HAL_DMA_Abort_IT+0x3c4>)
 801750a:	4293      	cmp	r3, r2
 801750c:	d04f      	beq.n	80175ae <HAL_DMA_Abort_IT+0x3a2>
 801750e:	687b      	ldr	r3, [r7, #4]
 8017510:	681b      	ldr	r3, [r3, #0]
 8017512:	4a30      	ldr	r2, [pc, #192]	; (80175d4 <HAL_DMA_Abort_IT+0x3c8>)
 8017514:	4293      	cmp	r3, r2
 8017516:	d04a      	beq.n	80175ae <HAL_DMA_Abort_IT+0x3a2>
 8017518:	687b      	ldr	r3, [r7, #4]
 801751a:	681b      	ldr	r3, [r3, #0]
 801751c:	4a2e      	ldr	r2, [pc, #184]	; (80175d8 <HAL_DMA_Abort_IT+0x3cc>)
 801751e:	4293      	cmp	r3, r2
 8017520:	d045      	beq.n	80175ae <HAL_DMA_Abort_IT+0x3a2>
 8017522:	687b      	ldr	r3, [r7, #4]
 8017524:	681b      	ldr	r3, [r3, #0]
 8017526:	4a2d      	ldr	r2, [pc, #180]	; (80175dc <HAL_DMA_Abort_IT+0x3d0>)
 8017528:	4293      	cmp	r3, r2
 801752a:	d040      	beq.n	80175ae <HAL_DMA_Abort_IT+0x3a2>
 801752c:	687b      	ldr	r3, [r7, #4]
 801752e:	681b      	ldr	r3, [r3, #0]
 8017530:	4a2b      	ldr	r2, [pc, #172]	; (80175e0 <HAL_DMA_Abort_IT+0x3d4>)
 8017532:	4293      	cmp	r3, r2
 8017534:	d03b      	beq.n	80175ae <HAL_DMA_Abort_IT+0x3a2>
 8017536:	687b      	ldr	r3, [r7, #4]
 8017538:	681b      	ldr	r3, [r3, #0]
 801753a:	4a2a      	ldr	r2, [pc, #168]	; (80175e4 <HAL_DMA_Abort_IT+0x3d8>)
 801753c:	4293      	cmp	r3, r2
 801753e:	d036      	beq.n	80175ae <HAL_DMA_Abort_IT+0x3a2>
 8017540:	687b      	ldr	r3, [r7, #4]
 8017542:	681b      	ldr	r3, [r3, #0]
 8017544:	4a28      	ldr	r2, [pc, #160]	; (80175e8 <HAL_DMA_Abort_IT+0x3dc>)
 8017546:	4293      	cmp	r3, r2
 8017548:	d031      	beq.n	80175ae <HAL_DMA_Abort_IT+0x3a2>
 801754a:	687b      	ldr	r3, [r7, #4]
 801754c:	681b      	ldr	r3, [r3, #0]
 801754e:	4a27      	ldr	r2, [pc, #156]	; (80175ec <HAL_DMA_Abort_IT+0x3e0>)
 8017550:	4293      	cmp	r3, r2
 8017552:	d02c      	beq.n	80175ae <HAL_DMA_Abort_IT+0x3a2>
 8017554:	687b      	ldr	r3, [r7, #4]
 8017556:	681b      	ldr	r3, [r3, #0]
 8017558:	4a25      	ldr	r2, [pc, #148]	; (80175f0 <HAL_DMA_Abort_IT+0x3e4>)
 801755a:	4293      	cmp	r3, r2
 801755c:	d027      	beq.n	80175ae <HAL_DMA_Abort_IT+0x3a2>
 801755e:	687b      	ldr	r3, [r7, #4]
 8017560:	681b      	ldr	r3, [r3, #0]
 8017562:	4a24      	ldr	r2, [pc, #144]	; (80175f4 <HAL_DMA_Abort_IT+0x3e8>)
 8017564:	4293      	cmp	r3, r2
 8017566:	d022      	beq.n	80175ae <HAL_DMA_Abort_IT+0x3a2>
 8017568:	687b      	ldr	r3, [r7, #4]
 801756a:	681b      	ldr	r3, [r3, #0]
 801756c:	4a22      	ldr	r2, [pc, #136]	; (80175f8 <HAL_DMA_Abort_IT+0x3ec>)
 801756e:	4293      	cmp	r3, r2
 8017570:	d01d      	beq.n	80175ae <HAL_DMA_Abort_IT+0x3a2>
 8017572:	687b      	ldr	r3, [r7, #4]
 8017574:	681b      	ldr	r3, [r3, #0]
 8017576:	4a21      	ldr	r2, [pc, #132]	; (80175fc <HAL_DMA_Abort_IT+0x3f0>)
 8017578:	4293      	cmp	r3, r2
 801757a:	d018      	beq.n	80175ae <HAL_DMA_Abort_IT+0x3a2>
 801757c:	687b      	ldr	r3, [r7, #4]
 801757e:	681b      	ldr	r3, [r3, #0]
 8017580:	4a1f      	ldr	r2, [pc, #124]	; (8017600 <HAL_DMA_Abort_IT+0x3f4>)
 8017582:	4293      	cmp	r3, r2
 8017584:	d013      	beq.n	80175ae <HAL_DMA_Abort_IT+0x3a2>
 8017586:	687b      	ldr	r3, [r7, #4]
 8017588:	681b      	ldr	r3, [r3, #0]
 801758a:	4a1e      	ldr	r2, [pc, #120]	; (8017604 <HAL_DMA_Abort_IT+0x3f8>)
 801758c:	4293      	cmp	r3, r2
 801758e:	d00e      	beq.n	80175ae <HAL_DMA_Abort_IT+0x3a2>
 8017590:	687b      	ldr	r3, [r7, #4]
 8017592:	681b      	ldr	r3, [r3, #0]
 8017594:	4a1c      	ldr	r2, [pc, #112]	; (8017608 <HAL_DMA_Abort_IT+0x3fc>)
 8017596:	4293      	cmp	r3, r2
 8017598:	d009      	beq.n	80175ae <HAL_DMA_Abort_IT+0x3a2>
 801759a:	687b      	ldr	r3, [r7, #4]
 801759c:	681b      	ldr	r3, [r3, #0]
 801759e:	4a1b      	ldr	r2, [pc, #108]	; (801760c <HAL_DMA_Abort_IT+0x400>)
 80175a0:	4293      	cmp	r3, r2
 80175a2:	d004      	beq.n	80175ae <HAL_DMA_Abort_IT+0x3a2>
 80175a4:	687b      	ldr	r3, [r7, #4]
 80175a6:	681b      	ldr	r3, [r3, #0]
 80175a8:	4a19      	ldr	r2, [pc, #100]	; (8017610 <HAL_DMA_Abort_IT+0x404>)
 80175aa:	4293      	cmp	r3, r2
 80175ac:	d132      	bne.n	8017614 <HAL_DMA_Abort_IT+0x408>
 80175ae:	2301      	movs	r3, #1
 80175b0:	e031      	b.n	8017616 <HAL_DMA_Abort_IT+0x40a>
 80175b2:	bf00      	nop
 80175b4:	40020010 	.word	0x40020010
 80175b8:	40020028 	.word	0x40020028
 80175bc:	40020040 	.word	0x40020040
 80175c0:	40020058 	.word	0x40020058
 80175c4:	40020070 	.word	0x40020070
 80175c8:	40020088 	.word	0x40020088
 80175cc:	400200a0 	.word	0x400200a0
 80175d0:	400200b8 	.word	0x400200b8
 80175d4:	40020410 	.word	0x40020410
 80175d8:	40020428 	.word	0x40020428
 80175dc:	40020440 	.word	0x40020440
 80175e0:	40020458 	.word	0x40020458
 80175e4:	40020470 	.word	0x40020470
 80175e8:	40020488 	.word	0x40020488
 80175ec:	400204a0 	.word	0x400204a0
 80175f0:	400204b8 	.word	0x400204b8
 80175f4:	58025408 	.word	0x58025408
 80175f8:	5802541c 	.word	0x5802541c
 80175fc:	58025430 	.word	0x58025430
 8017600:	58025444 	.word	0x58025444
 8017604:	58025458 	.word	0x58025458
 8017608:	5802546c 	.word	0x5802546c
 801760c:	58025480 	.word	0x58025480
 8017610:	58025494 	.word	0x58025494
 8017614:	2300      	movs	r3, #0
 8017616:	2b00      	cmp	r3, #0
 8017618:	d028      	beq.n	801766c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 801761a:	687b      	ldr	r3, [r7, #4]
 801761c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801761e:	681a      	ldr	r2, [r3, #0]
 8017620:	687b      	ldr	r3, [r7, #4]
 8017622:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017624:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8017628:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 801762a:	687b      	ldr	r3, [r7, #4]
 801762c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801762e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8017630:	687b      	ldr	r3, [r7, #4]
 8017632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017634:	f003 031f 	and.w	r3, r3, #31
 8017638:	2201      	movs	r2, #1
 801763a:	409a      	lsls	r2, r3
 801763c:	68fb      	ldr	r3, [r7, #12]
 801763e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8017640:	687b      	ldr	r3, [r7, #4]
 8017642:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8017644:	687a      	ldr	r2, [r7, #4]
 8017646:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8017648:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 801764a:	687b      	ldr	r3, [r7, #4]
 801764c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801764e:	2b00      	cmp	r3, #0
 8017650:	d00c      	beq.n	801766c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8017652:	687b      	ldr	r3, [r7, #4]
 8017654:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017656:	681a      	ldr	r2, [r3, #0]
 8017658:	687b      	ldr	r3, [r7, #4]
 801765a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801765c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8017660:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8017662:	687b      	ldr	r3, [r7, #4]
 8017664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017666:	687a      	ldr	r2, [r7, #4]
 8017668:	6f52      	ldr	r2, [r2, #116]	; 0x74
 801766a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 801766c:	687b      	ldr	r3, [r7, #4]
 801766e:	2201      	movs	r2, #1
 8017670:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8017674:	687b      	ldr	r3, [r7, #4]
 8017676:	2200      	movs	r2, #0
 8017678:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 801767c:	687b      	ldr	r3, [r7, #4]
 801767e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017680:	2b00      	cmp	r3, #0
 8017682:	d003      	beq.n	801768c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8017684:	687b      	ldr	r3, [r7, #4]
 8017686:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017688:	6878      	ldr	r0, [r7, #4]
 801768a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 801768c:	2300      	movs	r3, #0
}
 801768e:	4618      	mov	r0, r3
 8017690:	3710      	adds	r7, #16
 8017692:	46bd      	mov	sp, r7
 8017694:	bd80      	pop	{r7, pc}
 8017696:	bf00      	nop

08017698 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8017698:	b580      	push	{r7, lr}
 801769a:	b08a      	sub	sp, #40	; 0x28
 801769c:	af00      	add	r7, sp, #0
 801769e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80176a0:	2300      	movs	r3, #0
 80176a2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80176a4:	4b67      	ldr	r3, [pc, #412]	; (8017844 <HAL_DMA_IRQHandler+0x1ac>)
 80176a6:	681b      	ldr	r3, [r3, #0]
 80176a8:	4a67      	ldr	r2, [pc, #412]	; (8017848 <HAL_DMA_IRQHandler+0x1b0>)
 80176aa:	fba2 2303 	umull	r2, r3, r2, r3
 80176ae:	0a9b      	lsrs	r3, r3, #10
 80176b0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80176b2:	687b      	ldr	r3, [r7, #4]
 80176b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80176b6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80176b8:	687b      	ldr	r3, [r7, #4]
 80176ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80176bc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80176be:	6a3b      	ldr	r3, [r7, #32]
 80176c0:	681b      	ldr	r3, [r3, #0]
 80176c2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80176c4:	69fb      	ldr	r3, [r7, #28]
 80176c6:	681b      	ldr	r3, [r3, #0]
 80176c8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80176ca:	687b      	ldr	r3, [r7, #4]
 80176cc:	681b      	ldr	r3, [r3, #0]
 80176ce:	4a5f      	ldr	r2, [pc, #380]	; (801784c <HAL_DMA_IRQHandler+0x1b4>)
 80176d0:	4293      	cmp	r3, r2
 80176d2:	d04a      	beq.n	801776a <HAL_DMA_IRQHandler+0xd2>
 80176d4:	687b      	ldr	r3, [r7, #4]
 80176d6:	681b      	ldr	r3, [r3, #0]
 80176d8:	4a5d      	ldr	r2, [pc, #372]	; (8017850 <HAL_DMA_IRQHandler+0x1b8>)
 80176da:	4293      	cmp	r3, r2
 80176dc:	d045      	beq.n	801776a <HAL_DMA_IRQHandler+0xd2>
 80176de:	687b      	ldr	r3, [r7, #4]
 80176e0:	681b      	ldr	r3, [r3, #0]
 80176e2:	4a5c      	ldr	r2, [pc, #368]	; (8017854 <HAL_DMA_IRQHandler+0x1bc>)
 80176e4:	4293      	cmp	r3, r2
 80176e6:	d040      	beq.n	801776a <HAL_DMA_IRQHandler+0xd2>
 80176e8:	687b      	ldr	r3, [r7, #4]
 80176ea:	681b      	ldr	r3, [r3, #0]
 80176ec:	4a5a      	ldr	r2, [pc, #360]	; (8017858 <HAL_DMA_IRQHandler+0x1c0>)
 80176ee:	4293      	cmp	r3, r2
 80176f0:	d03b      	beq.n	801776a <HAL_DMA_IRQHandler+0xd2>
 80176f2:	687b      	ldr	r3, [r7, #4]
 80176f4:	681b      	ldr	r3, [r3, #0]
 80176f6:	4a59      	ldr	r2, [pc, #356]	; (801785c <HAL_DMA_IRQHandler+0x1c4>)
 80176f8:	4293      	cmp	r3, r2
 80176fa:	d036      	beq.n	801776a <HAL_DMA_IRQHandler+0xd2>
 80176fc:	687b      	ldr	r3, [r7, #4]
 80176fe:	681b      	ldr	r3, [r3, #0]
 8017700:	4a57      	ldr	r2, [pc, #348]	; (8017860 <HAL_DMA_IRQHandler+0x1c8>)
 8017702:	4293      	cmp	r3, r2
 8017704:	d031      	beq.n	801776a <HAL_DMA_IRQHandler+0xd2>
 8017706:	687b      	ldr	r3, [r7, #4]
 8017708:	681b      	ldr	r3, [r3, #0]
 801770a:	4a56      	ldr	r2, [pc, #344]	; (8017864 <HAL_DMA_IRQHandler+0x1cc>)
 801770c:	4293      	cmp	r3, r2
 801770e:	d02c      	beq.n	801776a <HAL_DMA_IRQHandler+0xd2>
 8017710:	687b      	ldr	r3, [r7, #4]
 8017712:	681b      	ldr	r3, [r3, #0]
 8017714:	4a54      	ldr	r2, [pc, #336]	; (8017868 <HAL_DMA_IRQHandler+0x1d0>)
 8017716:	4293      	cmp	r3, r2
 8017718:	d027      	beq.n	801776a <HAL_DMA_IRQHandler+0xd2>
 801771a:	687b      	ldr	r3, [r7, #4]
 801771c:	681b      	ldr	r3, [r3, #0]
 801771e:	4a53      	ldr	r2, [pc, #332]	; (801786c <HAL_DMA_IRQHandler+0x1d4>)
 8017720:	4293      	cmp	r3, r2
 8017722:	d022      	beq.n	801776a <HAL_DMA_IRQHandler+0xd2>
 8017724:	687b      	ldr	r3, [r7, #4]
 8017726:	681b      	ldr	r3, [r3, #0]
 8017728:	4a51      	ldr	r2, [pc, #324]	; (8017870 <HAL_DMA_IRQHandler+0x1d8>)
 801772a:	4293      	cmp	r3, r2
 801772c:	d01d      	beq.n	801776a <HAL_DMA_IRQHandler+0xd2>
 801772e:	687b      	ldr	r3, [r7, #4]
 8017730:	681b      	ldr	r3, [r3, #0]
 8017732:	4a50      	ldr	r2, [pc, #320]	; (8017874 <HAL_DMA_IRQHandler+0x1dc>)
 8017734:	4293      	cmp	r3, r2
 8017736:	d018      	beq.n	801776a <HAL_DMA_IRQHandler+0xd2>
 8017738:	687b      	ldr	r3, [r7, #4]
 801773a:	681b      	ldr	r3, [r3, #0]
 801773c:	4a4e      	ldr	r2, [pc, #312]	; (8017878 <HAL_DMA_IRQHandler+0x1e0>)
 801773e:	4293      	cmp	r3, r2
 8017740:	d013      	beq.n	801776a <HAL_DMA_IRQHandler+0xd2>
 8017742:	687b      	ldr	r3, [r7, #4]
 8017744:	681b      	ldr	r3, [r3, #0]
 8017746:	4a4d      	ldr	r2, [pc, #308]	; (801787c <HAL_DMA_IRQHandler+0x1e4>)
 8017748:	4293      	cmp	r3, r2
 801774a:	d00e      	beq.n	801776a <HAL_DMA_IRQHandler+0xd2>
 801774c:	687b      	ldr	r3, [r7, #4]
 801774e:	681b      	ldr	r3, [r3, #0]
 8017750:	4a4b      	ldr	r2, [pc, #300]	; (8017880 <HAL_DMA_IRQHandler+0x1e8>)
 8017752:	4293      	cmp	r3, r2
 8017754:	d009      	beq.n	801776a <HAL_DMA_IRQHandler+0xd2>
 8017756:	687b      	ldr	r3, [r7, #4]
 8017758:	681b      	ldr	r3, [r3, #0]
 801775a:	4a4a      	ldr	r2, [pc, #296]	; (8017884 <HAL_DMA_IRQHandler+0x1ec>)
 801775c:	4293      	cmp	r3, r2
 801775e:	d004      	beq.n	801776a <HAL_DMA_IRQHandler+0xd2>
 8017760:	687b      	ldr	r3, [r7, #4]
 8017762:	681b      	ldr	r3, [r3, #0]
 8017764:	4a48      	ldr	r2, [pc, #288]	; (8017888 <HAL_DMA_IRQHandler+0x1f0>)
 8017766:	4293      	cmp	r3, r2
 8017768:	d101      	bne.n	801776e <HAL_DMA_IRQHandler+0xd6>
 801776a:	2301      	movs	r3, #1
 801776c:	e000      	b.n	8017770 <HAL_DMA_IRQHandler+0xd8>
 801776e:	2300      	movs	r3, #0
 8017770:	2b00      	cmp	r3, #0
 8017772:	f000 842b 	beq.w	8017fcc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8017776:	687b      	ldr	r3, [r7, #4]
 8017778:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801777a:	f003 031f 	and.w	r3, r3, #31
 801777e:	2208      	movs	r2, #8
 8017780:	409a      	lsls	r2, r3
 8017782:	69bb      	ldr	r3, [r7, #24]
 8017784:	4013      	ands	r3, r2
 8017786:	2b00      	cmp	r3, #0
 8017788:	f000 80a2 	beq.w	80178d0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 801778c:	687b      	ldr	r3, [r7, #4]
 801778e:	681b      	ldr	r3, [r3, #0]
 8017790:	4a2e      	ldr	r2, [pc, #184]	; (801784c <HAL_DMA_IRQHandler+0x1b4>)
 8017792:	4293      	cmp	r3, r2
 8017794:	d04a      	beq.n	801782c <HAL_DMA_IRQHandler+0x194>
 8017796:	687b      	ldr	r3, [r7, #4]
 8017798:	681b      	ldr	r3, [r3, #0]
 801779a:	4a2d      	ldr	r2, [pc, #180]	; (8017850 <HAL_DMA_IRQHandler+0x1b8>)
 801779c:	4293      	cmp	r3, r2
 801779e:	d045      	beq.n	801782c <HAL_DMA_IRQHandler+0x194>
 80177a0:	687b      	ldr	r3, [r7, #4]
 80177a2:	681b      	ldr	r3, [r3, #0]
 80177a4:	4a2b      	ldr	r2, [pc, #172]	; (8017854 <HAL_DMA_IRQHandler+0x1bc>)
 80177a6:	4293      	cmp	r3, r2
 80177a8:	d040      	beq.n	801782c <HAL_DMA_IRQHandler+0x194>
 80177aa:	687b      	ldr	r3, [r7, #4]
 80177ac:	681b      	ldr	r3, [r3, #0]
 80177ae:	4a2a      	ldr	r2, [pc, #168]	; (8017858 <HAL_DMA_IRQHandler+0x1c0>)
 80177b0:	4293      	cmp	r3, r2
 80177b2:	d03b      	beq.n	801782c <HAL_DMA_IRQHandler+0x194>
 80177b4:	687b      	ldr	r3, [r7, #4]
 80177b6:	681b      	ldr	r3, [r3, #0]
 80177b8:	4a28      	ldr	r2, [pc, #160]	; (801785c <HAL_DMA_IRQHandler+0x1c4>)
 80177ba:	4293      	cmp	r3, r2
 80177bc:	d036      	beq.n	801782c <HAL_DMA_IRQHandler+0x194>
 80177be:	687b      	ldr	r3, [r7, #4]
 80177c0:	681b      	ldr	r3, [r3, #0]
 80177c2:	4a27      	ldr	r2, [pc, #156]	; (8017860 <HAL_DMA_IRQHandler+0x1c8>)
 80177c4:	4293      	cmp	r3, r2
 80177c6:	d031      	beq.n	801782c <HAL_DMA_IRQHandler+0x194>
 80177c8:	687b      	ldr	r3, [r7, #4]
 80177ca:	681b      	ldr	r3, [r3, #0]
 80177cc:	4a25      	ldr	r2, [pc, #148]	; (8017864 <HAL_DMA_IRQHandler+0x1cc>)
 80177ce:	4293      	cmp	r3, r2
 80177d0:	d02c      	beq.n	801782c <HAL_DMA_IRQHandler+0x194>
 80177d2:	687b      	ldr	r3, [r7, #4]
 80177d4:	681b      	ldr	r3, [r3, #0]
 80177d6:	4a24      	ldr	r2, [pc, #144]	; (8017868 <HAL_DMA_IRQHandler+0x1d0>)
 80177d8:	4293      	cmp	r3, r2
 80177da:	d027      	beq.n	801782c <HAL_DMA_IRQHandler+0x194>
 80177dc:	687b      	ldr	r3, [r7, #4]
 80177de:	681b      	ldr	r3, [r3, #0]
 80177e0:	4a22      	ldr	r2, [pc, #136]	; (801786c <HAL_DMA_IRQHandler+0x1d4>)
 80177e2:	4293      	cmp	r3, r2
 80177e4:	d022      	beq.n	801782c <HAL_DMA_IRQHandler+0x194>
 80177e6:	687b      	ldr	r3, [r7, #4]
 80177e8:	681b      	ldr	r3, [r3, #0]
 80177ea:	4a21      	ldr	r2, [pc, #132]	; (8017870 <HAL_DMA_IRQHandler+0x1d8>)
 80177ec:	4293      	cmp	r3, r2
 80177ee:	d01d      	beq.n	801782c <HAL_DMA_IRQHandler+0x194>
 80177f0:	687b      	ldr	r3, [r7, #4]
 80177f2:	681b      	ldr	r3, [r3, #0]
 80177f4:	4a1f      	ldr	r2, [pc, #124]	; (8017874 <HAL_DMA_IRQHandler+0x1dc>)
 80177f6:	4293      	cmp	r3, r2
 80177f8:	d018      	beq.n	801782c <HAL_DMA_IRQHandler+0x194>
 80177fa:	687b      	ldr	r3, [r7, #4]
 80177fc:	681b      	ldr	r3, [r3, #0]
 80177fe:	4a1e      	ldr	r2, [pc, #120]	; (8017878 <HAL_DMA_IRQHandler+0x1e0>)
 8017800:	4293      	cmp	r3, r2
 8017802:	d013      	beq.n	801782c <HAL_DMA_IRQHandler+0x194>
 8017804:	687b      	ldr	r3, [r7, #4]
 8017806:	681b      	ldr	r3, [r3, #0]
 8017808:	4a1c      	ldr	r2, [pc, #112]	; (801787c <HAL_DMA_IRQHandler+0x1e4>)
 801780a:	4293      	cmp	r3, r2
 801780c:	d00e      	beq.n	801782c <HAL_DMA_IRQHandler+0x194>
 801780e:	687b      	ldr	r3, [r7, #4]
 8017810:	681b      	ldr	r3, [r3, #0]
 8017812:	4a1b      	ldr	r2, [pc, #108]	; (8017880 <HAL_DMA_IRQHandler+0x1e8>)
 8017814:	4293      	cmp	r3, r2
 8017816:	d009      	beq.n	801782c <HAL_DMA_IRQHandler+0x194>
 8017818:	687b      	ldr	r3, [r7, #4]
 801781a:	681b      	ldr	r3, [r3, #0]
 801781c:	4a19      	ldr	r2, [pc, #100]	; (8017884 <HAL_DMA_IRQHandler+0x1ec>)
 801781e:	4293      	cmp	r3, r2
 8017820:	d004      	beq.n	801782c <HAL_DMA_IRQHandler+0x194>
 8017822:	687b      	ldr	r3, [r7, #4]
 8017824:	681b      	ldr	r3, [r3, #0]
 8017826:	4a18      	ldr	r2, [pc, #96]	; (8017888 <HAL_DMA_IRQHandler+0x1f0>)
 8017828:	4293      	cmp	r3, r2
 801782a:	d12f      	bne.n	801788c <HAL_DMA_IRQHandler+0x1f4>
 801782c:	687b      	ldr	r3, [r7, #4]
 801782e:	681b      	ldr	r3, [r3, #0]
 8017830:	681b      	ldr	r3, [r3, #0]
 8017832:	f003 0304 	and.w	r3, r3, #4
 8017836:	2b00      	cmp	r3, #0
 8017838:	bf14      	ite	ne
 801783a:	2301      	movne	r3, #1
 801783c:	2300      	moveq	r3, #0
 801783e:	b2db      	uxtb	r3, r3
 8017840:	e02e      	b.n	80178a0 <HAL_DMA_IRQHandler+0x208>
 8017842:	bf00      	nop
 8017844:	24000004 	.word	0x24000004
 8017848:	1b4e81b5 	.word	0x1b4e81b5
 801784c:	40020010 	.word	0x40020010
 8017850:	40020028 	.word	0x40020028
 8017854:	40020040 	.word	0x40020040
 8017858:	40020058 	.word	0x40020058
 801785c:	40020070 	.word	0x40020070
 8017860:	40020088 	.word	0x40020088
 8017864:	400200a0 	.word	0x400200a0
 8017868:	400200b8 	.word	0x400200b8
 801786c:	40020410 	.word	0x40020410
 8017870:	40020428 	.word	0x40020428
 8017874:	40020440 	.word	0x40020440
 8017878:	40020458 	.word	0x40020458
 801787c:	40020470 	.word	0x40020470
 8017880:	40020488 	.word	0x40020488
 8017884:	400204a0 	.word	0x400204a0
 8017888:	400204b8 	.word	0x400204b8
 801788c:	687b      	ldr	r3, [r7, #4]
 801788e:	681b      	ldr	r3, [r3, #0]
 8017890:	681b      	ldr	r3, [r3, #0]
 8017892:	f003 0308 	and.w	r3, r3, #8
 8017896:	2b00      	cmp	r3, #0
 8017898:	bf14      	ite	ne
 801789a:	2301      	movne	r3, #1
 801789c:	2300      	moveq	r3, #0
 801789e:	b2db      	uxtb	r3, r3
 80178a0:	2b00      	cmp	r3, #0
 80178a2:	d015      	beq.n	80178d0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80178a4:	687b      	ldr	r3, [r7, #4]
 80178a6:	681b      	ldr	r3, [r3, #0]
 80178a8:	681a      	ldr	r2, [r3, #0]
 80178aa:	687b      	ldr	r3, [r7, #4]
 80178ac:	681b      	ldr	r3, [r3, #0]
 80178ae:	f022 0204 	bic.w	r2, r2, #4
 80178b2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80178b4:	687b      	ldr	r3, [r7, #4]
 80178b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80178b8:	f003 031f 	and.w	r3, r3, #31
 80178bc:	2208      	movs	r2, #8
 80178be:	409a      	lsls	r2, r3
 80178c0:	6a3b      	ldr	r3, [r7, #32]
 80178c2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80178c4:	687b      	ldr	r3, [r7, #4]
 80178c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80178c8:	f043 0201 	orr.w	r2, r3, #1
 80178cc:	687b      	ldr	r3, [r7, #4]
 80178ce:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80178d0:	687b      	ldr	r3, [r7, #4]
 80178d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80178d4:	f003 031f 	and.w	r3, r3, #31
 80178d8:	69ba      	ldr	r2, [r7, #24]
 80178da:	fa22 f303 	lsr.w	r3, r2, r3
 80178de:	f003 0301 	and.w	r3, r3, #1
 80178e2:	2b00      	cmp	r3, #0
 80178e4:	d06e      	beq.n	80179c4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80178e6:	687b      	ldr	r3, [r7, #4]
 80178e8:	681b      	ldr	r3, [r3, #0]
 80178ea:	4a69      	ldr	r2, [pc, #420]	; (8017a90 <HAL_DMA_IRQHandler+0x3f8>)
 80178ec:	4293      	cmp	r3, r2
 80178ee:	d04a      	beq.n	8017986 <HAL_DMA_IRQHandler+0x2ee>
 80178f0:	687b      	ldr	r3, [r7, #4]
 80178f2:	681b      	ldr	r3, [r3, #0]
 80178f4:	4a67      	ldr	r2, [pc, #412]	; (8017a94 <HAL_DMA_IRQHandler+0x3fc>)
 80178f6:	4293      	cmp	r3, r2
 80178f8:	d045      	beq.n	8017986 <HAL_DMA_IRQHandler+0x2ee>
 80178fa:	687b      	ldr	r3, [r7, #4]
 80178fc:	681b      	ldr	r3, [r3, #0]
 80178fe:	4a66      	ldr	r2, [pc, #408]	; (8017a98 <HAL_DMA_IRQHandler+0x400>)
 8017900:	4293      	cmp	r3, r2
 8017902:	d040      	beq.n	8017986 <HAL_DMA_IRQHandler+0x2ee>
 8017904:	687b      	ldr	r3, [r7, #4]
 8017906:	681b      	ldr	r3, [r3, #0]
 8017908:	4a64      	ldr	r2, [pc, #400]	; (8017a9c <HAL_DMA_IRQHandler+0x404>)
 801790a:	4293      	cmp	r3, r2
 801790c:	d03b      	beq.n	8017986 <HAL_DMA_IRQHandler+0x2ee>
 801790e:	687b      	ldr	r3, [r7, #4]
 8017910:	681b      	ldr	r3, [r3, #0]
 8017912:	4a63      	ldr	r2, [pc, #396]	; (8017aa0 <HAL_DMA_IRQHandler+0x408>)
 8017914:	4293      	cmp	r3, r2
 8017916:	d036      	beq.n	8017986 <HAL_DMA_IRQHandler+0x2ee>
 8017918:	687b      	ldr	r3, [r7, #4]
 801791a:	681b      	ldr	r3, [r3, #0]
 801791c:	4a61      	ldr	r2, [pc, #388]	; (8017aa4 <HAL_DMA_IRQHandler+0x40c>)
 801791e:	4293      	cmp	r3, r2
 8017920:	d031      	beq.n	8017986 <HAL_DMA_IRQHandler+0x2ee>
 8017922:	687b      	ldr	r3, [r7, #4]
 8017924:	681b      	ldr	r3, [r3, #0]
 8017926:	4a60      	ldr	r2, [pc, #384]	; (8017aa8 <HAL_DMA_IRQHandler+0x410>)
 8017928:	4293      	cmp	r3, r2
 801792a:	d02c      	beq.n	8017986 <HAL_DMA_IRQHandler+0x2ee>
 801792c:	687b      	ldr	r3, [r7, #4]
 801792e:	681b      	ldr	r3, [r3, #0]
 8017930:	4a5e      	ldr	r2, [pc, #376]	; (8017aac <HAL_DMA_IRQHandler+0x414>)
 8017932:	4293      	cmp	r3, r2
 8017934:	d027      	beq.n	8017986 <HAL_DMA_IRQHandler+0x2ee>
 8017936:	687b      	ldr	r3, [r7, #4]
 8017938:	681b      	ldr	r3, [r3, #0]
 801793a:	4a5d      	ldr	r2, [pc, #372]	; (8017ab0 <HAL_DMA_IRQHandler+0x418>)
 801793c:	4293      	cmp	r3, r2
 801793e:	d022      	beq.n	8017986 <HAL_DMA_IRQHandler+0x2ee>
 8017940:	687b      	ldr	r3, [r7, #4]
 8017942:	681b      	ldr	r3, [r3, #0]
 8017944:	4a5b      	ldr	r2, [pc, #364]	; (8017ab4 <HAL_DMA_IRQHandler+0x41c>)
 8017946:	4293      	cmp	r3, r2
 8017948:	d01d      	beq.n	8017986 <HAL_DMA_IRQHandler+0x2ee>
 801794a:	687b      	ldr	r3, [r7, #4]
 801794c:	681b      	ldr	r3, [r3, #0]
 801794e:	4a5a      	ldr	r2, [pc, #360]	; (8017ab8 <HAL_DMA_IRQHandler+0x420>)
 8017950:	4293      	cmp	r3, r2
 8017952:	d018      	beq.n	8017986 <HAL_DMA_IRQHandler+0x2ee>
 8017954:	687b      	ldr	r3, [r7, #4]
 8017956:	681b      	ldr	r3, [r3, #0]
 8017958:	4a58      	ldr	r2, [pc, #352]	; (8017abc <HAL_DMA_IRQHandler+0x424>)
 801795a:	4293      	cmp	r3, r2
 801795c:	d013      	beq.n	8017986 <HAL_DMA_IRQHandler+0x2ee>
 801795e:	687b      	ldr	r3, [r7, #4]
 8017960:	681b      	ldr	r3, [r3, #0]
 8017962:	4a57      	ldr	r2, [pc, #348]	; (8017ac0 <HAL_DMA_IRQHandler+0x428>)
 8017964:	4293      	cmp	r3, r2
 8017966:	d00e      	beq.n	8017986 <HAL_DMA_IRQHandler+0x2ee>
 8017968:	687b      	ldr	r3, [r7, #4]
 801796a:	681b      	ldr	r3, [r3, #0]
 801796c:	4a55      	ldr	r2, [pc, #340]	; (8017ac4 <HAL_DMA_IRQHandler+0x42c>)
 801796e:	4293      	cmp	r3, r2
 8017970:	d009      	beq.n	8017986 <HAL_DMA_IRQHandler+0x2ee>
 8017972:	687b      	ldr	r3, [r7, #4]
 8017974:	681b      	ldr	r3, [r3, #0]
 8017976:	4a54      	ldr	r2, [pc, #336]	; (8017ac8 <HAL_DMA_IRQHandler+0x430>)
 8017978:	4293      	cmp	r3, r2
 801797a:	d004      	beq.n	8017986 <HAL_DMA_IRQHandler+0x2ee>
 801797c:	687b      	ldr	r3, [r7, #4]
 801797e:	681b      	ldr	r3, [r3, #0]
 8017980:	4a52      	ldr	r2, [pc, #328]	; (8017acc <HAL_DMA_IRQHandler+0x434>)
 8017982:	4293      	cmp	r3, r2
 8017984:	d10a      	bne.n	801799c <HAL_DMA_IRQHandler+0x304>
 8017986:	687b      	ldr	r3, [r7, #4]
 8017988:	681b      	ldr	r3, [r3, #0]
 801798a:	695b      	ldr	r3, [r3, #20]
 801798c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017990:	2b00      	cmp	r3, #0
 8017992:	bf14      	ite	ne
 8017994:	2301      	movne	r3, #1
 8017996:	2300      	moveq	r3, #0
 8017998:	b2db      	uxtb	r3, r3
 801799a:	e003      	b.n	80179a4 <HAL_DMA_IRQHandler+0x30c>
 801799c:	687b      	ldr	r3, [r7, #4]
 801799e:	681b      	ldr	r3, [r3, #0]
 80179a0:	681b      	ldr	r3, [r3, #0]
 80179a2:	2300      	movs	r3, #0
 80179a4:	2b00      	cmp	r3, #0
 80179a6:	d00d      	beq.n	80179c4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80179a8:	687b      	ldr	r3, [r7, #4]
 80179aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80179ac:	f003 031f 	and.w	r3, r3, #31
 80179b0:	2201      	movs	r2, #1
 80179b2:	409a      	lsls	r2, r3
 80179b4:	6a3b      	ldr	r3, [r7, #32]
 80179b6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80179b8:	687b      	ldr	r3, [r7, #4]
 80179ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80179bc:	f043 0202 	orr.w	r2, r3, #2
 80179c0:	687b      	ldr	r3, [r7, #4]
 80179c2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80179c4:	687b      	ldr	r3, [r7, #4]
 80179c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80179c8:	f003 031f 	and.w	r3, r3, #31
 80179cc:	2204      	movs	r2, #4
 80179ce:	409a      	lsls	r2, r3
 80179d0:	69bb      	ldr	r3, [r7, #24]
 80179d2:	4013      	ands	r3, r2
 80179d4:	2b00      	cmp	r3, #0
 80179d6:	f000 808f 	beq.w	8017af8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80179da:	687b      	ldr	r3, [r7, #4]
 80179dc:	681b      	ldr	r3, [r3, #0]
 80179de:	4a2c      	ldr	r2, [pc, #176]	; (8017a90 <HAL_DMA_IRQHandler+0x3f8>)
 80179e0:	4293      	cmp	r3, r2
 80179e2:	d04a      	beq.n	8017a7a <HAL_DMA_IRQHandler+0x3e2>
 80179e4:	687b      	ldr	r3, [r7, #4]
 80179e6:	681b      	ldr	r3, [r3, #0]
 80179e8:	4a2a      	ldr	r2, [pc, #168]	; (8017a94 <HAL_DMA_IRQHandler+0x3fc>)
 80179ea:	4293      	cmp	r3, r2
 80179ec:	d045      	beq.n	8017a7a <HAL_DMA_IRQHandler+0x3e2>
 80179ee:	687b      	ldr	r3, [r7, #4]
 80179f0:	681b      	ldr	r3, [r3, #0]
 80179f2:	4a29      	ldr	r2, [pc, #164]	; (8017a98 <HAL_DMA_IRQHandler+0x400>)
 80179f4:	4293      	cmp	r3, r2
 80179f6:	d040      	beq.n	8017a7a <HAL_DMA_IRQHandler+0x3e2>
 80179f8:	687b      	ldr	r3, [r7, #4]
 80179fa:	681b      	ldr	r3, [r3, #0]
 80179fc:	4a27      	ldr	r2, [pc, #156]	; (8017a9c <HAL_DMA_IRQHandler+0x404>)
 80179fe:	4293      	cmp	r3, r2
 8017a00:	d03b      	beq.n	8017a7a <HAL_DMA_IRQHandler+0x3e2>
 8017a02:	687b      	ldr	r3, [r7, #4]
 8017a04:	681b      	ldr	r3, [r3, #0]
 8017a06:	4a26      	ldr	r2, [pc, #152]	; (8017aa0 <HAL_DMA_IRQHandler+0x408>)
 8017a08:	4293      	cmp	r3, r2
 8017a0a:	d036      	beq.n	8017a7a <HAL_DMA_IRQHandler+0x3e2>
 8017a0c:	687b      	ldr	r3, [r7, #4]
 8017a0e:	681b      	ldr	r3, [r3, #0]
 8017a10:	4a24      	ldr	r2, [pc, #144]	; (8017aa4 <HAL_DMA_IRQHandler+0x40c>)
 8017a12:	4293      	cmp	r3, r2
 8017a14:	d031      	beq.n	8017a7a <HAL_DMA_IRQHandler+0x3e2>
 8017a16:	687b      	ldr	r3, [r7, #4]
 8017a18:	681b      	ldr	r3, [r3, #0]
 8017a1a:	4a23      	ldr	r2, [pc, #140]	; (8017aa8 <HAL_DMA_IRQHandler+0x410>)
 8017a1c:	4293      	cmp	r3, r2
 8017a1e:	d02c      	beq.n	8017a7a <HAL_DMA_IRQHandler+0x3e2>
 8017a20:	687b      	ldr	r3, [r7, #4]
 8017a22:	681b      	ldr	r3, [r3, #0]
 8017a24:	4a21      	ldr	r2, [pc, #132]	; (8017aac <HAL_DMA_IRQHandler+0x414>)
 8017a26:	4293      	cmp	r3, r2
 8017a28:	d027      	beq.n	8017a7a <HAL_DMA_IRQHandler+0x3e2>
 8017a2a:	687b      	ldr	r3, [r7, #4]
 8017a2c:	681b      	ldr	r3, [r3, #0]
 8017a2e:	4a20      	ldr	r2, [pc, #128]	; (8017ab0 <HAL_DMA_IRQHandler+0x418>)
 8017a30:	4293      	cmp	r3, r2
 8017a32:	d022      	beq.n	8017a7a <HAL_DMA_IRQHandler+0x3e2>
 8017a34:	687b      	ldr	r3, [r7, #4]
 8017a36:	681b      	ldr	r3, [r3, #0]
 8017a38:	4a1e      	ldr	r2, [pc, #120]	; (8017ab4 <HAL_DMA_IRQHandler+0x41c>)
 8017a3a:	4293      	cmp	r3, r2
 8017a3c:	d01d      	beq.n	8017a7a <HAL_DMA_IRQHandler+0x3e2>
 8017a3e:	687b      	ldr	r3, [r7, #4]
 8017a40:	681b      	ldr	r3, [r3, #0]
 8017a42:	4a1d      	ldr	r2, [pc, #116]	; (8017ab8 <HAL_DMA_IRQHandler+0x420>)
 8017a44:	4293      	cmp	r3, r2
 8017a46:	d018      	beq.n	8017a7a <HAL_DMA_IRQHandler+0x3e2>
 8017a48:	687b      	ldr	r3, [r7, #4]
 8017a4a:	681b      	ldr	r3, [r3, #0]
 8017a4c:	4a1b      	ldr	r2, [pc, #108]	; (8017abc <HAL_DMA_IRQHandler+0x424>)
 8017a4e:	4293      	cmp	r3, r2
 8017a50:	d013      	beq.n	8017a7a <HAL_DMA_IRQHandler+0x3e2>
 8017a52:	687b      	ldr	r3, [r7, #4]
 8017a54:	681b      	ldr	r3, [r3, #0]
 8017a56:	4a1a      	ldr	r2, [pc, #104]	; (8017ac0 <HAL_DMA_IRQHandler+0x428>)
 8017a58:	4293      	cmp	r3, r2
 8017a5a:	d00e      	beq.n	8017a7a <HAL_DMA_IRQHandler+0x3e2>
 8017a5c:	687b      	ldr	r3, [r7, #4]
 8017a5e:	681b      	ldr	r3, [r3, #0]
 8017a60:	4a18      	ldr	r2, [pc, #96]	; (8017ac4 <HAL_DMA_IRQHandler+0x42c>)
 8017a62:	4293      	cmp	r3, r2
 8017a64:	d009      	beq.n	8017a7a <HAL_DMA_IRQHandler+0x3e2>
 8017a66:	687b      	ldr	r3, [r7, #4]
 8017a68:	681b      	ldr	r3, [r3, #0]
 8017a6a:	4a17      	ldr	r2, [pc, #92]	; (8017ac8 <HAL_DMA_IRQHandler+0x430>)
 8017a6c:	4293      	cmp	r3, r2
 8017a6e:	d004      	beq.n	8017a7a <HAL_DMA_IRQHandler+0x3e2>
 8017a70:	687b      	ldr	r3, [r7, #4]
 8017a72:	681b      	ldr	r3, [r3, #0]
 8017a74:	4a15      	ldr	r2, [pc, #84]	; (8017acc <HAL_DMA_IRQHandler+0x434>)
 8017a76:	4293      	cmp	r3, r2
 8017a78:	d12a      	bne.n	8017ad0 <HAL_DMA_IRQHandler+0x438>
 8017a7a:	687b      	ldr	r3, [r7, #4]
 8017a7c:	681b      	ldr	r3, [r3, #0]
 8017a7e:	681b      	ldr	r3, [r3, #0]
 8017a80:	f003 0302 	and.w	r3, r3, #2
 8017a84:	2b00      	cmp	r3, #0
 8017a86:	bf14      	ite	ne
 8017a88:	2301      	movne	r3, #1
 8017a8a:	2300      	moveq	r3, #0
 8017a8c:	b2db      	uxtb	r3, r3
 8017a8e:	e023      	b.n	8017ad8 <HAL_DMA_IRQHandler+0x440>
 8017a90:	40020010 	.word	0x40020010
 8017a94:	40020028 	.word	0x40020028
 8017a98:	40020040 	.word	0x40020040
 8017a9c:	40020058 	.word	0x40020058
 8017aa0:	40020070 	.word	0x40020070
 8017aa4:	40020088 	.word	0x40020088
 8017aa8:	400200a0 	.word	0x400200a0
 8017aac:	400200b8 	.word	0x400200b8
 8017ab0:	40020410 	.word	0x40020410
 8017ab4:	40020428 	.word	0x40020428
 8017ab8:	40020440 	.word	0x40020440
 8017abc:	40020458 	.word	0x40020458
 8017ac0:	40020470 	.word	0x40020470
 8017ac4:	40020488 	.word	0x40020488
 8017ac8:	400204a0 	.word	0x400204a0
 8017acc:	400204b8 	.word	0x400204b8
 8017ad0:	687b      	ldr	r3, [r7, #4]
 8017ad2:	681b      	ldr	r3, [r3, #0]
 8017ad4:	681b      	ldr	r3, [r3, #0]
 8017ad6:	2300      	movs	r3, #0
 8017ad8:	2b00      	cmp	r3, #0
 8017ada:	d00d      	beq.n	8017af8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8017adc:	687b      	ldr	r3, [r7, #4]
 8017ade:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017ae0:	f003 031f 	and.w	r3, r3, #31
 8017ae4:	2204      	movs	r2, #4
 8017ae6:	409a      	lsls	r2, r3
 8017ae8:	6a3b      	ldr	r3, [r7, #32]
 8017aea:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8017aec:	687b      	ldr	r3, [r7, #4]
 8017aee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017af0:	f043 0204 	orr.w	r2, r3, #4
 8017af4:	687b      	ldr	r3, [r7, #4]
 8017af6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8017af8:	687b      	ldr	r3, [r7, #4]
 8017afa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017afc:	f003 031f 	and.w	r3, r3, #31
 8017b00:	2210      	movs	r2, #16
 8017b02:	409a      	lsls	r2, r3
 8017b04:	69bb      	ldr	r3, [r7, #24]
 8017b06:	4013      	ands	r3, r2
 8017b08:	2b00      	cmp	r3, #0
 8017b0a:	f000 80a6 	beq.w	8017c5a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8017b0e:	687b      	ldr	r3, [r7, #4]
 8017b10:	681b      	ldr	r3, [r3, #0]
 8017b12:	4a85      	ldr	r2, [pc, #532]	; (8017d28 <HAL_DMA_IRQHandler+0x690>)
 8017b14:	4293      	cmp	r3, r2
 8017b16:	d04a      	beq.n	8017bae <HAL_DMA_IRQHandler+0x516>
 8017b18:	687b      	ldr	r3, [r7, #4]
 8017b1a:	681b      	ldr	r3, [r3, #0]
 8017b1c:	4a83      	ldr	r2, [pc, #524]	; (8017d2c <HAL_DMA_IRQHandler+0x694>)
 8017b1e:	4293      	cmp	r3, r2
 8017b20:	d045      	beq.n	8017bae <HAL_DMA_IRQHandler+0x516>
 8017b22:	687b      	ldr	r3, [r7, #4]
 8017b24:	681b      	ldr	r3, [r3, #0]
 8017b26:	4a82      	ldr	r2, [pc, #520]	; (8017d30 <HAL_DMA_IRQHandler+0x698>)
 8017b28:	4293      	cmp	r3, r2
 8017b2a:	d040      	beq.n	8017bae <HAL_DMA_IRQHandler+0x516>
 8017b2c:	687b      	ldr	r3, [r7, #4]
 8017b2e:	681b      	ldr	r3, [r3, #0]
 8017b30:	4a80      	ldr	r2, [pc, #512]	; (8017d34 <HAL_DMA_IRQHandler+0x69c>)
 8017b32:	4293      	cmp	r3, r2
 8017b34:	d03b      	beq.n	8017bae <HAL_DMA_IRQHandler+0x516>
 8017b36:	687b      	ldr	r3, [r7, #4]
 8017b38:	681b      	ldr	r3, [r3, #0]
 8017b3a:	4a7f      	ldr	r2, [pc, #508]	; (8017d38 <HAL_DMA_IRQHandler+0x6a0>)
 8017b3c:	4293      	cmp	r3, r2
 8017b3e:	d036      	beq.n	8017bae <HAL_DMA_IRQHandler+0x516>
 8017b40:	687b      	ldr	r3, [r7, #4]
 8017b42:	681b      	ldr	r3, [r3, #0]
 8017b44:	4a7d      	ldr	r2, [pc, #500]	; (8017d3c <HAL_DMA_IRQHandler+0x6a4>)
 8017b46:	4293      	cmp	r3, r2
 8017b48:	d031      	beq.n	8017bae <HAL_DMA_IRQHandler+0x516>
 8017b4a:	687b      	ldr	r3, [r7, #4]
 8017b4c:	681b      	ldr	r3, [r3, #0]
 8017b4e:	4a7c      	ldr	r2, [pc, #496]	; (8017d40 <HAL_DMA_IRQHandler+0x6a8>)
 8017b50:	4293      	cmp	r3, r2
 8017b52:	d02c      	beq.n	8017bae <HAL_DMA_IRQHandler+0x516>
 8017b54:	687b      	ldr	r3, [r7, #4]
 8017b56:	681b      	ldr	r3, [r3, #0]
 8017b58:	4a7a      	ldr	r2, [pc, #488]	; (8017d44 <HAL_DMA_IRQHandler+0x6ac>)
 8017b5a:	4293      	cmp	r3, r2
 8017b5c:	d027      	beq.n	8017bae <HAL_DMA_IRQHandler+0x516>
 8017b5e:	687b      	ldr	r3, [r7, #4]
 8017b60:	681b      	ldr	r3, [r3, #0]
 8017b62:	4a79      	ldr	r2, [pc, #484]	; (8017d48 <HAL_DMA_IRQHandler+0x6b0>)
 8017b64:	4293      	cmp	r3, r2
 8017b66:	d022      	beq.n	8017bae <HAL_DMA_IRQHandler+0x516>
 8017b68:	687b      	ldr	r3, [r7, #4]
 8017b6a:	681b      	ldr	r3, [r3, #0]
 8017b6c:	4a77      	ldr	r2, [pc, #476]	; (8017d4c <HAL_DMA_IRQHandler+0x6b4>)
 8017b6e:	4293      	cmp	r3, r2
 8017b70:	d01d      	beq.n	8017bae <HAL_DMA_IRQHandler+0x516>
 8017b72:	687b      	ldr	r3, [r7, #4]
 8017b74:	681b      	ldr	r3, [r3, #0]
 8017b76:	4a76      	ldr	r2, [pc, #472]	; (8017d50 <HAL_DMA_IRQHandler+0x6b8>)
 8017b78:	4293      	cmp	r3, r2
 8017b7a:	d018      	beq.n	8017bae <HAL_DMA_IRQHandler+0x516>
 8017b7c:	687b      	ldr	r3, [r7, #4]
 8017b7e:	681b      	ldr	r3, [r3, #0]
 8017b80:	4a74      	ldr	r2, [pc, #464]	; (8017d54 <HAL_DMA_IRQHandler+0x6bc>)
 8017b82:	4293      	cmp	r3, r2
 8017b84:	d013      	beq.n	8017bae <HAL_DMA_IRQHandler+0x516>
 8017b86:	687b      	ldr	r3, [r7, #4]
 8017b88:	681b      	ldr	r3, [r3, #0]
 8017b8a:	4a73      	ldr	r2, [pc, #460]	; (8017d58 <HAL_DMA_IRQHandler+0x6c0>)
 8017b8c:	4293      	cmp	r3, r2
 8017b8e:	d00e      	beq.n	8017bae <HAL_DMA_IRQHandler+0x516>
 8017b90:	687b      	ldr	r3, [r7, #4]
 8017b92:	681b      	ldr	r3, [r3, #0]
 8017b94:	4a71      	ldr	r2, [pc, #452]	; (8017d5c <HAL_DMA_IRQHandler+0x6c4>)
 8017b96:	4293      	cmp	r3, r2
 8017b98:	d009      	beq.n	8017bae <HAL_DMA_IRQHandler+0x516>
 8017b9a:	687b      	ldr	r3, [r7, #4]
 8017b9c:	681b      	ldr	r3, [r3, #0]
 8017b9e:	4a70      	ldr	r2, [pc, #448]	; (8017d60 <HAL_DMA_IRQHandler+0x6c8>)
 8017ba0:	4293      	cmp	r3, r2
 8017ba2:	d004      	beq.n	8017bae <HAL_DMA_IRQHandler+0x516>
 8017ba4:	687b      	ldr	r3, [r7, #4]
 8017ba6:	681b      	ldr	r3, [r3, #0]
 8017ba8:	4a6e      	ldr	r2, [pc, #440]	; (8017d64 <HAL_DMA_IRQHandler+0x6cc>)
 8017baa:	4293      	cmp	r3, r2
 8017bac:	d10a      	bne.n	8017bc4 <HAL_DMA_IRQHandler+0x52c>
 8017bae:	687b      	ldr	r3, [r7, #4]
 8017bb0:	681b      	ldr	r3, [r3, #0]
 8017bb2:	681b      	ldr	r3, [r3, #0]
 8017bb4:	f003 0308 	and.w	r3, r3, #8
 8017bb8:	2b00      	cmp	r3, #0
 8017bba:	bf14      	ite	ne
 8017bbc:	2301      	movne	r3, #1
 8017bbe:	2300      	moveq	r3, #0
 8017bc0:	b2db      	uxtb	r3, r3
 8017bc2:	e009      	b.n	8017bd8 <HAL_DMA_IRQHandler+0x540>
 8017bc4:	687b      	ldr	r3, [r7, #4]
 8017bc6:	681b      	ldr	r3, [r3, #0]
 8017bc8:	681b      	ldr	r3, [r3, #0]
 8017bca:	f003 0304 	and.w	r3, r3, #4
 8017bce:	2b00      	cmp	r3, #0
 8017bd0:	bf14      	ite	ne
 8017bd2:	2301      	movne	r3, #1
 8017bd4:	2300      	moveq	r3, #0
 8017bd6:	b2db      	uxtb	r3, r3
 8017bd8:	2b00      	cmp	r3, #0
 8017bda:	d03e      	beq.n	8017c5a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8017bdc:	687b      	ldr	r3, [r7, #4]
 8017bde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017be0:	f003 031f 	and.w	r3, r3, #31
 8017be4:	2210      	movs	r2, #16
 8017be6:	409a      	lsls	r2, r3
 8017be8:	6a3b      	ldr	r3, [r7, #32]
 8017bea:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8017bec:	687b      	ldr	r3, [r7, #4]
 8017bee:	681b      	ldr	r3, [r3, #0]
 8017bf0:	681b      	ldr	r3, [r3, #0]
 8017bf2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8017bf6:	2b00      	cmp	r3, #0
 8017bf8:	d018      	beq.n	8017c2c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8017bfa:	687b      	ldr	r3, [r7, #4]
 8017bfc:	681b      	ldr	r3, [r3, #0]
 8017bfe:	681b      	ldr	r3, [r3, #0]
 8017c00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8017c04:	2b00      	cmp	r3, #0
 8017c06:	d108      	bne.n	8017c1a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8017c08:	687b      	ldr	r3, [r7, #4]
 8017c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017c0c:	2b00      	cmp	r3, #0
 8017c0e:	d024      	beq.n	8017c5a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8017c10:	687b      	ldr	r3, [r7, #4]
 8017c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017c14:	6878      	ldr	r0, [r7, #4]
 8017c16:	4798      	blx	r3
 8017c18:	e01f      	b.n	8017c5a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8017c1a:	687b      	ldr	r3, [r7, #4]
 8017c1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017c1e:	2b00      	cmp	r3, #0
 8017c20:	d01b      	beq.n	8017c5a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8017c22:	687b      	ldr	r3, [r7, #4]
 8017c24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017c26:	6878      	ldr	r0, [r7, #4]
 8017c28:	4798      	blx	r3
 8017c2a:	e016      	b.n	8017c5a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8017c2c:	687b      	ldr	r3, [r7, #4]
 8017c2e:	681b      	ldr	r3, [r3, #0]
 8017c30:	681b      	ldr	r3, [r3, #0]
 8017c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017c36:	2b00      	cmp	r3, #0
 8017c38:	d107      	bne.n	8017c4a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8017c3a:	687b      	ldr	r3, [r7, #4]
 8017c3c:	681b      	ldr	r3, [r3, #0]
 8017c3e:	681a      	ldr	r2, [r3, #0]
 8017c40:	687b      	ldr	r3, [r7, #4]
 8017c42:	681b      	ldr	r3, [r3, #0]
 8017c44:	f022 0208 	bic.w	r2, r2, #8
 8017c48:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8017c4a:	687b      	ldr	r3, [r7, #4]
 8017c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017c4e:	2b00      	cmp	r3, #0
 8017c50:	d003      	beq.n	8017c5a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8017c52:	687b      	ldr	r3, [r7, #4]
 8017c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017c56:	6878      	ldr	r0, [r7, #4]
 8017c58:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8017c5a:	687b      	ldr	r3, [r7, #4]
 8017c5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017c5e:	f003 031f 	and.w	r3, r3, #31
 8017c62:	2220      	movs	r2, #32
 8017c64:	409a      	lsls	r2, r3
 8017c66:	69bb      	ldr	r3, [r7, #24]
 8017c68:	4013      	ands	r3, r2
 8017c6a:	2b00      	cmp	r3, #0
 8017c6c:	f000 8110 	beq.w	8017e90 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8017c70:	687b      	ldr	r3, [r7, #4]
 8017c72:	681b      	ldr	r3, [r3, #0]
 8017c74:	4a2c      	ldr	r2, [pc, #176]	; (8017d28 <HAL_DMA_IRQHandler+0x690>)
 8017c76:	4293      	cmp	r3, r2
 8017c78:	d04a      	beq.n	8017d10 <HAL_DMA_IRQHandler+0x678>
 8017c7a:	687b      	ldr	r3, [r7, #4]
 8017c7c:	681b      	ldr	r3, [r3, #0]
 8017c7e:	4a2b      	ldr	r2, [pc, #172]	; (8017d2c <HAL_DMA_IRQHandler+0x694>)
 8017c80:	4293      	cmp	r3, r2
 8017c82:	d045      	beq.n	8017d10 <HAL_DMA_IRQHandler+0x678>
 8017c84:	687b      	ldr	r3, [r7, #4]
 8017c86:	681b      	ldr	r3, [r3, #0]
 8017c88:	4a29      	ldr	r2, [pc, #164]	; (8017d30 <HAL_DMA_IRQHandler+0x698>)
 8017c8a:	4293      	cmp	r3, r2
 8017c8c:	d040      	beq.n	8017d10 <HAL_DMA_IRQHandler+0x678>
 8017c8e:	687b      	ldr	r3, [r7, #4]
 8017c90:	681b      	ldr	r3, [r3, #0]
 8017c92:	4a28      	ldr	r2, [pc, #160]	; (8017d34 <HAL_DMA_IRQHandler+0x69c>)
 8017c94:	4293      	cmp	r3, r2
 8017c96:	d03b      	beq.n	8017d10 <HAL_DMA_IRQHandler+0x678>
 8017c98:	687b      	ldr	r3, [r7, #4]
 8017c9a:	681b      	ldr	r3, [r3, #0]
 8017c9c:	4a26      	ldr	r2, [pc, #152]	; (8017d38 <HAL_DMA_IRQHandler+0x6a0>)
 8017c9e:	4293      	cmp	r3, r2
 8017ca0:	d036      	beq.n	8017d10 <HAL_DMA_IRQHandler+0x678>
 8017ca2:	687b      	ldr	r3, [r7, #4]
 8017ca4:	681b      	ldr	r3, [r3, #0]
 8017ca6:	4a25      	ldr	r2, [pc, #148]	; (8017d3c <HAL_DMA_IRQHandler+0x6a4>)
 8017ca8:	4293      	cmp	r3, r2
 8017caa:	d031      	beq.n	8017d10 <HAL_DMA_IRQHandler+0x678>
 8017cac:	687b      	ldr	r3, [r7, #4]
 8017cae:	681b      	ldr	r3, [r3, #0]
 8017cb0:	4a23      	ldr	r2, [pc, #140]	; (8017d40 <HAL_DMA_IRQHandler+0x6a8>)
 8017cb2:	4293      	cmp	r3, r2
 8017cb4:	d02c      	beq.n	8017d10 <HAL_DMA_IRQHandler+0x678>
 8017cb6:	687b      	ldr	r3, [r7, #4]
 8017cb8:	681b      	ldr	r3, [r3, #0]
 8017cba:	4a22      	ldr	r2, [pc, #136]	; (8017d44 <HAL_DMA_IRQHandler+0x6ac>)
 8017cbc:	4293      	cmp	r3, r2
 8017cbe:	d027      	beq.n	8017d10 <HAL_DMA_IRQHandler+0x678>
 8017cc0:	687b      	ldr	r3, [r7, #4]
 8017cc2:	681b      	ldr	r3, [r3, #0]
 8017cc4:	4a20      	ldr	r2, [pc, #128]	; (8017d48 <HAL_DMA_IRQHandler+0x6b0>)
 8017cc6:	4293      	cmp	r3, r2
 8017cc8:	d022      	beq.n	8017d10 <HAL_DMA_IRQHandler+0x678>
 8017cca:	687b      	ldr	r3, [r7, #4]
 8017ccc:	681b      	ldr	r3, [r3, #0]
 8017cce:	4a1f      	ldr	r2, [pc, #124]	; (8017d4c <HAL_DMA_IRQHandler+0x6b4>)
 8017cd0:	4293      	cmp	r3, r2
 8017cd2:	d01d      	beq.n	8017d10 <HAL_DMA_IRQHandler+0x678>
 8017cd4:	687b      	ldr	r3, [r7, #4]
 8017cd6:	681b      	ldr	r3, [r3, #0]
 8017cd8:	4a1d      	ldr	r2, [pc, #116]	; (8017d50 <HAL_DMA_IRQHandler+0x6b8>)
 8017cda:	4293      	cmp	r3, r2
 8017cdc:	d018      	beq.n	8017d10 <HAL_DMA_IRQHandler+0x678>
 8017cde:	687b      	ldr	r3, [r7, #4]
 8017ce0:	681b      	ldr	r3, [r3, #0]
 8017ce2:	4a1c      	ldr	r2, [pc, #112]	; (8017d54 <HAL_DMA_IRQHandler+0x6bc>)
 8017ce4:	4293      	cmp	r3, r2
 8017ce6:	d013      	beq.n	8017d10 <HAL_DMA_IRQHandler+0x678>
 8017ce8:	687b      	ldr	r3, [r7, #4]
 8017cea:	681b      	ldr	r3, [r3, #0]
 8017cec:	4a1a      	ldr	r2, [pc, #104]	; (8017d58 <HAL_DMA_IRQHandler+0x6c0>)
 8017cee:	4293      	cmp	r3, r2
 8017cf0:	d00e      	beq.n	8017d10 <HAL_DMA_IRQHandler+0x678>
 8017cf2:	687b      	ldr	r3, [r7, #4]
 8017cf4:	681b      	ldr	r3, [r3, #0]
 8017cf6:	4a19      	ldr	r2, [pc, #100]	; (8017d5c <HAL_DMA_IRQHandler+0x6c4>)
 8017cf8:	4293      	cmp	r3, r2
 8017cfa:	d009      	beq.n	8017d10 <HAL_DMA_IRQHandler+0x678>
 8017cfc:	687b      	ldr	r3, [r7, #4]
 8017cfe:	681b      	ldr	r3, [r3, #0]
 8017d00:	4a17      	ldr	r2, [pc, #92]	; (8017d60 <HAL_DMA_IRQHandler+0x6c8>)
 8017d02:	4293      	cmp	r3, r2
 8017d04:	d004      	beq.n	8017d10 <HAL_DMA_IRQHandler+0x678>
 8017d06:	687b      	ldr	r3, [r7, #4]
 8017d08:	681b      	ldr	r3, [r3, #0]
 8017d0a:	4a16      	ldr	r2, [pc, #88]	; (8017d64 <HAL_DMA_IRQHandler+0x6cc>)
 8017d0c:	4293      	cmp	r3, r2
 8017d0e:	d12b      	bne.n	8017d68 <HAL_DMA_IRQHandler+0x6d0>
 8017d10:	687b      	ldr	r3, [r7, #4]
 8017d12:	681b      	ldr	r3, [r3, #0]
 8017d14:	681b      	ldr	r3, [r3, #0]
 8017d16:	f003 0310 	and.w	r3, r3, #16
 8017d1a:	2b00      	cmp	r3, #0
 8017d1c:	bf14      	ite	ne
 8017d1e:	2301      	movne	r3, #1
 8017d20:	2300      	moveq	r3, #0
 8017d22:	b2db      	uxtb	r3, r3
 8017d24:	e02a      	b.n	8017d7c <HAL_DMA_IRQHandler+0x6e4>
 8017d26:	bf00      	nop
 8017d28:	40020010 	.word	0x40020010
 8017d2c:	40020028 	.word	0x40020028
 8017d30:	40020040 	.word	0x40020040
 8017d34:	40020058 	.word	0x40020058
 8017d38:	40020070 	.word	0x40020070
 8017d3c:	40020088 	.word	0x40020088
 8017d40:	400200a0 	.word	0x400200a0
 8017d44:	400200b8 	.word	0x400200b8
 8017d48:	40020410 	.word	0x40020410
 8017d4c:	40020428 	.word	0x40020428
 8017d50:	40020440 	.word	0x40020440
 8017d54:	40020458 	.word	0x40020458
 8017d58:	40020470 	.word	0x40020470
 8017d5c:	40020488 	.word	0x40020488
 8017d60:	400204a0 	.word	0x400204a0
 8017d64:	400204b8 	.word	0x400204b8
 8017d68:	687b      	ldr	r3, [r7, #4]
 8017d6a:	681b      	ldr	r3, [r3, #0]
 8017d6c:	681b      	ldr	r3, [r3, #0]
 8017d6e:	f003 0302 	and.w	r3, r3, #2
 8017d72:	2b00      	cmp	r3, #0
 8017d74:	bf14      	ite	ne
 8017d76:	2301      	movne	r3, #1
 8017d78:	2300      	moveq	r3, #0
 8017d7a:	b2db      	uxtb	r3, r3
 8017d7c:	2b00      	cmp	r3, #0
 8017d7e:	f000 8087 	beq.w	8017e90 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8017d82:	687b      	ldr	r3, [r7, #4]
 8017d84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017d86:	f003 031f 	and.w	r3, r3, #31
 8017d8a:	2220      	movs	r2, #32
 8017d8c:	409a      	lsls	r2, r3
 8017d8e:	6a3b      	ldr	r3, [r7, #32]
 8017d90:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8017d92:	687b      	ldr	r3, [r7, #4]
 8017d94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8017d98:	b2db      	uxtb	r3, r3
 8017d9a:	2b04      	cmp	r3, #4
 8017d9c:	d139      	bne.n	8017e12 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8017d9e:	687b      	ldr	r3, [r7, #4]
 8017da0:	681b      	ldr	r3, [r3, #0]
 8017da2:	681a      	ldr	r2, [r3, #0]
 8017da4:	687b      	ldr	r3, [r7, #4]
 8017da6:	681b      	ldr	r3, [r3, #0]
 8017da8:	f022 0216 	bic.w	r2, r2, #22
 8017dac:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8017dae:	687b      	ldr	r3, [r7, #4]
 8017db0:	681b      	ldr	r3, [r3, #0]
 8017db2:	695a      	ldr	r2, [r3, #20]
 8017db4:	687b      	ldr	r3, [r7, #4]
 8017db6:	681b      	ldr	r3, [r3, #0]
 8017db8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8017dbc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8017dbe:	687b      	ldr	r3, [r7, #4]
 8017dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017dc2:	2b00      	cmp	r3, #0
 8017dc4:	d103      	bne.n	8017dce <HAL_DMA_IRQHandler+0x736>
 8017dc6:	687b      	ldr	r3, [r7, #4]
 8017dc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017dca:	2b00      	cmp	r3, #0
 8017dcc:	d007      	beq.n	8017dde <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8017dce:	687b      	ldr	r3, [r7, #4]
 8017dd0:	681b      	ldr	r3, [r3, #0]
 8017dd2:	681a      	ldr	r2, [r3, #0]
 8017dd4:	687b      	ldr	r3, [r7, #4]
 8017dd6:	681b      	ldr	r3, [r3, #0]
 8017dd8:	f022 0208 	bic.w	r2, r2, #8
 8017ddc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8017dde:	687b      	ldr	r3, [r7, #4]
 8017de0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017de2:	f003 031f 	and.w	r3, r3, #31
 8017de6:	223f      	movs	r2, #63	; 0x3f
 8017de8:	409a      	lsls	r2, r3
 8017dea:	6a3b      	ldr	r3, [r7, #32]
 8017dec:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8017dee:	687b      	ldr	r3, [r7, #4]
 8017df0:	2201      	movs	r2, #1
 8017df2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8017df6:	687b      	ldr	r3, [r7, #4]
 8017df8:	2200      	movs	r2, #0
 8017dfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8017dfe:	687b      	ldr	r3, [r7, #4]
 8017e00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017e02:	2b00      	cmp	r3, #0
 8017e04:	f000 834a 	beq.w	801849c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8017e08:	687b      	ldr	r3, [r7, #4]
 8017e0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017e0c:	6878      	ldr	r0, [r7, #4]
 8017e0e:	4798      	blx	r3
          }
          return;
 8017e10:	e344      	b.n	801849c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8017e12:	687b      	ldr	r3, [r7, #4]
 8017e14:	681b      	ldr	r3, [r3, #0]
 8017e16:	681b      	ldr	r3, [r3, #0]
 8017e18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8017e1c:	2b00      	cmp	r3, #0
 8017e1e:	d018      	beq.n	8017e52 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8017e20:	687b      	ldr	r3, [r7, #4]
 8017e22:	681b      	ldr	r3, [r3, #0]
 8017e24:	681b      	ldr	r3, [r3, #0]
 8017e26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8017e2a:	2b00      	cmp	r3, #0
 8017e2c:	d108      	bne.n	8017e40 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8017e2e:	687b      	ldr	r3, [r7, #4]
 8017e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017e32:	2b00      	cmp	r3, #0
 8017e34:	d02c      	beq.n	8017e90 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8017e36:	687b      	ldr	r3, [r7, #4]
 8017e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017e3a:	6878      	ldr	r0, [r7, #4]
 8017e3c:	4798      	blx	r3
 8017e3e:	e027      	b.n	8017e90 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8017e40:	687b      	ldr	r3, [r7, #4]
 8017e42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017e44:	2b00      	cmp	r3, #0
 8017e46:	d023      	beq.n	8017e90 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8017e48:	687b      	ldr	r3, [r7, #4]
 8017e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017e4c:	6878      	ldr	r0, [r7, #4]
 8017e4e:	4798      	blx	r3
 8017e50:	e01e      	b.n	8017e90 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8017e52:	687b      	ldr	r3, [r7, #4]
 8017e54:	681b      	ldr	r3, [r3, #0]
 8017e56:	681b      	ldr	r3, [r3, #0]
 8017e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017e5c:	2b00      	cmp	r3, #0
 8017e5e:	d10f      	bne.n	8017e80 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8017e60:	687b      	ldr	r3, [r7, #4]
 8017e62:	681b      	ldr	r3, [r3, #0]
 8017e64:	681a      	ldr	r2, [r3, #0]
 8017e66:	687b      	ldr	r3, [r7, #4]
 8017e68:	681b      	ldr	r3, [r3, #0]
 8017e6a:	f022 0210 	bic.w	r2, r2, #16
 8017e6e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8017e70:	687b      	ldr	r3, [r7, #4]
 8017e72:	2201      	movs	r2, #1
 8017e74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8017e78:	687b      	ldr	r3, [r7, #4]
 8017e7a:	2200      	movs	r2, #0
 8017e7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8017e80:	687b      	ldr	r3, [r7, #4]
 8017e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017e84:	2b00      	cmp	r3, #0
 8017e86:	d003      	beq.n	8017e90 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8017e88:	687b      	ldr	r3, [r7, #4]
 8017e8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017e8c:	6878      	ldr	r0, [r7, #4]
 8017e8e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8017e90:	687b      	ldr	r3, [r7, #4]
 8017e92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017e94:	2b00      	cmp	r3, #0
 8017e96:	f000 8306 	beq.w	80184a6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8017e9a:	687b      	ldr	r3, [r7, #4]
 8017e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017e9e:	f003 0301 	and.w	r3, r3, #1
 8017ea2:	2b00      	cmp	r3, #0
 8017ea4:	f000 8088 	beq.w	8017fb8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8017ea8:	687b      	ldr	r3, [r7, #4]
 8017eaa:	2204      	movs	r2, #4
 8017eac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8017eb0:	687b      	ldr	r3, [r7, #4]
 8017eb2:	681b      	ldr	r3, [r3, #0]
 8017eb4:	4a7a      	ldr	r2, [pc, #488]	; (80180a0 <HAL_DMA_IRQHandler+0xa08>)
 8017eb6:	4293      	cmp	r3, r2
 8017eb8:	d04a      	beq.n	8017f50 <HAL_DMA_IRQHandler+0x8b8>
 8017eba:	687b      	ldr	r3, [r7, #4]
 8017ebc:	681b      	ldr	r3, [r3, #0]
 8017ebe:	4a79      	ldr	r2, [pc, #484]	; (80180a4 <HAL_DMA_IRQHandler+0xa0c>)
 8017ec0:	4293      	cmp	r3, r2
 8017ec2:	d045      	beq.n	8017f50 <HAL_DMA_IRQHandler+0x8b8>
 8017ec4:	687b      	ldr	r3, [r7, #4]
 8017ec6:	681b      	ldr	r3, [r3, #0]
 8017ec8:	4a77      	ldr	r2, [pc, #476]	; (80180a8 <HAL_DMA_IRQHandler+0xa10>)
 8017eca:	4293      	cmp	r3, r2
 8017ecc:	d040      	beq.n	8017f50 <HAL_DMA_IRQHandler+0x8b8>
 8017ece:	687b      	ldr	r3, [r7, #4]
 8017ed0:	681b      	ldr	r3, [r3, #0]
 8017ed2:	4a76      	ldr	r2, [pc, #472]	; (80180ac <HAL_DMA_IRQHandler+0xa14>)
 8017ed4:	4293      	cmp	r3, r2
 8017ed6:	d03b      	beq.n	8017f50 <HAL_DMA_IRQHandler+0x8b8>
 8017ed8:	687b      	ldr	r3, [r7, #4]
 8017eda:	681b      	ldr	r3, [r3, #0]
 8017edc:	4a74      	ldr	r2, [pc, #464]	; (80180b0 <HAL_DMA_IRQHandler+0xa18>)
 8017ede:	4293      	cmp	r3, r2
 8017ee0:	d036      	beq.n	8017f50 <HAL_DMA_IRQHandler+0x8b8>
 8017ee2:	687b      	ldr	r3, [r7, #4]
 8017ee4:	681b      	ldr	r3, [r3, #0]
 8017ee6:	4a73      	ldr	r2, [pc, #460]	; (80180b4 <HAL_DMA_IRQHandler+0xa1c>)
 8017ee8:	4293      	cmp	r3, r2
 8017eea:	d031      	beq.n	8017f50 <HAL_DMA_IRQHandler+0x8b8>
 8017eec:	687b      	ldr	r3, [r7, #4]
 8017eee:	681b      	ldr	r3, [r3, #0]
 8017ef0:	4a71      	ldr	r2, [pc, #452]	; (80180b8 <HAL_DMA_IRQHandler+0xa20>)
 8017ef2:	4293      	cmp	r3, r2
 8017ef4:	d02c      	beq.n	8017f50 <HAL_DMA_IRQHandler+0x8b8>
 8017ef6:	687b      	ldr	r3, [r7, #4]
 8017ef8:	681b      	ldr	r3, [r3, #0]
 8017efa:	4a70      	ldr	r2, [pc, #448]	; (80180bc <HAL_DMA_IRQHandler+0xa24>)
 8017efc:	4293      	cmp	r3, r2
 8017efe:	d027      	beq.n	8017f50 <HAL_DMA_IRQHandler+0x8b8>
 8017f00:	687b      	ldr	r3, [r7, #4]
 8017f02:	681b      	ldr	r3, [r3, #0]
 8017f04:	4a6e      	ldr	r2, [pc, #440]	; (80180c0 <HAL_DMA_IRQHandler+0xa28>)
 8017f06:	4293      	cmp	r3, r2
 8017f08:	d022      	beq.n	8017f50 <HAL_DMA_IRQHandler+0x8b8>
 8017f0a:	687b      	ldr	r3, [r7, #4]
 8017f0c:	681b      	ldr	r3, [r3, #0]
 8017f0e:	4a6d      	ldr	r2, [pc, #436]	; (80180c4 <HAL_DMA_IRQHandler+0xa2c>)
 8017f10:	4293      	cmp	r3, r2
 8017f12:	d01d      	beq.n	8017f50 <HAL_DMA_IRQHandler+0x8b8>
 8017f14:	687b      	ldr	r3, [r7, #4]
 8017f16:	681b      	ldr	r3, [r3, #0]
 8017f18:	4a6b      	ldr	r2, [pc, #428]	; (80180c8 <HAL_DMA_IRQHandler+0xa30>)
 8017f1a:	4293      	cmp	r3, r2
 8017f1c:	d018      	beq.n	8017f50 <HAL_DMA_IRQHandler+0x8b8>
 8017f1e:	687b      	ldr	r3, [r7, #4]
 8017f20:	681b      	ldr	r3, [r3, #0]
 8017f22:	4a6a      	ldr	r2, [pc, #424]	; (80180cc <HAL_DMA_IRQHandler+0xa34>)
 8017f24:	4293      	cmp	r3, r2
 8017f26:	d013      	beq.n	8017f50 <HAL_DMA_IRQHandler+0x8b8>
 8017f28:	687b      	ldr	r3, [r7, #4]
 8017f2a:	681b      	ldr	r3, [r3, #0]
 8017f2c:	4a68      	ldr	r2, [pc, #416]	; (80180d0 <HAL_DMA_IRQHandler+0xa38>)
 8017f2e:	4293      	cmp	r3, r2
 8017f30:	d00e      	beq.n	8017f50 <HAL_DMA_IRQHandler+0x8b8>
 8017f32:	687b      	ldr	r3, [r7, #4]
 8017f34:	681b      	ldr	r3, [r3, #0]
 8017f36:	4a67      	ldr	r2, [pc, #412]	; (80180d4 <HAL_DMA_IRQHandler+0xa3c>)
 8017f38:	4293      	cmp	r3, r2
 8017f3a:	d009      	beq.n	8017f50 <HAL_DMA_IRQHandler+0x8b8>
 8017f3c:	687b      	ldr	r3, [r7, #4]
 8017f3e:	681b      	ldr	r3, [r3, #0]
 8017f40:	4a65      	ldr	r2, [pc, #404]	; (80180d8 <HAL_DMA_IRQHandler+0xa40>)
 8017f42:	4293      	cmp	r3, r2
 8017f44:	d004      	beq.n	8017f50 <HAL_DMA_IRQHandler+0x8b8>
 8017f46:	687b      	ldr	r3, [r7, #4]
 8017f48:	681b      	ldr	r3, [r3, #0]
 8017f4a:	4a64      	ldr	r2, [pc, #400]	; (80180dc <HAL_DMA_IRQHandler+0xa44>)
 8017f4c:	4293      	cmp	r3, r2
 8017f4e:	d108      	bne.n	8017f62 <HAL_DMA_IRQHandler+0x8ca>
 8017f50:	687b      	ldr	r3, [r7, #4]
 8017f52:	681b      	ldr	r3, [r3, #0]
 8017f54:	681a      	ldr	r2, [r3, #0]
 8017f56:	687b      	ldr	r3, [r7, #4]
 8017f58:	681b      	ldr	r3, [r3, #0]
 8017f5a:	f022 0201 	bic.w	r2, r2, #1
 8017f5e:	601a      	str	r2, [r3, #0]
 8017f60:	e007      	b.n	8017f72 <HAL_DMA_IRQHandler+0x8da>
 8017f62:	687b      	ldr	r3, [r7, #4]
 8017f64:	681b      	ldr	r3, [r3, #0]
 8017f66:	681a      	ldr	r2, [r3, #0]
 8017f68:	687b      	ldr	r3, [r7, #4]
 8017f6a:	681b      	ldr	r3, [r3, #0]
 8017f6c:	f022 0201 	bic.w	r2, r2, #1
 8017f70:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8017f72:	68fb      	ldr	r3, [r7, #12]
 8017f74:	3301      	adds	r3, #1
 8017f76:	60fb      	str	r3, [r7, #12]
 8017f78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017f7a:	429a      	cmp	r2, r3
 8017f7c:	d307      	bcc.n	8017f8e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8017f7e:	687b      	ldr	r3, [r7, #4]
 8017f80:	681b      	ldr	r3, [r3, #0]
 8017f82:	681b      	ldr	r3, [r3, #0]
 8017f84:	f003 0301 	and.w	r3, r3, #1
 8017f88:	2b00      	cmp	r3, #0
 8017f8a:	d1f2      	bne.n	8017f72 <HAL_DMA_IRQHandler+0x8da>
 8017f8c:	e000      	b.n	8017f90 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8017f8e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8017f90:	687b      	ldr	r3, [r7, #4]
 8017f92:	681b      	ldr	r3, [r3, #0]
 8017f94:	681b      	ldr	r3, [r3, #0]
 8017f96:	f003 0301 	and.w	r3, r3, #1
 8017f9a:	2b00      	cmp	r3, #0
 8017f9c:	d004      	beq.n	8017fa8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8017f9e:	687b      	ldr	r3, [r7, #4]
 8017fa0:	2203      	movs	r2, #3
 8017fa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8017fa6:	e003      	b.n	8017fb0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8017fa8:	687b      	ldr	r3, [r7, #4]
 8017faa:	2201      	movs	r2, #1
 8017fac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8017fb0:	687b      	ldr	r3, [r7, #4]
 8017fb2:	2200      	movs	r2, #0
 8017fb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8017fb8:	687b      	ldr	r3, [r7, #4]
 8017fba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017fbc:	2b00      	cmp	r3, #0
 8017fbe:	f000 8272 	beq.w	80184a6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8017fc2:	687b      	ldr	r3, [r7, #4]
 8017fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017fc6:	6878      	ldr	r0, [r7, #4]
 8017fc8:	4798      	blx	r3
 8017fca:	e26c      	b.n	80184a6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8017fcc:	687b      	ldr	r3, [r7, #4]
 8017fce:	681b      	ldr	r3, [r3, #0]
 8017fd0:	4a43      	ldr	r2, [pc, #268]	; (80180e0 <HAL_DMA_IRQHandler+0xa48>)
 8017fd2:	4293      	cmp	r3, r2
 8017fd4:	d022      	beq.n	801801c <HAL_DMA_IRQHandler+0x984>
 8017fd6:	687b      	ldr	r3, [r7, #4]
 8017fd8:	681b      	ldr	r3, [r3, #0]
 8017fda:	4a42      	ldr	r2, [pc, #264]	; (80180e4 <HAL_DMA_IRQHandler+0xa4c>)
 8017fdc:	4293      	cmp	r3, r2
 8017fde:	d01d      	beq.n	801801c <HAL_DMA_IRQHandler+0x984>
 8017fe0:	687b      	ldr	r3, [r7, #4]
 8017fe2:	681b      	ldr	r3, [r3, #0]
 8017fe4:	4a40      	ldr	r2, [pc, #256]	; (80180e8 <HAL_DMA_IRQHandler+0xa50>)
 8017fe6:	4293      	cmp	r3, r2
 8017fe8:	d018      	beq.n	801801c <HAL_DMA_IRQHandler+0x984>
 8017fea:	687b      	ldr	r3, [r7, #4]
 8017fec:	681b      	ldr	r3, [r3, #0]
 8017fee:	4a3f      	ldr	r2, [pc, #252]	; (80180ec <HAL_DMA_IRQHandler+0xa54>)
 8017ff0:	4293      	cmp	r3, r2
 8017ff2:	d013      	beq.n	801801c <HAL_DMA_IRQHandler+0x984>
 8017ff4:	687b      	ldr	r3, [r7, #4]
 8017ff6:	681b      	ldr	r3, [r3, #0]
 8017ff8:	4a3d      	ldr	r2, [pc, #244]	; (80180f0 <HAL_DMA_IRQHandler+0xa58>)
 8017ffa:	4293      	cmp	r3, r2
 8017ffc:	d00e      	beq.n	801801c <HAL_DMA_IRQHandler+0x984>
 8017ffe:	687b      	ldr	r3, [r7, #4]
 8018000:	681b      	ldr	r3, [r3, #0]
 8018002:	4a3c      	ldr	r2, [pc, #240]	; (80180f4 <HAL_DMA_IRQHandler+0xa5c>)
 8018004:	4293      	cmp	r3, r2
 8018006:	d009      	beq.n	801801c <HAL_DMA_IRQHandler+0x984>
 8018008:	687b      	ldr	r3, [r7, #4]
 801800a:	681b      	ldr	r3, [r3, #0]
 801800c:	4a3a      	ldr	r2, [pc, #232]	; (80180f8 <HAL_DMA_IRQHandler+0xa60>)
 801800e:	4293      	cmp	r3, r2
 8018010:	d004      	beq.n	801801c <HAL_DMA_IRQHandler+0x984>
 8018012:	687b      	ldr	r3, [r7, #4]
 8018014:	681b      	ldr	r3, [r3, #0]
 8018016:	4a39      	ldr	r2, [pc, #228]	; (80180fc <HAL_DMA_IRQHandler+0xa64>)
 8018018:	4293      	cmp	r3, r2
 801801a:	d101      	bne.n	8018020 <HAL_DMA_IRQHandler+0x988>
 801801c:	2301      	movs	r3, #1
 801801e:	e000      	b.n	8018022 <HAL_DMA_IRQHandler+0x98a>
 8018020:	2300      	movs	r3, #0
 8018022:	2b00      	cmp	r3, #0
 8018024:	f000 823f 	beq.w	80184a6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8018028:	687b      	ldr	r3, [r7, #4]
 801802a:	681b      	ldr	r3, [r3, #0]
 801802c:	681b      	ldr	r3, [r3, #0]
 801802e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8018030:	687b      	ldr	r3, [r7, #4]
 8018032:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018034:	f003 031f 	and.w	r3, r3, #31
 8018038:	2204      	movs	r2, #4
 801803a:	409a      	lsls	r2, r3
 801803c:	697b      	ldr	r3, [r7, #20]
 801803e:	4013      	ands	r3, r2
 8018040:	2b00      	cmp	r3, #0
 8018042:	f000 80cd 	beq.w	80181e0 <HAL_DMA_IRQHandler+0xb48>
 8018046:	693b      	ldr	r3, [r7, #16]
 8018048:	f003 0304 	and.w	r3, r3, #4
 801804c:	2b00      	cmp	r3, #0
 801804e:	f000 80c7 	beq.w	80181e0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8018052:	687b      	ldr	r3, [r7, #4]
 8018054:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018056:	f003 031f 	and.w	r3, r3, #31
 801805a:	2204      	movs	r2, #4
 801805c:	409a      	lsls	r2, r3
 801805e:	69fb      	ldr	r3, [r7, #28]
 8018060:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8018062:	693b      	ldr	r3, [r7, #16]
 8018064:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8018068:	2b00      	cmp	r3, #0
 801806a:	d049      	beq.n	8018100 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 801806c:	693b      	ldr	r3, [r7, #16]
 801806e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8018072:	2b00      	cmp	r3, #0
 8018074:	d109      	bne.n	801808a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8018076:	687b      	ldr	r3, [r7, #4]
 8018078:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801807a:	2b00      	cmp	r3, #0
 801807c:	f000 8210 	beq.w	80184a0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8018080:	687b      	ldr	r3, [r7, #4]
 8018082:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018084:	6878      	ldr	r0, [r7, #4]
 8018086:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8018088:	e20a      	b.n	80184a0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 801808a:	687b      	ldr	r3, [r7, #4]
 801808c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801808e:	2b00      	cmp	r3, #0
 8018090:	f000 8206 	beq.w	80184a0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8018094:	687b      	ldr	r3, [r7, #4]
 8018096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018098:	6878      	ldr	r0, [r7, #4]
 801809a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801809c:	e200      	b.n	80184a0 <HAL_DMA_IRQHandler+0xe08>
 801809e:	bf00      	nop
 80180a0:	40020010 	.word	0x40020010
 80180a4:	40020028 	.word	0x40020028
 80180a8:	40020040 	.word	0x40020040
 80180ac:	40020058 	.word	0x40020058
 80180b0:	40020070 	.word	0x40020070
 80180b4:	40020088 	.word	0x40020088
 80180b8:	400200a0 	.word	0x400200a0
 80180bc:	400200b8 	.word	0x400200b8
 80180c0:	40020410 	.word	0x40020410
 80180c4:	40020428 	.word	0x40020428
 80180c8:	40020440 	.word	0x40020440
 80180cc:	40020458 	.word	0x40020458
 80180d0:	40020470 	.word	0x40020470
 80180d4:	40020488 	.word	0x40020488
 80180d8:	400204a0 	.word	0x400204a0
 80180dc:	400204b8 	.word	0x400204b8
 80180e0:	58025408 	.word	0x58025408
 80180e4:	5802541c 	.word	0x5802541c
 80180e8:	58025430 	.word	0x58025430
 80180ec:	58025444 	.word	0x58025444
 80180f0:	58025458 	.word	0x58025458
 80180f4:	5802546c 	.word	0x5802546c
 80180f8:	58025480 	.word	0x58025480
 80180fc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8018100:	693b      	ldr	r3, [r7, #16]
 8018102:	f003 0320 	and.w	r3, r3, #32
 8018106:	2b00      	cmp	r3, #0
 8018108:	d160      	bne.n	80181cc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 801810a:	687b      	ldr	r3, [r7, #4]
 801810c:	681b      	ldr	r3, [r3, #0]
 801810e:	4a7f      	ldr	r2, [pc, #508]	; (801830c <HAL_DMA_IRQHandler+0xc74>)
 8018110:	4293      	cmp	r3, r2
 8018112:	d04a      	beq.n	80181aa <HAL_DMA_IRQHandler+0xb12>
 8018114:	687b      	ldr	r3, [r7, #4]
 8018116:	681b      	ldr	r3, [r3, #0]
 8018118:	4a7d      	ldr	r2, [pc, #500]	; (8018310 <HAL_DMA_IRQHandler+0xc78>)
 801811a:	4293      	cmp	r3, r2
 801811c:	d045      	beq.n	80181aa <HAL_DMA_IRQHandler+0xb12>
 801811e:	687b      	ldr	r3, [r7, #4]
 8018120:	681b      	ldr	r3, [r3, #0]
 8018122:	4a7c      	ldr	r2, [pc, #496]	; (8018314 <HAL_DMA_IRQHandler+0xc7c>)
 8018124:	4293      	cmp	r3, r2
 8018126:	d040      	beq.n	80181aa <HAL_DMA_IRQHandler+0xb12>
 8018128:	687b      	ldr	r3, [r7, #4]
 801812a:	681b      	ldr	r3, [r3, #0]
 801812c:	4a7a      	ldr	r2, [pc, #488]	; (8018318 <HAL_DMA_IRQHandler+0xc80>)
 801812e:	4293      	cmp	r3, r2
 8018130:	d03b      	beq.n	80181aa <HAL_DMA_IRQHandler+0xb12>
 8018132:	687b      	ldr	r3, [r7, #4]
 8018134:	681b      	ldr	r3, [r3, #0]
 8018136:	4a79      	ldr	r2, [pc, #484]	; (801831c <HAL_DMA_IRQHandler+0xc84>)
 8018138:	4293      	cmp	r3, r2
 801813a:	d036      	beq.n	80181aa <HAL_DMA_IRQHandler+0xb12>
 801813c:	687b      	ldr	r3, [r7, #4]
 801813e:	681b      	ldr	r3, [r3, #0]
 8018140:	4a77      	ldr	r2, [pc, #476]	; (8018320 <HAL_DMA_IRQHandler+0xc88>)
 8018142:	4293      	cmp	r3, r2
 8018144:	d031      	beq.n	80181aa <HAL_DMA_IRQHandler+0xb12>
 8018146:	687b      	ldr	r3, [r7, #4]
 8018148:	681b      	ldr	r3, [r3, #0]
 801814a:	4a76      	ldr	r2, [pc, #472]	; (8018324 <HAL_DMA_IRQHandler+0xc8c>)
 801814c:	4293      	cmp	r3, r2
 801814e:	d02c      	beq.n	80181aa <HAL_DMA_IRQHandler+0xb12>
 8018150:	687b      	ldr	r3, [r7, #4]
 8018152:	681b      	ldr	r3, [r3, #0]
 8018154:	4a74      	ldr	r2, [pc, #464]	; (8018328 <HAL_DMA_IRQHandler+0xc90>)
 8018156:	4293      	cmp	r3, r2
 8018158:	d027      	beq.n	80181aa <HAL_DMA_IRQHandler+0xb12>
 801815a:	687b      	ldr	r3, [r7, #4]
 801815c:	681b      	ldr	r3, [r3, #0]
 801815e:	4a73      	ldr	r2, [pc, #460]	; (801832c <HAL_DMA_IRQHandler+0xc94>)
 8018160:	4293      	cmp	r3, r2
 8018162:	d022      	beq.n	80181aa <HAL_DMA_IRQHandler+0xb12>
 8018164:	687b      	ldr	r3, [r7, #4]
 8018166:	681b      	ldr	r3, [r3, #0]
 8018168:	4a71      	ldr	r2, [pc, #452]	; (8018330 <HAL_DMA_IRQHandler+0xc98>)
 801816a:	4293      	cmp	r3, r2
 801816c:	d01d      	beq.n	80181aa <HAL_DMA_IRQHandler+0xb12>
 801816e:	687b      	ldr	r3, [r7, #4]
 8018170:	681b      	ldr	r3, [r3, #0]
 8018172:	4a70      	ldr	r2, [pc, #448]	; (8018334 <HAL_DMA_IRQHandler+0xc9c>)
 8018174:	4293      	cmp	r3, r2
 8018176:	d018      	beq.n	80181aa <HAL_DMA_IRQHandler+0xb12>
 8018178:	687b      	ldr	r3, [r7, #4]
 801817a:	681b      	ldr	r3, [r3, #0]
 801817c:	4a6e      	ldr	r2, [pc, #440]	; (8018338 <HAL_DMA_IRQHandler+0xca0>)
 801817e:	4293      	cmp	r3, r2
 8018180:	d013      	beq.n	80181aa <HAL_DMA_IRQHandler+0xb12>
 8018182:	687b      	ldr	r3, [r7, #4]
 8018184:	681b      	ldr	r3, [r3, #0]
 8018186:	4a6d      	ldr	r2, [pc, #436]	; (801833c <HAL_DMA_IRQHandler+0xca4>)
 8018188:	4293      	cmp	r3, r2
 801818a:	d00e      	beq.n	80181aa <HAL_DMA_IRQHandler+0xb12>
 801818c:	687b      	ldr	r3, [r7, #4]
 801818e:	681b      	ldr	r3, [r3, #0]
 8018190:	4a6b      	ldr	r2, [pc, #428]	; (8018340 <HAL_DMA_IRQHandler+0xca8>)
 8018192:	4293      	cmp	r3, r2
 8018194:	d009      	beq.n	80181aa <HAL_DMA_IRQHandler+0xb12>
 8018196:	687b      	ldr	r3, [r7, #4]
 8018198:	681b      	ldr	r3, [r3, #0]
 801819a:	4a6a      	ldr	r2, [pc, #424]	; (8018344 <HAL_DMA_IRQHandler+0xcac>)
 801819c:	4293      	cmp	r3, r2
 801819e:	d004      	beq.n	80181aa <HAL_DMA_IRQHandler+0xb12>
 80181a0:	687b      	ldr	r3, [r7, #4]
 80181a2:	681b      	ldr	r3, [r3, #0]
 80181a4:	4a68      	ldr	r2, [pc, #416]	; (8018348 <HAL_DMA_IRQHandler+0xcb0>)
 80181a6:	4293      	cmp	r3, r2
 80181a8:	d108      	bne.n	80181bc <HAL_DMA_IRQHandler+0xb24>
 80181aa:	687b      	ldr	r3, [r7, #4]
 80181ac:	681b      	ldr	r3, [r3, #0]
 80181ae:	681a      	ldr	r2, [r3, #0]
 80181b0:	687b      	ldr	r3, [r7, #4]
 80181b2:	681b      	ldr	r3, [r3, #0]
 80181b4:	f022 0208 	bic.w	r2, r2, #8
 80181b8:	601a      	str	r2, [r3, #0]
 80181ba:	e007      	b.n	80181cc <HAL_DMA_IRQHandler+0xb34>
 80181bc:	687b      	ldr	r3, [r7, #4]
 80181be:	681b      	ldr	r3, [r3, #0]
 80181c0:	681a      	ldr	r2, [r3, #0]
 80181c2:	687b      	ldr	r3, [r7, #4]
 80181c4:	681b      	ldr	r3, [r3, #0]
 80181c6:	f022 0204 	bic.w	r2, r2, #4
 80181ca:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80181cc:	687b      	ldr	r3, [r7, #4]
 80181ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80181d0:	2b00      	cmp	r3, #0
 80181d2:	f000 8165 	beq.w	80184a0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80181d6:	687b      	ldr	r3, [r7, #4]
 80181d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80181da:	6878      	ldr	r0, [r7, #4]
 80181dc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80181de:	e15f      	b.n	80184a0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80181e0:	687b      	ldr	r3, [r7, #4]
 80181e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80181e4:	f003 031f 	and.w	r3, r3, #31
 80181e8:	2202      	movs	r2, #2
 80181ea:	409a      	lsls	r2, r3
 80181ec:	697b      	ldr	r3, [r7, #20]
 80181ee:	4013      	ands	r3, r2
 80181f0:	2b00      	cmp	r3, #0
 80181f2:	f000 80c5 	beq.w	8018380 <HAL_DMA_IRQHandler+0xce8>
 80181f6:	693b      	ldr	r3, [r7, #16]
 80181f8:	f003 0302 	and.w	r3, r3, #2
 80181fc:	2b00      	cmp	r3, #0
 80181fe:	f000 80bf 	beq.w	8018380 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8018202:	687b      	ldr	r3, [r7, #4]
 8018204:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018206:	f003 031f 	and.w	r3, r3, #31
 801820a:	2202      	movs	r2, #2
 801820c:	409a      	lsls	r2, r3
 801820e:	69fb      	ldr	r3, [r7, #28]
 8018210:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8018212:	693b      	ldr	r3, [r7, #16]
 8018214:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8018218:	2b00      	cmp	r3, #0
 801821a:	d018      	beq.n	801824e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 801821c:	693b      	ldr	r3, [r7, #16]
 801821e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8018222:	2b00      	cmp	r3, #0
 8018224:	d109      	bne.n	801823a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8018226:	687b      	ldr	r3, [r7, #4]
 8018228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801822a:	2b00      	cmp	r3, #0
 801822c:	f000 813a 	beq.w	80184a4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8018230:	687b      	ldr	r3, [r7, #4]
 8018232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018234:	6878      	ldr	r0, [r7, #4]
 8018236:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8018238:	e134      	b.n	80184a4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 801823a:	687b      	ldr	r3, [r7, #4]
 801823c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801823e:	2b00      	cmp	r3, #0
 8018240:	f000 8130 	beq.w	80184a4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8018244:	687b      	ldr	r3, [r7, #4]
 8018246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018248:	6878      	ldr	r0, [r7, #4]
 801824a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801824c:	e12a      	b.n	80184a4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 801824e:	693b      	ldr	r3, [r7, #16]
 8018250:	f003 0320 	and.w	r3, r3, #32
 8018254:	2b00      	cmp	r3, #0
 8018256:	f040 8089 	bne.w	801836c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 801825a:	687b      	ldr	r3, [r7, #4]
 801825c:	681b      	ldr	r3, [r3, #0]
 801825e:	4a2b      	ldr	r2, [pc, #172]	; (801830c <HAL_DMA_IRQHandler+0xc74>)
 8018260:	4293      	cmp	r3, r2
 8018262:	d04a      	beq.n	80182fa <HAL_DMA_IRQHandler+0xc62>
 8018264:	687b      	ldr	r3, [r7, #4]
 8018266:	681b      	ldr	r3, [r3, #0]
 8018268:	4a29      	ldr	r2, [pc, #164]	; (8018310 <HAL_DMA_IRQHandler+0xc78>)
 801826a:	4293      	cmp	r3, r2
 801826c:	d045      	beq.n	80182fa <HAL_DMA_IRQHandler+0xc62>
 801826e:	687b      	ldr	r3, [r7, #4]
 8018270:	681b      	ldr	r3, [r3, #0]
 8018272:	4a28      	ldr	r2, [pc, #160]	; (8018314 <HAL_DMA_IRQHandler+0xc7c>)
 8018274:	4293      	cmp	r3, r2
 8018276:	d040      	beq.n	80182fa <HAL_DMA_IRQHandler+0xc62>
 8018278:	687b      	ldr	r3, [r7, #4]
 801827a:	681b      	ldr	r3, [r3, #0]
 801827c:	4a26      	ldr	r2, [pc, #152]	; (8018318 <HAL_DMA_IRQHandler+0xc80>)
 801827e:	4293      	cmp	r3, r2
 8018280:	d03b      	beq.n	80182fa <HAL_DMA_IRQHandler+0xc62>
 8018282:	687b      	ldr	r3, [r7, #4]
 8018284:	681b      	ldr	r3, [r3, #0]
 8018286:	4a25      	ldr	r2, [pc, #148]	; (801831c <HAL_DMA_IRQHandler+0xc84>)
 8018288:	4293      	cmp	r3, r2
 801828a:	d036      	beq.n	80182fa <HAL_DMA_IRQHandler+0xc62>
 801828c:	687b      	ldr	r3, [r7, #4]
 801828e:	681b      	ldr	r3, [r3, #0]
 8018290:	4a23      	ldr	r2, [pc, #140]	; (8018320 <HAL_DMA_IRQHandler+0xc88>)
 8018292:	4293      	cmp	r3, r2
 8018294:	d031      	beq.n	80182fa <HAL_DMA_IRQHandler+0xc62>
 8018296:	687b      	ldr	r3, [r7, #4]
 8018298:	681b      	ldr	r3, [r3, #0]
 801829a:	4a22      	ldr	r2, [pc, #136]	; (8018324 <HAL_DMA_IRQHandler+0xc8c>)
 801829c:	4293      	cmp	r3, r2
 801829e:	d02c      	beq.n	80182fa <HAL_DMA_IRQHandler+0xc62>
 80182a0:	687b      	ldr	r3, [r7, #4]
 80182a2:	681b      	ldr	r3, [r3, #0]
 80182a4:	4a20      	ldr	r2, [pc, #128]	; (8018328 <HAL_DMA_IRQHandler+0xc90>)
 80182a6:	4293      	cmp	r3, r2
 80182a8:	d027      	beq.n	80182fa <HAL_DMA_IRQHandler+0xc62>
 80182aa:	687b      	ldr	r3, [r7, #4]
 80182ac:	681b      	ldr	r3, [r3, #0]
 80182ae:	4a1f      	ldr	r2, [pc, #124]	; (801832c <HAL_DMA_IRQHandler+0xc94>)
 80182b0:	4293      	cmp	r3, r2
 80182b2:	d022      	beq.n	80182fa <HAL_DMA_IRQHandler+0xc62>
 80182b4:	687b      	ldr	r3, [r7, #4]
 80182b6:	681b      	ldr	r3, [r3, #0]
 80182b8:	4a1d      	ldr	r2, [pc, #116]	; (8018330 <HAL_DMA_IRQHandler+0xc98>)
 80182ba:	4293      	cmp	r3, r2
 80182bc:	d01d      	beq.n	80182fa <HAL_DMA_IRQHandler+0xc62>
 80182be:	687b      	ldr	r3, [r7, #4]
 80182c0:	681b      	ldr	r3, [r3, #0]
 80182c2:	4a1c      	ldr	r2, [pc, #112]	; (8018334 <HAL_DMA_IRQHandler+0xc9c>)
 80182c4:	4293      	cmp	r3, r2
 80182c6:	d018      	beq.n	80182fa <HAL_DMA_IRQHandler+0xc62>
 80182c8:	687b      	ldr	r3, [r7, #4]
 80182ca:	681b      	ldr	r3, [r3, #0]
 80182cc:	4a1a      	ldr	r2, [pc, #104]	; (8018338 <HAL_DMA_IRQHandler+0xca0>)
 80182ce:	4293      	cmp	r3, r2
 80182d0:	d013      	beq.n	80182fa <HAL_DMA_IRQHandler+0xc62>
 80182d2:	687b      	ldr	r3, [r7, #4]
 80182d4:	681b      	ldr	r3, [r3, #0]
 80182d6:	4a19      	ldr	r2, [pc, #100]	; (801833c <HAL_DMA_IRQHandler+0xca4>)
 80182d8:	4293      	cmp	r3, r2
 80182da:	d00e      	beq.n	80182fa <HAL_DMA_IRQHandler+0xc62>
 80182dc:	687b      	ldr	r3, [r7, #4]
 80182de:	681b      	ldr	r3, [r3, #0]
 80182e0:	4a17      	ldr	r2, [pc, #92]	; (8018340 <HAL_DMA_IRQHandler+0xca8>)
 80182e2:	4293      	cmp	r3, r2
 80182e4:	d009      	beq.n	80182fa <HAL_DMA_IRQHandler+0xc62>
 80182e6:	687b      	ldr	r3, [r7, #4]
 80182e8:	681b      	ldr	r3, [r3, #0]
 80182ea:	4a16      	ldr	r2, [pc, #88]	; (8018344 <HAL_DMA_IRQHandler+0xcac>)
 80182ec:	4293      	cmp	r3, r2
 80182ee:	d004      	beq.n	80182fa <HAL_DMA_IRQHandler+0xc62>
 80182f0:	687b      	ldr	r3, [r7, #4]
 80182f2:	681b      	ldr	r3, [r3, #0]
 80182f4:	4a14      	ldr	r2, [pc, #80]	; (8018348 <HAL_DMA_IRQHandler+0xcb0>)
 80182f6:	4293      	cmp	r3, r2
 80182f8:	d128      	bne.n	801834c <HAL_DMA_IRQHandler+0xcb4>
 80182fa:	687b      	ldr	r3, [r7, #4]
 80182fc:	681b      	ldr	r3, [r3, #0]
 80182fe:	681a      	ldr	r2, [r3, #0]
 8018300:	687b      	ldr	r3, [r7, #4]
 8018302:	681b      	ldr	r3, [r3, #0]
 8018304:	f022 0214 	bic.w	r2, r2, #20
 8018308:	601a      	str	r2, [r3, #0]
 801830a:	e027      	b.n	801835c <HAL_DMA_IRQHandler+0xcc4>
 801830c:	40020010 	.word	0x40020010
 8018310:	40020028 	.word	0x40020028
 8018314:	40020040 	.word	0x40020040
 8018318:	40020058 	.word	0x40020058
 801831c:	40020070 	.word	0x40020070
 8018320:	40020088 	.word	0x40020088
 8018324:	400200a0 	.word	0x400200a0
 8018328:	400200b8 	.word	0x400200b8
 801832c:	40020410 	.word	0x40020410
 8018330:	40020428 	.word	0x40020428
 8018334:	40020440 	.word	0x40020440
 8018338:	40020458 	.word	0x40020458
 801833c:	40020470 	.word	0x40020470
 8018340:	40020488 	.word	0x40020488
 8018344:	400204a0 	.word	0x400204a0
 8018348:	400204b8 	.word	0x400204b8
 801834c:	687b      	ldr	r3, [r7, #4]
 801834e:	681b      	ldr	r3, [r3, #0]
 8018350:	681a      	ldr	r2, [r3, #0]
 8018352:	687b      	ldr	r3, [r7, #4]
 8018354:	681b      	ldr	r3, [r3, #0]
 8018356:	f022 020a 	bic.w	r2, r2, #10
 801835a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 801835c:	687b      	ldr	r3, [r7, #4]
 801835e:	2201      	movs	r2, #1
 8018360:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8018364:	687b      	ldr	r3, [r7, #4]
 8018366:	2200      	movs	r2, #0
 8018368:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 801836c:	687b      	ldr	r3, [r7, #4]
 801836e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018370:	2b00      	cmp	r3, #0
 8018372:	f000 8097 	beq.w	80184a4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8018376:	687b      	ldr	r3, [r7, #4]
 8018378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801837a:	6878      	ldr	r0, [r7, #4]
 801837c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801837e:	e091      	b.n	80184a4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8018380:	687b      	ldr	r3, [r7, #4]
 8018382:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018384:	f003 031f 	and.w	r3, r3, #31
 8018388:	2208      	movs	r2, #8
 801838a:	409a      	lsls	r2, r3
 801838c:	697b      	ldr	r3, [r7, #20]
 801838e:	4013      	ands	r3, r2
 8018390:	2b00      	cmp	r3, #0
 8018392:	f000 8088 	beq.w	80184a6 <HAL_DMA_IRQHandler+0xe0e>
 8018396:	693b      	ldr	r3, [r7, #16]
 8018398:	f003 0308 	and.w	r3, r3, #8
 801839c:	2b00      	cmp	r3, #0
 801839e:	f000 8082 	beq.w	80184a6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80183a2:	687b      	ldr	r3, [r7, #4]
 80183a4:	681b      	ldr	r3, [r3, #0]
 80183a6:	4a41      	ldr	r2, [pc, #260]	; (80184ac <HAL_DMA_IRQHandler+0xe14>)
 80183a8:	4293      	cmp	r3, r2
 80183aa:	d04a      	beq.n	8018442 <HAL_DMA_IRQHandler+0xdaa>
 80183ac:	687b      	ldr	r3, [r7, #4]
 80183ae:	681b      	ldr	r3, [r3, #0]
 80183b0:	4a3f      	ldr	r2, [pc, #252]	; (80184b0 <HAL_DMA_IRQHandler+0xe18>)
 80183b2:	4293      	cmp	r3, r2
 80183b4:	d045      	beq.n	8018442 <HAL_DMA_IRQHandler+0xdaa>
 80183b6:	687b      	ldr	r3, [r7, #4]
 80183b8:	681b      	ldr	r3, [r3, #0]
 80183ba:	4a3e      	ldr	r2, [pc, #248]	; (80184b4 <HAL_DMA_IRQHandler+0xe1c>)
 80183bc:	4293      	cmp	r3, r2
 80183be:	d040      	beq.n	8018442 <HAL_DMA_IRQHandler+0xdaa>
 80183c0:	687b      	ldr	r3, [r7, #4]
 80183c2:	681b      	ldr	r3, [r3, #0]
 80183c4:	4a3c      	ldr	r2, [pc, #240]	; (80184b8 <HAL_DMA_IRQHandler+0xe20>)
 80183c6:	4293      	cmp	r3, r2
 80183c8:	d03b      	beq.n	8018442 <HAL_DMA_IRQHandler+0xdaa>
 80183ca:	687b      	ldr	r3, [r7, #4]
 80183cc:	681b      	ldr	r3, [r3, #0]
 80183ce:	4a3b      	ldr	r2, [pc, #236]	; (80184bc <HAL_DMA_IRQHandler+0xe24>)
 80183d0:	4293      	cmp	r3, r2
 80183d2:	d036      	beq.n	8018442 <HAL_DMA_IRQHandler+0xdaa>
 80183d4:	687b      	ldr	r3, [r7, #4]
 80183d6:	681b      	ldr	r3, [r3, #0]
 80183d8:	4a39      	ldr	r2, [pc, #228]	; (80184c0 <HAL_DMA_IRQHandler+0xe28>)
 80183da:	4293      	cmp	r3, r2
 80183dc:	d031      	beq.n	8018442 <HAL_DMA_IRQHandler+0xdaa>
 80183de:	687b      	ldr	r3, [r7, #4]
 80183e0:	681b      	ldr	r3, [r3, #0]
 80183e2:	4a38      	ldr	r2, [pc, #224]	; (80184c4 <HAL_DMA_IRQHandler+0xe2c>)
 80183e4:	4293      	cmp	r3, r2
 80183e6:	d02c      	beq.n	8018442 <HAL_DMA_IRQHandler+0xdaa>
 80183e8:	687b      	ldr	r3, [r7, #4]
 80183ea:	681b      	ldr	r3, [r3, #0]
 80183ec:	4a36      	ldr	r2, [pc, #216]	; (80184c8 <HAL_DMA_IRQHandler+0xe30>)
 80183ee:	4293      	cmp	r3, r2
 80183f0:	d027      	beq.n	8018442 <HAL_DMA_IRQHandler+0xdaa>
 80183f2:	687b      	ldr	r3, [r7, #4]
 80183f4:	681b      	ldr	r3, [r3, #0]
 80183f6:	4a35      	ldr	r2, [pc, #212]	; (80184cc <HAL_DMA_IRQHandler+0xe34>)
 80183f8:	4293      	cmp	r3, r2
 80183fa:	d022      	beq.n	8018442 <HAL_DMA_IRQHandler+0xdaa>
 80183fc:	687b      	ldr	r3, [r7, #4]
 80183fe:	681b      	ldr	r3, [r3, #0]
 8018400:	4a33      	ldr	r2, [pc, #204]	; (80184d0 <HAL_DMA_IRQHandler+0xe38>)
 8018402:	4293      	cmp	r3, r2
 8018404:	d01d      	beq.n	8018442 <HAL_DMA_IRQHandler+0xdaa>
 8018406:	687b      	ldr	r3, [r7, #4]
 8018408:	681b      	ldr	r3, [r3, #0]
 801840a:	4a32      	ldr	r2, [pc, #200]	; (80184d4 <HAL_DMA_IRQHandler+0xe3c>)
 801840c:	4293      	cmp	r3, r2
 801840e:	d018      	beq.n	8018442 <HAL_DMA_IRQHandler+0xdaa>
 8018410:	687b      	ldr	r3, [r7, #4]
 8018412:	681b      	ldr	r3, [r3, #0]
 8018414:	4a30      	ldr	r2, [pc, #192]	; (80184d8 <HAL_DMA_IRQHandler+0xe40>)
 8018416:	4293      	cmp	r3, r2
 8018418:	d013      	beq.n	8018442 <HAL_DMA_IRQHandler+0xdaa>
 801841a:	687b      	ldr	r3, [r7, #4]
 801841c:	681b      	ldr	r3, [r3, #0]
 801841e:	4a2f      	ldr	r2, [pc, #188]	; (80184dc <HAL_DMA_IRQHandler+0xe44>)
 8018420:	4293      	cmp	r3, r2
 8018422:	d00e      	beq.n	8018442 <HAL_DMA_IRQHandler+0xdaa>
 8018424:	687b      	ldr	r3, [r7, #4]
 8018426:	681b      	ldr	r3, [r3, #0]
 8018428:	4a2d      	ldr	r2, [pc, #180]	; (80184e0 <HAL_DMA_IRQHandler+0xe48>)
 801842a:	4293      	cmp	r3, r2
 801842c:	d009      	beq.n	8018442 <HAL_DMA_IRQHandler+0xdaa>
 801842e:	687b      	ldr	r3, [r7, #4]
 8018430:	681b      	ldr	r3, [r3, #0]
 8018432:	4a2c      	ldr	r2, [pc, #176]	; (80184e4 <HAL_DMA_IRQHandler+0xe4c>)
 8018434:	4293      	cmp	r3, r2
 8018436:	d004      	beq.n	8018442 <HAL_DMA_IRQHandler+0xdaa>
 8018438:	687b      	ldr	r3, [r7, #4]
 801843a:	681b      	ldr	r3, [r3, #0]
 801843c:	4a2a      	ldr	r2, [pc, #168]	; (80184e8 <HAL_DMA_IRQHandler+0xe50>)
 801843e:	4293      	cmp	r3, r2
 8018440:	d108      	bne.n	8018454 <HAL_DMA_IRQHandler+0xdbc>
 8018442:	687b      	ldr	r3, [r7, #4]
 8018444:	681b      	ldr	r3, [r3, #0]
 8018446:	681a      	ldr	r2, [r3, #0]
 8018448:	687b      	ldr	r3, [r7, #4]
 801844a:	681b      	ldr	r3, [r3, #0]
 801844c:	f022 021c 	bic.w	r2, r2, #28
 8018450:	601a      	str	r2, [r3, #0]
 8018452:	e007      	b.n	8018464 <HAL_DMA_IRQHandler+0xdcc>
 8018454:	687b      	ldr	r3, [r7, #4]
 8018456:	681b      	ldr	r3, [r3, #0]
 8018458:	681a      	ldr	r2, [r3, #0]
 801845a:	687b      	ldr	r3, [r7, #4]
 801845c:	681b      	ldr	r3, [r3, #0]
 801845e:	f022 020e 	bic.w	r2, r2, #14
 8018462:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8018464:	687b      	ldr	r3, [r7, #4]
 8018466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018468:	f003 031f 	and.w	r3, r3, #31
 801846c:	2201      	movs	r2, #1
 801846e:	409a      	lsls	r2, r3
 8018470:	69fb      	ldr	r3, [r7, #28]
 8018472:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8018474:	687b      	ldr	r3, [r7, #4]
 8018476:	2201      	movs	r2, #1
 8018478:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 801847a:	687b      	ldr	r3, [r7, #4]
 801847c:	2201      	movs	r2, #1
 801847e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8018482:	687b      	ldr	r3, [r7, #4]
 8018484:	2200      	movs	r2, #0
 8018486:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 801848a:	687b      	ldr	r3, [r7, #4]
 801848c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801848e:	2b00      	cmp	r3, #0
 8018490:	d009      	beq.n	80184a6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8018492:	687b      	ldr	r3, [r7, #4]
 8018494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018496:	6878      	ldr	r0, [r7, #4]
 8018498:	4798      	blx	r3
 801849a:	e004      	b.n	80184a6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 801849c:	bf00      	nop
 801849e:	e002      	b.n	80184a6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80184a0:	bf00      	nop
 80184a2:	e000      	b.n	80184a6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80184a4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80184a6:	3728      	adds	r7, #40	; 0x28
 80184a8:	46bd      	mov	sp, r7
 80184aa:	bd80      	pop	{r7, pc}
 80184ac:	40020010 	.word	0x40020010
 80184b0:	40020028 	.word	0x40020028
 80184b4:	40020040 	.word	0x40020040
 80184b8:	40020058 	.word	0x40020058
 80184bc:	40020070 	.word	0x40020070
 80184c0:	40020088 	.word	0x40020088
 80184c4:	400200a0 	.word	0x400200a0
 80184c8:	400200b8 	.word	0x400200b8
 80184cc:	40020410 	.word	0x40020410
 80184d0:	40020428 	.word	0x40020428
 80184d4:	40020440 	.word	0x40020440
 80184d8:	40020458 	.word	0x40020458
 80184dc:	40020470 	.word	0x40020470
 80184e0:	40020488 	.word	0x40020488
 80184e4:	400204a0 	.word	0x400204a0
 80184e8:	400204b8 	.word	0x400204b8

080184ec <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80184ec:	b480      	push	{r7}
 80184ee:	b083      	sub	sp, #12
 80184f0:	af00      	add	r7, sp, #0
 80184f2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80184f4:	687b      	ldr	r3, [r7, #4]
 80184f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80184f8:	4618      	mov	r0, r3
 80184fa:	370c      	adds	r7, #12
 80184fc:	46bd      	mov	sp, r7
 80184fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018502:	4770      	bx	lr

08018504 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8018504:	b480      	push	{r7}
 8018506:	b087      	sub	sp, #28
 8018508:	af00      	add	r7, sp, #0
 801850a:	60f8      	str	r0, [r7, #12]
 801850c:	60b9      	str	r1, [r7, #8]
 801850e:	607a      	str	r2, [r7, #4]
 8018510:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8018512:	68fb      	ldr	r3, [r7, #12]
 8018514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018516:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8018518:	68fb      	ldr	r3, [r7, #12]
 801851a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801851c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 801851e:	68fb      	ldr	r3, [r7, #12]
 8018520:	681b      	ldr	r3, [r3, #0]
 8018522:	4a7f      	ldr	r2, [pc, #508]	; (8018720 <DMA_SetConfig+0x21c>)
 8018524:	4293      	cmp	r3, r2
 8018526:	d072      	beq.n	801860e <DMA_SetConfig+0x10a>
 8018528:	68fb      	ldr	r3, [r7, #12]
 801852a:	681b      	ldr	r3, [r3, #0]
 801852c:	4a7d      	ldr	r2, [pc, #500]	; (8018724 <DMA_SetConfig+0x220>)
 801852e:	4293      	cmp	r3, r2
 8018530:	d06d      	beq.n	801860e <DMA_SetConfig+0x10a>
 8018532:	68fb      	ldr	r3, [r7, #12]
 8018534:	681b      	ldr	r3, [r3, #0]
 8018536:	4a7c      	ldr	r2, [pc, #496]	; (8018728 <DMA_SetConfig+0x224>)
 8018538:	4293      	cmp	r3, r2
 801853a:	d068      	beq.n	801860e <DMA_SetConfig+0x10a>
 801853c:	68fb      	ldr	r3, [r7, #12]
 801853e:	681b      	ldr	r3, [r3, #0]
 8018540:	4a7a      	ldr	r2, [pc, #488]	; (801872c <DMA_SetConfig+0x228>)
 8018542:	4293      	cmp	r3, r2
 8018544:	d063      	beq.n	801860e <DMA_SetConfig+0x10a>
 8018546:	68fb      	ldr	r3, [r7, #12]
 8018548:	681b      	ldr	r3, [r3, #0]
 801854a:	4a79      	ldr	r2, [pc, #484]	; (8018730 <DMA_SetConfig+0x22c>)
 801854c:	4293      	cmp	r3, r2
 801854e:	d05e      	beq.n	801860e <DMA_SetConfig+0x10a>
 8018550:	68fb      	ldr	r3, [r7, #12]
 8018552:	681b      	ldr	r3, [r3, #0]
 8018554:	4a77      	ldr	r2, [pc, #476]	; (8018734 <DMA_SetConfig+0x230>)
 8018556:	4293      	cmp	r3, r2
 8018558:	d059      	beq.n	801860e <DMA_SetConfig+0x10a>
 801855a:	68fb      	ldr	r3, [r7, #12]
 801855c:	681b      	ldr	r3, [r3, #0]
 801855e:	4a76      	ldr	r2, [pc, #472]	; (8018738 <DMA_SetConfig+0x234>)
 8018560:	4293      	cmp	r3, r2
 8018562:	d054      	beq.n	801860e <DMA_SetConfig+0x10a>
 8018564:	68fb      	ldr	r3, [r7, #12]
 8018566:	681b      	ldr	r3, [r3, #0]
 8018568:	4a74      	ldr	r2, [pc, #464]	; (801873c <DMA_SetConfig+0x238>)
 801856a:	4293      	cmp	r3, r2
 801856c:	d04f      	beq.n	801860e <DMA_SetConfig+0x10a>
 801856e:	68fb      	ldr	r3, [r7, #12]
 8018570:	681b      	ldr	r3, [r3, #0]
 8018572:	4a73      	ldr	r2, [pc, #460]	; (8018740 <DMA_SetConfig+0x23c>)
 8018574:	4293      	cmp	r3, r2
 8018576:	d04a      	beq.n	801860e <DMA_SetConfig+0x10a>
 8018578:	68fb      	ldr	r3, [r7, #12]
 801857a:	681b      	ldr	r3, [r3, #0]
 801857c:	4a71      	ldr	r2, [pc, #452]	; (8018744 <DMA_SetConfig+0x240>)
 801857e:	4293      	cmp	r3, r2
 8018580:	d045      	beq.n	801860e <DMA_SetConfig+0x10a>
 8018582:	68fb      	ldr	r3, [r7, #12]
 8018584:	681b      	ldr	r3, [r3, #0]
 8018586:	4a70      	ldr	r2, [pc, #448]	; (8018748 <DMA_SetConfig+0x244>)
 8018588:	4293      	cmp	r3, r2
 801858a:	d040      	beq.n	801860e <DMA_SetConfig+0x10a>
 801858c:	68fb      	ldr	r3, [r7, #12]
 801858e:	681b      	ldr	r3, [r3, #0]
 8018590:	4a6e      	ldr	r2, [pc, #440]	; (801874c <DMA_SetConfig+0x248>)
 8018592:	4293      	cmp	r3, r2
 8018594:	d03b      	beq.n	801860e <DMA_SetConfig+0x10a>
 8018596:	68fb      	ldr	r3, [r7, #12]
 8018598:	681b      	ldr	r3, [r3, #0]
 801859a:	4a6d      	ldr	r2, [pc, #436]	; (8018750 <DMA_SetConfig+0x24c>)
 801859c:	4293      	cmp	r3, r2
 801859e:	d036      	beq.n	801860e <DMA_SetConfig+0x10a>
 80185a0:	68fb      	ldr	r3, [r7, #12]
 80185a2:	681b      	ldr	r3, [r3, #0]
 80185a4:	4a6b      	ldr	r2, [pc, #428]	; (8018754 <DMA_SetConfig+0x250>)
 80185a6:	4293      	cmp	r3, r2
 80185a8:	d031      	beq.n	801860e <DMA_SetConfig+0x10a>
 80185aa:	68fb      	ldr	r3, [r7, #12]
 80185ac:	681b      	ldr	r3, [r3, #0]
 80185ae:	4a6a      	ldr	r2, [pc, #424]	; (8018758 <DMA_SetConfig+0x254>)
 80185b0:	4293      	cmp	r3, r2
 80185b2:	d02c      	beq.n	801860e <DMA_SetConfig+0x10a>
 80185b4:	68fb      	ldr	r3, [r7, #12]
 80185b6:	681b      	ldr	r3, [r3, #0]
 80185b8:	4a68      	ldr	r2, [pc, #416]	; (801875c <DMA_SetConfig+0x258>)
 80185ba:	4293      	cmp	r3, r2
 80185bc:	d027      	beq.n	801860e <DMA_SetConfig+0x10a>
 80185be:	68fb      	ldr	r3, [r7, #12]
 80185c0:	681b      	ldr	r3, [r3, #0]
 80185c2:	4a67      	ldr	r2, [pc, #412]	; (8018760 <DMA_SetConfig+0x25c>)
 80185c4:	4293      	cmp	r3, r2
 80185c6:	d022      	beq.n	801860e <DMA_SetConfig+0x10a>
 80185c8:	68fb      	ldr	r3, [r7, #12]
 80185ca:	681b      	ldr	r3, [r3, #0]
 80185cc:	4a65      	ldr	r2, [pc, #404]	; (8018764 <DMA_SetConfig+0x260>)
 80185ce:	4293      	cmp	r3, r2
 80185d0:	d01d      	beq.n	801860e <DMA_SetConfig+0x10a>
 80185d2:	68fb      	ldr	r3, [r7, #12]
 80185d4:	681b      	ldr	r3, [r3, #0]
 80185d6:	4a64      	ldr	r2, [pc, #400]	; (8018768 <DMA_SetConfig+0x264>)
 80185d8:	4293      	cmp	r3, r2
 80185da:	d018      	beq.n	801860e <DMA_SetConfig+0x10a>
 80185dc:	68fb      	ldr	r3, [r7, #12]
 80185de:	681b      	ldr	r3, [r3, #0]
 80185e0:	4a62      	ldr	r2, [pc, #392]	; (801876c <DMA_SetConfig+0x268>)
 80185e2:	4293      	cmp	r3, r2
 80185e4:	d013      	beq.n	801860e <DMA_SetConfig+0x10a>
 80185e6:	68fb      	ldr	r3, [r7, #12]
 80185e8:	681b      	ldr	r3, [r3, #0]
 80185ea:	4a61      	ldr	r2, [pc, #388]	; (8018770 <DMA_SetConfig+0x26c>)
 80185ec:	4293      	cmp	r3, r2
 80185ee:	d00e      	beq.n	801860e <DMA_SetConfig+0x10a>
 80185f0:	68fb      	ldr	r3, [r7, #12]
 80185f2:	681b      	ldr	r3, [r3, #0]
 80185f4:	4a5f      	ldr	r2, [pc, #380]	; (8018774 <DMA_SetConfig+0x270>)
 80185f6:	4293      	cmp	r3, r2
 80185f8:	d009      	beq.n	801860e <DMA_SetConfig+0x10a>
 80185fa:	68fb      	ldr	r3, [r7, #12]
 80185fc:	681b      	ldr	r3, [r3, #0]
 80185fe:	4a5e      	ldr	r2, [pc, #376]	; (8018778 <DMA_SetConfig+0x274>)
 8018600:	4293      	cmp	r3, r2
 8018602:	d004      	beq.n	801860e <DMA_SetConfig+0x10a>
 8018604:	68fb      	ldr	r3, [r7, #12]
 8018606:	681b      	ldr	r3, [r3, #0]
 8018608:	4a5c      	ldr	r2, [pc, #368]	; (801877c <DMA_SetConfig+0x278>)
 801860a:	4293      	cmp	r3, r2
 801860c:	d101      	bne.n	8018612 <DMA_SetConfig+0x10e>
 801860e:	2301      	movs	r3, #1
 8018610:	e000      	b.n	8018614 <DMA_SetConfig+0x110>
 8018612:	2300      	movs	r3, #0
 8018614:	2b00      	cmp	r3, #0
 8018616:	d00d      	beq.n	8018634 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8018618:	68fb      	ldr	r3, [r7, #12]
 801861a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801861c:	68fa      	ldr	r2, [r7, #12]
 801861e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8018620:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8018622:	68fb      	ldr	r3, [r7, #12]
 8018624:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018626:	2b00      	cmp	r3, #0
 8018628:	d004      	beq.n	8018634 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801862a:	68fb      	ldr	r3, [r7, #12]
 801862c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801862e:	68fa      	ldr	r2, [r7, #12]
 8018630:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8018632:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8018634:	68fb      	ldr	r3, [r7, #12]
 8018636:	681b      	ldr	r3, [r3, #0]
 8018638:	4a39      	ldr	r2, [pc, #228]	; (8018720 <DMA_SetConfig+0x21c>)
 801863a:	4293      	cmp	r3, r2
 801863c:	d04a      	beq.n	80186d4 <DMA_SetConfig+0x1d0>
 801863e:	68fb      	ldr	r3, [r7, #12]
 8018640:	681b      	ldr	r3, [r3, #0]
 8018642:	4a38      	ldr	r2, [pc, #224]	; (8018724 <DMA_SetConfig+0x220>)
 8018644:	4293      	cmp	r3, r2
 8018646:	d045      	beq.n	80186d4 <DMA_SetConfig+0x1d0>
 8018648:	68fb      	ldr	r3, [r7, #12]
 801864a:	681b      	ldr	r3, [r3, #0]
 801864c:	4a36      	ldr	r2, [pc, #216]	; (8018728 <DMA_SetConfig+0x224>)
 801864e:	4293      	cmp	r3, r2
 8018650:	d040      	beq.n	80186d4 <DMA_SetConfig+0x1d0>
 8018652:	68fb      	ldr	r3, [r7, #12]
 8018654:	681b      	ldr	r3, [r3, #0]
 8018656:	4a35      	ldr	r2, [pc, #212]	; (801872c <DMA_SetConfig+0x228>)
 8018658:	4293      	cmp	r3, r2
 801865a:	d03b      	beq.n	80186d4 <DMA_SetConfig+0x1d0>
 801865c:	68fb      	ldr	r3, [r7, #12]
 801865e:	681b      	ldr	r3, [r3, #0]
 8018660:	4a33      	ldr	r2, [pc, #204]	; (8018730 <DMA_SetConfig+0x22c>)
 8018662:	4293      	cmp	r3, r2
 8018664:	d036      	beq.n	80186d4 <DMA_SetConfig+0x1d0>
 8018666:	68fb      	ldr	r3, [r7, #12]
 8018668:	681b      	ldr	r3, [r3, #0]
 801866a:	4a32      	ldr	r2, [pc, #200]	; (8018734 <DMA_SetConfig+0x230>)
 801866c:	4293      	cmp	r3, r2
 801866e:	d031      	beq.n	80186d4 <DMA_SetConfig+0x1d0>
 8018670:	68fb      	ldr	r3, [r7, #12]
 8018672:	681b      	ldr	r3, [r3, #0]
 8018674:	4a30      	ldr	r2, [pc, #192]	; (8018738 <DMA_SetConfig+0x234>)
 8018676:	4293      	cmp	r3, r2
 8018678:	d02c      	beq.n	80186d4 <DMA_SetConfig+0x1d0>
 801867a:	68fb      	ldr	r3, [r7, #12]
 801867c:	681b      	ldr	r3, [r3, #0]
 801867e:	4a2f      	ldr	r2, [pc, #188]	; (801873c <DMA_SetConfig+0x238>)
 8018680:	4293      	cmp	r3, r2
 8018682:	d027      	beq.n	80186d4 <DMA_SetConfig+0x1d0>
 8018684:	68fb      	ldr	r3, [r7, #12]
 8018686:	681b      	ldr	r3, [r3, #0]
 8018688:	4a2d      	ldr	r2, [pc, #180]	; (8018740 <DMA_SetConfig+0x23c>)
 801868a:	4293      	cmp	r3, r2
 801868c:	d022      	beq.n	80186d4 <DMA_SetConfig+0x1d0>
 801868e:	68fb      	ldr	r3, [r7, #12]
 8018690:	681b      	ldr	r3, [r3, #0]
 8018692:	4a2c      	ldr	r2, [pc, #176]	; (8018744 <DMA_SetConfig+0x240>)
 8018694:	4293      	cmp	r3, r2
 8018696:	d01d      	beq.n	80186d4 <DMA_SetConfig+0x1d0>
 8018698:	68fb      	ldr	r3, [r7, #12]
 801869a:	681b      	ldr	r3, [r3, #0]
 801869c:	4a2a      	ldr	r2, [pc, #168]	; (8018748 <DMA_SetConfig+0x244>)
 801869e:	4293      	cmp	r3, r2
 80186a0:	d018      	beq.n	80186d4 <DMA_SetConfig+0x1d0>
 80186a2:	68fb      	ldr	r3, [r7, #12]
 80186a4:	681b      	ldr	r3, [r3, #0]
 80186a6:	4a29      	ldr	r2, [pc, #164]	; (801874c <DMA_SetConfig+0x248>)
 80186a8:	4293      	cmp	r3, r2
 80186aa:	d013      	beq.n	80186d4 <DMA_SetConfig+0x1d0>
 80186ac:	68fb      	ldr	r3, [r7, #12]
 80186ae:	681b      	ldr	r3, [r3, #0]
 80186b0:	4a27      	ldr	r2, [pc, #156]	; (8018750 <DMA_SetConfig+0x24c>)
 80186b2:	4293      	cmp	r3, r2
 80186b4:	d00e      	beq.n	80186d4 <DMA_SetConfig+0x1d0>
 80186b6:	68fb      	ldr	r3, [r7, #12]
 80186b8:	681b      	ldr	r3, [r3, #0]
 80186ba:	4a26      	ldr	r2, [pc, #152]	; (8018754 <DMA_SetConfig+0x250>)
 80186bc:	4293      	cmp	r3, r2
 80186be:	d009      	beq.n	80186d4 <DMA_SetConfig+0x1d0>
 80186c0:	68fb      	ldr	r3, [r7, #12]
 80186c2:	681b      	ldr	r3, [r3, #0]
 80186c4:	4a24      	ldr	r2, [pc, #144]	; (8018758 <DMA_SetConfig+0x254>)
 80186c6:	4293      	cmp	r3, r2
 80186c8:	d004      	beq.n	80186d4 <DMA_SetConfig+0x1d0>
 80186ca:	68fb      	ldr	r3, [r7, #12]
 80186cc:	681b      	ldr	r3, [r3, #0]
 80186ce:	4a23      	ldr	r2, [pc, #140]	; (801875c <DMA_SetConfig+0x258>)
 80186d0:	4293      	cmp	r3, r2
 80186d2:	d101      	bne.n	80186d8 <DMA_SetConfig+0x1d4>
 80186d4:	2301      	movs	r3, #1
 80186d6:	e000      	b.n	80186da <DMA_SetConfig+0x1d6>
 80186d8:	2300      	movs	r3, #0
 80186da:	2b00      	cmp	r3, #0
 80186dc:	d059      	beq.n	8018792 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80186de:	68fb      	ldr	r3, [r7, #12]
 80186e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80186e2:	f003 031f 	and.w	r3, r3, #31
 80186e6:	223f      	movs	r2, #63	; 0x3f
 80186e8:	409a      	lsls	r2, r3
 80186ea:	697b      	ldr	r3, [r7, #20]
 80186ec:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80186ee:	68fb      	ldr	r3, [r7, #12]
 80186f0:	681b      	ldr	r3, [r3, #0]
 80186f2:	681a      	ldr	r2, [r3, #0]
 80186f4:	68fb      	ldr	r3, [r7, #12]
 80186f6:	681b      	ldr	r3, [r3, #0]
 80186f8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80186fc:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80186fe:	68fb      	ldr	r3, [r7, #12]
 8018700:	681b      	ldr	r3, [r3, #0]
 8018702:	683a      	ldr	r2, [r7, #0]
 8018704:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8018706:	68fb      	ldr	r3, [r7, #12]
 8018708:	689b      	ldr	r3, [r3, #8]
 801870a:	2b40      	cmp	r3, #64	; 0x40
 801870c:	d138      	bne.n	8018780 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 801870e:	68fb      	ldr	r3, [r7, #12]
 8018710:	681b      	ldr	r3, [r3, #0]
 8018712:	687a      	ldr	r2, [r7, #4]
 8018714:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8018716:	68fb      	ldr	r3, [r7, #12]
 8018718:	681b      	ldr	r3, [r3, #0]
 801871a:	68ba      	ldr	r2, [r7, #8]
 801871c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 801871e:	e086      	b.n	801882e <DMA_SetConfig+0x32a>
 8018720:	40020010 	.word	0x40020010
 8018724:	40020028 	.word	0x40020028
 8018728:	40020040 	.word	0x40020040
 801872c:	40020058 	.word	0x40020058
 8018730:	40020070 	.word	0x40020070
 8018734:	40020088 	.word	0x40020088
 8018738:	400200a0 	.word	0x400200a0
 801873c:	400200b8 	.word	0x400200b8
 8018740:	40020410 	.word	0x40020410
 8018744:	40020428 	.word	0x40020428
 8018748:	40020440 	.word	0x40020440
 801874c:	40020458 	.word	0x40020458
 8018750:	40020470 	.word	0x40020470
 8018754:	40020488 	.word	0x40020488
 8018758:	400204a0 	.word	0x400204a0
 801875c:	400204b8 	.word	0x400204b8
 8018760:	58025408 	.word	0x58025408
 8018764:	5802541c 	.word	0x5802541c
 8018768:	58025430 	.word	0x58025430
 801876c:	58025444 	.word	0x58025444
 8018770:	58025458 	.word	0x58025458
 8018774:	5802546c 	.word	0x5802546c
 8018778:	58025480 	.word	0x58025480
 801877c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8018780:	68fb      	ldr	r3, [r7, #12]
 8018782:	681b      	ldr	r3, [r3, #0]
 8018784:	68ba      	ldr	r2, [r7, #8]
 8018786:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8018788:	68fb      	ldr	r3, [r7, #12]
 801878a:	681b      	ldr	r3, [r3, #0]
 801878c:	687a      	ldr	r2, [r7, #4]
 801878e:	60da      	str	r2, [r3, #12]
}
 8018790:	e04d      	b.n	801882e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8018792:	68fb      	ldr	r3, [r7, #12]
 8018794:	681b      	ldr	r3, [r3, #0]
 8018796:	4a29      	ldr	r2, [pc, #164]	; (801883c <DMA_SetConfig+0x338>)
 8018798:	4293      	cmp	r3, r2
 801879a:	d022      	beq.n	80187e2 <DMA_SetConfig+0x2de>
 801879c:	68fb      	ldr	r3, [r7, #12]
 801879e:	681b      	ldr	r3, [r3, #0]
 80187a0:	4a27      	ldr	r2, [pc, #156]	; (8018840 <DMA_SetConfig+0x33c>)
 80187a2:	4293      	cmp	r3, r2
 80187a4:	d01d      	beq.n	80187e2 <DMA_SetConfig+0x2de>
 80187a6:	68fb      	ldr	r3, [r7, #12]
 80187a8:	681b      	ldr	r3, [r3, #0]
 80187aa:	4a26      	ldr	r2, [pc, #152]	; (8018844 <DMA_SetConfig+0x340>)
 80187ac:	4293      	cmp	r3, r2
 80187ae:	d018      	beq.n	80187e2 <DMA_SetConfig+0x2de>
 80187b0:	68fb      	ldr	r3, [r7, #12]
 80187b2:	681b      	ldr	r3, [r3, #0]
 80187b4:	4a24      	ldr	r2, [pc, #144]	; (8018848 <DMA_SetConfig+0x344>)
 80187b6:	4293      	cmp	r3, r2
 80187b8:	d013      	beq.n	80187e2 <DMA_SetConfig+0x2de>
 80187ba:	68fb      	ldr	r3, [r7, #12]
 80187bc:	681b      	ldr	r3, [r3, #0]
 80187be:	4a23      	ldr	r2, [pc, #140]	; (801884c <DMA_SetConfig+0x348>)
 80187c0:	4293      	cmp	r3, r2
 80187c2:	d00e      	beq.n	80187e2 <DMA_SetConfig+0x2de>
 80187c4:	68fb      	ldr	r3, [r7, #12]
 80187c6:	681b      	ldr	r3, [r3, #0]
 80187c8:	4a21      	ldr	r2, [pc, #132]	; (8018850 <DMA_SetConfig+0x34c>)
 80187ca:	4293      	cmp	r3, r2
 80187cc:	d009      	beq.n	80187e2 <DMA_SetConfig+0x2de>
 80187ce:	68fb      	ldr	r3, [r7, #12]
 80187d0:	681b      	ldr	r3, [r3, #0]
 80187d2:	4a20      	ldr	r2, [pc, #128]	; (8018854 <DMA_SetConfig+0x350>)
 80187d4:	4293      	cmp	r3, r2
 80187d6:	d004      	beq.n	80187e2 <DMA_SetConfig+0x2de>
 80187d8:	68fb      	ldr	r3, [r7, #12]
 80187da:	681b      	ldr	r3, [r3, #0]
 80187dc:	4a1e      	ldr	r2, [pc, #120]	; (8018858 <DMA_SetConfig+0x354>)
 80187de:	4293      	cmp	r3, r2
 80187e0:	d101      	bne.n	80187e6 <DMA_SetConfig+0x2e2>
 80187e2:	2301      	movs	r3, #1
 80187e4:	e000      	b.n	80187e8 <DMA_SetConfig+0x2e4>
 80187e6:	2300      	movs	r3, #0
 80187e8:	2b00      	cmp	r3, #0
 80187ea:	d020      	beq.n	801882e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80187ec:	68fb      	ldr	r3, [r7, #12]
 80187ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80187f0:	f003 031f 	and.w	r3, r3, #31
 80187f4:	2201      	movs	r2, #1
 80187f6:	409a      	lsls	r2, r3
 80187f8:	693b      	ldr	r3, [r7, #16]
 80187fa:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80187fc:	68fb      	ldr	r3, [r7, #12]
 80187fe:	681b      	ldr	r3, [r3, #0]
 8018800:	683a      	ldr	r2, [r7, #0]
 8018802:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8018804:	68fb      	ldr	r3, [r7, #12]
 8018806:	689b      	ldr	r3, [r3, #8]
 8018808:	2b40      	cmp	r3, #64	; 0x40
 801880a:	d108      	bne.n	801881e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 801880c:	68fb      	ldr	r3, [r7, #12]
 801880e:	681b      	ldr	r3, [r3, #0]
 8018810:	687a      	ldr	r2, [r7, #4]
 8018812:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8018814:	68fb      	ldr	r3, [r7, #12]
 8018816:	681b      	ldr	r3, [r3, #0]
 8018818:	68ba      	ldr	r2, [r7, #8]
 801881a:	60da      	str	r2, [r3, #12]
}
 801881c:	e007      	b.n	801882e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 801881e:	68fb      	ldr	r3, [r7, #12]
 8018820:	681b      	ldr	r3, [r3, #0]
 8018822:	68ba      	ldr	r2, [r7, #8]
 8018824:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8018826:	68fb      	ldr	r3, [r7, #12]
 8018828:	681b      	ldr	r3, [r3, #0]
 801882a:	687a      	ldr	r2, [r7, #4]
 801882c:	60da      	str	r2, [r3, #12]
}
 801882e:	bf00      	nop
 8018830:	371c      	adds	r7, #28
 8018832:	46bd      	mov	sp, r7
 8018834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018838:	4770      	bx	lr
 801883a:	bf00      	nop
 801883c:	58025408 	.word	0x58025408
 8018840:	5802541c 	.word	0x5802541c
 8018844:	58025430 	.word	0x58025430
 8018848:	58025444 	.word	0x58025444
 801884c:	58025458 	.word	0x58025458
 8018850:	5802546c 	.word	0x5802546c
 8018854:	58025480 	.word	0x58025480
 8018858:	58025494 	.word	0x58025494

0801885c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 801885c:	b480      	push	{r7}
 801885e:	b085      	sub	sp, #20
 8018860:	af00      	add	r7, sp, #0
 8018862:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8018864:	687b      	ldr	r3, [r7, #4]
 8018866:	681b      	ldr	r3, [r3, #0]
 8018868:	4a42      	ldr	r2, [pc, #264]	; (8018974 <DMA_CalcBaseAndBitshift+0x118>)
 801886a:	4293      	cmp	r3, r2
 801886c:	d04a      	beq.n	8018904 <DMA_CalcBaseAndBitshift+0xa8>
 801886e:	687b      	ldr	r3, [r7, #4]
 8018870:	681b      	ldr	r3, [r3, #0]
 8018872:	4a41      	ldr	r2, [pc, #260]	; (8018978 <DMA_CalcBaseAndBitshift+0x11c>)
 8018874:	4293      	cmp	r3, r2
 8018876:	d045      	beq.n	8018904 <DMA_CalcBaseAndBitshift+0xa8>
 8018878:	687b      	ldr	r3, [r7, #4]
 801887a:	681b      	ldr	r3, [r3, #0]
 801887c:	4a3f      	ldr	r2, [pc, #252]	; (801897c <DMA_CalcBaseAndBitshift+0x120>)
 801887e:	4293      	cmp	r3, r2
 8018880:	d040      	beq.n	8018904 <DMA_CalcBaseAndBitshift+0xa8>
 8018882:	687b      	ldr	r3, [r7, #4]
 8018884:	681b      	ldr	r3, [r3, #0]
 8018886:	4a3e      	ldr	r2, [pc, #248]	; (8018980 <DMA_CalcBaseAndBitshift+0x124>)
 8018888:	4293      	cmp	r3, r2
 801888a:	d03b      	beq.n	8018904 <DMA_CalcBaseAndBitshift+0xa8>
 801888c:	687b      	ldr	r3, [r7, #4]
 801888e:	681b      	ldr	r3, [r3, #0]
 8018890:	4a3c      	ldr	r2, [pc, #240]	; (8018984 <DMA_CalcBaseAndBitshift+0x128>)
 8018892:	4293      	cmp	r3, r2
 8018894:	d036      	beq.n	8018904 <DMA_CalcBaseAndBitshift+0xa8>
 8018896:	687b      	ldr	r3, [r7, #4]
 8018898:	681b      	ldr	r3, [r3, #0]
 801889a:	4a3b      	ldr	r2, [pc, #236]	; (8018988 <DMA_CalcBaseAndBitshift+0x12c>)
 801889c:	4293      	cmp	r3, r2
 801889e:	d031      	beq.n	8018904 <DMA_CalcBaseAndBitshift+0xa8>
 80188a0:	687b      	ldr	r3, [r7, #4]
 80188a2:	681b      	ldr	r3, [r3, #0]
 80188a4:	4a39      	ldr	r2, [pc, #228]	; (801898c <DMA_CalcBaseAndBitshift+0x130>)
 80188a6:	4293      	cmp	r3, r2
 80188a8:	d02c      	beq.n	8018904 <DMA_CalcBaseAndBitshift+0xa8>
 80188aa:	687b      	ldr	r3, [r7, #4]
 80188ac:	681b      	ldr	r3, [r3, #0]
 80188ae:	4a38      	ldr	r2, [pc, #224]	; (8018990 <DMA_CalcBaseAndBitshift+0x134>)
 80188b0:	4293      	cmp	r3, r2
 80188b2:	d027      	beq.n	8018904 <DMA_CalcBaseAndBitshift+0xa8>
 80188b4:	687b      	ldr	r3, [r7, #4]
 80188b6:	681b      	ldr	r3, [r3, #0]
 80188b8:	4a36      	ldr	r2, [pc, #216]	; (8018994 <DMA_CalcBaseAndBitshift+0x138>)
 80188ba:	4293      	cmp	r3, r2
 80188bc:	d022      	beq.n	8018904 <DMA_CalcBaseAndBitshift+0xa8>
 80188be:	687b      	ldr	r3, [r7, #4]
 80188c0:	681b      	ldr	r3, [r3, #0]
 80188c2:	4a35      	ldr	r2, [pc, #212]	; (8018998 <DMA_CalcBaseAndBitshift+0x13c>)
 80188c4:	4293      	cmp	r3, r2
 80188c6:	d01d      	beq.n	8018904 <DMA_CalcBaseAndBitshift+0xa8>
 80188c8:	687b      	ldr	r3, [r7, #4]
 80188ca:	681b      	ldr	r3, [r3, #0]
 80188cc:	4a33      	ldr	r2, [pc, #204]	; (801899c <DMA_CalcBaseAndBitshift+0x140>)
 80188ce:	4293      	cmp	r3, r2
 80188d0:	d018      	beq.n	8018904 <DMA_CalcBaseAndBitshift+0xa8>
 80188d2:	687b      	ldr	r3, [r7, #4]
 80188d4:	681b      	ldr	r3, [r3, #0]
 80188d6:	4a32      	ldr	r2, [pc, #200]	; (80189a0 <DMA_CalcBaseAndBitshift+0x144>)
 80188d8:	4293      	cmp	r3, r2
 80188da:	d013      	beq.n	8018904 <DMA_CalcBaseAndBitshift+0xa8>
 80188dc:	687b      	ldr	r3, [r7, #4]
 80188de:	681b      	ldr	r3, [r3, #0]
 80188e0:	4a30      	ldr	r2, [pc, #192]	; (80189a4 <DMA_CalcBaseAndBitshift+0x148>)
 80188e2:	4293      	cmp	r3, r2
 80188e4:	d00e      	beq.n	8018904 <DMA_CalcBaseAndBitshift+0xa8>
 80188e6:	687b      	ldr	r3, [r7, #4]
 80188e8:	681b      	ldr	r3, [r3, #0]
 80188ea:	4a2f      	ldr	r2, [pc, #188]	; (80189a8 <DMA_CalcBaseAndBitshift+0x14c>)
 80188ec:	4293      	cmp	r3, r2
 80188ee:	d009      	beq.n	8018904 <DMA_CalcBaseAndBitshift+0xa8>
 80188f0:	687b      	ldr	r3, [r7, #4]
 80188f2:	681b      	ldr	r3, [r3, #0]
 80188f4:	4a2d      	ldr	r2, [pc, #180]	; (80189ac <DMA_CalcBaseAndBitshift+0x150>)
 80188f6:	4293      	cmp	r3, r2
 80188f8:	d004      	beq.n	8018904 <DMA_CalcBaseAndBitshift+0xa8>
 80188fa:	687b      	ldr	r3, [r7, #4]
 80188fc:	681b      	ldr	r3, [r3, #0]
 80188fe:	4a2c      	ldr	r2, [pc, #176]	; (80189b0 <DMA_CalcBaseAndBitshift+0x154>)
 8018900:	4293      	cmp	r3, r2
 8018902:	d101      	bne.n	8018908 <DMA_CalcBaseAndBitshift+0xac>
 8018904:	2301      	movs	r3, #1
 8018906:	e000      	b.n	801890a <DMA_CalcBaseAndBitshift+0xae>
 8018908:	2300      	movs	r3, #0
 801890a:	2b00      	cmp	r3, #0
 801890c:	d024      	beq.n	8018958 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 801890e:	687b      	ldr	r3, [r7, #4]
 8018910:	681b      	ldr	r3, [r3, #0]
 8018912:	b2db      	uxtb	r3, r3
 8018914:	3b10      	subs	r3, #16
 8018916:	4a27      	ldr	r2, [pc, #156]	; (80189b4 <DMA_CalcBaseAndBitshift+0x158>)
 8018918:	fba2 2303 	umull	r2, r3, r2, r3
 801891c:	091b      	lsrs	r3, r3, #4
 801891e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8018920:	68fb      	ldr	r3, [r7, #12]
 8018922:	f003 0307 	and.w	r3, r3, #7
 8018926:	4a24      	ldr	r2, [pc, #144]	; (80189b8 <DMA_CalcBaseAndBitshift+0x15c>)
 8018928:	5cd3      	ldrb	r3, [r2, r3]
 801892a:	461a      	mov	r2, r3
 801892c:	687b      	ldr	r3, [r7, #4]
 801892e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8018930:	68fb      	ldr	r3, [r7, #12]
 8018932:	2b03      	cmp	r3, #3
 8018934:	d908      	bls.n	8018948 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8018936:	687b      	ldr	r3, [r7, #4]
 8018938:	681b      	ldr	r3, [r3, #0]
 801893a:	461a      	mov	r2, r3
 801893c:	4b1f      	ldr	r3, [pc, #124]	; (80189bc <DMA_CalcBaseAndBitshift+0x160>)
 801893e:	4013      	ands	r3, r2
 8018940:	1d1a      	adds	r2, r3, #4
 8018942:	687b      	ldr	r3, [r7, #4]
 8018944:	659a      	str	r2, [r3, #88]	; 0x58
 8018946:	e00d      	b.n	8018964 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8018948:	687b      	ldr	r3, [r7, #4]
 801894a:	681b      	ldr	r3, [r3, #0]
 801894c:	461a      	mov	r2, r3
 801894e:	4b1b      	ldr	r3, [pc, #108]	; (80189bc <DMA_CalcBaseAndBitshift+0x160>)
 8018950:	4013      	ands	r3, r2
 8018952:	687a      	ldr	r2, [r7, #4]
 8018954:	6593      	str	r3, [r2, #88]	; 0x58
 8018956:	e005      	b.n	8018964 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8018958:	687b      	ldr	r3, [r7, #4]
 801895a:	681b      	ldr	r3, [r3, #0]
 801895c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8018960:	687b      	ldr	r3, [r7, #4]
 8018962:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8018964:	687b      	ldr	r3, [r7, #4]
 8018966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8018968:	4618      	mov	r0, r3
 801896a:	3714      	adds	r7, #20
 801896c:	46bd      	mov	sp, r7
 801896e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018972:	4770      	bx	lr
 8018974:	40020010 	.word	0x40020010
 8018978:	40020028 	.word	0x40020028
 801897c:	40020040 	.word	0x40020040
 8018980:	40020058 	.word	0x40020058
 8018984:	40020070 	.word	0x40020070
 8018988:	40020088 	.word	0x40020088
 801898c:	400200a0 	.word	0x400200a0
 8018990:	400200b8 	.word	0x400200b8
 8018994:	40020410 	.word	0x40020410
 8018998:	40020428 	.word	0x40020428
 801899c:	40020440 	.word	0x40020440
 80189a0:	40020458 	.word	0x40020458
 80189a4:	40020470 	.word	0x40020470
 80189a8:	40020488 	.word	0x40020488
 80189ac:	400204a0 	.word	0x400204a0
 80189b0:	400204b8 	.word	0x400204b8
 80189b4:	aaaaaaab 	.word	0xaaaaaaab
 80189b8:	08072a20 	.word	0x08072a20
 80189bc:	fffffc00 	.word	0xfffffc00

080189c0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80189c0:	b480      	push	{r7}
 80189c2:	b085      	sub	sp, #20
 80189c4:	af00      	add	r7, sp, #0
 80189c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80189c8:	2300      	movs	r3, #0
 80189ca:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80189cc:	687b      	ldr	r3, [r7, #4]
 80189ce:	699b      	ldr	r3, [r3, #24]
 80189d0:	2b00      	cmp	r3, #0
 80189d2:	d120      	bne.n	8018a16 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80189d4:	687b      	ldr	r3, [r7, #4]
 80189d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80189d8:	2b03      	cmp	r3, #3
 80189da:	d858      	bhi.n	8018a8e <DMA_CheckFifoParam+0xce>
 80189dc:	a201      	add	r2, pc, #4	; (adr r2, 80189e4 <DMA_CheckFifoParam+0x24>)
 80189de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80189e2:	bf00      	nop
 80189e4:	080189f5 	.word	0x080189f5
 80189e8:	08018a07 	.word	0x08018a07
 80189ec:	080189f5 	.word	0x080189f5
 80189f0:	08018a8f 	.word	0x08018a8f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80189f4:	687b      	ldr	r3, [r7, #4]
 80189f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80189f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80189fc:	2b00      	cmp	r3, #0
 80189fe:	d048      	beq.n	8018a92 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8018a00:	2301      	movs	r3, #1
 8018a02:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8018a04:	e045      	b.n	8018a92 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8018a06:	687b      	ldr	r3, [r7, #4]
 8018a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018a0a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8018a0e:	d142      	bne.n	8018a96 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8018a10:	2301      	movs	r3, #1
 8018a12:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8018a14:	e03f      	b.n	8018a96 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8018a16:	687b      	ldr	r3, [r7, #4]
 8018a18:	699b      	ldr	r3, [r3, #24]
 8018a1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8018a1e:	d123      	bne.n	8018a68 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8018a20:	687b      	ldr	r3, [r7, #4]
 8018a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018a24:	2b03      	cmp	r3, #3
 8018a26:	d838      	bhi.n	8018a9a <DMA_CheckFifoParam+0xda>
 8018a28:	a201      	add	r2, pc, #4	; (adr r2, 8018a30 <DMA_CheckFifoParam+0x70>)
 8018a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018a2e:	bf00      	nop
 8018a30:	08018a41 	.word	0x08018a41
 8018a34:	08018a47 	.word	0x08018a47
 8018a38:	08018a41 	.word	0x08018a41
 8018a3c:	08018a59 	.word	0x08018a59
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8018a40:	2301      	movs	r3, #1
 8018a42:	73fb      	strb	r3, [r7, #15]
        break;
 8018a44:	e030      	b.n	8018aa8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8018a46:	687b      	ldr	r3, [r7, #4]
 8018a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018a4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8018a4e:	2b00      	cmp	r3, #0
 8018a50:	d025      	beq.n	8018a9e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8018a52:	2301      	movs	r3, #1
 8018a54:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8018a56:	e022      	b.n	8018a9e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8018a58:	687b      	ldr	r3, [r7, #4]
 8018a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018a5c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8018a60:	d11f      	bne.n	8018aa2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8018a62:	2301      	movs	r3, #1
 8018a64:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8018a66:	e01c      	b.n	8018aa2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8018a68:	687b      	ldr	r3, [r7, #4]
 8018a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018a6c:	2b02      	cmp	r3, #2
 8018a6e:	d902      	bls.n	8018a76 <DMA_CheckFifoParam+0xb6>
 8018a70:	2b03      	cmp	r3, #3
 8018a72:	d003      	beq.n	8018a7c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8018a74:	e018      	b.n	8018aa8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8018a76:	2301      	movs	r3, #1
 8018a78:	73fb      	strb	r3, [r7, #15]
        break;
 8018a7a:	e015      	b.n	8018aa8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8018a7c:	687b      	ldr	r3, [r7, #4]
 8018a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018a80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8018a84:	2b00      	cmp	r3, #0
 8018a86:	d00e      	beq.n	8018aa6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8018a88:	2301      	movs	r3, #1
 8018a8a:	73fb      	strb	r3, [r7, #15]
    break;
 8018a8c:	e00b      	b.n	8018aa6 <DMA_CheckFifoParam+0xe6>
        break;
 8018a8e:	bf00      	nop
 8018a90:	e00a      	b.n	8018aa8 <DMA_CheckFifoParam+0xe8>
        break;
 8018a92:	bf00      	nop
 8018a94:	e008      	b.n	8018aa8 <DMA_CheckFifoParam+0xe8>
        break;
 8018a96:	bf00      	nop
 8018a98:	e006      	b.n	8018aa8 <DMA_CheckFifoParam+0xe8>
        break;
 8018a9a:	bf00      	nop
 8018a9c:	e004      	b.n	8018aa8 <DMA_CheckFifoParam+0xe8>
        break;
 8018a9e:	bf00      	nop
 8018aa0:	e002      	b.n	8018aa8 <DMA_CheckFifoParam+0xe8>
        break;
 8018aa2:	bf00      	nop
 8018aa4:	e000      	b.n	8018aa8 <DMA_CheckFifoParam+0xe8>
    break;
 8018aa6:	bf00      	nop
    }
  }

  return status;
 8018aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8018aaa:	4618      	mov	r0, r3
 8018aac:	3714      	adds	r7, #20
 8018aae:	46bd      	mov	sp, r7
 8018ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ab4:	4770      	bx	lr
 8018ab6:	bf00      	nop

08018ab8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8018ab8:	b480      	push	{r7}
 8018aba:	b085      	sub	sp, #20
 8018abc:	af00      	add	r7, sp, #0
 8018abe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8018ac0:	687b      	ldr	r3, [r7, #4]
 8018ac2:	681b      	ldr	r3, [r3, #0]
 8018ac4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8018ac6:	687b      	ldr	r3, [r7, #4]
 8018ac8:	681b      	ldr	r3, [r3, #0]
 8018aca:	4a38      	ldr	r2, [pc, #224]	; (8018bac <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8018acc:	4293      	cmp	r3, r2
 8018ace:	d022      	beq.n	8018b16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8018ad0:	687b      	ldr	r3, [r7, #4]
 8018ad2:	681b      	ldr	r3, [r3, #0]
 8018ad4:	4a36      	ldr	r2, [pc, #216]	; (8018bb0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8018ad6:	4293      	cmp	r3, r2
 8018ad8:	d01d      	beq.n	8018b16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8018ada:	687b      	ldr	r3, [r7, #4]
 8018adc:	681b      	ldr	r3, [r3, #0]
 8018ade:	4a35      	ldr	r2, [pc, #212]	; (8018bb4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8018ae0:	4293      	cmp	r3, r2
 8018ae2:	d018      	beq.n	8018b16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8018ae4:	687b      	ldr	r3, [r7, #4]
 8018ae6:	681b      	ldr	r3, [r3, #0]
 8018ae8:	4a33      	ldr	r2, [pc, #204]	; (8018bb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8018aea:	4293      	cmp	r3, r2
 8018aec:	d013      	beq.n	8018b16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8018aee:	687b      	ldr	r3, [r7, #4]
 8018af0:	681b      	ldr	r3, [r3, #0]
 8018af2:	4a32      	ldr	r2, [pc, #200]	; (8018bbc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8018af4:	4293      	cmp	r3, r2
 8018af6:	d00e      	beq.n	8018b16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8018af8:	687b      	ldr	r3, [r7, #4]
 8018afa:	681b      	ldr	r3, [r3, #0]
 8018afc:	4a30      	ldr	r2, [pc, #192]	; (8018bc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8018afe:	4293      	cmp	r3, r2
 8018b00:	d009      	beq.n	8018b16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8018b02:	687b      	ldr	r3, [r7, #4]
 8018b04:	681b      	ldr	r3, [r3, #0]
 8018b06:	4a2f      	ldr	r2, [pc, #188]	; (8018bc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8018b08:	4293      	cmp	r3, r2
 8018b0a:	d004      	beq.n	8018b16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8018b0c:	687b      	ldr	r3, [r7, #4]
 8018b0e:	681b      	ldr	r3, [r3, #0]
 8018b10:	4a2d      	ldr	r2, [pc, #180]	; (8018bc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8018b12:	4293      	cmp	r3, r2
 8018b14:	d101      	bne.n	8018b1a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8018b16:	2301      	movs	r3, #1
 8018b18:	e000      	b.n	8018b1c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8018b1a:	2300      	movs	r3, #0
 8018b1c:	2b00      	cmp	r3, #0
 8018b1e:	d01a      	beq.n	8018b56 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8018b20:	687b      	ldr	r3, [r7, #4]
 8018b22:	681b      	ldr	r3, [r3, #0]
 8018b24:	b2db      	uxtb	r3, r3
 8018b26:	3b08      	subs	r3, #8
 8018b28:	4a28      	ldr	r2, [pc, #160]	; (8018bcc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8018b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8018b2e:	091b      	lsrs	r3, r3, #4
 8018b30:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8018b32:	68fa      	ldr	r2, [r7, #12]
 8018b34:	4b26      	ldr	r3, [pc, #152]	; (8018bd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8018b36:	4413      	add	r3, r2
 8018b38:	009b      	lsls	r3, r3, #2
 8018b3a:	461a      	mov	r2, r3
 8018b3c:	687b      	ldr	r3, [r7, #4]
 8018b3e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8018b40:	687b      	ldr	r3, [r7, #4]
 8018b42:	4a24      	ldr	r2, [pc, #144]	; (8018bd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8018b44:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8018b46:	68fb      	ldr	r3, [r7, #12]
 8018b48:	f003 031f 	and.w	r3, r3, #31
 8018b4c:	2201      	movs	r2, #1
 8018b4e:	409a      	lsls	r2, r3
 8018b50:	687b      	ldr	r3, [r7, #4]
 8018b52:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8018b54:	e024      	b.n	8018ba0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8018b56:	687b      	ldr	r3, [r7, #4]
 8018b58:	681b      	ldr	r3, [r3, #0]
 8018b5a:	b2db      	uxtb	r3, r3
 8018b5c:	3b10      	subs	r3, #16
 8018b5e:	4a1e      	ldr	r2, [pc, #120]	; (8018bd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8018b60:	fba2 2303 	umull	r2, r3, r2, r3
 8018b64:	091b      	lsrs	r3, r3, #4
 8018b66:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8018b68:	68bb      	ldr	r3, [r7, #8]
 8018b6a:	4a1c      	ldr	r2, [pc, #112]	; (8018bdc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8018b6c:	4293      	cmp	r3, r2
 8018b6e:	d806      	bhi.n	8018b7e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8018b70:	68bb      	ldr	r3, [r7, #8]
 8018b72:	4a1b      	ldr	r2, [pc, #108]	; (8018be0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8018b74:	4293      	cmp	r3, r2
 8018b76:	d902      	bls.n	8018b7e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8018b78:	68fb      	ldr	r3, [r7, #12]
 8018b7a:	3308      	adds	r3, #8
 8018b7c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8018b7e:	68fa      	ldr	r2, [r7, #12]
 8018b80:	4b18      	ldr	r3, [pc, #96]	; (8018be4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8018b82:	4413      	add	r3, r2
 8018b84:	009b      	lsls	r3, r3, #2
 8018b86:	461a      	mov	r2, r3
 8018b88:	687b      	ldr	r3, [r7, #4]
 8018b8a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8018b8c:	687b      	ldr	r3, [r7, #4]
 8018b8e:	4a16      	ldr	r2, [pc, #88]	; (8018be8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8018b90:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8018b92:	68fb      	ldr	r3, [r7, #12]
 8018b94:	f003 031f 	and.w	r3, r3, #31
 8018b98:	2201      	movs	r2, #1
 8018b9a:	409a      	lsls	r2, r3
 8018b9c:	687b      	ldr	r3, [r7, #4]
 8018b9e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8018ba0:	bf00      	nop
 8018ba2:	3714      	adds	r7, #20
 8018ba4:	46bd      	mov	sp, r7
 8018ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018baa:	4770      	bx	lr
 8018bac:	58025408 	.word	0x58025408
 8018bb0:	5802541c 	.word	0x5802541c
 8018bb4:	58025430 	.word	0x58025430
 8018bb8:	58025444 	.word	0x58025444
 8018bbc:	58025458 	.word	0x58025458
 8018bc0:	5802546c 	.word	0x5802546c
 8018bc4:	58025480 	.word	0x58025480
 8018bc8:	58025494 	.word	0x58025494
 8018bcc:	cccccccd 	.word	0xcccccccd
 8018bd0:	16009600 	.word	0x16009600
 8018bd4:	58025880 	.word	0x58025880
 8018bd8:	aaaaaaab 	.word	0xaaaaaaab
 8018bdc:	400204b8 	.word	0x400204b8
 8018be0:	4002040f 	.word	0x4002040f
 8018be4:	10008200 	.word	0x10008200
 8018be8:	40020880 	.word	0x40020880

08018bec <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8018bec:	b480      	push	{r7}
 8018bee:	b085      	sub	sp, #20
 8018bf0:	af00      	add	r7, sp, #0
 8018bf2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8018bf4:	687b      	ldr	r3, [r7, #4]
 8018bf6:	685b      	ldr	r3, [r3, #4]
 8018bf8:	b2db      	uxtb	r3, r3
 8018bfa:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8018bfc:	68fb      	ldr	r3, [r7, #12]
 8018bfe:	2b00      	cmp	r3, #0
 8018c00:	d04a      	beq.n	8018c98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8018c02:	68fb      	ldr	r3, [r7, #12]
 8018c04:	2b08      	cmp	r3, #8
 8018c06:	d847      	bhi.n	8018c98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8018c08:	687b      	ldr	r3, [r7, #4]
 8018c0a:	681b      	ldr	r3, [r3, #0]
 8018c0c:	4a25      	ldr	r2, [pc, #148]	; (8018ca4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8018c0e:	4293      	cmp	r3, r2
 8018c10:	d022      	beq.n	8018c58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8018c12:	687b      	ldr	r3, [r7, #4]
 8018c14:	681b      	ldr	r3, [r3, #0]
 8018c16:	4a24      	ldr	r2, [pc, #144]	; (8018ca8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8018c18:	4293      	cmp	r3, r2
 8018c1a:	d01d      	beq.n	8018c58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8018c1c:	687b      	ldr	r3, [r7, #4]
 8018c1e:	681b      	ldr	r3, [r3, #0]
 8018c20:	4a22      	ldr	r2, [pc, #136]	; (8018cac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8018c22:	4293      	cmp	r3, r2
 8018c24:	d018      	beq.n	8018c58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8018c26:	687b      	ldr	r3, [r7, #4]
 8018c28:	681b      	ldr	r3, [r3, #0]
 8018c2a:	4a21      	ldr	r2, [pc, #132]	; (8018cb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8018c2c:	4293      	cmp	r3, r2
 8018c2e:	d013      	beq.n	8018c58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8018c30:	687b      	ldr	r3, [r7, #4]
 8018c32:	681b      	ldr	r3, [r3, #0]
 8018c34:	4a1f      	ldr	r2, [pc, #124]	; (8018cb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8018c36:	4293      	cmp	r3, r2
 8018c38:	d00e      	beq.n	8018c58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8018c3a:	687b      	ldr	r3, [r7, #4]
 8018c3c:	681b      	ldr	r3, [r3, #0]
 8018c3e:	4a1e      	ldr	r2, [pc, #120]	; (8018cb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8018c40:	4293      	cmp	r3, r2
 8018c42:	d009      	beq.n	8018c58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8018c44:	687b      	ldr	r3, [r7, #4]
 8018c46:	681b      	ldr	r3, [r3, #0]
 8018c48:	4a1c      	ldr	r2, [pc, #112]	; (8018cbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8018c4a:	4293      	cmp	r3, r2
 8018c4c:	d004      	beq.n	8018c58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8018c4e:	687b      	ldr	r3, [r7, #4]
 8018c50:	681b      	ldr	r3, [r3, #0]
 8018c52:	4a1b      	ldr	r2, [pc, #108]	; (8018cc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8018c54:	4293      	cmp	r3, r2
 8018c56:	d101      	bne.n	8018c5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8018c58:	2301      	movs	r3, #1
 8018c5a:	e000      	b.n	8018c5e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8018c5c:	2300      	movs	r3, #0
 8018c5e:	2b00      	cmp	r3, #0
 8018c60:	d00a      	beq.n	8018c78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8018c62:	68fa      	ldr	r2, [r7, #12]
 8018c64:	4b17      	ldr	r3, [pc, #92]	; (8018cc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8018c66:	4413      	add	r3, r2
 8018c68:	009b      	lsls	r3, r3, #2
 8018c6a:	461a      	mov	r2, r3
 8018c6c:	687b      	ldr	r3, [r7, #4]
 8018c6e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8018c70:	687b      	ldr	r3, [r7, #4]
 8018c72:	4a15      	ldr	r2, [pc, #84]	; (8018cc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8018c74:	671a      	str	r2, [r3, #112]	; 0x70
 8018c76:	e009      	b.n	8018c8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8018c78:	68fa      	ldr	r2, [r7, #12]
 8018c7a:	4b14      	ldr	r3, [pc, #80]	; (8018ccc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8018c7c:	4413      	add	r3, r2
 8018c7e:	009b      	lsls	r3, r3, #2
 8018c80:	461a      	mov	r2, r3
 8018c82:	687b      	ldr	r3, [r7, #4]
 8018c84:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8018c86:	687b      	ldr	r3, [r7, #4]
 8018c88:	4a11      	ldr	r2, [pc, #68]	; (8018cd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8018c8a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8018c8c:	68fb      	ldr	r3, [r7, #12]
 8018c8e:	3b01      	subs	r3, #1
 8018c90:	2201      	movs	r2, #1
 8018c92:	409a      	lsls	r2, r3
 8018c94:	687b      	ldr	r3, [r7, #4]
 8018c96:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8018c98:	bf00      	nop
 8018c9a:	3714      	adds	r7, #20
 8018c9c:	46bd      	mov	sp, r7
 8018c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ca2:	4770      	bx	lr
 8018ca4:	58025408 	.word	0x58025408
 8018ca8:	5802541c 	.word	0x5802541c
 8018cac:	58025430 	.word	0x58025430
 8018cb0:	58025444 	.word	0x58025444
 8018cb4:	58025458 	.word	0x58025458
 8018cb8:	5802546c 	.word	0x5802546c
 8018cbc:	58025480 	.word	0x58025480
 8018cc0:	58025494 	.word	0x58025494
 8018cc4:	1600963f 	.word	0x1600963f
 8018cc8:	58025940 	.word	0x58025940
 8018ccc:	1000823f 	.word	0x1000823f
 8018cd0:	40020940 	.word	0x40020940

08018cd4 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8018cd4:	b580      	push	{r7, lr}
 8018cd6:	b086      	sub	sp, #24
 8018cd8:	af00      	add	r7, sp, #0
 8018cda:	60f8      	str	r0, [r7, #12]
 8018cdc:	60b9      	str	r1, [r7, #8]
 8018cde:	607a      	str	r2, [r7, #4]
 8018ce0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8018ce2:	2300      	movs	r3, #0
 8018ce4:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8018ce6:	68fb      	ldr	r3, [r7, #12]
 8018ce8:	689b      	ldr	r3, [r3, #8]
 8018cea:	2b80      	cmp	r3, #128	; 0x80
 8018cec:	d105      	bne.n	8018cfa <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8018cee:	68fb      	ldr	r3, [r7, #12]
 8018cf0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8018cf4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8018cf6:	2301      	movs	r3, #1
 8018cf8:	e315      	b.n	8019326 <HAL_DMAEx_MultiBufferStart_IT+0x652>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8018cfa:	68fb      	ldr	r3, [r7, #12]
 8018cfc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8018d00:	2b01      	cmp	r3, #1
 8018d02:	d101      	bne.n	8018d08 <HAL_DMAEx_MultiBufferStart_IT+0x34>
 8018d04:	2302      	movs	r3, #2
 8018d06:	e30e      	b.n	8019326 <HAL_DMAEx_MultiBufferStart_IT+0x652>
 8018d08:	68fb      	ldr	r3, [r7, #12]
 8018d0a:	2201      	movs	r2, #1
 8018d0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8018d10:	68fb      	ldr	r3, [r7, #12]
 8018d12:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8018d16:	b2db      	uxtb	r3, r3
 8018d18:	2b01      	cmp	r3, #1
 8018d1a:	f040 82fd 	bne.w	8019318 <HAL_DMAEx_MultiBufferStart_IT+0x644>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8018d1e:	68fb      	ldr	r3, [r7, #12]
 8018d20:	2202      	movs	r2, #2
 8018d22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8018d26:	68fb      	ldr	r3, [r7, #12]
 8018d28:	2200      	movs	r2, #0
 8018d2a:	655a      	str	r2, [r3, #84]	; 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8018d2c:	68fb      	ldr	r3, [r7, #12]
 8018d2e:	681b      	ldr	r3, [r3, #0]
 8018d30:	4a82      	ldr	r2, [pc, #520]	; (8018f3c <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8018d32:	4293      	cmp	r3, r2
 8018d34:	d04a      	beq.n	8018dcc <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8018d36:	68fb      	ldr	r3, [r7, #12]
 8018d38:	681b      	ldr	r3, [r3, #0]
 8018d3a:	4a81      	ldr	r2, [pc, #516]	; (8018f40 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8018d3c:	4293      	cmp	r3, r2
 8018d3e:	d045      	beq.n	8018dcc <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8018d40:	68fb      	ldr	r3, [r7, #12]
 8018d42:	681b      	ldr	r3, [r3, #0]
 8018d44:	4a7f      	ldr	r2, [pc, #508]	; (8018f44 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8018d46:	4293      	cmp	r3, r2
 8018d48:	d040      	beq.n	8018dcc <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8018d4a:	68fb      	ldr	r3, [r7, #12]
 8018d4c:	681b      	ldr	r3, [r3, #0]
 8018d4e:	4a7e      	ldr	r2, [pc, #504]	; (8018f48 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8018d50:	4293      	cmp	r3, r2
 8018d52:	d03b      	beq.n	8018dcc <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8018d54:	68fb      	ldr	r3, [r7, #12]
 8018d56:	681b      	ldr	r3, [r3, #0]
 8018d58:	4a7c      	ldr	r2, [pc, #496]	; (8018f4c <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8018d5a:	4293      	cmp	r3, r2
 8018d5c:	d036      	beq.n	8018dcc <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8018d5e:	68fb      	ldr	r3, [r7, #12]
 8018d60:	681b      	ldr	r3, [r3, #0]
 8018d62:	4a7b      	ldr	r2, [pc, #492]	; (8018f50 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8018d64:	4293      	cmp	r3, r2
 8018d66:	d031      	beq.n	8018dcc <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8018d68:	68fb      	ldr	r3, [r7, #12]
 8018d6a:	681b      	ldr	r3, [r3, #0]
 8018d6c:	4a79      	ldr	r2, [pc, #484]	; (8018f54 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8018d6e:	4293      	cmp	r3, r2
 8018d70:	d02c      	beq.n	8018dcc <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8018d72:	68fb      	ldr	r3, [r7, #12]
 8018d74:	681b      	ldr	r3, [r3, #0]
 8018d76:	4a78      	ldr	r2, [pc, #480]	; (8018f58 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8018d78:	4293      	cmp	r3, r2
 8018d7a:	d027      	beq.n	8018dcc <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8018d7c:	68fb      	ldr	r3, [r7, #12]
 8018d7e:	681b      	ldr	r3, [r3, #0]
 8018d80:	4a76      	ldr	r2, [pc, #472]	; (8018f5c <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8018d82:	4293      	cmp	r3, r2
 8018d84:	d022      	beq.n	8018dcc <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8018d86:	68fb      	ldr	r3, [r7, #12]
 8018d88:	681b      	ldr	r3, [r3, #0]
 8018d8a:	4a75      	ldr	r2, [pc, #468]	; (8018f60 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8018d8c:	4293      	cmp	r3, r2
 8018d8e:	d01d      	beq.n	8018dcc <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8018d90:	68fb      	ldr	r3, [r7, #12]
 8018d92:	681b      	ldr	r3, [r3, #0]
 8018d94:	4a73      	ldr	r2, [pc, #460]	; (8018f64 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8018d96:	4293      	cmp	r3, r2
 8018d98:	d018      	beq.n	8018dcc <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8018d9a:	68fb      	ldr	r3, [r7, #12]
 8018d9c:	681b      	ldr	r3, [r3, #0]
 8018d9e:	4a72      	ldr	r2, [pc, #456]	; (8018f68 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8018da0:	4293      	cmp	r3, r2
 8018da2:	d013      	beq.n	8018dcc <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8018da4:	68fb      	ldr	r3, [r7, #12]
 8018da6:	681b      	ldr	r3, [r3, #0]
 8018da8:	4a70      	ldr	r2, [pc, #448]	; (8018f6c <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8018daa:	4293      	cmp	r3, r2
 8018dac:	d00e      	beq.n	8018dcc <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8018dae:	68fb      	ldr	r3, [r7, #12]
 8018db0:	681b      	ldr	r3, [r3, #0]
 8018db2:	4a6f      	ldr	r2, [pc, #444]	; (8018f70 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8018db4:	4293      	cmp	r3, r2
 8018db6:	d009      	beq.n	8018dcc <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8018db8:	68fb      	ldr	r3, [r7, #12]
 8018dba:	681b      	ldr	r3, [r3, #0]
 8018dbc:	4a6d      	ldr	r2, [pc, #436]	; (8018f74 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8018dbe:	4293      	cmp	r3, r2
 8018dc0:	d004      	beq.n	8018dcc <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8018dc2:	68fb      	ldr	r3, [r7, #12]
 8018dc4:	681b      	ldr	r3, [r3, #0]
 8018dc6:	4a6c      	ldr	r2, [pc, #432]	; (8018f78 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8018dc8:	4293      	cmp	r3, r2
 8018dca:	d101      	bne.n	8018dd0 <HAL_DMAEx_MultiBufferStart_IT+0xfc>
 8018dcc:	2301      	movs	r3, #1
 8018dce:	e000      	b.n	8018dd2 <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 8018dd0:	2300      	movs	r3, #0
 8018dd2:	2b00      	cmp	r3, #0
 8018dd4:	d018      	beq.n	8018e08 <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 8018dd6:	68fb      	ldr	r3, [r7, #12]
 8018dd8:	681b      	ldr	r3, [r3, #0]
 8018dda:	681a      	ldr	r2, [r3, #0]
 8018ddc:	68fb      	ldr	r3, [r7, #12]
 8018dde:	681b      	ldr	r3, [r3, #0]
 8018de0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8018de4:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 8018de6:	68fb      	ldr	r3, [r7, #12]
 8018de8:	681b      	ldr	r3, [r3, #0]
 8018dea:	683a      	ldr	r2, [r7, #0]
 8018dec:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
 8018dee:	68fb      	ldr	r3, [r7, #12]
 8018df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018df2:	3308      	adds	r3, #8
 8018df4:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8018df6:	68fb      	ldr	r3, [r7, #12]
 8018df8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018dfa:	f003 031f 	and.w	r3, r3, #31
 8018dfe:	223f      	movs	r2, #63	; 0x3f
 8018e00:	409a      	lsls	r2, r3
 8018e02:	693b      	ldr	r3, [r7, #16]
 8018e04:	601a      	str	r2, [r3, #0]
 8018e06:	e018      	b.n	8018e3a <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 8018e08:	68fb      	ldr	r3, [r7, #12]
 8018e0a:	681b      	ldr	r3, [r3, #0]
 8018e0c:	6819      	ldr	r1, [r3, #0]
 8018e0e:	68fb      	ldr	r3, [r7, #12]
 8018e10:	681a      	ldr	r2, [r3, #0]
 8018e12:	f248 0320 	movw	r3, #32800	; 0x8020
 8018e16:	430b      	orrs	r3, r1
 8018e18:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 8018e1a:	68fb      	ldr	r3, [r7, #12]
 8018e1c:	681b      	ldr	r3, [r3, #0]
 8018e1e:	683a      	ldr	r2, [r7, #0]
 8018e20:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
 8018e22:	68fb      	ldr	r3, [r7, #12]
 8018e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018e26:	3304      	adds	r3, #4
 8018e28:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8018e2a:	68fb      	ldr	r3, [r7, #12]
 8018e2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018e2e:	f003 031f 	and.w	r3, r3, #31
 8018e32:	2201      	movs	r2, #1
 8018e34:	409a      	lsls	r2, r3
 8018e36:	693b      	ldr	r3, [r7, #16]
 8018e38:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8018e3a:	6a3b      	ldr	r3, [r7, #32]
 8018e3c:	687a      	ldr	r2, [r7, #4]
 8018e3e:	68b9      	ldr	r1, [r7, #8]
 8018e40:	68f8      	ldr	r0, [r7, #12]
 8018e42:	f000 fb41 	bl	80194c8 <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8018e46:	68fb      	ldr	r3, [r7, #12]
 8018e48:	681b      	ldr	r3, [r3, #0]
 8018e4a:	4a3c      	ldr	r2, [pc, #240]	; (8018f3c <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8018e4c:	4293      	cmp	r3, r2
 8018e4e:	d072      	beq.n	8018f36 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8018e50:	68fb      	ldr	r3, [r7, #12]
 8018e52:	681b      	ldr	r3, [r3, #0]
 8018e54:	4a3a      	ldr	r2, [pc, #232]	; (8018f40 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8018e56:	4293      	cmp	r3, r2
 8018e58:	d06d      	beq.n	8018f36 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8018e5a:	68fb      	ldr	r3, [r7, #12]
 8018e5c:	681b      	ldr	r3, [r3, #0]
 8018e5e:	4a39      	ldr	r2, [pc, #228]	; (8018f44 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8018e60:	4293      	cmp	r3, r2
 8018e62:	d068      	beq.n	8018f36 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8018e64:	68fb      	ldr	r3, [r7, #12]
 8018e66:	681b      	ldr	r3, [r3, #0]
 8018e68:	4a37      	ldr	r2, [pc, #220]	; (8018f48 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8018e6a:	4293      	cmp	r3, r2
 8018e6c:	d063      	beq.n	8018f36 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8018e6e:	68fb      	ldr	r3, [r7, #12]
 8018e70:	681b      	ldr	r3, [r3, #0]
 8018e72:	4a36      	ldr	r2, [pc, #216]	; (8018f4c <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8018e74:	4293      	cmp	r3, r2
 8018e76:	d05e      	beq.n	8018f36 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8018e78:	68fb      	ldr	r3, [r7, #12]
 8018e7a:	681b      	ldr	r3, [r3, #0]
 8018e7c:	4a34      	ldr	r2, [pc, #208]	; (8018f50 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8018e7e:	4293      	cmp	r3, r2
 8018e80:	d059      	beq.n	8018f36 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8018e82:	68fb      	ldr	r3, [r7, #12]
 8018e84:	681b      	ldr	r3, [r3, #0]
 8018e86:	4a33      	ldr	r2, [pc, #204]	; (8018f54 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8018e88:	4293      	cmp	r3, r2
 8018e8a:	d054      	beq.n	8018f36 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8018e8c:	68fb      	ldr	r3, [r7, #12]
 8018e8e:	681b      	ldr	r3, [r3, #0]
 8018e90:	4a31      	ldr	r2, [pc, #196]	; (8018f58 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8018e92:	4293      	cmp	r3, r2
 8018e94:	d04f      	beq.n	8018f36 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8018e96:	68fb      	ldr	r3, [r7, #12]
 8018e98:	681b      	ldr	r3, [r3, #0]
 8018e9a:	4a30      	ldr	r2, [pc, #192]	; (8018f5c <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8018e9c:	4293      	cmp	r3, r2
 8018e9e:	d04a      	beq.n	8018f36 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8018ea0:	68fb      	ldr	r3, [r7, #12]
 8018ea2:	681b      	ldr	r3, [r3, #0]
 8018ea4:	4a2e      	ldr	r2, [pc, #184]	; (8018f60 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8018ea6:	4293      	cmp	r3, r2
 8018ea8:	d045      	beq.n	8018f36 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8018eaa:	68fb      	ldr	r3, [r7, #12]
 8018eac:	681b      	ldr	r3, [r3, #0]
 8018eae:	4a2d      	ldr	r2, [pc, #180]	; (8018f64 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8018eb0:	4293      	cmp	r3, r2
 8018eb2:	d040      	beq.n	8018f36 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8018eb4:	68fb      	ldr	r3, [r7, #12]
 8018eb6:	681b      	ldr	r3, [r3, #0]
 8018eb8:	4a2b      	ldr	r2, [pc, #172]	; (8018f68 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8018eba:	4293      	cmp	r3, r2
 8018ebc:	d03b      	beq.n	8018f36 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8018ebe:	68fb      	ldr	r3, [r7, #12]
 8018ec0:	681b      	ldr	r3, [r3, #0]
 8018ec2:	4a2a      	ldr	r2, [pc, #168]	; (8018f6c <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8018ec4:	4293      	cmp	r3, r2
 8018ec6:	d036      	beq.n	8018f36 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8018ec8:	68fb      	ldr	r3, [r7, #12]
 8018eca:	681b      	ldr	r3, [r3, #0]
 8018ecc:	4a28      	ldr	r2, [pc, #160]	; (8018f70 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8018ece:	4293      	cmp	r3, r2
 8018ed0:	d031      	beq.n	8018f36 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8018ed2:	68fb      	ldr	r3, [r7, #12]
 8018ed4:	681b      	ldr	r3, [r3, #0]
 8018ed6:	4a27      	ldr	r2, [pc, #156]	; (8018f74 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8018ed8:	4293      	cmp	r3, r2
 8018eda:	d02c      	beq.n	8018f36 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8018edc:	68fb      	ldr	r3, [r7, #12]
 8018ede:	681b      	ldr	r3, [r3, #0]
 8018ee0:	4a25      	ldr	r2, [pc, #148]	; (8018f78 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8018ee2:	4293      	cmp	r3, r2
 8018ee4:	d027      	beq.n	8018f36 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8018ee6:	68fb      	ldr	r3, [r7, #12]
 8018ee8:	681b      	ldr	r3, [r3, #0]
 8018eea:	4a24      	ldr	r2, [pc, #144]	; (8018f7c <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 8018eec:	4293      	cmp	r3, r2
 8018eee:	d022      	beq.n	8018f36 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8018ef0:	68fb      	ldr	r3, [r7, #12]
 8018ef2:	681b      	ldr	r3, [r3, #0]
 8018ef4:	4a22      	ldr	r2, [pc, #136]	; (8018f80 <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
 8018ef6:	4293      	cmp	r3, r2
 8018ef8:	d01d      	beq.n	8018f36 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8018efa:	68fb      	ldr	r3, [r7, #12]
 8018efc:	681b      	ldr	r3, [r3, #0]
 8018efe:	4a21      	ldr	r2, [pc, #132]	; (8018f84 <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 8018f00:	4293      	cmp	r3, r2
 8018f02:	d018      	beq.n	8018f36 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8018f04:	68fb      	ldr	r3, [r7, #12]
 8018f06:	681b      	ldr	r3, [r3, #0]
 8018f08:	4a1f      	ldr	r2, [pc, #124]	; (8018f88 <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 8018f0a:	4293      	cmp	r3, r2
 8018f0c:	d013      	beq.n	8018f36 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8018f0e:	68fb      	ldr	r3, [r7, #12]
 8018f10:	681b      	ldr	r3, [r3, #0]
 8018f12:	4a1e      	ldr	r2, [pc, #120]	; (8018f8c <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 8018f14:	4293      	cmp	r3, r2
 8018f16:	d00e      	beq.n	8018f36 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8018f18:	68fb      	ldr	r3, [r7, #12]
 8018f1a:	681b      	ldr	r3, [r3, #0]
 8018f1c:	4a1c      	ldr	r2, [pc, #112]	; (8018f90 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 8018f1e:	4293      	cmp	r3, r2
 8018f20:	d009      	beq.n	8018f36 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8018f22:	68fb      	ldr	r3, [r7, #12]
 8018f24:	681b      	ldr	r3, [r3, #0]
 8018f26:	4a1b      	ldr	r2, [pc, #108]	; (8018f94 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 8018f28:	4293      	cmp	r3, r2
 8018f2a:	d004      	beq.n	8018f36 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8018f2c:	68fb      	ldr	r3, [r7, #12]
 8018f2e:	681b      	ldr	r3, [r3, #0]
 8018f30:	4a19      	ldr	r2, [pc, #100]	; (8018f98 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8018f32:	4293      	cmp	r3, r2
 8018f34:	d132      	bne.n	8018f9c <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 8018f36:	2301      	movs	r3, #1
 8018f38:	e031      	b.n	8018f9e <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
 8018f3a:	bf00      	nop
 8018f3c:	40020010 	.word	0x40020010
 8018f40:	40020028 	.word	0x40020028
 8018f44:	40020040 	.word	0x40020040
 8018f48:	40020058 	.word	0x40020058
 8018f4c:	40020070 	.word	0x40020070
 8018f50:	40020088 	.word	0x40020088
 8018f54:	400200a0 	.word	0x400200a0
 8018f58:	400200b8 	.word	0x400200b8
 8018f5c:	40020410 	.word	0x40020410
 8018f60:	40020428 	.word	0x40020428
 8018f64:	40020440 	.word	0x40020440
 8018f68:	40020458 	.word	0x40020458
 8018f6c:	40020470 	.word	0x40020470
 8018f70:	40020488 	.word	0x40020488
 8018f74:	400204a0 	.word	0x400204a0
 8018f78:	400204b8 	.word	0x400204b8
 8018f7c:	58025408 	.word	0x58025408
 8018f80:	5802541c 	.word	0x5802541c
 8018f84:	58025430 	.word	0x58025430
 8018f88:	58025444 	.word	0x58025444
 8018f8c:	58025458 	.word	0x58025458
 8018f90:	5802546c 	.word	0x5802546c
 8018f94:	58025480 	.word	0x58025480
 8018f98:	58025494 	.word	0x58025494
 8018f9c:	2300      	movs	r3, #0
 8018f9e:	2b00      	cmp	r3, #0
 8018fa0:	d00d      	beq.n	8018fbe <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8018fa2:	68fb      	ldr	r3, [r7, #12]
 8018fa4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8018fa6:	68fa      	ldr	r2, [r7, #12]
 8018fa8:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8018faa:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8018fac:	68fb      	ldr	r3, [r7, #12]
 8018fae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018fb0:	2b00      	cmp	r3, #0
 8018fb2:	d004      	beq.n	8018fbe <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8018fb4:	68fb      	ldr	r3, [r7, #12]
 8018fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018fb8:	68fa      	ldr	r2, [r7, #12]
 8018fba:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8018fbc:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8018fbe:	68fb      	ldr	r3, [r7, #12]
 8018fc0:	681b      	ldr	r3, [r3, #0]
 8018fc2:	4a3b      	ldr	r2, [pc, #236]	; (80190b0 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>)
 8018fc4:	4293      	cmp	r3, r2
 8018fc6:	d04a      	beq.n	801905e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8018fc8:	68fb      	ldr	r3, [r7, #12]
 8018fca:	681b      	ldr	r3, [r3, #0]
 8018fcc:	4a39      	ldr	r2, [pc, #228]	; (80190b4 <HAL_DMAEx_MultiBufferStart_IT+0x3e0>)
 8018fce:	4293      	cmp	r3, r2
 8018fd0:	d045      	beq.n	801905e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8018fd2:	68fb      	ldr	r3, [r7, #12]
 8018fd4:	681b      	ldr	r3, [r3, #0]
 8018fd6:	4a38      	ldr	r2, [pc, #224]	; (80190b8 <HAL_DMAEx_MultiBufferStart_IT+0x3e4>)
 8018fd8:	4293      	cmp	r3, r2
 8018fda:	d040      	beq.n	801905e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8018fdc:	68fb      	ldr	r3, [r7, #12]
 8018fde:	681b      	ldr	r3, [r3, #0]
 8018fe0:	4a36      	ldr	r2, [pc, #216]	; (80190bc <HAL_DMAEx_MultiBufferStart_IT+0x3e8>)
 8018fe2:	4293      	cmp	r3, r2
 8018fe4:	d03b      	beq.n	801905e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8018fe6:	68fb      	ldr	r3, [r7, #12]
 8018fe8:	681b      	ldr	r3, [r3, #0]
 8018fea:	4a35      	ldr	r2, [pc, #212]	; (80190c0 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>)
 8018fec:	4293      	cmp	r3, r2
 8018fee:	d036      	beq.n	801905e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8018ff0:	68fb      	ldr	r3, [r7, #12]
 8018ff2:	681b      	ldr	r3, [r3, #0]
 8018ff4:	4a33      	ldr	r2, [pc, #204]	; (80190c4 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>)
 8018ff6:	4293      	cmp	r3, r2
 8018ff8:	d031      	beq.n	801905e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8018ffa:	68fb      	ldr	r3, [r7, #12]
 8018ffc:	681b      	ldr	r3, [r3, #0]
 8018ffe:	4a32      	ldr	r2, [pc, #200]	; (80190c8 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>)
 8019000:	4293      	cmp	r3, r2
 8019002:	d02c      	beq.n	801905e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8019004:	68fb      	ldr	r3, [r7, #12]
 8019006:	681b      	ldr	r3, [r3, #0]
 8019008:	4a30      	ldr	r2, [pc, #192]	; (80190cc <HAL_DMAEx_MultiBufferStart_IT+0x3f8>)
 801900a:	4293      	cmp	r3, r2
 801900c:	d027      	beq.n	801905e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801900e:	68fb      	ldr	r3, [r7, #12]
 8019010:	681b      	ldr	r3, [r3, #0]
 8019012:	4a2f      	ldr	r2, [pc, #188]	; (80190d0 <HAL_DMAEx_MultiBufferStart_IT+0x3fc>)
 8019014:	4293      	cmp	r3, r2
 8019016:	d022      	beq.n	801905e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8019018:	68fb      	ldr	r3, [r7, #12]
 801901a:	681b      	ldr	r3, [r3, #0]
 801901c:	4a2d      	ldr	r2, [pc, #180]	; (80190d4 <HAL_DMAEx_MultiBufferStart_IT+0x400>)
 801901e:	4293      	cmp	r3, r2
 8019020:	d01d      	beq.n	801905e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8019022:	68fb      	ldr	r3, [r7, #12]
 8019024:	681b      	ldr	r3, [r3, #0]
 8019026:	4a2c      	ldr	r2, [pc, #176]	; (80190d8 <HAL_DMAEx_MultiBufferStart_IT+0x404>)
 8019028:	4293      	cmp	r3, r2
 801902a:	d018      	beq.n	801905e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801902c:	68fb      	ldr	r3, [r7, #12]
 801902e:	681b      	ldr	r3, [r3, #0]
 8019030:	4a2a      	ldr	r2, [pc, #168]	; (80190dc <HAL_DMAEx_MultiBufferStart_IT+0x408>)
 8019032:	4293      	cmp	r3, r2
 8019034:	d013      	beq.n	801905e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8019036:	68fb      	ldr	r3, [r7, #12]
 8019038:	681b      	ldr	r3, [r3, #0]
 801903a:	4a29      	ldr	r2, [pc, #164]	; (80190e0 <HAL_DMAEx_MultiBufferStart_IT+0x40c>)
 801903c:	4293      	cmp	r3, r2
 801903e:	d00e      	beq.n	801905e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8019040:	68fb      	ldr	r3, [r7, #12]
 8019042:	681b      	ldr	r3, [r3, #0]
 8019044:	4a27      	ldr	r2, [pc, #156]	; (80190e4 <HAL_DMAEx_MultiBufferStart_IT+0x410>)
 8019046:	4293      	cmp	r3, r2
 8019048:	d009      	beq.n	801905e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801904a:	68fb      	ldr	r3, [r7, #12]
 801904c:	681b      	ldr	r3, [r3, #0]
 801904e:	4a26      	ldr	r2, [pc, #152]	; (80190e8 <HAL_DMAEx_MultiBufferStart_IT+0x414>)
 8019050:	4293      	cmp	r3, r2
 8019052:	d004      	beq.n	801905e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8019054:	68fb      	ldr	r3, [r7, #12]
 8019056:	681b      	ldr	r3, [r3, #0]
 8019058:	4a24      	ldr	r2, [pc, #144]	; (80190ec <HAL_DMAEx_MultiBufferStart_IT+0x418>)
 801905a:	4293      	cmp	r3, r2
 801905c:	d101      	bne.n	8019062 <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 801905e:	2301      	movs	r3, #1
 8019060:	e000      	b.n	8019064 <HAL_DMAEx_MultiBufferStart_IT+0x390>
 8019062:	2300      	movs	r3, #0
 8019064:	2b00      	cmp	r3, #0
 8019066:	d043      	beq.n	80190f0 <HAL_DMAEx_MultiBufferStart_IT+0x41c>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8019068:	68fb      	ldr	r3, [r7, #12]
 801906a:	681b      	ldr	r3, [r3, #0]
 801906c:	681b      	ldr	r3, [r3, #0]
 801906e:	f023 021e 	bic.w	r2, r3, #30
 8019072:	68fb      	ldr	r3, [r7, #12]
 8019074:	681b      	ldr	r3, [r3, #0]
 8019076:	f042 0216 	orr.w	r2, r2, #22
 801907a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 801907c:	68fb      	ldr	r3, [r7, #12]
 801907e:	681b      	ldr	r3, [r3, #0]
 8019080:	695a      	ldr	r2, [r3, #20]
 8019082:	68fb      	ldr	r3, [r7, #12]
 8019084:	681b      	ldr	r3, [r3, #0]
 8019086:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801908a:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801908c:	68fb      	ldr	r3, [r7, #12]
 801908e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019090:	2b00      	cmp	r3, #0
 8019092:	d103      	bne.n	801909c <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
 8019094:	68fb      	ldr	r3, [r7, #12]
 8019096:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019098:	2b00      	cmp	r3, #0
 801909a:	d043      	beq.n	8019124 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 801909c:	68fb      	ldr	r3, [r7, #12]
 801909e:	681b      	ldr	r3, [r3, #0]
 80190a0:	681a      	ldr	r2, [r3, #0]
 80190a2:	68fb      	ldr	r3, [r7, #12]
 80190a4:	681b      	ldr	r3, [r3, #0]
 80190a6:	f042 0208 	orr.w	r2, r2, #8
 80190aa:	601a      	str	r2, [r3, #0]
 80190ac:	e03a      	b.n	8019124 <HAL_DMAEx_MultiBufferStart_IT+0x450>
 80190ae:	bf00      	nop
 80190b0:	40020010 	.word	0x40020010
 80190b4:	40020028 	.word	0x40020028
 80190b8:	40020040 	.word	0x40020040
 80190bc:	40020058 	.word	0x40020058
 80190c0:	40020070 	.word	0x40020070
 80190c4:	40020088 	.word	0x40020088
 80190c8:	400200a0 	.word	0x400200a0
 80190cc:	400200b8 	.word	0x400200b8
 80190d0:	40020410 	.word	0x40020410
 80190d4:	40020428 	.word	0x40020428
 80190d8:	40020440 	.word	0x40020440
 80190dc:	40020458 	.word	0x40020458
 80190e0:	40020470 	.word	0x40020470
 80190e4:	40020488 	.word	0x40020488
 80190e8:	400204a0 	.word	0x400204a0
 80190ec:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80190f0:	68fb      	ldr	r3, [r7, #12]
 80190f2:	681b      	ldr	r3, [r3, #0]
 80190f4:	681b      	ldr	r3, [r3, #0]
 80190f6:	f023 020e 	bic.w	r2, r3, #14
 80190fa:	68fb      	ldr	r3, [r7, #12]
 80190fc:	681b      	ldr	r3, [r3, #0]
 80190fe:	f042 020a 	orr.w	r2, r2, #10
 8019102:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8019104:	68fb      	ldr	r3, [r7, #12]
 8019106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019108:	2b00      	cmp	r3, #0
 801910a:	d103      	bne.n	8019114 <HAL_DMAEx_MultiBufferStart_IT+0x440>
 801910c:	68fb      	ldr	r3, [r7, #12]
 801910e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019110:	2b00      	cmp	r3, #0
 8019112:	d007      	beq.n	8019124 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8019114:	68fb      	ldr	r3, [r7, #12]
 8019116:	681b      	ldr	r3, [r3, #0]
 8019118:	681a      	ldr	r2, [r3, #0]
 801911a:	68fb      	ldr	r3, [r7, #12]
 801911c:	681b      	ldr	r3, [r3, #0]
 801911e:	f042 0204 	orr.w	r2, r2, #4
 8019122:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8019124:	68fb      	ldr	r3, [r7, #12]
 8019126:	681b      	ldr	r3, [r3, #0]
 8019128:	4a81      	ldr	r2, [pc, #516]	; (8019330 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 801912a:	4293      	cmp	r3, r2
 801912c:	d072      	beq.n	8019214 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801912e:	68fb      	ldr	r3, [r7, #12]
 8019130:	681b      	ldr	r3, [r3, #0]
 8019132:	4a80      	ldr	r2, [pc, #512]	; (8019334 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 8019134:	4293      	cmp	r3, r2
 8019136:	d06d      	beq.n	8019214 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8019138:	68fb      	ldr	r3, [r7, #12]
 801913a:	681b      	ldr	r3, [r3, #0]
 801913c:	4a7e      	ldr	r2, [pc, #504]	; (8019338 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 801913e:	4293      	cmp	r3, r2
 8019140:	d068      	beq.n	8019214 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8019142:	68fb      	ldr	r3, [r7, #12]
 8019144:	681b      	ldr	r3, [r3, #0]
 8019146:	4a7d      	ldr	r2, [pc, #500]	; (801933c <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 8019148:	4293      	cmp	r3, r2
 801914a:	d063      	beq.n	8019214 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801914c:	68fb      	ldr	r3, [r7, #12]
 801914e:	681b      	ldr	r3, [r3, #0]
 8019150:	4a7b      	ldr	r2, [pc, #492]	; (8019340 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 8019152:	4293      	cmp	r3, r2
 8019154:	d05e      	beq.n	8019214 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8019156:	68fb      	ldr	r3, [r7, #12]
 8019158:	681b      	ldr	r3, [r3, #0]
 801915a:	4a7a      	ldr	r2, [pc, #488]	; (8019344 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 801915c:	4293      	cmp	r3, r2
 801915e:	d059      	beq.n	8019214 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8019160:	68fb      	ldr	r3, [r7, #12]
 8019162:	681b      	ldr	r3, [r3, #0]
 8019164:	4a78      	ldr	r2, [pc, #480]	; (8019348 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 8019166:	4293      	cmp	r3, r2
 8019168:	d054      	beq.n	8019214 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801916a:	68fb      	ldr	r3, [r7, #12]
 801916c:	681b      	ldr	r3, [r3, #0]
 801916e:	4a77      	ldr	r2, [pc, #476]	; (801934c <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8019170:	4293      	cmp	r3, r2
 8019172:	d04f      	beq.n	8019214 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8019174:	68fb      	ldr	r3, [r7, #12]
 8019176:	681b      	ldr	r3, [r3, #0]
 8019178:	4a75      	ldr	r2, [pc, #468]	; (8019350 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 801917a:	4293      	cmp	r3, r2
 801917c:	d04a      	beq.n	8019214 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801917e:	68fb      	ldr	r3, [r7, #12]
 8019180:	681b      	ldr	r3, [r3, #0]
 8019182:	4a74      	ldr	r2, [pc, #464]	; (8019354 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8019184:	4293      	cmp	r3, r2
 8019186:	d045      	beq.n	8019214 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8019188:	68fb      	ldr	r3, [r7, #12]
 801918a:	681b      	ldr	r3, [r3, #0]
 801918c:	4a72      	ldr	r2, [pc, #456]	; (8019358 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 801918e:	4293      	cmp	r3, r2
 8019190:	d040      	beq.n	8019214 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8019192:	68fb      	ldr	r3, [r7, #12]
 8019194:	681b      	ldr	r3, [r3, #0]
 8019196:	4a71      	ldr	r2, [pc, #452]	; (801935c <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8019198:	4293      	cmp	r3, r2
 801919a:	d03b      	beq.n	8019214 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801919c:	68fb      	ldr	r3, [r7, #12]
 801919e:	681b      	ldr	r3, [r3, #0]
 80191a0:	4a6f      	ldr	r2, [pc, #444]	; (8019360 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 80191a2:	4293      	cmp	r3, r2
 80191a4:	d036      	beq.n	8019214 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80191a6:	68fb      	ldr	r3, [r7, #12]
 80191a8:	681b      	ldr	r3, [r3, #0]
 80191aa:	4a6e      	ldr	r2, [pc, #440]	; (8019364 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 80191ac:	4293      	cmp	r3, r2
 80191ae:	d031      	beq.n	8019214 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80191b0:	68fb      	ldr	r3, [r7, #12]
 80191b2:	681b      	ldr	r3, [r3, #0]
 80191b4:	4a6c      	ldr	r2, [pc, #432]	; (8019368 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 80191b6:	4293      	cmp	r3, r2
 80191b8:	d02c      	beq.n	8019214 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80191ba:	68fb      	ldr	r3, [r7, #12]
 80191bc:	681b      	ldr	r3, [r3, #0]
 80191be:	4a6b      	ldr	r2, [pc, #428]	; (801936c <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 80191c0:	4293      	cmp	r3, r2
 80191c2:	d027      	beq.n	8019214 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80191c4:	68fb      	ldr	r3, [r7, #12]
 80191c6:	681b      	ldr	r3, [r3, #0]
 80191c8:	4a69      	ldr	r2, [pc, #420]	; (8019370 <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
 80191ca:	4293      	cmp	r3, r2
 80191cc:	d022      	beq.n	8019214 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80191ce:	68fb      	ldr	r3, [r7, #12]
 80191d0:	681b      	ldr	r3, [r3, #0]
 80191d2:	4a68      	ldr	r2, [pc, #416]	; (8019374 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
 80191d4:	4293      	cmp	r3, r2
 80191d6:	d01d      	beq.n	8019214 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80191d8:	68fb      	ldr	r3, [r7, #12]
 80191da:	681b      	ldr	r3, [r3, #0]
 80191dc:	4a66      	ldr	r2, [pc, #408]	; (8019378 <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
 80191de:	4293      	cmp	r3, r2
 80191e0:	d018      	beq.n	8019214 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80191e2:	68fb      	ldr	r3, [r7, #12]
 80191e4:	681b      	ldr	r3, [r3, #0]
 80191e6:	4a65      	ldr	r2, [pc, #404]	; (801937c <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
 80191e8:	4293      	cmp	r3, r2
 80191ea:	d013      	beq.n	8019214 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80191ec:	68fb      	ldr	r3, [r7, #12]
 80191ee:	681b      	ldr	r3, [r3, #0]
 80191f0:	4a63      	ldr	r2, [pc, #396]	; (8019380 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
 80191f2:	4293      	cmp	r3, r2
 80191f4:	d00e      	beq.n	8019214 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80191f6:	68fb      	ldr	r3, [r7, #12]
 80191f8:	681b      	ldr	r3, [r3, #0]
 80191fa:	4a62      	ldr	r2, [pc, #392]	; (8019384 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
 80191fc:	4293      	cmp	r3, r2
 80191fe:	d009      	beq.n	8019214 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8019200:	68fb      	ldr	r3, [r7, #12]
 8019202:	681b      	ldr	r3, [r3, #0]
 8019204:	4a60      	ldr	r2, [pc, #384]	; (8019388 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
 8019206:	4293      	cmp	r3, r2
 8019208:	d004      	beq.n	8019214 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801920a:	68fb      	ldr	r3, [r7, #12]
 801920c:	681b      	ldr	r3, [r3, #0]
 801920e:	4a5f      	ldr	r2, [pc, #380]	; (801938c <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
 8019210:	4293      	cmp	r3, r2
 8019212:	d101      	bne.n	8019218 <HAL_DMAEx_MultiBufferStart_IT+0x544>
 8019214:	2301      	movs	r3, #1
 8019216:	e000      	b.n	801921a <HAL_DMAEx_MultiBufferStart_IT+0x546>
 8019218:	2300      	movs	r3, #0
 801921a:	2b00      	cmp	r3, #0
 801921c:	d01a      	beq.n	8019254 <HAL_DMAEx_MultiBufferStart_IT+0x580>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 801921e:	68fb      	ldr	r3, [r7, #12]
 8019220:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019222:	681b      	ldr	r3, [r3, #0]
 8019224:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8019228:	2b00      	cmp	r3, #0
 801922a:	d007      	beq.n	801923c <HAL_DMAEx_MultiBufferStart_IT+0x568>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 801922c:	68fb      	ldr	r3, [r7, #12]
 801922e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019230:	681a      	ldr	r2, [r3, #0]
 8019232:	68fb      	ldr	r3, [r7, #12]
 8019234:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019236:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801923a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 801923c:	68fb      	ldr	r3, [r7, #12]
 801923e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019240:	2b00      	cmp	r3, #0
 8019242:	d007      	beq.n	8019254 <HAL_DMAEx_MultiBufferStart_IT+0x580>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8019244:	68fb      	ldr	r3, [r7, #12]
 8019246:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019248:	681a      	ldr	r2, [r3, #0]
 801924a:	68fb      	ldr	r3, [r7, #12]
 801924c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801924e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8019252:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
 8019254:	68fb      	ldr	r3, [r7, #12]
 8019256:	681b      	ldr	r3, [r3, #0]
 8019258:	4a35      	ldr	r2, [pc, #212]	; (8019330 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 801925a:	4293      	cmp	r3, r2
 801925c:	d04a      	beq.n	80192f4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801925e:	68fb      	ldr	r3, [r7, #12]
 8019260:	681b      	ldr	r3, [r3, #0]
 8019262:	4a34      	ldr	r2, [pc, #208]	; (8019334 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 8019264:	4293      	cmp	r3, r2
 8019266:	d045      	beq.n	80192f4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8019268:	68fb      	ldr	r3, [r7, #12]
 801926a:	681b      	ldr	r3, [r3, #0]
 801926c:	4a32      	ldr	r2, [pc, #200]	; (8019338 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 801926e:	4293      	cmp	r3, r2
 8019270:	d040      	beq.n	80192f4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8019272:	68fb      	ldr	r3, [r7, #12]
 8019274:	681b      	ldr	r3, [r3, #0]
 8019276:	4a31      	ldr	r2, [pc, #196]	; (801933c <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 8019278:	4293      	cmp	r3, r2
 801927a:	d03b      	beq.n	80192f4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801927c:	68fb      	ldr	r3, [r7, #12]
 801927e:	681b      	ldr	r3, [r3, #0]
 8019280:	4a2f      	ldr	r2, [pc, #188]	; (8019340 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 8019282:	4293      	cmp	r3, r2
 8019284:	d036      	beq.n	80192f4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8019286:	68fb      	ldr	r3, [r7, #12]
 8019288:	681b      	ldr	r3, [r3, #0]
 801928a:	4a2e      	ldr	r2, [pc, #184]	; (8019344 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 801928c:	4293      	cmp	r3, r2
 801928e:	d031      	beq.n	80192f4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8019290:	68fb      	ldr	r3, [r7, #12]
 8019292:	681b      	ldr	r3, [r3, #0]
 8019294:	4a2c      	ldr	r2, [pc, #176]	; (8019348 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 8019296:	4293      	cmp	r3, r2
 8019298:	d02c      	beq.n	80192f4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801929a:	68fb      	ldr	r3, [r7, #12]
 801929c:	681b      	ldr	r3, [r3, #0]
 801929e:	4a2b      	ldr	r2, [pc, #172]	; (801934c <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 80192a0:	4293      	cmp	r3, r2
 80192a2:	d027      	beq.n	80192f4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80192a4:	68fb      	ldr	r3, [r7, #12]
 80192a6:	681b      	ldr	r3, [r3, #0]
 80192a8:	4a29      	ldr	r2, [pc, #164]	; (8019350 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 80192aa:	4293      	cmp	r3, r2
 80192ac:	d022      	beq.n	80192f4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80192ae:	68fb      	ldr	r3, [r7, #12]
 80192b0:	681b      	ldr	r3, [r3, #0]
 80192b2:	4a28      	ldr	r2, [pc, #160]	; (8019354 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 80192b4:	4293      	cmp	r3, r2
 80192b6:	d01d      	beq.n	80192f4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80192b8:	68fb      	ldr	r3, [r7, #12]
 80192ba:	681b      	ldr	r3, [r3, #0]
 80192bc:	4a26      	ldr	r2, [pc, #152]	; (8019358 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 80192be:	4293      	cmp	r3, r2
 80192c0:	d018      	beq.n	80192f4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80192c2:	68fb      	ldr	r3, [r7, #12]
 80192c4:	681b      	ldr	r3, [r3, #0]
 80192c6:	4a25      	ldr	r2, [pc, #148]	; (801935c <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 80192c8:	4293      	cmp	r3, r2
 80192ca:	d013      	beq.n	80192f4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80192cc:	68fb      	ldr	r3, [r7, #12]
 80192ce:	681b      	ldr	r3, [r3, #0]
 80192d0:	4a23      	ldr	r2, [pc, #140]	; (8019360 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 80192d2:	4293      	cmp	r3, r2
 80192d4:	d00e      	beq.n	80192f4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80192d6:	68fb      	ldr	r3, [r7, #12]
 80192d8:	681b      	ldr	r3, [r3, #0]
 80192da:	4a22      	ldr	r2, [pc, #136]	; (8019364 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 80192dc:	4293      	cmp	r3, r2
 80192de:	d009      	beq.n	80192f4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80192e0:	68fb      	ldr	r3, [r7, #12]
 80192e2:	681b      	ldr	r3, [r3, #0]
 80192e4:	4a20      	ldr	r2, [pc, #128]	; (8019368 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 80192e6:	4293      	cmp	r3, r2
 80192e8:	d004      	beq.n	80192f4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80192ea:	68fb      	ldr	r3, [r7, #12]
 80192ec:	681b      	ldr	r3, [r3, #0]
 80192ee:	4a1f      	ldr	r2, [pc, #124]	; (801936c <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 80192f0:	4293      	cmp	r3, r2
 80192f2:	d108      	bne.n	8019306 <HAL_DMAEx_MultiBufferStart_IT+0x632>
 80192f4:	68fb      	ldr	r3, [r7, #12]
 80192f6:	681b      	ldr	r3, [r3, #0]
 80192f8:	681a      	ldr	r2, [r3, #0]
 80192fa:	68fb      	ldr	r3, [r7, #12]
 80192fc:	681b      	ldr	r3, [r3, #0]
 80192fe:	f042 0201 	orr.w	r2, r2, #1
 8019302:	601a      	str	r2, [r3, #0]
 8019304:	e00e      	b.n	8019324 <HAL_DMAEx_MultiBufferStart_IT+0x650>
 8019306:	68fb      	ldr	r3, [r7, #12]
 8019308:	681b      	ldr	r3, [r3, #0]
 801930a:	681a      	ldr	r2, [r3, #0]
 801930c:	68fb      	ldr	r3, [r7, #12]
 801930e:	681b      	ldr	r3, [r3, #0]
 8019310:	f042 0201 	orr.w	r2, r2, #1
 8019314:	601a      	str	r2, [r3, #0]
 8019316:	e005      	b.n	8019324 <HAL_DMAEx_MultiBufferStart_IT+0x650>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8019318:	68fb      	ldr	r3, [r7, #12]
 801931a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801931e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8019320:	2301      	movs	r3, #1
 8019322:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8019324:	7dfb      	ldrb	r3, [r7, #23]
}
 8019326:	4618      	mov	r0, r3
 8019328:	3718      	adds	r7, #24
 801932a:	46bd      	mov	sp, r7
 801932c:	bd80      	pop	{r7, pc}
 801932e:	bf00      	nop
 8019330:	40020010 	.word	0x40020010
 8019334:	40020028 	.word	0x40020028
 8019338:	40020040 	.word	0x40020040
 801933c:	40020058 	.word	0x40020058
 8019340:	40020070 	.word	0x40020070
 8019344:	40020088 	.word	0x40020088
 8019348:	400200a0 	.word	0x400200a0
 801934c:	400200b8 	.word	0x400200b8
 8019350:	40020410 	.word	0x40020410
 8019354:	40020428 	.word	0x40020428
 8019358:	40020440 	.word	0x40020440
 801935c:	40020458 	.word	0x40020458
 8019360:	40020470 	.word	0x40020470
 8019364:	40020488 	.word	0x40020488
 8019368:	400204a0 	.word	0x400204a0
 801936c:	400204b8 	.word	0x400204b8
 8019370:	58025408 	.word	0x58025408
 8019374:	5802541c 	.word	0x5802541c
 8019378:	58025430 	.word	0x58025430
 801937c:	58025444 	.word	0x58025444
 8019380:	58025458 	.word	0x58025458
 8019384:	5802546c 	.word	0x5802546c
 8019388:	58025480 	.word	0x58025480
 801938c:	58025494 	.word	0x58025494

08019390 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8019390:	b480      	push	{r7}
 8019392:	b085      	sub	sp, #20
 8019394:	af00      	add	r7, sp, #0
 8019396:	60f8      	str	r0, [r7, #12]
 8019398:	60b9      	str	r1, [r7, #8]
 801939a:	4613      	mov	r3, r2
 801939c:	71fb      	strb	r3, [r7, #7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801939e:	68fb      	ldr	r3, [r7, #12]
 80193a0:	681b      	ldr	r3, [r3, #0]
 80193a2:	4a39      	ldr	r2, [pc, #228]	; (8019488 <HAL_DMAEx_ChangeMemory+0xf8>)
 80193a4:	4293      	cmp	r3, r2
 80193a6:	d04a      	beq.n	801943e <HAL_DMAEx_ChangeMemory+0xae>
 80193a8:	68fb      	ldr	r3, [r7, #12]
 80193aa:	681b      	ldr	r3, [r3, #0]
 80193ac:	4a37      	ldr	r2, [pc, #220]	; (801948c <HAL_DMAEx_ChangeMemory+0xfc>)
 80193ae:	4293      	cmp	r3, r2
 80193b0:	d045      	beq.n	801943e <HAL_DMAEx_ChangeMemory+0xae>
 80193b2:	68fb      	ldr	r3, [r7, #12]
 80193b4:	681b      	ldr	r3, [r3, #0]
 80193b6:	4a36      	ldr	r2, [pc, #216]	; (8019490 <HAL_DMAEx_ChangeMemory+0x100>)
 80193b8:	4293      	cmp	r3, r2
 80193ba:	d040      	beq.n	801943e <HAL_DMAEx_ChangeMemory+0xae>
 80193bc:	68fb      	ldr	r3, [r7, #12]
 80193be:	681b      	ldr	r3, [r3, #0]
 80193c0:	4a34      	ldr	r2, [pc, #208]	; (8019494 <HAL_DMAEx_ChangeMemory+0x104>)
 80193c2:	4293      	cmp	r3, r2
 80193c4:	d03b      	beq.n	801943e <HAL_DMAEx_ChangeMemory+0xae>
 80193c6:	68fb      	ldr	r3, [r7, #12]
 80193c8:	681b      	ldr	r3, [r3, #0]
 80193ca:	4a33      	ldr	r2, [pc, #204]	; (8019498 <HAL_DMAEx_ChangeMemory+0x108>)
 80193cc:	4293      	cmp	r3, r2
 80193ce:	d036      	beq.n	801943e <HAL_DMAEx_ChangeMemory+0xae>
 80193d0:	68fb      	ldr	r3, [r7, #12]
 80193d2:	681b      	ldr	r3, [r3, #0]
 80193d4:	4a31      	ldr	r2, [pc, #196]	; (801949c <HAL_DMAEx_ChangeMemory+0x10c>)
 80193d6:	4293      	cmp	r3, r2
 80193d8:	d031      	beq.n	801943e <HAL_DMAEx_ChangeMemory+0xae>
 80193da:	68fb      	ldr	r3, [r7, #12]
 80193dc:	681b      	ldr	r3, [r3, #0]
 80193de:	4a30      	ldr	r2, [pc, #192]	; (80194a0 <HAL_DMAEx_ChangeMemory+0x110>)
 80193e0:	4293      	cmp	r3, r2
 80193e2:	d02c      	beq.n	801943e <HAL_DMAEx_ChangeMemory+0xae>
 80193e4:	68fb      	ldr	r3, [r7, #12]
 80193e6:	681b      	ldr	r3, [r3, #0]
 80193e8:	4a2e      	ldr	r2, [pc, #184]	; (80194a4 <HAL_DMAEx_ChangeMemory+0x114>)
 80193ea:	4293      	cmp	r3, r2
 80193ec:	d027      	beq.n	801943e <HAL_DMAEx_ChangeMemory+0xae>
 80193ee:	68fb      	ldr	r3, [r7, #12]
 80193f0:	681b      	ldr	r3, [r3, #0]
 80193f2:	4a2d      	ldr	r2, [pc, #180]	; (80194a8 <HAL_DMAEx_ChangeMemory+0x118>)
 80193f4:	4293      	cmp	r3, r2
 80193f6:	d022      	beq.n	801943e <HAL_DMAEx_ChangeMemory+0xae>
 80193f8:	68fb      	ldr	r3, [r7, #12]
 80193fa:	681b      	ldr	r3, [r3, #0]
 80193fc:	4a2b      	ldr	r2, [pc, #172]	; (80194ac <HAL_DMAEx_ChangeMemory+0x11c>)
 80193fe:	4293      	cmp	r3, r2
 8019400:	d01d      	beq.n	801943e <HAL_DMAEx_ChangeMemory+0xae>
 8019402:	68fb      	ldr	r3, [r7, #12]
 8019404:	681b      	ldr	r3, [r3, #0]
 8019406:	4a2a      	ldr	r2, [pc, #168]	; (80194b0 <HAL_DMAEx_ChangeMemory+0x120>)
 8019408:	4293      	cmp	r3, r2
 801940a:	d018      	beq.n	801943e <HAL_DMAEx_ChangeMemory+0xae>
 801940c:	68fb      	ldr	r3, [r7, #12]
 801940e:	681b      	ldr	r3, [r3, #0]
 8019410:	4a28      	ldr	r2, [pc, #160]	; (80194b4 <HAL_DMAEx_ChangeMemory+0x124>)
 8019412:	4293      	cmp	r3, r2
 8019414:	d013      	beq.n	801943e <HAL_DMAEx_ChangeMemory+0xae>
 8019416:	68fb      	ldr	r3, [r7, #12]
 8019418:	681b      	ldr	r3, [r3, #0]
 801941a:	4a27      	ldr	r2, [pc, #156]	; (80194b8 <HAL_DMAEx_ChangeMemory+0x128>)
 801941c:	4293      	cmp	r3, r2
 801941e:	d00e      	beq.n	801943e <HAL_DMAEx_ChangeMemory+0xae>
 8019420:	68fb      	ldr	r3, [r7, #12]
 8019422:	681b      	ldr	r3, [r3, #0]
 8019424:	4a25      	ldr	r2, [pc, #148]	; (80194bc <HAL_DMAEx_ChangeMemory+0x12c>)
 8019426:	4293      	cmp	r3, r2
 8019428:	d009      	beq.n	801943e <HAL_DMAEx_ChangeMemory+0xae>
 801942a:	68fb      	ldr	r3, [r7, #12]
 801942c:	681b      	ldr	r3, [r3, #0]
 801942e:	4a24      	ldr	r2, [pc, #144]	; (80194c0 <HAL_DMAEx_ChangeMemory+0x130>)
 8019430:	4293      	cmp	r3, r2
 8019432:	d004      	beq.n	801943e <HAL_DMAEx_ChangeMemory+0xae>
 8019434:	68fb      	ldr	r3, [r7, #12]
 8019436:	681b      	ldr	r3, [r3, #0]
 8019438:	4a22      	ldr	r2, [pc, #136]	; (80194c4 <HAL_DMAEx_ChangeMemory+0x134>)
 801943a:	4293      	cmp	r3, r2
 801943c:	d101      	bne.n	8019442 <HAL_DMAEx_ChangeMemory+0xb2>
 801943e:	2301      	movs	r3, #1
 8019440:	e000      	b.n	8019444 <HAL_DMAEx_ChangeMemory+0xb4>
 8019442:	2300      	movs	r3, #0
 8019444:	2b00      	cmp	r3, #0
 8019446:	d00c      	beq.n	8019462 <HAL_DMAEx_ChangeMemory+0xd2>
  {
    if(memory == MEMORY0)
 8019448:	79fb      	ldrb	r3, [r7, #7]
 801944a:	2b00      	cmp	r3, #0
 801944c:	d104      	bne.n	8019458 <HAL_DMAEx_ChangeMemory+0xc8>
    {
      /* change the memory0 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = Address;
 801944e:	68fb      	ldr	r3, [r7, #12]
 8019450:	681b      	ldr	r3, [r3, #0]
 8019452:	68ba      	ldr	r2, [r7, #8]
 8019454:	60da      	str	r2, [r3, #12]
 8019456:	e010      	b.n	801947a <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = Address;
 8019458:	68fb      	ldr	r3, [r7, #12]
 801945a:	681b      	ldr	r3, [r3, #0]
 801945c:	68ba      	ldr	r2, [r7, #8]
 801945e:	611a      	str	r2, [r3, #16]
 8019460:	e00b      	b.n	801947a <HAL_DMAEx_ChangeMemory+0xea>
    }
  }
  else /* BDMA instance(s) */
  {
    if(memory == MEMORY0)
 8019462:	79fb      	ldrb	r3, [r7, #7]
 8019464:	2b00      	cmp	r3, #0
 8019466:	d104      	bne.n	8019472 <HAL_DMAEx_ChangeMemory+0xe2>
    {
      /* change the memory0 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = Address;
 8019468:	68fb      	ldr	r3, [r7, #12]
 801946a:	681b      	ldr	r3, [r3, #0]
 801946c:	68ba      	ldr	r2, [r7, #8]
 801946e:	60da      	str	r2, [r3, #12]
 8019470:	e003      	b.n	801947a <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = Address;
 8019472:	68fb      	ldr	r3, [r7, #12]
 8019474:	681b      	ldr	r3, [r3, #0]
 8019476:	68ba      	ldr	r2, [r7, #8]
 8019478:	611a      	str	r2, [r3, #16]
    }
  }

  return HAL_OK;
 801947a:	2300      	movs	r3, #0
}
 801947c:	4618      	mov	r0, r3
 801947e:	3714      	adds	r7, #20
 8019480:	46bd      	mov	sp, r7
 8019482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019486:	4770      	bx	lr
 8019488:	40020010 	.word	0x40020010
 801948c:	40020028 	.word	0x40020028
 8019490:	40020040 	.word	0x40020040
 8019494:	40020058 	.word	0x40020058
 8019498:	40020070 	.word	0x40020070
 801949c:	40020088 	.word	0x40020088
 80194a0:	400200a0 	.word	0x400200a0
 80194a4:	400200b8 	.word	0x400200b8
 80194a8:	40020410 	.word	0x40020410
 80194ac:	40020428 	.word	0x40020428
 80194b0:	40020440 	.word	0x40020440
 80194b4:	40020458 	.word	0x40020458
 80194b8:	40020470 	.word	0x40020470
 80194bc:	40020488 	.word	0x40020488
 80194c0:	400204a0 	.word	0x400204a0
 80194c4:	400204b8 	.word	0x400204b8

080194c8 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80194c8:	b480      	push	{r7}
 80194ca:	b085      	sub	sp, #20
 80194cc:	af00      	add	r7, sp, #0
 80194ce:	60f8      	str	r0, [r7, #12]
 80194d0:	60b9      	str	r1, [r7, #8]
 80194d2:	607a      	str	r2, [r7, #4]
 80194d4:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80194d6:	68fb      	ldr	r3, [r7, #12]
 80194d8:	681b      	ldr	r3, [r3, #0]
 80194da:	4a46      	ldr	r2, [pc, #280]	; (80195f4 <DMA_MultiBufferSetConfig+0x12c>)
 80194dc:	4293      	cmp	r3, r2
 80194de:	d04a      	beq.n	8019576 <DMA_MultiBufferSetConfig+0xae>
 80194e0:	68fb      	ldr	r3, [r7, #12]
 80194e2:	681b      	ldr	r3, [r3, #0]
 80194e4:	4a44      	ldr	r2, [pc, #272]	; (80195f8 <DMA_MultiBufferSetConfig+0x130>)
 80194e6:	4293      	cmp	r3, r2
 80194e8:	d045      	beq.n	8019576 <DMA_MultiBufferSetConfig+0xae>
 80194ea:	68fb      	ldr	r3, [r7, #12]
 80194ec:	681b      	ldr	r3, [r3, #0]
 80194ee:	4a43      	ldr	r2, [pc, #268]	; (80195fc <DMA_MultiBufferSetConfig+0x134>)
 80194f0:	4293      	cmp	r3, r2
 80194f2:	d040      	beq.n	8019576 <DMA_MultiBufferSetConfig+0xae>
 80194f4:	68fb      	ldr	r3, [r7, #12]
 80194f6:	681b      	ldr	r3, [r3, #0]
 80194f8:	4a41      	ldr	r2, [pc, #260]	; (8019600 <DMA_MultiBufferSetConfig+0x138>)
 80194fa:	4293      	cmp	r3, r2
 80194fc:	d03b      	beq.n	8019576 <DMA_MultiBufferSetConfig+0xae>
 80194fe:	68fb      	ldr	r3, [r7, #12]
 8019500:	681b      	ldr	r3, [r3, #0]
 8019502:	4a40      	ldr	r2, [pc, #256]	; (8019604 <DMA_MultiBufferSetConfig+0x13c>)
 8019504:	4293      	cmp	r3, r2
 8019506:	d036      	beq.n	8019576 <DMA_MultiBufferSetConfig+0xae>
 8019508:	68fb      	ldr	r3, [r7, #12]
 801950a:	681b      	ldr	r3, [r3, #0]
 801950c:	4a3e      	ldr	r2, [pc, #248]	; (8019608 <DMA_MultiBufferSetConfig+0x140>)
 801950e:	4293      	cmp	r3, r2
 8019510:	d031      	beq.n	8019576 <DMA_MultiBufferSetConfig+0xae>
 8019512:	68fb      	ldr	r3, [r7, #12]
 8019514:	681b      	ldr	r3, [r3, #0]
 8019516:	4a3d      	ldr	r2, [pc, #244]	; (801960c <DMA_MultiBufferSetConfig+0x144>)
 8019518:	4293      	cmp	r3, r2
 801951a:	d02c      	beq.n	8019576 <DMA_MultiBufferSetConfig+0xae>
 801951c:	68fb      	ldr	r3, [r7, #12]
 801951e:	681b      	ldr	r3, [r3, #0]
 8019520:	4a3b      	ldr	r2, [pc, #236]	; (8019610 <DMA_MultiBufferSetConfig+0x148>)
 8019522:	4293      	cmp	r3, r2
 8019524:	d027      	beq.n	8019576 <DMA_MultiBufferSetConfig+0xae>
 8019526:	68fb      	ldr	r3, [r7, #12]
 8019528:	681b      	ldr	r3, [r3, #0]
 801952a:	4a3a      	ldr	r2, [pc, #232]	; (8019614 <DMA_MultiBufferSetConfig+0x14c>)
 801952c:	4293      	cmp	r3, r2
 801952e:	d022      	beq.n	8019576 <DMA_MultiBufferSetConfig+0xae>
 8019530:	68fb      	ldr	r3, [r7, #12]
 8019532:	681b      	ldr	r3, [r3, #0]
 8019534:	4a38      	ldr	r2, [pc, #224]	; (8019618 <DMA_MultiBufferSetConfig+0x150>)
 8019536:	4293      	cmp	r3, r2
 8019538:	d01d      	beq.n	8019576 <DMA_MultiBufferSetConfig+0xae>
 801953a:	68fb      	ldr	r3, [r7, #12]
 801953c:	681b      	ldr	r3, [r3, #0]
 801953e:	4a37      	ldr	r2, [pc, #220]	; (801961c <DMA_MultiBufferSetConfig+0x154>)
 8019540:	4293      	cmp	r3, r2
 8019542:	d018      	beq.n	8019576 <DMA_MultiBufferSetConfig+0xae>
 8019544:	68fb      	ldr	r3, [r7, #12]
 8019546:	681b      	ldr	r3, [r3, #0]
 8019548:	4a35      	ldr	r2, [pc, #212]	; (8019620 <DMA_MultiBufferSetConfig+0x158>)
 801954a:	4293      	cmp	r3, r2
 801954c:	d013      	beq.n	8019576 <DMA_MultiBufferSetConfig+0xae>
 801954e:	68fb      	ldr	r3, [r7, #12]
 8019550:	681b      	ldr	r3, [r3, #0]
 8019552:	4a34      	ldr	r2, [pc, #208]	; (8019624 <DMA_MultiBufferSetConfig+0x15c>)
 8019554:	4293      	cmp	r3, r2
 8019556:	d00e      	beq.n	8019576 <DMA_MultiBufferSetConfig+0xae>
 8019558:	68fb      	ldr	r3, [r7, #12]
 801955a:	681b      	ldr	r3, [r3, #0]
 801955c:	4a32      	ldr	r2, [pc, #200]	; (8019628 <DMA_MultiBufferSetConfig+0x160>)
 801955e:	4293      	cmp	r3, r2
 8019560:	d009      	beq.n	8019576 <DMA_MultiBufferSetConfig+0xae>
 8019562:	68fb      	ldr	r3, [r7, #12]
 8019564:	681b      	ldr	r3, [r3, #0]
 8019566:	4a31      	ldr	r2, [pc, #196]	; (801962c <DMA_MultiBufferSetConfig+0x164>)
 8019568:	4293      	cmp	r3, r2
 801956a:	d004      	beq.n	8019576 <DMA_MultiBufferSetConfig+0xae>
 801956c:	68fb      	ldr	r3, [r7, #12]
 801956e:	681b      	ldr	r3, [r3, #0]
 8019570:	4a2f      	ldr	r2, [pc, #188]	; (8019630 <DMA_MultiBufferSetConfig+0x168>)
 8019572:	4293      	cmp	r3, r2
 8019574:	d101      	bne.n	801957a <DMA_MultiBufferSetConfig+0xb2>
 8019576:	2301      	movs	r3, #1
 8019578:	e000      	b.n	801957c <DMA_MultiBufferSetConfig+0xb4>
 801957a:	2300      	movs	r3, #0
 801957c:	2b00      	cmp	r3, #0
 801957e:	d019      	beq.n	80195b4 <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 8019580:	68fb      	ldr	r3, [r7, #12]
 8019582:	681b      	ldr	r3, [r3, #0]
 8019584:	683a      	ldr	r2, [r7, #0]
 8019586:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8019588:	68fb      	ldr	r3, [r7, #12]
 801958a:	689b      	ldr	r3, [r3, #8]
 801958c:	2b40      	cmp	r3, #64	; 0x40
 801958e:	d108      	bne.n	80195a2 <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
 8019590:	68fb      	ldr	r3, [r7, #12]
 8019592:	681b      	ldr	r3, [r3, #0]
 8019594:	687a      	ldr	r2, [r7, #4]
 8019596:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
 8019598:	68fb      	ldr	r3, [r7, #12]
 801959a:	681b      	ldr	r3, [r3, #0]
 801959c:	68ba      	ldr	r2, [r7, #8]
 801959e:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
 80195a0:	e021      	b.n	80195e6 <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
 80195a2:	68fb      	ldr	r3, [r7, #12]
 80195a4:	681b      	ldr	r3, [r3, #0]
 80195a6:	68ba      	ldr	r2, [r7, #8]
 80195a8:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
 80195aa:	68fb      	ldr	r3, [r7, #12]
 80195ac:	681b      	ldr	r3, [r3, #0]
 80195ae:	687a      	ldr	r2, [r7, #4]
 80195b0:	60da      	str	r2, [r3, #12]
}
 80195b2:	e018      	b.n	80195e6 <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
 80195b4:	68fb      	ldr	r3, [r7, #12]
 80195b6:	681b      	ldr	r3, [r3, #0]
 80195b8:	683a      	ldr	r2, [r7, #0]
 80195ba:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80195bc:	68fb      	ldr	r3, [r7, #12]
 80195be:	689b      	ldr	r3, [r3, #8]
 80195c0:	2b40      	cmp	r3, #64	; 0x40
 80195c2:	d108      	bne.n	80195d6 <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 80195c4:	68fb      	ldr	r3, [r7, #12]
 80195c6:	681b      	ldr	r3, [r3, #0]
 80195c8:	687a      	ldr	r2, [r7, #4]
 80195ca:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 80195cc:	68fb      	ldr	r3, [r7, #12]
 80195ce:	681b      	ldr	r3, [r3, #0]
 80195d0:	68ba      	ldr	r2, [r7, #8]
 80195d2:	60da      	str	r2, [r3, #12]
}
 80195d4:	e007      	b.n	80195e6 <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 80195d6:	68fb      	ldr	r3, [r7, #12]
 80195d8:	681b      	ldr	r3, [r3, #0]
 80195da:	68ba      	ldr	r2, [r7, #8]
 80195dc:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 80195de:	68fb      	ldr	r3, [r7, #12]
 80195e0:	681b      	ldr	r3, [r3, #0]
 80195e2:	687a      	ldr	r2, [r7, #4]
 80195e4:	60da      	str	r2, [r3, #12]
}
 80195e6:	bf00      	nop
 80195e8:	3714      	adds	r7, #20
 80195ea:	46bd      	mov	sp, r7
 80195ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195f0:	4770      	bx	lr
 80195f2:	bf00      	nop
 80195f4:	40020010 	.word	0x40020010
 80195f8:	40020028 	.word	0x40020028
 80195fc:	40020040 	.word	0x40020040
 8019600:	40020058 	.word	0x40020058
 8019604:	40020070 	.word	0x40020070
 8019608:	40020088 	.word	0x40020088
 801960c:	400200a0 	.word	0x400200a0
 8019610:	400200b8 	.word	0x400200b8
 8019614:	40020410 	.word	0x40020410
 8019618:	40020428 	.word	0x40020428
 801961c:	40020440 	.word	0x40020440
 8019620:	40020458 	.word	0x40020458
 8019624:	40020470 	.word	0x40020470
 8019628:	40020488 	.word	0x40020488
 801962c:	400204a0 	.word	0x400204a0
 8019630:	400204b8 	.word	0x400204b8

08019634 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8019634:	b480      	push	{r7}
 8019636:	b089      	sub	sp, #36	; 0x24
 8019638:	af00      	add	r7, sp, #0
 801963a:	6078      	str	r0, [r7, #4]
 801963c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 801963e:	2300      	movs	r3, #0
 8019640:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8019642:	4b89      	ldr	r3, [pc, #548]	; (8019868 <HAL_GPIO_Init+0x234>)
 8019644:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8019646:	e194      	b.n	8019972 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8019648:	683b      	ldr	r3, [r7, #0]
 801964a:	681a      	ldr	r2, [r3, #0]
 801964c:	2101      	movs	r1, #1
 801964e:	69fb      	ldr	r3, [r7, #28]
 8019650:	fa01 f303 	lsl.w	r3, r1, r3
 8019654:	4013      	ands	r3, r2
 8019656:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8019658:	693b      	ldr	r3, [r7, #16]
 801965a:	2b00      	cmp	r3, #0
 801965c:	f000 8186 	beq.w	801996c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8019660:	683b      	ldr	r3, [r7, #0]
 8019662:	685b      	ldr	r3, [r3, #4]
 8019664:	f003 0303 	and.w	r3, r3, #3
 8019668:	2b01      	cmp	r3, #1
 801966a:	d005      	beq.n	8019678 <HAL_GPIO_Init+0x44>
 801966c:	683b      	ldr	r3, [r7, #0]
 801966e:	685b      	ldr	r3, [r3, #4]
 8019670:	f003 0303 	and.w	r3, r3, #3
 8019674:	2b02      	cmp	r3, #2
 8019676:	d130      	bne.n	80196da <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8019678:	687b      	ldr	r3, [r7, #4]
 801967a:	689b      	ldr	r3, [r3, #8]
 801967c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 801967e:	69fb      	ldr	r3, [r7, #28]
 8019680:	005b      	lsls	r3, r3, #1
 8019682:	2203      	movs	r2, #3
 8019684:	fa02 f303 	lsl.w	r3, r2, r3
 8019688:	43db      	mvns	r3, r3
 801968a:	69ba      	ldr	r2, [r7, #24]
 801968c:	4013      	ands	r3, r2
 801968e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8019690:	683b      	ldr	r3, [r7, #0]
 8019692:	68da      	ldr	r2, [r3, #12]
 8019694:	69fb      	ldr	r3, [r7, #28]
 8019696:	005b      	lsls	r3, r3, #1
 8019698:	fa02 f303 	lsl.w	r3, r2, r3
 801969c:	69ba      	ldr	r2, [r7, #24]
 801969e:	4313      	orrs	r3, r2
 80196a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80196a2:	687b      	ldr	r3, [r7, #4]
 80196a4:	69ba      	ldr	r2, [r7, #24]
 80196a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80196a8:	687b      	ldr	r3, [r7, #4]
 80196aa:	685b      	ldr	r3, [r3, #4]
 80196ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80196ae:	2201      	movs	r2, #1
 80196b0:	69fb      	ldr	r3, [r7, #28]
 80196b2:	fa02 f303 	lsl.w	r3, r2, r3
 80196b6:	43db      	mvns	r3, r3
 80196b8:	69ba      	ldr	r2, [r7, #24]
 80196ba:	4013      	ands	r3, r2
 80196bc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80196be:	683b      	ldr	r3, [r7, #0]
 80196c0:	685b      	ldr	r3, [r3, #4]
 80196c2:	091b      	lsrs	r3, r3, #4
 80196c4:	f003 0201 	and.w	r2, r3, #1
 80196c8:	69fb      	ldr	r3, [r7, #28]
 80196ca:	fa02 f303 	lsl.w	r3, r2, r3
 80196ce:	69ba      	ldr	r2, [r7, #24]
 80196d0:	4313      	orrs	r3, r2
 80196d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80196d4:	687b      	ldr	r3, [r7, #4]
 80196d6:	69ba      	ldr	r2, [r7, #24]
 80196d8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80196da:	683b      	ldr	r3, [r7, #0]
 80196dc:	685b      	ldr	r3, [r3, #4]
 80196de:	f003 0303 	and.w	r3, r3, #3
 80196e2:	2b03      	cmp	r3, #3
 80196e4:	d017      	beq.n	8019716 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80196e6:	687b      	ldr	r3, [r7, #4]
 80196e8:	68db      	ldr	r3, [r3, #12]
 80196ea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80196ec:	69fb      	ldr	r3, [r7, #28]
 80196ee:	005b      	lsls	r3, r3, #1
 80196f0:	2203      	movs	r2, #3
 80196f2:	fa02 f303 	lsl.w	r3, r2, r3
 80196f6:	43db      	mvns	r3, r3
 80196f8:	69ba      	ldr	r2, [r7, #24]
 80196fa:	4013      	ands	r3, r2
 80196fc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80196fe:	683b      	ldr	r3, [r7, #0]
 8019700:	689a      	ldr	r2, [r3, #8]
 8019702:	69fb      	ldr	r3, [r7, #28]
 8019704:	005b      	lsls	r3, r3, #1
 8019706:	fa02 f303 	lsl.w	r3, r2, r3
 801970a:	69ba      	ldr	r2, [r7, #24]
 801970c:	4313      	orrs	r3, r2
 801970e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8019710:	687b      	ldr	r3, [r7, #4]
 8019712:	69ba      	ldr	r2, [r7, #24]
 8019714:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8019716:	683b      	ldr	r3, [r7, #0]
 8019718:	685b      	ldr	r3, [r3, #4]
 801971a:	f003 0303 	and.w	r3, r3, #3
 801971e:	2b02      	cmp	r3, #2
 8019720:	d123      	bne.n	801976a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8019722:	69fb      	ldr	r3, [r7, #28]
 8019724:	08da      	lsrs	r2, r3, #3
 8019726:	687b      	ldr	r3, [r7, #4]
 8019728:	3208      	adds	r2, #8
 801972a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801972e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8019730:	69fb      	ldr	r3, [r7, #28]
 8019732:	f003 0307 	and.w	r3, r3, #7
 8019736:	009b      	lsls	r3, r3, #2
 8019738:	220f      	movs	r2, #15
 801973a:	fa02 f303 	lsl.w	r3, r2, r3
 801973e:	43db      	mvns	r3, r3
 8019740:	69ba      	ldr	r2, [r7, #24]
 8019742:	4013      	ands	r3, r2
 8019744:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8019746:	683b      	ldr	r3, [r7, #0]
 8019748:	691a      	ldr	r2, [r3, #16]
 801974a:	69fb      	ldr	r3, [r7, #28]
 801974c:	f003 0307 	and.w	r3, r3, #7
 8019750:	009b      	lsls	r3, r3, #2
 8019752:	fa02 f303 	lsl.w	r3, r2, r3
 8019756:	69ba      	ldr	r2, [r7, #24]
 8019758:	4313      	orrs	r3, r2
 801975a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 801975c:	69fb      	ldr	r3, [r7, #28]
 801975e:	08da      	lsrs	r2, r3, #3
 8019760:	687b      	ldr	r3, [r7, #4]
 8019762:	3208      	adds	r2, #8
 8019764:	69b9      	ldr	r1, [r7, #24]
 8019766:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801976a:	687b      	ldr	r3, [r7, #4]
 801976c:	681b      	ldr	r3, [r3, #0]
 801976e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8019770:	69fb      	ldr	r3, [r7, #28]
 8019772:	005b      	lsls	r3, r3, #1
 8019774:	2203      	movs	r2, #3
 8019776:	fa02 f303 	lsl.w	r3, r2, r3
 801977a:	43db      	mvns	r3, r3
 801977c:	69ba      	ldr	r2, [r7, #24]
 801977e:	4013      	ands	r3, r2
 8019780:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8019782:	683b      	ldr	r3, [r7, #0]
 8019784:	685b      	ldr	r3, [r3, #4]
 8019786:	f003 0203 	and.w	r2, r3, #3
 801978a:	69fb      	ldr	r3, [r7, #28]
 801978c:	005b      	lsls	r3, r3, #1
 801978e:	fa02 f303 	lsl.w	r3, r2, r3
 8019792:	69ba      	ldr	r2, [r7, #24]
 8019794:	4313      	orrs	r3, r2
 8019796:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8019798:	687b      	ldr	r3, [r7, #4]
 801979a:	69ba      	ldr	r2, [r7, #24]
 801979c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 801979e:	683b      	ldr	r3, [r7, #0]
 80197a0:	685b      	ldr	r3, [r3, #4]
 80197a2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80197a6:	2b00      	cmp	r3, #0
 80197a8:	f000 80e0 	beq.w	801996c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80197ac:	4b2f      	ldr	r3, [pc, #188]	; (801986c <HAL_GPIO_Init+0x238>)
 80197ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80197b2:	4a2e      	ldr	r2, [pc, #184]	; (801986c <HAL_GPIO_Init+0x238>)
 80197b4:	f043 0302 	orr.w	r3, r3, #2
 80197b8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80197bc:	4b2b      	ldr	r3, [pc, #172]	; (801986c <HAL_GPIO_Init+0x238>)
 80197be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80197c2:	f003 0302 	and.w	r3, r3, #2
 80197c6:	60fb      	str	r3, [r7, #12]
 80197c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80197ca:	4a29      	ldr	r2, [pc, #164]	; (8019870 <HAL_GPIO_Init+0x23c>)
 80197cc:	69fb      	ldr	r3, [r7, #28]
 80197ce:	089b      	lsrs	r3, r3, #2
 80197d0:	3302      	adds	r3, #2
 80197d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80197d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80197d8:	69fb      	ldr	r3, [r7, #28]
 80197da:	f003 0303 	and.w	r3, r3, #3
 80197de:	009b      	lsls	r3, r3, #2
 80197e0:	220f      	movs	r2, #15
 80197e2:	fa02 f303 	lsl.w	r3, r2, r3
 80197e6:	43db      	mvns	r3, r3
 80197e8:	69ba      	ldr	r2, [r7, #24]
 80197ea:	4013      	ands	r3, r2
 80197ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80197ee:	687b      	ldr	r3, [r7, #4]
 80197f0:	4a20      	ldr	r2, [pc, #128]	; (8019874 <HAL_GPIO_Init+0x240>)
 80197f2:	4293      	cmp	r3, r2
 80197f4:	d052      	beq.n	801989c <HAL_GPIO_Init+0x268>
 80197f6:	687b      	ldr	r3, [r7, #4]
 80197f8:	4a1f      	ldr	r2, [pc, #124]	; (8019878 <HAL_GPIO_Init+0x244>)
 80197fa:	4293      	cmp	r3, r2
 80197fc:	d031      	beq.n	8019862 <HAL_GPIO_Init+0x22e>
 80197fe:	687b      	ldr	r3, [r7, #4]
 8019800:	4a1e      	ldr	r2, [pc, #120]	; (801987c <HAL_GPIO_Init+0x248>)
 8019802:	4293      	cmp	r3, r2
 8019804:	d02b      	beq.n	801985e <HAL_GPIO_Init+0x22a>
 8019806:	687b      	ldr	r3, [r7, #4]
 8019808:	4a1d      	ldr	r2, [pc, #116]	; (8019880 <HAL_GPIO_Init+0x24c>)
 801980a:	4293      	cmp	r3, r2
 801980c:	d025      	beq.n	801985a <HAL_GPIO_Init+0x226>
 801980e:	687b      	ldr	r3, [r7, #4]
 8019810:	4a1c      	ldr	r2, [pc, #112]	; (8019884 <HAL_GPIO_Init+0x250>)
 8019812:	4293      	cmp	r3, r2
 8019814:	d01f      	beq.n	8019856 <HAL_GPIO_Init+0x222>
 8019816:	687b      	ldr	r3, [r7, #4]
 8019818:	4a1b      	ldr	r2, [pc, #108]	; (8019888 <HAL_GPIO_Init+0x254>)
 801981a:	4293      	cmp	r3, r2
 801981c:	d019      	beq.n	8019852 <HAL_GPIO_Init+0x21e>
 801981e:	687b      	ldr	r3, [r7, #4]
 8019820:	4a1a      	ldr	r2, [pc, #104]	; (801988c <HAL_GPIO_Init+0x258>)
 8019822:	4293      	cmp	r3, r2
 8019824:	d013      	beq.n	801984e <HAL_GPIO_Init+0x21a>
 8019826:	687b      	ldr	r3, [r7, #4]
 8019828:	4a19      	ldr	r2, [pc, #100]	; (8019890 <HAL_GPIO_Init+0x25c>)
 801982a:	4293      	cmp	r3, r2
 801982c:	d00d      	beq.n	801984a <HAL_GPIO_Init+0x216>
 801982e:	687b      	ldr	r3, [r7, #4]
 8019830:	4a18      	ldr	r2, [pc, #96]	; (8019894 <HAL_GPIO_Init+0x260>)
 8019832:	4293      	cmp	r3, r2
 8019834:	d007      	beq.n	8019846 <HAL_GPIO_Init+0x212>
 8019836:	687b      	ldr	r3, [r7, #4]
 8019838:	4a17      	ldr	r2, [pc, #92]	; (8019898 <HAL_GPIO_Init+0x264>)
 801983a:	4293      	cmp	r3, r2
 801983c:	d101      	bne.n	8019842 <HAL_GPIO_Init+0x20e>
 801983e:	2309      	movs	r3, #9
 8019840:	e02d      	b.n	801989e <HAL_GPIO_Init+0x26a>
 8019842:	230a      	movs	r3, #10
 8019844:	e02b      	b.n	801989e <HAL_GPIO_Init+0x26a>
 8019846:	2308      	movs	r3, #8
 8019848:	e029      	b.n	801989e <HAL_GPIO_Init+0x26a>
 801984a:	2307      	movs	r3, #7
 801984c:	e027      	b.n	801989e <HAL_GPIO_Init+0x26a>
 801984e:	2306      	movs	r3, #6
 8019850:	e025      	b.n	801989e <HAL_GPIO_Init+0x26a>
 8019852:	2305      	movs	r3, #5
 8019854:	e023      	b.n	801989e <HAL_GPIO_Init+0x26a>
 8019856:	2304      	movs	r3, #4
 8019858:	e021      	b.n	801989e <HAL_GPIO_Init+0x26a>
 801985a:	2303      	movs	r3, #3
 801985c:	e01f      	b.n	801989e <HAL_GPIO_Init+0x26a>
 801985e:	2302      	movs	r3, #2
 8019860:	e01d      	b.n	801989e <HAL_GPIO_Init+0x26a>
 8019862:	2301      	movs	r3, #1
 8019864:	e01b      	b.n	801989e <HAL_GPIO_Init+0x26a>
 8019866:	bf00      	nop
 8019868:	58000080 	.word	0x58000080
 801986c:	58024400 	.word	0x58024400
 8019870:	58000400 	.word	0x58000400
 8019874:	58020000 	.word	0x58020000
 8019878:	58020400 	.word	0x58020400
 801987c:	58020800 	.word	0x58020800
 8019880:	58020c00 	.word	0x58020c00
 8019884:	58021000 	.word	0x58021000
 8019888:	58021400 	.word	0x58021400
 801988c:	58021800 	.word	0x58021800
 8019890:	58021c00 	.word	0x58021c00
 8019894:	58022000 	.word	0x58022000
 8019898:	58022400 	.word	0x58022400
 801989c:	2300      	movs	r3, #0
 801989e:	69fa      	ldr	r2, [r7, #28]
 80198a0:	f002 0203 	and.w	r2, r2, #3
 80198a4:	0092      	lsls	r2, r2, #2
 80198a6:	4093      	lsls	r3, r2
 80198a8:	69ba      	ldr	r2, [r7, #24]
 80198aa:	4313      	orrs	r3, r2
 80198ac:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80198ae:	4938      	ldr	r1, [pc, #224]	; (8019990 <HAL_GPIO_Init+0x35c>)
 80198b0:	69fb      	ldr	r3, [r7, #28]
 80198b2:	089b      	lsrs	r3, r3, #2
 80198b4:	3302      	adds	r3, #2
 80198b6:	69ba      	ldr	r2, [r7, #24]
 80198b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80198bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80198c0:	681b      	ldr	r3, [r3, #0]
 80198c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80198c4:	693b      	ldr	r3, [r7, #16]
 80198c6:	43db      	mvns	r3, r3
 80198c8:	69ba      	ldr	r2, [r7, #24]
 80198ca:	4013      	ands	r3, r2
 80198cc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80198ce:	683b      	ldr	r3, [r7, #0]
 80198d0:	685b      	ldr	r3, [r3, #4]
 80198d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80198d6:	2b00      	cmp	r3, #0
 80198d8:	d003      	beq.n	80198e2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80198da:	69ba      	ldr	r2, [r7, #24]
 80198dc:	693b      	ldr	r3, [r7, #16]
 80198de:	4313      	orrs	r3, r2
 80198e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80198e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80198e6:	69bb      	ldr	r3, [r7, #24]
 80198e8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80198ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80198ee:	685b      	ldr	r3, [r3, #4]
 80198f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80198f2:	693b      	ldr	r3, [r7, #16]
 80198f4:	43db      	mvns	r3, r3
 80198f6:	69ba      	ldr	r2, [r7, #24]
 80198f8:	4013      	ands	r3, r2
 80198fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80198fc:	683b      	ldr	r3, [r7, #0]
 80198fe:	685b      	ldr	r3, [r3, #4]
 8019900:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8019904:	2b00      	cmp	r3, #0
 8019906:	d003      	beq.n	8019910 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8019908:	69ba      	ldr	r2, [r7, #24]
 801990a:	693b      	ldr	r3, [r7, #16]
 801990c:	4313      	orrs	r3, r2
 801990e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8019910:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8019914:	69bb      	ldr	r3, [r7, #24]
 8019916:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8019918:	697b      	ldr	r3, [r7, #20]
 801991a:	685b      	ldr	r3, [r3, #4]
 801991c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801991e:	693b      	ldr	r3, [r7, #16]
 8019920:	43db      	mvns	r3, r3
 8019922:	69ba      	ldr	r2, [r7, #24]
 8019924:	4013      	ands	r3, r2
 8019926:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8019928:	683b      	ldr	r3, [r7, #0]
 801992a:	685b      	ldr	r3, [r3, #4]
 801992c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8019930:	2b00      	cmp	r3, #0
 8019932:	d003      	beq.n	801993c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8019934:	69ba      	ldr	r2, [r7, #24]
 8019936:	693b      	ldr	r3, [r7, #16]
 8019938:	4313      	orrs	r3, r2
 801993a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 801993c:	697b      	ldr	r3, [r7, #20]
 801993e:	69ba      	ldr	r2, [r7, #24]
 8019940:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8019942:	697b      	ldr	r3, [r7, #20]
 8019944:	681b      	ldr	r3, [r3, #0]
 8019946:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8019948:	693b      	ldr	r3, [r7, #16]
 801994a:	43db      	mvns	r3, r3
 801994c:	69ba      	ldr	r2, [r7, #24]
 801994e:	4013      	ands	r3, r2
 8019950:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8019952:	683b      	ldr	r3, [r7, #0]
 8019954:	685b      	ldr	r3, [r3, #4]
 8019956:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801995a:	2b00      	cmp	r3, #0
 801995c:	d003      	beq.n	8019966 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 801995e:	69ba      	ldr	r2, [r7, #24]
 8019960:	693b      	ldr	r3, [r7, #16]
 8019962:	4313      	orrs	r3, r2
 8019964:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8019966:	697b      	ldr	r3, [r7, #20]
 8019968:	69ba      	ldr	r2, [r7, #24]
 801996a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 801996c:	69fb      	ldr	r3, [r7, #28]
 801996e:	3301      	adds	r3, #1
 8019970:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8019972:	683b      	ldr	r3, [r7, #0]
 8019974:	681a      	ldr	r2, [r3, #0]
 8019976:	69fb      	ldr	r3, [r7, #28]
 8019978:	fa22 f303 	lsr.w	r3, r2, r3
 801997c:	2b00      	cmp	r3, #0
 801997e:	f47f ae63 	bne.w	8019648 <HAL_GPIO_Init+0x14>
  }
}
 8019982:	bf00      	nop
 8019984:	bf00      	nop
 8019986:	3724      	adds	r7, #36	; 0x24
 8019988:	46bd      	mov	sp, r7
 801998a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801998e:	4770      	bx	lr
 8019990:	58000400 	.word	0x58000400

08019994 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8019994:	b480      	push	{r7}
 8019996:	b083      	sub	sp, #12
 8019998:	af00      	add	r7, sp, #0
 801999a:	6078      	str	r0, [r7, #4]
 801999c:	460b      	mov	r3, r1
 801999e:	807b      	strh	r3, [r7, #2]
 80199a0:	4613      	mov	r3, r2
 80199a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80199a4:	787b      	ldrb	r3, [r7, #1]
 80199a6:	2b00      	cmp	r3, #0
 80199a8:	d003      	beq.n	80199b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80199aa:	887a      	ldrh	r2, [r7, #2]
 80199ac:	687b      	ldr	r3, [r7, #4]
 80199ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80199b0:	e003      	b.n	80199ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80199b2:	887b      	ldrh	r3, [r7, #2]
 80199b4:	041a      	lsls	r2, r3, #16
 80199b6:	687b      	ldr	r3, [r7, #4]
 80199b8:	619a      	str	r2, [r3, #24]
}
 80199ba:	bf00      	nop
 80199bc:	370c      	adds	r7, #12
 80199be:	46bd      	mov	sp, r7
 80199c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199c4:	4770      	bx	lr

080199c6 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80199c6:	b580      	push	{r7, lr}
 80199c8:	b082      	sub	sp, #8
 80199ca:	af00      	add	r7, sp, #0
 80199cc:	4603      	mov	r3, r0
 80199ce:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80199d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80199d4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80199d8:	88fb      	ldrh	r3, [r7, #6]
 80199da:	4013      	ands	r3, r2
 80199dc:	2b00      	cmp	r3, #0
 80199de:	d008      	beq.n	80199f2 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80199e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80199e4:	88fb      	ldrh	r3, [r7, #6]
 80199e6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80199ea:	88fb      	ldrh	r3, [r7, #6]
 80199ec:	4618      	mov	r0, r3
 80199ee:	f7e7 fa99 	bl	8000f24 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80199f2:	bf00      	nop
 80199f4:	3708      	adds	r7, #8
 80199f6:	46bd      	mov	sp, r7
 80199f8:	bd80      	pop	{r7, pc}
	...

080199fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80199fc:	b580      	push	{r7, lr}
 80199fe:	b082      	sub	sp, #8
 8019a00:	af00      	add	r7, sp, #0
 8019a02:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8019a04:	687b      	ldr	r3, [r7, #4]
 8019a06:	2b00      	cmp	r3, #0
 8019a08:	d101      	bne.n	8019a0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8019a0a:	2301      	movs	r3, #1
 8019a0c:	e07f      	b.n	8019b0e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8019a0e:	687b      	ldr	r3, [r7, #4]
 8019a10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8019a14:	b2db      	uxtb	r3, r3
 8019a16:	2b00      	cmp	r3, #0
 8019a18:	d106      	bne.n	8019a28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8019a1a:	687b      	ldr	r3, [r7, #4]
 8019a1c:	2200      	movs	r2, #0
 8019a1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8019a22:	6878      	ldr	r0, [r7, #4]
 8019a24:	f7fb fde2 	bl	80155ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8019a28:	687b      	ldr	r3, [r7, #4]
 8019a2a:	2224      	movs	r2, #36	; 0x24
 8019a2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8019a30:	687b      	ldr	r3, [r7, #4]
 8019a32:	681b      	ldr	r3, [r3, #0]
 8019a34:	681a      	ldr	r2, [r3, #0]
 8019a36:	687b      	ldr	r3, [r7, #4]
 8019a38:	681b      	ldr	r3, [r3, #0]
 8019a3a:	f022 0201 	bic.w	r2, r2, #1
 8019a3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8019a40:	687b      	ldr	r3, [r7, #4]
 8019a42:	685a      	ldr	r2, [r3, #4]
 8019a44:	687b      	ldr	r3, [r7, #4]
 8019a46:	681b      	ldr	r3, [r3, #0]
 8019a48:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8019a4c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8019a4e:	687b      	ldr	r3, [r7, #4]
 8019a50:	681b      	ldr	r3, [r3, #0]
 8019a52:	689a      	ldr	r2, [r3, #8]
 8019a54:	687b      	ldr	r3, [r7, #4]
 8019a56:	681b      	ldr	r3, [r3, #0]
 8019a58:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8019a5c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8019a5e:	687b      	ldr	r3, [r7, #4]
 8019a60:	68db      	ldr	r3, [r3, #12]
 8019a62:	2b01      	cmp	r3, #1
 8019a64:	d107      	bne.n	8019a76 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8019a66:	687b      	ldr	r3, [r7, #4]
 8019a68:	689a      	ldr	r2, [r3, #8]
 8019a6a:	687b      	ldr	r3, [r7, #4]
 8019a6c:	681b      	ldr	r3, [r3, #0]
 8019a6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8019a72:	609a      	str	r2, [r3, #8]
 8019a74:	e006      	b.n	8019a84 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8019a76:	687b      	ldr	r3, [r7, #4]
 8019a78:	689a      	ldr	r2, [r3, #8]
 8019a7a:	687b      	ldr	r3, [r7, #4]
 8019a7c:	681b      	ldr	r3, [r3, #0]
 8019a7e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8019a82:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8019a84:	687b      	ldr	r3, [r7, #4]
 8019a86:	68db      	ldr	r3, [r3, #12]
 8019a88:	2b02      	cmp	r3, #2
 8019a8a:	d104      	bne.n	8019a96 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8019a8c:	687b      	ldr	r3, [r7, #4]
 8019a8e:	681b      	ldr	r3, [r3, #0]
 8019a90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8019a94:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8019a96:	687b      	ldr	r3, [r7, #4]
 8019a98:	681b      	ldr	r3, [r3, #0]
 8019a9a:	6859      	ldr	r1, [r3, #4]
 8019a9c:	687b      	ldr	r3, [r7, #4]
 8019a9e:	681a      	ldr	r2, [r3, #0]
 8019aa0:	4b1d      	ldr	r3, [pc, #116]	; (8019b18 <HAL_I2C_Init+0x11c>)
 8019aa2:	430b      	orrs	r3, r1
 8019aa4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8019aa6:	687b      	ldr	r3, [r7, #4]
 8019aa8:	681b      	ldr	r3, [r3, #0]
 8019aaa:	68da      	ldr	r2, [r3, #12]
 8019aac:	687b      	ldr	r3, [r7, #4]
 8019aae:	681b      	ldr	r3, [r3, #0]
 8019ab0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8019ab4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8019ab6:	687b      	ldr	r3, [r7, #4]
 8019ab8:	691a      	ldr	r2, [r3, #16]
 8019aba:	687b      	ldr	r3, [r7, #4]
 8019abc:	695b      	ldr	r3, [r3, #20]
 8019abe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8019ac2:	687b      	ldr	r3, [r7, #4]
 8019ac4:	699b      	ldr	r3, [r3, #24]
 8019ac6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8019ac8:	687b      	ldr	r3, [r7, #4]
 8019aca:	681b      	ldr	r3, [r3, #0]
 8019acc:	430a      	orrs	r2, r1
 8019ace:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8019ad0:	687b      	ldr	r3, [r7, #4]
 8019ad2:	69d9      	ldr	r1, [r3, #28]
 8019ad4:	687b      	ldr	r3, [r7, #4]
 8019ad6:	6a1a      	ldr	r2, [r3, #32]
 8019ad8:	687b      	ldr	r3, [r7, #4]
 8019ada:	681b      	ldr	r3, [r3, #0]
 8019adc:	430a      	orrs	r2, r1
 8019ade:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8019ae0:	687b      	ldr	r3, [r7, #4]
 8019ae2:	681b      	ldr	r3, [r3, #0]
 8019ae4:	681a      	ldr	r2, [r3, #0]
 8019ae6:	687b      	ldr	r3, [r7, #4]
 8019ae8:	681b      	ldr	r3, [r3, #0]
 8019aea:	f042 0201 	orr.w	r2, r2, #1
 8019aee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8019af0:	687b      	ldr	r3, [r7, #4]
 8019af2:	2200      	movs	r2, #0
 8019af4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8019af6:	687b      	ldr	r3, [r7, #4]
 8019af8:	2220      	movs	r2, #32
 8019afa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8019afe:	687b      	ldr	r3, [r7, #4]
 8019b00:	2200      	movs	r2, #0
 8019b02:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8019b04:	687b      	ldr	r3, [r7, #4]
 8019b06:	2200      	movs	r2, #0
 8019b08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8019b0c:	2300      	movs	r3, #0
}
 8019b0e:	4618      	mov	r0, r3
 8019b10:	3708      	adds	r7, #8
 8019b12:	46bd      	mov	sp, r7
 8019b14:	bd80      	pop	{r7, pc}
 8019b16:	bf00      	nop
 8019b18:	02008000 	.word	0x02008000

08019b1c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8019b1c:	b580      	push	{r7, lr}
 8019b1e:	b088      	sub	sp, #32
 8019b20:	af02      	add	r7, sp, #8
 8019b22:	60f8      	str	r0, [r7, #12]
 8019b24:	607a      	str	r2, [r7, #4]
 8019b26:	461a      	mov	r2, r3
 8019b28:	460b      	mov	r3, r1
 8019b2a:	817b      	strh	r3, [r7, #10]
 8019b2c:	4613      	mov	r3, r2
 8019b2e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8019b30:	68fb      	ldr	r3, [r7, #12]
 8019b32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8019b36:	b2db      	uxtb	r3, r3
 8019b38:	2b20      	cmp	r3, #32
 8019b3a:	f040 80da 	bne.w	8019cf2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8019b3e:	68fb      	ldr	r3, [r7, #12]
 8019b40:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8019b44:	2b01      	cmp	r3, #1
 8019b46:	d101      	bne.n	8019b4c <HAL_I2C_Master_Transmit+0x30>
 8019b48:	2302      	movs	r3, #2
 8019b4a:	e0d3      	b.n	8019cf4 <HAL_I2C_Master_Transmit+0x1d8>
 8019b4c:	68fb      	ldr	r3, [r7, #12]
 8019b4e:	2201      	movs	r2, #1
 8019b50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8019b54:	f7fc f9bc 	bl	8015ed0 <HAL_GetTick>
 8019b58:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8019b5a:	697b      	ldr	r3, [r7, #20]
 8019b5c:	9300      	str	r3, [sp, #0]
 8019b5e:	2319      	movs	r3, #25
 8019b60:	2201      	movs	r2, #1
 8019b62:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8019b66:	68f8      	ldr	r0, [r7, #12]
 8019b68:	f000 fb54 	bl	801a214 <I2C_WaitOnFlagUntilTimeout>
 8019b6c:	4603      	mov	r3, r0
 8019b6e:	2b00      	cmp	r3, #0
 8019b70:	d001      	beq.n	8019b76 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8019b72:	2301      	movs	r3, #1
 8019b74:	e0be      	b.n	8019cf4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8019b76:	68fb      	ldr	r3, [r7, #12]
 8019b78:	2221      	movs	r2, #33	; 0x21
 8019b7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8019b7e:	68fb      	ldr	r3, [r7, #12]
 8019b80:	2210      	movs	r2, #16
 8019b82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8019b86:	68fb      	ldr	r3, [r7, #12]
 8019b88:	2200      	movs	r2, #0
 8019b8a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8019b8c:	68fb      	ldr	r3, [r7, #12]
 8019b8e:	687a      	ldr	r2, [r7, #4]
 8019b90:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8019b92:	68fb      	ldr	r3, [r7, #12]
 8019b94:	893a      	ldrh	r2, [r7, #8]
 8019b96:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8019b98:	68fb      	ldr	r3, [r7, #12]
 8019b9a:	2200      	movs	r2, #0
 8019b9c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8019b9e:	68fb      	ldr	r3, [r7, #12]
 8019ba0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019ba2:	b29b      	uxth	r3, r3
 8019ba4:	2bff      	cmp	r3, #255	; 0xff
 8019ba6:	d90e      	bls.n	8019bc6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8019ba8:	68fb      	ldr	r3, [r7, #12]
 8019baa:	22ff      	movs	r2, #255	; 0xff
 8019bac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8019bae:	68fb      	ldr	r3, [r7, #12]
 8019bb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019bb2:	b2da      	uxtb	r2, r3
 8019bb4:	8979      	ldrh	r1, [r7, #10]
 8019bb6:	4b51      	ldr	r3, [pc, #324]	; (8019cfc <HAL_I2C_Master_Transmit+0x1e0>)
 8019bb8:	9300      	str	r3, [sp, #0]
 8019bba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8019bbe:	68f8      	ldr	r0, [r7, #12]
 8019bc0:	f000 fd64 	bl	801a68c <I2C_TransferConfig>
 8019bc4:	e06c      	b.n	8019ca0 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8019bc6:	68fb      	ldr	r3, [r7, #12]
 8019bc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019bca:	b29a      	uxth	r2, r3
 8019bcc:	68fb      	ldr	r3, [r7, #12]
 8019bce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8019bd0:	68fb      	ldr	r3, [r7, #12]
 8019bd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019bd4:	b2da      	uxtb	r2, r3
 8019bd6:	8979      	ldrh	r1, [r7, #10]
 8019bd8:	4b48      	ldr	r3, [pc, #288]	; (8019cfc <HAL_I2C_Master_Transmit+0x1e0>)
 8019bda:	9300      	str	r3, [sp, #0]
 8019bdc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8019be0:	68f8      	ldr	r0, [r7, #12]
 8019be2:	f000 fd53 	bl	801a68c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8019be6:	e05b      	b.n	8019ca0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8019be8:	697a      	ldr	r2, [r7, #20]
 8019bea:	6a39      	ldr	r1, [r7, #32]
 8019bec:	68f8      	ldr	r0, [r7, #12]
 8019bee:	f000 fb60 	bl	801a2b2 <I2C_WaitOnTXISFlagUntilTimeout>
 8019bf2:	4603      	mov	r3, r0
 8019bf4:	2b00      	cmp	r3, #0
 8019bf6:	d001      	beq.n	8019bfc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8019bf8:	2301      	movs	r3, #1
 8019bfa:	e07b      	b.n	8019cf4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8019bfc:	68fb      	ldr	r3, [r7, #12]
 8019bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c00:	781a      	ldrb	r2, [r3, #0]
 8019c02:	68fb      	ldr	r3, [r7, #12]
 8019c04:	681b      	ldr	r3, [r3, #0]
 8019c06:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8019c08:	68fb      	ldr	r3, [r7, #12]
 8019c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c0c:	1c5a      	adds	r2, r3, #1
 8019c0e:	68fb      	ldr	r3, [r7, #12]
 8019c10:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8019c12:	68fb      	ldr	r3, [r7, #12]
 8019c14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019c16:	b29b      	uxth	r3, r3
 8019c18:	3b01      	subs	r3, #1
 8019c1a:	b29a      	uxth	r2, r3
 8019c1c:	68fb      	ldr	r3, [r7, #12]
 8019c1e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8019c20:	68fb      	ldr	r3, [r7, #12]
 8019c22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019c24:	3b01      	subs	r3, #1
 8019c26:	b29a      	uxth	r2, r3
 8019c28:	68fb      	ldr	r3, [r7, #12]
 8019c2a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8019c2c:	68fb      	ldr	r3, [r7, #12]
 8019c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019c30:	b29b      	uxth	r3, r3
 8019c32:	2b00      	cmp	r3, #0
 8019c34:	d034      	beq.n	8019ca0 <HAL_I2C_Master_Transmit+0x184>
 8019c36:	68fb      	ldr	r3, [r7, #12]
 8019c38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019c3a:	2b00      	cmp	r3, #0
 8019c3c:	d130      	bne.n	8019ca0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8019c3e:	697b      	ldr	r3, [r7, #20]
 8019c40:	9300      	str	r3, [sp, #0]
 8019c42:	6a3b      	ldr	r3, [r7, #32]
 8019c44:	2200      	movs	r2, #0
 8019c46:	2180      	movs	r1, #128	; 0x80
 8019c48:	68f8      	ldr	r0, [r7, #12]
 8019c4a:	f000 fae3 	bl	801a214 <I2C_WaitOnFlagUntilTimeout>
 8019c4e:	4603      	mov	r3, r0
 8019c50:	2b00      	cmp	r3, #0
 8019c52:	d001      	beq.n	8019c58 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8019c54:	2301      	movs	r3, #1
 8019c56:	e04d      	b.n	8019cf4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8019c58:	68fb      	ldr	r3, [r7, #12]
 8019c5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019c5c:	b29b      	uxth	r3, r3
 8019c5e:	2bff      	cmp	r3, #255	; 0xff
 8019c60:	d90e      	bls.n	8019c80 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8019c62:	68fb      	ldr	r3, [r7, #12]
 8019c64:	22ff      	movs	r2, #255	; 0xff
 8019c66:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8019c68:	68fb      	ldr	r3, [r7, #12]
 8019c6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019c6c:	b2da      	uxtb	r2, r3
 8019c6e:	8979      	ldrh	r1, [r7, #10]
 8019c70:	2300      	movs	r3, #0
 8019c72:	9300      	str	r3, [sp, #0]
 8019c74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8019c78:	68f8      	ldr	r0, [r7, #12]
 8019c7a:	f000 fd07 	bl	801a68c <I2C_TransferConfig>
 8019c7e:	e00f      	b.n	8019ca0 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8019c80:	68fb      	ldr	r3, [r7, #12]
 8019c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019c84:	b29a      	uxth	r2, r3
 8019c86:	68fb      	ldr	r3, [r7, #12]
 8019c88:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8019c8a:	68fb      	ldr	r3, [r7, #12]
 8019c8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019c8e:	b2da      	uxtb	r2, r3
 8019c90:	8979      	ldrh	r1, [r7, #10]
 8019c92:	2300      	movs	r3, #0
 8019c94:	9300      	str	r3, [sp, #0]
 8019c96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8019c9a:	68f8      	ldr	r0, [r7, #12]
 8019c9c:	f000 fcf6 	bl	801a68c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8019ca0:	68fb      	ldr	r3, [r7, #12]
 8019ca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019ca4:	b29b      	uxth	r3, r3
 8019ca6:	2b00      	cmp	r3, #0
 8019ca8:	d19e      	bne.n	8019be8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8019caa:	697a      	ldr	r2, [r7, #20]
 8019cac:	6a39      	ldr	r1, [r7, #32]
 8019cae:	68f8      	ldr	r0, [r7, #12]
 8019cb0:	f000 fb46 	bl	801a340 <I2C_WaitOnSTOPFlagUntilTimeout>
 8019cb4:	4603      	mov	r3, r0
 8019cb6:	2b00      	cmp	r3, #0
 8019cb8:	d001      	beq.n	8019cbe <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8019cba:	2301      	movs	r3, #1
 8019cbc:	e01a      	b.n	8019cf4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8019cbe:	68fb      	ldr	r3, [r7, #12]
 8019cc0:	681b      	ldr	r3, [r3, #0]
 8019cc2:	2220      	movs	r2, #32
 8019cc4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8019cc6:	68fb      	ldr	r3, [r7, #12]
 8019cc8:	681b      	ldr	r3, [r3, #0]
 8019cca:	6859      	ldr	r1, [r3, #4]
 8019ccc:	68fb      	ldr	r3, [r7, #12]
 8019cce:	681a      	ldr	r2, [r3, #0]
 8019cd0:	4b0b      	ldr	r3, [pc, #44]	; (8019d00 <HAL_I2C_Master_Transmit+0x1e4>)
 8019cd2:	400b      	ands	r3, r1
 8019cd4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8019cd6:	68fb      	ldr	r3, [r7, #12]
 8019cd8:	2220      	movs	r2, #32
 8019cda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8019cde:	68fb      	ldr	r3, [r7, #12]
 8019ce0:	2200      	movs	r2, #0
 8019ce2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8019ce6:	68fb      	ldr	r3, [r7, #12]
 8019ce8:	2200      	movs	r2, #0
 8019cea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8019cee:	2300      	movs	r3, #0
 8019cf0:	e000      	b.n	8019cf4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8019cf2:	2302      	movs	r3, #2
  }
}
 8019cf4:	4618      	mov	r0, r3
 8019cf6:	3718      	adds	r7, #24
 8019cf8:	46bd      	mov	sp, r7
 8019cfa:	bd80      	pop	{r7, pc}
 8019cfc:	80002000 	.word	0x80002000
 8019d00:	fe00e800 	.word	0xfe00e800

08019d04 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8019d04:	b580      	push	{r7, lr}
 8019d06:	b088      	sub	sp, #32
 8019d08:	af02      	add	r7, sp, #8
 8019d0a:	60f8      	str	r0, [r7, #12]
 8019d0c:	607a      	str	r2, [r7, #4]
 8019d0e:	461a      	mov	r2, r3
 8019d10:	460b      	mov	r3, r1
 8019d12:	817b      	strh	r3, [r7, #10]
 8019d14:	4613      	mov	r3, r2
 8019d16:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8019d18:	68fb      	ldr	r3, [r7, #12]
 8019d1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8019d1e:	b2db      	uxtb	r3, r3
 8019d20:	2b20      	cmp	r3, #32
 8019d22:	f040 80db 	bne.w	8019edc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8019d26:	68fb      	ldr	r3, [r7, #12]
 8019d28:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8019d2c:	2b01      	cmp	r3, #1
 8019d2e:	d101      	bne.n	8019d34 <HAL_I2C_Master_Receive+0x30>
 8019d30:	2302      	movs	r3, #2
 8019d32:	e0d4      	b.n	8019ede <HAL_I2C_Master_Receive+0x1da>
 8019d34:	68fb      	ldr	r3, [r7, #12]
 8019d36:	2201      	movs	r2, #1
 8019d38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8019d3c:	f7fc f8c8 	bl	8015ed0 <HAL_GetTick>
 8019d40:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8019d42:	697b      	ldr	r3, [r7, #20]
 8019d44:	9300      	str	r3, [sp, #0]
 8019d46:	2319      	movs	r3, #25
 8019d48:	2201      	movs	r2, #1
 8019d4a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8019d4e:	68f8      	ldr	r0, [r7, #12]
 8019d50:	f000 fa60 	bl	801a214 <I2C_WaitOnFlagUntilTimeout>
 8019d54:	4603      	mov	r3, r0
 8019d56:	2b00      	cmp	r3, #0
 8019d58:	d001      	beq.n	8019d5e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8019d5a:	2301      	movs	r3, #1
 8019d5c:	e0bf      	b.n	8019ede <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8019d5e:	68fb      	ldr	r3, [r7, #12]
 8019d60:	2222      	movs	r2, #34	; 0x22
 8019d62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8019d66:	68fb      	ldr	r3, [r7, #12]
 8019d68:	2210      	movs	r2, #16
 8019d6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8019d6e:	68fb      	ldr	r3, [r7, #12]
 8019d70:	2200      	movs	r2, #0
 8019d72:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8019d74:	68fb      	ldr	r3, [r7, #12]
 8019d76:	687a      	ldr	r2, [r7, #4]
 8019d78:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8019d7a:	68fb      	ldr	r3, [r7, #12]
 8019d7c:	893a      	ldrh	r2, [r7, #8]
 8019d7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8019d80:	68fb      	ldr	r3, [r7, #12]
 8019d82:	2200      	movs	r2, #0
 8019d84:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8019d86:	68fb      	ldr	r3, [r7, #12]
 8019d88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019d8a:	b29b      	uxth	r3, r3
 8019d8c:	2bff      	cmp	r3, #255	; 0xff
 8019d8e:	d90e      	bls.n	8019dae <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8019d90:	68fb      	ldr	r3, [r7, #12]
 8019d92:	22ff      	movs	r2, #255	; 0xff
 8019d94:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8019d96:	68fb      	ldr	r3, [r7, #12]
 8019d98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019d9a:	b2da      	uxtb	r2, r3
 8019d9c:	8979      	ldrh	r1, [r7, #10]
 8019d9e:	4b52      	ldr	r3, [pc, #328]	; (8019ee8 <HAL_I2C_Master_Receive+0x1e4>)
 8019da0:	9300      	str	r3, [sp, #0]
 8019da2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8019da6:	68f8      	ldr	r0, [r7, #12]
 8019da8:	f000 fc70 	bl	801a68c <I2C_TransferConfig>
 8019dac:	e06d      	b.n	8019e8a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8019dae:	68fb      	ldr	r3, [r7, #12]
 8019db0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019db2:	b29a      	uxth	r2, r3
 8019db4:	68fb      	ldr	r3, [r7, #12]
 8019db6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8019db8:	68fb      	ldr	r3, [r7, #12]
 8019dba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019dbc:	b2da      	uxtb	r2, r3
 8019dbe:	8979      	ldrh	r1, [r7, #10]
 8019dc0:	4b49      	ldr	r3, [pc, #292]	; (8019ee8 <HAL_I2C_Master_Receive+0x1e4>)
 8019dc2:	9300      	str	r3, [sp, #0]
 8019dc4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8019dc8:	68f8      	ldr	r0, [r7, #12]
 8019dca:	f000 fc5f 	bl	801a68c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8019dce:	e05c      	b.n	8019e8a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8019dd0:	697a      	ldr	r2, [r7, #20]
 8019dd2:	6a39      	ldr	r1, [r7, #32]
 8019dd4:	68f8      	ldr	r0, [r7, #12]
 8019dd6:	f000 faf7 	bl	801a3c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8019dda:	4603      	mov	r3, r0
 8019ddc:	2b00      	cmp	r3, #0
 8019dde:	d001      	beq.n	8019de4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8019de0:	2301      	movs	r3, #1
 8019de2:	e07c      	b.n	8019ede <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8019de4:	68fb      	ldr	r3, [r7, #12]
 8019de6:	681b      	ldr	r3, [r3, #0]
 8019de8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019dea:	68fb      	ldr	r3, [r7, #12]
 8019dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019dee:	b2d2      	uxtb	r2, r2
 8019df0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8019df2:	68fb      	ldr	r3, [r7, #12]
 8019df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019df6:	1c5a      	adds	r2, r3, #1
 8019df8:	68fb      	ldr	r3, [r7, #12]
 8019dfa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8019dfc:	68fb      	ldr	r3, [r7, #12]
 8019dfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019e00:	3b01      	subs	r3, #1
 8019e02:	b29a      	uxth	r2, r3
 8019e04:	68fb      	ldr	r3, [r7, #12]
 8019e06:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8019e08:	68fb      	ldr	r3, [r7, #12]
 8019e0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019e0c:	b29b      	uxth	r3, r3
 8019e0e:	3b01      	subs	r3, #1
 8019e10:	b29a      	uxth	r2, r3
 8019e12:	68fb      	ldr	r3, [r7, #12]
 8019e14:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8019e16:	68fb      	ldr	r3, [r7, #12]
 8019e18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019e1a:	b29b      	uxth	r3, r3
 8019e1c:	2b00      	cmp	r3, #0
 8019e1e:	d034      	beq.n	8019e8a <HAL_I2C_Master_Receive+0x186>
 8019e20:	68fb      	ldr	r3, [r7, #12]
 8019e22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019e24:	2b00      	cmp	r3, #0
 8019e26:	d130      	bne.n	8019e8a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8019e28:	697b      	ldr	r3, [r7, #20]
 8019e2a:	9300      	str	r3, [sp, #0]
 8019e2c:	6a3b      	ldr	r3, [r7, #32]
 8019e2e:	2200      	movs	r2, #0
 8019e30:	2180      	movs	r1, #128	; 0x80
 8019e32:	68f8      	ldr	r0, [r7, #12]
 8019e34:	f000 f9ee 	bl	801a214 <I2C_WaitOnFlagUntilTimeout>
 8019e38:	4603      	mov	r3, r0
 8019e3a:	2b00      	cmp	r3, #0
 8019e3c:	d001      	beq.n	8019e42 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8019e3e:	2301      	movs	r3, #1
 8019e40:	e04d      	b.n	8019ede <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8019e42:	68fb      	ldr	r3, [r7, #12]
 8019e44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019e46:	b29b      	uxth	r3, r3
 8019e48:	2bff      	cmp	r3, #255	; 0xff
 8019e4a:	d90e      	bls.n	8019e6a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8019e4c:	68fb      	ldr	r3, [r7, #12]
 8019e4e:	22ff      	movs	r2, #255	; 0xff
 8019e50:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8019e52:	68fb      	ldr	r3, [r7, #12]
 8019e54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019e56:	b2da      	uxtb	r2, r3
 8019e58:	8979      	ldrh	r1, [r7, #10]
 8019e5a:	2300      	movs	r3, #0
 8019e5c:	9300      	str	r3, [sp, #0]
 8019e5e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8019e62:	68f8      	ldr	r0, [r7, #12]
 8019e64:	f000 fc12 	bl	801a68c <I2C_TransferConfig>
 8019e68:	e00f      	b.n	8019e8a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8019e6a:	68fb      	ldr	r3, [r7, #12]
 8019e6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019e6e:	b29a      	uxth	r2, r3
 8019e70:	68fb      	ldr	r3, [r7, #12]
 8019e72:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8019e74:	68fb      	ldr	r3, [r7, #12]
 8019e76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019e78:	b2da      	uxtb	r2, r3
 8019e7a:	8979      	ldrh	r1, [r7, #10]
 8019e7c:	2300      	movs	r3, #0
 8019e7e:	9300      	str	r3, [sp, #0]
 8019e80:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8019e84:	68f8      	ldr	r0, [r7, #12]
 8019e86:	f000 fc01 	bl	801a68c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8019e8a:	68fb      	ldr	r3, [r7, #12]
 8019e8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019e8e:	b29b      	uxth	r3, r3
 8019e90:	2b00      	cmp	r3, #0
 8019e92:	d19d      	bne.n	8019dd0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8019e94:	697a      	ldr	r2, [r7, #20]
 8019e96:	6a39      	ldr	r1, [r7, #32]
 8019e98:	68f8      	ldr	r0, [r7, #12]
 8019e9a:	f000 fa51 	bl	801a340 <I2C_WaitOnSTOPFlagUntilTimeout>
 8019e9e:	4603      	mov	r3, r0
 8019ea0:	2b00      	cmp	r3, #0
 8019ea2:	d001      	beq.n	8019ea8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8019ea4:	2301      	movs	r3, #1
 8019ea6:	e01a      	b.n	8019ede <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8019ea8:	68fb      	ldr	r3, [r7, #12]
 8019eaa:	681b      	ldr	r3, [r3, #0]
 8019eac:	2220      	movs	r2, #32
 8019eae:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8019eb0:	68fb      	ldr	r3, [r7, #12]
 8019eb2:	681b      	ldr	r3, [r3, #0]
 8019eb4:	6859      	ldr	r1, [r3, #4]
 8019eb6:	68fb      	ldr	r3, [r7, #12]
 8019eb8:	681a      	ldr	r2, [r3, #0]
 8019eba:	4b0c      	ldr	r3, [pc, #48]	; (8019eec <HAL_I2C_Master_Receive+0x1e8>)
 8019ebc:	400b      	ands	r3, r1
 8019ebe:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8019ec0:	68fb      	ldr	r3, [r7, #12]
 8019ec2:	2220      	movs	r2, #32
 8019ec4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8019ec8:	68fb      	ldr	r3, [r7, #12]
 8019eca:	2200      	movs	r2, #0
 8019ecc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8019ed0:	68fb      	ldr	r3, [r7, #12]
 8019ed2:	2200      	movs	r2, #0
 8019ed4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8019ed8:	2300      	movs	r3, #0
 8019eda:	e000      	b.n	8019ede <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8019edc:	2302      	movs	r3, #2
  }
}
 8019ede:	4618      	mov	r0, r3
 8019ee0:	3718      	adds	r7, #24
 8019ee2:	46bd      	mov	sp, r7
 8019ee4:	bd80      	pop	{r7, pc}
 8019ee6:	bf00      	nop
 8019ee8:	80002400 	.word	0x80002400
 8019eec:	fe00e800 	.word	0xfe00e800

08019ef0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8019ef0:	b580      	push	{r7, lr}
 8019ef2:	b088      	sub	sp, #32
 8019ef4:	af02      	add	r7, sp, #8
 8019ef6:	60f8      	str	r0, [r7, #12]
 8019ef8:	4608      	mov	r0, r1
 8019efa:	4611      	mov	r1, r2
 8019efc:	461a      	mov	r2, r3
 8019efe:	4603      	mov	r3, r0
 8019f00:	817b      	strh	r3, [r7, #10]
 8019f02:	460b      	mov	r3, r1
 8019f04:	813b      	strh	r3, [r7, #8]
 8019f06:	4613      	mov	r3, r2
 8019f08:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8019f0a:	68fb      	ldr	r3, [r7, #12]
 8019f0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8019f10:	b2db      	uxtb	r3, r3
 8019f12:	2b20      	cmp	r3, #32
 8019f14:	f040 80fd 	bne.w	801a112 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8019f18:	6a3b      	ldr	r3, [r7, #32]
 8019f1a:	2b00      	cmp	r3, #0
 8019f1c:	d002      	beq.n	8019f24 <HAL_I2C_Mem_Read+0x34>
 8019f1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019f20:	2b00      	cmp	r3, #0
 8019f22:	d105      	bne.n	8019f30 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8019f24:	68fb      	ldr	r3, [r7, #12]
 8019f26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019f2a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8019f2c:	2301      	movs	r3, #1
 8019f2e:	e0f1      	b.n	801a114 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8019f30:	68fb      	ldr	r3, [r7, #12]
 8019f32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8019f36:	2b01      	cmp	r3, #1
 8019f38:	d101      	bne.n	8019f3e <HAL_I2C_Mem_Read+0x4e>
 8019f3a:	2302      	movs	r3, #2
 8019f3c:	e0ea      	b.n	801a114 <HAL_I2C_Mem_Read+0x224>
 8019f3e:	68fb      	ldr	r3, [r7, #12]
 8019f40:	2201      	movs	r2, #1
 8019f42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8019f46:	f7fb ffc3 	bl	8015ed0 <HAL_GetTick>
 8019f4a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8019f4c:	697b      	ldr	r3, [r7, #20]
 8019f4e:	9300      	str	r3, [sp, #0]
 8019f50:	2319      	movs	r3, #25
 8019f52:	2201      	movs	r2, #1
 8019f54:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8019f58:	68f8      	ldr	r0, [r7, #12]
 8019f5a:	f000 f95b 	bl	801a214 <I2C_WaitOnFlagUntilTimeout>
 8019f5e:	4603      	mov	r3, r0
 8019f60:	2b00      	cmp	r3, #0
 8019f62:	d001      	beq.n	8019f68 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8019f64:	2301      	movs	r3, #1
 8019f66:	e0d5      	b.n	801a114 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8019f68:	68fb      	ldr	r3, [r7, #12]
 8019f6a:	2222      	movs	r2, #34	; 0x22
 8019f6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8019f70:	68fb      	ldr	r3, [r7, #12]
 8019f72:	2240      	movs	r2, #64	; 0x40
 8019f74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8019f78:	68fb      	ldr	r3, [r7, #12]
 8019f7a:	2200      	movs	r2, #0
 8019f7c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8019f7e:	68fb      	ldr	r3, [r7, #12]
 8019f80:	6a3a      	ldr	r2, [r7, #32]
 8019f82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8019f84:	68fb      	ldr	r3, [r7, #12]
 8019f86:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8019f88:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8019f8a:	68fb      	ldr	r3, [r7, #12]
 8019f8c:	2200      	movs	r2, #0
 8019f8e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8019f90:	88f8      	ldrh	r0, [r7, #6]
 8019f92:	893a      	ldrh	r2, [r7, #8]
 8019f94:	8979      	ldrh	r1, [r7, #10]
 8019f96:	697b      	ldr	r3, [r7, #20]
 8019f98:	9301      	str	r3, [sp, #4]
 8019f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f9c:	9300      	str	r3, [sp, #0]
 8019f9e:	4603      	mov	r3, r0
 8019fa0:	68f8      	ldr	r0, [r7, #12]
 8019fa2:	f000 f8bf 	bl	801a124 <I2C_RequestMemoryRead>
 8019fa6:	4603      	mov	r3, r0
 8019fa8:	2b00      	cmp	r3, #0
 8019faa:	d005      	beq.n	8019fb8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8019fac:	68fb      	ldr	r3, [r7, #12]
 8019fae:	2200      	movs	r2, #0
 8019fb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8019fb4:	2301      	movs	r3, #1
 8019fb6:	e0ad      	b.n	801a114 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8019fb8:	68fb      	ldr	r3, [r7, #12]
 8019fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019fbc:	b29b      	uxth	r3, r3
 8019fbe:	2bff      	cmp	r3, #255	; 0xff
 8019fc0:	d90e      	bls.n	8019fe0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8019fc2:	68fb      	ldr	r3, [r7, #12]
 8019fc4:	22ff      	movs	r2, #255	; 0xff
 8019fc6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8019fc8:	68fb      	ldr	r3, [r7, #12]
 8019fca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019fcc:	b2da      	uxtb	r2, r3
 8019fce:	8979      	ldrh	r1, [r7, #10]
 8019fd0:	4b52      	ldr	r3, [pc, #328]	; (801a11c <HAL_I2C_Mem_Read+0x22c>)
 8019fd2:	9300      	str	r3, [sp, #0]
 8019fd4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8019fd8:	68f8      	ldr	r0, [r7, #12]
 8019fda:	f000 fb57 	bl	801a68c <I2C_TransferConfig>
 8019fde:	e00f      	b.n	801a000 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8019fe0:	68fb      	ldr	r3, [r7, #12]
 8019fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019fe4:	b29a      	uxth	r2, r3
 8019fe6:	68fb      	ldr	r3, [r7, #12]
 8019fe8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8019fea:	68fb      	ldr	r3, [r7, #12]
 8019fec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019fee:	b2da      	uxtb	r2, r3
 8019ff0:	8979      	ldrh	r1, [r7, #10]
 8019ff2:	4b4a      	ldr	r3, [pc, #296]	; (801a11c <HAL_I2C_Mem_Read+0x22c>)
 8019ff4:	9300      	str	r3, [sp, #0]
 8019ff6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8019ffa:	68f8      	ldr	r0, [r7, #12]
 8019ffc:	f000 fb46 	bl	801a68c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 801a000:	697b      	ldr	r3, [r7, #20]
 801a002:	9300      	str	r3, [sp, #0]
 801a004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a006:	2200      	movs	r2, #0
 801a008:	2104      	movs	r1, #4
 801a00a:	68f8      	ldr	r0, [r7, #12]
 801a00c:	f000 f902 	bl	801a214 <I2C_WaitOnFlagUntilTimeout>
 801a010:	4603      	mov	r3, r0
 801a012:	2b00      	cmp	r3, #0
 801a014:	d001      	beq.n	801a01a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 801a016:	2301      	movs	r3, #1
 801a018:	e07c      	b.n	801a114 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801a01a:	68fb      	ldr	r3, [r7, #12]
 801a01c:	681b      	ldr	r3, [r3, #0]
 801a01e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801a020:	68fb      	ldr	r3, [r7, #12]
 801a022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a024:	b2d2      	uxtb	r2, r2
 801a026:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801a028:	68fb      	ldr	r3, [r7, #12]
 801a02a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a02c:	1c5a      	adds	r2, r3, #1
 801a02e:	68fb      	ldr	r3, [r7, #12]
 801a030:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 801a032:	68fb      	ldr	r3, [r7, #12]
 801a034:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a036:	3b01      	subs	r3, #1
 801a038:	b29a      	uxth	r2, r3
 801a03a:	68fb      	ldr	r3, [r7, #12]
 801a03c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 801a03e:	68fb      	ldr	r3, [r7, #12]
 801a040:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801a042:	b29b      	uxth	r3, r3
 801a044:	3b01      	subs	r3, #1
 801a046:	b29a      	uxth	r2, r3
 801a048:	68fb      	ldr	r3, [r7, #12]
 801a04a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801a04c:	68fb      	ldr	r3, [r7, #12]
 801a04e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801a050:	b29b      	uxth	r3, r3
 801a052:	2b00      	cmp	r3, #0
 801a054:	d034      	beq.n	801a0c0 <HAL_I2C_Mem_Read+0x1d0>
 801a056:	68fb      	ldr	r3, [r7, #12]
 801a058:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a05a:	2b00      	cmp	r3, #0
 801a05c:	d130      	bne.n	801a0c0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 801a05e:	697b      	ldr	r3, [r7, #20]
 801a060:	9300      	str	r3, [sp, #0]
 801a062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a064:	2200      	movs	r2, #0
 801a066:	2180      	movs	r1, #128	; 0x80
 801a068:	68f8      	ldr	r0, [r7, #12]
 801a06a:	f000 f8d3 	bl	801a214 <I2C_WaitOnFlagUntilTimeout>
 801a06e:	4603      	mov	r3, r0
 801a070:	2b00      	cmp	r3, #0
 801a072:	d001      	beq.n	801a078 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 801a074:	2301      	movs	r3, #1
 801a076:	e04d      	b.n	801a114 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801a078:	68fb      	ldr	r3, [r7, #12]
 801a07a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801a07c:	b29b      	uxth	r3, r3
 801a07e:	2bff      	cmp	r3, #255	; 0xff
 801a080:	d90e      	bls.n	801a0a0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 801a082:	68fb      	ldr	r3, [r7, #12]
 801a084:	22ff      	movs	r2, #255	; 0xff
 801a086:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 801a088:	68fb      	ldr	r3, [r7, #12]
 801a08a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a08c:	b2da      	uxtb	r2, r3
 801a08e:	8979      	ldrh	r1, [r7, #10]
 801a090:	2300      	movs	r3, #0
 801a092:	9300      	str	r3, [sp, #0]
 801a094:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801a098:	68f8      	ldr	r0, [r7, #12]
 801a09a:	f000 faf7 	bl	801a68c <I2C_TransferConfig>
 801a09e:	e00f      	b.n	801a0c0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 801a0a0:	68fb      	ldr	r3, [r7, #12]
 801a0a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801a0a4:	b29a      	uxth	r2, r3
 801a0a6:	68fb      	ldr	r3, [r7, #12]
 801a0a8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801a0aa:	68fb      	ldr	r3, [r7, #12]
 801a0ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a0ae:	b2da      	uxtb	r2, r3
 801a0b0:	8979      	ldrh	r1, [r7, #10]
 801a0b2:	2300      	movs	r3, #0
 801a0b4:	9300      	str	r3, [sp, #0]
 801a0b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801a0ba:	68f8      	ldr	r0, [r7, #12]
 801a0bc:	f000 fae6 	bl	801a68c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 801a0c0:	68fb      	ldr	r3, [r7, #12]
 801a0c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801a0c4:	b29b      	uxth	r3, r3
 801a0c6:	2b00      	cmp	r3, #0
 801a0c8:	d19a      	bne.n	801a000 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801a0ca:	697a      	ldr	r2, [r7, #20]
 801a0cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801a0ce:	68f8      	ldr	r0, [r7, #12]
 801a0d0:	f000 f936 	bl	801a340 <I2C_WaitOnSTOPFlagUntilTimeout>
 801a0d4:	4603      	mov	r3, r0
 801a0d6:	2b00      	cmp	r3, #0
 801a0d8:	d001      	beq.n	801a0de <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 801a0da:	2301      	movs	r3, #1
 801a0dc:	e01a      	b.n	801a114 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801a0de:	68fb      	ldr	r3, [r7, #12]
 801a0e0:	681b      	ldr	r3, [r3, #0]
 801a0e2:	2220      	movs	r2, #32
 801a0e4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801a0e6:	68fb      	ldr	r3, [r7, #12]
 801a0e8:	681b      	ldr	r3, [r3, #0]
 801a0ea:	6859      	ldr	r1, [r3, #4]
 801a0ec:	68fb      	ldr	r3, [r7, #12]
 801a0ee:	681a      	ldr	r2, [r3, #0]
 801a0f0:	4b0b      	ldr	r3, [pc, #44]	; (801a120 <HAL_I2C_Mem_Read+0x230>)
 801a0f2:	400b      	ands	r3, r1
 801a0f4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 801a0f6:	68fb      	ldr	r3, [r7, #12]
 801a0f8:	2220      	movs	r2, #32
 801a0fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 801a0fe:	68fb      	ldr	r3, [r7, #12]
 801a100:	2200      	movs	r2, #0
 801a102:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801a106:	68fb      	ldr	r3, [r7, #12]
 801a108:	2200      	movs	r2, #0
 801a10a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801a10e:	2300      	movs	r3, #0
 801a110:	e000      	b.n	801a114 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 801a112:	2302      	movs	r3, #2
  }
}
 801a114:	4618      	mov	r0, r3
 801a116:	3718      	adds	r7, #24
 801a118:	46bd      	mov	sp, r7
 801a11a:	bd80      	pop	{r7, pc}
 801a11c:	80002400 	.word	0x80002400
 801a120:	fe00e800 	.word	0xfe00e800

0801a124 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 801a124:	b580      	push	{r7, lr}
 801a126:	b086      	sub	sp, #24
 801a128:	af02      	add	r7, sp, #8
 801a12a:	60f8      	str	r0, [r7, #12]
 801a12c:	4608      	mov	r0, r1
 801a12e:	4611      	mov	r1, r2
 801a130:	461a      	mov	r2, r3
 801a132:	4603      	mov	r3, r0
 801a134:	817b      	strh	r3, [r7, #10]
 801a136:	460b      	mov	r3, r1
 801a138:	813b      	strh	r3, [r7, #8]
 801a13a:	4613      	mov	r3, r2
 801a13c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 801a13e:	88fb      	ldrh	r3, [r7, #6]
 801a140:	b2da      	uxtb	r2, r3
 801a142:	8979      	ldrh	r1, [r7, #10]
 801a144:	4b20      	ldr	r3, [pc, #128]	; (801a1c8 <I2C_RequestMemoryRead+0xa4>)
 801a146:	9300      	str	r3, [sp, #0]
 801a148:	2300      	movs	r3, #0
 801a14a:	68f8      	ldr	r0, [r7, #12]
 801a14c:	f000 fa9e 	bl	801a68c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801a150:	69fa      	ldr	r2, [r7, #28]
 801a152:	69b9      	ldr	r1, [r7, #24]
 801a154:	68f8      	ldr	r0, [r7, #12]
 801a156:	f000 f8ac 	bl	801a2b2 <I2C_WaitOnTXISFlagUntilTimeout>
 801a15a:	4603      	mov	r3, r0
 801a15c:	2b00      	cmp	r3, #0
 801a15e:	d001      	beq.n	801a164 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 801a160:	2301      	movs	r3, #1
 801a162:	e02c      	b.n	801a1be <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 801a164:	88fb      	ldrh	r3, [r7, #6]
 801a166:	2b01      	cmp	r3, #1
 801a168:	d105      	bne.n	801a176 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 801a16a:	893b      	ldrh	r3, [r7, #8]
 801a16c:	b2da      	uxtb	r2, r3
 801a16e:	68fb      	ldr	r3, [r7, #12]
 801a170:	681b      	ldr	r3, [r3, #0]
 801a172:	629a      	str	r2, [r3, #40]	; 0x28
 801a174:	e015      	b.n	801a1a2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 801a176:	893b      	ldrh	r3, [r7, #8]
 801a178:	0a1b      	lsrs	r3, r3, #8
 801a17a:	b29b      	uxth	r3, r3
 801a17c:	b2da      	uxtb	r2, r3
 801a17e:	68fb      	ldr	r3, [r7, #12]
 801a180:	681b      	ldr	r3, [r3, #0]
 801a182:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801a184:	69fa      	ldr	r2, [r7, #28]
 801a186:	69b9      	ldr	r1, [r7, #24]
 801a188:	68f8      	ldr	r0, [r7, #12]
 801a18a:	f000 f892 	bl	801a2b2 <I2C_WaitOnTXISFlagUntilTimeout>
 801a18e:	4603      	mov	r3, r0
 801a190:	2b00      	cmp	r3, #0
 801a192:	d001      	beq.n	801a198 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 801a194:	2301      	movs	r3, #1
 801a196:	e012      	b.n	801a1be <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 801a198:	893b      	ldrh	r3, [r7, #8]
 801a19a:	b2da      	uxtb	r2, r3
 801a19c:	68fb      	ldr	r3, [r7, #12]
 801a19e:	681b      	ldr	r3, [r3, #0]
 801a1a0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 801a1a2:	69fb      	ldr	r3, [r7, #28]
 801a1a4:	9300      	str	r3, [sp, #0]
 801a1a6:	69bb      	ldr	r3, [r7, #24]
 801a1a8:	2200      	movs	r2, #0
 801a1aa:	2140      	movs	r1, #64	; 0x40
 801a1ac:	68f8      	ldr	r0, [r7, #12]
 801a1ae:	f000 f831 	bl	801a214 <I2C_WaitOnFlagUntilTimeout>
 801a1b2:	4603      	mov	r3, r0
 801a1b4:	2b00      	cmp	r3, #0
 801a1b6:	d001      	beq.n	801a1bc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 801a1b8:	2301      	movs	r3, #1
 801a1ba:	e000      	b.n	801a1be <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 801a1bc:	2300      	movs	r3, #0
}
 801a1be:	4618      	mov	r0, r3
 801a1c0:	3710      	adds	r7, #16
 801a1c2:	46bd      	mov	sp, r7
 801a1c4:	bd80      	pop	{r7, pc}
 801a1c6:	bf00      	nop
 801a1c8:	80002000 	.word	0x80002000

0801a1cc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 801a1cc:	b480      	push	{r7}
 801a1ce:	b083      	sub	sp, #12
 801a1d0:	af00      	add	r7, sp, #0
 801a1d2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 801a1d4:	687b      	ldr	r3, [r7, #4]
 801a1d6:	681b      	ldr	r3, [r3, #0]
 801a1d8:	699b      	ldr	r3, [r3, #24]
 801a1da:	f003 0302 	and.w	r3, r3, #2
 801a1de:	2b02      	cmp	r3, #2
 801a1e0:	d103      	bne.n	801a1ea <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 801a1e2:	687b      	ldr	r3, [r7, #4]
 801a1e4:	681b      	ldr	r3, [r3, #0]
 801a1e6:	2200      	movs	r2, #0
 801a1e8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801a1ea:	687b      	ldr	r3, [r7, #4]
 801a1ec:	681b      	ldr	r3, [r3, #0]
 801a1ee:	699b      	ldr	r3, [r3, #24]
 801a1f0:	f003 0301 	and.w	r3, r3, #1
 801a1f4:	2b01      	cmp	r3, #1
 801a1f6:	d007      	beq.n	801a208 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 801a1f8:	687b      	ldr	r3, [r7, #4]
 801a1fa:	681b      	ldr	r3, [r3, #0]
 801a1fc:	699a      	ldr	r2, [r3, #24]
 801a1fe:	687b      	ldr	r3, [r7, #4]
 801a200:	681b      	ldr	r3, [r3, #0]
 801a202:	f042 0201 	orr.w	r2, r2, #1
 801a206:	619a      	str	r2, [r3, #24]
  }
}
 801a208:	bf00      	nop
 801a20a:	370c      	adds	r7, #12
 801a20c:	46bd      	mov	sp, r7
 801a20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a212:	4770      	bx	lr

0801a214 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 801a214:	b580      	push	{r7, lr}
 801a216:	b084      	sub	sp, #16
 801a218:	af00      	add	r7, sp, #0
 801a21a:	60f8      	str	r0, [r7, #12]
 801a21c:	60b9      	str	r1, [r7, #8]
 801a21e:	603b      	str	r3, [r7, #0]
 801a220:	4613      	mov	r3, r2
 801a222:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801a224:	e031      	b.n	801a28a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801a226:	683b      	ldr	r3, [r7, #0]
 801a228:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a22c:	d02d      	beq.n	801a28a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801a22e:	f7fb fe4f 	bl	8015ed0 <HAL_GetTick>
 801a232:	4602      	mov	r2, r0
 801a234:	69bb      	ldr	r3, [r7, #24]
 801a236:	1ad3      	subs	r3, r2, r3
 801a238:	683a      	ldr	r2, [r7, #0]
 801a23a:	429a      	cmp	r2, r3
 801a23c:	d302      	bcc.n	801a244 <I2C_WaitOnFlagUntilTimeout+0x30>
 801a23e:	683b      	ldr	r3, [r7, #0]
 801a240:	2b00      	cmp	r3, #0
 801a242:	d122      	bne.n	801a28a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 801a244:	68fb      	ldr	r3, [r7, #12]
 801a246:	681b      	ldr	r3, [r3, #0]
 801a248:	699a      	ldr	r2, [r3, #24]
 801a24a:	68bb      	ldr	r3, [r7, #8]
 801a24c:	4013      	ands	r3, r2
 801a24e:	68ba      	ldr	r2, [r7, #8]
 801a250:	429a      	cmp	r2, r3
 801a252:	bf0c      	ite	eq
 801a254:	2301      	moveq	r3, #1
 801a256:	2300      	movne	r3, #0
 801a258:	b2db      	uxtb	r3, r3
 801a25a:	461a      	mov	r2, r3
 801a25c:	79fb      	ldrb	r3, [r7, #7]
 801a25e:	429a      	cmp	r2, r3
 801a260:	d113      	bne.n	801a28a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801a262:	68fb      	ldr	r3, [r7, #12]
 801a264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a266:	f043 0220 	orr.w	r2, r3, #32
 801a26a:	68fb      	ldr	r3, [r7, #12]
 801a26c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 801a26e:	68fb      	ldr	r3, [r7, #12]
 801a270:	2220      	movs	r2, #32
 801a272:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801a276:	68fb      	ldr	r3, [r7, #12]
 801a278:	2200      	movs	r2, #0
 801a27a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 801a27e:	68fb      	ldr	r3, [r7, #12]
 801a280:	2200      	movs	r2, #0
 801a282:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 801a286:	2301      	movs	r3, #1
 801a288:	e00f      	b.n	801a2aa <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801a28a:	68fb      	ldr	r3, [r7, #12]
 801a28c:	681b      	ldr	r3, [r3, #0]
 801a28e:	699a      	ldr	r2, [r3, #24]
 801a290:	68bb      	ldr	r3, [r7, #8]
 801a292:	4013      	ands	r3, r2
 801a294:	68ba      	ldr	r2, [r7, #8]
 801a296:	429a      	cmp	r2, r3
 801a298:	bf0c      	ite	eq
 801a29a:	2301      	moveq	r3, #1
 801a29c:	2300      	movne	r3, #0
 801a29e:	b2db      	uxtb	r3, r3
 801a2a0:	461a      	mov	r2, r3
 801a2a2:	79fb      	ldrb	r3, [r7, #7]
 801a2a4:	429a      	cmp	r2, r3
 801a2a6:	d0be      	beq.n	801a226 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801a2a8:	2300      	movs	r3, #0
}
 801a2aa:	4618      	mov	r0, r3
 801a2ac:	3710      	adds	r7, #16
 801a2ae:	46bd      	mov	sp, r7
 801a2b0:	bd80      	pop	{r7, pc}

0801a2b2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 801a2b2:	b580      	push	{r7, lr}
 801a2b4:	b084      	sub	sp, #16
 801a2b6:	af00      	add	r7, sp, #0
 801a2b8:	60f8      	str	r0, [r7, #12]
 801a2ba:	60b9      	str	r1, [r7, #8]
 801a2bc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 801a2be:	e033      	b.n	801a328 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801a2c0:	687a      	ldr	r2, [r7, #4]
 801a2c2:	68b9      	ldr	r1, [r7, #8]
 801a2c4:	68f8      	ldr	r0, [r7, #12]
 801a2c6:	f000 f901 	bl	801a4cc <I2C_IsErrorOccurred>
 801a2ca:	4603      	mov	r3, r0
 801a2cc:	2b00      	cmp	r3, #0
 801a2ce:	d001      	beq.n	801a2d4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801a2d0:	2301      	movs	r3, #1
 801a2d2:	e031      	b.n	801a338 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801a2d4:	68bb      	ldr	r3, [r7, #8]
 801a2d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a2da:	d025      	beq.n	801a328 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801a2dc:	f7fb fdf8 	bl	8015ed0 <HAL_GetTick>
 801a2e0:	4602      	mov	r2, r0
 801a2e2:	687b      	ldr	r3, [r7, #4]
 801a2e4:	1ad3      	subs	r3, r2, r3
 801a2e6:	68ba      	ldr	r2, [r7, #8]
 801a2e8:	429a      	cmp	r2, r3
 801a2ea:	d302      	bcc.n	801a2f2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 801a2ec:	68bb      	ldr	r3, [r7, #8]
 801a2ee:	2b00      	cmp	r3, #0
 801a2f0:	d11a      	bne.n	801a328 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 801a2f2:	68fb      	ldr	r3, [r7, #12]
 801a2f4:	681b      	ldr	r3, [r3, #0]
 801a2f6:	699b      	ldr	r3, [r3, #24]
 801a2f8:	f003 0302 	and.w	r3, r3, #2
 801a2fc:	2b02      	cmp	r3, #2
 801a2fe:	d013      	beq.n	801a328 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801a300:	68fb      	ldr	r3, [r7, #12]
 801a302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a304:	f043 0220 	orr.w	r2, r3, #32
 801a308:	68fb      	ldr	r3, [r7, #12]
 801a30a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 801a30c:	68fb      	ldr	r3, [r7, #12]
 801a30e:	2220      	movs	r2, #32
 801a310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801a314:	68fb      	ldr	r3, [r7, #12]
 801a316:	2200      	movs	r2, #0
 801a318:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 801a31c:	68fb      	ldr	r3, [r7, #12]
 801a31e:	2200      	movs	r2, #0
 801a320:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 801a324:	2301      	movs	r3, #1
 801a326:	e007      	b.n	801a338 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 801a328:	68fb      	ldr	r3, [r7, #12]
 801a32a:	681b      	ldr	r3, [r3, #0]
 801a32c:	699b      	ldr	r3, [r3, #24]
 801a32e:	f003 0302 	and.w	r3, r3, #2
 801a332:	2b02      	cmp	r3, #2
 801a334:	d1c4      	bne.n	801a2c0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 801a336:	2300      	movs	r3, #0
}
 801a338:	4618      	mov	r0, r3
 801a33a:	3710      	adds	r7, #16
 801a33c:	46bd      	mov	sp, r7
 801a33e:	bd80      	pop	{r7, pc}

0801a340 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 801a340:	b580      	push	{r7, lr}
 801a342:	b084      	sub	sp, #16
 801a344:	af00      	add	r7, sp, #0
 801a346:	60f8      	str	r0, [r7, #12]
 801a348:	60b9      	str	r1, [r7, #8]
 801a34a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801a34c:	e02f      	b.n	801a3ae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801a34e:	687a      	ldr	r2, [r7, #4]
 801a350:	68b9      	ldr	r1, [r7, #8]
 801a352:	68f8      	ldr	r0, [r7, #12]
 801a354:	f000 f8ba 	bl	801a4cc <I2C_IsErrorOccurred>
 801a358:	4603      	mov	r3, r0
 801a35a:	2b00      	cmp	r3, #0
 801a35c:	d001      	beq.n	801a362 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801a35e:	2301      	movs	r3, #1
 801a360:	e02d      	b.n	801a3be <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801a362:	f7fb fdb5 	bl	8015ed0 <HAL_GetTick>
 801a366:	4602      	mov	r2, r0
 801a368:	687b      	ldr	r3, [r7, #4]
 801a36a:	1ad3      	subs	r3, r2, r3
 801a36c:	68ba      	ldr	r2, [r7, #8]
 801a36e:	429a      	cmp	r2, r3
 801a370:	d302      	bcc.n	801a378 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 801a372:	68bb      	ldr	r3, [r7, #8]
 801a374:	2b00      	cmp	r3, #0
 801a376:	d11a      	bne.n	801a3ae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 801a378:	68fb      	ldr	r3, [r7, #12]
 801a37a:	681b      	ldr	r3, [r3, #0]
 801a37c:	699b      	ldr	r3, [r3, #24]
 801a37e:	f003 0320 	and.w	r3, r3, #32
 801a382:	2b20      	cmp	r3, #32
 801a384:	d013      	beq.n	801a3ae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801a386:	68fb      	ldr	r3, [r7, #12]
 801a388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a38a:	f043 0220 	orr.w	r2, r3, #32
 801a38e:	68fb      	ldr	r3, [r7, #12]
 801a390:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801a392:	68fb      	ldr	r3, [r7, #12]
 801a394:	2220      	movs	r2, #32
 801a396:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801a39a:	68fb      	ldr	r3, [r7, #12]
 801a39c:	2200      	movs	r2, #0
 801a39e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801a3a2:	68fb      	ldr	r3, [r7, #12]
 801a3a4:	2200      	movs	r2, #0
 801a3a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 801a3aa:	2301      	movs	r3, #1
 801a3ac:	e007      	b.n	801a3be <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801a3ae:	68fb      	ldr	r3, [r7, #12]
 801a3b0:	681b      	ldr	r3, [r3, #0]
 801a3b2:	699b      	ldr	r3, [r3, #24]
 801a3b4:	f003 0320 	and.w	r3, r3, #32
 801a3b8:	2b20      	cmp	r3, #32
 801a3ba:	d1c8      	bne.n	801a34e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801a3bc:	2300      	movs	r3, #0
}
 801a3be:	4618      	mov	r0, r3
 801a3c0:	3710      	adds	r7, #16
 801a3c2:	46bd      	mov	sp, r7
 801a3c4:	bd80      	pop	{r7, pc}
	...

0801a3c8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 801a3c8:	b580      	push	{r7, lr}
 801a3ca:	b084      	sub	sp, #16
 801a3cc:	af00      	add	r7, sp, #0
 801a3ce:	60f8      	str	r0, [r7, #12]
 801a3d0:	60b9      	str	r1, [r7, #8]
 801a3d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 801a3d4:	e06b      	b.n	801a4ae <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801a3d6:	687a      	ldr	r2, [r7, #4]
 801a3d8:	68b9      	ldr	r1, [r7, #8]
 801a3da:	68f8      	ldr	r0, [r7, #12]
 801a3dc:	f000 f876 	bl	801a4cc <I2C_IsErrorOccurred>
 801a3e0:	4603      	mov	r3, r0
 801a3e2:	2b00      	cmp	r3, #0
 801a3e4:	d001      	beq.n	801a3ea <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801a3e6:	2301      	movs	r3, #1
 801a3e8:	e069      	b.n	801a4be <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 801a3ea:	68fb      	ldr	r3, [r7, #12]
 801a3ec:	681b      	ldr	r3, [r3, #0]
 801a3ee:	699b      	ldr	r3, [r3, #24]
 801a3f0:	f003 0320 	and.w	r3, r3, #32
 801a3f4:	2b20      	cmp	r3, #32
 801a3f6:	d138      	bne.n	801a46a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 801a3f8:	68fb      	ldr	r3, [r7, #12]
 801a3fa:	681b      	ldr	r3, [r3, #0]
 801a3fc:	699b      	ldr	r3, [r3, #24]
 801a3fe:	f003 0304 	and.w	r3, r3, #4
 801a402:	2b04      	cmp	r3, #4
 801a404:	d105      	bne.n	801a412 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 801a406:	68fb      	ldr	r3, [r7, #12]
 801a408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a40a:	2b00      	cmp	r3, #0
 801a40c:	d001      	beq.n	801a412 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 801a40e:	2300      	movs	r3, #0
 801a410:	e055      	b.n	801a4be <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801a412:	68fb      	ldr	r3, [r7, #12]
 801a414:	681b      	ldr	r3, [r3, #0]
 801a416:	699b      	ldr	r3, [r3, #24]
 801a418:	f003 0310 	and.w	r3, r3, #16
 801a41c:	2b10      	cmp	r3, #16
 801a41e:	d107      	bne.n	801a430 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801a420:	68fb      	ldr	r3, [r7, #12]
 801a422:	681b      	ldr	r3, [r3, #0]
 801a424:	2210      	movs	r2, #16
 801a426:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 801a428:	68fb      	ldr	r3, [r7, #12]
 801a42a:	2204      	movs	r2, #4
 801a42c:	645a      	str	r2, [r3, #68]	; 0x44
 801a42e:	e002      	b.n	801a436 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801a430:	68fb      	ldr	r3, [r7, #12]
 801a432:	2200      	movs	r2, #0
 801a434:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801a436:	68fb      	ldr	r3, [r7, #12]
 801a438:	681b      	ldr	r3, [r3, #0]
 801a43a:	2220      	movs	r2, #32
 801a43c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 801a43e:	68fb      	ldr	r3, [r7, #12]
 801a440:	681b      	ldr	r3, [r3, #0]
 801a442:	6859      	ldr	r1, [r3, #4]
 801a444:	68fb      	ldr	r3, [r7, #12]
 801a446:	681a      	ldr	r2, [r3, #0]
 801a448:	4b1f      	ldr	r3, [pc, #124]	; (801a4c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 801a44a:	400b      	ands	r3, r1
 801a44c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 801a44e:	68fb      	ldr	r3, [r7, #12]
 801a450:	2220      	movs	r2, #32
 801a452:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801a456:	68fb      	ldr	r3, [r7, #12]
 801a458:	2200      	movs	r2, #0
 801a45a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801a45e:	68fb      	ldr	r3, [r7, #12]
 801a460:	2200      	movs	r2, #0
 801a462:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 801a466:	2301      	movs	r3, #1
 801a468:	e029      	b.n	801a4be <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801a46a:	f7fb fd31 	bl	8015ed0 <HAL_GetTick>
 801a46e:	4602      	mov	r2, r0
 801a470:	687b      	ldr	r3, [r7, #4]
 801a472:	1ad3      	subs	r3, r2, r3
 801a474:	68ba      	ldr	r2, [r7, #8]
 801a476:	429a      	cmp	r2, r3
 801a478:	d302      	bcc.n	801a480 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 801a47a:	68bb      	ldr	r3, [r7, #8]
 801a47c:	2b00      	cmp	r3, #0
 801a47e:	d116      	bne.n	801a4ae <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 801a480:	68fb      	ldr	r3, [r7, #12]
 801a482:	681b      	ldr	r3, [r3, #0]
 801a484:	699b      	ldr	r3, [r3, #24]
 801a486:	f003 0304 	and.w	r3, r3, #4
 801a48a:	2b04      	cmp	r3, #4
 801a48c:	d00f      	beq.n	801a4ae <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801a48e:	68fb      	ldr	r3, [r7, #12]
 801a490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a492:	f043 0220 	orr.w	r2, r3, #32
 801a496:	68fb      	ldr	r3, [r7, #12]
 801a498:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801a49a:	68fb      	ldr	r3, [r7, #12]
 801a49c:	2220      	movs	r2, #32
 801a49e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801a4a2:	68fb      	ldr	r3, [r7, #12]
 801a4a4:	2200      	movs	r2, #0
 801a4a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 801a4aa:	2301      	movs	r3, #1
 801a4ac:	e007      	b.n	801a4be <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 801a4ae:	68fb      	ldr	r3, [r7, #12]
 801a4b0:	681b      	ldr	r3, [r3, #0]
 801a4b2:	699b      	ldr	r3, [r3, #24]
 801a4b4:	f003 0304 	and.w	r3, r3, #4
 801a4b8:	2b04      	cmp	r3, #4
 801a4ba:	d18c      	bne.n	801a3d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801a4bc:	2300      	movs	r3, #0
}
 801a4be:	4618      	mov	r0, r3
 801a4c0:	3710      	adds	r7, #16
 801a4c2:	46bd      	mov	sp, r7
 801a4c4:	bd80      	pop	{r7, pc}
 801a4c6:	bf00      	nop
 801a4c8:	fe00e800 	.word	0xfe00e800

0801a4cc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 801a4cc:	b580      	push	{r7, lr}
 801a4ce:	b08a      	sub	sp, #40	; 0x28
 801a4d0:	af00      	add	r7, sp, #0
 801a4d2:	60f8      	str	r0, [r7, #12]
 801a4d4:	60b9      	str	r1, [r7, #8]
 801a4d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801a4d8:	2300      	movs	r3, #0
 801a4da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 801a4de:	68fb      	ldr	r3, [r7, #12]
 801a4e0:	681b      	ldr	r3, [r3, #0]
 801a4e2:	699b      	ldr	r3, [r3, #24]
 801a4e4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 801a4e6:	2300      	movs	r3, #0
 801a4e8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 801a4ea:	687b      	ldr	r3, [r7, #4]
 801a4ec:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 801a4ee:	69bb      	ldr	r3, [r7, #24]
 801a4f0:	f003 0310 	and.w	r3, r3, #16
 801a4f4:	2b00      	cmp	r3, #0
 801a4f6:	d068      	beq.n	801a5ca <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801a4f8:	68fb      	ldr	r3, [r7, #12]
 801a4fa:	681b      	ldr	r3, [r3, #0]
 801a4fc:	2210      	movs	r2, #16
 801a4fe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 801a500:	e049      	b.n	801a596 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 801a502:	68bb      	ldr	r3, [r7, #8]
 801a504:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a508:	d045      	beq.n	801a596 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 801a50a:	f7fb fce1 	bl	8015ed0 <HAL_GetTick>
 801a50e:	4602      	mov	r2, r0
 801a510:	69fb      	ldr	r3, [r7, #28]
 801a512:	1ad3      	subs	r3, r2, r3
 801a514:	68ba      	ldr	r2, [r7, #8]
 801a516:	429a      	cmp	r2, r3
 801a518:	d302      	bcc.n	801a520 <I2C_IsErrorOccurred+0x54>
 801a51a:	68bb      	ldr	r3, [r7, #8]
 801a51c:	2b00      	cmp	r3, #0
 801a51e:	d13a      	bne.n	801a596 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 801a520:	68fb      	ldr	r3, [r7, #12]
 801a522:	681b      	ldr	r3, [r3, #0]
 801a524:	685b      	ldr	r3, [r3, #4]
 801a526:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801a52a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 801a52c:	68fb      	ldr	r3, [r7, #12]
 801a52e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801a532:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 801a534:	68fb      	ldr	r3, [r7, #12]
 801a536:	681b      	ldr	r3, [r3, #0]
 801a538:	699b      	ldr	r3, [r3, #24]
 801a53a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801a53e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801a542:	d121      	bne.n	801a588 <I2C_IsErrorOccurred+0xbc>
 801a544:	697b      	ldr	r3, [r7, #20]
 801a546:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801a54a:	d01d      	beq.n	801a588 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 801a54c:	7cfb      	ldrb	r3, [r7, #19]
 801a54e:	2b20      	cmp	r3, #32
 801a550:	d01a      	beq.n	801a588 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 801a552:	68fb      	ldr	r3, [r7, #12]
 801a554:	681b      	ldr	r3, [r3, #0]
 801a556:	685a      	ldr	r2, [r3, #4]
 801a558:	68fb      	ldr	r3, [r7, #12]
 801a55a:	681b      	ldr	r3, [r3, #0]
 801a55c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801a560:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 801a562:	f7fb fcb5 	bl	8015ed0 <HAL_GetTick>
 801a566:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801a568:	e00e      	b.n	801a588 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 801a56a:	f7fb fcb1 	bl	8015ed0 <HAL_GetTick>
 801a56e:	4602      	mov	r2, r0
 801a570:	69fb      	ldr	r3, [r7, #28]
 801a572:	1ad3      	subs	r3, r2, r3
 801a574:	2b19      	cmp	r3, #25
 801a576:	d907      	bls.n	801a588 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 801a578:	6a3b      	ldr	r3, [r7, #32]
 801a57a:	f043 0320 	orr.w	r3, r3, #32
 801a57e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 801a580:	2301      	movs	r3, #1
 801a582:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 801a586:	e006      	b.n	801a596 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801a588:	68fb      	ldr	r3, [r7, #12]
 801a58a:	681b      	ldr	r3, [r3, #0]
 801a58c:	699b      	ldr	r3, [r3, #24]
 801a58e:	f003 0320 	and.w	r3, r3, #32
 801a592:	2b20      	cmp	r3, #32
 801a594:	d1e9      	bne.n	801a56a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 801a596:	68fb      	ldr	r3, [r7, #12]
 801a598:	681b      	ldr	r3, [r3, #0]
 801a59a:	699b      	ldr	r3, [r3, #24]
 801a59c:	f003 0320 	and.w	r3, r3, #32
 801a5a0:	2b20      	cmp	r3, #32
 801a5a2:	d003      	beq.n	801a5ac <I2C_IsErrorOccurred+0xe0>
 801a5a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a5a8:	2b00      	cmp	r3, #0
 801a5aa:	d0aa      	beq.n	801a502 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 801a5ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a5b0:	2b00      	cmp	r3, #0
 801a5b2:	d103      	bne.n	801a5bc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801a5b4:	68fb      	ldr	r3, [r7, #12]
 801a5b6:	681b      	ldr	r3, [r3, #0]
 801a5b8:	2220      	movs	r2, #32
 801a5ba:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 801a5bc:	6a3b      	ldr	r3, [r7, #32]
 801a5be:	f043 0304 	orr.w	r3, r3, #4
 801a5c2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 801a5c4:	2301      	movs	r3, #1
 801a5c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 801a5ca:	68fb      	ldr	r3, [r7, #12]
 801a5cc:	681b      	ldr	r3, [r3, #0]
 801a5ce:	699b      	ldr	r3, [r3, #24]
 801a5d0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 801a5d2:	69bb      	ldr	r3, [r7, #24]
 801a5d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a5d8:	2b00      	cmp	r3, #0
 801a5da:	d00b      	beq.n	801a5f4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 801a5dc:	6a3b      	ldr	r3, [r7, #32]
 801a5de:	f043 0301 	orr.w	r3, r3, #1
 801a5e2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 801a5e4:	68fb      	ldr	r3, [r7, #12]
 801a5e6:	681b      	ldr	r3, [r3, #0]
 801a5e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 801a5ec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801a5ee:	2301      	movs	r3, #1
 801a5f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 801a5f4:	69bb      	ldr	r3, [r7, #24]
 801a5f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801a5fa:	2b00      	cmp	r3, #0
 801a5fc:	d00b      	beq.n	801a616 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 801a5fe:	6a3b      	ldr	r3, [r7, #32]
 801a600:	f043 0308 	orr.w	r3, r3, #8
 801a604:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 801a606:	68fb      	ldr	r3, [r7, #12]
 801a608:	681b      	ldr	r3, [r3, #0]
 801a60a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801a60e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801a610:	2301      	movs	r3, #1
 801a612:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 801a616:	69bb      	ldr	r3, [r7, #24]
 801a618:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801a61c:	2b00      	cmp	r3, #0
 801a61e:	d00b      	beq.n	801a638 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 801a620:	6a3b      	ldr	r3, [r7, #32]
 801a622:	f043 0302 	orr.w	r3, r3, #2
 801a626:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 801a628:	68fb      	ldr	r3, [r7, #12]
 801a62a:	681b      	ldr	r3, [r3, #0]
 801a62c:	f44f 7200 	mov.w	r2, #512	; 0x200
 801a630:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801a632:	2301      	movs	r3, #1
 801a634:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 801a638:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a63c:	2b00      	cmp	r3, #0
 801a63e:	d01c      	beq.n	801a67a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 801a640:	68f8      	ldr	r0, [r7, #12]
 801a642:	f7ff fdc3 	bl	801a1cc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801a646:	68fb      	ldr	r3, [r7, #12]
 801a648:	681b      	ldr	r3, [r3, #0]
 801a64a:	6859      	ldr	r1, [r3, #4]
 801a64c:	68fb      	ldr	r3, [r7, #12]
 801a64e:	681a      	ldr	r2, [r3, #0]
 801a650:	4b0d      	ldr	r3, [pc, #52]	; (801a688 <I2C_IsErrorOccurred+0x1bc>)
 801a652:	400b      	ands	r3, r1
 801a654:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 801a656:	68fb      	ldr	r3, [r7, #12]
 801a658:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801a65a:	6a3b      	ldr	r3, [r7, #32]
 801a65c:	431a      	orrs	r2, r3
 801a65e:	68fb      	ldr	r3, [r7, #12]
 801a660:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 801a662:	68fb      	ldr	r3, [r7, #12]
 801a664:	2220      	movs	r2, #32
 801a666:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 801a66a:	68fb      	ldr	r3, [r7, #12]
 801a66c:	2200      	movs	r2, #0
 801a66e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801a672:	68fb      	ldr	r3, [r7, #12]
 801a674:	2200      	movs	r2, #0
 801a676:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 801a67a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801a67e:	4618      	mov	r0, r3
 801a680:	3728      	adds	r7, #40	; 0x28
 801a682:	46bd      	mov	sp, r7
 801a684:	bd80      	pop	{r7, pc}
 801a686:	bf00      	nop
 801a688:	fe00e800 	.word	0xfe00e800

0801a68c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 801a68c:	b480      	push	{r7}
 801a68e:	b087      	sub	sp, #28
 801a690:	af00      	add	r7, sp, #0
 801a692:	60f8      	str	r0, [r7, #12]
 801a694:	607b      	str	r3, [r7, #4]
 801a696:	460b      	mov	r3, r1
 801a698:	817b      	strh	r3, [r7, #10]
 801a69a:	4613      	mov	r3, r2
 801a69c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801a69e:	897b      	ldrh	r3, [r7, #10]
 801a6a0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 801a6a4:	7a7b      	ldrb	r3, [r7, #9]
 801a6a6:	041b      	lsls	r3, r3, #16
 801a6a8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801a6ac:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 801a6ae:	687b      	ldr	r3, [r7, #4]
 801a6b0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801a6b2:	6a3b      	ldr	r3, [r7, #32]
 801a6b4:	4313      	orrs	r3, r2
 801a6b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801a6ba:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 801a6bc:	68fb      	ldr	r3, [r7, #12]
 801a6be:	681b      	ldr	r3, [r3, #0]
 801a6c0:	685a      	ldr	r2, [r3, #4]
 801a6c2:	6a3b      	ldr	r3, [r7, #32]
 801a6c4:	0d5b      	lsrs	r3, r3, #21
 801a6c6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 801a6ca:	4b08      	ldr	r3, [pc, #32]	; (801a6ec <I2C_TransferConfig+0x60>)
 801a6cc:	430b      	orrs	r3, r1
 801a6ce:	43db      	mvns	r3, r3
 801a6d0:	ea02 0103 	and.w	r1, r2, r3
 801a6d4:	68fb      	ldr	r3, [r7, #12]
 801a6d6:	681b      	ldr	r3, [r3, #0]
 801a6d8:	697a      	ldr	r2, [r7, #20]
 801a6da:	430a      	orrs	r2, r1
 801a6dc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 801a6de:	bf00      	nop
 801a6e0:	371c      	adds	r7, #28
 801a6e2:	46bd      	mov	sp, r7
 801a6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6e8:	4770      	bx	lr
 801a6ea:	bf00      	nop
 801a6ec:	03ff63ff 	.word	0x03ff63ff

0801a6f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 801a6f0:	b480      	push	{r7}
 801a6f2:	b083      	sub	sp, #12
 801a6f4:	af00      	add	r7, sp, #0
 801a6f6:	6078      	str	r0, [r7, #4]
 801a6f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801a6fa:	687b      	ldr	r3, [r7, #4]
 801a6fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801a700:	b2db      	uxtb	r3, r3
 801a702:	2b20      	cmp	r3, #32
 801a704:	d138      	bne.n	801a778 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801a706:	687b      	ldr	r3, [r7, #4]
 801a708:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801a70c:	2b01      	cmp	r3, #1
 801a70e:	d101      	bne.n	801a714 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 801a710:	2302      	movs	r3, #2
 801a712:	e032      	b.n	801a77a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 801a714:	687b      	ldr	r3, [r7, #4]
 801a716:	2201      	movs	r2, #1
 801a718:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 801a71c:	687b      	ldr	r3, [r7, #4]
 801a71e:	2224      	movs	r2, #36	; 0x24
 801a720:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801a724:	687b      	ldr	r3, [r7, #4]
 801a726:	681b      	ldr	r3, [r3, #0]
 801a728:	681a      	ldr	r2, [r3, #0]
 801a72a:	687b      	ldr	r3, [r7, #4]
 801a72c:	681b      	ldr	r3, [r3, #0]
 801a72e:	f022 0201 	bic.w	r2, r2, #1
 801a732:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 801a734:	687b      	ldr	r3, [r7, #4]
 801a736:	681b      	ldr	r3, [r3, #0]
 801a738:	681a      	ldr	r2, [r3, #0]
 801a73a:	687b      	ldr	r3, [r7, #4]
 801a73c:	681b      	ldr	r3, [r3, #0]
 801a73e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801a742:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 801a744:	687b      	ldr	r3, [r7, #4]
 801a746:	681b      	ldr	r3, [r3, #0]
 801a748:	6819      	ldr	r1, [r3, #0]
 801a74a:	687b      	ldr	r3, [r7, #4]
 801a74c:	681b      	ldr	r3, [r3, #0]
 801a74e:	683a      	ldr	r2, [r7, #0]
 801a750:	430a      	orrs	r2, r1
 801a752:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801a754:	687b      	ldr	r3, [r7, #4]
 801a756:	681b      	ldr	r3, [r3, #0]
 801a758:	681a      	ldr	r2, [r3, #0]
 801a75a:	687b      	ldr	r3, [r7, #4]
 801a75c:	681b      	ldr	r3, [r3, #0]
 801a75e:	f042 0201 	orr.w	r2, r2, #1
 801a762:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801a764:	687b      	ldr	r3, [r7, #4]
 801a766:	2220      	movs	r2, #32
 801a768:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801a76c:	687b      	ldr	r3, [r7, #4]
 801a76e:	2200      	movs	r2, #0
 801a770:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801a774:	2300      	movs	r3, #0
 801a776:	e000      	b.n	801a77a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 801a778:	2302      	movs	r3, #2
  }
}
 801a77a:	4618      	mov	r0, r3
 801a77c:	370c      	adds	r7, #12
 801a77e:	46bd      	mov	sp, r7
 801a780:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a784:	4770      	bx	lr

0801a786 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 801a786:	b480      	push	{r7}
 801a788:	b085      	sub	sp, #20
 801a78a:	af00      	add	r7, sp, #0
 801a78c:	6078      	str	r0, [r7, #4]
 801a78e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801a790:	687b      	ldr	r3, [r7, #4]
 801a792:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801a796:	b2db      	uxtb	r3, r3
 801a798:	2b20      	cmp	r3, #32
 801a79a:	d139      	bne.n	801a810 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801a79c:	687b      	ldr	r3, [r7, #4]
 801a79e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801a7a2:	2b01      	cmp	r3, #1
 801a7a4:	d101      	bne.n	801a7aa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 801a7a6:	2302      	movs	r3, #2
 801a7a8:	e033      	b.n	801a812 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 801a7aa:	687b      	ldr	r3, [r7, #4]
 801a7ac:	2201      	movs	r2, #1
 801a7ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 801a7b2:	687b      	ldr	r3, [r7, #4]
 801a7b4:	2224      	movs	r2, #36	; 0x24
 801a7b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801a7ba:	687b      	ldr	r3, [r7, #4]
 801a7bc:	681b      	ldr	r3, [r3, #0]
 801a7be:	681a      	ldr	r2, [r3, #0]
 801a7c0:	687b      	ldr	r3, [r7, #4]
 801a7c2:	681b      	ldr	r3, [r3, #0]
 801a7c4:	f022 0201 	bic.w	r2, r2, #1
 801a7c8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 801a7ca:	687b      	ldr	r3, [r7, #4]
 801a7cc:	681b      	ldr	r3, [r3, #0]
 801a7ce:	681b      	ldr	r3, [r3, #0]
 801a7d0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 801a7d2:	68fb      	ldr	r3, [r7, #12]
 801a7d4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 801a7d8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 801a7da:	683b      	ldr	r3, [r7, #0]
 801a7dc:	021b      	lsls	r3, r3, #8
 801a7de:	68fa      	ldr	r2, [r7, #12]
 801a7e0:	4313      	orrs	r3, r2
 801a7e2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 801a7e4:	687b      	ldr	r3, [r7, #4]
 801a7e6:	681b      	ldr	r3, [r3, #0]
 801a7e8:	68fa      	ldr	r2, [r7, #12]
 801a7ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801a7ec:	687b      	ldr	r3, [r7, #4]
 801a7ee:	681b      	ldr	r3, [r3, #0]
 801a7f0:	681a      	ldr	r2, [r3, #0]
 801a7f2:	687b      	ldr	r3, [r7, #4]
 801a7f4:	681b      	ldr	r3, [r3, #0]
 801a7f6:	f042 0201 	orr.w	r2, r2, #1
 801a7fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801a7fc:	687b      	ldr	r3, [r7, #4]
 801a7fe:	2220      	movs	r2, #32
 801a800:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801a804:	687b      	ldr	r3, [r7, #4]
 801a806:	2200      	movs	r2, #0
 801a808:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801a80c:	2300      	movs	r3, #0
 801a80e:	e000      	b.n	801a812 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 801a810:	2302      	movs	r3, #2
  }
}
 801a812:	4618      	mov	r0, r3
 801a814:	3714      	adds	r7, #20
 801a816:	46bd      	mov	sp, r7
 801a818:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a81c:	4770      	bx	lr
	...

0801a820 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 801a820:	b580      	push	{r7, lr}
 801a822:	b084      	sub	sp, #16
 801a824:	af00      	add	r7, sp, #0
 801a826:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 801a828:	4b19      	ldr	r3, [pc, #100]	; (801a890 <HAL_PWREx_ConfigSupply+0x70>)
 801a82a:	68db      	ldr	r3, [r3, #12]
 801a82c:	f003 0304 	and.w	r3, r3, #4
 801a830:	2b04      	cmp	r3, #4
 801a832:	d00a      	beq.n	801a84a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 801a834:	4b16      	ldr	r3, [pc, #88]	; (801a890 <HAL_PWREx_ConfigSupply+0x70>)
 801a836:	68db      	ldr	r3, [r3, #12]
 801a838:	f003 0307 	and.w	r3, r3, #7
 801a83c:	687a      	ldr	r2, [r7, #4]
 801a83e:	429a      	cmp	r2, r3
 801a840:	d001      	beq.n	801a846 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 801a842:	2301      	movs	r3, #1
 801a844:	e01f      	b.n	801a886 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 801a846:	2300      	movs	r3, #0
 801a848:	e01d      	b.n	801a886 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 801a84a:	4b11      	ldr	r3, [pc, #68]	; (801a890 <HAL_PWREx_ConfigSupply+0x70>)
 801a84c:	68db      	ldr	r3, [r3, #12]
 801a84e:	f023 0207 	bic.w	r2, r3, #7
 801a852:	490f      	ldr	r1, [pc, #60]	; (801a890 <HAL_PWREx_ConfigSupply+0x70>)
 801a854:	687b      	ldr	r3, [r7, #4]
 801a856:	4313      	orrs	r3, r2
 801a858:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 801a85a:	f7fb fb39 	bl	8015ed0 <HAL_GetTick>
 801a85e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801a860:	e009      	b.n	801a876 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 801a862:	f7fb fb35 	bl	8015ed0 <HAL_GetTick>
 801a866:	4602      	mov	r2, r0
 801a868:	68fb      	ldr	r3, [r7, #12]
 801a86a:	1ad3      	subs	r3, r2, r3
 801a86c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801a870:	d901      	bls.n	801a876 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 801a872:	2301      	movs	r3, #1
 801a874:	e007      	b.n	801a886 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801a876:	4b06      	ldr	r3, [pc, #24]	; (801a890 <HAL_PWREx_ConfigSupply+0x70>)
 801a878:	685b      	ldr	r3, [r3, #4]
 801a87a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801a87e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801a882:	d1ee      	bne.n	801a862 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 801a884:	2300      	movs	r3, #0
}
 801a886:	4618      	mov	r0, r3
 801a888:	3710      	adds	r7, #16
 801a88a:	46bd      	mov	sp, r7
 801a88c:	bd80      	pop	{r7, pc}
 801a88e:	bf00      	nop
 801a890:	58024800 	.word	0x58024800

0801a894 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801a894:	b580      	push	{r7, lr}
 801a896:	b08c      	sub	sp, #48	; 0x30
 801a898:	af00      	add	r7, sp, #0
 801a89a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 801a89c:	687b      	ldr	r3, [r7, #4]
 801a89e:	2b00      	cmp	r3, #0
 801a8a0:	d102      	bne.n	801a8a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 801a8a2:	2301      	movs	r3, #1
 801a8a4:	f000 bc48 	b.w	801b138 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801a8a8:	687b      	ldr	r3, [r7, #4]
 801a8aa:	681b      	ldr	r3, [r3, #0]
 801a8ac:	f003 0301 	and.w	r3, r3, #1
 801a8b0:	2b00      	cmp	r3, #0
 801a8b2:	f000 8088 	beq.w	801a9c6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801a8b6:	4b99      	ldr	r3, [pc, #612]	; (801ab1c <HAL_RCC_OscConfig+0x288>)
 801a8b8:	691b      	ldr	r3, [r3, #16]
 801a8ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801a8be:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801a8c0:	4b96      	ldr	r3, [pc, #600]	; (801ab1c <HAL_RCC_OscConfig+0x288>)
 801a8c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a8c4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 801a8c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a8c8:	2b10      	cmp	r3, #16
 801a8ca:	d007      	beq.n	801a8dc <HAL_RCC_OscConfig+0x48>
 801a8cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a8ce:	2b18      	cmp	r3, #24
 801a8d0:	d111      	bne.n	801a8f6 <HAL_RCC_OscConfig+0x62>
 801a8d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a8d4:	f003 0303 	and.w	r3, r3, #3
 801a8d8:	2b02      	cmp	r3, #2
 801a8da:	d10c      	bne.n	801a8f6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801a8dc:	4b8f      	ldr	r3, [pc, #572]	; (801ab1c <HAL_RCC_OscConfig+0x288>)
 801a8de:	681b      	ldr	r3, [r3, #0]
 801a8e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801a8e4:	2b00      	cmp	r3, #0
 801a8e6:	d06d      	beq.n	801a9c4 <HAL_RCC_OscConfig+0x130>
 801a8e8:	687b      	ldr	r3, [r7, #4]
 801a8ea:	685b      	ldr	r3, [r3, #4]
 801a8ec:	2b00      	cmp	r3, #0
 801a8ee:	d169      	bne.n	801a9c4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 801a8f0:	2301      	movs	r3, #1
 801a8f2:	f000 bc21 	b.w	801b138 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801a8f6:	687b      	ldr	r3, [r7, #4]
 801a8f8:	685b      	ldr	r3, [r3, #4]
 801a8fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a8fe:	d106      	bne.n	801a90e <HAL_RCC_OscConfig+0x7a>
 801a900:	4b86      	ldr	r3, [pc, #536]	; (801ab1c <HAL_RCC_OscConfig+0x288>)
 801a902:	681b      	ldr	r3, [r3, #0]
 801a904:	4a85      	ldr	r2, [pc, #532]	; (801ab1c <HAL_RCC_OscConfig+0x288>)
 801a906:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801a90a:	6013      	str	r3, [r2, #0]
 801a90c:	e02e      	b.n	801a96c <HAL_RCC_OscConfig+0xd8>
 801a90e:	687b      	ldr	r3, [r7, #4]
 801a910:	685b      	ldr	r3, [r3, #4]
 801a912:	2b00      	cmp	r3, #0
 801a914:	d10c      	bne.n	801a930 <HAL_RCC_OscConfig+0x9c>
 801a916:	4b81      	ldr	r3, [pc, #516]	; (801ab1c <HAL_RCC_OscConfig+0x288>)
 801a918:	681b      	ldr	r3, [r3, #0]
 801a91a:	4a80      	ldr	r2, [pc, #512]	; (801ab1c <HAL_RCC_OscConfig+0x288>)
 801a91c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801a920:	6013      	str	r3, [r2, #0]
 801a922:	4b7e      	ldr	r3, [pc, #504]	; (801ab1c <HAL_RCC_OscConfig+0x288>)
 801a924:	681b      	ldr	r3, [r3, #0]
 801a926:	4a7d      	ldr	r2, [pc, #500]	; (801ab1c <HAL_RCC_OscConfig+0x288>)
 801a928:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801a92c:	6013      	str	r3, [r2, #0]
 801a92e:	e01d      	b.n	801a96c <HAL_RCC_OscConfig+0xd8>
 801a930:	687b      	ldr	r3, [r7, #4]
 801a932:	685b      	ldr	r3, [r3, #4]
 801a934:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801a938:	d10c      	bne.n	801a954 <HAL_RCC_OscConfig+0xc0>
 801a93a:	4b78      	ldr	r3, [pc, #480]	; (801ab1c <HAL_RCC_OscConfig+0x288>)
 801a93c:	681b      	ldr	r3, [r3, #0]
 801a93e:	4a77      	ldr	r2, [pc, #476]	; (801ab1c <HAL_RCC_OscConfig+0x288>)
 801a940:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801a944:	6013      	str	r3, [r2, #0]
 801a946:	4b75      	ldr	r3, [pc, #468]	; (801ab1c <HAL_RCC_OscConfig+0x288>)
 801a948:	681b      	ldr	r3, [r3, #0]
 801a94a:	4a74      	ldr	r2, [pc, #464]	; (801ab1c <HAL_RCC_OscConfig+0x288>)
 801a94c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801a950:	6013      	str	r3, [r2, #0]
 801a952:	e00b      	b.n	801a96c <HAL_RCC_OscConfig+0xd8>
 801a954:	4b71      	ldr	r3, [pc, #452]	; (801ab1c <HAL_RCC_OscConfig+0x288>)
 801a956:	681b      	ldr	r3, [r3, #0]
 801a958:	4a70      	ldr	r2, [pc, #448]	; (801ab1c <HAL_RCC_OscConfig+0x288>)
 801a95a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801a95e:	6013      	str	r3, [r2, #0]
 801a960:	4b6e      	ldr	r3, [pc, #440]	; (801ab1c <HAL_RCC_OscConfig+0x288>)
 801a962:	681b      	ldr	r3, [r3, #0]
 801a964:	4a6d      	ldr	r2, [pc, #436]	; (801ab1c <HAL_RCC_OscConfig+0x288>)
 801a966:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801a96a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801a96c:	687b      	ldr	r3, [r7, #4]
 801a96e:	685b      	ldr	r3, [r3, #4]
 801a970:	2b00      	cmp	r3, #0
 801a972:	d013      	beq.n	801a99c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801a974:	f7fb faac 	bl	8015ed0 <HAL_GetTick>
 801a978:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801a97a:	e008      	b.n	801a98e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801a97c:	f7fb faa8 	bl	8015ed0 <HAL_GetTick>
 801a980:	4602      	mov	r2, r0
 801a982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a984:	1ad3      	subs	r3, r2, r3
 801a986:	2b64      	cmp	r3, #100	; 0x64
 801a988:	d901      	bls.n	801a98e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801a98a:	2303      	movs	r3, #3
 801a98c:	e3d4      	b.n	801b138 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801a98e:	4b63      	ldr	r3, [pc, #396]	; (801ab1c <HAL_RCC_OscConfig+0x288>)
 801a990:	681b      	ldr	r3, [r3, #0]
 801a992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801a996:	2b00      	cmp	r3, #0
 801a998:	d0f0      	beq.n	801a97c <HAL_RCC_OscConfig+0xe8>
 801a99a:	e014      	b.n	801a9c6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801a99c:	f7fb fa98 	bl	8015ed0 <HAL_GetTick>
 801a9a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801a9a2:	e008      	b.n	801a9b6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801a9a4:	f7fb fa94 	bl	8015ed0 <HAL_GetTick>
 801a9a8:	4602      	mov	r2, r0
 801a9aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a9ac:	1ad3      	subs	r3, r2, r3
 801a9ae:	2b64      	cmp	r3, #100	; 0x64
 801a9b0:	d901      	bls.n	801a9b6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 801a9b2:	2303      	movs	r3, #3
 801a9b4:	e3c0      	b.n	801b138 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801a9b6:	4b59      	ldr	r3, [pc, #356]	; (801ab1c <HAL_RCC_OscConfig+0x288>)
 801a9b8:	681b      	ldr	r3, [r3, #0]
 801a9ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801a9be:	2b00      	cmp	r3, #0
 801a9c0:	d1f0      	bne.n	801a9a4 <HAL_RCC_OscConfig+0x110>
 801a9c2:	e000      	b.n	801a9c6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801a9c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801a9c6:	687b      	ldr	r3, [r7, #4]
 801a9c8:	681b      	ldr	r3, [r3, #0]
 801a9ca:	f003 0302 	and.w	r3, r3, #2
 801a9ce:	2b00      	cmp	r3, #0
 801a9d0:	f000 80ca 	beq.w	801ab68 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801a9d4:	4b51      	ldr	r3, [pc, #324]	; (801ab1c <HAL_RCC_OscConfig+0x288>)
 801a9d6:	691b      	ldr	r3, [r3, #16]
 801a9d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801a9dc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801a9de:	4b4f      	ldr	r3, [pc, #316]	; (801ab1c <HAL_RCC_OscConfig+0x288>)
 801a9e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a9e2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 801a9e4:	6a3b      	ldr	r3, [r7, #32]
 801a9e6:	2b00      	cmp	r3, #0
 801a9e8:	d007      	beq.n	801a9fa <HAL_RCC_OscConfig+0x166>
 801a9ea:	6a3b      	ldr	r3, [r7, #32]
 801a9ec:	2b18      	cmp	r3, #24
 801a9ee:	d156      	bne.n	801aa9e <HAL_RCC_OscConfig+0x20a>
 801a9f0:	69fb      	ldr	r3, [r7, #28]
 801a9f2:	f003 0303 	and.w	r3, r3, #3
 801a9f6:	2b00      	cmp	r3, #0
 801a9f8:	d151      	bne.n	801aa9e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801a9fa:	4b48      	ldr	r3, [pc, #288]	; (801ab1c <HAL_RCC_OscConfig+0x288>)
 801a9fc:	681b      	ldr	r3, [r3, #0]
 801a9fe:	f003 0304 	and.w	r3, r3, #4
 801aa02:	2b00      	cmp	r3, #0
 801aa04:	d005      	beq.n	801aa12 <HAL_RCC_OscConfig+0x17e>
 801aa06:	687b      	ldr	r3, [r7, #4]
 801aa08:	68db      	ldr	r3, [r3, #12]
 801aa0a:	2b00      	cmp	r3, #0
 801aa0c:	d101      	bne.n	801aa12 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 801aa0e:	2301      	movs	r3, #1
 801aa10:	e392      	b.n	801b138 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801aa12:	4b42      	ldr	r3, [pc, #264]	; (801ab1c <HAL_RCC_OscConfig+0x288>)
 801aa14:	681b      	ldr	r3, [r3, #0]
 801aa16:	f023 0219 	bic.w	r2, r3, #25
 801aa1a:	687b      	ldr	r3, [r7, #4]
 801aa1c:	68db      	ldr	r3, [r3, #12]
 801aa1e:	493f      	ldr	r1, [pc, #252]	; (801ab1c <HAL_RCC_OscConfig+0x288>)
 801aa20:	4313      	orrs	r3, r2
 801aa22:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801aa24:	f7fb fa54 	bl	8015ed0 <HAL_GetTick>
 801aa28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801aa2a:	e008      	b.n	801aa3e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801aa2c:	f7fb fa50 	bl	8015ed0 <HAL_GetTick>
 801aa30:	4602      	mov	r2, r0
 801aa32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa34:	1ad3      	subs	r3, r2, r3
 801aa36:	2b02      	cmp	r3, #2
 801aa38:	d901      	bls.n	801aa3e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 801aa3a:	2303      	movs	r3, #3
 801aa3c:	e37c      	b.n	801b138 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801aa3e:	4b37      	ldr	r3, [pc, #220]	; (801ab1c <HAL_RCC_OscConfig+0x288>)
 801aa40:	681b      	ldr	r3, [r3, #0]
 801aa42:	f003 0304 	and.w	r3, r3, #4
 801aa46:	2b00      	cmp	r3, #0
 801aa48:	d0f0      	beq.n	801aa2c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801aa4a:	f7fb fa71 	bl	8015f30 <HAL_GetREVID>
 801aa4e:	4603      	mov	r3, r0
 801aa50:	f241 0203 	movw	r2, #4099	; 0x1003
 801aa54:	4293      	cmp	r3, r2
 801aa56:	d817      	bhi.n	801aa88 <HAL_RCC_OscConfig+0x1f4>
 801aa58:	687b      	ldr	r3, [r7, #4]
 801aa5a:	691b      	ldr	r3, [r3, #16]
 801aa5c:	2b40      	cmp	r3, #64	; 0x40
 801aa5e:	d108      	bne.n	801aa72 <HAL_RCC_OscConfig+0x1de>
 801aa60:	4b2e      	ldr	r3, [pc, #184]	; (801ab1c <HAL_RCC_OscConfig+0x288>)
 801aa62:	685b      	ldr	r3, [r3, #4]
 801aa64:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 801aa68:	4a2c      	ldr	r2, [pc, #176]	; (801ab1c <HAL_RCC_OscConfig+0x288>)
 801aa6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801aa6e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801aa70:	e07a      	b.n	801ab68 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801aa72:	4b2a      	ldr	r3, [pc, #168]	; (801ab1c <HAL_RCC_OscConfig+0x288>)
 801aa74:	685b      	ldr	r3, [r3, #4]
 801aa76:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 801aa7a:	687b      	ldr	r3, [r7, #4]
 801aa7c:	691b      	ldr	r3, [r3, #16]
 801aa7e:	031b      	lsls	r3, r3, #12
 801aa80:	4926      	ldr	r1, [pc, #152]	; (801ab1c <HAL_RCC_OscConfig+0x288>)
 801aa82:	4313      	orrs	r3, r2
 801aa84:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801aa86:	e06f      	b.n	801ab68 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801aa88:	4b24      	ldr	r3, [pc, #144]	; (801ab1c <HAL_RCC_OscConfig+0x288>)
 801aa8a:	685b      	ldr	r3, [r3, #4]
 801aa8c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 801aa90:	687b      	ldr	r3, [r7, #4]
 801aa92:	691b      	ldr	r3, [r3, #16]
 801aa94:	061b      	lsls	r3, r3, #24
 801aa96:	4921      	ldr	r1, [pc, #132]	; (801ab1c <HAL_RCC_OscConfig+0x288>)
 801aa98:	4313      	orrs	r3, r2
 801aa9a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801aa9c:	e064      	b.n	801ab68 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 801aa9e:	687b      	ldr	r3, [r7, #4]
 801aaa0:	68db      	ldr	r3, [r3, #12]
 801aaa2:	2b00      	cmp	r3, #0
 801aaa4:	d047      	beq.n	801ab36 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801aaa6:	4b1d      	ldr	r3, [pc, #116]	; (801ab1c <HAL_RCC_OscConfig+0x288>)
 801aaa8:	681b      	ldr	r3, [r3, #0]
 801aaaa:	f023 0219 	bic.w	r2, r3, #25
 801aaae:	687b      	ldr	r3, [r7, #4]
 801aab0:	68db      	ldr	r3, [r3, #12]
 801aab2:	491a      	ldr	r1, [pc, #104]	; (801ab1c <HAL_RCC_OscConfig+0x288>)
 801aab4:	4313      	orrs	r3, r2
 801aab6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801aab8:	f7fb fa0a 	bl	8015ed0 <HAL_GetTick>
 801aabc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801aabe:	e008      	b.n	801aad2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801aac0:	f7fb fa06 	bl	8015ed0 <HAL_GetTick>
 801aac4:	4602      	mov	r2, r0
 801aac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aac8:	1ad3      	subs	r3, r2, r3
 801aaca:	2b02      	cmp	r3, #2
 801aacc:	d901      	bls.n	801aad2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 801aace:	2303      	movs	r3, #3
 801aad0:	e332      	b.n	801b138 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801aad2:	4b12      	ldr	r3, [pc, #72]	; (801ab1c <HAL_RCC_OscConfig+0x288>)
 801aad4:	681b      	ldr	r3, [r3, #0]
 801aad6:	f003 0304 	and.w	r3, r3, #4
 801aada:	2b00      	cmp	r3, #0
 801aadc:	d0f0      	beq.n	801aac0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801aade:	f7fb fa27 	bl	8015f30 <HAL_GetREVID>
 801aae2:	4603      	mov	r3, r0
 801aae4:	f241 0203 	movw	r2, #4099	; 0x1003
 801aae8:	4293      	cmp	r3, r2
 801aaea:	d819      	bhi.n	801ab20 <HAL_RCC_OscConfig+0x28c>
 801aaec:	687b      	ldr	r3, [r7, #4]
 801aaee:	691b      	ldr	r3, [r3, #16]
 801aaf0:	2b40      	cmp	r3, #64	; 0x40
 801aaf2:	d108      	bne.n	801ab06 <HAL_RCC_OscConfig+0x272>
 801aaf4:	4b09      	ldr	r3, [pc, #36]	; (801ab1c <HAL_RCC_OscConfig+0x288>)
 801aaf6:	685b      	ldr	r3, [r3, #4]
 801aaf8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 801aafc:	4a07      	ldr	r2, [pc, #28]	; (801ab1c <HAL_RCC_OscConfig+0x288>)
 801aafe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801ab02:	6053      	str	r3, [r2, #4]
 801ab04:	e030      	b.n	801ab68 <HAL_RCC_OscConfig+0x2d4>
 801ab06:	4b05      	ldr	r3, [pc, #20]	; (801ab1c <HAL_RCC_OscConfig+0x288>)
 801ab08:	685b      	ldr	r3, [r3, #4]
 801ab0a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 801ab0e:	687b      	ldr	r3, [r7, #4]
 801ab10:	691b      	ldr	r3, [r3, #16]
 801ab12:	031b      	lsls	r3, r3, #12
 801ab14:	4901      	ldr	r1, [pc, #4]	; (801ab1c <HAL_RCC_OscConfig+0x288>)
 801ab16:	4313      	orrs	r3, r2
 801ab18:	604b      	str	r3, [r1, #4]
 801ab1a:	e025      	b.n	801ab68 <HAL_RCC_OscConfig+0x2d4>
 801ab1c:	58024400 	.word	0x58024400
 801ab20:	4b9a      	ldr	r3, [pc, #616]	; (801ad8c <HAL_RCC_OscConfig+0x4f8>)
 801ab22:	685b      	ldr	r3, [r3, #4]
 801ab24:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 801ab28:	687b      	ldr	r3, [r7, #4]
 801ab2a:	691b      	ldr	r3, [r3, #16]
 801ab2c:	061b      	lsls	r3, r3, #24
 801ab2e:	4997      	ldr	r1, [pc, #604]	; (801ad8c <HAL_RCC_OscConfig+0x4f8>)
 801ab30:	4313      	orrs	r3, r2
 801ab32:	604b      	str	r3, [r1, #4]
 801ab34:	e018      	b.n	801ab68 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801ab36:	4b95      	ldr	r3, [pc, #596]	; (801ad8c <HAL_RCC_OscConfig+0x4f8>)
 801ab38:	681b      	ldr	r3, [r3, #0]
 801ab3a:	4a94      	ldr	r2, [pc, #592]	; (801ad8c <HAL_RCC_OscConfig+0x4f8>)
 801ab3c:	f023 0301 	bic.w	r3, r3, #1
 801ab40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801ab42:	f7fb f9c5 	bl	8015ed0 <HAL_GetTick>
 801ab46:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801ab48:	e008      	b.n	801ab5c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801ab4a:	f7fb f9c1 	bl	8015ed0 <HAL_GetTick>
 801ab4e:	4602      	mov	r2, r0
 801ab50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ab52:	1ad3      	subs	r3, r2, r3
 801ab54:	2b02      	cmp	r3, #2
 801ab56:	d901      	bls.n	801ab5c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 801ab58:	2303      	movs	r3, #3
 801ab5a:	e2ed      	b.n	801b138 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801ab5c:	4b8b      	ldr	r3, [pc, #556]	; (801ad8c <HAL_RCC_OscConfig+0x4f8>)
 801ab5e:	681b      	ldr	r3, [r3, #0]
 801ab60:	f003 0304 	and.w	r3, r3, #4
 801ab64:	2b00      	cmp	r3, #0
 801ab66:	d1f0      	bne.n	801ab4a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 801ab68:	687b      	ldr	r3, [r7, #4]
 801ab6a:	681b      	ldr	r3, [r3, #0]
 801ab6c:	f003 0310 	and.w	r3, r3, #16
 801ab70:	2b00      	cmp	r3, #0
 801ab72:	f000 80a9 	beq.w	801acc8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801ab76:	4b85      	ldr	r3, [pc, #532]	; (801ad8c <HAL_RCC_OscConfig+0x4f8>)
 801ab78:	691b      	ldr	r3, [r3, #16]
 801ab7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801ab7e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801ab80:	4b82      	ldr	r3, [pc, #520]	; (801ad8c <HAL_RCC_OscConfig+0x4f8>)
 801ab82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ab84:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 801ab86:	69bb      	ldr	r3, [r7, #24]
 801ab88:	2b08      	cmp	r3, #8
 801ab8a:	d007      	beq.n	801ab9c <HAL_RCC_OscConfig+0x308>
 801ab8c:	69bb      	ldr	r3, [r7, #24]
 801ab8e:	2b18      	cmp	r3, #24
 801ab90:	d13a      	bne.n	801ac08 <HAL_RCC_OscConfig+0x374>
 801ab92:	697b      	ldr	r3, [r7, #20]
 801ab94:	f003 0303 	and.w	r3, r3, #3
 801ab98:	2b01      	cmp	r3, #1
 801ab9a:	d135      	bne.n	801ac08 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801ab9c:	4b7b      	ldr	r3, [pc, #492]	; (801ad8c <HAL_RCC_OscConfig+0x4f8>)
 801ab9e:	681b      	ldr	r3, [r3, #0]
 801aba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801aba4:	2b00      	cmp	r3, #0
 801aba6:	d005      	beq.n	801abb4 <HAL_RCC_OscConfig+0x320>
 801aba8:	687b      	ldr	r3, [r7, #4]
 801abaa:	69db      	ldr	r3, [r3, #28]
 801abac:	2b80      	cmp	r3, #128	; 0x80
 801abae:	d001      	beq.n	801abb4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 801abb0:	2301      	movs	r3, #1
 801abb2:	e2c1      	b.n	801b138 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801abb4:	f7fb f9bc 	bl	8015f30 <HAL_GetREVID>
 801abb8:	4603      	mov	r3, r0
 801abba:	f241 0203 	movw	r2, #4099	; 0x1003
 801abbe:	4293      	cmp	r3, r2
 801abc0:	d817      	bhi.n	801abf2 <HAL_RCC_OscConfig+0x35e>
 801abc2:	687b      	ldr	r3, [r7, #4]
 801abc4:	6a1b      	ldr	r3, [r3, #32]
 801abc6:	2b20      	cmp	r3, #32
 801abc8:	d108      	bne.n	801abdc <HAL_RCC_OscConfig+0x348>
 801abca:	4b70      	ldr	r3, [pc, #448]	; (801ad8c <HAL_RCC_OscConfig+0x4f8>)
 801abcc:	685b      	ldr	r3, [r3, #4]
 801abce:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 801abd2:	4a6e      	ldr	r2, [pc, #440]	; (801ad8c <HAL_RCC_OscConfig+0x4f8>)
 801abd4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801abd8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801abda:	e075      	b.n	801acc8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801abdc:	4b6b      	ldr	r3, [pc, #428]	; (801ad8c <HAL_RCC_OscConfig+0x4f8>)
 801abde:	685b      	ldr	r3, [r3, #4]
 801abe0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 801abe4:	687b      	ldr	r3, [r7, #4]
 801abe6:	6a1b      	ldr	r3, [r3, #32]
 801abe8:	069b      	lsls	r3, r3, #26
 801abea:	4968      	ldr	r1, [pc, #416]	; (801ad8c <HAL_RCC_OscConfig+0x4f8>)
 801abec:	4313      	orrs	r3, r2
 801abee:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801abf0:	e06a      	b.n	801acc8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801abf2:	4b66      	ldr	r3, [pc, #408]	; (801ad8c <HAL_RCC_OscConfig+0x4f8>)
 801abf4:	68db      	ldr	r3, [r3, #12]
 801abf6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 801abfa:	687b      	ldr	r3, [r7, #4]
 801abfc:	6a1b      	ldr	r3, [r3, #32]
 801abfe:	061b      	lsls	r3, r3, #24
 801ac00:	4962      	ldr	r1, [pc, #392]	; (801ad8c <HAL_RCC_OscConfig+0x4f8>)
 801ac02:	4313      	orrs	r3, r2
 801ac04:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801ac06:	e05f      	b.n	801acc8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 801ac08:	687b      	ldr	r3, [r7, #4]
 801ac0a:	69db      	ldr	r3, [r3, #28]
 801ac0c:	2b00      	cmp	r3, #0
 801ac0e:	d042      	beq.n	801ac96 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 801ac10:	4b5e      	ldr	r3, [pc, #376]	; (801ad8c <HAL_RCC_OscConfig+0x4f8>)
 801ac12:	681b      	ldr	r3, [r3, #0]
 801ac14:	4a5d      	ldr	r2, [pc, #372]	; (801ad8c <HAL_RCC_OscConfig+0x4f8>)
 801ac16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ac1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801ac1c:	f7fb f958 	bl	8015ed0 <HAL_GetTick>
 801ac20:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801ac22:	e008      	b.n	801ac36 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 801ac24:	f7fb f954 	bl	8015ed0 <HAL_GetTick>
 801ac28:	4602      	mov	r2, r0
 801ac2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac2c:	1ad3      	subs	r3, r2, r3
 801ac2e:	2b02      	cmp	r3, #2
 801ac30:	d901      	bls.n	801ac36 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 801ac32:	2303      	movs	r3, #3
 801ac34:	e280      	b.n	801b138 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801ac36:	4b55      	ldr	r3, [pc, #340]	; (801ad8c <HAL_RCC_OscConfig+0x4f8>)
 801ac38:	681b      	ldr	r3, [r3, #0]
 801ac3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801ac3e:	2b00      	cmp	r3, #0
 801ac40:	d0f0      	beq.n	801ac24 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801ac42:	f7fb f975 	bl	8015f30 <HAL_GetREVID>
 801ac46:	4603      	mov	r3, r0
 801ac48:	f241 0203 	movw	r2, #4099	; 0x1003
 801ac4c:	4293      	cmp	r3, r2
 801ac4e:	d817      	bhi.n	801ac80 <HAL_RCC_OscConfig+0x3ec>
 801ac50:	687b      	ldr	r3, [r7, #4]
 801ac52:	6a1b      	ldr	r3, [r3, #32]
 801ac54:	2b20      	cmp	r3, #32
 801ac56:	d108      	bne.n	801ac6a <HAL_RCC_OscConfig+0x3d6>
 801ac58:	4b4c      	ldr	r3, [pc, #304]	; (801ad8c <HAL_RCC_OscConfig+0x4f8>)
 801ac5a:	685b      	ldr	r3, [r3, #4]
 801ac5c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 801ac60:	4a4a      	ldr	r2, [pc, #296]	; (801ad8c <HAL_RCC_OscConfig+0x4f8>)
 801ac62:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801ac66:	6053      	str	r3, [r2, #4]
 801ac68:	e02e      	b.n	801acc8 <HAL_RCC_OscConfig+0x434>
 801ac6a:	4b48      	ldr	r3, [pc, #288]	; (801ad8c <HAL_RCC_OscConfig+0x4f8>)
 801ac6c:	685b      	ldr	r3, [r3, #4]
 801ac6e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 801ac72:	687b      	ldr	r3, [r7, #4]
 801ac74:	6a1b      	ldr	r3, [r3, #32]
 801ac76:	069b      	lsls	r3, r3, #26
 801ac78:	4944      	ldr	r1, [pc, #272]	; (801ad8c <HAL_RCC_OscConfig+0x4f8>)
 801ac7a:	4313      	orrs	r3, r2
 801ac7c:	604b      	str	r3, [r1, #4]
 801ac7e:	e023      	b.n	801acc8 <HAL_RCC_OscConfig+0x434>
 801ac80:	4b42      	ldr	r3, [pc, #264]	; (801ad8c <HAL_RCC_OscConfig+0x4f8>)
 801ac82:	68db      	ldr	r3, [r3, #12]
 801ac84:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 801ac88:	687b      	ldr	r3, [r7, #4]
 801ac8a:	6a1b      	ldr	r3, [r3, #32]
 801ac8c:	061b      	lsls	r3, r3, #24
 801ac8e:	493f      	ldr	r1, [pc, #252]	; (801ad8c <HAL_RCC_OscConfig+0x4f8>)
 801ac90:	4313      	orrs	r3, r2
 801ac92:	60cb      	str	r3, [r1, #12]
 801ac94:	e018      	b.n	801acc8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 801ac96:	4b3d      	ldr	r3, [pc, #244]	; (801ad8c <HAL_RCC_OscConfig+0x4f8>)
 801ac98:	681b      	ldr	r3, [r3, #0]
 801ac9a:	4a3c      	ldr	r2, [pc, #240]	; (801ad8c <HAL_RCC_OscConfig+0x4f8>)
 801ac9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801aca0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801aca2:	f7fb f915 	bl	8015ed0 <HAL_GetTick>
 801aca6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801aca8:	e008      	b.n	801acbc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 801acaa:	f7fb f911 	bl	8015ed0 <HAL_GetTick>
 801acae:	4602      	mov	r2, r0
 801acb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801acb2:	1ad3      	subs	r3, r2, r3
 801acb4:	2b02      	cmp	r3, #2
 801acb6:	d901      	bls.n	801acbc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 801acb8:	2303      	movs	r3, #3
 801acba:	e23d      	b.n	801b138 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801acbc:	4b33      	ldr	r3, [pc, #204]	; (801ad8c <HAL_RCC_OscConfig+0x4f8>)
 801acbe:	681b      	ldr	r3, [r3, #0]
 801acc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801acc4:	2b00      	cmp	r3, #0
 801acc6:	d1f0      	bne.n	801acaa <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801acc8:	687b      	ldr	r3, [r7, #4]
 801acca:	681b      	ldr	r3, [r3, #0]
 801accc:	f003 0308 	and.w	r3, r3, #8
 801acd0:	2b00      	cmp	r3, #0
 801acd2:	d036      	beq.n	801ad42 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 801acd4:	687b      	ldr	r3, [r7, #4]
 801acd6:	695b      	ldr	r3, [r3, #20]
 801acd8:	2b00      	cmp	r3, #0
 801acda:	d019      	beq.n	801ad10 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801acdc:	4b2b      	ldr	r3, [pc, #172]	; (801ad8c <HAL_RCC_OscConfig+0x4f8>)
 801acde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801ace0:	4a2a      	ldr	r2, [pc, #168]	; (801ad8c <HAL_RCC_OscConfig+0x4f8>)
 801ace2:	f043 0301 	orr.w	r3, r3, #1
 801ace6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801ace8:	f7fb f8f2 	bl	8015ed0 <HAL_GetTick>
 801acec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801acee:	e008      	b.n	801ad02 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801acf0:	f7fb f8ee 	bl	8015ed0 <HAL_GetTick>
 801acf4:	4602      	mov	r2, r0
 801acf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801acf8:	1ad3      	subs	r3, r2, r3
 801acfa:	2b02      	cmp	r3, #2
 801acfc:	d901      	bls.n	801ad02 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 801acfe:	2303      	movs	r3, #3
 801ad00:	e21a      	b.n	801b138 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801ad02:	4b22      	ldr	r3, [pc, #136]	; (801ad8c <HAL_RCC_OscConfig+0x4f8>)
 801ad04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801ad06:	f003 0302 	and.w	r3, r3, #2
 801ad0a:	2b00      	cmp	r3, #0
 801ad0c:	d0f0      	beq.n	801acf0 <HAL_RCC_OscConfig+0x45c>
 801ad0e:	e018      	b.n	801ad42 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801ad10:	4b1e      	ldr	r3, [pc, #120]	; (801ad8c <HAL_RCC_OscConfig+0x4f8>)
 801ad12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801ad14:	4a1d      	ldr	r2, [pc, #116]	; (801ad8c <HAL_RCC_OscConfig+0x4f8>)
 801ad16:	f023 0301 	bic.w	r3, r3, #1
 801ad1a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801ad1c:	f7fb f8d8 	bl	8015ed0 <HAL_GetTick>
 801ad20:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801ad22:	e008      	b.n	801ad36 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801ad24:	f7fb f8d4 	bl	8015ed0 <HAL_GetTick>
 801ad28:	4602      	mov	r2, r0
 801ad2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad2c:	1ad3      	subs	r3, r2, r3
 801ad2e:	2b02      	cmp	r3, #2
 801ad30:	d901      	bls.n	801ad36 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 801ad32:	2303      	movs	r3, #3
 801ad34:	e200      	b.n	801b138 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801ad36:	4b15      	ldr	r3, [pc, #84]	; (801ad8c <HAL_RCC_OscConfig+0x4f8>)
 801ad38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801ad3a:	f003 0302 	and.w	r3, r3, #2
 801ad3e:	2b00      	cmp	r3, #0
 801ad40:	d1f0      	bne.n	801ad24 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801ad42:	687b      	ldr	r3, [r7, #4]
 801ad44:	681b      	ldr	r3, [r3, #0]
 801ad46:	f003 0320 	and.w	r3, r3, #32
 801ad4a:	2b00      	cmp	r3, #0
 801ad4c:	d039      	beq.n	801adc2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 801ad4e:	687b      	ldr	r3, [r7, #4]
 801ad50:	699b      	ldr	r3, [r3, #24]
 801ad52:	2b00      	cmp	r3, #0
 801ad54:	d01c      	beq.n	801ad90 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 801ad56:	4b0d      	ldr	r3, [pc, #52]	; (801ad8c <HAL_RCC_OscConfig+0x4f8>)
 801ad58:	681b      	ldr	r3, [r3, #0]
 801ad5a:	4a0c      	ldr	r2, [pc, #48]	; (801ad8c <HAL_RCC_OscConfig+0x4f8>)
 801ad5c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801ad60:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801ad62:	f7fb f8b5 	bl	8015ed0 <HAL_GetTick>
 801ad66:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801ad68:	e008      	b.n	801ad7c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801ad6a:	f7fb f8b1 	bl	8015ed0 <HAL_GetTick>
 801ad6e:	4602      	mov	r2, r0
 801ad70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad72:	1ad3      	subs	r3, r2, r3
 801ad74:	2b02      	cmp	r3, #2
 801ad76:	d901      	bls.n	801ad7c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 801ad78:	2303      	movs	r3, #3
 801ad7a:	e1dd      	b.n	801b138 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801ad7c:	4b03      	ldr	r3, [pc, #12]	; (801ad8c <HAL_RCC_OscConfig+0x4f8>)
 801ad7e:	681b      	ldr	r3, [r3, #0]
 801ad80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801ad84:	2b00      	cmp	r3, #0
 801ad86:	d0f0      	beq.n	801ad6a <HAL_RCC_OscConfig+0x4d6>
 801ad88:	e01b      	b.n	801adc2 <HAL_RCC_OscConfig+0x52e>
 801ad8a:	bf00      	nop
 801ad8c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 801ad90:	4b9b      	ldr	r3, [pc, #620]	; (801b000 <HAL_RCC_OscConfig+0x76c>)
 801ad92:	681b      	ldr	r3, [r3, #0]
 801ad94:	4a9a      	ldr	r2, [pc, #616]	; (801b000 <HAL_RCC_OscConfig+0x76c>)
 801ad96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801ad9a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801ad9c:	f7fb f898 	bl	8015ed0 <HAL_GetTick>
 801ada0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801ada2:	e008      	b.n	801adb6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801ada4:	f7fb f894 	bl	8015ed0 <HAL_GetTick>
 801ada8:	4602      	mov	r2, r0
 801adaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801adac:	1ad3      	subs	r3, r2, r3
 801adae:	2b02      	cmp	r3, #2
 801adb0:	d901      	bls.n	801adb6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 801adb2:	2303      	movs	r3, #3
 801adb4:	e1c0      	b.n	801b138 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801adb6:	4b92      	ldr	r3, [pc, #584]	; (801b000 <HAL_RCC_OscConfig+0x76c>)
 801adb8:	681b      	ldr	r3, [r3, #0]
 801adba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801adbe:	2b00      	cmp	r3, #0
 801adc0:	d1f0      	bne.n	801ada4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801adc2:	687b      	ldr	r3, [r7, #4]
 801adc4:	681b      	ldr	r3, [r3, #0]
 801adc6:	f003 0304 	and.w	r3, r3, #4
 801adca:	2b00      	cmp	r3, #0
 801adcc:	f000 8081 	beq.w	801aed2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 801add0:	4b8c      	ldr	r3, [pc, #560]	; (801b004 <HAL_RCC_OscConfig+0x770>)
 801add2:	681b      	ldr	r3, [r3, #0]
 801add4:	4a8b      	ldr	r2, [pc, #556]	; (801b004 <HAL_RCC_OscConfig+0x770>)
 801add6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801adda:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801addc:	f7fb f878 	bl	8015ed0 <HAL_GetTick>
 801ade0:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801ade2:	e008      	b.n	801adf6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801ade4:	f7fb f874 	bl	8015ed0 <HAL_GetTick>
 801ade8:	4602      	mov	r2, r0
 801adea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801adec:	1ad3      	subs	r3, r2, r3
 801adee:	2b64      	cmp	r3, #100	; 0x64
 801adf0:	d901      	bls.n	801adf6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 801adf2:	2303      	movs	r3, #3
 801adf4:	e1a0      	b.n	801b138 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801adf6:	4b83      	ldr	r3, [pc, #524]	; (801b004 <HAL_RCC_OscConfig+0x770>)
 801adf8:	681b      	ldr	r3, [r3, #0]
 801adfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801adfe:	2b00      	cmp	r3, #0
 801ae00:	d0f0      	beq.n	801ade4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801ae02:	687b      	ldr	r3, [r7, #4]
 801ae04:	689b      	ldr	r3, [r3, #8]
 801ae06:	2b01      	cmp	r3, #1
 801ae08:	d106      	bne.n	801ae18 <HAL_RCC_OscConfig+0x584>
 801ae0a:	4b7d      	ldr	r3, [pc, #500]	; (801b000 <HAL_RCC_OscConfig+0x76c>)
 801ae0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ae0e:	4a7c      	ldr	r2, [pc, #496]	; (801b000 <HAL_RCC_OscConfig+0x76c>)
 801ae10:	f043 0301 	orr.w	r3, r3, #1
 801ae14:	6713      	str	r3, [r2, #112]	; 0x70
 801ae16:	e02d      	b.n	801ae74 <HAL_RCC_OscConfig+0x5e0>
 801ae18:	687b      	ldr	r3, [r7, #4]
 801ae1a:	689b      	ldr	r3, [r3, #8]
 801ae1c:	2b00      	cmp	r3, #0
 801ae1e:	d10c      	bne.n	801ae3a <HAL_RCC_OscConfig+0x5a6>
 801ae20:	4b77      	ldr	r3, [pc, #476]	; (801b000 <HAL_RCC_OscConfig+0x76c>)
 801ae22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ae24:	4a76      	ldr	r2, [pc, #472]	; (801b000 <HAL_RCC_OscConfig+0x76c>)
 801ae26:	f023 0301 	bic.w	r3, r3, #1
 801ae2a:	6713      	str	r3, [r2, #112]	; 0x70
 801ae2c:	4b74      	ldr	r3, [pc, #464]	; (801b000 <HAL_RCC_OscConfig+0x76c>)
 801ae2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ae30:	4a73      	ldr	r2, [pc, #460]	; (801b000 <HAL_RCC_OscConfig+0x76c>)
 801ae32:	f023 0304 	bic.w	r3, r3, #4
 801ae36:	6713      	str	r3, [r2, #112]	; 0x70
 801ae38:	e01c      	b.n	801ae74 <HAL_RCC_OscConfig+0x5e0>
 801ae3a:	687b      	ldr	r3, [r7, #4]
 801ae3c:	689b      	ldr	r3, [r3, #8]
 801ae3e:	2b05      	cmp	r3, #5
 801ae40:	d10c      	bne.n	801ae5c <HAL_RCC_OscConfig+0x5c8>
 801ae42:	4b6f      	ldr	r3, [pc, #444]	; (801b000 <HAL_RCC_OscConfig+0x76c>)
 801ae44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ae46:	4a6e      	ldr	r2, [pc, #440]	; (801b000 <HAL_RCC_OscConfig+0x76c>)
 801ae48:	f043 0304 	orr.w	r3, r3, #4
 801ae4c:	6713      	str	r3, [r2, #112]	; 0x70
 801ae4e:	4b6c      	ldr	r3, [pc, #432]	; (801b000 <HAL_RCC_OscConfig+0x76c>)
 801ae50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ae52:	4a6b      	ldr	r2, [pc, #428]	; (801b000 <HAL_RCC_OscConfig+0x76c>)
 801ae54:	f043 0301 	orr.w	r3, r3, #1
 801ae58:	6713      	str	r3, [r2, #112]	; 0x70
 801ae5a:	e00b      	b.n	801ae74 <HAL_RCC_OscConfig+0x5e0>
 801ae5c:	4b68      	ldr	r3, [pc, #416]	; (801b000 <HAL_RCC_OscConfig+0x76c>)
 801ae5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ae60:	4a67      	ldr	r2, [pc, #412]	; (801b000 <HAL_RCC_OscConfig+0x76c>)
 801ae62:	f023 0301 	bic.w	r3, r3, #1
 801ae66:	6713      	str	r3, [r2, #112]	; 0x70
 801ae68:	4b65      	ldr	r3, [pc, #404]	; (801b000 <HAL_RCC_OscConfig+0x76c>)
 801ae6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ae6c:	4a64      	ldr	r2, [pc, #400]	; (801b000 <HAL_RCC_OscConfig+0x76c>)
 801ae6e:	f023 0304 	bic.w	r3, r3, #4
 801ae72:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801ae74:	687b      	ldr	r3, [r7, #4]
 801ae76:	689b      	ldr	r3, [r3, #8]
 801ae78:	2b00      	cmp	r3, #0
 801ae7a:	d015      	beq.n	801aea8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801ae7c:	f7fb f828 	bl	8015ed0 <HAL_GetTick>
 801ae80:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801ae82:	e00a      	b.n	801ae9a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801ae84:	f7fb f824 	bl	8015ed0 <HAL_GetTick>
 801ae88:	4602      	mov	r2, r0
 801ae8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ae8c:	1ad3      	subs	r3, r2, r3
 801ae8e:	f241 3288 	movw	r2, #5000	; 0x1388
 801ae92:	4293      	cmp	r3, r2
 801ae94:	d901      	bls.n	801ae9a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 801ae96:	2303      	movs	r3, #3
 801ae98:	e14e      	b.n	801b138 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801ae9a:	4b59      	ldr	r3, [pc, #356]	; (801b000 <HAL_RCC_OscConfig+0x76c>)
 801ae9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ae9e:	f003 0302 	and.w	r3, r3, #2
 801aea2:	2b00      	cmp	r3, #0
 801aea4:	d0ee      	beq.n	801ae84 <HAL_RCC_OscConfig+0x5f0>
 801aea6:	e014      	b.n	801aed2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801aea8:	f7fb f812 	bl	8015ed0 <HAL_GetTick>
 801aeac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801aeae:	e00a      	b.n	801aec6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801aeb0:	f7fb f80e 	bl	8015ed0 <HAL_GetTick>
 801aeb4:	4602      	mov	r2, r0
 801aeb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aeb8:	1ad3      	subs	r3, r2, r3
 801aeba:	f241 3288 	movw	r2, #5000	; 0x1388
 801aebe:	4293      	cmp	r3, r2
 801aec0:	d901      	bls.n	801aec6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 801aec2:	2303      	movs	r3, #3
 801aec4:	e138      	b.n	801b138 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801aec6:	4b4e      	ldr	r3, [pc, #312]	; (801b000 <HAL_RCC_OscConfig+0x76c>)
 801aec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801aeca:	f003 0302 	and.w	r3, r3, #2
 801aece:	2b00      	cmp	r3, #0
 801aed0:	d1ee      	bne.n	801aeb0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801aed2:	687b      	ldr	r3, [r7, #4]
 801aed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801aed6:	2b00      	cmp	r3, #0
 801aed8:	f000 812d 	beq.w	801b136 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 801aedc:	4b48      	ldr	r3, [pc, #288]	; (801b000 <HAL_RCC_OscConfig+0x76c>)
 801aede:	691b      	ldr	r3, [r3, #16]
 801aee0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801aee4:	2b18      	cmp	r3, #24
 801aee6:	f000 80bd 	beq.w	801b064 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801aeea:	687b      	ldr	r3, [r7, #4]
 801aeec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801aeee:	2b02      	cmp	r3, #2
 801aef0:	f040 809e 	bne.w	801b030 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801aef4:	4b42      	ldr	r3, [pc, #264]	; (801b000 <HAL_RCC_OscConfig+0x76c>)
 801aef6:	681b      	ldr	r3, [r3, #0]
 801aef8:	4a41      	ldr	r2, [pc, #260]	; (801b000 <HAL_RCC_OscConfig+0x76c>)
 801aefa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801aefe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801af00:	f7fa ffe6 	bl	8015ed0 <HAL_GetTick>
 801af04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801af06:	e008      	b.n	801af1a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801af08:	f7fa ffe2 	bl	8015ed0 <HAL_GetTick>
 801af0c:	4602      	mov	r2, r0
 801af0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801af10:	1ad3      	subs	r3, r2, r3
 801af12:	2b02      	cmp	r3, #2
 801af14:	d901      	bls.n	801af1a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 801af16:	2303      	movs	r3, #3
 801af18:	e10e      	b.n	801b138 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801af1a:	4b39      	ldr	r3, [pc, #228]	; (801b000 <HAL_RCC_OscConfig+0x76c>)
 801af1c:	681b      	ldr	r3, [r3, #0]
 801af1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801af22:	2b00      	cmp	r3, #0
 801af24:	d1f0      	bne.n	801af08 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801af26:	4b36      	ldr	r3, [pc, #216]	; (801b000 <HAL_RCC_OscConfig+0x76c>)
 801af28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801af2a:	4b37      	ldr	r3, [pc, #220]	; (801b008 <HAL_RCC_OscConfig+0x774>)
 801af2c:	4013      	ands	r3, r2
 801af2e:	687a      	ldr	r2, [r7, #4]
 801af30:	6a91      	ldr	r1, [r2, #40]	; 0x28
 801af32:	687a      	ldr	r2, [r7, #4]
 801af34:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801af36:	0112      	lsls	r2, r2, #4
 801af38:	430a      	orrs	r2, r1
 801af3a:	4931      	ldr	r1, [pc, #196]	; (801b000 <HAL_RCC_OscConfig+0x76c>)
 801af3c:	4313      	orrs	r3, r2
 801af3e:	628b      	str	r3, [r1, #40]	; 0x28
 801af40:	687b      	ldr	r3, [r7, #4]
 801af42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801af44:	3b01      	subs	r3, #1
 801af46:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801af4a:	687b      	ldr	r3, [r7, #4]
 801af4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801af4e:	3b01      	subs	r3, #1
 801af50:	025b      	lsls	r3, r3, #9
 801af52:	b29b      	uxth	r3, r3
 801af54:	431a      	orrs	r2, r3
 801af56:	687b      	ldr	r3, [r7, #4]
 801af58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801af5a:	3b01      	subs	r3, #1
 801af5c:	041b      	lsls	r3, r3, #16
 801af5e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 801af62:	431a      	orrs	r2, r3
 801af64:	687b      	ldr	r3, [r7, #4]
 801af66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801af68:	3b01      	subs	r3, #1
 801af6a:	061b      	lsls	r3, r3, #24
 801af6c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 801af70:	4923      	ldr	r1, [pc, #140]	; (801b000 <HAL_RCC_OscConfig+0x76c>)
 801af72:	4313      	orrs	r3, r2
 801af74:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 801af76:	4b22      	ldr	r3, [pc, #136]	; (801b000 <HAL_RCC_OscConfig+0x76c>)
 801af78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801af7a:	4a21      	ldr	r2, [pc, #132]	; (801b000 <HAL_RCC_OscConfig+0x76c>)
 801af7c:	f023 0301 	bic.w	r3, r3, #1
 801af80:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801af82:	4b1f      	ldr	r3, [pc, #124]	; (801b000 <HAL_RCC_OscConfig+0x76c>)
 801af84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801af86:	4b21      	ldr	r3, [pc, #132]	; (801b00c <HAL_RCC_OscConfig+0x778>)
 801af88:	4013      	ands	r3, r2
 801af8a:	687a      	ldr	r2, [r7, #4]
 801af8c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 801af8e:	00d2      	lsls	r2, r2, #3
 801af90:	491b      	ldr	r1, [pc, #108]	; (801b000 <HAL_RCC_OscConfig+0x76c>)
 801af92:	4313      	orrs	r3, r2
 801af94:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 801af96:	4b1a      	ldr	r3, [pc, #104]	; (801b000 <HAL_RCC_OscConfig+0x76c>)
 801af98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801af9a:	f023 020c 	bic.w	r2, r3, #12
 801af9e:	687b      	ldr	r3, [r7, #4]
 801afa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801afa2:	4917      	ldr	r1, [pc, #92]	; (801b000 <HAL_RCC_OscConfig+0x76c>)
 801afa4:	4313      	orrs	r3, r2
 801afa6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 801afa8:	4b15      	ldr	r3, [pc, #84]	; (801b000 <HAL_RCC_OscConfig+0x76c>)
 801afaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801afac:	f023 0202 	bic.w	r2, r3, #2
 801afb0:	687b      	ldr	r3, [r7, #4]
 801afb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801afb4:	4912      	ldr	r1, [pc, #72]	; (801b000 <HAL_RCC_OscConfig+0x76c>)
 801afb6:	4313      	orrs	r3, r2
 801afb8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 801afba:	4b11      	ldr	r3, [pc, #68]	; (801b000 <HAL_RCC_OscConfig+0x76c>)
 801afbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801afbe:	4a10      	ldr	r2, [pc, #64]	; (801b000 <HAL_RCC_OscConfig+0x76c>)
 801afc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801afc4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801afc6:	4b0e      	ldr	r3, [pc, #56]	; (801b000 <HAL_RCC_OscConfig+0x76c>)
 801afc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801afca:	4a0d      	ldr	r2, [pc, #52]	; (801b000 <HAL_RCC_OscConfig+0x76c>)
 801afcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801afd0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 801afd2:	4b0b      	ldr	r3, [pc, #44]	; (801b000 <HAL_RCC_OscConfig+0x76c>)
 801afd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801afd6:	4a0a      	ldr	r2, [pc, #40]	; (801b000 <HAL_RCC_OscConfig+0x76c>)
 801afd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801afdc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 801afde:	4b08      	ldr	r3, [pc, #32]	; (801b000 <HAL_RCC_OscConfig+0x76c>)
 801afe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801afe2:	4a07      	ldr	r2, [pc, #28]	; (801b000 <HAL_RCC_OscConfig+0x76c>)
 801afe4:	f043 0301 	orr.w	r3, r3, #1
 801afe8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801afea:	4b05      	ldr	r3, [pc, #20]	; (801b000 <HAL_RCC_OscConfig+0x76c>)
 801afec:	681b      	ldr	r3, [r3, #0]
 801afee:	4a04      	ldr	r2, [pc, #16]	; (801b000 <HAL_RCC_OscConfig+0x76c>)
 801aff0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801aff4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801aff6:	f7fa ff6b 	bl	8015ed0 <HAL_GetTick>
 801affa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801affc:	e011      	b.n	801b022 <HAL_RCC_OscConfig+0x78e>
 801affe:	bf00      	nop
 801b000:	58024400 	.word	0x58024400
 801b004:	58024800 	.word	0x58024800
 801b008:	fffffc0c 	.word	0xfffffc0c
 801b00c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801b010:	f7fa ff5e 	bl	8015ed0 <HAL_GetTick>
 801b014:	4602      	mov	r2, r0
 801b016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b018:	1ad3      	subs	r3, r2, r3
 801b01a:	2b02      	cmp	r3, #2
 801b01c:	d901      	bls.n	801b022 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 801b01e:	2303      	movs	r3, #3
 801b020:	e08a      	b.n	801b138 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801b022:	4b47      	ldr	r3, [pc, #284]	; (801b140 <HAL_RCC_OscConfig+0x8ac>)
 801b024:	681b      	ldr	r3, [r3, #0]
 801b026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801b02a:	2b00      	cmp	r3, #0
 801b02c:	d0f0      	beq.n	801b010 <HAL_RCC_OscConfig+0x77c>
 801b02e:	e082      	b.n	801b136 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801b030:	4b43      	ldr	r3, [pc, #268]	; (801b140 <HAL_RCC_OscConfig+0x8ac>)
 801b032:	681b      	ldr	r3, [r3, #0]
 801b034:	4a42      	ldr	r2, [pc, #264]	; (801b140 <HAL_RCC_OscConfig+0x8ac>)
 801b036:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801b03a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b03c:	f7fa ff48 	bl	8015ed0 <HAL_GetTick>
 801b040:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801b042:	e008      	b.n	801b056 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801b044:	f7fa ff44 	bl	8015ed0 <HAL_GetTick>
 801b048:	4602      	mov	r2, r0
 801b04a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b04c:	1ad3      	subs	r3, r2, r3
 801b04e:	2b02      	cmp	r3, #2
 801b050:	d901      	bls.n	801b056 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 801b052:	2303      	movs	r3, #3
 801b054:	e070      	b.n	801b138 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801b056:	4b3a      	ldr	r3, [pc, #232]	; (801b140 <HAL_RCC_OscConfig+0x8ac>)
 801b058:	681b      	ldr	r3, [r3, #0]
 801b05a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801b05e:	2b00      	cmp	r3, #0
 801b060:	d1f0      	bne.n	801b044 <HAL_RCC_OscConfig+0x7b0>
 801b062:	e068      	b.n	801b136 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 801b064:	4b36      	ldr	r3, [pc, #216]	; (801b140 <HAL_RCC_OscConfig+0x8ac>)
 801b066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b068:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 801b06a:	4b35      	ldr	r3, [pc, #212]	; (801b140 <HAL_RCC_OscConfig+0x8ac>)
 801b06c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b06e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801b070:	687b      	ldr	r3, [r7, #4]
 801b072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b074:	2b01      	cmp	r3, #1
 801b076:	d031      	beq.n	801b0dc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801b078:	693b      	ldr	r3, [r7, #16]
 801b07a:	f003 0203 	and.w	r2, r3, #3
 801b07e:	687b      	ldr	r3, [r7, #4]
 801b080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801b082:	429a      	cmp	r2, r3
 801b084:	d12a      	bne.n	801b0dc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801b086:	693b      	ldr	r3, [r7, #16]
 801b088:	091b      	lsrs	r3, r3, #4
 801b08a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801b08e:	687b      	ldr	r3, [r7, #4]
 801b090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801b092:	429a      	cmp	r2, r3
 801b094:	d122      	bne.n	801b0dc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801b096:	68fb      	ldr	r3, [r7, #12]
 801b098:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801b09c:	687b      	ldr	r3, [r7, #4]
 801b09e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b0a0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801b0a2:	429a      	cmp	r2, r3
 801b0a4:	d11a      	bne.n	801b0dc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801b0a6:	68fb      	ldr	r3, [r7, #12]
 801b0a8:	0a5b      	lsrs	r3, r3, #9
 801b0aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801b0ae:	687b      	ldr	r3, [r7, #4]
 801b0b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b0b2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801b0b4:	429a      	cmp	r2, r3
 801b0b6:	d111      	bne.n	801b0dc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 801b0b8:	68fb      	ldr	r3, [r7, #12]
 801b0ba:	0c1b      	lsrs	r3, r3, #16
 801b0bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801b0c0:	687b      	ldr	r3, [r7, #4]
 801b0c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b0c4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801b0c6:	429a      	cmp	r2, r3
 801b0c8:	d108      	bne.n	801b0dc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 801b0ca:	68fb      	ldr	r3, [r7, #12]
 801b0cc:	0e1b      	lsrs	r3, r3, #24
 801b0ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801b0d2:	687b      	ldr	r3, [r7, #4]
 801b0d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b0d6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 801b0d8:	429a      	cmp	r2, r3
 801b0da:	d001      	beq.n	801b0e0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 801b0dc:	2301      	movs	r3, #1
 801b0de:	e02b      	b.n	801b138 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 801b0e0:	4b17      	ldr	r3, [pc, #92]	; (801b140 <HAL_RCC_OscConfig+0x8ac>)
 801b0e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b0e4:	08db      	lsrs	r3, r3, #3
 801b0e6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b0ea:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 801b0ec:	687b      	ldr	r3, [r7, #4]
 801b0ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b0f0:	693a      	ldr	r2, [r7, #16]
 801b0f2:	429a      	cmp	r2, r3
 801b0f4:	d01f      	beq.n	801b136 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 801b0f6:	4b12      	ldr	r3, [pc, #72]	; (801b140 <HAL_RCC_OscConfig+0x8ac>)
 801b0f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b0fa:	4a11      	ldr	r2, [pc, #68]	; (801b140 <HAL_RCC_OscConfig+0x8ac>)
 801b0fc:	f023 0301 	bic.w	r3, r3, #1
 801b100:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 801b102:	f7fa fee5 	bl	8015ed0 <HAL_GetTick>
 801b106:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 801b108:	bf00      	nop
 801b10a:	f7fa fee1 	bl	8015ed0 <HAL_GetTick>
 801b10e:	4602      	mov	r2, r0
 801b110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b112:	4293      	cmp	r3, r2
 801b114:	d0f9      	beq.n	801b10a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801b116:	4b0a      	ldr	r3, [pc, #40]	; (801b140 <HAL_RCC_OscConfig+0x8ac>)
 801b118:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801b11a:	4b0a      	ldr	r3, [pc, #40]	; (801b144 <HAL_RCC_OscConfig+0x8b0>)
 801b11c:	4013      	ands	r3, r2
 801b11e:	687a      	ldr	r2, [r7, #4]
 801b120:	6c92      	ldr	r2, [r2, #72]	; 0x48
 801b122:	00d2      	lsls	r2, r2, #3
 801b124:	4906      	ldr	r1, [pc, #24]	; (801b140 <HAL_RCC_OscConfig+0x8ac>)
 801b126:	4313      	orrs	r3, r2
 801b128:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 801b12a:	4b05      	ldr	r3, [pc, #20]	; (801b140 <HAL_RCC_OscConfig+0x8ac>)
 801b12c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b12e:	4a04      	ldr	r2, [pc, #16]	; (801b140 <HAL_RCC_OscConfig+0x8ac>)
 801b130:	f043 0301 	orr.w	r3, r3, #1
 801b134:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 801b136:	2300      	movs	r3, #0
}
 801b138:	4618      	mov	r0, r3
 801b13a:	3730      	adds	r7, #48	; 0x30
 801b13c:	46bd      	mov	sp, r7
 801b13e:	bd80      	pop	{r7, pc}
 801b140:	58024400 	.word	0x58024400
 801b144:	ffff0007 	.word	0xffff0007

0801b148 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801b148:	b580      	push	{r7, lr}
 801b14a:	b086      	sub	sp, #24
 801b14c:	af00      	add	r7, sp, #0
 801b14e:	6078      	str	r0, [r7, #4]
 801b150:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801b152:	687b      	ldr	r3, [r7, #4]
 801b154:	2b00      	cmp	r3, #0
 801b156:	d101      	bne.n	801b15c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801b158:	2301      	movs	r3, #1
 801b15a:	e19c      	b.n	801b496 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801b15c:	4b8a      	ldr	r3, [pc, #552]	; (801b388 <HAL_RCC_ClockConfig+0x240>)
 801b15e:	681b      	ldr	r3, [r3, #0]
 801b160:	f003 030f 	and.w	r3, r3, #15
 801b164:	683a      	ldr	r2, [r7, #0]
 801b166:	429a      	cmp	r2, r3
 801b168:	d910      	bls.n	801b18c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801b16a:	4b87      	ldr	r3, [pc, #540]	; (801b388 <HAL_RCC_ClockConfig+0x240>)
 801b16c:	681b      	ldr	r3, [r3, #0]
 801b16e:	f023 020f 	bic.w	r2, r3, #15
 801b172:	4985      	ldr	r1, [pc, #532]	; (801b388 <HAL_RCC_ClockConfig+0x240>)
 801b174:	683b      	ldr	r3, [r7, #0]
 801b176:	4313      	orrs	r3, r2
 801b178:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801b17a:	4b83      	ldr	r3, [pc, #524]	; (801b388 <HAL_RCC_ClockConfig+0x240>)
 801b17c:	681b      	ldr	r3, [r3, #0]
 801b17e:	f003 030f 	and.w	r3, r3, #15
 801b182:	683a      	ldr	r2, [r7, #0]
 801b184:	429a      	cmp	r2, r3
 801b186:	d001      	beq.n	801b18c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 801b188:	2301      	movs	r3, #1
 801b18a:	e184      	b.n	801b496 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801b18c:	687b      	ldr	r3, [r7, #4]
 801b18e:	681b      	ldr	r3, [r3, #0]
 801b190:	f003 0304 	and.w	r3, r3, #4
 801b194:	2b00      	cmp	r3, #0
 801b196:	d010      	beq.n	801b1ba <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801b198:	687b      	ldr	r3, [r7, #4]
 801b19a:	691a      	ldr	r2, [r3, #16]
 801b19c:	4b7b      	ldr	r3, [pc, #492]	; (801b38c <HAL_RCC_ClockConfig+0x244>)
 801b19e:	699b      	ldr	r3, [r3, #24]
 801b1a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801b1a4:	429a      	cmp	r2, r3
 801b1a6:	d908      	bls.n	801b1ba <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 801b1a8:	4b78      	ldr	r3, [pc, #480]	; (801b38c <HAL_RCC_ClockConfig+0x244>)
 801b1aa:	699b      	ldr	r3, [r3, #24]
 801b1ac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801b1b0:	687b      	ldr	r3, [r7, #4]
 801b1b2:	691b      	ldr	r3, [r3, #16]
 801b1b4:	4975      	ldr	r1, [pc, #468]	; (801b38c <HAL_RCC_ClockConfig+0x244>)
 801b1b6:	4313      	orrs	r3, r2
 801b1b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801b1ba:	687b      	ldr	r3, [r7, #4]
 801b1bc:	681b      	ldr	r3, [r3, #0]
 801b1be:	f003 0308 	and.w	r3, r3, #8
 801b1c2:	2b00      	cmp	r3, #0
 801b1c4:	d010      	beq.n	801b1e8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801b1c6:	687b      	ldr	r3, [r7, #4]
 801b1c8:	695a      	ldr	r2, [r3, #20]
 801b1ca:	4b70      	ldr	r3, [pc, #448]	; (801b38c <HAL_RCC_ClockConfig+0x244>)
 801b1cc:	69db      	ldr	r3, [r3, #28]
 801b1ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801b1d2:	429a      	cmp	r2, r3
 801b1d4:	d908      	bls.n	801b1e8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801b1d6:	4b6d      	ldr	r3, [pc, #436]	; (801b38c <HAL_RCC_ClockConfig+0x244>)
 801b1d8:	69db      	ldr	r3, [r3, #28]
 801b1da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801b1de:	687b      	ldr	r3, [r7, #4]
 801b1e0:	695b      	ldr	r3, [r3, #20]
 801b1e2:	496a      	ldr	r1, [pc, #424]	; (801b38c <HAL_RCC_ClockConfig+0x244>)
 801b1e4:	4313      	orrs	r3, r2
 801b1e6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801b1e8:	687b      	ldr	r3, [r7, #4]
 801b1ea:	681b      	ldr	r3, [r3, #0]
 801b1ec:	f003 0310 	and.w	r3, r3, #16
 801b1f0:	2b00      	cmp	r3, #0
 801b1f2:	d010      	beq.n	801b216 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801b1f4:	687b      	ldr	r3, [r7, #4]
 801b1f6:	699a      	ldr	r2, [r3, #24]
 801b1f8:	4b64      	ldr	r3, [pc, #400]	; (801b38c <HAL_RCC_ClockConfig+0x244>)
 801b1fa:	69db      	ldr	r3, [r3, #28]
 801b1fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801b200:	429a      	cmp	r2, r3
 801b202:	d908      	bls.n	801b216 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801b204:	4b61      	ldr	r3, [pc, #388]	; (801b38c <HAL_RCC_ClockConfig+0x244>)
 801b206:	69db      	ldr	r3, [r3, #28]
 801b208:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 801b20c:	687b      	ldr	r3, [r7, #4]
 801b20e:	699b      	ldr	r3, [r3, #24]
 801b210:	495e      	ldr	r1, [pc, #376]	; (801b38c <HAL_RCC_ClockConfig+0x244>)
 801b212:	4313      	orrs	r3, r2
 801b214:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801b216:	687b      	ldr	r3, [r7, #4]
 801b218:	681b      	ldr	r3, [r3, #0]
 801b21a:	f003 0320 	and.w	r3, r3, #32
 801b21e:	2b00      	cmp	r3, #0
 801b220:	d010      	beq.n	801b244 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801b222:	687b      	ldr	r3, [r7, #4]
 801b224:	69da      	ldr	r2, [r3, #28]
 801b226:	4b59      	ldr	r3, [pc, #356]	; (801b38c <HAL_RCC_ClockConfig+0x244>)
 801b228:	6a1b      	ldr	r3, [r3, #32]
 801b22a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801b22e:	429a      	cmp	r2, r3
 801b230:	d908      	bls.n	801b244 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801b232:	4b56      	ldr	r3, [pc, #344]	; (801b38c <HAL_RCC_ClockConfig+0x244>)
 801b234:	6a1b      	ldr	r3, [r3, #32]
 801b236:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801b23a:	687b      	ldr	r3, [r7, #4]
 801b23c:	69db      	ldr	r3, [r3, #28]
 801b23e:	4953      	ldr	r1, [pc, #332]	; (801b38c <HAL_RCC_ClockConfig+0x244>)
 801b240:	4313      	orrs	r3, r2
 801b242:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801b244:	687b      	ldr	r3, [r7, #4]
 801b246:	681b      	ldr	r3, [r3, #0]
 801b248:	f003 0302 	and.w	r3, r3, #2
 801b24c:	2b00      	cmp	r3, #0
 801b24e:	d010      	beq.n	801b272 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801b250:	687b      	ldr	r3, [r7, #4]
 801b252:	68da      	ldr	r2, [r3, #12]
 801b254:	4b4d      	ldr	r3, [pc, #308]	; (801b38c <HAL_RCC_ClockConfig+0x244>)
 801b256:	699b      	ldr	r3, [r3, #24]
 801b258:	f003 030f 	and.w	r3, r3, #15
 801b25c:	429a      	cmp	r2, r3
 801b25e:	d908      	bls.n	801b272 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801b260:	4b4a      	ldr	r3, [pc, #296]	; (801b38c <HAL_RCC_ClockConfig+0x244>)
 801b262:	699b      	ldr	r3, [r3, #24]
 801b264:	f023 020f 	bic.w	r2, r3, #15
 801b268:	687b      	ldr	r3, [r7, #4]
 801b26a:	68db      	ldr	r3, [r3, #12]
 801b26c:	4947      	ldr	r1, [pc, #284]	; (801b38c <HAL_RCC_ClockConfig+0x244>)
 801b26e:	4313      	orrs	r3, r2
 801b270:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801b272:	687b      	ldr	r3, [r7, #4]
 801b274:	681b      	ldr	r3, [r3, #0]
 801b276:	f003 0301 	and.w	r3, r3, #1
 801b27a:	2b00      	cmp	r3, #0
 801b27c:	d055      	beq.n	801b32a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 801b27e:	4b43      	ldr	r3, [pc, #268]	; (801b38c <HAL_RCC_ClockConfig+0x244>)
 801b280:	699b      	ldr	r3, [r3, #24]
 801b282:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 801b286:	687b      	ldr	r3, [r7, #4]
 801b288:	689b      	ldr	r3, [r3, #8]
 801b28a:	4940      	ldr	r1, [pc, #256]	; (801b38c <HAL_RCC_ClockConfig+0x244>)
 801b28c:	4313      	orrs	r3, r2
 801b28e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801b290:	687b      	ldr	r3, [r7, #4]
 801b292:	685b      	ldr	r3, [r3, #4]
 801b294:	2b02      	cmp	r3, #2
 801b296:	d107      	bne.n	801b2a8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801b298:	4b3c      	ldr	r3, [pc, #240]	; (801b38c <HAL_RCC_ClockConfig+0x244>)
 801b29a:	681b      	ldr	r3, [r3, #0]
 801b29c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801b2a0:	2b00      	cmp	r3, #0
 801b2a2:	d121      	bne.n	801b2e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801b2a4:	2301      	movs	r3, #1
 801b2a6:	e0f6      	b.n	801b496 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801b2a8:	687b      	ldr	r3, [r7, #4]
 801b2aa:	685b      	ldr	r3, [r3, #4]
 801b2ac:	2b03      	cmp	r3, #3
 801b2ae:	d107      	bne.n	801b2c0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801b2b0:	4b36      	ldr	r3, [pc, #216]	; (801b38c <HAL_RCC_ClockConfig+0x244>)
 801b2b2:	681b      	ldr	r3, [r3, #0]
 801b2b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801b2b8:	2b00      	cmp	r3, #0
 801b2ba:	d115      	bne.n	801b2e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801b2bc:	2301      	movs	r3, #1
 801b2be:	e0ea      	b.n	801b496 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 801b2c0:	687b      	ldr	r3, [r7, #4]
 801b2c2:	685b      	ldr	r3, [r3, #4]
 801b2c4:	2b01      	cmp	r3, #1
 801b2c6:	d107      	bne.n	801b2d8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801b2c8:	4b30      	ldr	r3, [pc, #192]	; (801b38c <HAL_RCC_ClockConfig+0x244>)
 801b2ca:	681b      	ldr	r3, [r3, #0]
 801b2cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b2d0:	2b00      	cmp	r3, #0
 801b2d2:	d109      	bne.n	801b2e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801b2d4:	2301      	movs	r3, #1
 801b2d6:	e0de      	b.n	801b496 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801b2d8:	4b2c      	ldr	r3, [pc, #176]	; (801b38c <HAL_RCC_ClockConfig+0x244>)
 801b2da:	681b      	ldr	r3, [r3, #0]
 801b2dc:	f003 0304 	and.w	r3, r3, #4
 801b2e0:	2b00      	cmp	r3, #0
 801b2e2:	d101      	bne.n	801b2e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801b2e4:	2301      	movs	r3, #1
 801b2e6:	e0d6      	b.n	801b496 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801b2e8:	4b28      	ldr	r3, [pc, #160]	; (801b38c <HAL_RCC_ClockConfig+0x244>)
 801b2ea:	691b      	ldr	r3, [r3, #16]
 801b2ec:	f023 0207 	bic.w	r2, r3, #7
 801b2f0:	687b      	ldr	r3, [r7, #4]
 801b2f2:	685b      	ldr	r3, [r3, #4]
 801b2f4:	4925      	ldr	r1, [pc, #148]	; (801b38c <HAL_RCC_ClockConfig+0x244>)
 801b2f6:	4313      	orrs	r3, r2
 801b2f8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801b2fa:	f7fa fde9 	bl	8015ed0 <HAL_GetTick>
 801b2fe:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801b300:	e00a      	b.n	801b318 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801b302:	f7fa fde5 	bl	8015ed0 <HAL_GetTick>
 801b306:	4602      	mov	r2, r0
 801b308:	697b      	ldr	r3, [r7, #20]
 801b30a:	1ad3      	subs	r3, r2, r3
 801b30c:	f241 3288 	movw	r2, #5000	; 0x1388
 801b310:	4293      	cmp	r3, r2
 801b312:	d901      	bls.n	801b318 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 801b314:	2303      	movs	r3, #3
 801b316:	e0be      	b.n	801b496 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801b318:	4b1c      	ldr	r3, [pc, #112]	; (801b38c <HAL_RCC_ClockConfig+0x244>)
 801b31a:	691b      	ldr	r3, [r3, #16]
 801b31c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 801b320:	687b      	ldr	r3, [r7, #4]
 801b322:	685b      	ldr	r3, [r3, #4]
 801b324:	00db      	lsls	r3, r3, #3
 801b326:	429a      	cmp	r2, r3
 801b328:	d1eb      	bne.n	801b302 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801b32a:	687b      	ldr	r3, [r7, #4]
 801b32c:	681b      	ldr	r3, [r3, #0]
 801b32e:	f003 0302 	and.w	r3, r3, #2
 801b332:	2b00      	cmp	r3, #0
 801b334:	d010      	beq.n	801b358 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801b336:	687b      	ldr	r3, [r7, #4]
 801b338:	68da      	ldr	r2, [r3, #12]
 801b33a:	4b14      	ldr	r3, [pc, #80]	; (801b38c <HAL_RCC_ClockConfig+0x244>)
 801b33c:	699b      	ldr	r3, [r3, #24]
 801b33e:	f003 030f 	and.w	r3, r3, #15
 801b342:	429a      	cmp	r2, r3
 801b344:	d208      	bcs.n	801b358 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801b346:	4b11      	ldr	r3, [pc, #68]	; (801b38c <HAL_RCC_ClockConfig+0x244>)
 801b348:	699b      	ldr	r3, [r3, #24]
 801b34a:	f023 020f 	bic.w	r2, r3, #15
 801b34e:	687b      	ldr	r3, [r7, #4]
 801b350:	68db      	ldr	r3, [r3, #12]
 801b352:	490e      	ldr	r1, [pc, #56]	; (801b38c <HAL_RCC_ClockConfig+0x244>)
 801b354:	4313      	orrs	r3, r2
 801b356:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801b358:	4b0b      	ldr	r3, [pc, #44]	; (801b388 <HAL_RCC_ClockConfig+0x240>)
 801b35a:	681b      	ldr	r3, [r3, #0]
 801b35c:	f003 030f 	and.w	r3, r3, #15
 801b360:	683a      	ldr	r2, [r7, #0]
 801b362:	429a      	cmp	r2, r3
 801b364:	d214      	bcs.n	801b390 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801b366:	4b08      	ldr	r3, [pc, #32]	; (801b388 <HAL_RCC_ClockConfig+0x240>)
 801b368:	681b      	ldr	r3, [r3, #0]
 801b36a:	f023 020f 	bic.w	r2, r3, #15
 801b36e:	4906      	ldr	r1, [pc, #24]	; (801b388 <HAL_RCC_ClockConfig+0x240>)
 801b370:	683b      	ldr	r3, [r7, #0]
 801b372:	4313      	orrs	r3, r2
 801b374:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801b376:	4b04      	ldr	r3, [pc, #16]	; (801b388 <HAL_RCC_ClockConfig+0x240>)
 801b378:	681b      	ldr	r3, [r3, #0]
 801b37a:	f003 030f 	and.w	r3, r3, #15
 801b37e:	683a      	ldr	r2, [r7, #0]
 801b380:	429a      	cmp	r2, r3
 801b382:	d005      	beq.n	801b390 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 801b384:	2301      	movs	r3, #1
 801b386:	e086      	b.n	801b496 <HAL_RCC_ClockConfig+0x34e>
 801b388:	52002000 	.word	0x52002000
 801b38c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801b390:	687b      	ldr	r3, [r7, #4]
 801b392:	681b      	ldr	r3, [r3, #0]
 801b394:	f003 0304 	and.w	r3, r3, #4
 801b398:	2b00      	cmp	r3, #0
 801b39a:	d010      	beq.n	801b3be <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801b39c:	687b      	ldr	r3, [r7, #4]
 801b39e:	691a      	ldr	r2, [r3, #16]
 801b3a0:	4b3f      	ldr	r3, [pc, #252]	; (801b4a0 <HAL_RCC_ClockConfig+0x358>)
 801b3a2:	699b      	ldr	r3, [r3, #24]
 801b3a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801b3a8:	429a      	cmp	r2, r3
 801b3aa:	d208      	bcs.n	801b3be <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 801b3ac:	4b3c      	ldr	r3, [pc, #240]	; (801b4a0 <HAL_RCC_ClockConfig+0x358>)
 801b3ae:	699b      	ldr	r3, [r3, #24]
 801b3b0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801b3b4:	687b      	ldr	r3, [r7, #4]
 801b3b6:	691b      	ldr	r3, [r3, #16]
 801b3b8:	4939      	ldr	r1, [pc, #228]	; (801b4a0 <HAL_RCC_ClockConfig+0x358>)
 801b3ba:	4313      	orrs	r3, r2
 801b3bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801b3be:	687b      	ldr	r3, [r7, #4]
 801b3c0:	681b      	ldr	r3, [r3, #0]
 801b3c2:	f003 0308 	and.w	r3, r3, #8
 801b3c6:	2b00      	cmp	r3, #0
 801b3c8:	d010      	beq.n	801b3ec <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801b3ca:	687b      	ldr	r3, [r7, #4]
 801b3cc:	695a      	ldr	r2, [r3, #20]
 801b3ce:	4b34      	ldr	r3, [pc, #208]	; (801b4a0 <HAL_RCC_ClockConfig+0x358>)
 801b3d0:	69db      	ldr	r3, [r3, #28]
 801b3d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801b3d6:	429a      	cmp	r2, r3
 801b3d8:	d208      	bcs.n	801b3ec <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801b3da:	4b31      	ldr	r3, [pc, #196]	; (801b4a0 <HAL_RCC_ClockConfig+0x358>)
 801b3dc:	69db      	ldr	r3, [r3, #28]
 801b3de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801b3e2:	687b      	ldr	r3, [r7, #4]
 801b3e4:	695b      	ldr	r3, [r3, #20]
 801b3e6:	492e      	ldr	r1, [pc, #184]	; (801b4a0 <HAL_RCC_ClockConfig+0x358>)
 801b3e8:	4313      	orrs	r3, r2
 801b3ea:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801b3ec:	687b      	ldr	r3, [r7, #4]
 801b3ee:	681b      	ldr	r3, [r3, #0]
 801b3f0:	f003 0310 	and.w	r3, r3, #16
 801b3f4:	2b00      	cmp	r3, #0
 801b3f6:	d010      	beq.n	801b41a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801b3f8:	687b      	ldr	r3, [r7, #4]
 801b3fa:	699a      	ldr	r2, [r3, #24]
 801b3fc:	4b28      	ldr	r3, [pc, #160]	; (801b4a0 <HAL_RCC_ClockConfig+0x358>)
 801b3fe:	69db      	ldr	r3, [r3, #28]
 801b400:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801b404:	429a      	cmp	r2, r3
 801b406:	d208      	bcs.n	801b41a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801b408:	4b25      	ldr	r3, [pc, #148]	; (801b4a0 <HAL_RCC_ClockConfig+0x358>)
 801b40a:	69db      	ldr	r3, [r3, #28]
 801b40c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 801b410:	687b      	ldr	r3, [r7, #4]
 801b412:	699b      	ldr	r3, [r3, #24]
 801b414:	4922      	ldr	r1, [pc, #136]	; (801b4a0 <HAL_RCC_ClockConfig+0x358>)
 801b416:	4313      	orrs	r3, r2
 801b418:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801b41a:	687b      	ldr	r3, [r7, #4]
 801b41c:	681b      	ldr	r3, [r3, #0]
 801b41e:	f003 0320 	and.w	r3, r3, #32
 801b422:	2b00      	cmp	r3, #0
 801b424:	d010      	beq.n	801b448 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801b426:	687b      	ldr	r3, [r7, #4]
 801b428:	69da      	ldr	r2, [r3, #28]
 801b42a:	4b1d      	ldr	r3, [pc, #116]	; (801b4a0 <HAL_RCC_ClockConfig+0x358>)
 801b42c:	6a1b      	ldr	r3, [r3, #32]
 801b42e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801b432:	429a      	cmp	r2, r3
 801b434:	d208      	bcs.n	801b448 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801b436:	4b1a      	ldr	r3, [pc, #104]	; (801b4a0 <HAL_RCC_ClockConfig+0x358>)
 801b438:	6a1b      	ldr	r3, [r3, #32]
 801b43a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801b43e:	687b      	ldr	r3, [r7, #4]
 801b440:	69db      	ldr	r3, [r3, #28]
 801b442:	4917      	ldr	r1, [pc, #92]	; (801b4a0 <HAL_RCC_ClockConfig+0x358>)
 801b444:	4313      	orrs	r3, r2
 801b446:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 801b448:	f000 f834 	bl	801b4b4 <HAL_RCC_GetSysClockFreq>
 801b44c:	4602      	mov	r2, r0
 801b44e:	4b14      	ldr	r3, [pc, #80]	; (801b4a0 <HAL_RCC_ClockConfig+0x358>)
 801b450:	699b      	ldr	r3, [r3, #24]
 801b452:	0a1b      	lsrs	r3, r3, #8
 801b454:	f003 030f 	and.w	r3, r3, #15
 801b458:	4912      	ldr	r1, [pc, #72]	; (801b4a4 <HAL_RCC_ClockConfig+0x35c>)
 801b45a:	5ccb      	ldrb	r3, [r1, r3]
 801b45c:	f003 031f 	and.w	r3, r3, #31
 801b460:	fa22 f303 	lsr.w	r3, r2, r3
 801b464:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801b466:	4b0e      	ldr	r3, [pc, #56]	; (801b4a0 <HAL_RCC_ClockConfig+0x358>)
 801b468:	699b      	ldr	r3, [r3, #24]
 801b46a:	f003 030f 	and.w	r3, r3, #15
 801b46e:	4a0d      	ldr	r2, [pc, #52]	; (801b4a4 <HAL_RCC_ClockConfig+0x35c>)
 801b470:	5cd3      	ldrb	r3, [r2, r3]
 801b472:	f003 031f 	and.w	r3, r3, #31
 801b476:	693a      	ldr	r2, [r7, #16]
 801b478:	fa22 f303 	lsr.w	r3, r2, r3
 801b47c:	4a0a      	ldr	r2, [pc, #40]	; (801b4a8 <HAL_RCC_ClockConfig+0x360>)
 801b47e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801b480:	4a0a      	ldr	r2, [pc, #40]	; (801b4ac <HAL_RCC_ClockConfig+0x364>)
 801b482:	693b      	ldr	r3, [r7, #16]
 801b484:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 801b486:	4b0a      	ldr	r3, [pc, #40]	; (801b4b0 <HAL_RCC_ClockConfig+0x368>)
 801b488:	681b      	ldr	r3, [r3, #0]
 801b48a:	4618      	mov	r0, r3
 801b48c:	f7fa fcd6 	bl	8015e3c <HAL_InitTick>
 801b490:	4603      	mov	r3, r0
 801b492:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 801b494:	7bfb      	ldrb	r3, [r7, #15]
}
 801b496:	4618      	mov	r0, r3
 801b498:	3718      	adds	r7, #24
 801b49a:	46bd      	mov	sp, r7
 801b49c:	bd80      	pop	{r7, pc}
 801b49e:	bf00      	nop
 801b4a0:	58024400 	.word	0x58024400
 801b4a4:	08072a10 	.word	0x08072a10
 801b4a8:	24000008 	.word	0x24000008
 801b4ac:	24000004 	.word	0x24000004
 801b4b0:	2400000c 	.word	0x2400000c

0801b4b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801b4b4:	b480      	push	{r7}
 801b4b6:	b089      	sub	sp, #36	; 0x24
 801b4b8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 801b4ba:	4bb3      	ldr	r3, [pc, #716]	; (801b788 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801b4bc:	691b      	ldr	r3, [r3, #16]
 801b4be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801b4c2:	2b18      	cmp	r3, #24
 801b4c4:	f200 8155 	bhi.w	801b772 <HAL_RCC_GetSysClockFreq+0x2be>
 801b4c8:	a201      	add	r2, pc, #4	; (adr r2, 801b4d0 <HAL_RCC_GetSysClockFreq+0x1c>)
 801b4ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b4ce:	bf00      	nop
 801b4d0:	0801b535 	.word	0x0801b535
 801b4d4:	0801b773 	.word	0x0801b773
 801b4d8:	0801b773 	.word	0x0801b773
 801b4dc:	0801b773 	.word	0x0801b773
 801b4e0:	0801b773 	.word	0x0801b773
 801b4e4:	0801b773 	.word	0x0801b773
 801b4e8:	0801b773 	.word	0x0801b773
 801b4ec:	0801b773 	.word	0x0801b773
 801b4f0:	0801b55b 	.word	0x0801b55b
 801b4f4:	0801b773 	.word	0x0801b773
 801b4f8:	0801b773 	.word	0x0801b773
 801b4fc:	0801b773 	.word	0x0801b773
 801b500:	0801b773 	.word	0x0801b773
 801b504:	0801b773 	.word	0x0801b773
 801b508:	0801b773 	.word	0x0801b773
 801b50c:	0801b773 	.word	0x0801b773
 801b510:	0801b561 	.word	0x0801b561
 801b514:	0801b773 	.word	0x0801b773
 801b518:	0801b773 	.word	0x0801b773
 801b51c:	0801b773 	.word	0x0801b773
 801b520:	0801b773 	.word	0x0801b773
 801b524:	0801b773 	.word	0x0801b773
 801b528:	0801b773 	.word	0x0801b773
 801b52c:	0801b773 	.word	0x0801b773
 801b530:	0801b567 	.word	0x0801b567
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801b534:	4b94      	ldr	r3, [pc, #592]	; (801b788 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801b536:	681b      	ldr	r3, [r3, #0]
 801b538:	f003 0320 	and.w	r3, r3, #32
 801b53c:	2b00      	cmp	r3, #0
 801b53e:	d009      	beq.n	801b554 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801b540:	4b91      	ldr	r3, [pc, #580]	; (801b788 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801b542:	681b      	ldr	r3, [r3, #0]
 801b544:	08db      	lsrs	r3, r3, #3
 801b546:	f003 0303 	and.w	r3, r3, #3
 801b54a:	4a90      	ldr	r2, [pc, #576]	; (801b78c <HAL_RCC_GetSysClockFreq+0x2d8>)
 801b54c:	fa22 f303 	lsr.w	r3, r2, r3
 801b550:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 801b552:	e111      	b.n	801b778 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 801b554:	4b8d      	ldr	r3, [pc, #564]	; (801b78c <HAL_RCC_GetSysClockFreq+0x2d8>)
 801b556:	61bb      	str	r3, [r7, #24]
      break;
 801b558:	e10e      	b.n	801b778 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 801b55a:	4b8d      	ldr	r3, [pc, #564]	; (801b790 <HAL_RCC_GetSysClockFreq+0x2dc>)
 801b55c:	61bb      	str	r3, [r7, #24]
      break;
 801b55e:	e10b      	b.n	801b778 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 801b560:	4b8c      	ldr	r3, [pc, #560]	; (801b794 <HAL_RCC_GetSysClockFreq+0x2e0>)
 801b562:	61bb      	str	r3, [r7, #24]
      break;
 801b564:	e108      	b.n	801b778 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801b566:	4b88      	ldr	r3, [pc, #544]	; (801b788 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801b568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b56a:	f003 0303 	and.w	r3, r3, #3
 801b56e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 801b570:	4b85      	ldr	r3, [pc, #532]	; (801b788 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801b572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b574:	091b      	lsrs	r3, r3, #4
 801b576:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b57a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 801b57c:	4b82      	ldr	r3, [pc, #520]	; (801b788 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801b57e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b580:	f003 0301 	and.w	r3, r3, #1
 801b584:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 801b586:	4b80      	ldr	r3, [pc, #512]	; (801b788 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801b588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b58a:	08db      	lsrs	r3, r3, #3
 801b58c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b590:	68fa      	ldr	r2, [r7, #12]
 801b592:	fb02 f303 	mul.w	r3, r2, r3
 801b596:	ee07 3a90 	vmov	s15, r3
 801b59a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801b59e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 801b5a2:	693b      	ldr	r3, [r7, #16]
 801b5a4:	2b00      	cmp	r3, #0
 801b5a6:	f000 80e1 	beq.w	801b76c <HAL_RCC_GetSysClockFreq+0x2b8>
 801b5aa:	697b      	ldr	r3, [r7, #20]
 801b5ac:	2b02      	cmp	r3, #2
 801b5ae:	f000 8083 	beq.w	801b6b8 <HAL_RCC_GetSysClockFreq+0x204>
 801b5b2:	697b      	ldr	r3, [r7, #20]
 801b5b4:	2b02      	cmp	r3, #2
 801b5b6:	f200 80a1 	bhi.w	801b6fc <HAL_RCC_GetSysClockFreq+0x248>
 801b5ba:	697b      	ldr	r3, [r7, #20]
 801b5bc:	2b00      	cmp	r3, #0
 801b5be:	d003      	beq.n	801b5c8 <HAL_RCC_GetSysClockFreq+0x114>
 801b5c0:	697b      	ldr	r3, [r7, #20]
 801b5c2:	2b01      	cmp	r3, #1
 801b5c4:	d056      	beq.n	801b674 <HAL_RCC_GetSysClockFreq+0x1c0>
 801b5c6:	e099      	b.n	801b6fc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801b5c8:	4b6f      	ldr	r3, [pc, #444]	; (801b788 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801b5ca:	681b      	ldr	r3, [r3, #0]
 801b5cc:	f003 0320 	and.w	r3, r3, #32
 801b5d0:	2b00      	cmp	r3, #0
 801b5d2:	d02d      	beq.n	801b630 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801b5d4:	4b6c      	ldr	r3, [pc, #432]	; (801b788 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801b5d6:	681b      	ldr	r3, [r3, #0]
 801b5d8:	08db      	lsrs	r3, r3, #3
 801b5da:	f003 0303 	and.w	r3, r3, #3
 801b5de:	4a6b      	ldr	r2, [pc, #428]	; (801b78c <HAL_RCC_GetSysClockFreq+0x2d8>)
 801b5e0:	fa22 f303 	lsr.w	r3, r2, r3
 801b5e4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801b5e6:	687b      	ldr	r3, [r7, #4]
 801b5e8:	ee07 3a90 	vmov	s15, r3
 801b5ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801b5f0:	693b      	ldr	r3, [r7, #16]
 801b5f2:	ee07 3a90 	vmov	s15, r3
 801b5f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801b5fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801b5fe:	4b62      	ldr	r3, [pc, #392]	; (801b788 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801b600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b602:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801b606:	ee07 3a90 	vmov	s15, r3
 801b60a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801b60e:	ed97 6a02 	vldr	s12, [r7, #8]
 801b612:	eddf 5a61 	vldr	s11, [pc, #388]	; 801b798 <HAL_RCC_GetSysClockFreq+0x2e4>
 801b616:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801b61a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801b61e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b622:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801b626:	ee67 7a27 	vmul.f32	s15, s14, s15
 801b62a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 801b62e:	e087      	b.n	801b740 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801b630:	693b      	ldr	r3, [r7, #16]
 801b632:	ee07 3a90 	vmov	s15, r3
 801b636:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801b63a:	eddf 6a58 	vldr	s13, [pc, #352]	; 801b79c <HAL_RCC_GetSysClockFreq+0x2e8>
 801b63e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801b642:	4b51      	ldr	r3, [pc, #324]	; (801b788 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801b644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b646:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801b64a:	ee07 3a90 	vmov	s15, r3
 801b64e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801b652:	ed97 6a02 	vldr	s12, [r7, #8]
 801b656:	eddf 5a50 	vldr	s11, [pc, #320]	; 801b798 <HAL_RCC_GetSysClockFreq+0x2e4>
 801b65a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801b65e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801b662:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b666:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801b66a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801b66e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801b672:	e065      	b.n	801b740 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801b674:	693b      	ldr	r3, [r7, #16]
 801b676:	ee07 3a90 	vmov	s15, r3
 801b67a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801b67e:	eddf 6a48 	vldr	s13, [pc, #288]	; 801b7a0 <HAL_RCC_GetSysClockFreq+0x2ec>
 801b682:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801b686:	4b40      	ldr	r3, [pc, #256]	; (801b788 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801b688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b68a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801b68e:	ee07 3a90 	vmov	s15, r3
 801b692:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801b696:	ed97 6a02 	vldr	s12, [r7, #8]
 801b69a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 801b798 <HAL_RCC_GetSysClockFreq+0x2e4>
 801b69e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801b6a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801b6a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b6aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801b6ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 801b6b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801b6b6:	e043      	b.n	801b740 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801b6b8:	693b      	ldr	r3, [r7, #16]
 801b6ba:	ee07 3a90 	vmov	s15, r3
 801b6be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801b6c2:	eddf 6a38 	vldr	s13, [pc, #224]	; 801b7a4 <HAL_RCC_GetSysClockFreq+0x2f0>
 801b6c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801b6ca:	4b2f      	ldr	r3, [pc, #188]	; (801b788 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801b6cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b6ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801b6d2:	ee07 3a90 	vmov	s15, r3
 801b6d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801b6da:	ed97 6a02 	vldr	s12, [r7, #8]
 801b6de:	eddf 5a2e 	vldr	s11, [pc, #184]	; 801b798 <HAL_RCC_GetSysClockFreq+0x2e4>
 801b6e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801b6e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801b6ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b6ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801b6f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 801b6f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801b6fa:	e021      	b.n	801b740 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801b6fc:	693b      	ldr	r3, [r7, #16]
 801b6fe:	ee07 3a90 	vmov	s15, r3
 801b702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801b706:	eddf 6a26 	vldr	s13, [pc, #152]	; 801b7a0 <HAL_RCC_GetSysClockFreq+0x2ec>
 801b70a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801b70e:	4b1e      	ldr	r3, [pc, #120]	; (801b788 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801b710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b712:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801b716:	ee07 3a90 	vmov	s15, r3
 801b71a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801b71e:	ed97 6a02 	vldr	s12, [r7, #8]
 801b722:	eddf 5a1d 	vldr	s11, [pc, #116]	; 801b798 <HAL_RCC_GetSysClockFreq+0x2e4>
 801b726:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801b72a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801b72e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b732:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801b736:	ee67 7a27 	vmul.f32	s15, s14, s15
 801b73a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801b73e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 801b740:	4b11      	ldr	r3, [pc, #68]	; (801b788 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801b742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b744:	0a5b      	lsrs	r3, r3, #9
 801b746:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801b74a:	3301      	adds	r3, #1
 801b74c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 801b74e:	683b      	ldr	r3, [r7, #0]
 801b750:	ee07 3a90 	vmov	s15, r3
 801b754:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801b758:	edd7 6a07 	vldr	s13, [r7, #28]
 801b75c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801b760:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801b764:	ee17 3a90 	vmov	r3, s15
 801b768:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 801b76a:	e005      	b.n	801b778 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 801b76c:	2300      	movs	r3, #0
 801b76e:	61bb      	str	r3, [r7, #24]
      break;
 801b770:	e002      	b.n	801b778 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 801b772:	4b07      	ldr	r3, [pc, #28]	; (801b790 <HAL_RCC_GetSysClockFreq+0x2dc>)
 801b774:	61bb      	str	r3, [r7, #24]
      break;
 801b776:	bf00      	nop
  }

  return sysclockfreq;
 801b778:	69bb      	ldr	r3, [r7, #24]
}
 801b77a:	4618      	mov	r0, r3
 801b77c:	3724      	adds	r7, #36	; 0x24
 801b77e:	46bd      	mov	sp, r7
 801b780:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b784:	4770      	bx	lr
 801b786:	bf00      	nop
 801b788:	58024400 	.word	0x58024400
 801b78c:	03d09000 	.word	0x03d09000
 801b790:	003d0900 	.word	0x003d0900
 801b794:	017d7840 	.word	0x017d7840
 801b798:	46000000 	.word	0x46000000
 801b79c:	4c742400 	.word	0x4c742400
 801b7a0:	4a742400 	.word	0x4a742400
 801b7a4:	4bbebc20 	.word	0x4bbebc20

0801b7a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801b7a8:	b580      	push	{r7, lr}
 801b7aa:	b082      	sub	sp, #8
 801b7ac:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 801b7ae:	f7ff fe81 	bl	801b4b4 <HAL_RCC_GetSysClockFreq>
 801b7b2:	4602      	mov	r2, r0
 801b7b4:	4b10      	ldr	r3, [pc, #64]	; (801b7f8 <HAL_RCC_GetHCLKFreq+0x50>)
 801b7b6:	699b      	ldr	r3, [r3, #24]
 801b7b8:	0a1b      	lsrs	r3, r3, #8
 801b7ba:	f003 030f 	and.w	r3, r3, #15
 801b7be:	490f      	ldr	r1, [pc, #60]	; (801b7fc <HAL_RCC_GetHCLKFreq+0x54>)
 801b7c0:	5ccb      	ldrb	r3, [r1, r3]
 801b7c2:	f003 031f 	and.w	r3, r3, #31
 801b7c6:	fa22 f303 	lsr.w	r3, r2, r3
 801b7ca:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801b7cc:	4b0a      	ldr	r3, [pc, #40]	; (801b7f8 <HAL_RCC_GetHCLKFreq+0x50>)
 801b7ce:	699b      	ldr	r3, [r3, #24]
 801b7d0:	f003 030f 	and.w	r3, r3, #15
 801b7d4:	4a09      	ldr	r2, [pc, #36]	; (801b7fc <HAL_RCC_GetHCLKFreq+0x54>)
 801b7d6:	5cd3      	ldrb	r3, [r2, r3]
 801b7d8:	f003 031f 	and.w	r3, r3, #31
 801b7dc:	687a      	ldr	r2, [r7, #4]
 801b7de:	fa22 f303 	lsr.w	r3, r2, r3
 801b7e2:	4a07      	ldr	r2, [pc, #28]	; (801b800 <HAL_RCC_GetHCLKFreq+0x58>)
 801b7e4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801b7e6:	4a07      	ldr	r2, [pc, #28]	; (801b804 <HAL_RCC_GetHCLKFreq+0x5c>)
 801b7e8:	687b      	ldr	r3, [r7, #4]
 801b7ea:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 801b7ec:	4b04      	ldr	r3, [pc, #16]	; (801b800 <HAL_RCC_GetHCLKFreq+0x58>)
 801b7ee:	681b      	ldr	r3, [r3, #0]
}
 801b7f0:	4618      	mov	r0, r3
 801b7f2:	3708      	adds	r7, #8
 801b7f4:	46bd      	mov	sp, r7
 801b7f6:	bd80      	pop	{r7, pc}
 801b7f8:	58024400 	.word	0x58024400
 801b7fc:	08072a10 	.word	0x08072a10
 801b800:	24000008 	.word	0x24000008
 801b804:	24000004 	.word	0x24000004

0801b808 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801b808:	b580      	push	{r7, lr}
 801b80a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 801b80c:	f7ff ffcc 	bl	801b7a8 <HAL_RCC_GetHCLKFreq>
 801b810:	4602      	mov	r2, r0
 801b812:	4b06      	ldr	r3, [pc, #24]	; (801b82c <HAL_RCC_GetPCLK1Freq+0x24>)
 801b814:	69db      	ldr	r3, [r3, #28]
 801b816:	091b      	lsrs	r3, r3, #4
 801b818:	f003 0307 	and.w	r3, r3, #7
 801b81c:	4904      	ldr	r1, [pc, #16]	; (801b830 <HAL_RCC_GetPCLK1Freq+0x28>)
 801b81e:	5ccb      	ldrb	r3, [r1, r3]
 801b820:	f003 031f 	and.w	r3, r3, #31
 801b824:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 801b828:	4618      	mov	r0, r3
 801b82a:	bd80      	pop	{r7, pc}
 801b82c:	58024400 	.word	0x58024400
 801b830:	08072a10 	.word	0x08072a10

0801b834 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801b834:	b580      	push	{r7, lr}
 801b836:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 801b838:	f7ff ffb6 	bl	801b7a8 <HAL_RCC_GetHCLKFreq>
 801b83c:	4602      	mov	r2, r0
 801b83e:	4b06      	ldr	r3, [pc, #24]	; (801b858 <HAL_RCC_GetPCLK2Freq+0x24>)
 801b840:	69db      	ldr	r3, [r3, #28]
 801b842:	0a1b      	lsrs	r3, r3, #8
 801b844:	f003 0307 	and.w	r3, r3, #7
 801b848:	4904      	ldr	r1, [pc, #16]	; (801b85c <HAL_RCC_GetPCLK2Freq+0x28>)
 801b84a:	5ccb      	ldrb	r3, [r1, r3]
 801b84c:	f003 031f 	and.w	r3, r3, #31
 801b850:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 801b854:	4618      	mov	r0, r3
 801b856:	bd80      	pop	{r7, pc}
 801b858:	58024400 	.word	0x58024400
 801b85c:	08072a10 	.word	0x08072a10

0801b860 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801b860:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801b864:	b0ca      	sub	sp, #296	; 0x128
 801b866:	af00      	add	r7, sp, #0
 801b868:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 801b86c:	2300      	movs	r3, #0
 801b86e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 801b872:	2300      	movs	r3, #0
 801b874:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801b878:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b87c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b880:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 801b884:	2500      	movs	r5, #0
 801b886:	ea54 0305 	orrs.w	r3, r4, r5
 801b88a:	d049      	beq.n	801b920 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 801b88c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b890:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801b892:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 801b896:	d02f      	beq.n	801b8f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 801b898:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 801b89c:	d828      	bhi.n	801b8f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 801b89e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801b8a2:	d01a      	beq.n	801b8da <HAL_RCCEx_PeriphCLKConfig+0x7a>
 801b8a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801b8a8:	d822      	bhi.n	801b8f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 801b8aa:	2b00      	cmp	r3, #0
 801b8ac:	d003      	beq.n	801b8b6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 801b8ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801b8b2:	d007      	beq.n	801b8c4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 801b8b4:	e01c      	b.n	801b8f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801b8b6:	4bb8      	ldr	r3, [pc, #736]	; (801bb98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801b8b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b8ba:	4ab7      	ldr	r2, [pc, #732]	; (801bb98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801b8bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801b8c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801b8c2:	e01a      	b.n	801b8fa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801b8c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b8c8:	3308      	adds	r3, #8
 801b8ca:	2102      	movs	r1, #2
 801b8cc:	4618      	mov	r0, r3
 801b8ce:	f001 fc8f 	bl	801d1f0 <RCCEx_PLL2_Config>
 801b8d2:	4603      	mov	r3, r0
 801b8d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801b8d8:	e00f      	b.n	801b8fa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801b8da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b8de:	3328      	adds	r3, #40	; 0x28
 801b8e0:	2102      	movs	r1, #2
 801b8e2:	4618      	mov	r0, r3
 801b8e4:	f001 fd36 	bl	801d354 <RCCEx_PLL3_Config>
 801b8e8:	4603      	mov	r3, r0
 801b8ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801b8ee:	e004      	b.n	801b8fa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801b8f0:	2301      	movs	r3, #1
 801b8f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 801b8f6:	e000      	b.n	801b8fa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 801b8f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 801b8fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801b8fe:	2b00      	cmp	r3, #0
 801b900:	d10a      	bne.n	801b918 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 801b902:	4ba5      	ldr	r3, [pc, #660]	; (801bb98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801b904:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b906:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 801b90a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b90e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801b910:	4aa1      	ldr	r2, [pc, #644]	; (801bb98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801b912:	430b      	orrs	r3, r1
 801b914:	6513      	str	r3, [r2, #80]	; 0x50
 801b916:	e003      	b.n	801b920 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801b918:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801b91c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 801b920:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b924:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b928:	f402 7880 	and.w	r8, r2, #256	; 0x100
 801b92c:	f04f 0900 	mov.w	r9, #0
 801b930:	ea58 0309 	orrs.w	r3, r8, r9
 801b934:	d047      	beq.n	801b9c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 801b936:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b93a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b93c:	2b04      	cmp	r3, #4
 801b93e:	d82a      	bhi.n	801b996 <HAL_RCCEx_PeriphCLKConfig+0x136>
 801b940:	a201      	add	r2, pc, #4	; (adr r2, 801b948 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 801b942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b946:	bf00      	nop
 801b948:	0801b95d 	.word	0x0801b95d
 801b94c:	0801b96b 	.word	0x0801b96b
 801b950:	0801b981 	.word	0x0801b981
 801b954:	0801b99f 	.word	0x0801b99f
 801b958:	0801b99f 	.word	0x0801b99f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801b95c:	4b8e      	ldr	r3, [pc, #568]	; (801bb98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801b95e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b960:	4a8d      	ldr	r2, [pc, #564]	; (801bb98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801b962:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801b966:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801b968:	e01a      	b.n	801b9a0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801b96a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b96e:	3308      	adds	r3, #8
 801b970:	2100      	movs	r1, #0
 801b972:	4618      	mov	r0, r3
 801b974:	f001 fc3c 	bl	801d1f0 <RCCEx_PLL2_Config>
 801b978:	4603      	mov	r3, r0
 801b97a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801b97e:	e00f      	b.n	801b9a0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801b980:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b984:	3328      	adds	r3, #40	; 0x28
 801b986:	2100      	movs	r1, #0
 801b988:	4618      	mov	r0, r3
 801b98a:	f001 fce3 	bl	801d354 <RCCEx_PLL3_Config>
 801b98e:	4603      	mov	r3, r0
 801b990:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801b994:	e004      	b.n	801b9a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801b996:	2301      	movs	r3, #1
 801b998:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 801b99c:	e000      	b.n	801b9a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 801b99e:	bf00      	nop
    }

    if (ret == HAL_OK)
 801b9a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801b9a4:	2b00      	cmp	r3, #0
 801b9a6:	d10a      	bne.n	801b9be <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801b9a8:	4b7b      	ldr	r3, [pc, #492]	; (801bb98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801b9aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b9ac:	f023 0107 	bic.w	r1, r3, #7
 801b9b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b9b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b9b6:	4a78      	ldr	r2, [pc, #480]	; (801bb98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801b9b8:	430b      	orrs	r3, r1
 801b9ba:	6513      	str	r3, [r2, #80]	; 0x50
 801b9bc:	e003      	b.n	801b9c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801b9be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801b9c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 801b9c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b9ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b9ce:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 801b9d2:	f04f 0b00 	mov.w	fp, #0
 801b9d6:	ea5a 030b 	orrs.w	r3, sl, fp
 801b9da:	d04c      	beq.n	801ba76 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 801b9dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b9e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b9e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801b9e6:	d030      	beq.n	801ba4a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 801b9e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801b9ec:	d829      	bhi.n	801ba42 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801b9ee:	2bc0      	cmp	r3, #192	; 0xc0
 801b9f0:	d02d      	beq.n	801ba4e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 801b9f2:	2bc0      	cmp	r3, #192	; 0xc0
 801b9f4:	d825      	bhi.n	801ba42 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801b9f6:	2b80      	cmp	r3, #128	; 0x80
 801b9f8:	d018      	beq.n	801ba2c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 801b9fa:	2b80      	cmp	r3, #128	; 0x80
 801b9fc:	d821      	bhi.n	801ba42 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801b9fe:	2b00      	cmp	r3, #0
 801ba00:	d002      	beq.n	801ba08 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 801ba02:	2b40      	cmp	r3, #64	; 0x40
 801ba04:	d007      	beq.n	801ba16 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 801ba06:	e01c      	b.n	801ba42 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801ba08:	4b63      	ldr	r3, [pc, #396]	; (801bb98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801ba0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ba0c:	4a62      	ldr	r2, [pc, #392]	; (801bb98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801ba0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801ba12:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801ba14:	e01c      	b.n	801ba50 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801ba16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801ba1a:	3308      	adds	r3, #8
 801ba1c:	2100      	movs	r1, #0
 801ba1e:	4618      	mov	r0, r3
 801ba20:	f001 fbe6 	bl	801d1f0 <RCCEx_PLL2_Config>
 801ba24:	4603      	mov	r3, r0
 801ba26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801ba2a:	e011      	b.n	801ba50 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801ba2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801ba30:	3328      	adds	r3, #40	; 0x28
 801ba32:	2100      	movs	r1, #0
 801ba34:	4618      	mov	r0, r3
 801ba36:	f001 fc8d 	bl	801d354 <RCCEx_PLL3_Config>
 801ba3a:	4603      	mov	r3, r0
 801ba3c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801ba40:	e006      	b.n	801ba50 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801ba42:	2301      	movs	r3, #1
 801ba44:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 801ba48:	e002      	b.n	801ba50 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 801ba4a:	bf00      	nop
 801ba4c:	e000      	b.n	801ba50 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 801ba4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 801ba50:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801ba54:	2b00      	cmp	r3, #0
 801ba56:	d10a      	bne.n	801ba6e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 801ba58:	4b4f      	ldr	r3, [pc, #316]	; (801bb98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801ba5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ba5c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 801ba60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801ba64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ba66:	4a4c      	ldr	r2, [pc, #304]	; (801bb98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801ba68:	430b      	orrs	r3, r1
 801ba6a:	6513      	str	r3, [r2, #80]	; 0x50
 801ba6c:	e003      	b.n	801ba76 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ba6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801ba72:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 801ba76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801ba7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba7e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 801ba82:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 801ba86:	2300      	movs	r3, #0
 801ba88:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 801ba8c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 801ba90:	460b      	mov	r3, r1
 801ba92:	4313      	orrs	r3, r2
 801ba94:	d053      	beq.n	801bb3e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 801ba96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801ba9a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801ba9e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801baa2:	d035      	beq.n	801bb10 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 801baa4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801baa8:	d82e      	bhi.n	801bb08 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801baaa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 801baae:	d031      	beq.n	801bb14 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 801bab0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 801bab4:	d828      	bhi.n	801bb08 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801bab6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801baba:	d01a      	beq.n	801baf2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 801babc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801bac0:	d822      	bhi.n	801bb08 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801bac2:	2b00      	cmp	r3, #0
 801bac4:	d003      	beq.n	801bace <HAL_RCCEx_PeriphCLKConfig+0x26e>
 801bac6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801baca:	d007      	beq.n	801badc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 801bacc:	e01c      	b.n	801bb08 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801bace:	4b32      	ldr	r3, [pc, #200]	; (801bb98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801bad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bad2:	4a31      	ldr	r2, [pc, #196]	; (801bb98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801bad4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801bad8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801bada:	e01c      	b.n	801bb16 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801badc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801bae0:	3308      	adds	r3, #8
 801bae2:	2100      	movs	r1, #0
 801bae4:	4618      	mov	r0, r3
 801bae6:	f001 fb83 	bl	801d1f0 <RCCEx_PLL2_Config>
 801baea:	4603      	mov	r3, r0
 801baec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801baf0:	e011      	b.n	801bb16 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801baf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801baf6:	3328      	adds	r3, #40	; 0x28
 801baf8:	2100      	movs	r1, #0
 801bafa:	4618      	mov	r0, r3
 801bafc:	f001 fc2a 	bl	801d354 <RCCEx_PLL3_Config>
 801bb00:	4603      	mov	r3, r0
 801bb02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801bb06:	e006      	b.n	801bb16 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 801bb08:	2301      	movs	r3, #1
 801bb0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 801bb0e:	e002      	b.n	801bb16 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 801bb10:	bf00      	nop
 801bb12:	e000      	b.n	801bb16 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 801bb14:	bf00      	nop
    }

    if (ret == HAL_OK)
 801bb16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801bb1a:	2b00      	cmp	r3, #0
 801bb1c:	d10b      	bne.n	801bb36 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 801bb1e:	4b1e      	ldr	r3, [pc, #120]	; (801bb98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801bb20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801bb22:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 801bb26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801bb2a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801bb2e:	4a1a      	ldr	r2, [pc, #104]	; (801bb98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801bb30:	430b      	orrs	r3, r1
 801bb32:	6593      	str	r3, [r2, #88]	; 0x58
 801bb34:	e003      	b.n	801bb3e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801bb36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801bb3a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 801bb3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801bb42:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb46:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 801bb4a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 801bb4e:	2300      	movs	r3, #0
 801bb50:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 801bb54:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 801bb58:	460b      	mov	r3, r1
 801bb5a:	4313      	orrs	r3, r2
 801bb5c:	d056      	beq.n	801bc0c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 801bb5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801bb62:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801bb66:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801bb6a:	d038      	beq.n	801bbde <HAL_RCCEx_PeriphCLKConfig+0x37e>
 801bb6c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801bb70:	d831      	bhi.n	801bbd6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 801bb72:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 801bb76:	d034      	beq.n	801bbe2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 801bb78:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 801bb7c:	d82b      	bhi.n	801bbd6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 801bb7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801bb82:	d01d      	beq.n	801bbc0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 801bb84:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801bb88:	d825      	bhi.n	801bbd6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 801bb8a:	2b00      	cmp	r3, #0
 801bb8c:	d006      	beq.n	801bb9c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 801bb8e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801bb92:	d00a      	beq.n	801bbaa <HAL_RCCEx_PeriphCLKConfig+0x34a>
 801bb94:	e01f      	b.n	801bbd6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 801bb96:	bf00      	nop
 801bb98:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801bb9c:	4ba2      	ldr	r3, [pc, #648]	; (801be28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801bb9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bba0:	4aa1      	ldr	r2, [pc, #644]	; (801be28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801bba2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801bba6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801bba8:	e01c      	b.n	801bbe4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801bbaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801bbae:	3308      	adds	r3, #8
 801bbb0:	2100      	movs	r1, #0
 801bbb2:	4618      	mov	r0, r3
 801bbb4:	f001 fb1c 	bl	801d1f0 <RCCEx_PLL2_Config>
 801bbb8:	4603      	mov	r3, r0
 801bbba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801bbbe:	e011      	b.n	801bbe4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801bbc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801bbc4:	3328      	adds	r3, #40	; 0x28
 801bbc6:	2100      	movs	r1, #0
 801bbc8:	4618      	mov	r0, r3
 801bbca:	f001 fbc3 	bl	801d354 <RCCEx_PLL3_Config>
 801bbce:	4603      	mov	r3, r0
 801bbd0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801bbd4:	e006      	b.n	801bbe4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 801bbd6:	2301      	movs	r3, #1
 801bbd8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 801bbdc:	e002      	b.n	801bbe4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 801bbde:	bf00      	nop
 801bbe0:	e000      	b.n	801bbe4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 801bbe2:	bf00      	nop
    }

    if (ret == HAL_OK)
 801bbe4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801bbe8:	2b00      	cmp	r3, #0
 801bbea:	d10b      	bne.n	801bc04 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 801bbec:	4b8e      	ldr	r3, [pc, #568]	; (801be28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801bbee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801bbf0:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 801bbf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801bbf8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801bbfc:	4a8a      	ldr	r2, [pc, #552]	; (801be28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801bbfe:	430b      	orrs	r3, r1
 801bc00:	6593      	str	r3, [r2, #88]	; 0x58
 801bc02:	e003      	b.n	801bc0c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801bc04:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801bc08:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 801bc0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801bc10:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bc14:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 801bc18:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 801bc1c:	2300      	movs	r3, #0
 801bc1e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 801bc22:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 801bc26:	460b      	mov	r3, r1
 801bc28:	4313      	orrs	r3, r2
 801bc2a:	d03a      	beq.n	801bca2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 801bc2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801bc30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801bc32:	2b30      	cmp	r3, #48	; 0x30
 801bc34:	d01f      	beq.n	801bc76 <HAL_RCCEx_PeriphCLKConfig+0x416>
 801bc36:	2b30      	cmp	r3, #48	; 0x30
 801bc38:	d819      	bhi.n	801bc6e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 801bc3a:	2b20      	cmp	r3, #32
 801bc3c:	d00c      	beq.n	801bc58 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 801bc3e:	2b20      	cmp	r3, #32
 801bc40:	d815      	bhi.n	801bc6e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 801bc42:	2b00      	cmp	r3, #0
 801bc44:	d019      	beq.n	801bc7a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 801bc46:	2b10      	cmp	r3, #16
 801bc48:	d111      	bne.n	801bc6e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801bc4a:	4b77      	ldr	r3, [pc, #476]	; (801be28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801bc4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bc4e:	4a76      	ldr	r2, [pc, #472]	; (801be28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801bc50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801bc54:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 801bc56:	e011      	b.n	801bc7c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801bc58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801bc5c:	3308      	adds	r3, #8
 801bc5e:	2102      	movs	r1, #2
 801bc60:	4618      	mov	r0, r3
 801bc62:	f001 fac5 	bl	801d1f0 <RCCEx_PLL2_Config>
 801bc66:	4603      	mov	r3, r0
 801bc68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 801bc6c:	e006      	b.n	801bc7c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 801bc6e:	2301      	movs	r3, #1
 801bc70:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 801bc74:	e002      	b.n	801bc7c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 801bc76:	bf00      	nop
 801bc78:	e000      	b.n	801bc7c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 801bc7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801bc7c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801bc80:	2b00      	cmp	r3, #0
 801bc82:	d10a      	bne.n	801bc9a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 801bc84:	4b68      	ldr	r3, [pc, #416]	; (801be28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801bc86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801bc88:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 801bc8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801bc90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801bc92:	4a65      	ldr	r2, [pc, #404]	; (801be28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801bc94:	430b      	orrs	r3, r1
 801bc96:	64d3      	str	r3, [r2, #76]	; 0x4c
 801bc98:	e003      	b.n	801bca2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801bc9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801bc9e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 801bca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801bca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bcaa:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 801bcae:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 801bcb2:	2300      	movs	r3, #0
 801bcb4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 801bcb8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 801bcbc:	460b      	mov	r3, r1
 801bcbe:	4313      	orrs	r3, r2
 801bcc0:	d051      	beq.n	801bd66 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 801bcc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801bcc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801bcc8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801bccc:	d035      	beq.n	801bd3a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 801bcce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801bcd2:	d82e      	bhi.n	801bd32 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801bcd4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801bcd8:	d031      	beq.n	801bd3e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 801bcda:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801bcde:	d828      	bhi.n	801bd32 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801bce0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801bce4:	d01a      	beq.n	801bd1c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 801bce6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801bcea:	d822      	bhi.n	801bd32 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801bcec:	2b00      	cmp	r3, #0
 801bcee:	d003      	beq.n	801bcf8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 801bcf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801bcf4:	d007      	beq.n	801bd06 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 801bcf6:	e01c      	b.n	801bd32 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801bcf8:	4b4b      	ldr	r3, [pc, #300]	; (801be28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801bcfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bcfc:	4a4a      	ldr	r2, [pc, #296]	; (801be28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801bcfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801bd02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801bd04:	e01c      	b.n	801bd40 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801bd06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801bd0a:	3308      	adds	r3, #8
 801bd0c:	2100      	movs	r1, #0
 801bd0e:	4618      	mov	r0, r3
 801bd10:	f001 fa6e 	bl	801d1f0 <RCCEx_PLL2_Config>
 801bd14:	4603      	mov	r3, r0
 801bd16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801bd1a:	e011      	b.n	801bd40 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801bd1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801bd20:	3328      	adds	r3, #40	; 0x28
 801bd22:	2100      	movs	r1, #0
 801bd24:	4618      	mov	r0, r3
 801bd26:	f001 fb15 	bl	801d354 <RCCEx_PLL3_Config>
 801bd2a:	4603      	mov	r3, r0
 801bd2c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801bd30:	e006      	b.n	801bd40 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801bd32:	2301      	movs	r3, #1
 801bd34:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 801bd38:	e002      	b.n	801bd40 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 801bd3a:	bf00      	nop
 801bd3c:	e000      	b.n	801bd40 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 801bd3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 801bd40:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801bd44:	2b00      	cmp	r3, #0
 801bd46:	d10a      	bne.n	801bd5e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 801bd48:	4b37      	ldr	r3, [pc, #220]	; (801be28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801bd4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801bd4c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 801bd50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801bd54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801bd56:	4a34      	ldr	r2, [pc, #208]	; (801be28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801bd58:	430b      	orrs	r3, r1
 801bd5a:	6513      	str	r3, [r2, #80]	; 0x50
 801bd5c:	e003      	b.n	801bd66 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801bd5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801bd62:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 801bd66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801bd6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd6e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 801bd72:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801bd76:	2300      	movs	r3, #0
 801bd78:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 801bd7c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 801bd80:	460b      	mov	r3, r1
 801bd82:	4313      	orrs	r3, r2
 801bd84:	d056      	beq.n	801be34 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 801bd86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801bd8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801bd8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801bd90:	d033      	beq.n	801bdfa <HAL_RCCEx_PeriphCLKConfig+0x59a>
 801bd92:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801bd96:	d82c      	bhi.n	801bdf2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801bd98:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801bd9c:	d02f      	beq.n	801bdfe <HAL_RCCEx_PeriphCLKConfig+0x59e>
 801bd9e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801bda2:	d826      	bhi.n	801bdf2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801bda4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 801bda8:	d02b      	beq.n	801be02 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 801bdaa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 801bdae:	d820      	bhi.n	801bdf2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801bdb0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801bdb4:	d012      	beq.n	801bddc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 801bdb6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801bdba:	d81a      	bhi.n	801bdf2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801bdbc:	2b00      	cmp	r3, #0
 801bdbe:	d022      	beq.n	801be06 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 801bdc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801bdc4:	d115      	bne.n	801bdf2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801bdc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801bdca:	3308      	adds	r3, #8
 801bdcc:	2101      	movs	r1, #1
 801bdce:	4618      	mov	r0, r3
 801bdd0:	f001 fa0e 	bl	801d1f0 <RCCEx_PLL2_Config>
 801bdd4:	4603      	mov	r3, r0
 801bdd6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 801bdda:	e015      	b.n	801be08 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801bddc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801bde0:	3328      	adds	r3, #40	; 0x28
 801bde2:	2101      	movs	r1, #1
 801bde4:	4618      	mov	r0, r3
 801bde6:	f001 fab5 	bl	801d354 <RCCEx_PLL3_Config>
 801bdea:	4603      	mov	r3, r0
 801bdec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 801bdf0:	e00a      	b.n	801be08 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801bdf2:	2301      	movs	r3, #1
 801bdf4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 801bdf8:	e006      	b.n	801be08 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801bdfa:	bf00      	nop
 801bdfc:	e004      	b.n	801be08 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801bdfe:	bf00      	nop
 801be00:	e002      	b.n	801be08 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801be02:	bf00      	nop
 801be04:	e000      	b.n	801be08 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801be06:	bf00      	nop
    }

    if (ret == HAL_OK)
 801be08:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801be0c:	2b00      	cmp	r3, #0
 801be0e:	d10d      	bne.n	801be2c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 801be10:	4b05      	ldr	r3, [pc, #20]	; (801be28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801be12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801be14:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 801be18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801be1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801be1e:	4a02      	ldr	r2, [pc, #8]	; (801be28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801be20:	430b      	orrs	r3, r1
 801be22:	6513      	str	r3, [r2, #80]	; 0x50
 801be24:	e006      	b.n	801be34 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 801be26:	bf00      	nop
 801be28:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801be2c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801be30:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 801be34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801be38:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be3c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 801be40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801be44:	2300      	movs	r3, #0
 801be46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801be4a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 801be4e:	460b      	mov	r3, r1
 801be50:	4313      	orrs	r3, r2
 801be52:	d055      	beq.n	801bf00 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 801be54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801be58:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801be5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801be60:	d033      	beq.n	801beca <HAL_RCCEx_PeriphCLKConfig+0x66a>
 801be62:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801be66:	d82c      	bhi.n	801bec2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801be68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801be6c:	d02f      	beq.n	801bece <HAL_RCCEx_PeriphCLKConfig+0x66e>
 801be6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801be72:	d826      	bhi.n	801bec2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801be74:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801be78:	d02b      	beq.n	801bed2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 801be7a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801be7e:	d820      	bhi.n	801bec2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801be80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801be84:	d012      	beq.n	801beac <HAL_RCCEx_PeriphCLKConfig+0x64c>
 801be86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801be8a:	d81a      	bhi.n	801bec2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801be8c:	2b00      	cmp	r3, #0
 801be8e:	d022      	beq.n	801bed6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 801be90:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801be94:	d115      	bne.n	801bec2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801be96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801be9a:	3308      	adds	r3, #8
 801be9c:	2101      	movs	r1, #1
 801be9e:	4618      	mov	r0, r3
 801bea0:	f001 f9a6 	bl	801d1f0 <RCCEx_PLL2_Config>
 801bea4:	4603      	mov	r3, r0
 801bea6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 801beaa:	e015      	b.n	801bed8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801beac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801beb0:	3328      	adds	r3, #40	; 0x28
 801beb2:	2101      	movs	r1, #1
 801beb4:	4618      	mov	r0, r3
 801beb6:	f001 fa4d 	bl	801d354 <RCCEx_PLL3_Config>
 801beba:	4603      	mov	r3, r0
 801bebc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 801bec0:	e00a      	b.n	801bed8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 801bec2:	2301      	movs	r3, #1
 801bec4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 801bec8:	e006      	b.n	801bed8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801beca:	bf00      	nop
 801becc:	e004      	b.n	801bed8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801bece:	bf00      	nop
 801bed0:	e002      	b.n	801bed8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801bed2:	bf00      	nop
 801bed4:	e000      	b.n	801bed8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801bed6:	bf00      	nop
    }

    if (ret == HAL_OK)
 801bed8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801bedc:	2b00      	cmp	r3, #0
 801bede:	d10b      	bne.n	801bef8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 801bee0:	4ba3      	ldr	r3, [pc, #652]	; (801c170 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801bee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801bee4:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 801bee8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801beec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801bef0:	4a9f      	ldr	r2, [pc, #636]	; (801c170 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801bef2:	430b      	orrs	r3, r1
 801bef4:	6593      	str	r3, [r2, #88]	; 0x58
 801bef6:	e003      	b.n	801bf00 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801bef8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801befc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 801bf00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801bf04:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf08:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 801bf0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 801bf10:	2300      	movs	r3, #0
 801bf12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 801bf16:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 801bf1a:	460b      	mov	r3, r1
 801bf1c:	4313      	orrs	r3, r2
 801bf1e:	d037      	beq.n	801bf90 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 801bf20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801bf24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bf26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801bf2a:	d00e      	beq.n	801bf4a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 801bf2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801bf30:	d816      	bhi.n	801bf60 <HAL_RCCEx_PeriphCLKConfig+0x700>
 801bf32:	2b00      	cmp	r3, #0
 801bf34:	d018      	beq.n	801bf68 <HAL_RCCEx_PeriphCLKConfig+0x708>
 801bf36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801bf3a:	d111      	bne.n	801bf60 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801bf3c:	4b8c      	ldr	r3, [pc, #560]	; (801c170 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801bf3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bf40:	4a8b      	ldr	r2, [pc, #556]	; (801c170 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801bf42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801bf46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 801bf48:	e00f      	b.n	801bf6a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801bf4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801bf4e:	3308      	adds	r3, #8
 801bf50:	2101      	movs	r1, #1
 801bf52:	4618      	mov	r0, r3
 801bf54:	f001 f94c 	bl	801d1f0 <RCCEx_PLL2_Config>
 801bf58:	4603      	mov	r3, r0
 801bf5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 801bf5e:	e004      	b.n	801bf6a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801bf60:	2301      	movs	r3, #1
 801bf62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 801bf66:	e000      	b.n	801bf6a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 801bf68:	bf00      	nop
    }

    if (ret == HAL_OK)
 801bf6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801bf6e:	2b00      	cmp	r3, #0
 801bf70:	d10a      	bne.n	801bf88 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 801bf72:	4b7f      	ldr	r3, [pc, #508]	; (801c170 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801bf74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801bf76:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 801bf7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801bf7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bf80:	4a7b      	ldr	r2, [pc, #492]	; (801c170 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801bf82:	430b      	orrs	r3, r1
 801bf84:	6513      	str	r3, [r2, #80]	; 0x50
 801bf86:	e003      	b.n	801bf90 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801bf88:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801bf8c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 801bf90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801bf94:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf98:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 801bf9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801bfa0:	2300      	movs	r3, #0
 801bfa2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 801bfa6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 801bfaa:	460b      	mov	r3, r1
 801bfac:	4313      	orrs	r3, r2
 801bfae:	d039      	beq.n	801c024 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 801bfb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801bfb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801bfb6:	2b03      	cmp	r3, #3
 801bfb8:	d81c      	bhi.n	801bff4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 801bfba:	a201      	add	r2, pc, #4	; (adr r2, 801bfc0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 801bfbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bfc0:	0801bffd 	.word	0x0801bffd
 801bfc4:	0801bfd1 	.word	0x0801bfd1
 801bfc8:	0801bfdf 	.word	0x0801bfdf
 801bfcc:	0801bffd 	.word	0x0801bffd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801bfd0:	4b67      	ldr	r3, [pc, #412]	; (801c170 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801bfd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bfd4:	4a66      	ldr	r2, [pc, #408]	; (801c170 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801bfd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801bfda:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 801bfdc:	e00f      	b.n	801bffe <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801bfde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801bfe2:	3308      	adds	r3, #8
 801bfe4:	2102      	movs	r1, #2
 801bfe6:	4618      	mov	r0, r3
 801bfe8:	f001 f902 	bl	801d1f0 <RCCEx_PLL2_Config>
 801bfec:	4603      	mov	r3, r0
 801bfee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 801bff2:	e004      	b.n	801bffe <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 801bff4:	2301      	movs	r3, #1
 801bff6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 801bffa:	e000      	b.n	801bffe <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 801bffc:	bf00      	nop
    }

    if (ret == HAL_OK)
 801bffe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801c002:	2b00      	cmp	r3, #0
 801c004:	d10a      	bne.n	801c01c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 801c006:	4b5a      	ldr	r3, [pc, #360]	; (801c170 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801c008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c00a:	f023 0103 	bic.w	r1, r3, #3
 801c00e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c012:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c014:	4a56      	ldr	r2, [pc, #344]	; (801c170 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801c016:	430b      	orrs	r3, r1
 801c018:	64d3      	str	r3, [r2, #76]	; 0x4c
 801c01a:	e003      	b.n	801c024 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c01c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801c020:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801c024:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c028:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c02c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 801c030:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801c034:	2300      	movs	r3, #0
 801c036:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801c03a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 801c03e:	460b      	mov	r3, r1
 801c040:	4313      	orrs	r3, r2
 801c042:	f000 809f 	beq.w	801c184 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801c046:	4b4b      	ldr	r3, [pc, #300]	; (801c174 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 801c048:	681b      	ldr	r3, [r3, #0]
 801c04a:	4a4a      	ldr	r2, [pc, #296]	; (801c174 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 801c04c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801c050:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801c052:	f7f9 ff3d 	bl	8015ed0 <HAL_GetTick>
 801c056:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801c05a:	e00b      	b.n	801c074 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801c05c:	f7f9 ff38 	bl	8015ed0 <HAL_GetTick>
 801c060:	4602      	mov	r2, r0
 801c062:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801c066:	1ad3      	subs	r3, r2, r3
 801c068:	2b64      	cmp	r3, #100	; 0x64
 801c06a:	d903      	bls.n	801c074 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 801c06c:	2303      	movs	r3, #3
 801c06e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 801c072:	e005      	b.n	801c080 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801c074:	4b3f      	ldr	r3, [pc, #252]	; (801c174 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 801c076:	681b      	ldr	r3, [r3, #0]
 801c078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c07c:	2b00      	cmp	r3, #0
 801c07e:	d0ed      	beq.n	801c05c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 801c080:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801c084:	2b00      	cmp	r3, #0
 801c086:	d179      	bne.n	801c17c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 801c088:	4b39      	ldr	r3, [pc, #228]	; (801c170 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801c08a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801c08c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c090:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801c094:	4053      	eors	r3, r2
 801c096:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801c09a:	2b00      	cmp	r3, #0
 801c09c:	d015      	beq.n	801c0ca <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801c09e:	4b34      	ldr	r3, [pc, #208]	; (801c170 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801c0a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c0a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801c0a6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 801c0aa:	4b31      	ldr	r3, [pc, #196]	; (801c170 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801c0ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c0ae:	4a30      	ldr	r2, [pc, #192]	; (801c170 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801c0b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801c0b4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 801c0b6:	4b2e      	ldr	r3, [pc, #184]	; (801c170 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801c0b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c0ba:	4a2d      	ldr	r2, [pc, #180]	; (801c170 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801c0bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801c0c0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 801c0c2:	4a2b      	ldr	r2, [pc, #172]	; (801c170 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801c0c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801c0c8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 801c0ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c0ce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801c0d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801c0d6:	d118      	bne.n	801c10a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c0d8:	f7f9 fefa 	bl	8015ed0 <HAL_GetTick>
 801c0dc:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801c0e0:	e00d      	b.n	801c0fe <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801c0e2:	f7f9 fef5 	bl	8015ed0 <HAL_GetTick>
 801c0e6:	4602      	mov	r2, r0
 801c0e8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801c0ec:	1ad2      	subs	r2, r2, r3
 801c0ee:	f241 3388 	movw	r3, #5000	; 0x1388
 801c0f2:	429a      	cmp	r2, r3
 801c0f4:	d903      	bls.n	801c0fe <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 801c0f6:	2303      	movs	r3, #3
 801c0f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 801c0fc:	e005      	b.n	801c10a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801c0fe:	4b1c      	ldr	r3, [pc, #112]	; (801c170 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801c100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c102:	f003 0302 	and.w	r3, r3, #2
 801c106:	2b00      	cmp	r3, #0
 801c108:	d0eb      	beq.n	801c0e2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 801c10a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801c10e:	2b00      	cmp	r3, #0
 801c110:	d129      	bne.n	801c166 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801c112:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c116:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801c11a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801c11e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801c122:	d10e      	bne.n	801c142 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 801c124:	4b12      	ldr	r3, [pc, #72]	; (801c170 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801c126:	691b      	ldr	r3, [r3, #16]
 801c128:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 801c12c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c130:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801c134:	091a      	lsrs	r2, r3, #4
 801c136:	4b10      	ldr	r3, [pc, #64]	; (801c178 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 801c138:	4013      	ands	r3, r2
 801c13a:	4a0d      	ldr	r2, [pc, #52]	; (801c170 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801c13c:	430b      	orrs	r3, r1
 801c13e:	6113      	str	r3, [r2, #16]
 801c140:	e005      	b.n	801c14e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 801c142:	4b0b      	ldr	r3, [pc, #44]	; (801c170 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801c144:	691b      	ldr	r3, [r3, #16]
 801c146:	4a0a      	ldr	r2, [pc, #40]	; (801c170 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801c148:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801c14c:	6113      	str	r3, [r2, #16]
 801c14e:	4b08      	ldr	r3, [pc, #32]	; (801c170 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801c150:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801c152:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c156:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801c15a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801c15e:	4a04      	ldr	r2, [pc, #16]	; (801c170 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801c160:	430b      	orrs	r3, r1
 801c162:	6713      	str	r3, [r2, #112]	; 0x70
 801c164:	e00e      	b.n	801c184 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 801c166:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801c16a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 801c16e:	e009      	b.n	801c184 <HAL_RCCEx_PeriphCLKConfig+0x924>
 801c170:	58024400 	.word	0x58024400
 801c174:	58024800 	.word	0x58024800
 801c178:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c17c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801c180:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 801c184:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c188:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c18c:	f002 0301 	and.w	r3, r2, #1
 801c190:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801c194:	2300      	movs	r3, #0
 801c196:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801c19a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 801c19e:	460b      	mov	r3, r1
 801c1a0:	4313      	orrs	r3, r2
 801c1a2:	f000 8089 	beq.w	801c2b8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 801c1a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c1aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801c1ac:	2b28      	cmp	r3, #40	; 0x28
 801c1ae:	d86b      	bhi.n	801c288 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 801c1b0:	a201      	add	r2, pc, #4	; (adr r2, 801c1b8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 801c1b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c1b6:	bf00      	nop
 801c1b8:	0801c291 	.word	0x0801c291
 801c1bc:	0801c289 	.word	0x0801c289
 801c1c0:	0801c289 	.word	0x0801c289
 801c1c4:	0801c289 	.word	0x0801c289
 801c1c8:	0801c289 	.word	0x0801c289
 801c1cc:	0801c289 	.word	0x0801c289
 801c1d0:	0801c289 	.word	0x0801c289
 801c1d4:	0801c289 	.word	0x0801c289
 801c1d8:	0801c25d 	.word	0x0801c25d
 801c1dc:	0801c289 	.word	0x0801c289
 801c1e0:	0801c289 	.word	0x0801c289
 801c1e4:	0801c289 	.word	0x0801c289
 801c1e8:	0801c289 	.word	0x0801c289
 801c1ec:	0801c289 	.word	0x0801c289
 801c1f0:	0801c289 	.word	0x0801c289
 801c1f4:	0801c289 	.word	0x0801c289
 801c1f8:	0801c273 	.word	0x0801c273
 801c1fc:	0801c289 	.word	0x0801c289
 801c200:	0801c289 	.word	0x0801c289
 801c204:	0801c289 	.word	0x0801c289
 801c208:	0801c289 	.word	0x0801c289
 801c20c:	0801c289 	.word	0x0801c289
 801c210:	0801c289 	.word	0x0801c289
 801c214:	0801c289 	.word	0x0801c289
 801c218:	0801c291 	.word	0x0801c291
 801c21c:	0801c289 	.word	0x0801c289
 801c220:	0801c289 	.word	0x0801c289
 801c224:	0801c289 	.word	0x0801c289
 801c228:	0801c289 	.word	0x0801c289
 801c22c:	0801c289 	.word	0x0801c289
 801c230:	0801c289 	.word	0x0801c289
 801c234:	0801c289 	.word	0x0801c289
 801c238:	0801c291 	.word	0x0801c291
 801c23c:	0801c289 	.word	0x0801c289
 801c240:	0801c289 	.word	0x0801c289
 801c244:	0801c289 	.word	0x0801c289
 801c248:	0801c289 	.word	0x0801c289
 801c24c:	0801c289 	.word	0x0801c289
 801c250:	0801c289 	.word	0x0801c289
 801c254:	0801c289 	.word	0x0801c289
 801c258:	0801c291 	.word	0x0801c291
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801c25c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c260:	3308      	adds	r3, #8
 801c262:	2101      	movs	r1, #1
 801c264:	4618      	mov	r0, r3
 801c266:	f000 ffc3 	bl	801d1f0 <RCCEx_PLL2_Config>
 801c26a:	4603      	mov	r3, r0
 801c26c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 801c270:	e00f      	b.n	801c292 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801c272:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c276:	3328      	adds	r3, #40	; 0x28
 801c278:	2101      	movs	r1, #1
 801c27a:	4618      	mov	r0, r3
 801c27c:	f001 f86a 	bl	801d354 <RCCEx_PLL3_Config>
 801c280:	4603      	mov	r3, r0
 801c282:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 801c286:	e004      	b.n	801c292 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801c288:	2301      	movs	r3, #1
 801c28a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 801c28e:	e000      	b.n	801c292 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 801c290:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c292:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801c296:	2b00      	cmp	r3, #0
 801c298:	d10a      	bne.n	801c2b0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 801c29a:	4bbf      	ldr	r3, [pc, #764]	; (801c598 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801c29c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c29e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 801c2a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c2a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801c2a8:	4abb      	ldr	r2, [pc, #748]	; (801c598 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801c2aa:	430b      	orrs	r3, r1
 801c2ac:	6553      	str	r3, [r2, #84]	; 0x54
 801c2ae:	e003      	b.n	801c2b8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c2b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801c2b4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 801c2b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c2c0:	f002 0302 	and.w	r3, r2, #2
 801c2c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801c2c8:	2300      	movs	r3, #0
 801c2ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 801c2ce:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 801c2d2:	460b      	mov	r3, r1
 801c2d4:	4313      	orrs	r3, r2
 801c2d6:	d041      	beq.n	801c35c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 801c2d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c2dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801c2de:	2b05      	cmp	r3, #5
 801c2e0:	d824      	bhi.n	801c32c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 801c2e2:	a201      	add	r2, pc, #4	; (adr r2, 801c2e8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 801c2e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c2e8:	0801c335 	.word	0x0801c335
 801c2ec:	0801c301 	.word	0x0801c301
 801c2f0:	0801c317 	.word	0x0801c317
 801c2f4:	0801c335 	.word	0x0801c335
 801c2f8:	0801c335 	.word	0x0801c335
 801c2fc:	0801c335 	.word	0x0801c335
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801c300:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c304:	3308      	adds	r3, #8
 801c306:	2101      	movs	r1, #1
 801c308:	4618      	mov	r0, r3
 801c30a:	f000 ff71 	bl	801d1f0 <RCCEx_PLL2_Config>
 801c30e:	4603      	mov	r3, r0
 801c310:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 801c314:	e00f      	b.n	801c336 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801c316:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c31a:	3328      	adds	r3, #40	; 0x28
 801c31c:	2101      	movs	r1, #1
 801c31e:	4618      	mov	r0, r3
 801c320:	f001 f818 	bl	801d354 <RCCEx_PLL3_Config>
 801c324:	4603      	mov	r3, r0
 801c326:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 801c32a:	e004      	b.n	801c336 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801c32c:	2301      	movs	r3, #1
 801c32e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 801c332:	e000      	b.n	801c336 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 801c334:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c336:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801c33a:	2b00      	cmp	r3, #0
 801c33c:	d10a      	bne.n	801c354 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 801c33e:	4b96      	ldr	r3, [pc, #600]	; (801c598 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801c340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c342:	f023 0107 	bic.w	r1, r3, #7
 801c346:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c34a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801c34c:	4a92      	ldr	r2, [pc, #584]	; (801c598 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801c34e:	430b      	orrs	r3, r1
 801c350:	6553      	str	r3, [r2, #84]	; 0x54
 801c352:	e003      	b.n	801c35c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c354:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801c358:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801c35c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c360:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c364:	f002 0304 	and.w	r3, r2, #4
 801c368:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801c36c:	2300      	movs	r3, #0
 801c36e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801c372:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 801c376:	460b      	mov	r3, r1
 801c378:	4313      	orrs	r3, r2
 801c37a:	d044      	beq.n	801c406 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 801c37c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c380:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801c384:	2b05      	cmp	r3, #5
 801c386:	d825      	bhi.n	801c3d4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 801c388:	a201      	add	r2, pc, #4	; (adr r2, 801c390 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 801c38a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c38e:	bf00      	nop
 801c390:	0801c3dd 	.word	0x0801c3dd
 801c394:	0801c3a9 	.word	0x0801c3a9
 801c398:	0801c3bf 	.word	0x0801c3bf
 801c39c:	0801c3dd 	.word	0x0801c3dd
 801c3a0:	0801c3dd 	.word	0x0801c3dd
 801c3a4:	0801c3dd 	.word	0x0801c3dd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801c3a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c3ac:	3308      	adds	r3, #8
 801c3ae:	2101      	movs	r1, #1
 801c3b0:	4618      	mov	r0, r3
 801c3b2:	f000 ff1d 	bl	801d1f0 <RCCEx_PLL2_Config>
 801c3b6:	4603      	mov	r3, r0
 801c3b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 801c3bc:	e00f      	b.n	801c3de <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801c3be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c3c2:	3328      	adds	r3, #40	; 0x28
 801c3c4:	2101      	movs	r1, #1
 801c3c6:	4618      	mov	r0, r3
 801c3c8:	f000 ffc4 	bl	801d354 <RCCEx_PLL3_Config>
 801c3cc:	4603      	mov	r3, r0
 801c3ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 801c3d2:	e004      	b.n	801c3de <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801c3d4:	2301      	movs	r3, #1
 801c3d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 801c3da:	e000      	b.n	801c3de <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 801c3dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c3de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801c3e2:	2b00      	cmp	r3, #0
 801c3e4:	d10b      	bne.n	801c3fe <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801c3e6:	4b6c      	ldr	r3, [pc, #432]	; (801c598 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801c3e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c3ea:	f023 0107 	bic.w	r1, r3, #7
 801c3ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c3f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801c3f6:	4a68      	ldr	r2, [pc, #416]	; (801c598 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801c3f8:	430b      	orrs	r3, r1
 801c3fa:	6593      	str	r3, [r2, #88]	; 0x58
 801c3fc:	e003      	b.n	801c406 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c3fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801c402:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 801c406:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c40a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c40e:	f002 0320 	and.w	r3, r2, #32
 801c412:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 801c416:	2300      	movs	r3, #0
 801c418:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801c41c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 801c420:	460b      	mov	r3, r1
 801c422:	4313      	orrs	r3, r2
 801c424:	d055      	beq.n	801c4d2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 801c426:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c42a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c42e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801c432:	d033      	beq.n	801c49c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 801c434:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801c438:	d82c      	bhi.n	801c494 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801c43a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801c43e:	d02f      	beq.n	801c4a0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 801c440:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801c444:	d826      	bhi.n	801c494 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801c446:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801c44a:	d02b      	beq.n	801c4a4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 801c44c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801c450:	d820      	bhi.n	801c494 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801c452:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801c456:	d012      	beq.n	801c47e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 801c458:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801c45c:	d81a      	bhi.n	801c494 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801c45e:	2b00      	cmp	r3, #0
 801c460:	d022      	beq.n	801c4a8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 801c462:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801c466:	d115      	bne.n	801c494 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801c468:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c46c:	3308      	adds	r3, #8
 801c46e:	2100      	movs	r1, #0
 801c470:	4618      	mov	r0, r3
 801c472:	f000 febd 	bl	801d1f0 <RCCEx_PLL2_Config>
 801c476:	4603      	mov	r3, r0
 801c478:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 801c47c:	e015      	b.n	801c4aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801c47e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c482:	3328      	adds	r3, #40	; 0x28
 801c484:	2102      	movs	r1, #2
 801c486:	4618      	mov	r0, r3
 801c488:	f000 ff64 	bl	801d354 <RCCEx_PLL3_Config>
 801c48c:	4603      	mov	r3, r0
 801c48e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 801c492:	e00a      	b.n	801c4aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801c494:	2301      	movs	r3, #1
 801c496:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 801c49a:	e006      	b.n	801c4aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801c49c:	bf00      	nop
 801c49e:	e004      	b.n	801c4aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801c4a0:	bf00      	nop
 801c4a2:	e002      	b.n	801c4aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801c4a4:	bf00      	nop
 801c4a6:	e000      	b.n	801c4aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801c4a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c4aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801c4ae:	2b00      	cmp	r3, #0
 801c4b0:	d10b      	bne.n	801c4ca <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801c4b2:	4b39      	ldr	r3, [pc, #228]	; (801c598 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801c4b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c4b6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 801c4ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c4be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c4c2:	4a35      	ldr	r2, [pc, #212]	; (801c598 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801c4c4:	430b      	orrs	r3, r1
 801c4c6:	6553      	str	r3, [r2, #84]	; 0x54
 801c4c8:	e003      	b.n	801c4d2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c4ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801c4ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 801c4d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c4d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c4da:	f002 0340 	and.w	r3, r2, #64	; 0x40
 801c4de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 801c4e2:	2300      	movs	r3, #0
 801c4e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801c4e8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 801c4ec:	460b      	mov	r3, r1
 801c4ee:	4313      	orrs	r3, r2
 801c4f0:	d058      	beq.n	801c5a4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 801c4f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c4f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801c4fa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 801c4fe:	d033      	beq.n	801c568 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 801c500:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 801c504:	d82c      	bhi.n	801c560 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801c506:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801c50a:	d02f      	beq.n	801c56c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 801c50c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801c510:	d826      	bhi.n	801c560 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801c512:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801c516:	d02b      	beq.n	801c570 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 801c518:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801c51c:	d820      	bhi.n	801c560 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801c51e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801c522:	d012      	beq.n	801c54a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 801c524:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801c528:	d81a      	bhi.n	801c560 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801c52a:	2b00      	cmp	r3, #0
 801c52c:	d022      	beq.n	801c574 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 801c52e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801c532:	d115      	bne.n	801c560 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801c534:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c538:	3308      	adds	r3, #8
 801c53a:	2100      	movs	r1, #0
 801c53c:	4618      	mov	r0, r3
 801c53e:	f000 fe57 	bl	801d1f0 <RCCEx_PLL2_Config>
 801c542:	4603      	mov	r3, r0
 801c544:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 801c548:	e015      	b.n	801c576 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801c54a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c54e:	3328      	adds	r3, #40	; 0x28
 801c550:	2102      	movs	r1, #2
 801c552:	4618      	mov	r0, r3
 801c554:	f000 fefe 	bl	801d354 <RCCEx_PLL3_Config>
 801c558:	4603      	mov	r3, r0
 801c55a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 801c55e:	e00a      	b.n	801c576 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801c560:	2301      	movs	r3, #1
 801c562:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 801c566:	e006      	b.n	801c576 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801c568:	bf00      	nop
 801c56a:	e004      	b.n	801c576 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801c56c:	bf00      	nop
 801c56e:	e002      	b.n	801c576 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801c570:	bf00      	nop
 801c572:	e000      	b.n	801c576 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801c574:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c576:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801c57a:	2b00      	cmp	r3, #0
 801c57c:	d10e      	bne.n	801c59c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 801c57e:	4b06      	ldr	r3, [pc, #24]	; (801c598 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801c580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c582:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 801c586:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c58a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801c58e:	4a02      	ldr	r2, [pc, #8]	; (801c598 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801c590:	430b      	orrs	r3, r1
 801c592:	6593      	str	r3, [r2, #88]	; 0x58
 801c594:	e006      	b.n	801c5a4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 801c596:	bf00      	nop
 801c598:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c59c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801c5a0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 801c5a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c5a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c5ac:	f002 0380 	and.w	r3, r2, #128	; 0x80
 801c5b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801c5b4:	2300      	movs	r3, #0
 801c5b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801c5ba:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 801c5be:	460b      	mov	r3, r1
 801c5c0:	4313      	orrs	r3, r2
 801c5c2:	d055      	beq.n	801c670 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 801c5c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c5c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801c5cc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 801c5d0:	d033      	beq.n	801c63a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 801c5d2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 801c5d6:	d82c      	bhi.n	801c632 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801c5d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801c5dc:	d02f      	beq.n	801c63e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 801c5de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801c5e2:	d826      	bhi.n	801c632 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801c5e4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 801c5e8:	d02b      	beq.n	801c642 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 801c5ea:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 801c5ee:	d820      	bhi.n	801c632 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801c5f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801c5f4:	d012      	beq.n	801c61c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 801c5f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801c5fa:	d81a      	bhi.n	801c632 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801c5fc:	2b00      	cmp	r3, #0
 801c5fe:	d022      	beq.n	801c646 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 801c600:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801c604:	d115      	bne.n	801c632 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801c606:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c60a:	3308      	adds	r3, #8
 801c60c:	2100      	movs	r1, #0
 801c60e:	4618      	mov	r0, r3
 801c610:	f000 fdee 	bl	801d1f0 <RCCEx_PLL2_Config>
 801c614:	4603      	mov	r3, r0
 801c616:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 801c61a:	e015      	b.n	801c648 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801c61c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c620:	3328      	adds	r3, #40	; 0x28
 801c622:	2102      	movs	r1, #2
 801c624:	4618      	mov	r0, r3
 801c626:	f000 fe95 	bl	801d354 <RCCEx_PLL3_Config>
 801c62a:	4603      	mov	r3, r0
 801c62c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 801c630:	e00a      	b.n	801c648 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801c632:	2301      	movs	r3, #1
 801c634:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 801c638:	e006      	b.n	801c648 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801c63a:	bf00      	nop
 801c63c:	e004      	b.n	801c648 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801c63e:	bf00      	nop
 801c640:	e002      	b.n	801c648 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801c642:	bf00      	nop
 801c644:	e000      	b.n	801c648 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801c646:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c648:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801c64c:	2b00      	cmp	r3, #0
 801c64e:	d10b      	bne.n	801c668 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 801c650:	4ba1      	ldr	r3, [pc, #644]	; (801c8d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801c652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c654:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 801c658:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c65c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801c660:	4a9d      	ldr	r2, [pc, #628]	; (801c8d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801c662:	430b      	orrs	r3, r1
 801c664:	6593      	str	r3, [r2, #88]	; 0x58
 801c666:	e003      	b.n	801c670 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c668:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801c66c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 801c670:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c674:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c678:	f002 0308 	and.w	r3, r2, #8
 801c67c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801c680:	2300      	movs	r3, #0
 801c682:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801c686:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 801c68a:	460b      	mov	r3, r1
 801c68c:	4313      	orrs	r3, r2
 801c68e:	d01e      	beq.n	801c6ce <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 801c690:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c694:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801c698:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801c69c:	d10c      	bne.n	801c6b8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801c69e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c6a2:	3328      	adds	r3, #40	; 0x28
 801c6a4:	2102      	movs	r1, #2
 801c6a6:	4618      	mov	r0, r3
 801c6a8:	f000 fe54 	bl	801d354 <RCCEx_PLL3_Config>
 801c6ac:	4603      	mov	r3, r0
 801c6ae:	2b00      	cmp	r3, #0
 801c6b0:	d002      	beq.n	801c6b8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 801c6b2:	2301      	movs	r3, #1
 801c6b4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 801c6b8:	4b87      	ldr	r3, [pc, #540]	; (801c8d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801c6ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c6bc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801c6c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c6c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801c6c8:	4a83      	ldr	r2, [pc, #524]	; (801c8d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801c6ca:	430b      	orrs	r3, r1
 801c6cc:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 801c6ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c6d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c6d6:	f002 0310 	and.w	r3, r2, #16
 801c6da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801c6de:	2300      	movs	r3, #0
 801c6e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801c6e4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 801c6e8:	460b      	mov	r3, r1
 801c6ea:	4313      	orrs	r3, r2
 801c6ec:	d01e      	beq.n	801c72c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 801c6ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c6f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801c6f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801c6fa:	d10c      	bne.n	801c716 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801c6fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c700:	3328      	adds	r3, #40	; 0x28
 801c702:	2102      	movs	r1, #2
 801c704:	4618      	mov	r0, r3
 801c706:	f000 fe25 	bl	801d354 <RCCEx_PLL3_Config>
 801c70a:	4603      	mov	r3, r0
 801c70c:	2b00      	cmp	r3, #0
 801c70e:	d002      	beq.n	801c716 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 801c710:	2301      	movs	r3, #1
 801c712:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 801c716:	4b70      	ldr	r3, [pc, #448]	; (801c8d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801c718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c71a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 801c71e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c722:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801c726:	4a6c      	ldr	r2, [pc, #432]	; (801c8d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801c728:	430b      	orrs	r3, r1
 801c72a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 801c72c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c730:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c734:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 801c738:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801c73c:	2300      	movs	r3, #0
 801c73e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801c742:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 801c746:	460b      	mov	r3, r1
 801c748:	4313      	orrs	r3, r2
 801c74a:	d03e      	beq.n	801c7ca <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 801c74c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c750:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801c754:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801c758:	d022      	beq.n	801c7a0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 801c75a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801c75e:	d81b      	bhi.n	801c798 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 801c760:	2b00      	cmp	r3, #0
 801c762:	d003      	beq.n	801c76c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 801c764:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801c768:	d00b      	beq.n	801c782 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 801c76a:	e015      	b.n	801c798 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801c76c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c770:	3308      	adds	r3, #8
 801c772:	2100      	movs	r1, #0
 801c774:	4618      	mov	r0, r3
 801c776:	f000 fd3b 	bl	801d1f0 <RCCEx_PLL2_Config>
 801c77a:	4603      	mov	r3, r0
 801c77c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 801c780:	e00f      	b.n	801c7a2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801c782:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c786:	3328      	adds	r3, #40	; 0x28
 801c788:	2102      	movs	r1, #2
 801c78a:	4618      	mov	r0, r3
 801c78c:	f000 fde2 	bl	801d354 <RCCEx_PLL3_Config>
 801c790:	4603      	mov	r3, r0
 801c792:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 801c796:	e004      	b.n	801c7a2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801c798:	2301      	movs	r3, #1
 801c79a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 801c79e:	e000      	b.n	801c7a2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 801c7a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c7a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801c7a6:	2b00      	cmp	r3, #0
 801c7a8:	d10b      	bne.n	801c7c2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 801c7aa:	4b4b      	ldr	r3, [pc, #300]	; (801c8d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801c7ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c7ae:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 801c7b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c7b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801c7ba:	4a47      	ldr	r2, [pc, #284]	; (801c8d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801c7bc:	430b      	orrs	r3, r1
 801c7be:	6593      	str	r3, [r2, #88]	; 0x58
 801c7c0:	e003      	b.n	801c7ca <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c7c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801c7c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 801c7ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c7ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c7d2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 801c7d6:	67bb      	str	r3, [r7, #120]	; 0x78
 801c7d8:	2300      	movs	r3, #0
 801c7da:	67fb      	str	r3, [r7, #124]	; 0x7c
 801c7dc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 801c7e0:	460b      	mov	r3, r1
 801c7e2:	4313      	orrs	r3, r2
 801c7e4:	d03b      	beq.n	801c85e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 801c7e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c7ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801c7ee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 801c7f2:	d01f      	beq.n	801c834 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 801c7f4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 801c7f8:	d818      	bhi.n	801c82c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 801c7fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801c7fe:	d003      	beq.n	801c808 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 801c800:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801c804:	d007      	beq.n	801c816 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 801c806:	e011      	b.n	801c82c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801c808:	4b33      	ldr	r3, [pc, #204]	; (801c8d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801c80a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c80c:	4a32      	ldr	r2, [pc, #200]	; (801c8d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801c80e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801c812:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 801c814:	e00f      	b.n	801c836 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801c816:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c81a:	3328      	adds	r3, #40	; 0x28
 801c81c:	2101      	movs	r1, #1
 801c81e:	4618      	mov	r0, r3
 801c820:	f000 fd98 	bl	801d354 <RCCEx_PLL3_Config>
 801c824:	4603      	mov	r3, r0
 801c826:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 801c82a:	e004      	b.n	801c836 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801c82c:	2301      	movs	r3, #1
 801c82e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 801c832:	e000      	b.n	801c836 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 801c834:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c836:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801c83a:	2b00      	cmp	r3, #0
 801c83c:	d10b      	bne.n	801c856 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801c83e:	4b26      	ldr	r3, [pc, #152]	; (801c8d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801c840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c842:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 801c846:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c84a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801c84e:	4a22      	ldr	r2, [pc, #136]	; (801c8d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801c850:	430b      	orrs	r3, r1
 801c852:	6553      	str	r3, [r2, #84]	; 0x54
 801c854:	e003      	b.n	801c85e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c856:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801c85a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 801c85e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c862:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c866:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 801c86a:	673b      	str	r3, [r7, #112]	; 0x70
 801c86c:	2300      	movs	r3, #0
 801c86e:	677b      	str	r3, [r7, #116]	; 0x74
 801c870:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 801c874:	460b      	mov	r3, r1
 801c876:	4313      	orrs	r3, r2
 801c878:	d034      	beq.n	801c8e4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 801c87a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c87e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c880:	2b00      	cmp	r3, #0
 801c882:	d003      	beq.n	801c88c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 801c884:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801c888:	d007      	beq.n	801c89a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 801c88a:	e011      	b.n	801c8b0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801c88c:	4b12      	ldr	r3, [pc, #72]	; (801c8d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801c88e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c890:	4a11      	ldr	r2, [pc, #68]	; (801c8d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801c892:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801c896:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 801c898:	e00e      	b.n	801c8b8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801c89a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c89e:	3308      	adds	r3, #8
 801c8a0:	2102      	movs	r1, #2
 801c8a2:	4618      	mov	r0, r3
 801c8a4:	f000 fca4 	bl	801d1f0 <RCCEx_PLL2_Config>
 801c8a8:	4603      	mov	r3, r0
 801c8aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 801c8ae:	e003      	b.n	801c8b8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 801c8b0:	2301      	movs	r3, #1
 801c8b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 801c8b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c8b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801c8bc:	2b00      	cmp	r3, #0
 801c8be:	d10d      	bne.n	801c8dc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 801c8c0:	4b05      	ldr	r3, [pc, #20]	; (801c8d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801c8c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c8c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801c8c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c8cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c8ce:	4a02      	ldr	r2, [pc, #8]	; (801c8d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801c8d0:	430b      	orrs	r3, r1
 801c8d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 801c8d4:	e006      	b.n	801c8e4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 801c8d6:	bf00      	nop
 801c8d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c8dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801c8e0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 801c8e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c8e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c8ec:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 801c8f0:	66bb      	str	r3, [r7, #104]	; 0x68
 801c8f2:	2300      	movs	r3, #0
 801c8f4:	66fb      	str	r3, [r7, #108]	; 0x6c
 801c8f6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 801c8fa:	460b      	mov	r3, r1
 801c8fc:	4313      	orrs	r3, r2
 801c8fe:	d00c      	beq.n	801c91a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801c900:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c904:	3328      	adds	r3, #40	; 0x28
 801c906:	2102      	movs	r1, #2
 801c908:	4618      	mov	r0, r3
 801c90a:	f000 fd23 	bl	801d354 <RCCEx_PLL3_Config>
 801c90e:	4603      	mov	r3, r0
 801c910:	2b00      	cmp	r3, #0
 801c912:	d002      	beq.n	801c91a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 801c914:	2301      	movs	r3, #1
 801c916:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 801c91a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c91e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c922:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 801c926:	663b      	str	r3, [r7, #96]	; 0x60
 801c928:	2300      	movs	r3, #0
 801c92a:	667b      	str	r3, [r7, #100]	; 0x64
 801c92c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 801c930:	460b      	mov	r3, r1
 801c932:	4313      	orrs	r3, r2
 801c934:	d038      	beq.n	801c9a8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 801c936:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c93a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c93e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801c942:	d018      	beq.n	801c976 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 801c944:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801c948:	d811      	bhi.n	801c96e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 801c94a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801c94e:	d014      	beq.n	801c97a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 801c950:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801c954:	d80b      	bhi.n	801c96e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 801c956:	2b00      	cmp	r3, #0
 801c958:	d011      	beq.n	801c97e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 801c95a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801c95e:	d106      	bne.n	801c96e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801c960:	4bc3      	ldr	r3, [pc, #780]	; (801cc70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801c962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c964:	4ac2      	ldr	r2, [pc, #776]	; (801cc70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801c966:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801c96a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 801c96c:	e008      	b.n	801c980 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801c96e:	2301      	movs	r3, #1
 801c970:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 801c974:	e004      	b.n	801c980 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801c976:	bf00      	nop
 801c978:	e002      	b.n	801c980 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801c97a:	bf00      	nop
 801c97c:	e000      	b.n	801c980 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801c97e:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c980:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801c984:	2b00      	cmp	r3, #0
 801c986:	d10b      	bne.n	801c9a0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801c988:	4bb9      	ldr	r3, [pc, #740]	; (801cc70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801c98a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c98c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 801c990:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c994:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c998:	4ab5      	ldr	r2, [pc, #724]	; (801cc70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801c99a:	430b      	orrs	r3, r1
 801c99c:	6553      	str	r3, [r2, #84]	; 0x54
 801c99e:	e003      	b.n	801c9a8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c9a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801c9a4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 801c9a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c9ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c9b0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 801c9b4:	65bb      	str	r3, [r7, #88]	; 0x58
 801c9b6:	2300      	movs	r3, #0
 801c9b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 801c9ba:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 801c9be:	460b      	mov	r3, r1
 801c9c0:	4313      	orrs	r3, r2
 801c9c2:	d009      	beq.n	801c9d8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 801c9c4:	4baa      	ldr	r3, [pc, #680]	; (801cc70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801c9c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c9c8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801c9cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c9d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c9d2:	4aa7      	ldr	r2, [pc, #668]	; (801cc70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801c9d4:	430b      	orrs	r3, r1
 801c9d6:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 801c9d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c9dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c9e0:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 801c9e4:	653b      	str	r3, [r7, #80]	; 0x50
 801c9e6:	2300      	movs	r3, #0
 801c9e8:	657b      	str	r3, [r7, #84]	; 0x54
 801c9ea:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 801c9ee:	460b      	mov	r3, r1
 801c9f0:	4313      	orrs	r3, r2
 801c9f2:	d00a      	beq.n	801ca0a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 801c9f4:	4b9e      	ldr	r3, [pc, #632]	; (801cc70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801c9f6:	691b      	ldr	r3, [r3, #16]
 801c9f8:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 801c9fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801ca00:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801ca04:	4a9a      	ldr	r2, [pc, #616]	; (801cc70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801ca06:	430b      	orrs	r3, r1
 801ca08:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 801ca0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801ca0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca12:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 801ca16:	64bb      	str	r3, [r7, #72]	; 0x48
 801ca18:	2300      	movs	r3, #0
 801ca1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801ca1c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 801ca20:	460b      	mov	r3, r1
 801ca22:	4313      	orrs	r3, r2
 801ca24:	d009      	beq.n	801ca3a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 801ca26:	4b92      	ldr	r3, [pc, #584]	; (801cc70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801ca28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ca2a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 801ca2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801ca32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ca34:	4a8e      	ldr	r2, [pc, #568]	; (801cc70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801ca36:	430b      	orrs	r3, r1
 801ca38:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 801ca3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801ca3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca42:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 801ca46:	643b      	str	r3, [r7, #64]	; 0x40
 801ca48:	2300      	movs	r3, #0
 801ca4a:	647b      	str	r3, [r7, #68]	; 0x44
 801ca4c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 801ca50:	460b      	mov	r3, r1
 801ca52:	4313      	orrs	r3, r2
 801ca54:	d00e      	beq.n	801ca74 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 801ca56:	4b86      	ldr	r3, [pc, #536]	; (801cc70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801ca58:	691b      	ldr	r3, [r3, #16]
 801ca5a:	4a85      	ldr	r2, [pc, #532]	; (801cc70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801ca5c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801ca60:	6113      	str	r3, [r2, #16]
 801ca62:	4b83      	ldr	r3, [pc, #524]	; (801cc70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801ca64:	6919      	ldr	r1, [r3, #16]
 801ca66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801ca6a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801ca6e:	4a80      	ldr	r2, [pc, #512]	; (801cc70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801ca70:	430b      	orrs	r3, r1
 801ca72:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 801ca74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801ca78:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca7c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 801ca80:	63bb      	str	r3, [r7, #56]	; 0x38
 801ca82:	2300      	movs	r3, #0
 801ca84:	63fb      	str	r3, [r7, #60]	; 0x3c
 801ca86:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 801ca8a:	460b      	mov	r3, r1
 801ca8c:	4313      	orrs	r3, r2
 801ca8e:	d009      	beq.n	801caa4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 801ca90:	4b77      	ldr	r3, [pc, #476]	; (801cc70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801ca92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801ca94:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 801ca98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801ca9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ca9e:	4a74      	ldr	r2, [pc, #464]	; (801cc70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801caa0:	430b      	orrs	r3, r1
 801caa2:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 801caa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801caa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801caac:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 801cab0:	633b      	str	r3, [r7, #48]	; 0x30
 801cab2:	2300      	movs	r3, #0
 801cab4:	637b      	str	r3, [r7, #52]	; 0x34
 801cab6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 801caba:	460b      	mov	r3, r1
 801cabc:	4313      	orrs	r3, r2
 801cabe:	d00a      	beq.n	801cad6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 801cac0:	4b6b      	ldr	r3, [pc, #428]	; (801cc70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801cac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cac4:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 801cac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801cacc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801cad0:	4a67      	ldr	r2, [pc, #412]	; (801cc70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801cad2:	430b      	orrs	r3, r1
 801cad4:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 801cad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801cada:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cade:	2100      	movs	r1, #0
 801cae0:	62b9      	str	r1, [r7, #40]	; 0x28
 801cae2:	f003 0301 	and.w	r3, r3, #1
 801cae6:	62fb      	str	r3, [r7, #44]	; 0x2c
 801cae8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 801caec:	460b      	mov	r3, r1
 801caee:	4313      	orrs	r3, r2
 801caf0:	d011      	beq.n	801cb16 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801caf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801caf6:	3308      	adds	r3, #8
 801caf8:	2100      	movs	r1, #0
 801cafa:	4618      	mov	r0, r3
 801cafc:	f000 fb78 	bl	801d1f0 <RCCEx_PLL2_Config>
 801cb00:	4603      	mov	r3, r0
 801cb02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 801cb06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801cb0a:	2b00      	cmp	r3, #0
 801cb0c:	d003      	beq.n	801cb16 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cb0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801cb12:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 801cb16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801cb1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cb1e:	2100      	movs	r1, #0
 801cb20:	6239      	str	r1, [r7, #32]
 801cb22:	f003 0302 	and.w	r3, r3, #2
 801cb26:	627b      	str	r3, [r7, #36]	; 0x24
 801cb28:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 801cb2c:	460b      	mov	r3, r1
 801cb2e:	4313      	orrs	r3, r2
 801cb30:	d011      	beq.n	801cb56 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801cb32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801cb36:	3308      	adds	r3, #8
 801cb38:	2101      	movs	r1, #1
 801cb3a:	4618      	mov	r0, r3
 801cb3c:	f000 fb58 	bl	801d1f0 <RCCEx_PLL2_Config>
 801cb40:	4603      	mov	r3, r0
 801cb42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 801cb46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801cb4a:	2b00      	cmp	r3, #0
 801cb4c:	d003      	beq.n	801cb56 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cb4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801cb52:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 801cb56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801cb5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cb5e:	2100      	movs	r1, #0
 801cb60:	61b9      	str	r1, [r7, #24]
 801cb62:	f003 0304 	and.w	r3, r3, #4
 801cb66:	61fb      	str	r3, [r7, #28]
 801cb68:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 801cb6c:	460b      	mov	r3, r1
 801cb6e:	4313      	orrs	r3, r2
 801cb70:	d011      	beq.n	801cb96 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801cb72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801cb76:	3308      	adds	r3, #8
 801cb78:	2102      	movs	r1, #2
 801cb7a:	4618      	mov	r0, r3
 801cb7c:	f000 fb38 	bl	801d1f0 <RCCEx_PLL2_Config>
 801cb80:	4603      	mov	r3, r0
 801cb82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 801cb86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801cb8a:	2b00      	cmp	r3, #0
 801cb8c:	d003      	beq.n	801cb96 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cb8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801cb92:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 801cb96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801cb9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cb9e:	2100      	movs	r1, #0
 801cba0:	6139      	str	r1, [r7, #16]
 801cba2:	f003 0308 	and.w	r3, r3, #8
 801cba6:	617b      	str	r3, [r7, #20]
 801cba8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 801cbac:	460b      	mov	r3, r1
 801cbae:	4313      	orrs	r3, r2
 801cbb0:	d011      	beq.n	801cbd6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801cbb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801cbb6:	3328      	adds	r3, #40	; 0x28
 801cbb8:	2100      	movs	r1, #0
 801cbba:	4618      	mov	r0, r3
 801cbbc:	f000 fbca 	bl	801d354 <RCCEx_PLL3_Config>
 801cbc0:	4603      	mov	r3, r0
 801cbc2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 801cbc6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801cbca:	2b00      	cmp	r3, #0
 801cbcc:	d003      	beq.n	801cbd6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cbce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801cbd2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 801cbd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801cbda:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cbde:	2100      	movs	r1, #0
 801cbe0:	60b9      	str	r1, [r7, #8]
 801cbe2:	f003 0310 	and.w	r3, r3, #16
 801cbe6:	60fb      	str	r3, [r7, #12]
 801cbe8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801cbec:	460b      	mov	r3, r1
 801cbee:	4313      	orrs	r3, r2
 801cbf0:	d011      	beq.n	801cc16 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801cbf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801cbf6:	3328      	adds	r3, #40	; 0x28
 801cbf8:	2101      	movs	r1, #1
 801cbfa:	4618      	mov	r0, r3
 801cbfc:	f000 fbaa 	bl	801d354 <RCCEx_PLL3_Config>
 801cc00:	4603      	mov	r3, r0
 801cc02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 801cc06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801cc0a:	2b00      	cmp	r3, #0
 801cc0c:	d003      	beq.n	801cc16 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cc0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801cc12:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 801cc16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801cc1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc1e:	2100      	movs	r1, #0
 801cc20:	6039      	str	r1, [r7, #0]
 801cc22:	f003 0320 	and.w	r3, r3, #32
 801cc26:	607b      	str	r3, [r7, #4]
 801cc28:	e9d7 1200 	ldrd	r1, r2, [r7]
 801cc2c:	460b      	mov	r3, r1
 801cc2e:	4313      	orrs	r3, r2
 801cc30:	d011      	beq.n	801cc56 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801cc32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801cc36:	3328      	adds	r3, #40	; 0x28
 801cc38:	2102      	movs	r1, #2
 801cc3a:	4618      	mov	r0, r3
 801cc3c:	f000 fb8a 	bl	801d354 <RCCEx_PLL3_Config>
 801cc40:	4603      	mov	r3, r0
 801cc42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 801cc46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801cc4a:	2b00      	cmp	r3, #0
 801cc4c:	d003      	beq.n	801cc56 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cc4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801cc52:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 801cc56:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 801cc5a:	2b00      	cmp	r3, #0
 801cc5c:	d101      	bne.n	801cc62 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 801cc5e:	2300      	movs	r3, #0
 801cc60:	e000      	b.n	801cc64 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 801cc62:	2301      	movs	r3, #1
}
 801cc64:	4618      	mov	r0, r3
 801cc66:	f507 7794 	add.w	r7, r7, #296	; 0x128
 801cc6a:	46bd      	mov	sp, r7
 801cc6c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801cc70:	58024400 	.word	0x58024400

0801cc74 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 801cc74:	b580      	push	{r7, lr}
 801cc76:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 801cc78:	f7fe fd96 	bl	801b7a8 <HAL_RCC_GetHCLKFreq>
 801cc7c:	4602      	mov	r2, r0
 801cc7e:	4b06      	ldr	r3, [pc, #24]	; (801cc98 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 801cc80:	6a1b      	ldr	r3, [r3, #32]
 801cc82:	091b      	lsrs	r3, r3, #4
 801cc84:	f003 0307 	and.w	r3, r3, #7
 801cc88:	4904      	ldr	r1, [pc, #16]	; (801cc9c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 801cc8a:	5ccb      	ldrb	r3, [r1, r3]
 801cc8c:	f003 031f 	and.w	r3, r3, #31
 801cc90:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 801cc94:	4618      	mov	r0, r3
 801cc96:	bd80      	pop	{r7, pc}
 801cc98:	58024400 	.word	0x58024400
 801cc9c:	08072a10 	.word	0x08072a10

0801cca0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 801cca0:	b480      	push	{r7}
 801cca2:	b089      	sub	sp, #36	; 0x24
 801cca4:	af00      	add	r7, sp, #0
 801cca6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801cca8:	4ba1      	ldr	r3, [pc, #644]	; (801cf30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801ccaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ccac:	f003 0303 	and.w	r3, r3, #3
 801ccb0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 801ccb2:	4b9f      	ldr	r3, [pc, #636]	; (801cf30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801ccb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ccb6:	0b1b      	lsrs	r3, r3, #12
 801ccb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801ccbc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 801ccbe:	4b9c      	ldr	r3, [pc, #624]	; (801cf30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801ccc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ccc2:	091b      	lsrs	r3, r3, #4
 801ccc4:	f003 0301 	and.w	r3, r3, #1
 801ccc8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 801ccca:	4b99      	ldr	r3, [pc, #612]	; (801cf30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801cccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ccce:	08db      	lsrs	r3, r3, #3
 801ccd0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ccd4:	693a      	ldr	r2, [r7, #16]
 801ccd6:	fb02 f303 	mul.w	r3, r2, r3
 801ccda:	ee07 3a90 	vmov	s15, r3
 801ccde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801cce2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 801cce6:	697b      	ldr	r3, [r7, #20]
 801cce8:	2b00      	cmp	r3, #0
 801ccea:	f000 8111 	beq.w	801cf10 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 801ccee:	69bb      	ldr	r3, [r7, #24]
 801ccf0:	2b02      	cmp	r3, #2
 801ccf2:	f000 8083 	beq.w	801cdfc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 801ccf6:	69bb      	ldr	r3, [r7, #24]
 801ccf8:	2b02      	cmp	r3, #2
 801ccfa:	f200 80a1 	bhi.w	801ce40 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 801ccfe:	69bb      	ldr	r3, [r7, #24]
 801cd00:	2b00      	cmp	r3, #0
 801cd02:	d003      	beq.n	801cd0c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 801cd04:	69bb      	ldr	r3, [r7, #24]
 801cd06:	2b01      	cmp	r3, #1
 801cd08:	d056      	beq.n	801cdb8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 801cd0a:	e099      	b.n	801ce40 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801cd0c:	4b88      	ldr	r3, [pc, #544]	; (801cf30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801cd0e:	681b      	ldr	r3, [r3, #0]
 801cd10:	f003 0320 	and.w	r3, r3, #32
 801cd14:	2b00      	cmp	r3, #0
 801cd16:	d02d      	beq.n	801cd74 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801cd18:	4b85      	ldr	r3, [pc, #532]	; (801cf30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801cd1a:	681b      	ldr	r3, [r3, #0]
 801cd1c:	08db      	lsrs	r3, r3, #3
 801cd1e:	f003 0303 	and.w	r3, r3, #3
 801cd22:	4a84      	ldr	r2, [pc, #528]	; (801cf34 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 801cd24:	fa22 f303 	lsr.w	r3, r2, r3
 801cd28:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801cd2a:	68bb      	ldr	r3, [r7, #8]
 801cd2c:	ee07 3a90 	vmov	s15, r3
 801cd30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801cd34:	697b      	ldr	r3, [r7, #20]
 801cd36:	ee07 3a90 	vmov	s15, r3
 801cd3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801cd3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801cd42:	4b7b      	ldr	r3, [pc, #492]	; (801cf30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801cd44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cd46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801cd4a:	ee07 3a90 	vmov	s15, r3
 801cd4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801cd52:	ed97 6a03 	vldr	s12, [r7, #12]
 801cd56:	eddf 5a78 	vldr	s11, [pc, #480]	; 801cf38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801cd5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801cd5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801cd62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801cd66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801cd6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801cd6e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801cd72:	e087      	b.n	801ce84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801cd74:	697b      	ldr	r3, [r7, #20]
 801cd76:	ee07 3a90 	vmov	s15, r3
 801cd7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801cd7e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 801cf3c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 801cd82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801cd86:	4b6a      	ldr	r3, [pc, #424]	; (801cf30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801cd88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cd8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801cd8e:	ee07 3a90 	vmov	s15, r3
 801cd92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801cd96:	ed97 6a03 	vldr	s12, [r7, #12]
 801cd9a:	eddf 5a67 	vldr	s11, [pc, #412]	; 801cf38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801cd9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801cda2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801cda6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801cdaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801cdae:	ee67 7a27 	vmul.f32	s15, s14, s15
 801cdb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801cdb6:	e065      	b.n	801ce84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801cdb8:	697b      	ldr	r3, [r7, #20]
 801cdba:	ee07 3a90 	vmov	s15, r3
 801cdbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801cdc2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 801cf40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801cdc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801cdca:	4b59      	ldr	r3, [pc, #356]	; (801cf30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801cdcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cdce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801cdd2:	ee07 3a90 	vmov	s15, r3
 801cdd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801cdda:	ed97 6a03 	vldr	s12, [r7, #12]
 801cdde:	eddf 5a56 	vldr	s11, [pc, #344]	; 801cf38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801cde2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801cde6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801cdea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801cdee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801cdf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 801cdf6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801cdfa:	e043      	b.n	801ce84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801cdfc:	697b      	ldr	r3, [r7, #20]
 801cdfe:	ee07 3a90 	vmov	s15, r3
 801ce02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ce06:	eddf 6a4f 	vldr	s13, [pc, #316]	; 801cf44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 801ce0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801ce0e:	4b48      	ldr	r3, [pc, #288]	; (801cf30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801ce10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ce12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ce16:	ee07 3a90 	vmov	s15, r3
 801ce1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ce1e:	ed97 6a03 	vldr	s12, [r7, #12]
 801ce22:	eddf 5a45 	vldr	s11, [pc, #276]	; 801cf38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801ce26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801ce2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801ce2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ce32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ce36:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ce3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801ce3e:	e021      	b.n	801ce84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801ce40:	697b      	ldr	r3, [r7, #20]
 801ce42:	ee07 3a90 	vmov	s15, r3
 801ce46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ce4a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 801cf40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801ce4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801ce52:	4b37      	ldr	r3, [pc, #220]	; (801cf30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801ce54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ce56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ce5a:	ee07 3a90 	vmov	s15, r3
 801ce5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ce62:	ed97 6a03 	vldr	s12, [r7, #12]
 801ce66:	eddf 5a34 	vldr	s11, [pc, #208]	; 801cf38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801ce6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801ce6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801ce72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ce76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ce7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ce7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801ce82:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 801ce84:	4b2a      	ldr	r3, [pc, #168]	; (801cf30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801ce86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ce88:	0a5b      	lsrs	r3, r3, #9
 801ce8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801ce8e:	ee07 3a90 	vmov	s15, r3
 801ce92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ce96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ce9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 801ce9e:	edd7 6a07 	vldr	s13, [r7, #28]
 801cea2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801cea6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801ceaa:	ee17 2a90 	vmov	r2, s15
 801ceae:	687b      	ldr	r3, [r7, #4]
 801ceb0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 801ceb2:	4b1f      	ldr	r3, [pc, #124]	; (801cf30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801ceb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ceb6:	0c1b      	lsrs	r3, r3, #16
 801ceb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801cebc:	ee07 3a90 	vmov	s15, r3
 801cec0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801cec4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801cec8:	ee37 7a87 	vadd.f32	s14, s15, s14
 801cecc:	edd7 6a07 	vldr	s13, [r7, #28]
 801ced0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801ced4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801ced8:	ee17 2a90 	vmov	r2, s15
 801cedc:	687b      	ldr	r3, [r7, #4]
 801cede:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 801cee0:	4b13      	ldr	r3, [pc, #76]	; (801cf30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801cee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cee4:	0e1b      	lsrs	r3, r3, #24
 801cee6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801ceea:	ee07 3a90 	vmov	s15, r3
 801ceee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801cef2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801cef6:	ee37 7a87 	vadd.f32	s14, s15, s14
 801cefa:	edd7 6a07 	vldr	s13, [r7, #28]
 801cefe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801cf02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801cf06:	ee17 2a90 	vmov	r2, s15
 801cf0a:	687b      	ldr	r3, [r7, #4]
 801cf0c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 801cf0e:	e008      	b.n	801cf22 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 801cf10:	687b      	ldr	r3, [r7, #4]
 801cf12:	2200      	movs	r2, #0
 801cf14:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 801cf16:	687b      	ldr	r3, [r7, #4]
 801cf18:	2200      	movs	r2, #0
 801cf1a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 801cf1c:	687b      	ldr	r3, [r7, #4]
 801cf1e:	2200      	movs	r2, #0
 801cf20:	609a      	str	r2, [r3, #8]
}
 801cf22:	bf00      	nop
 801cf24:	3724      	adds	r7, #36	; 0x24
 801cf26:	46bd      	mov	sp, r7
 801cf28:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf2c:	4770      	bx	lr
 801cf2e:	bf00      	nop
 801cf30:	58024400 	.word	0x58024400
 801cf34:	03d09000 	.word	0x03d09000
 801cf38:	46000000 	.word	0x46000000
 801cf3c:	4c742400 	.word	0x4c742400
 801cf40:	4a742400 	.word	0x4a742400
 801cf44:	4bbebc20 	.word	0x4bbebc20

0801cf48 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 801cf48:	b480      	push	{r7}
 801cf4a:	b089      	sub	sp, #36	; 0x24
 801cf4c:	af00      	add	r7, sp, #0
 801cf4e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801cf50:	4ba1      	ldr	r3, [pc, #644]	; (801d1d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801cf52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cf54:	f003 0303 	and.w	r3, r3, #3
 801cf58:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 801cf5a:	4b9f      	ldr	r3, [pc, #636]	; (801d1d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801cf5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cf5e:	0d1b      	lsrs	r3, r3, #20
 801cf60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801cf64:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 801cf66:	4b9c      	ldr	r3, [pc, #624]	; (801d1d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801cf68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cf6a:	0a1b      	lsrs	r3, r3, #8
 801cf6c:	f003 0301 	and.w	r3, r3, #1
 801cf70:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 801cf72:	4b99      	ldr	r3, [pc, #612]	; (801d1d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801cf74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801cf76:	08db      	lsrs	r3, r3, #3
 801cf78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801cf7c:	693a      	ldr	r2, [r7, #16]
 801cf7e:	fb02 f303 	mul.w	r3, r2, r3
 801cf82:	ee07 3a90 	vmov	s15, r3
 801cf86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801cf8a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 801cf8e:	697b      	ldr	r3, [r7, #20]
 801cf90:	2b00      	cmp	r3, #0
 801cf92:	f000 8111 	beq.w	801d1b8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 801cf96:	69bb      	ldr	r3, [r7, #24]
 801cf98:	2b02      	cmp	r3, #2
 801cf9a:	f000 8083 	beq.w	801d0a4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 801cf9e:	69bb      	ldr	r3, [r7, #24]
 801cfa0:	2b02      	cmp	r3, #2
 801cfa2:	f200 80a1 	bhi.w	801d0e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 801cfa6:	69bb      	ldr	r3, [r7, #24]
 801cfa8:	2b00      	cmp	r3, #0
 801cfaa:	d003      	beq.n	801cfb4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 801cfac:	69bb      	ldr	r3, [r7, #24]
 801cfae:	2b01      	cmp	r3, #1
 801cfb0:	d056      	beq.n	801d060 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 801cfb2:	e099      	b.n	801d0e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801cfb4:	4b88      	ldr	r3, [pc, #544]	; (801d1d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801cfb6:	681b      	ldr	r3, [r3, #0]
 801cfb8:	f003 0320 	and.w	r3, r3, #32
 801cfbc:	2b00      	cmp	r3, #0
 801cfbe:	d02d      	beq.n	801d01c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801cfc0:	4b85      	ldr	r3, [pc, #532]	; (801d1d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801cfc2:	681b      	ldr	r3, [r3, #0]
 801cfc4:	08db      	lsrs	r3, r3, #3
 801cfc6:	f003 0303 	and.w	r3, r3, #3
 801cfca:	4a84      	ldr	r2, [pc, #528]	; (801d1dc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 801cfcc:	fa22 f303 	lsr.w	r3, r2, r3
 801cfd0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801cfd2:	68bb      	ldr	r3, [r7, #8]
 801cfd4:	ee07 3a90 	vmov	s15, r3
 801cfd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801cfdc:	697b      	ldr	r3, [r7, #20]
 801cfde:	ee07 3a90 	vmov	s15, r3
 801cfe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801cfe6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801cfea:	4b7b      	ldr	r3, [pc, #492]	; (801d1d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801cfec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cfee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801cff2:	ee07 3a90 	vmov	s15, r3
 801cff6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801cffa:	ed97 6a03 	vldr	s12, [r7, #12]
 801cffe:	eddf 5a78 	vldr	s11, [pc, #480]	; 801d1e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801d002:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d006:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d00a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d00e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d012:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d016:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801d01a:	e087      	b.n	801d12c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801d01c:	697b      	ldr	r3, [r7, #20]
 801d01e:	ee07 3a90 	vmov	s15, r3
 801d022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d026:	eddf 6a6f 	vldr	s13, [pc, #444]	; 801d1e4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 801d02a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d02e:	4b6a      	ldr	r3, [pc, #424]	; (801d1d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801d030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d032:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d036:	ee07 3a90 	vmov	s15, r3
 801d03a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d03e:	ed97 6a03 	vldr	s12, [r7, #12]
 801d042:	eddf 5a67 	vldr	s11, [pc, #412]	; 801d1e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801d046:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d04a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d04e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d052:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d056:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d05a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801d05e:	e065      	b.n	801d12c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801d060:	697b      	ldr	r3, [r7, #20]
 801d062:	ee07 3a90 	vmov	s15, r3
 801d066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d06a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 801d1e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801d06e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d072:	4b59      	ldr	r3, [pc, #356]	; (801d1d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801d074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d076:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d07a:	ee07 3a90 	vmov	s15, r3
 801d07e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d082:	ed97 6a03 	vldr	s12, [r7, #12]
 801d086:	eddf 5a56 	vldr	s11, [pc, #344]	; 801d1e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801d08a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d08e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d092:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d096:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d09a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d09e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801d0a2:	e043      	b.n	801d12c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801d0a4:	697b      	ldr	r3, [r7, #20]
 801d0a6:	ee07 3a90 	vmov	s15, r3
 801d0aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d0ae:	eddf 6a4f 	vldr	s13, [pc, #316]	; 801d1ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 801d0b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d0b6:	4b48      	ldr	r3, [pc, #288]	; (801d1d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801d0b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d0ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d0be:	ee07 3a90 	vmov	s15, r3
 801d0c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d0c6:	ed97 6a03 	vldr	s12, [r7, #12]
 801d0ca:	eddf 5a45 	vldr	s11, [pc, #276]	; 801d1e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801d0ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d0d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d0d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d0da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d0de:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d0e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801d0e6:	e021      	b.n	801d12c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801d0e8:	697b      	ldr	r3, [r7, #20]
 801d0ea:	ee07 3a90 	vmov	s15, r3
 801d0ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d0f2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 801d1e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801d0f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d0fa:	4b37      	ldr	r3, [pc, #220]	; (801d1d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801d0fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d0fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d102:	ee07 3a90 	vmov	s15, r3
 801d106:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d10a:	ed97 6a03 	vldr	s12, [r7, #12]
 801d10e:	eddf 5a34 	vldr	s11, [pc, #208]	; 801d1e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801d112:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d116:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d11a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d11e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d122:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d126:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801d12a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 801d12c:	4b2a      	ldr	r3, [pc, #168]	; (801d1d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801d12e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d130:	0a5b      	lsrs	r3, r3, #9
 801d132:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801d136:	ee07 3a90 	vmov	s15, r3
 801d13a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d13e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d142:	ee37 7a87 	vadd.f32	s14, s15, s14
 801d146:	edd7 6a07 	vldr	s13, [r7, #28]
 801d14a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801d14e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801d152:	ee17 2a90 	vmov	r2, s15
 801d156:	687b      	ldr	r3, [r7, #4]
 801d158:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 801d15a:	4b1f      	ldr	r3, [pc, #124]	; (801d1d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801d15c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d15e:	0c1b      	lsrs	r3, r3, #16
 801d160:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801d164:	ee07 3a90 	vmov	s15, r3
 801d168:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d16c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d170:	ee37 7a87 	vadd.f32	s14, s15, s14
 801d174:	edd7 6a07 	vldr	s13, [r7, #28]
 801d178:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801d17c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801d180:	ee17 2a90 	vmov	r2, s15
 801d184:	687b      	ldr	r3, [r7, #4]
 801d186:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 801d188:	4b13      	ldr	r3, [pc, #76]	; (801d1d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801d18a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d18c:	0e1b      	lsrs	r3, r3, #24
 801d18e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801d192:	ee07 3a90 	vmov	s15, r3
 801d196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d19a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d19e:	ee37 7a87 	vadd.f32	s14, s15, s14
 801d1a2:	edd7 6a07 	vldr	s13, [r7, #28]
 801d1a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801d1aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801d1ae:	ee17 2a90 	vmov	r2, s15
 801d1b2:	687b      	ldr	r3, [r7, #4]
 801d1b4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 801d1b6:	e008      	b.n	801d1ca <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 801d1b8:	687b      	ldr	r3, [r7, #4]
 801d1ba:	2200      	movs	r2, #0
 801d1bc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 801d1be:	687b      	ldr	r3, [r7, #4]
 801d1c0:	2200      	movs	r2, #0
 801d1c2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 801d1c4:	687b      	ldr	r3, [r7, #4]
 801d1c6:	2200      	movs	r2, #0
 801d1c8:	609a      	str	r2, [r3, #8]
}
 801d1ca:	bf00      	nop
 801d1cc:	3724      	adds	r7, #36	; 0x24
 801d1ce:	46bd      	mov	sp, r7
 801d1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d1d4:	4770      	bx	lr
 801d1d6:	bf00      	nop
 801d1d8:	58024400 	.word	0x58024400
 801d1dc:	03d09000 	.word	0x03d09000
 801d1e0:	46000000 	.word	0x46000000
 801d1e4:	4c742400 	.word	0x4c742400
 801d1e8:	4a742400 	.word	0x4a742400
 801d1ec:	4bbebc20 	.word	0x4bbebc20

0801d1f0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 801d1f0:	b580      	push	{r7, lr}
 801d1f2:	b084      	sub	sp, #16
 801d1f4:	af00      	add	r7, sp, #0
 801d1f6:	6078      	str	r0, [r7, #4]
 801d1f8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801d1fa:	2300      	movs	r3, #0
 801d1fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801d1fe:	4b53      	ldr	r3, [pc, #332]	; (801d34c <RCCEx_PLL2_Config+0x15c>)
 801d200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d202:	f003 0303 	and.w	r3, r3, #3
 801d206:	2b03      	cmp	r3, #3
 801d208:	d101      	bne.n	801d20e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 801d20a:	2301      	movs	r3, #1
 801d20c:	e099      	b.n	801d342 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 801d20e:	4b4f      	ldr	r3, [pc, #316]	; (801d34c <RCCEx_PLL2_Config+0x15c>)
 801d210:	681b      	ldr	r3, [r3, #0]
 801d212:	4a4e      	ldr	r2, [pc, #312]	; (801d34c <RCCEx_PLL2_Config+0x15c>)
 801d214:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801d218:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801d21a:	f7f8 fe59 	bl	8015ed0 <HAL_GetTick>
 801d21e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801d220:	e008      	b.n	801d234 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801d222:	f7f8 fe55 	bl	8015ed0 <HAL_GetTick>
 801d226:	4602      	mov	r2, r0
 801d228:	68bb      	ldr	r3, [r7, #8]
 801d22a:	1ad3      	subs	r3, r2, r3
 801d22c:	2b02      	cmp	r3, #2
 801d22e:	d901      	bls.n	801d234 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 801d230:	2303      	movs	r3, #3
 801d232:	e086      	b.n	801d342 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801d234:	4b45      	ldr	r3, [pc, #276]	; (801d34c <RCCEx_PLL2_Config+0x15c>)
 801d236:	681b      	ldr	r3, [r3, #0]
 801d238:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801d23c:	2b00      	cmp	r3, #0
 801d23e:	d1f0      	bne.n	801d222 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 801d240:	4b42      	ldr	r3, [pc, #264]	; (801d34c <RCCEx_PLL2_Config+0x15c>)
 801d242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d244:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 801d248:	687b      	ldr	r3, [r7, #4]
 801d24a:	681b      	ldr	r3, [r3, #0]
 801d24c:	031b      	lsls	r3, r3, #12
 801d24e:	493f      	ldr	r1, [pc, #252]	; (801d34c <RCCEx_PLL2_Config+0x15c>)
 801d250:	4313      	orrs	r3, r2
 801d252:	628b      	str	r3, [r1, #40]	; 0x28
 801d254:	687b      	ldr	r3, [r7, #4]
 801d256:	685b      	ldr	r3, [r3, #4]
 801d258:	3b01      	subs	r3, #1
 801d25a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801d25e:	687b      	ldr	r3, [r7, #4]
 801d260:	689b      	ldr	r3, [r3, #8]
 801d262:	3b01      	subs	r3, #1
 801d264:	025b      	lsls	r3, r3, #9
 801d266:	b29b      	uxth	r3, r3
 801d268:	431a      	orrs	r2, r3
 801d26a:	687b      	ldr	r3, [r7, #4]
 801d26c:	68db      	ldr	r3, [r3, #12]
 801d26e:	3b01      	subs	r3, #1
 801d270:	041b      	lsls	r3, r3, #16
 801d272:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 801d276:	431a      	orrs	r2, r3
 801d278:	687b      	ldr	r3, [r7, #4]
 801d27a:	691b      	ldr	r3, [r3, #16]
 801d27c:	3b01      	subs	r3, #1
 801d27e:	061b      	lsls	r3, r3, #24
 801d280:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 801d284:	4931      	ldr	r1, [pc, #196]	; (801d34c <RCCEx_PLL2_Config+0x15c>)
 801d286:	4313      	orrs	r3, r2
 801d288:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 801d28a:	4b30      	ldr	r3, [pc, #192]	; (801d34c <RCCEx_PLL2_Config+0x15c>)
 801d28c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d28e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 801d292:	687b      	ldr	r3, [r7, #4]
 801d294:	695b      	ldr	r3, [r3, #20]
 801d296:	492d      	ldr	r1, [pc, #180]	; (801d34c <RCCEx_PLL2_Config+0x15c>)
 801d298:	4313      	orrs	r3, r2
 801d29a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 801d29c:	4b2b      	ldr	r3, [pc, #172]	; (801d34c <RCCEx_PLL2_Config+0x15c>)
 801d29e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d2a0:	f023 0220 	bic.w	r2, r3, #32
 801d2a4:	687b      	ldr	r3, [r7, #4]
 801d2a6:	699b      	ldr	r3, [r3, #24]
 801d2a8:	4928      	ldr	r1, [pc, #160]	; (801d34c <RCCEx_PLL2_Config+0x15c>)
 801d2aa:	4313      	orrs	r3, r2
 801d2ac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 801d2ae:	4b27      	ldr	r3, [pc, #156]	; (801d34c <RCCEx_PLL2_Config+0x15c>)
 801d2b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d2b2:	4a26      	ldr	r2, [pc, #152]	; (801d34c <RCCEx_PLL2_Config+0x15c>)
 801d2b4:	f023 0310 	bic.w	r3, r3, #16
 801d2b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 801d2ba:	4b24      	ldr	r3, [pc, #144]	; (801d34c <RCCEx_PLL2_Config+0x15c>)
 801d2bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801d2be:	4b24      	ldr	r3, [pc, #144]	; (801d350 <RCCEx_PLL2_Config+0x160>)
 801d2c0:	4013      	ands	r3, r2
 801d2c2:	687a      	ldr	r2, [r7, #4]
 801d2c4:	69d2      	ldr	r2, [r2, #28]
 801d2c6:	00d2      	lsls	r2, r2, #3
 801d2c8:	4920      	ldr	r1, [pc, #128]	; (801d34c <RCCEx_PLL2_Config+0x15c>)
 801d2ca:	4313      	orrs	r3, r2
 801d2cc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 801d2ce:	4b1f      	ldr	r3, [pc, #124]	; (801d34c <RCCEx_PLL2_Config+0x15c>)
 801d2d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d2d2:	4a1e      	ldr	r2, [pc, #120]	; (801d34c <RCCEx_PLL2_Config+0x15c>)
 801d2d4:	f043 0310 	orr.w	r3, r3, #16
 801d2d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801d2da:	683b      	ldr	r3, [r7, #0]
 801d2dc:	2b00      	cmp	r3, #0
 801d2de:	d106      	bne.n	801d2ee <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 801d2e0:	4b1a      	ldr	r3, [pc, #104]	; (801d34c <RCCEx_PLL2_Config+0x15c>)
 801d2e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d2e4:	4a19      	ldr	r2, [pc, #100]	; (801d34c <RCCEx_PLL2_Config+0x15c>)
 801d2e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801d2ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 801d2ec:	e00f      	b.n	801d30e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801d2ee:	683b      	ldr	r3, [r7, #0]
 801d2f0:	2b01      	cmp	r3, #1
 801d2f2:	d106      	bne.n	801d302 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 801d2f4:	4b15      	ldr	r3, [pc, #84]	; (801d34c <RCCEx_PLL2_Config+0x15c>)
 801d2f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d2f8:	4a14      	ldr	r2, [pc, #80]	; (801d34c <RCCEx_PLL2_Config+0x15c>)
 801d2fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801d2fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 801d300:	e005      	b.n	801d30e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 801d302:	4b12      	ldr	r3, [pc, #72]	; (801d34c <RCCEx_PLL2_Config+0x15c>)
 801d304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d306:	4a11      	ldr	r2, [pc, #68]	; (801d34c <RCCEx_PLL2_Config+0x15c>)
 801d308:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801d30c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 801d30e:	4b0f      	ldr	r3, [pc, #60]	; (801d34c <RCCEx_PLL2_Config+0x15c>)
 801d310:	681b      	ldr	r3, [r3, #0]
 801d312:	4a0e      	ldr	r2, [pc, #56]	; (801d34c <RCCEx_PLL2_Config+0x15c>)
 801d314:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801d318:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801d31a:	f7f8 fdd9 	bl	8015ed0 <HAL_GetTick>
 801d31e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801d320:	e008      	b.n	801d334 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801d322:	f7f8 fdd5 	bl	8015ed0 <HAL_GetTick>
 801d326:	4602      	mov	r2, r0
 801d328:	68bb      	ldr	r3, [r7, #8]
 801d32a:	1ad3      	subs	r3, r2, r3
 801d32c:	2b02      	cmp	r3, #2
 801d32e:	d901      	bls.n	801d334 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 801d330:	2303      	movs	r3, #3
 801d332:	e006      	b.n	801d342 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801d334:	4b05      	ldr	r3, [pc, #20]	; (801d34c <RCCEx_PLL2_Config+0x15c>)
 801d336:	681b      	ldr	r3, [r3, #0]
 801d338:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801d33c:	2b00      	cmp	r3, #0
 801d33e:	d0f0      	beq.n	801d322 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 801d340:	7bfb      	ldrb	r3, [r7, #15]
}
 801d342:	4618      	mov	r0, r3
 801d344:	3710      	adds	r7, #16
 801d346:	46bd      	mov	sp, r7
 801d348:	bd80      	pop	{r7, pc}
 801d34a:	bf00      	nop
 801d34c:	58024400 	.word	0x58024400
 801d350:	ffff0007 	.word	0xffff0007

0801d354 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 801d354:	b580      	push	{r7, lr}
 801d356:	b084      	sub	sp, #16
 801d358:	af00      	add	r7, sp, #0
 801d35a:	6078      	str	r0, [r7, #4]
 801d35c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801d35e:	2300      	movs	r3, #0
 801d360:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801d362:	4b53      	ldr	r3, [pc, #332]	; (801d4b0 <RCCEx_PLL3_Config+0x15c>)
 801d364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d366:	f003 0303 	and.w	r3, r3, #3
 801d36a:	2b03      	cmp	r3, #3
 801d36c:	d101      	bne.n	801d372 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 801d36e:	2301      	movs	r3, #1
 801d370:	e099      	b.n	801d4a6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 801d372:	4b4f      	ldr	r3, [pc, #316]	; (801d4b0 <RCCEx_PLL3_Config+0x15c>)
 801d374:	681b      	ldr	r3, [r3, #0]
 801d376:	4a4e      	ldr	r2, [pc, #312]	; (801d4b0 <RCCEx_PLL3_Config+0x15c>)
 801d378:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801d37c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801d37e:	f7f8 fda7 	bl	8015ed0 <HAL_GetTick>
 801d382:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801d384:	e008      	b.n	801d398 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801d386:	f7f8 fda3 	bl	8015ed0 <HAL_GetTick>
 801d38a:	4602      	mov	r2, r0
 801d38c:	68bb      	ldr	r3, [r7, #8]
 801d38e:	1ad3      	subs	r3, r2, r3
 801d390:	2b02      	cmp	r3, #2
 801d392:	d901      	bls.n	801d398 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 801d394:	2303      	movs	r3, #3
 801d396:	e086      	b.n	801d4a6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801d398:	4b45      	ldr	r3, [pc, #276]	; (801d4b0 <RCCEx_PLL3_Config+0x15c>)
 801d39a:	681b      	ldr	r3, [r3, #0]
 801d39c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801d3a0:	2b00      	cmp	r3, #0
 801d3a2:	d1f0      	bne.n	801d386 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 801d3a4:	4b42      	ldr	r3, [pc, #264]	; (801d4b0 <RCCEx_PLL3_Config+0x15c>)
 801d3a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d3a8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 801d3ac:	687b      	ldr	r3, [r7, #4]
 801d3ae:	681b      	ldr	r3, [r3, #0]
 801d3b0:	051b      	lsls	r3, r3, #20
 801d3b2:	493f      	ldr	r1, [pc, #252]	; (801d4b0 <RCCEx_PLL3_Config+0x15c>)
 801d3b4:	4313      	orrs	r3, r2
 801d3b6:	628b      	str	r3, [r1, #40]	; 0x28
 801d3b8:	687b      	ldr	r3, [r7, #4]
 801d3ba:	685b      	ldr	r3, [r3, #4]
 801d3bc:	3b01      	subs	r3, #1
 801d3be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801d3c2:	687b      	ldr	r3, [r7, #4]
 801d3c4:	689b      	ldr	r3, [r3, #8]
 801d3c6:	3b01      	subs	r3, #1
 801d3c8:	025b      	lsls	r3, r3, #9
 801d3ca:	b29b      	uxth	r3, r3
 801d3cc:	431a      	orrs	r2, r3
 801d3ce:	687b      	ldr	r3, [r7, #4]
 801d3d0:	68db      	ldr	r3, [r3, #12]
 801d3d2:	3b01      	subs	r3, #1
 801d3d4:	041b      	lsls	r3, r3, #16
 801d3d6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 801d3da:	431a      	orrs	r2, r3
 801d3dc:	687b      	ldr	r3, [r7, #4]
 801d3de:	691b      	ldr	r3, [r3, #16]
 801d3e0:	3b01      	subs	r3, #1
 801d3e2:	061b      	lsls	r3, r3, #24
 801d3e4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 801d3e8:	4931      	ldr	r1, [pc, #196]	; (801d4b0 <RCCEx_PLL3_Config+0x15c>)
 801d3ea:	4313      	orrs	r3, r2
 801d3ec:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 801d3ee:	4b30      	ldr	r3, [pc, #192]	; (801d4b0 <RCCEx_PLL3_Config+0x15c>)
 801d3f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d3f2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 801d3f6:	687b      	ldr	r3, [r7, #4]
 801d3f8:	695b      	ldr	r3, [r3, #20]
 801d3fa:	492d      	ldr	r1, [pc, #180]	; (801d4b0 <RCCEx_PLL3_Config+0x15c>)
 801d3fc:	4313      	orrs	r3, r2
 801d3fe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 801d400:	4b2b      	ldr	r3, [pc, #172]	; (801d4b0 <RCCEx_PLL3_Config+0x15c>)
 801d402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d404:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 801d408:	687b      	ldr	r3, [r7, #4]
 801d40a:	699b      	ldr	r3, [r3, #24]
 801d40c:	4928      	ldr	r1, [pc, #160]	; (801d4b0 <RCCEx_PLL3_Config+0x15c>)
 801d40e:	4313      	orrs	r3, r2
 801d410:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 801d412:	4b27      	ldr	r3, [pc, #156]	; (801d4b0 <RCCEx_PLL3_Config+0x15c>)
 801d414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d416:	4a26      	ldr	r2, [pc, #152]	; (801d4b0 <RCCEx_PLL3_Config+0x15c>)
 801d418:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801d41c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 801d41e:	4b24      	ldr	r3, [pc, #144]	; (801d4b0 <RCCEx_PLL3_Config+0x15c>)
 801d420:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801d422:	4b24      	ldr	r3, [pc, #144]	; (801d4b4 <RCCEx_PLL3_Config+0x160>)
 801d424:	4013      	ands	r3, r2
 801d426:	687a      	ldr	r2, [r7, #4]
 801d428:	69d2      	ldr	r2, [r2, #28]
 801d42a:	00d2      	lsls	r2, r2, #3
 801d42c:	4920      	ldr	r1, [pc, #128]	; (801d4b0 <RCCEx_PLL3_Config+0x15c>)
 801d42e:	4313      	orrs	r3, r2
 801d430:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 801d432:	4b1f      	ldr	r3, [pc, #124]	; (801d4b0 <RCCEx_PLL3_Config+0x15c>)
 801d434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d436:	4a1e      	ldr	r2, [pc, #120]	; (801d4b0 <RCCEx_PLL3_Config+0x15c>)
 801d438:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801d43c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801d43e:	683b      	ldr	r3, [r7, #0]
 801d440:	2b00      	cmp	r3, #0
 801d442:	d106      	bne.n	801d452 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 801d444:	4b1a      	ldr	r3, [pc, #104]	; (801d4b0 <RCCEx_PLL3_Config+0x15c>)
 801d446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d448:	4a19      	ldr	r2, [pc, #100]	; (801d4b0 <RCCEx_PLL3_Config+0x15c>)
 801d44a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 801d44e:	62d3      	str	r3, [r2, #44]	; 0x2c
 801d450:	e00f      	b.n	801d472 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801d452:	683b      	ldr	r3, [r7, #0]
 801d454:	2b01      	cmp	r3, #1
 801d456:	d106      	bne.n	801d466 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 801d458:	4b15      	ldr	r3, [pc, #84]	; (801d4b0 <RCCEx_PLL3_Config+0x15c>)
 801d45a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d45c:	4a14      	ldr	r2, [pc, #80]	; (801d4b0 <RCCEx_PLL3_Config+0x15c>)
 801d45e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801d462:	62d3      	str	r3, [r2, #44]	; 0x2c
 801d464:	e005      	b.n	801d472 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 801d466:	4b12      	ldr	r3, [pc, #72]	; (801d4b0 <RCCEx_PLL3_Config+0x15c>)
 801d468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d46a:	4a11      	ldr	r2, [pc, #68]	; (801d4b0 <RCCEx_PLL3_Config+0x15c>)
 801d46c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801d470:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 801d472:	4b0f      	ldr	r3, [pc, #60]	; (801d4b0 <RCCEx_PLL3_Config+0x15c>)
 801d474:	681b      	ldr	r3, [r3, #0]
 801d476:	4a0e      	ldr	r2, [pc, #56]	; (801d4b0 <RCCEx_PLL3_Config+0x15c>)
 801d478:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801d47c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801d47e:	f7f8 fd27 	bl	8015ed0 <HAL_GetTick>
 801d482:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801d484:	e008      	b.n	801d498 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801d486:	f7f8 fd23 	bl	8015ed0 <HAL_GetTick>
 801d48a:	4602      	mov	r2, r0
 801d48c:	68bb      	ldr	r3, [r7, #8]
 801d48e:	1ad3      	subs	r3, r2, r3
 801d490:	2b02      	cmp	r3, #2
 801d492:	d901      	bls.n	801d498 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 801d494:	2303      	movs	r3, #3
 801d496:	e006      	b.n	801d4a6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801d498:	4b05      	ldr	r3, [pc, #20]	; (801d4b0 <RCCEx_PLL3_Config+0x15c>)
 801d49a:	681b      	ldr	r3, [r3, #0]
 801d49c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801d4a0:	2b00      	cmp	r3, #0
 801d4a2:	d0f0      	beq.n	801d486 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 801d4a4:	7bfb      	ldrb	r3, [r7, #15]
}
 801d4a6:	4618      	mov	r0, r3
 801d4a8:	3710      	adds	r7, #16
 801d4aa:	46bd      	mov	sp, r7
 801d4ac:	bd80      	pop	{r7, pc}
 801d4ae:	bf00      	nop
 801d4b0:	58024400 	.word	0x58024400
 801d4b4:	ffff0007 	.word	0xffff0007

0801d4b8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801d4b8:	b580      	push	{r7, lr}
 801d4ba:	b084      	sub	sp, #16
 801d4bc:	af00      	add	r7, sp, #0
 801d4be:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801d4c0:	687b      	ldr	r3, [r7, #4]
 801d4c2:	2b00      	cmp	r3, #0
 801d4c4:	d101      	bne.n	801d4ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801d4c6:	2301      	movs	r3, #1
 801d4c8:	e10f      	b.n	801d6ea <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801d4ca:	687b      	ldr	r3, [r7, #4]
 801d4cc:	2200      	movs	r2, #0
 801d4ce:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 801d4d0:	687b      	ldr	r3, [r7, #4]
 801d4d2:	681b      	ldr	r3, [r3, #0]
 801d4d4:	4a87      	ldr	r2, [pc, #540]	; (801d6f4 <HAL_SPI_Init+0x23c>)
 801d4d6:	4293      	cmp	r3, r2
 801d4d8:	d00f      	beq.n	801d4fa <HAL_SPI_Init+0x42>
 801d4da:	687b      	ldr	r3, [r7, #4]
 801d4dc:	681b      	ldr	r3, [r3, #0]
 801d4de:	4a86      	ldr	r2, [pc, #536]	; (801d6f8 <HAL_SPI_Init+0x240>)
 801d4e0:	4293      	cmp	r3, r2
 801d4e2:	d00a      	beq.n	801d4fa <HAL_SPI_Init+0x42>
 801d4e4:	687b      	ldr	r3, [r7, #4]
 801d4e6:	681b      	ldr	r3, [r3, #0]
 801d4e8:	4a84      	ldr	r2, [pc, #528]	; (801d6fc <HAL_SPI_Init+0x244>)
 801d4ea:	4293      	cmp	r3, r2
 801d4ec:	d005      	beq.n	801d4fa <HAL_SPI_Init+0x42>
 801d4ee:	687b      	ldr	r3, [r7, #4]
 801d4f0:	68db      	ldr	r3, [r3, #12]
 801d4f2:	2b0f      	cmp	r3, #15
 801d4f4:	d901      	bls.n	801d4fa <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 801d4f6:	2301      	movs	r3, #1
 801d4f8:	e0f7      	b.n	801d6ea <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 801d4fa:	6878      	ldr	r0, [r7, #4]
 801d4fc:	f000 ff8c 	bl	801e418 <SPI_GetPacketSize>
 801d500:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 801d502:	687b      	ldr	r3, [r7, #4]
 801d504:	681b      	ldr	r3, [r3, #0]
 801d506:	4a7b      	ldr	r2, [pc, #492]	; (801d6f4 <HAL_SPI_Init+0x23c>)
 801d508:	4293      	cmp	r3, r2
 801d50a:	d00c      	beq.n	801d526 <HAL_SPI_Init+0x6e>
 801d50c:	687b      	ldr	r3, [r7, #4]
 801d50e:	681b      	ldr	r3, [r3, #0]
 801d510:	4a79      	ldr	r2, [pc, #484]	; (801d6f8 <HAL_SPI_Init+0x240>)
 801d512:	4293      	cmp	r3, r2
 801d514:	d007      	beq.n	801d526 <HAL_SPI_Init+0x6e>
 801d516:	687b      	ldr	r3, [r7, #4]
 801d518:	681b      	ldr	r3, [r3, #0]
 801d51a:	4a78      	ldr	r2, [pc, #480]	; (801d6fc <HAL_SPI_Init+0x244>)
 801d51c:	4293      	cmp	r3, r2
 801d51e:	d002      	beq.n	801d526 <HAL_SPI_Init+0x6e>
 801d520:	68fb      	ldr	r3, [r7, #12]
 801d522:	2b08      	cmp	r3, #8
 801d524:	d811      	bhi.n	801d54a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 801d526:	687b      	ldr	r3, [r7, #4]
 801d528:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 801d52a:	4a72      	ldr	r2, [pc, #456]	; (801d6f4 <HAL_SPI_Init+0x23c>)
 801d52c:	4293      	cmp	r3, r2
 801d52e:	d009      	beq.n	801d544 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 801d530:	687b      	ldr	r3, [r7, #4]
 801d532:	681b      	ldr	r3, [r3, #0]
 801d534:	4a70      	ldr	r2, [pc, #448]	; (801d6f8 <HAL_SPI_Init+0x240>)
 801d536:	4293      	cmp	r3, r2
 801d538:	d004      	beq.n	801d544 <HAL_SPI_Init+0x8c>
 801d53a:	687b      	ldr	r3, [r7, #4]
 801d53c:	681b      	ldr	r3, [r3, #0]
 801d53e:	4a6f      	ldr	r2, [pc, #444]	; (801d6fc <HAL_SPI_Init+0x244>)
 801d540:	4293      	cmp	r3, r2
 801d542:	d104      	bne.n	801d54e <HAL_SPI_Init+0x96>
 801d544:	68fb      	ldr	r3, [r7, #12]
 801d546:	2b10      	cmp	r3, #16
 801d548:	d901      	bls.n	801d54e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 801d54a:	2301      	movs	r3, #1
 801d54c:	e0cd      	b.n	801d6ea <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801d54e:	687b      	ldr	r3, [r7, #4]
 801d550:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 801d554:	b2db      	uxtb	r3, r3
 801d556:	2b00      	cmp	r3, #0
 801d558:	d106      	bne.n	801d568 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801d55a:	687b      	ldr	r3, [r7, #4]
 801d55c:	2200      	movs	r2, #0
 801d55e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801d562:	6878      	ldr	r0, [r7, #4]
 801d564:	f7f8 f8ac 	bl	80156c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801d568:	687b      	ldr	r3, [r7, #4]
 801d56a:	2202      	movs	r2, #2
 801d56c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801d570:	687b      	ldr	r3, [r7, #4]
 801d572:	681b      	ldr	r3, [r3, #0]
 801d574:	681a      	ldr	r2, [r3, #0]
 801d576:	687b      	ldr	r3, [r7, #4]
 801d578:	681b      	ldr	r3, [r3, #0]
 801d57a:	f022 0201 	bic.w	r2, r2, #1
 801d57e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 801d580:	687b      	ldr	r3, [r7, #4]
 801d582:	681b      	ldr	r3, [r3, #0]
 801d584:	689b      	ldr	r3, [r3, #8]
 801d586:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 801d58a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 801d58c:	687b      	ldr	r3, [r7, #4]
 801d58e:	699b      	ldr	r3, [r3, #24]
 801d590:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801d594:	d119      	bne.n	801d5ca <HAL_SPI_Init+0x112>
 801d596:	687b      	ldr	r3, [r7, #4]
 801d598:	685b      	ldr	r3, [r3, #4]
 801d59a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801d59e:	d103      	bne.n	801d5a8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 801d5a0:	687b      	ldr	r3, [r7, #4]
 801d5a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 801d5a4:	2b00      	cmp	r3, #0
 801d5a6:	d008      	beq.n	801d5ba <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 801d5a8:	687b      	ldr	r3, [r7, #4]
 801d5aa:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 801d5ac:	2b00      	cmp	r3, #0
 801d5ae:	d10c      	bne.n	801d5ca <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 801d5b0:	687b      	ldr	r3, [r7, #4]
 801d5b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 801d5b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801d5b8:	d107      	bne.n	801d5ca <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 801d5ba:	687b      	ldr	r3, [r7, #4]
 801d5bc:	681b      	ldr	r3, [r3, #0]
 801d5be:	681a      	ldr	r2, [r3, #0]
 801d5c0:	687b      	ldr	r3, [r7, #4]
 801d5c2:	681b      	ldr	r3, [r3, #0]
 801d5c4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801d5c8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 801d5ca:	687b      	ldr	r3, [r7, #4]
 801d5cc:	685b      	ldr	r3, [r3, #4]
 801d5ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801d5d2:	2b00      	cmp	r3, #0
 801d5d4:	d00f      	beq.n	801d5f6 <HAL_SPI_Init+0x13e>
 801d5d6:	687b      	ldr	r3, [r7, #4]
 801d5d8:	68db      	ldr	r3, [r3, #12]
 801d5da:	2b06      	cmp	r3, #6
 801d5dc:	d90b      	bls.n	801d5f6 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 801d5de:	687b      	ldr	r3, [r7, #4]
 801d5e0:	681b      	ldr	r3, [r3, #0]
 801d5e2:	681b      	ldr	r3, [r3, #0]
 801d5e4:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 801d5e8:	687b      	ldr	r3, [r7, #4]
 801d5ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801d5ec:	687b      	ldr	r3, [r7, #4]
 801d5ee:	681b      	ldr	r3, [r3, #0]
 801d5f0:	430a      	orrs	r2, r1
 801d5f2:	601a      	str	r2, [r3, #0]
 801d5f4:	e007      	b.n	801d606 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 801d5f6:	687b      	ldr	r3, [r7, #4]
 801d5f8:	681b      	ldr	r3, [r3, #0]
 801d5fa:	681a      	ldr	r2, [r3, #0]
 801d5fc:	687b      	ldr	r3, [r7, #4]
 801d5fe:	681b      	ldr	r3, [r3, #0]
 801d600:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801d604:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 801d606:	687b      	ldr	r3, [r7, #4]
 801d608:	69da      	ldr	r2, [r3, #28]
 801d60a:	687b      	ldr	r3, [r7, #4]
 801d60c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d60e:	431a      	orrs	r2, r3
 801d610:	68bb      	ldr	r3, [r7, #8]
 801d612:	431a      	orrs	r2, r3
 801d614:	687b      	ldr	r3, [r7, #4]
 801d616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d618:	ea42 0103 	orr.w	r1, r2, r3
 801d61c:	687b      	ldr	r3, [r7, #4]
 801d61e:	68da      	ldr	r2, [r3, #12]
 801d620:	687b      	ldr	r3, [r7, #4]
 801d622:	681b      	ldr	r3, [r3, #0]
 801d624:	430a      	orrs	r2, r1
 801d626:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 801d628:	687b      	ldr	r3, [r7, #4]
 801d62a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801d62c:	687b      	ldr	r3, [r7, #4]
 801d62e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d630:	431a      	orrs	r2, r3
 801d632:	687b      	ldr	r3, [r7, #4]
 801d634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d636:	431a      	orrs	r2, r3
 801d638:	687b      	ldr	r3, [r7, #4]
 801d63a:	699b      	ldr	r3, [r3, #24]
 801d63c:	431a      	orrs	r2, r3
 801d63e:	687b      	ldr	r3, [r7, #4]
 801d640:	691b      	ldr	r3, [r3, #16]
 801d642:	431a      	orrs	r2, r3
 801d644:	687b      	ldr	r3, [r7, #4]
 801d646:	695b      	ldr	r3, [r3, #20]
 801d648:	431a      	orrs	r2, r3
 801d64a:	687b      	ldr	r3, [r7, #4]
 801d64c:	6a1b      	ldr	r3, [r3, #32]
 801d64e:	431a      	orrs	r2, r3
 801d650:	687b      	ldr	r3, [r7, #4]
 801d652:	685b      	ldr	r3, [r3, #4]
 801d654:	431a      	orrs	r2, r3
 801d656:	687b      	ldr	r3, [r7, #4]
 801d658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d65a:	431a      	orrs	r2, r3
 801d65c:	687b      	ldr	r3, [r7, #4]
 801d65e:	689b      	ldr	r3, [r3, #8]
 801d660:	431a      	orrs	r2, r3
 801d662:	687b      	ldr	r3, [r7, #4]
 801d664:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d666:	ea42 0103 	orr.w	r1, r2, r3
 801d66a:	687b      	ldr	r3, [r7, #4]
 801d66c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801d66e:	687b      	ldr	r3, [r7, #4]
 801d670:	681b      	ldr	r3, [r3, #0]
 801d672:	430a      	orrs	r2, r1
 801d674:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 801d676:	687b      	ldr	r3, [r7, #4]
 801d678:	685b      	ldr	r3, [r3, #4]
 801d67a:	2b00      	cmp	r3, #0
 801d67c:	d113      	bne.n	801d6a6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 801d67e:	687b      	ldr	r3, [r7, #4]
 801d680:	681b      	ldr	r3, [r3, #0]
 801d682:	689b      	ldr	r3, [r3, #8]
 801d684:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 801d688:	687b      	ldr	r3, [r7, #4]
 801d68a:	681b      	ldr	r3, [r3, #0]
 801d68c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801d690:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 801d692:	687b      	ldr	r3, [r7, #4]
 801d694:	681b      	ldr	r3, [r3, #0]
 801d696:	689b      	ldr	r3, [r3, #8]
 801d698:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 801d69c:	687b      	ldr	r3, [r7, #4]
 801d69e:	681b      	ldr	r3, [r3, #0]
 801d6a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801d6a4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801d6a6:	687b      	ldr	r3, [r7, #4]
 801d6a8:	681b      	ldr	r3, [r3, #0]
 801d6aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801d6ac:	687b      	ldr	r3, [r7, #4]
 801d6ae:	681b      	ldr	r3, [r3, #0]
 801d6b0:	f022 0201 	bic.w	r2, r2, #1
 801d6b4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 801d6b6:	687b      	ldr	r3, [r7, #4]
 801d6b8:	685b      	ldr	r3, [r3, #4]
 801d6ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801d6be:	2b00      	cmp	r3, #0
 801d6c0:	d00a      	beq.n	801d6d8 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 801d6c2:	687b      	ldr	r3, [r7, #4]
 801d6c4:	681b      	ldr	r3, [r3, #0]
 801d6c6:	68db      	ldr	r3, [r3, #12]
 801d6c8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801d6cc:	687b      	ldr	r3, [r7, #4]
 801d6ce:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801d6d0:	687b      	ldr	r3, [r7, #4]
 801d6d2:	681b      	ldr	r3, [r3, #0]
 801d6d4:	430a      	orrs	r2, r1
 801d6d6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801d6d8:	687b      	ldr	r3, [r7, #4]
 801d6da:	2200      	movs	r2, #0
 801d6dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 801d6e0:	687b      	ldr	r3, [r7, #4]
 801d6e2:	2201      	movs	r2, #1
 801d6e4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 801d6e8:	2300      	movs	r3, #0
}
 801d6ea:	4618      	mov	r0, r3
 801d6ec:	3710      	adds	r7, #16
 801d6ee:	46bd      	mov	sp, r7
 801d6f0:	bd80      	pop	{r7, pc}
 801d6f2:	bf00      	nop
 801d6f4:	40013000 	.word	0x40013000
 801d6f8:	40003800 	.word	0x40003800
 801d6fc:	40003c00 	.word	0x40003c00

0801d700 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801d700:	b580      	push	{r7, lr}
 801d702:	b08a      	sub	sp, #40	; 0x28
 801d704:	af02      	add	r7, sp, #8
 801d706:	60f8      	str	r0, [r7, #12]
 801d708:	60b9      	str	r1, [r7, #8]
 801d70a:	603b      	str	r3, [r7, #0]
 801d70c:	4613      	mov	r3, r2
 801d70e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 801d710:	68fb      	ldr	r3, [r7, #12]
 801d712:	681b      	ldr	r3, [r3, #0]
 801d714:	3320      	adds	r3, #32
 801d716:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801d718:	2300      	movs	r3, #0
 801d71a:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 801d71c:	68fb      	ldr	r3, [r7, #12]
 801d71e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801d722:	2b01      	cmp	r3, #1
 801d724:	d101      	bne.n	801d72a <HAL_SPI_Transmit+0x2a>
 801d726:	2302      	movs	r3, #2
 801d728:	e1e1      	b.n	801daee <HAL_SPI_Transmit+0x3ee>
 801d72a:	68fb      	ldr	r3, [r7, #12]
 801d72c:	2201      	movs	r2, #1
 801d72e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801d732:	f7f8 fbcd 	bl	8015ed0 <HAL_GetTick>
 801d736:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 801d738:	68fb      	ldr	r3, [r7, #12]
 801d73a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 801d73e:	b2db      	uxtb	r3, r3
 801d740:	2b01      	cmp	r3, #1
 801d742:	d007      	beq.n	801d754 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 801d744:	2302      	movs	r3, #2
 801d746:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 801d748:	68fb      	ldr	r3, [r7, #12]
 801d74a:	2200      	movs	r2, #0
 801d74c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 801d750:	7efb      	ldrb	r3, [r7, #27]
 801d752:	e1cc      	b.n	801daee <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 801d754:	68bb      	ldr	r3, [r7, #8]
 801d756:	2b00      	cmp	r3, #0
 801d758:	d002      	beq.n	801d760 <HAL_SPI_Transmit+0x60>
 801d75a:	88fb      	ldrh	r3, [r7, #6]
 801d75c:	2b00      	cmp	r3, #0
 801d75e:	d107      	bne.n	801d770 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 801d760:	2301      	movs	r3, #1
 801d762:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 801d764:	68fb      	ldr	r3, [r7, #12]
 801d766:	2200      	movs	r2, #0
 801d768:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 801d76c:	7efb      	ldrb	r3, [r7, #27]
 801d76e:	e1be      	b.n	801daee <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 801d770:	68fb      	ldr	r3, [r7, #12]
 801d772:	2203      	movs	r2, #3
 801d774:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801d778:	68fb      	ldr	r3, [r7, #12]
 801d77a:	2200      	movs	r2, #0
 801d77c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 801d780:	68fb      	ldr	r3, [r7, #12]
 801d782:	68ba      	ldr	r2, [r7, #8]
 801d784:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 801d786:	68fb      	ldr	r3, [r7, #12]
 801d788:	88fa      	ldrh	r2, [r7, #6]
 801d78a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 801d78e:	68fb      	ldr	r3, [r7, #12]
 801d790:	88fa      	ldrh	r2, [r7, #6]
 801d792:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 801d796:	68fb      	ldr	r3, [r7, #12]
 801d798:	2200      	movs	r2, #0
 801d79a:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 801d79c:	68fb      	ldr	r3, [r7, #12]
 801d79e:	2200      	movs	r2, #0
 801d7a0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 801d7a4:	68fb      	ldr	r3, [r7, #12]
 801d7a6:	2200      	movs	r2, #0
 801d7a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 801d7ac:	68fb      	ldr	r3, [r7, #12]
 801d7ae:	2200      	movs	r2, #0
 801d7b0:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 801d7b2:	68fb      	ldr	r3, [r7, #12]
 801d7b4:	2200      	movs	r2, #0
 801d7b6:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801d7b8:	68fb      	ldr	r3, [r7, #12]
 801d7ba:	689b      	ldr	r3, [r3, #8]
 801d7bc:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 801d7c0:	d108      	bne.n	801d7d4 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 801d7c2:	68fb      	ldr	r3, [r7, #12]
 801d7c4:	681b      	ldr	r3, [r3, #0]
 801d7c6:	681a      	ldr	r2, [r3, #0]
 801d7c8:	68fb      	ldr	r3, [r7, #12]
 801d7ca:	681b      	ldr	r3, [r3, #0]
 801d7cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801d7d0:	601a      	str	r2, [r3, #0]
 801d7d2:	e009      	b.n	801d7e8 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 801d7d4:	68fb      	ldr	r3, [r7, #12]
 801d7d6:	681b      	ldr	r3, [r3, #0]
 801d7d8:	68db      	ldr	r3, [r3, #12]
 801d7da:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 801d7de:	68fb      	ldr	r3, [r7, #12]
 801d7e0:	681b      	ldr	r3, [r3, #0]
 801d7e2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 801d7e6:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 801d7e8:	68fb      	ldr	r3, [r7, #12]
 801d7ea:	681b      	ldr	r3, [r3, #0]
 801d7ec:	685a      	ldr	r2, [r3, #4]
 801d7ee:	4b96      	ldr	r3, [pc, #600]	; (801da48 <HAL_SPI_Transmit+0x348>)
 801d7f0:	4013      	ands	r3, r2
 801d7f2:	88f9      	ldrh	r1, [r7, #6]
 801d7f4:	68fa      	ldr	r2, [r7, #12]
 801d7f6:	6812      	ldr	r2, [r2, #0]
 801d7f8:	430b      	orrs	r3, r1
 801d7fa:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 801d7fc:	68fb      	ldr	r3, [r7, #12]
 801d7fe:	681b      	ldr	r3, [r3, #0]
 801d800:	681a      	ldr	r2, [r3, #0]
 801d802:	68fb      	ldr	r3, [r7, #12]
 801d804:	681b      	ldr	r3, [r3, #0]
 801d806:	f042 0201 	orr.w	r2, r2, #1
 801d80a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801d80c:	68fb      	ldr	r3, [r7, #12]
 801d80e:	685b      	ldr	r3, [r3, #4]
 801d810:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801d814:	d107      	bne.n	801d826 <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 801d816:	68fb      	ldr	r3, [r7, #12]
 801d818:	681b      	ldr	r3, [r3, #0]
 801d81a:	681a      	ldr	r2, [r3, #0]
 801d81c:	68fb      	ldr	r3, [r7, #12]
 801d81e:	681b      	ldr	r3, [r3, #0]
 801d820:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801d824:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 801d826:	68fb      	ldr	r3, [r7, #12]
 801d828:	68db      	ldr	r3, [r3, #12]
 801d82a:	2b0f      	cmp	r3, #15
 801d82c:	d947      	bls.n	801d8be <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 801d82e:	e03f      	b.n	801d8b0 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 801d830:	68fb      	ldr	r3, [r7, #12]
 801d832:	681b      	ldr	r3, [r3, #0]
 801d834:	695b      	ldr	r3, [r3, #20]
 801d836:	f003 0302 	and.w	r3, r3, #2
 801d83a:	2b02      	cmp	r3, #2
 801d83c:	d114      	bne.n	801d868 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 801d83e:	68fb      	ldr	r3, [r7, #12]
 801d840:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801d842:	68fb      	ldr	r3, [r7, #12]
 801d844:	681b      	ldr	r3, [r3, #0]
 801d846:	6812      	ldr	r2, [r2, #0]
 801d848:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 801d84a:	68fb      	ldr	r3, [r7, #12]
 801d84c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801d84e:	1d1a      	adds	r2, r3, #4
 801d850:	68fb      	ldr	r3, [r7, #12]
 801d852:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 801d854:	68fb      	ldr	r3, [r7, #12]
 801d856:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801d85a:	b29b      	uxth	r3, r3
 801d85c:	3b01      	subs	r3, #1
 801d85e:	b29a      	uxth	r2, r3
 801d860:	68fb      	ldr	r3, [r7, #12]
 801d862:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 801d866:	e023      	b.n	801d8b0 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801d868:	f7f8 fb32 	bl	8015ed0 <HAL_GetTick>
 801d86c:	4602      	mov	r2, r0
 801d86e:	697b      	ldr	r3, [r7, #20]
 801d870:	1ad3      	subs	r3, r2, r3
 801d872:	683a      	ldr	r2, [r7, #0]
 801d874:	429a      	cmp	r2, r3
 801d876:	d803      	bhi.n	801d880 <HAL_SPI_Transmit+0x180>
 801d878:	683b      	ldr	r3, [r7, #0]
 801d87a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d87e:	d102      	bne.n	801d886 <HAL_SPI_Transmit+0x186>
 801d880:	683b      	ldr	r3, [r7, #0]
 801d882:	2b00      	cmp	r3, #0
 801d884:	d114      	bne.n	801d8b0 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 801d886:	68f8      	ldr	r0, [r7, #12]
 801d888:	f000 fcf8 	bl	801e27c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 801d88c:	68fb      	ldr	r3, [r7, #12]
 801d88e:	2200      	movs	r2, #0
 801d890:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801d894:	68fb      	ldr	r3, [r7, #12]
 801d896:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801d89a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801d89e:	68fb      	ldr	r3, [r7, #12]
 801d8a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 801d8a4:	68fb      	ldr	r3, [r7, #12]
 801d8a6:	2201      	movs	r2, #1
 801d8a8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 801d8ac:	2303      	movs	r3, #3
 801d8ae:	e11e      	b.n	801daee <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 801d8b0:	68fb      	ldr	r3, [r7, #12]
 801d8b2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801d8b6:	b29b      	uxth	r3, r3
 801d8b8:	2b00      	cmp	r3, #0
 801d8ba:	d1b9      	bne.n	801d830 <HAL_SPI_Transmit+0x130>
 801d8bc:	e0f1      	b.n	801daa2 <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801d8be:	68fb      	ldr	r3, [r7, #12]
 801d8c0:	68db      	ldr	r3, [r3, #12]
 801d8c2:	2b07      	cmp	r3, #7
 801d8c4:	f240 80e6 	bls.w	801da94 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 801d8c8:	e05d      	b.n	801d986 <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 801d8ca:	68fb      	ldr	r3, [r7, #12]
 801d8cc:	681b      	ldr	r3, [r3, #0]
 801d8ce:	695b      	ldr	r3, [r3, #20]
 801d8d0:	f003 0302 	and.w	r3, r3, #2
 801d8d4:	2b02      	cmp	r3, #2
 801d8d6:	d132      	bne.n	801d93e <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 801d8d8:	68fb      	ldr	r3, [r7, #12]
 801d8da:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801d8de:	b29b      	uxth	r3, r3
 801d8e0:	2b01      	cmp	r3, #1
 801d8e2:	d918      	bls.n	801d916 <HAL_SPI_Transmit+0x216>
 801d8e4:	68fb      	ldr	r3, [r7, #12]
 801d8e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d8e8:	2b00      	cmp	r3, #0
 801d8ea:	d014      	beq.n	801d916 <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 801d8ec:	68fb      	ldr	r3, [r7, #12]
 801d8ee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801d8f0:	68fb      	ldr	r3, [r7, #12]
 801d8f2:	681b      	ldr	r3, [r3, #0]
 801d8f4:	6812      	ldr	r2, [r2, #0]
 801d8f6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 801d8f8:	68fb      	ldr	r3, [r7, #12]
 801d8fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801d8fc:	1d1a      	adds	r2, r3, #4
 801d8fe:	68fb      	ldr	r3, [r7, #12]
 801d900:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 801d902:	68fb      	ldr	r3, [r7, #12]
 801d904:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801d908:	b29b      	uxth	r3, r3
 801d90a:	3b02      	subs	r3, #2
 801d90c:	b29a      	uxth	r2, r3
 801d90e:	68fb      	ldr	r3, [r7, #12]
 801d910:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 801d914:	e037      	b.n	801d986 <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 801d916:	68fb      	ldr	r3, [r7, #12]
 801d918:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801d91a:	881a      	ldrh	r2, [r3, #0]
 801d91c:	69fb      	ldr	r3, [r7, #28]
 801d91e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801d920:	68fb      	ldr	r3, [r7, #12]
 801d922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801d924:	1c9a      	adds	r2, r3, #2
 801d926:	68fb      	ldr	r3, [r7, #12]
 801d928:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 801d92a:	68fb      	ldr	r3, [r7, #12]
 801d92c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801d930:	b29b      	uxth	r3, r3
 801d932:	3b01      	subs	r3, #1
 801d934:	b29a      	uxth	r2, r3
 801d936:	68fb      	ldr	r3, [r7, #12]
 801d938:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 801d93c:	e023      	b.n	801d986 <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801d93e:	f7f8 fac7 	bl	8015ed0 <HAL_GetTick>
 801d942:	4602      	mov	r2, r0
 801d944:	697b      	ldr	r3, [r7, #20]
 801d946:	1ad3      	subs	r3, r2, r3
 801d948:	683a      	ldr	r2, [r7, #0]
 801d94a:	429a      	cmp	r2, r3
 801d94c:	d803      	bhi.n	801d956 <HAL_SPI_Transmit+0x256>
 801d94e:	683b      	ldr	r3, [r7, #0]
 801d950:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d954:	d102      	bne.n	801d95c <HAL_SPI_Transmit+0x25c>
 801d956:	683b      	ldr	r3, [r7, #0]
 801d958:	2b00      	cmp	r3, #0
 801d95a:	d114      	bne.n	801d986 <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 801d95c:	68f8      	ldr	r0, [r7, #12]
 801d95e:	f000 fc8d 	bl	801e27c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 801d962:	68fb      	ldr	r3, [r7, #12]
 801d964:	2200      	movs	r2, #0
 801d966:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801d96a:	68fb      	ldr	r3, [r7, #12]
 801d96c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801d970:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801d974:	68fb      	ldr	r3, [r7, #12]
 801d976:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 801d97a:	68fb      	ldr	r3, [r7, #12]
 801d97c:	2201      	movs	r2, #1
 801d97e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 801d982:	2303      	movs	r3, #3
 801d984:	e0b3      	b.n	801daee <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 801d986:	68fb      	ldr	r3, [r7, #12]
 801d988:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801d98c:	b29b      	uxth	r3, r3
 801d98e:	2b00      	cmp	r3, #0
 801d990:	d19b      	bne.n	801d8ca <HAL_SPI_Transmit+0x1ca>
 801d992:	e086      	b.n	801daa2 <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 801d994:	68fb      	ldr	r3, [r7, #12]
 801d996:	681b      	ldr	r3, [r3, #0]
 801d998:	695b      	ldr	r3, [r3, #20]
 801d99a:	f003 0302 	and.w	r3, r3, #2
 801d99e:	2b02      	cmp	r3, #2
 801d9a0:	d154      	bne.n	801da4c <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 801d9a2:	68fb      	ldr	r3, [r7, #12]
 801d9a4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801d9a8:	b29b      	uxth	r3, r3
 801d9aa:	2b03      	cmp	r3, #3
 801d9ac:	d918      	bls.n	801d9e0 <HAL_SPI_Transmit+0x2e0>
 801d9ae:	68fb      	ldr	r3, [r7, #12]
 801d9b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d9b2:	2b40      	cmp	r3, #64	; 0x40
 801d9b4:	d914      	bls.n	801d9e0 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 801d9b6:	68fb      	ldr	r3, [r7, #12]
 801d9b8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801d9ba:	68fb      	ldr	r3, [r7, #12]
 801d9bc:	681b      	ldr	r3, [r3, #0]
 801d9be:	6812      	ldr	r2, [r2, #0]
 801d9c0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 801d9c2:	68fb      	ldr	r3, [r7, #12]
 801d9c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801d9c6:	1d1a      	adds	r2, r3, #4
 801d9c8:	68fb      	ldr	r3, [r7, #12]
 801d9ca:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 801d9cc:	68fb      	ldr	r3, [r7, #12]
 801d9ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801d9d2:	b29b      	uxth	r3, r3
 801d9d4:	3b04      	subs	r3, #4
 801d9d6:	b29a      	uxth	r2, r3
 801d9d8:	68fb      	ldr	r3, [r7, #12]
 801d9da:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 801d9de:	e059      	b.n	801da94 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 801d9e0:	68fb      	ldr	r3, [r7, #12]
 801d9e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801d9e6:	b29b      	uxth	r3, r3
 801d9e8:	2b01      	cmp	r3, #1
 801d9ea:	d917      	bls.n	801da1c <HAL_SPI_Transmit+0x31c>
 801d9ec:	68fb      	ldr	r3, [r7, #12]
 801d9ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d9f0:	2b00      	cmp	r3, #0
 801d9f2:	d013      	beq.n	801da1c <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 801d9f4:	68fb      	ldr	r3, [r7, #12]
 801d9f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801d9f8:	881a      	ldrh	r2, [r3, #0]
 801d9fa:	69fb      	ldr	r3, [r7, #28]
 801d9fc:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801d9fe:	68fb      	ldr	r3, [r7, #12]
 801da00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801da02:	1c9a      	adds	r2, r3, #2
 801da04:	68fb      	ldr	r3, [r7, #12]
 801da06:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 801da08:	68fb      	ldr	r3, [r7, #12]
 801da0a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801da0e:	b29b      	uxth	r3, r3
 801da10:	3b02      	subs	r3, #2
 801da12:	b29a      	uxth	r2, r3
 801da14:	68fb      	ldr	r3, [r7, #12]
 801da16:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 801da1a:	e03b      	b.n	801da94 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 801da1c:	68fb      	ldr	r3, [r7, #12]
 801da1e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801da20:	68fb      	ldr	r3, [r7, #12]
 801da22:	681b      	ldr	r3, [r3, #0]
 801da24:	3320      	adds	r3, #32
 801da26:	7812      	ldrb	r2, [r2, #0]
 801da28:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 801da2a:	68fb      	ldr	r3, [r7, #12]
 801da2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801da2e:	1c5a      	adds	r2, r3, #1
 801da30:	68fb      	ldr	r3, [r7, #12]
 801da32:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 801da34:	68fb      	ldr	r3, [r7, #12]
 801da36:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801da3a:	b29b      	uxth	r3, r3
 801da3c:	3b01      	subs	r3, #1
 801da3e:	b29a      	uxth	r2, r3
 801da40:	68fb      	ldr	r3, [r7, #12]
 801da42:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 801da46:	e025      	b.n	801da94 <HAL_SPI_Transmit+0x394>
 801da48:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801da4c:	f7f8 fa40 	bl	8015ed0 <HAL_GetTick>
 801da50:	4602      	mov	r2, r0
 801da52:	697b      	ldr	r3, [r7, #20]
 801da54:	1ad3      	subs	r3, r2, r3
 801da56:	683a      	ldr	r2, [r7, #0]
 801da58:	429a      	cmp	r2, r3
 801da5a:	d803      	bhi.n	801da64 <HAL_SPI_Transmit+0x364>
 801da5c:	683b      	ldr	r3, [r7, #0]
 801da5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801da62:	d102      	bne.n	801da6a <HAL_SPI_Transmit+0x36a>
 801da64:	683b      	ldr	r3, [r7, #0]
 801da66:	2b00      	cmp	r3, #0
 801da68:	d114      	bne.n	801da94 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 801da6a:	68f8      	ldr	r0, [r7, #12]
 801da6c:	f000 fc06 	bl	801e27c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 801da70:	68fb      	ldr	r3, [r7, #12]
 801da72:	2200      	movs	r2, #0
 801da74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801da78:	68fb      	ldr	r3, [r7, #12]
 801da7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801da7e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801da82:	68fb      	ldr	r3, [r7, #12]
 801da84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 801da88:	68fb      	ldr	r3, [r7, #12]
 801da8a:	2201      	movs	r2, #1
 801da8c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 801da90:	2303      	movs	r3, #3
 801da92:	e02c      	b.n	801daee <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 801da94:	68fb      	ldr	r3, [r7, #12]
 801da96:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801da9a:	b29b      	uxth	r3, r3
 801da9c:	2b00      	cmp	r3, #0
 801da9e:	f47f af79 	bne.w	801d994 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 801daa2:	697b      	ldr	r3, [r7, #20]
 801daa4:	9300      	str	r3, [sp, #0]
 801daa6:	683b      	ldr	r3, [r7, #0]
 801daa8:	2200      	movs	r2, #0
 801daaa:	2108      	movs	r1, #8
 801daac:	68f8      	ldr	r0, [r7, #12]
 801daae:	f000 fc85 	bl	801e3bc <SPI_WaitOnFlagUntilTimeout>
 801dab2:	4603      	mov	r3, r0
 801dab4:	2b00      	cmp	r3, #0
 801dab6:	d007      	beq.n	801dac8 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801dab8:	68fb      	ldr	r3, [r7, #12]
 801daba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801dabe:	f043 0220 	orr.w	r2, r3, #32
 801dac2:	68fb      	ldr	r3, [r7, #12]
 801dac4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 801dac8:	68f8      	ldr	r0, [r7, #12]
 801daca:	f000 fbd7 	bl	801e27c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 801dace:	68fb      	ldr	r3, [r7, #12]
 801dad0:	2200      	movs	r2, #0
 801dad2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 801dad6:	68fb      	ldr	r3, [r7, #12]
 801dad8:	2201      	movs	r2, #1
 801dada:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801dade:	68fb      	ldr	r3, [r7, #12]
 801dae0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801dae4:	2b00      	cmp	r3, #0
 801dae6:	d001      	beq.n	801daec <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 801dae8:	2301      	movs	r3, #1
 801daea:	e000      	b.n	801daee <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 801daec:	7efb      	ldrb	r3, [r7, #27]
}
 801daee:	4618      	mov	r0, r3
 801daf0:	3720      	adds	r7, #32
 801daf2:	46bd      	mov	sp, r7
 801daf4:	bd80      	pop	{r7, pc}
 801daf6:	bf00      	nop

0801daf8 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 801daf8:	b580      	push	{r7, lr}
 801dafa:	b086      	sub	sp, #24
 801dafc:	af00      	add	r7, sp, #0
 801dafe:	60f8      	str	r0, [r7, #12]
 801db00:	60b9      	str	r1, [r7, #8]
 801db02:	4613      	mov	r3, r2
 801db04:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 801db06:	2300      	movs	r3, #0
 801db08:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 801db0a:	68fb      	ldr	r3, [r7, #12]
 801db0c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801db10:	2b01      	cmp	r3, #1
 801db12:	d101      	bne.n	801db18 <HAL_SPI_Transmit_DMA+0x20>
 801db14:	2302      	movs	r3, #2
 801db16:	e137      	b.n	801dd88 <HAL_SPI_Transmit_DMA+0x290>
 801db18:	68fb      	ldr	r3, [r7, #12]
 801db1a:	2201      	movs	r2, #1
 801db1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 801db20:	68fb      	ldr	r3, [r7, #12]
 801db22:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 801db26:	b2db      	uxtb	r3, r3
 801db28:	2b01      	cmp	r3, #1
 801db2a:	d007      	beq.n	801db3c <HAL_SPI_Transmit_DMA+0x44>
  {
    errorcode = HAL_BUSY;
 801db2c:	2302      	movs	r3, #2
 801db2e:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 801db30:	68fb      	ldr	r3, [r7, #12]
 801db32:	2200      	movs	r2, #0
 801db34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 801db38:	7dfb      	ldrb	r3, [r7, #23]
 801db3a:	e125      	b.n	801dd88 <HAL_SPI_Transmit_DMA+0x290>
  }

  if ((pData == NULL) || (Size == 0UL))
 801db3c:	68bb      	ldr	r3, [r7, #8]
 801db3e:	2b00      	cmp	r3, #0
 801db40:	d002      	beq.n	801db48 <HAL_SPI_Transmit_DMA+0x50>
 801db42:	88fb      	ldrh	r3, [r7, #6]
 801db44:	2b00      	cmp	r3, #0
 801db46:	d107      	bne.n	801db58 <HAL_SPI_Transmit_DMA+0x60>
  {
    errorcode = HAL_ERROR;
 801db48:	2301      	movs	r3, #1
 801db4a:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 801db4c:	68fb      	ldr	r3, [r7, #12]
 801db4e:	2200      	movs	r2, #0
 801db50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 801db54:	7dfb      	ldrb	r3, [r7, #23]
 801db56:	e117      	b.n	801dd88 <HAL_SPI_Transmit_DMA+0x290>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 801db58:	68fb      	ldr	r3, [r7, #12]
 801db5a:	2203      	movs	r2, #3
 801db5c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801db60:	68fb      	ldr	r3, [r7, #12]
 801db62:	2200      	movs	r2, #0
 801db64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 801db68:	68fb      	ldr	r3, [r7, #12]
 801db6a:	68ba      	ldr	r2, [r7, #8]
 801db6c:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 801db6e:	68fb      	ldr	r3, [r7, #12]
 801db70:	88fa      	ldrh	r2, [r7, #6]
 801db72:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 801db76:	68fb      	ldr	r3, [r7, #12]
 801db78:	88fa      	ldrh	r2, [r7, #6]
 801db7a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 801db7e:	68fb      	ldr	r3, [r7, #12]
 801db80:	2200      	movs	r2, #0
 801db82:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxISR       = NULL;
 801db84:	68fb      	ldr	r3, [r7, #12]
 801db86:	2200      	movs	r2, #0
 801db88:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 801db8a:	68fb      	ldr	r3, [r7, #12]
 801db8c:	2200      	movs	r2, #0
 801db8e:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 801db90:	68fb      	ldr	r3, [r7, #12]
 801db92:	2200      	movs	r2, #0
 801db94:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 801db98:	68fb      	ldr	r3, [r7, #12]
 801db9a:	2200      	movs	r2, #0
 801db9c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801dba0:	68fb      	ldr	r3, [r7, #12]
 801dba2:	689b      	ldr	r3, [r3, #8]
 801dba4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 801dba8:	d108      	bne.n	801dbbc <HAL_SPI_Transmit_DMA+0xc4>
  {
    SPI_1LINE_TX(hspi);
 801dbaa:	68fb      	ldr	r3, [r7, #12]
 801dbac:	681b      	ldr	r3, [r3, #0]
 801dbae:	681a      	ldr	r2, [r3, #0]
 801dbb0:	68fb      	ldr	r3, [r7, #12]
 801dbb2:	681b      	ldr	r3, [r3, #0]
 801dbb4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801dbb8:	601a      	str	r2, [r3, #0]
 801dbba:	e009      	b.n	801dbd0 <HAL_SPI_Transmit_DMA+0xd8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 801dbbc:	68fb      	ldr	r3, [r7, #12]
 801dbbe:	681b      	ldr	r3, [r3, #0]
 801dbc0:	68db      	ldr	r3, [r3, #12]
 801dbc2:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 801dbc6:	68fb      	ldr	r3, [r7, #12]
 801dbc8:	681b      	ldr	r3, [r3, #0]
 801dbca:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 801dbce:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 801dbd0:	68fb      	ldr	r3, [r7, #12]
 801dbd2:	68db      	ldr	r3, [r3, #12]
 801dbd4:	2b0f      	cmp	r3, #15
 801dbd6:	d905      	bls.n	801dbe4 <HAL_SPI_Transmit_DMA+0xec>
 801dbd8:	68fb      	ldr	r3, [r7, #12]
 801dbda:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801dbdc:	699b      	ldr	r3, [r3, #24]
 801dbde:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801dbe2:	d10f      	bne.n	801dc04 <HAL_SPI_Transmit_DMA+0x10c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 801dbe4:	68fb      	ldr	r3, [r7, #12]
 801dbe6:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 801dbe8:	2b07      	cmp	r3, #7
 801dbea:	d913      	bls.n	801dc14 <HAL_SPI_Transmit_DMA+0x11c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 801dbec:	68fb      	ldr	r3, [r7, #12]
 801dbee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801dbf0:	699b      	ldr	r3, [r3, #24]
 801dbf2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801dbf6:	d00d      	beq.n	801dc14 <HAL_SPI_Transmit_DMA+0x11c>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 801dbf8:	68fb      	ldr	r3, [r7, #12]
 801dbfa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801dbfc:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 801dbfe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801dc02:	d007      	beq.n	801dc14 <HAL_SPI_Transmit_DMA+0x11c>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 801dc04:	2301      	movs	r3, #1
 801dc06:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 801dc08:	68fb      	ldr	r3, [r7, #12]
 801dc0a:	2200      	movs	r2, #0
 801dc0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 801dc10:	7dfb      	ldrb	r3, [r7, #23]
 801dc12:	e0b9      	b.n	801dd88 <HAL_SPI_Transmit_DMA+0x290>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 801dc14:	68fb      	ldr	r3, [r7, #12]
 801dc16:	68db      	ldr	r3, [r3, #12]
 801dc18:	2b07      	cmp	r3, #7
 801dc1a:	d820      	bhi.n	801dc5e <HAL_SPI_Transmit_DMA+0x166>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 801dc1c:	68fb      	ldr	r3, [r7, #12]
 801dc1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801dc20:	699b      	ldr	r3, [r3, #24]
 801dc22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801dc26:	d109      	bne.n	801dc3c <HAL_SPI_Transmit_DMA+0x144>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 801dc28:	68fb      	ldr	r3, [r7, #12]
 801dc2a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801dc2e:	b29b      	uxth	r3, r3
 801dc30:	3301      	adds	r3, #1
 801dc32:	105b      	asrs	r3, r3, #1
 801dc34:	b29a      	uxth	r2, r3
 801dc36:	68fb      	ldr	r3, [r7, #12]
 801dc38:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 801dc3c:	68fb      	ldr	r3, [r7, #12]
 801dc3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801dc40:	699b      	ldr	r3, [r3, #24]
 801dc42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801dc46:	d11e      	bne.n	801dc86 <HAL_SPI_Transmit_DMA+0x18e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 801dc48:	68fb      	ldr	r3, [r7, #12]
 801dc4a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801dc4e:	b29b      	uxth	r3, r3
 801dc50:	3303      	adds	r3, #3
 801dc52:	109b      	asrs	r3, r3, #2
 801dc54:	b29a      	uxth	r2, r3
 801dc56:	68fb      	ldr	r3, [r7, #12]
 801dc58:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 801dc5c:	e013      	b.n	801dc86 <HAL_SPI_Transmit_DMA+0x18e>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 801dc5e:	68fb      	ldr	r3, [r7, #12]
 801dc60:	68db      	ldr	r3, [r3, #12]
 801dc62:	2b0f      	cmp	r3, #15
 801dc64:	d80f      	bhi.n	801dc86 <HAL_SPI_Transmit_DMA+0x18e>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 801dc66:	68fb      	ldr	r3, [r7, #12]
 801dc68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801dc6a:	699b      	ldr	r3, [r3, #24]
 801dc6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801dc70:	d109      	bne.n	801dc86 <HAL_SPI_Transmit_DMA+0x18e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 801dc72:	68fb      	ldr	r3, [r7, #12]
 801dc74:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801dc78:	b29b      	uxth	r3, r3
 801dc7a:	3301      	adds	r3, #1
 801dc7c:	105b      	asrs	r3, r3, #1
 801dc7e:	b29a      	uxth	r2, r3
 801dc80:	68fb      	ldr	r3, [r7, #12]
 801dc82:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 801dc86:	68fb      	ldr	r3, [r7, #12]
 801dc88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801dc8a:	4a41      	ldr	r2, [pc, #260]	; (801dd90 <HAL_SPI_Transmit_DMA+0x298>)
 801dc8c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 801dc8e:	68fb      	ldr	r3, [r7, #12]
 801dc90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801dc92:	4a40      	ldr	r2, [pc, #256]	; (801dd94 <HAL_SPI_Transmit_DMA+0x29c>)
 801dc94:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 801dc96:	68fb      	ldr	r3, [r7, #12]
 801dc98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801dc9a:	4a3f      	ldr	r2, [pc, #252]	; (801dd98 <HAL_SPI_Transmit_DMA+0x2a0>)
 801dc9c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 801dc9e:	68fb      	ldr	r3, [r7, #12]
 801dca0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801dca2:	2200      	movs	r2, #0
 801dca4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 801dca6:	68fb      	ldr	r3, [r7, #12]
 801dca8:	681b      	ldr	r3, [r3, #0]
 801dcaa:	689a      	ldr	r2, [r3, #8]
 801dcac:	68fb      	ldr	r3, [r7, #12]
 801dcae:	681b      	ldr	r3, [r3, #0]
 801dcb0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801dcb4:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 801dcb6:	68fb      	ldr	r3, [r7, #12]
 801dcb8:	6f98      	ldr	r0, [r3, #120]	; 0x78
 801dcba:	68fb      	ldr	r3, [r7, #12]
 801dcbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801dcbe:	4619      	mov	r1, r3
 801dcc0:	68fb      	ldr	r3, [r7, #12]
 801dcc2:	681b      	ldr	r3, [r3, #0]
 801dcc4:	3320      	adds	r3, #32
 801dcc6:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 801dcc8:	68fb      	ldr	r3, [r7, #12]
 801dcca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801dcce:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 801dcd0:	f7f9 f832 	bl	8016d38 <HAL_DMA_Start_IT>
 801dcd4:	4603      	mov	r3, r0
 801dcd6:	2b00      	cmp	r3, #0
 801dcd8:	d013      	beq.n	801dd02 <HAL_SPI_Transmit_DMA+0x20a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 801dcda:	68fb      	ldr	r3, [r7, #12]
 801dcdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801dce0:	f043 0210 	orr.w	r2, r3, #16
 801dce4:	68fb      	ldr	r3, [r7, #12]
 801dce6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 801dcea:	68fb      	ldr	r3, [r7, #12]
 801dcec:	2200      	movs	r2, #0
 801dcee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 801dcf2:	68fb      	ldr	r3, [r7, #12]
 801dcf4:	2201      	movs	r2, #1
 801dcf6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 801dcfa:	2301      	movs	r3, #1
 801dcfc:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 801dcfe:	7dfb      	ldrb	r3, [r7, #23]
 801dd00:	e042      	b.n	801dd88 <HAL_SPI_Transmit_DMA+0x290>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 801dd02:	68fb      	ldr	r3, [r7, #12]
 801dd04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801dd06:	69db      	ldr	r3, [r3, #28]
 801dd08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801dd0c:	d108      	bne.n	801dd20 <HAL_SPI_Transmit_DMA+0x228>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 801dd0e:	68fb      	ldr	r3, [r7, #12]
 801dd10:	681b      	ldr	r3, [r3, #0]
 801dd12:	6859      	ldr	r1, [r3, #4]
 801dd14:	68fb      	ldr	r3, [r7, #12]
 801dd16:	681a      	ldr	r2, [r3, #0]
 801dd18:	4b20      	ldr	r3, [pc, #128]	; (801dd9c <HAL_SPI_Transmit_DMA+0x2a4>)
 801dd1a:	400b      	ands	r3, r1
 801dd1c:	6053      	str	r3, [r2, #4]
 801dd1e:	e009      	b.n	801dd34 <HAL_SPI_Transmit_DMA+0x23c>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 801dd20:	68fb      	ldr	r3, [r7, #12]
 801dd22:	681b      	ldr	r3, [r3, #0]
 801dd24:	685a      	ldr	r2, [r3, #4]
 801dd26:	4b1d      	ldr	r3, [pc, #116]	; (801dd9c <HAL_SPI_Transmit_DMA+0x2a4>)
 801dd28:	4013      	ands	r3, r2
 801dd2a:	88f9      	ldrh	r1, [r7, #6]
 801dd2c:	68fa      	ldr	r2, [r7, #12]
 801dd2e:	6812      	ldr	r2, [r2, #0]
 801dd30:	430b      	orrs	r3, r1
 801dd32:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 801dd34:	68fb      	ldr	r3, [r7, #12]
 801dd36:	681b      	ldr	r3, [r3, #0]
 801dd38:	689a      	ldr	r2, [r3, #8]
 801dd3a:	68fb      	ldr	r3, [r7, #12]
 801dd3c:	681b      	ldr	r3, [r3, #0]
 801dd3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801dd42:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 801dd44:	68fb      	ldr	r3, [r7, #12]
 801dd46:	681b      	ldr	r3, [r3, #0]
 801dd48:	691a      	ldr	r2, [r3, #16]
 801dd4a:	68fb      	ldr	r3, [r7, #12]
 801dd4c:	681b      	ldr	r3, [r3, #0]
 801dd4e:	f442 7248 	orr.w	r2, r2, #800	; 0x320
 801dd52:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 801dd54:	68fb      	ldr	r3, [r7, #12]
 801dd56:	681b      	ldr	r3, [r3, #0]
 801dd58:	681a      	ldr	r2, [r3, #0]
 801dd5a:	68fb      	ldr	r3, [r7, #12]
 801dd5c:	681b      	ldr	r3, [r3, #0]
 801dd5e:	f042 0201 	orr.w	r2, r2, #1
 801dd62:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801dd64:	68fb      	ldr	r3, [r7, #12]
 801dd66:	685b      	ldr	r3, [r3, #4]
 801dd68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801dd6c:	d107      	bne.n	801dd7e <HAL_SPI_Transmit_DMA+0x286>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 801dd6e:	68fb      	ldr	r3, [r7, #12]
 801dd70:	681b      	ldr	r3, [r3, #0]
 801dd72:	681a      	ldr	r2, [r3, #0]
 801dd74:	68fb      	ldr	r3, [r7, #12]
 801dd76:	681b      	ldr	r3, [r3, #0]
 801dd78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801dd7c:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 801dd7e:	68fb      	ldr	r3, [r7, #12]
 801dd80:	2200      	movs	r2, #0
 801dd82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 801dd86:	7dfb      	ldrb	r3, [r7, #23]
}
 801dd88:	4618      	mov	r0, r3
 801dd8a:	3718      	adds	r7, #24
 801dd8c:	46bd      	mov	sp, r7
 801dd8e:	bd80      	pop	{r7, pc}
 801dd90:	0801e1e7 	.word	0x0801e1e7
 801dd94:	0801e1a1 	.word	0x0801e1a1
 801dd98:	0801e203 	.word	0x0801e203
 801dd9c:	ffff0000 	.word	0xffff0000

0801dda0 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 801dda0:	b580      	push	{r7, lr}
 801dda2:	b08a      	sub	sp, #40	; 0x28
 801dda4:	af00      	add	r7, sp, #0
 801dda6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 801dda8:	687b      	ldr	r3, [r7, #4]
 801ddaa:	681b      	ldr	r3, [r3, #0]
 801ddac:	691b      	ldr	r3, [r3, #16]
 801ddae:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 801ddb0:	687b      	ldr	r3, [r7, #4]
 801ddb2:	681b      	ldr	r3, [r3, #0]
 801ddb4:	695b      	ldr	r3, [r3, #20]
 801ddb6:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 801ddb8:	6a3a      	ldr	r2, [r7, #32]
 801ddba:	69fb      	ldr	r3, [r7, #28]
 801ddbc:	4013      	ands	r3, r2
 801ddbe:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 801ddc0:	687b      	ldr	r3, [r7, #4]
 801ddc2:	681b      	ldr	r3, [r3, #0]
 801ddc4:	689b      	ldr	r3, [r3, #8]
 801ddc6:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 801ddc8:	2300      	movs	r3, #0
 801ddca:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 801ddcc:	687b      	ldr	r3, [r7, #4]
 801ddce:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 801ddd2:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 801ddd4:	687b      	ldr	r3, [r7, #4]
 801ddd6:	681b      	ldr	r3, [r3, #0]
 801ddd8:	3330      	adds	r3, #48	; 0x30
 801ddda:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 801dddc:	69fb      	ldr	r3, [r7, #28]
 801ddde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801dde2:	2b00      	cmp	r3, #0
 801dde4:	d010      	beq.n	801de08 <HAL_SPI_IRQHandler+0x68>
 801dde6:	6a3b      	ldr	r3, [r7, #32]
 801dde8:	f003 0308 	and.w	r3, r3, #8
 801ddec:	2b00      	cmp	r3, #0
 801ddee:	d00b      	beq.n	801de08 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 801ddf0:	687b      	ldr	r3, [r7, #4]
 801ddf2:	681b      	ldr	r3, [r3, #0]
 801ddf4:	699a      	ldr	r2, [r3, #24]
 801ddf6:	687b      	ldr	r3, [r7, #4]
 801ddf8:	681b      	ldr	r3, [r3, #0]
 801ddfa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801ddfe:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 801de00:	6878      	ldr	r0, [r7, #4]
 801de02:	f000 f9c3 	bl	801e18c <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 801de06:	e192      	b.n	801e12e <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 801de08:	69bb      	ldr	r3, [r7, #24]
 801de0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801de0e:	2b00      	cmp	r3, #0
 801de10:	d113      	bne.n	801de3a <HAL_SPI_IRQHandler+0x9a>
 801de12:	69bb      	ldr	r3, [r7, #24]
 801de14:	f003 0320 	and.w	r3, r3, #32
 801de18:	2b00      	cmp	r3, #0
 801de1a:	d10e      	bne.n	801de3a <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 801de1c:	69bb      	ldr	r3, [r7, #24]
 801de1e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 801de22:	2b00      	cmp	r3, #0
 801de24:	d009      	beq.n	801de3a <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 801de26:	687b      	ldr	r3, [r7, #4]
 801de28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801de2a:	6878      	ldr	r0, [r7, #4]
 801de2c:	4798      	blx	r3
    hspi->RxISR(hspi);
 801de2e:	687b      	ldr	r3, [r7, #4]
 801de30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801de32:	6878      	ldr	r0, [r7, #4]
 801de34:	4798      	blx	r3
    handled = 1UL;
 801de36:	2301      	movs	r3, #1
 801de38:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 801de3a:	69bb      	ldr	r3, [r7, #24]
 801de3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801de40:	2b00      	cmp	r3, #0
 801de42:	d10f      	bne.n	801de64 <HAL_SPI_IRQHandler+0xc4>
 801de44:	69bb      	ldr	r3, [r7, #24]
 801de46:	f003 0301 	and.w	r3, r3, #1
 801de4a:	2b00      	cmp	r3, #0
 801de4c:	d00a      	beq.n	801de64 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 801de4e:	69bb      	ldr	r3, [r7, #24]
 801de50:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 801de54:	2b00      	cmp	r3, #0
 801de56:	d105      	bne.n	801de64 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 801de58:	687b      	ldr	r3, [r7, #4]
 801de5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801de5c:	6878      	ldr	r0, [r7, #4]
 801de5e:	4798      	blx	r3
    handled = 1UL;
 801de60:	2301      	movs	r3, #1
 801de62:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 801de64:	69bb      	ldr	r3, [r7, #24]
 801de66:	f003 0320 	and.w	r3, r3, #32
 801de6a:	2b00      	cmp	r3, #0
 801de6c:	d10f      	bne.n	801de8e <HAL_SPI_IRQHandler+0xee>
 801de6e:	69bb      	ldr	r3, [r7, #24]
 801de70:	f003 0302 	and.w	r3, r3, #2
 801de74:	2b00      	cmp	r3, #0
 801de76:	d00a      	beq.n	801de8e <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 801de78:	69bb      	ldr	r3, [r7, #24]
 801de7a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 801de7e:	2b00      	cmp	r3, #0
 801de80:	d105      	bne.n	801de8e <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 801de82:	687b      	ldr	r3, [r7, #4]
 801de84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801de86:	6878      	ldr	r0, [r7, #4]
 801de88:	4798      	blx	r3
    handled = 1UL;
 801de8a:	2301      	movs	r3, #1
 801de8c:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 801de8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801de90:	2b00      	cmp	r3, #0
 801de92:	f040 8147 	bne.w	801e124 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 801de96:	69bb      	ldr	r3, [r7, #24]
 801de98:	f003 0308 	and.w	r3, r3, #8
 801de9c:	2b00      	cmp	r3, #0
 801de9e:	f000 808b 	beq.w	801dfb8 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 801dea2:	687b      	ldr	r3, [r7, #4]
 801dea4:	681b      	ldr	r3, [r3, #0]
 801dea6:	699a      	ldr	r2, [r3, #24]
 801dea8:	687b      	ldr	r3, [r7, #4]
 801deaa:	681b      	ldr	r3, [r3, #0]
 801deac:	f042 0208 	orr.w	r2, r2, #8
 801deb0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 801deb2:	687b      	ldr	r3, [r7, #4]
 801deb4:	681b      	ldr	r3, [r3, #0]
 801deb6:	699a      	ldr	r2, [r3, #24]
 801deb8:	687b      	ldr	r3, [r7, #4]
 801deba:	681b      	ldr	r3, [r3, #0]
 801debc:	f042 0210 	orr.w	r2, r2, #16
 801dec0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 801dec2:	687b      	ldr	r3, [r7, #4]
 801dec4:	681b      	ldr	r3, [r3, #0]
 801dec6:	699a      	ldr	r2, [r3, #24]
 801dec8:	687b      	ldr	r3, [r7, #4]
 801deca:	681b      	ldr	r3, [r3, #0]
 801decc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801ded0:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 801ded2:	687b      	ldr	r3, [r7, #4]
 801ded4:	681b      	ldr	r3, [r3, #0]
 801ded6:	691a      	ldr	r2, [r3, #16]
 801ded8:	687b      	ldr	r3, [r7, #4]
 801deda:	681b      	ldr	r3, [r3, #0]
 801dedc:	f022 0208 	bic.w	r2, r2, #8
 801dee0:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 801dee2:	687b      	ldr	r3, [r7, #4]
 801dee4:	681b      	ldr	r3, [r3, #0]
 801dee6:	689b      	ldr	r3, [r3, #8]
 801dee8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 801deec:	2b00      	cmp	r3, #0
 801deee:	d13d      	bne.n	801df6c <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 801def0:	e036      	b.n	801df60 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 801def2:	687b      	ldr	r3, [r7, #4]
 801def4:	68db      	ldr	r3, [r3, #12]
 801def6:	2b0f      	cmp	r3, #15
 801def8:	d90b      	bls.n	801df12 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 801defa:	687b      	ldr	r3, [r7, #4]
 801defc:	681a      	ldr	r2, [r3, #0]
 801defe:	687b      	ldr	r3, [r7, #4]
 801df00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801df02:	6b12      	ldr	r2, [r2, #48]	; 0x30
 801df04:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 801df06:	687b      	ldr	r3, [r7, #4]
 801df08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801df0a:	1d1a      	adds	r2, r3, #4
 801df0c:	687b      	ldr	r3, [r7, #4]
 801df0e:	665a      	str	r2, [r3, #100]	; 0x64
 801df10:	e01d      	b.n	801df4e <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801df12:	687b      	ldr	r3, [r7, #4]
 801df14:	68db      	ldr	r3, [r3, #12]
 801df16:	2b07      	cmp	r3, #7
 801df18:	d90b      	bls.n	801df32 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 801df1a:	687b      	ldr	r3, [r7, #4]
 801df1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801df1e:	68fa      	ldr	r2, [r7, #12]
 801df20:	8812      	ldrh	r2, [r2, #0]
 801df22:	b292      	uxth	r2, r2
 801df24:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 801df26:	687b      	ldr	r3, [r7, #4]
 801df28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801df2a:	1c9a      	adds	r2, r3, #2
 801df2c:	687b      	ldr	r3, [r7, #4]
 801df2e:	665a      	str	r2, [r3, #100]	; 0x64
 801df30:	e00d      	b.n	801df4e <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801df32:	687b      	ldr	r3, [r7, #4]
 801df34:	681b      	ldr	r3, [r3, #0]
 801df36:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801df3a:	687b      	ldr	r3, [r7, #4]
 801df3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801df3e:	7812      	ldrb	r2, [r2, #0]
 801df40:	b2d2      	uxtb	r2, r2
 801df42:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 801df44:	687b      	ldr	r3, [r7, #4]
 801df46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801df48:	1c5a      	adds	r2, r3, #1
 801df4a:	687b      	ldr	r3, [r7, #4]
 801df4c:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 801df4e:	687b      	ldr	r3, [r7, #4]
 801df50:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801df54:	b29b      	uxth	r3, r3
 801df56:	3b01      	subs	r3, #1
 801df58:	b29a      	uxth	r2, r3
 801df5a:	687b      	ldr	r3, [r7, #4]
 801df5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 801df60:	687b      	ldr	r3, [r7, #4]
 801df62:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801df66:	b29b      	uxth	r3, r3
 801df68:	2b00      	cmp	r3, #0
 801df6a:	d1c2      	bne.n	801def2 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 801df6c:	6878      	ldr	r0, [r7, #4]
 801df6e:	f000 f985 	bl	801e27c <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 801df72:	687b      	ldr	r3, [r7, #4]
 801df74:	2201      	movs	r2, #1
 801df76:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801df7a:	687b      	ldr	r3, [r7, #4]
 801df7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801df80:	2b00      	cmp	r3, #0
 801df82:	d003      	beq.n	801df8c <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 801df84:	6878      	ldr	r0, [r7, #4]
 801df86:	f000 f8f7 	bl	801e178 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 801df8a:	e0d0      	b.n	801e12e <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 801df8c:	7cfb      	ldrb	r3, [r7, #19]
 801df8e:	2b05      	cmp	r3, #5
 801df90:	d103      	bne.n	801df9a <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 801df92:	6878      	ldr	r0, [r7, #4]
 801df94:	f000 f8dc 	bl	801e150 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 801df98:	e0c6      	b.n	801e128 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 801df9a:	7cfb      	ldrb	r3, [r7, #19]
 801df9c:	2b04      	cmp	r3, #4
 801df9e:	d103      	bne.n	801dfa8 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 801dfa0:	6878      	ldr	r0, [r7, #4]
 801dfa2:	f000 f8cb 	bl	801e13c <HAL_SPI_RxCpltCallback>
    return;
 801dfa6:	e0bf      	b.n	801e128 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 801dfa8:	7cfb      	ldrb	r3, [r7, #19]
 801dfaa:	2b03      	cmp	r3, #3
 801dfac:	f040 80bc 	bne.w	801e128 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 801dfb0:	6878      	ldr	r0, [r7, #4]
 801dfb2:	f7e2 ffab 	bl	8000f0c <HAL_SPI_TxCpltCallback>
    return;
 801dfb6:	e0b7      	b.n	801e128 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 801dfb8:	69bb      	ldr	r3, [r7, #24]
 801dfba:	f403 7358 	and.w	r3, r3, #864	; 0x360
 801dfbe:	2b00      	cmp	r3, #0
 801dfc0:	f000 80b5 	beq.w	801e12e <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 801dfc4:	69bb      	ldr	r3, [r7, #24]
 801dfc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801dfca:	2b00      	cmp	r3, #0
 801dfcc:	d00f      	beq.n	801dfee <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 801dfce:	687b      	ldr	r3, [r7, #4]
 801dfd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801dfd4:	f043 0204 	orr.w	r2, r3, #4
 801dfd8:	687b      	ldr	r3, [r7, #4]
 801dfda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801dfde:	687b      	ldr	r3, [r7, #4]
 801dfe0:	681b      	ldr	r3, [r3, #0]
 801dfe2:	699a      	ldr	r2, [r3, #24]
 801dfe4:	687b      	ldr	r3, [r7, #4]
 801dfe6:	681b      	ldr	r3, [r3, #0]
 801dfe8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801dfec:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 801dfee:	69bb      	ldr	r3, [r7, #24]
 801dff0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801dff4:	2b00      	cmp	r3, #0
 801dff6:	d00f      	beq.n	801e018 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 801dff8:	687b      	ldr	r3, [r7, #4]
 801dffa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801dffe:	f043 0201 	orr.w	r2, r3, #1
 801e002:	687b      	ldr	r3, [r7, #4]
 801e004:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 801e008:	687b      	ldr	r3, [r7, #4]
 801e00a:	681b      	ldr	r3, [r3, #0]
 801e00c:	699a      	ldr	r2, [r3, #24]
 801e00e:	687b      	ldr	r3, [r7, #4]
 801e010:	681b      	ldr	r3, [r3, #0]
 801e012:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801e016:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 801e018:	69bb      	ldr	r3, [r7, #24]
 801e01a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e01e:	2b00      	cmp	r3, #0
 801e020:	d00f      	beq.n	801e042 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 801e022:	687b      	ldr	r3, [r7, #4]
 801e024:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801e028:	f043 0208 	orr.w	r2, r3, #8
 801e02c:	687b      	ldr	r3, [r7, #4]
 801e02e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 801e032:	687b      	ldr	r3, [r7, #4]
 801e034:	681b      	ldr	r3, [r3, #0]
 801e036:	699a      	ldr	r2, [r3, #24]
 801e038:	687b      	ldr	r3, [r7, #4]
 801e03a:	681b      	ldr	r3, [r3, #0]
 801e03c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801e040:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 801e042:	69bb      	ldr	r3, [r7, #24]
 801e044:	f003 0320 	and.w	r3, r3, #32
 801e048:	2b00      	cmp	r3, #0
 801e04a:	d00f      	beq.n	801e06c <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 801e04c:	687b      	ldr	r3, [r7, #4]
 801e04e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801e052:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801e056:	687b      	ldr	r3, [r7, #4]
 801e058:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 801e05c:	687b      	ldr	r3, [r7, #4]
 801e05e:	681b      	ldr	r3, [r3, #0]
 801e060:	699a      	ldr	r2, [r3, #24]
 801e062:	687b      	ldr	r3, [r7, #4]
 801e064:	681b      	ldr	r3, [r3, #0]
 801e066:	f042 0220 	orr.w	r2, r2, #32
 801e06a:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801e06c:	687b      	ldr	r3, [r7, #4]
 801e06e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801e072:	2b00      	cmp	r3, #0
 801e074:	d05a      	beq.n	801e12c <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 801e076:	687b      	ldr	r3, [r7, #4]
 801e078:	681b      	ldr	r3, [r3, #0]
 801e07a:	681a      	ldr	r2, [r3, #0]
 801e07c:	687b      	ldr	r3, [r7, #4]
 801e07e:	681b      	ldr	r3, [r3, #0]
 801e080:	f022 0201 	bic.w	r2, r2, #1
 801e084:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 801e086:	687b      	ldr	r3, [r7, #4]
 801e088:	681b      	ldr	r3, [r3, #0]
 801e08a:	6919      	ldr	r1, [r3, #16]
 801e08c:	687b      	ldr	r3, [r7, #4]
 801e08e:	681a      	ldr	r2, [r3, #0]
 801e090:	4b28      	ldr	r3, [pc, #160]	; (801e134 <HAL_SPI_IRQHandler+0x394>)
 801e092:	400b      	ands	r3, r1
 801e094:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 801e096:	697b      	ldr	r3, [r7, #20]
 801e098:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 801e09c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 801e0a0:	d138      	bne.n	801e114 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 801e0a2:	687b      	ldr	r3, [r7, #4]
 801e0a4:	681b      	ldr	r3, [r3, #0]
 801e0a6:	689a      	ldr	r2, [r3, #8]
 801e0a8:	687b      	ldr	r3, [r7, #4]
 801e0aa:	681b      	ldr	r3, [r3, #0]
 801e0ac:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 801e0b0:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 801e0b2:	687b      	ldr	r3, [r7, #4]
 801e0b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801e0b6:	2b00      	cmp	r3, #0
 801e0b8:	d013      	beq.n	801e0e2 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 801e0ba:	687b      	ldr	r3, [r7, #4]
 801e0bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801e0be:	4a1e      	ldr	r2, [pc, #120]	; (801e138 <HAL_SPI_IRQHandler+0x398>)
 801e0c0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 801e0c2:	687b      	ldr	r3, [r7, #4]
 801e0c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801e0c6:	4618      	mov	r0, r3
 801e0c8:	f7f9 f8a0 	bl	801720c <HAL_DMA_Abort_IT>
 801e0cc:	4603      	mov	r3, r0
 801e0ce:	2b00      	cmp	r3, #0
 801e0d0:	d007      	beq.n	801e0e2 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801e0d2:	687b      	ldr	r3, [r7, #4]
 801e0d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801e0d8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801e0dc:	687b      	ldr	r3, [r7, #4]
 801e0de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 801e0e2:	687b      	ldr	r3, [r7, #4]
 801e0e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801e0e6:	2b00      	cmp	r3, #0
 801e0e8:	d020      	beq.n	801e12c <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 801e0ea:	687b      	ldr	r3, [r7, #4]
 801e0ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801e0ee:	4a12      	ldr	r2, [pc, #72]	; (801e138 <HAL_SPI_IRQHandler+0x398>)
 801e0f0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 801e0f2:	687b      	ldr	r3, [r7, #4]
 801e0f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801e0f6:	4618      	mov	r0, r3
 801e0f8:	f7f9 f888 	bl	801720c <HAL_DMA_Abort_IT>
 801e0fc:	4603      	mov	r3, r0
 801e0fe:	2b00      	cmp	r3, #0
 801e100:	d014      	beq.n	801e12c <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801e102:	687b      	ldr	r3, [r7, #4]
 801e104:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801e108:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801e10c:	687b      	ldr	r3, [r7, #4]
 801e10e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 801e112:	e00b      	b.n	801e12c <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 801e114:	687b      	ldr	r3, [r7, #4]
 801e116:	2201      	movs	r2, #1
 801e118:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 801e11c:	6878      	ldr	r0, [r7, #4]
 801e11e:	f000 f82b 	bl	801e178 <HAL_SPI_ErrorCallback>
    return;
 801e122:	e003      	b.n	801e12c <HAL_SPI_IRQHandler+0x38c>
    return;
 801e124:	bf00      	nop
 801e126:	e002      	b.n	801e12e <HAL_SPI_IRQHandler+0x38e>
    return;
 801e128:	bf00      	nop
 801e12a:	e000      	b.n	801e12e <HAL_SPI_IRQHandler+0x38e>
    return;
 801e12c:	bf00      	nop
  }
}
 801e12e:	3728      	adds	r7, #40	; 0x28
 801e130:	46bd      	mov	sp, r7
 801e132:	bd80      	pop	{r7, pc}
 801e134:	fffffc94 	.word	0xfffffc94
 801e138:	0801e249 	.word	0x0801e249

0801e13c <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 801e13c:	b480      	push	{r7}
 801e13e:	b083      	sub	sp, #12
 801e140:	af00      	add	r7, sp, #0
 801e142:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 801e144:	bf00      	nop
 801e146:	370c      	adds	r7, #12
 801e148:	46bd      	mov	sp, r7
 801e14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e14e:	4770      	bx	lr

0801e150 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 801e150:	b480      	push	{r7}
 801e152:	b083      	sub	sp, #12
 801e154:	af00      	add	r7, sp, #0
 801e156:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 801e158:	bf00      	nop
 801e15a:	370c      	adds	r7, #12
 801e15c:	46bd      	mov	sp, r7
 801e15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e162:	4770      	bx	lr

0801e164 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 801e164:	b480      	push	{r7}
 801e166:	b083      	sub	sp, #12
 801e168:	af00      	add	r7, sp, #0
 801e16a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 801e16c:	bf00      	nop
 801e16e:	370c      	adds	r7, #12
 801e170:	46bd      	mov	sp, r7
 801e172:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e176:	4770      	bx	lr

0801e178 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 801e178:	b480      	push	{r7}
 801e17a:	b083      	sub	sp, #12
 801e17c:	af00      	add	r7, sp, #0
 801e17e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 801e180:	bf00      	nop
 801e182:	370c      	adds	r7, #12
 801e184:	46bd      	mov	sp, r7
 801e186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e18a:	4770      	bx	lr

0801e18c <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi)
{
 801e18c:	b480      	push	{r7}
 801e18e:	b083      	sub	sp, #12
 801e190:	af00      	add	r7, sp, #0
 801e192:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 801e194:	bf00      	nop
 801e196:	370c      	adds	r7, #12
 801e198:	46bd      	mov	sp, r7
 801e19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e19e:	4770      	bx	lr

0801e1a0 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 801e1a0:	b580      	push	{r7, lr}
 801e1a2:	b084      	sub	sp, #16
 801e1a4:	af00      	add	r7, sp, #0
 801e1a6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801e1a8:	687b      	ldr	r3, [r7, #4]
 801e1aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e1ac:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 801e1ae:	68fb      	ldr	r3, [r7, #12]
 801e1b0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 801e1b4:	b2db      	uxtb	r3, r3
 801e1b6:	2b07      	cmp	r3, #7
 801e1b8:	d011      	beq.n	801e1de <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 801e1ba:	68fb      	ldr	r3, [r7, #12]
 801e1bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801e1be:	69db      	ldr	r3, [r3, #28]
 801e1c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801e1c4:	d103      	bne.n	801e1ce <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 801e1c6:	68f8      	ldr	r0, [r7, #12]
 801e1c8:	f7e2 fea0 	bl	8000f0c <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 801e1cc:	e007      	b.n	801e1de <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 801e1ce:	68fb      	ldr	r3, [r7, #12]
 801e1d0:	681b      	ldr	r3, [r3, #0]
 801e1d2:	691a      	ldr	r2, [r3, #16]
 801e1d4:	68fb      	ldr	r3, [r7, #12]
 801e1d6:	681b      	ldr	r3, [r3, #0]
 801e1d8:	f042 0208 	orr.w	r2, r2, #8
 801e1dc:	611a      	str	r2, [r3, #16]
}
 801e1de:	bf00      	nop
 801e1e0:	3710      	adds	r7, #16
 801e1e2:	46bd      	mov	sp, r7
 801e1e4:	bd80      	pop	{r7, pc}

0801e1e6 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 801e1e6:	b580      	push	{r7, lr}
 801e1e8:	b084      	sub	sp, #16
 801e1ea:	af00      	add	r7, sp, #0
 801e1ec:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801e1ee:	687b      	ldr	r3, [r7, #4]
 801e1f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e1f2:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 801e1f4:	68f8      	ldr	r0, [r7, #12]
 801e1f6:	f7ff ffb5 	bl	801e164 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 801e1fa:	bf00      	nop
 801e1fc:	3710      	adds	r7, #16
 801e1fe:	46bd      	mov	sp, r7
 801e200:	bd80      	pop	{r7, pc}

0801e202 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 801e202:	b580      	push	{r7, lr}
 801e204:	b084      	sub	sp, #16
 801e206:	af00      	add	r7, sp, #0
 801e208:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801e20a:	687b      	ldr	r3, [r7, #4]
 801e20c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e20e:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 801e210:	6878      	ldr	r0, [r7, #4]
 801e212:	f7fa f96b 	bl	80184ec <HAL_DMA_GetError>
 801e216:	4603      	mov	r3, r0
 801e218:	2b02      	cmp	r3, #2
 801e21a:	d011      	beq.n	801e240 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 801e21c:	68f8      	ldr	r0, [r7, #12]
 801e21e:	f000 f82d 	bl	801e27c <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 801e222:	68fb      	ldr	r3, [r7, #12]
 801e224:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801e228:	f043 0210 	orr.w	r2, r3, #16
 801e22c:	68fb      	ldr	r3, [r7, #12]
 801e22e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 801e232:	68fb      	ldr	r3, [r7, #12]
 801e234:	2201      	movs	r2, #1
 801e236:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 801e23a:	68f8      	ldr	r0, [r7, #12]
 801e23c:	f7ff ff9c 	bl	801e178 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 801e240:	bf00      	nop
 801e242:	3710      	adds	r7, #16
 801e244:	46bd      	mov	sp, r7
 801e246:	bd80      	pop	{r7, pc}

0801e248 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801e248:	b580      	push	{r7, lr}
 801e24a:	b084      	sub	sp, #16
 801e24c:	af00      	add	r7, sp, #0
 801e24e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801e250:	687b      	ldr	r3, [r7, #4]
 801e252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e254:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 801e256:	68fb      	ldr	r3, [r7, #12]
 801e258:	2200      	movs	r2, #0
 801e25a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 801e25e:	68fb      	ldr	r3, [r7, #12]
 801e260:	2200      	movs	r2, #0
 801e262:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 801e266:	68fb      	ldr	r3, [r7, #12]
 801e268:	2201      	movs	r2, #1
 801e26a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 801e26e:	68f8      	ldr	r0, [r7, #12]
 801e270:	f7ff ff82 	bl	801e178 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 801e274:	bf00      	nop
 801e276:	3710      	adds	r7, #16
 801e278:	46bd      	mov	sp, r7
 801e27a:	bd80      	pop	{r7, pc}

0801e27c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 801e27c:	b480      	push	{r7}
 801e27e:	b085      	sub	sp, #20
 801e280:	af00      	add	r7, sp, #0
 801e282:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 801e284:	687b      	ldr	r3, [r7, #4]
 801e286:	681b      	ldr	r3, [r3, #0]
 801e288:	695b      	ldr	r3, [r3, #20]
 801e28a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 801e28c:	687b      	ldr	r3, [r7, #4]
 801e28e:	681b      	ldr	r3, [r3, #0]
 801e290:	699a      	ldr	r2, [r3, #24]
 801e292:	687b      	ldr	r3, [r7, #4]
 801e294:	681b      	ldr	r3, [r3, #0]
 801e296:	f042 0208 	orr.w	r2, r2, #8
 801e29a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 801e29c:	687b      	ldr	r3, [r7, #4]
 801e29e:	681b      	ldr	r3, [r3, #0]
 801e2a0:	699a      	ldr	r2, [r3, #24]
 801e2a2:	687b      	ldr	r3, [r7, #4]
 801e2a4:	681b      	ldr	r3, [r3, #0]
 801e2a6:	f042 0210 	orr.w	r2, r2, #16
 801e2aa:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801e2ac:	687b      	ldr	r3, [r7, #4]
 801e2ae:	681b      	ldr	r3, [r3, #0]
 801e2b0:	681a      	ldr	r2, [r3, #0]
 801e2b2:	687b      	ldr	r3, [r7, #4]
 801e2b4:	681b      	ldr	r3, [r3, #0]
 801e2b6:	f022 0201 	bic.w	r2, r2, #1
 801e2ba:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 801e2bc:	687b      	ldr	r3, [r7, #4]
 801e2be:	681b      	ldr	r3, [r3, #0]
 801e2c0:	6919      	ldr	r1, [r3, #16]
 801e2c2:	687b      	ldr	r3, [r7, #4]
 801e2c4:	681a      	ldr	r2, [r3, #0]
 801e2c6:	4b3c      	ldr	r3, [pc, #240]	; (801e3b8 <SPI_CloseTransfer+0x13c>)
 801e2c8:	400b      	ands	r3, r1
 801e2ca:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 801e2cc:	687b      	ldr	r3, [r7, #4]
 801e2ce:	681b      	ldr	r3, [r3, #0]
 801e2d0:	689a      	ldr	r2, [r3, #8]
 801e2d2:	687b      	ldr	r3, [r7, #4]
 801e2d4:	681b      	ldr	r3, [r3, #0]
 801e2d6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 801e2da:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801e2dc:	687b      	ldr	r3, [r7, #4]
 801e2de:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 801e2e2:	b2db      	uxtb	r3, r3
 801e2e4:	2b04      	cmp	r3, #4
 801e2e6:	d014      	beq.n	801e312 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 801e2e8:	68fb      	ldr	r3, [r7, #12]
 801e2ea:	f003 0320 	and.w	r3, r3, #32
 801e2ee:	2b00      	cmp	r3, #0
 801e2f0:	d00f      	beq.n	801e312 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 801e2f2:	687b      	ldr	r3, [r7, #4]
 801e2f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801e2f8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801e2fc:	687b      	ldr	r3, [r7, #4]
 801e2fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 801e302:	687b      	ldr	r3, [r7, #4]
 801e304:	681b      	ldr	r3, [r3, #0]
 801e306:	699a      	ldr	r2, [r3, #24]
 801e308:	687b      	ldr	r3, [r7, #4]
 801e30a:	681b      	ldr	r3, [r3, #0]
 801e30c:	f042 0220 	orr.w	r2, r2, #32
 801e310:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 801e312:	687b      	ldr	r3, [r7, #4]
 801e314:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 801e318:	b2db      	uxtb	r3, r3
 801e31a:	2b03      	cmp	r3, #3
 801e31c:	d014      	beq.n	801e348 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 801e31e:	68fb      	ldr	r3, [r7, #12]
 801e320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801e324:	2b00      	cmp	r3, #0
 801e326:	d00f      	beq.n	801e348 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 801e328:	687b      	ldr	r3, [r7, #4]
 801e32a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801e32e:	f043 0204 	orr.w	r2, r3, #4
 801e332:	687b      	ldr	r3, [r7, #4]
 801e334:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801e338:	687b      	ldr	r3, [r7, #4]
 801e33a:	681b      	ldr	r3, [r3, #0]
 801e33c:	699a      	ldr	r2, [r3, #24]
 801e33e:	687b      	ldr	r3, [r7, #4]
 801e340:	681b      	ldr	r3, [r3, #0]
 801e342:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801e346:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 801e348:	68fb      	ldr	r3, [r7, #12]
 801e34a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801e34e:	2b00      	cmp	r3, #0
 801e350:	d00f      	beq.n	801e372 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 801e352:	687b      	ldr	r3, [r7, #4]
 801e354:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801e358:	f043 0201 	orr.w	r2, r3, #1
 801e35c:	687b      	ldr	r3, [r7, #4]
 801e35e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 801e362:	687b      	ldr	r3, [r7, #4]
 801e364:	681b      	ldr	r3, [r3, #0]
 801e366:	699a      	ldr	r2, [r3, #24]
 801e368:	687b      	ldr	r3, [r7, #4]
 801e36a:	681b      	ldr	r3, [r3, #0]
 801e36c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801e370:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 801e372:	68fb      	ldr	r3, [r7, #12]
 801e374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e378:	2b00      	cmp	r3, #0
 801e37a:	d00f      	beq.n	801e39c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 801e37c:	687b      	ldr	r3, [r7, #4]
 801e37e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801e382:	f043 0208 	orr.w	r2, r3, #8
 801e386:	687b      	ldr	r3, [r7, #4]
 801e388:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 801e38c:	687b      	ldr	r3, [r7, #4]
 801e38e:	681b      	ldr	r3, [r3, #0]
 801e390:	699a      	ldr	r2, [r3, #24]
 801e392:	687b      	ldr	r3, [r7, #4]
 801e394:	681b      	ldr	r3, [r3, #0]
 801e396:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801e39a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 801e39c:	687b      	ldr	r3, [r7, #4]
 801e39e:	2200      	movs	r2, #0
 801e3a0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 801e3a4:	687b      	ldr	r3, [r7, #4]
 801e3a6:	2200      	movs	r2, #0
 801e3a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 801e3ac:	bf00      	nop
 801e3ae:	3714      	adds	r7, #20
 801e3b0:	46bd      	mov	sp, r7
 801e3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e3b6:	4770      	bx	lr
 801e3b8:	fffffc90 	.word	0xfffffc90

0801e3bc <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 801e3bc:	b580      	push	{r7, lr}
 801e3be:	b084      	sub	sp, #16
 801e3c0:	af00      	add	r7, sp, #0
 801e3c2:	60f8      	str	r0, [r7, #12]
 801e3c4:	60b9      	str	r1, [r7, #8]
 801e3c6:	603b      	str	r3, [r7, #0]
 801e3c8:	4613      	mov	r3, r2
 801e3ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 801e3cc:	e010      	b.n	801e3f0 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801e3ce:	f7f7 fd7f 	bl	8015ed0 <HAL_GetTick>
 801e3d2:	4602      	mov	r2, r0
 801e3d4:	69bb      	ldr	r3, [r7, #24]
 801e3d6:	1ad3      	subs	r3, r2, r3
 801e3d8:	683a      	ldr	r2, [r7, #0]
 801e3da:	429a      	cmp	r2, r3
 801e3dc:	d803      	bhi.n	801e3e6 <SPI_WaitOnFlagUntilTimeout+0x2a>
 801e3de:	683b      	ldr	r3, [r7, #0]
 801e3e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e3e4:	d102      	bne.n	801e3ec <SPI_WaitOnFlagUntilTimeout+0x30>
 801e3e6:	683b      	ldr	r3, [r7, #0]
 801e3e8:	2b00      	cmp	r3, #0
 801e3ea:	d101      	bne.n	801e3f0 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 801e3ec:	2303      	movs	r3, #3
 801e3ee:	e00f      	b.n	801e410 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 801e3f0:	68fb      	ldr	r3, [r7, #12]
 801e3f2:	681b      	ldr	r3, [r3, #0]
 801e3f4:	695a      	ldr	r2, [r3, #20]
 801e3f6:	68bb      	ldr	r3, [r7, #8]
 801e3f8:	4013      	ands	r3, r2
 801e3fa:	68ba      	ldr	r2, [r7, #8]
 801e3fc:	429a      	cmp	r2, r3
 801e3fe:	bf0c      	ite	eq
 801e400:	2301      	moveq	r3, #1
 801e402:	2300      	movne	r3, #0
 801e404:	b2db      	uxtb	r3, r3
 801e406:	461a      	mov	r2, r3
 801e408:	79fb      	ldrb	r3, [r7, #7]
 801e40a:	429a      	cmp	r2, r3
 801e40c:	d0df      	beq.n	801e3ce <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 801e40e:	2300      	movs	r3, #0
}
 801e410:	4618      	mov	r0, r3
 801e412:	3710      	adds	r7, #16
 801e414:	46bd      	mov	sp, r7
 801e416:	bd80      	pop	{r7, pc}

0801e418 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 801e418:	b480      	push	{r7}
 801e41a:	b085      	sub	sp, #20
 801e41c:	af00      	add	r7, sp, #0
 801e41e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 801e420:	687b      	ldr	r3, [r7, #4]
 801e422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e424:	095b      	lsrs	r3, r3, #5
 801e426:	3301      	adds	r3, #1
 801e428:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 801e42a:	687b      	ldr	r3, [r7, #4]
 801e42c:	68db      	ldr	r3, [r3, #12]
 801e42e:	3301      	adds	r3, #1
 801e430:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 801e432:	68bb      	ldr	r3, [r7, #8]
 801e434:	3307      	adds	r3, #7
 801e436:	08db      	lsrs	r3, r3, #3
 801e438:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 801e43a:	68bb      	ldr	r3, [r7, #8]
 801e43c:	68fa      	ldr	r2, [r7, #12]
 801e43e:	fb02 f303 	mul.w	r3, r2, r3
}
 801e442:	4618      	mov	r0, r3
 801e444:	3714      	adds	r7, #20
 801e446:	46bd      	mov	sp, r7
 801e448:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e44c:	4770      	bx	lr

0801e44e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801e44e:	b580      	push	{r7, lr}
 801e450:	b082      	sub	sp, #8
 801e452:	af00      	add	r7, sp, #0
 801e454:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801e456:	687b      	ldr	r3, [r7, #4]
 801e458:	2b00      	cmp	r3, #0
 801e45a:	d101      	bne.n	801e460 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801e45c:	2301      	movs	r3, #1
 801e45e:	e042      	b.n	801e4e6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801e460:	687b      	ldr	r3, [r7, #4]
 801e462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801e466:	2b00      	cmp	r3, #0
 801e468:	d106      	bne.n	801e478 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801e46a:	687b      	ldr	r3, [r7, #4]
 801e46c:	2200      	movs	r2, #0
 801e46e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801e472:	6878      	ldr	r0, [r7, #4]
 801e474:	f7f7 fa3c 	bl	80158f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801e478:	687b      	ldr	r3, [r7, #4]
 801e47a:	2224      	movs	r2, #36	; 0x24
 801e47c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 801e480:	687b      	ldr	r3, [r7, #4]
 801e482:	681b      	ldr	r3, [r3, #0]
 801e484:	681a      	ldr	r2, [r3, #0]
 801e486:	687b      	ldr	r3, [r7, #4]
 801e488:	681b      	ldr	r3, [r3, #0]
 801e48a:	f022 0201 	bic.w	r2, r2, #1
 801e48e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801e490:	6878      	ldr	r0, [r7, #4]
 801e492:	f000 f8bb 	bl	801e60c <UART_SetConfig>
 801e496:	4603      	mov	r3, r0
 801e498:	2b01      	cmp	r3, #1
 801e49a:	d101      	bne.n	801e4a0 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 801e49c:	2301      	movs	r3, #1
 801e49e:	e022      	b.n	801e4e6 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801e4a0:	687b      	ldr	r3, [r7, #4]
 801e4a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e4a4:	2b00      	cmp	r3, #0
 801e4a6:	d002      	beq.n	801e4ae <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 801e4a8:	6878      	ldr	r0, [r7, #4]
 801e4aa:	f000 fe17 	bl	801f0dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801e4ae:	687b      	ldr	r3, [r7, #4]
 801e4b0:	681b      	ldr	r3, [r3, #0]
 801e4b2:	685a      	ldr	r2, [r3, #4]
 801e4b4:	687b      	ldr	r3, [r7, #4]
 801e4b6:	681b      	ldr	r3, [r3, #0]
 801e4b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801e4bc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801e4be:	687b      	ldr	r3, [r7, #4]
 801e4c0:	681b      	ldr	r3, [r3, #0]
 801e4c2:	689a      	ldr	r2, [r3, #8]
 801e4c4:	687b      	ldr	r3, [r7, #4]
 801e4c6:	681b      	ldr	r3, [r3, #0]
 801e4c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801e4cc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801e4ce:	687b      	ldr	r3, [r7, #4]
 801e4d0:	681b      	ldr	r3, [r3, #0]
 801e4d2:	681a      	ldr	r2, [r3, #0]
 801e4d4:	687b      	ldr	r3, [r7, #4]
 801e4d6:	681b      	ldr	r3, [r3, #0]
 801e4d8:	f042 0201 	orr.w	r2, r2, #1
 801e4dc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801e4de:	6878      	ldr	r0, [r7, #4]
 801e4e0:	f000 fe9e 	bl	801f220 <UART_CheckIdleState>
 801e4e4:	4603      	mov	r3, r0
}
 801e4e6:	4618      	mov	r0, r3
 801e4e8:	3708      	adds	r7, #8
 801e4ea:	46bd      	mov	sp, r7
 801e4ec:	bd80      	pop	{r7, pc}

0801e4ee <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801e4ee:	b580      	push	{r7, lr}
 801e4f0:	b08a      	sub	sp, #40	; 0x28
 801e4f2:	af02      	add	r7, sp, #8
 801e4f4:	60f8      	str	r0, [r7, #12]
 801e4f6:	60b9      	str	r1, [r7, #8]
 801e4f8:	603b      	str	r3, [r7, #0]
 801e4fa:	4613      	mov	r3, r2
 801e4fc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801e4fe:	68fb      	ldr	r3, [r7, #12]
 801e500:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801e504:	2b20      	cmp	r3, #32
 801e506:	d17b      	bne.n	801e600 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 801e508:	68bb      	ldr	r3, [r7, #8]
 801e50a:	2b00      	cmp	r3, #0
 801e50c:	d002      	beq.n	801e514 <HAL_UART_Transmit+0x26>
 801e50e:	88fb      	ldrh	r3, [r7, #6]
 801e510:	2b00      	cmp	r3, #0
 801e512:	d101      	bne.n	801e518 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 801e514:	2301      	movs	r3, #1
 801e516:	e074      	b.n	801e602 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801e518:	68fb      	ldr	r3, [r7, #12]
 801e51a:	2200      	movs	r2, #0
 801e51c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801e520:	68fb      	ldr	r3, [r7, #12]
 801e522:	2221      	movs	r2, #33	; 0x21
 801e524:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801e528:	f7f7 fcd2 	bl	8015ed0 <HAL_GetTick>
 801e52c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 801e52e:	68fb      	ldr	r3, [r7, #12]
 801e530:	88fa      	ldrh	r2, [r7, #6]
 801e532:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 801e536:	68fb      	ldr	r3, [r7, #12]
 801e538:	88fa      	ldrh	r2, [r7, #6]
 801e53a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801e53e:	68fb      	ldr	r3, [r7, #12]
 801e540:	689b      	ldr	r3, [r3, #8]
 801e542:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801e546:	d108      	bne.n	801e55a <HAL_UART_Transmit+0x6c>
 801e548:	68fb      	ldr	r3, [r7, #12]
 801e54a:	691b      	ldr	r3, [r3, #16]
 801e54c:	2b00      	cmp	r3, #0
 801e54e:	d104      	bne.n	801e55a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 801e550:	2300      	movs	r3, #0
 801e552:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801e554:	68bb      	ldr	r3, [r7, #8]
 801e556:	61bb      	str	r3, [r7, #24]
 801e558:	e003      	b.n	801e562 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 801e55a:	68bb      	ldr	r3, [r7, #8]
 801e55c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801e55e:	2300      	movs	r3, #0
 801e560:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 801e562:	e030      	b.n	801e5c6 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801e564:	683b      	ldr	r3, [r7, #0]
 801e566:	9300      	str	r3, [sp, #0]
 801e568:	697b      	ldr	r3, [r7, #20]
 801e56a:	2200      	movs	r2, #0
 801e56c:	2180      	movs	r1, #128	; 0x80
 801e56e:	68f8      	ldr	r0, [r7, #12]
 801e570:	f000 ff00 	bl	801f374 <UART_WaitOnFlagUntilTimeout>
 801e574:	4603      	mov	r3, r0
 801e576:	2b00      	cmp	r3, #0
 801e578:	d005      	beq.n	801e586 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 801e57a:	68fb      	ldr	r3, [r7, #12]
 801e57c:	2220      	movs	r2, #32
 801e57e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 801e582:	2303      	movs	r3, #3
 801e584:	e03d      	b.n	801e602 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 801e586:	69fb      	ldr	r3, [r7, #28]
 801e588:	2b00      	cmp	r3, #0
 801e58a:	d10b      	bne.n	801e5a4 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801e58c:	69bb      	ldr	r3, [r7, #24]
 801e58e:	881b      	ldrh	r3, [r3, #0]
 801e590:	461a      	mov	r2, r3
 801e592:	68fb      	ldr	r3, [r7, #12]
 801e594:	681b      	ldr	r3, [r3, #0]
 801e596:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801e59a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 801e59c:	69bb      	ldr	r3, [r7, #24]
 801e59e:	3302      	adds	r3, #2
 801e5a0:	61bb      	str	r3, [r7, #24]
 801e5a2:	e007      	b.n	801e5b4 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801e5a4:	69fb      	ldr	r3, [r7, #28]
 801e5a6:	781a      	ldrb	r2, [r3, #0]
 801e5a8:	68fb      	ldr	r3, [r7, #12]
 801e5aa:	681b      	ldr	r3, [r3, #0]
 801e5ac:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 801e5ae:	69fb      	ldr	r3, [r7, #28]
 801e5b0:	3301      	adds	r3, #1
 801e5b2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801e5b4:	68fb      	ldr	r3, [r7, #12]
 801e5b6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801e5ba:	b29b      	uxth	r3, r3
 801e5bc:	3b01      	subs	r3, #1
 801e5be:	b29a      	uxth	r2, r3
 801e5c0:	68fb      	ldr	r3, [r7, #12]
 801e5c2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 801e5c6:	68fb      	ldr	r3, [r7, #12]
 801e5c8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801e5cc:	b29b      	uxth	r3, r3
 801e5ce:	2b00      	cmp	r3, #0
 801e5d0:	d1c8      	bne.n	801e564 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801e5d2:	683b      	ldr	r3, [r7, #0]
 801e5d4:	9300      	str	r3, [sp, #0]
 801e5d6:	697b      	ldr	r3, [r7, #20]
 801e5d8:	2200      	movs	r2, #0
 801e5da:	2140      	movs	r1, #64	; 0x40
 801e5dc:	68f8      	ldr	r0, [r7, #12]
 801e5de:	f000 fec9 	bl	801f374 <UART_WaitOnFlagUntilTimeout>
 801e5e2:	4603      	mov	r3, r0
 801e5e4:	2b00      	cmp	r3, #0
 801e5e6:	d005      	beq.n	801e5f4 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 801e5e8:	68fb      	ldr	r3, [r7, #12]
 801e5ea:	2220      	movs	r2, #32
 801e5ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 801e5f0:	2303      	movs	r3, #3
 801e5f2:	e006      	b.n	801e602 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801e5f4:	68fb      	ldr	r3, [r7, #12]
 801e5f6:	2220      	movs	r2, #32
 801e5f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 801e5fc:	2300      	movs	r3, #0
 801e5fe:	e000      	b.n	801e602 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 801e600:	2302      	movs	r3, #2
  }
}
 801e602:	4618      	mov	r0, r3
 801e604:	3720      	adds	r7, #32
 801e606:	46bd      	mov	sp, r7
 801e608:	bd80      	pop	{r7, pc}
	...

0801e60c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801e60c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801e610:	b092      	sub	sp, #72	; 0x48
 801e612:	af00      	add	r7, sp, #0
 801e614:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801e616:	2300      	movs	r3, #0
 801e618:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801e61c:	697b      	ldr	r3, [r7, #20]
 801e61e:	689a      	ldr	r2, [r3, #8]
 801e620:	697b      	ldr	r3, [r7, #20]
 801e622:	691b      	ldr	r3, [r3, #16]
 801e624:	431a      	orrs	r2, r3
 801e626:	697b      	ldr	r3, [r7, #20]
 801e628:	695b      	ldr	r3, [r3, #20]
 801e62a:	431a      	orrs	r2, r3
 801e62c:	697b      	ldr	r3, [r7, #20]
 801e62e:	69db      	ldr	r3, [r3, #28]
 801e630:	4313      	orrs	r3, r2
 801e632:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801e634:	697b      	ldr	r3, [r7, #20]
 801e636:	681b      	ldr	r3, [r3, #0]
 801e638:	681a      	ldr	r2, [r3, #0]
 801e63a:	4bbe      	ldr	r3, [pc, #760]	; (801e934 <UART_SetConfig+0x328>)
 801e63c:	4013      	ands	r3, r2
 801e63e:	697a      	ldr	r2, [r7, #20]
 801e640:	6812      	ldr	r2, [r2, #0]
 801e642:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801e644:	430b      	orrs	r3, r1
 801e646:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801e648:	697b      	ldr	r3, [r7, #20]
 801e64a:	681b      	ldr	r3, [r3, #0]
 801e64c:	685b      	ldr	r3, [r3, #4]
 801e64e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801e652:	697b      	ldr	r3, [r7, #20]
 801e654:	68da      	ldr	r2, [r3, #12]
 801e656:	697b      	ldr	r3, [r7, #20]
 801e658:	681b      	ldr	r3, [r3, #0]
 801e65a:	430a      	orrs	r2, r1
 801e65c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801e65e:	697b      	ldr	r3, [r7, #20]
 801e660:	699b      	ldr	r3, [r3, #24]
 801e662:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801e664:	697b      	ldr	r3, [r7, #20]
 801e666:	681b      	ldr	r3, [r3, #0]
 801e668:	4ab3      	ldr	r2, [pc, #716]	; (801e938 <UART_SetConfig+0x32c>)
 801e66a:	4293      	cmp	r3, r2
 801e66c:	d004      	beq.n	801e678 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801e66e:	697b      	ldr	r3, [r7, #20]
 801e670:	6a1b      	ldr	r3, [r3, #32]
 801e672:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801e674:	4313      	orrs	r3, r2
 801e676:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801e678:	697b      	ldr	r3, [r7, #20]
 801e67a:	681b      	ldr	r3, [r3, #0]
 801e67c:	689a      	ldr	r2, [r3, #8]
 801e67e:	4baf      	ldr	r3, [pc, #700]	; (801e93c <UART_SetConfig+0x330>)
 801e680:	4013      	ands	r3, r2
 801e682:	697a      	ldr	r2, [r7, #20]
 801e684:	6812      	ldr	r2, [r2, #0]
 801e686:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801e688:	430b      	orrs	r3, r1
 801e68a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801e68c:	697b      	ldr	r3, [r7, #20]
 801e68e:	681b      	ldr	r3, [r3, #0]
 801e690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e692:	f023 010f 	bic.w	r1, r3, #15
 801e696:	697b      	ldr	r3, [r7, #20]
 801e698:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801e69a:	697b      	ldr	r3, [r7, #20]
 801e69c:	681b      	ldr	r3, [r3, #0]
 801e69e:	430a      	orrs	r2, r1
 801e6a0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801e6a2:	697b      	ldr	r3, [r7, #20]
 801e6a4:	681b      	ldr	r3, [r3, #0]
 801e6a6:	4aa6      	ldr	r2, [pc, #664]	; (801e940 <UART_SetConfig+0x334>)
 801e6a8:	4293      	cmp	r3, r2
 801e6aa:	d177      	bne.n	801e79c <UART_SetConfig+0x190>
 801e6ac:	4ba5      	ldr	r3, [pc, #660]	; (801e944 <UART_SetConfig+0x338>)
 801e6ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801e6b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801e6b4:	2b28      	cmp	r3, #40	; 0x28
 801e6b6:	d86d      	bhi.n	801e794 <UART_SetConfig+0x188>
 801e6b8:	a201      	add	r2, pc, #4	; (adr r2, 801e6c0 <UART_SetConfig+0xb4>)
 801e6ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e6be:	bf00      	nop
 801e6c0:	0801e765 	.word	0x0801e765
 801e6c4:	0801e795 	.word	0x0801e795
 801e6c8:	0801e795 	.word	0x0801e795
 801e6cc:	0801e795 	.word	0x0801e795
 801e6d0:	0801e795 	.word	0x0801e795
 801e6d4:	0801e795 	.word	0x0801e795
 801e6d8:	0801e795 	.word	0x0801e795
 801e6dc:	0801e795 	.word	0x0801e795
 801e6e0:	0801e76d 	.word	0x0801e76d
 801e6e4:	0801e795 	.word	0x0801e795
 801e6e8:	0801e795 	.word	0x0801e795
 801e6ec:	0801e795 	.word	0x0801e795
 801e6f0:	0801e795 	.word	0x0801e795
 801e6f4:	0801e795 	.word	0x0801e795
 801e6f8:	0801e795 	.word	0x0801e795
 801e6fc:	0801e795 	.word	0x0801e795
 801e700:	0801e775 	.word	0x0801e775
 801e704:	0801e795 	.word	0x0801e795
 801e708:	0801e795 	.word	0x0801e795
 801e70c:	0801e795 	.word	0x0801e795
 801e710:	0801e795 	.word	0x0801e795
 801e714:	0801e795 	.word	0x0801e795
 801e718:	0801e795 	.word	0x0801e795
 801e71c:	0801e795 	.word	0x0801e795
 801e720:	0801e77d 	.word	0x0801e77d
 801e724:	0801e795 	.word	0x0801e795
 801e728:	0801e795 	.word	0x0801e795
 801e72c:	0801e795 	.word	0x0801e795
 801e730:	0801e795 	.word	0x0801e795
 801e734:	0801e795 	.word	0x0801e795
 801e738:	0801e795 	.word	0x0801e795
 801e73c:	0801e795 	.word	0x0801e795
 801e740:	0801e785 	.word	0x0801e785
 801e744:	0801e795 	.word	0x0801e795
 801e748:	0801e795 	.word	0x0801e795
 801e74c:	0801e795 	.word	0x0801e795
 801e750:	0801e795 	.word	0x0801e795
 801e754:	0801e795 	.word	0x0801e795
 801e758:	0801e795 	.word	0x0801e795
 801e75c:	0801e795 	.word	0x0801e795
 801e760:	0801e78d 	.word	0x0801e78d
 801e764:	2301      	movs	r3, #1
 801e766:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801e76a:	e222      	b.n	801ebb2 <UART_SetConfig+0x5a6>
 801e76c:	2304      	movs	r3, #4
 801e76e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801e772:	e21e      	b.n	801ebb2 <UART_SetConfig+0x5a6>
 801e774:	2308      	movs	r3, #8
 801e776:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801e77a:	e21a      	b.n	801ebb2 <UART_SetConfig+0x5a6>
 801e77c:	2310      	movs	r3, #16
 801e77e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801e782:	e216      	b.n	801ebb2 <UART_SetConfig+0x5a6>
 801e784:	2320      	movs	r3, #32
 801e786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801e78a:	e212      	b.n	801ebb2 <UART_SetConfig+0x5a6>
 801e78c:	2340      	movs	r3, #64	; 0x40
 801e78e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801e792:	e20e      	b.n	801ebb2 <UART_SetConfig+0x5a6>
 801e794:	2380      	movs	r3, #128	; 0x80
 801e796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801e79a:	e20a      	b.n	801ebb2 <UART_SetConfig+0x5a6>
 801e79c:	697b      	ldr	r3, [r7, #20]
 801e79e:	681b      	ldr	r3, [r3, #0]
 801e7a0:	4a69      	ldr	r2, [pc, #420]	; (801e948 <UART_SetConfig+0x33c>)
 801e7a2:	4293      	cmp	r3, r2
 801e7a4:	d130      	bne.n	801e808 <UART_SetConfig+0x1fc>
 801e7a6:	4b67      	ldr	r3, [pc, #412]	; (801e944 <UART_SetConfig+0x338>)
 801e7a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801e7aa:	f003 0307 	and.w	r3, r3, #7
 801e7ae:	2b05      	cmp	r3, #5
 801e7b0:	d826      	bhi.n	801e800 <UART_SetConfig+0x1f4>
 801e7b2:	a201      	add	r2, pc, #4	; (adr r2, 801e7b8 <UART_SetConfig+0x1ac>)
 801e7b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e7b8:	0801e7d1 	.word	0x0801e7d1
 801e7bc:	0801e7d9 	.word	0x0801e7d9
 801e7c0:	0801e7e1 	.word	0x0801e7e1
 801e7c4:	0801e7e9 	.word	0x0801e7e9
 801e7c8:	0801e7f1 	.word	0x0801e7f1
 801e7cc:	0801e7f9 	.word	0x0801e7f9
 801e7d0:	2300      	movs	r3, #0
 801e7d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801e7d6:	e1ec      	b.n	801ebb2 <UART_SetConfig+0x5a6>
 801e7d8:	2304      	movs	r3, #4
 801e7da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801e7de:	e1e8      	b.n	801ebb2 <UART_SetConfig+0x5a6>
 801e7e0:	2308      	movs	r3, #8
 801e7e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801e7e6:	e1e4      	b.n	801ebb2 <UART_SetConfig+0x5a6>
 801e7e8:	2310      	movs	r3, #16
 801e7ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801e7ee:	e1e0      	b.n	801ebb2 <UART_SetConfig+0x5a6>
 801e7f0:	2320      	movs	r3, #32
 801e7f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801e7f6:	e1dc      	b.n	801ebb2 <UART_SetConfig+0x5a6>
 801e7f8:	2340      	movs	r3, #64	; 0x40
 801e7fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801e7fe:	e1d8      	b.n	801ebb2 <UART_SetConfig+0x5a6>
 801e800:	2380      	movs	r3, #128	; 0x80
 801e802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801e806:	e1d4      	b.n	801ebb2 <UART_SetConfig+0x5a6>
 801e808:	697b      	ldr	r3, [r7, #20]
 801e80a:	681b      	ldr	r3, [r3, #0]
 801e80c:	4a4f      	ldr	r2, [pc, #316]	; (801e94c <UART_SetConfig+0x340>)
 801e80e:	4293      	cmp	r3, r2
 801e810:	d130      	bne.n	801e874 <UART_SetConfig+0x268>
 801e812:	4b4c      	ldr	r3, [pc, #304]	; (801e944 <UART_SetConfig+0x338>)
 801e814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801e816:	f003 0307 	and.w	r3, r3, #7
 801e81a:	2b05      	cmp	r3, #5
 801e81c:	d826      	bhi.n	801e86c <UART_SetConfig+0x260>
 801e81e:	a201      	add	r2, pc, #4	; (adr r2, 801e824 <UART_SetConfig+0x218>)
 801e820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e824:	0801e83d 	.word	0x0801e83d
 801e828:	0801e845 	.word	0x0801e845
 801e82c:	0801e84d 	.word	0x0801e84d
 801e830:	0801e855 	.word	0x0801e855
 801e834:	0801e85d 	.word	0x0801e85d
 801e838:	0801e865 	.word	0x0801e865
 801e83c:	2300      	movs	r3, #0
 801e83e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801e842:	e1b6      	b.n	801ebb2 <UART_SetConfig+0x5a6>
 801e844:	2304      	movs	r3, #4
 801e846:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801e84a:	e1b2      	b.n	801ebb2 <UART_SetConfig+0x5a6>
 801e84c:	2308      	movs	r3, #8
 801e84e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801e852:	e1ae      	b.n	801ebb2 <UART_SetConfig+0x5a6>
 801e854:	2310      	movs	r3, #16
 801e856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801e85a:	e1aa      	b.n	801ebb2 <UART_SetConfig+0x5a6>
 801e85c:	2320      	movs	r3, #32
 801e85e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801e862:	e1a6      	b.n	801ebb2 <UART_SetConfig+0x5a6>
 801e864:	2340      	movs	r3, #64	; 0x40
 801e866:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801e86a:	e1a2      	b.n	801ebb2 <UART_SetConfig+0x5a6>
 801e86c:	2380      	movs	r3, #128	; 0x80
 801e86e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801e872:	e19e      	b.n	801ebb2 <UART_SetConfig+0x5a6>
 801e874:	697b      	ldr	r3, [r7, #20]
 801e876:	681b      	ldr	r3, [r3, #0]
 801e878:	4a35      	ldr	r2, [pc, #212]	; (801e950 <UART_SetConfig+0x344>)
 801e87a:	4293      	cmp	r3, r2
 801e87c:	d130      	bne.n	801e8e0 <UART_SetConfig+0x2d4>
 801e87e:	4b31      	ldr	r3, [pc, #196]	; (801e944 <UART_SetConfig+0x338>)
 801e880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801e882:	f003 0307 	and.w	r3, r3, #7
 801e886:	2b05      	cmp	r3, #5
 801e888:	d826      	bhi.n	801e8d8 <UART_SetConfig+0x2cc>
 801e88a:	a201      	add	r2, pc, #4	; (adr r2, 801e890 <UART_SetConfig+0x284>)
 801e88c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e890:	0801e8a9 	.word	0x0801e8a9
 801e894:	0801e8b1 	.word	0x0801e8b1
 801e898:	0801e8b9 	.word	0x0801e8b9
 801e89c:	0801e8c1 	.word	0x0801e8c1
 801e8a0:	0801e8c9 	.word	0x0801e8c9
 801e8a4:	0801e8d1 	.word	0x0801e8d1
 801e8a8:	2300      	movs	r3, #0
 801e8aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801e8ae:	e180      	b.n	801ebb2 <UART_SetConfig+0x5a6>
 801e8b0:	2304      	movs	r3, #4
 801e8b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801e8b6:	e17c      	b.n	801ebb2 <UART_SetConfig+0x5a6>
 801e8b8:	2308      	movs	r3, #8
 801e8ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801e8be:	e178      	b.n	801ebb2 <UART_SetConfig+0x5a6>
 801e8c0:	2310      	movs	r3, #16
 801e8c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801e8c6:	e174      	b.n	801ebb2 <UART_SetConfig+0x5a6>
 801e8c8:	2320      	movs	r3, #32
 801e8ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801e8ce:	e170      	b.n	801ebb2 <UART_SetConfig+0x5a6>
 801e8d0:	2340      	movs	r3, #64	; 0x40
 801e8d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801e8d6:	e16c      	b.n	801ebb2 <UART_SetConfig+0x5a6>
 801e8d8:	2380      	movs	r3, #128	; 0x80
 801e8da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801e8de:	e168      	b.n	801ebb2 <UART_SetConfig+0x5a6>
 801e8e0:	697b      	ldr	r3, [r7, #20]
 801e8e2:	681b      	ldr	r3, [r3, #0]
 801e8e4:	4a1b      	ldr	r2, [pc, #108]	; (801e954 <UART_SetConfig+0x348>)
 801e8e6:	4293      	cmp	r3, r2
 801e8e8:	d142      	bne.n	801e970 <UART_SetConfig+0x364>
 801e8ea:	4b16      	ldr	r3, [pc, #88]	; (801e944 <UART_SetConfig+0x338>)
 801e8ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801e8ee:	f003 0307 	and.w	r3, r3, #7
 801e8f2:	2b05      	cmp	r3, #5
 801e8f4:	d838      	bhi.n	801e968 <UART_SetConfig+0x35c>
 801e8f6:	a201      	add	r2, pc, #4	; (adr r2, 801e8fc <UART_SetConfig+0x2f0>)
 801e8f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e8fc:	0801e915 	.word	0x0801e915
 801e900:	0801e91d 	.word	0x0801e91d
 801e904:	0801e925 	.word	0x0801e925
 801e908:	0801e92d 	.word	0x0801e92d
 801e90c:	0801e959 	.word	0x0801e959
 801e910:	0801e961 	.word	0x0801e961
 801e914:	2300      	movs	r3, #0
 801e916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801e91a:	e14a      	b.n	801ebb2 <UART_SetConfig+0x5a6>
 801e91c:	2304      	movs	r3, #4
 801e91e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801e922:	e146      	b.n	801ebb2 <UART_SetConfig+0x5a6>
 801e924:	2308      	movs	r3, #8
 801e926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801e92a:	e142      	b.n	801ebb2 <UART_SetConfig+0x5a6>
 801e92c:	2310      	movs	r3, #16
 801e92e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801e932:	e13e      	b.n	801ebb2 <UART_SetConfig+0x5a6>
 801e934:	cfff69f3 	.word	0xcfff69f3
 801e938:	58000c00 	.word	0x58000c00
 801e93c:	11fff4ff 	.word	0x11fff4ff
 801e940:	40011000 	.word	0x40011000
 801e944:	58024400 	.word	0x58024400
 801e948:	40004400 	.word	0x40004400
 801e94c:	40004800 	.word	0x40004800
 801e950:	40004c00 	.word	0x40004c00
 801e954:	40005000 	.word	0x40005000
 801e958:	2320      	movs	r3, #32
 801e95a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801e95e:	e128      	b.n	801ebb2 <UART_SetConfig+0x5a6>
 801e960:	2340      	movs	r3, #64	; 0x40
 801e962:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801e966:	e124      	b.n	801ebb2 <UART_SetConfig+0x5a6>
 801e968:	2380      	movs	r3, #128	; 0x80
 801e96a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801e96e:	e120      	b.n	801ebb2 <UART_SetConfig+0x5a6>
 801e970:	697b      	ldr	r3, [r7, #20]
 801e972:	681b      	ldr	r3, [r3, #0]
 801e974:	4acb      	ldr	r2, [pc, #812]	; (801eca4 <UART_SetConfig+0x698>)
 801e976:	4293      	cmp	r3, r2
 801e978:	d176      	bne.n	801ea68 <UART_SetConfig+0x45c>
 801e97a:	4bcb      	ldr	r3, [pc, #812]	; (801eca8 <UART_SetConfig+0x69c>)
 801e97c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801e97e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801e982:	2b28      	cmp	r3, #40	; 0x28
 801e984:	d86c      	bhi.n	801ea60 <UART_SetConfig+0x454>
 801e986:	a201      	add	r2, pc, #4	; (adr r2, 801e98c <UART_SetConfig+0x380>)
 801e988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e98c:	0801ea31 	.word	0x0801ea31
 801e990:	0801ea61 	.word	0x0801ea61
 801e994:	0801ea61 	.word	0x0801ea61
 801e998:	0801ea61 	.word	0x0801ea61
 801e99c:	0801ea61 	.word	0x0801ea61
 801e9a0:	0801ea61 	.word	0x0801ea61
 801e9a4:	0801ea61 	.word	0x0801ea61
 801e9a8:	0801ea61 	.word	0x0801ea61
 801e9ac:	0801ea39 	.word	0x0801ea39
 801e9b0:	0801ea61 	.word	0x0801ea61
 801e9b4:	0801ea61 	.word	0x0801ea61
 801e9b8:	0801ea61 	.word	0x0801ea61
 801e9bc:	0801ea61 	.word	0x0801ea61
 801e9c0:	0801ea61 	.word	0x0801ea61
 801e9c4:	0801ea61 	.word	0x0801ea61
 801e9c8:	0801ea61 	.word	0x0801ea61
 801e9cc:	0801ea41 	.word	0x0801ea41
 801e9d0:	0801ea61 	.word	0x0801ea61
 801e9d4:	0801ea61 	.word	0x0801ea61
 801e9d8:	0801ea61 	.word	0x0801ea61
 801e9dc:	0801ea61 	.word	0x0801ea61
 801e9e0:	0801ea61 	.word	0x0801ea61
 801e9e4:	0801ea61 	.word	0x0801ea61
 801e9e8:	0801ea61 	.word	0x0801ea61
 801e9ec:	0801ea49 	.word	0x0801ea49
 801e9f0:	0801ea61 	.word	0x0801ea61
 801e9f4:	0801ea61 	.word	0x0801ea61
 801e9f8:	0801ea61 	.word	0x0801ea61
 801e9fc:	0801ea61 	.word	0x0801ea61
 801ea00:	0801ea61 	.word	0x0801ea61
 801ea04:	0801ea61 	.word	0x0801ea61
 801ea08:	0801ea61 	.word	0x0801ea61
 801ea0c:	0801ea51 	.word	0x0801ea51
 801ea10:	0801ea61 	.word	0x0801ea61
 801ea14:	0801ea61 	.word	0x0801ea61
 801ea18:	0801ea61 	.word	0x0801ea61
 801ea1c:	0801ea61 	.word	0x0801ea61
 801ea20:	0801ea61 	.word	0x0801ea61
 801ea24:	0801ea61 	.word	0x0801ea61
 801ea28:	0801ea61 	.word	0x0801ea61
 801ea2c:	0801ea59 	.word	0x0801ea59
 801ea30:	2301      	movs	r3, #1
 801ea32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801ea36:	e0bc      	b.n	801ebb2 <UART_SetConfig+0x5a6>
 801ea38:	2304      	movs	r3, #4
 801ea3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801ea3e:	e0b8      	b.n	801ebb2 <UART_SetConfig+0x5a6>
 801ea40:	2308      	movs	r3, #8
 801ea42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801ea46:	e0b4      	b.n	801ebb2 <UART_SetConfig+0x5a6>
 801ea48:	2310      	movs	r3, #16
 801ea4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801ea4e:	e0b0      	b.n	801ebb2 <UART_SetConfig+0x5a6>
 801ea50:	2320      	movs	r3, #32
 801ea52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801ea56:	e0ac      	b.n	801ebb2 <UART_SetConfig+0x5a6>
 801ea58:	2340      	movs	r3, #64	; 0x40
 801ea5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801ea5e:	e0a8      	b.n	801ebb2 <UART_SetConfig+0x5a6>
 801ea60:	2380      	movs	r3, #128	; 0x80
 801ea62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801ea66:	e0a4      	b.n	801ebb2 <UART_SetConfig+0x5a6>
 801ea68:	697b      	ldr	r3, [r7, #20]
 801ea6a:	681b      	ldr	r3, [r3, #0]
 801ea6c:	4a8f      	ldr	r2, [pc, #572]	; (801ecac <UART_SetConfig+0x6a0>)
 801ea6e:	4293      	cmp	r3, r2
 801ea70:	d130      	bne.n	801ead4 <UART_SetConfig+0x4c8>
 801ea72:	4b8d      	ldr	r3, [pc, #564]	; (801eca8 <UART_SetConfig+0x69c>)
 801ea74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ea76:	f003 0307 	and.w	r3, r3, #7
 801ea7a:	2b05      	cmp	r3, #5
 801ea7c:	d826      	bhi.n	801eacc <UART_SetConfig+0x4c0>
 801ea7e:	a201      	add	r2, pc, #4	; (adr r2, 801ea84 <UART_SetConfig+0x478>)
 801ea80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ea84:	0801ea9d 	.word	0x0801ea9d
 801ea88:	0801eaa5 	.word	0x0801eaa5
 801ea8c:	0801eaad 	.word	0x0801eaad
 801ea90:	0801eab5 	.word	0x0801eab5
 801ea94:	0801eabd 	.word	0x0801eabd
 801ea98:	0801eac5 	.word	0x0801eac5
 801ea9c:	2300      	movs	r3, #0
 801ea9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801eaa2:	e086      	b.n	801ebb2 <UART_SetConfig+0x5a6>
 801eaa4:	2304      	movs	r3, #4
 801eaa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801eaaa:	e082      	b.n	801ebb2 <UART_SetConfig+0x5a6>
 801eaac:	2308      	movs	r3, #8
 801eaae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801eab2:	e07e      	b.n	801ebb2 <UART_SetConfig+0x5a6>
 801eab4:	2310      	movs	r3, #16
 801eab6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801eaba:	e07a      	b.n	801ebb2 <UART_SetConfig+0x5a6>
 801eabc:	2320      	movs	r3, #32
 801eabe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801eac2:	e076      	b.n	801ebb2 <UART_SetConfig+0x5a6>
 801eac4:	2340      	movs	r3, #64	; 0x40
 801eac6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801eaca:	e072      	b.n	801ebb2 <UART_SetConfig+0x5a6>
 801eacc:	2380      	movs	r3, #128	; 0x80
 801eace:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801ead2:	e06e      	b.n	801ebb2 <UART_SetConfig+0x5a6>
 801ead4:	697b      	ldr	r3, [r7, #20]
 801ead6:	681b      	ldr	r3, [r3, #0]
 801ead8:	4a75      	ldr	r2, [pc, #468]	; (801ecb0 <UART_SetConfig+0x6a4>)
 801eada:	4293      	cmp	r3, r2
 801eadc:	d130      	bne.n	801eb40 <UART_SetConfig+0x534>
 801eade:	4b72      	ldr	r3, [pc, #456]	; (801eca8 <UART_SetConfig+0x69c>)
 801eae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801eae2:	f003 0307 	and.w	r3, r3, #7
 801eae6:	2b05      	cmp	r3, #5
 801eae8:	d826      	bhi.n	801eb38 <UART_SetConfig+0x52c>
 801eaea:	a201      	add	r2, pc, #4	; (adr r2, 801eaf0 <UART_SetConfig+0x4e4>)
 801eaec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801eaf0:	0801eb09 	.word	0x0801eb09
 801eaf4:	0801eb11 	.word	0x0801eb11
 801eaf8:	0801eb19 	.word	0x0801eb19
 801eafc:	0801eb21 	.word	0x0801eb21
 801eb00:	0801eb29 	.word	0x0801eb29
 801eb04:	0801eb31 	.word	0x0801eb31
 801eb08:	2300      	movs	r3, #0
 801eb0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801eb0e:	e050      	b.n	801ebb2 <UART_SetConfig+0x5a6>
 801eb10:	2304      	movs	r3, #4
 801eb12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801eb16:	e04c      	b.n	801ebb2 <UART_SetConfig+0x5a6>
 801eb18:	2308      	movs	r3, #8
 801eb1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801eb1e:	e048      	b.n	801ebb2 <UART_SetConfig+0x5a6>
 801eb20:	2310      	movs	r3, #16
 801eb22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801eb26:	e044      	b.n	801ebb2 <UART_SetConfig+0x5a6>
 801eb28:	2320      	movs	r3, #32
 801eb2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801eb2e:	e040      	b.n	801ebb2 <UART_SetConfig+0x5a6>
 801eb30:	2340      	movs	r3, #64	; 0x40
 801eb32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801eb36:	e03c      	b.n	801ebb2 <UART_SetConfig+0x5a6>
 801eb38:	2380      	movs	r3, #128	; 0x80
 801eb3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801eb3e:	e038      	b.n	801ebb2 <UART_SetConfig+0x5a6>
 801eb40:	697b      	ldr	r3, [r7, #20]
 801eb42:	681b      	ldr	r3, [r3, #0]
 801eb44:	4a5b      	ldr	r2, [pc, #364]	; (801ecb4 <UART_SetConfig+0x6a8>)
 801eb46:	4293      	cmp	r3, r2
 801eb48:	d130      	bne.n	801ebac <UART_SetConfig+0x5a0>
 801eb4a:	4b57      	ldr	r3, [pc, #348]	; (801eca8 <UART_SetConfig+0x69c>)
 801eb4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801eb4e:	f003 0307 	and.w	r3, r3, #7
 801eb52:	2b05      	cmp	r3, #5
 801eb54:	d826      	bhi.n	801eba4 <UART_SetConfig+0x598>
 801eb56:	a201      	add	r2, pc, #4	; (adr r2, 801eb5c <UART_SetConfig+0x550>)
 801eb58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801eb5c:	0801eb75 	.word	0x0801eb75
 801eb60:	0801eb7d 	.word	0x0801eb7d
 801eb64:	0801eb85 	.word	0x0801eb85
 801eb68:	0801eb8d 	.word	0x0801eb8d
 801eb6c:	0801eb95 	.word	0x0801eb95
 801eb70:	0801eb9d 	.word	0x0801eb9d
 801eb74:	2302      	movs	r3, #2
 801eb76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801eb7a:	e01a      	b.n	801ebb2 <UART_SetConfig+0x5a6>
 801eb7c:	2304      	movs	r3, #4
 801eb7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801eb82:	e016      	b.n	801ebb2 <UART_SetConfig+0x5a6>
 801eb84:	2308      	movs	r3, #8
 801eb86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801eb8a:	e012      	b.n	801ebb2 <UART_SetConfig+0x5a6>
 801eb8c:	2310      	movs	r3, #16
 801eb8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801eb92:	e00e      	b.n	801ebb2 <UART_SetConfig+0x5a6>
 801eb94:	2320      	movs	r3, #32
 801eb96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801eb9a:	e00a      	b.n	801ebb2 <UART_SetConfig+0x5a6>
 801eb9c:	2340      	movs	r3, #64	; 0x40
 801eb9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801eba2:	e006      	b.n	801ebb2 <UART_SetConfig+0x5a6>
 801eba4:	2380      	movs	r3, #128	; 0x80
 801eba6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801ebaa:	e002      	b.n	801ebb2 <UART_SetConfig+0x5a6>
 801ebac:	2380      	movs	r3, #128	; 0x80
 801ebae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801ebb2:	697b      	ldr	r3, [r7, #20]
 801ebb4:	681b      	ldr	r3, [r3, #0]
 801ebb6:	4a3f      	ldr	r2, [pc, #252]	; (801ecb4 <UART_SetConfig+0x6a8>)
 801ebb8:	4293      	cmp	r3, r2
 801ebba:	f040 80f8 	bne.w	801edae <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801ebbe:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801ebc2:	2b20      	cmp	r3, #32
 801ebc4:	dc46      	bgt.n	801ec54 <UART_SetConfig+0x648>
 801ebc6:	2b02      	cmp	r3, #2
 801ebc8:	f2c0 8082 	blt.w	801ecd0 <UART_SetConfig+0x6c4>
 801ebcc:	3b02      	subs	r3, #2
 801ebce:	2b1e      	cmp	r3, #30
 801ebd0:	d87e      	bhi.n	801ecd0 <UART_SetConfig+0x6c4>
 801ebd2:	a201      	add	r2, pc, #4	; (adr r2, 801ebd8 <UART_SetConfig+0x5cc>)
 801ebd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ebd8:	0801ec5b 	.word	0x0801ec5b
 801ebdc:	0801ecd1 	.word	0x0801ecd1
 801ebe0:	0801ec63 	.word	0x0801ec63
 801ebe4:	0801ecd1 	.word	0x0801ecd1
 801ebe8:	0801ecd1 	.word	0x0801ecd1
 801ebec:	0801ecd1 	.word	0x0801ecd1
 801ebf0:	0801ec73 	.word	0x0801ec73
 801ebf4:	0801ecd1 	.word	0x0801ecd1
 801ebf8:	0801ecd1 	.word	0x0801ecd1
 801ebfc:	0801ecd1 	.word	0x0801ecd1
 801ec00:	0801ecd1 	.word	0x0801ecd1
 801ec04:	0801ecd1 	.word	0x0801ecd1
 801ec08:	0801ecd1 	.word	0x0801ecd1
 801ec0c:	0801ecd1 	.word	0x0801ecd1
 801ec10:	0801ec83 	.word	0x0801ec83
 801ec14:	0801ecd1 	.word	0x0801ecd1
 801ec18:	0801ecd1 	.word	0x0801ecd1
 801ec1c:	0801ecd1 	.word	0x0801ecd1
 801ec20:	0801ecd1 	.word	0x0801ecd1
 801ec24:	0801ecd1 	.word	0x0801ecd1
 801ec28:	0801ecd1 	.word	0x0801ecd1
 801ec2c:	0801ecd1 	.word	0x0801ecd1
 801ec30:	0801ecd1 	.word	0x0801ecd1
 801ec34:	0801ecd1 	.word	0x0801ecd1
 801ec38:	0801ecd1 	.word	0x0801ecd1
 801ec3c:	0801ecd1 	.word	0x0801ecd1
 801ec40:	0801ecd1 	.word	0x0801ecd1
 801ec44:	0801ecd1 	.word	0x0801ecd1
 801ec48:	0801ecd1 	.word	0x0801ecd1
 801ec4c:	0801ecd1 	.word	0x0801ecd1
 801ec50:	0801ecc3 	.word	0x0801ecc3
 801ec54:	2b40      	cmp	r3, #64	; 0x40
 801ec56:	d037      	beq.n	801ecc8 <UART_SetConfig+0x6bc>
 801ec58:	e03a      	b.n	801ecd0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 801ec5a:	f7fe f80b 	bl	801cc74 <HAL_RCCEx_GetD3PCLK1Freq>
 801ec5e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801ec60:	e03c      	b.n	801ecdc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801ec62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801ec66:	4618      	mov	r0, r3
 801ec68:	f7fe f81a 	bl	801cca0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801ec6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ec6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801ec70:	e034      	b.n	801ecdc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801ec72:	f107 0318 	add.w	r3, r7, #24
 801ec76:	4618      	mov	r0, r3
 801ec78:	f7fe f966 	bl	801cf48 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801ec7c:	69fb      	ldr	r3, [r7, #28]
 801ec7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801ec80:	e02c      	b.n	801ecdc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801ec82:	4b09      	ldr	r3, [pc, #36]	; (801eca8 <UART_SetConfig+0x69c>)
 801ec84:	681b      	ldr	r3, [r3, #0]
 801ec86:	f003 0320 	and.w	r3, r3, #32
 801ec8a:	2b00      	cmp	r3, #0
 801ec8c:	d016      	beq.n	801ecbc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801ec8e:	4b06      	ldr	r3, [pc, #24]	; (801eca8 <UART_SetConfig+0x69c>)
 801ec90:	681b      	ldr	r3, [r3, #0]
 801ec92:	08db      	lsrs	r3, r3, #3
 801ec94:	f003 0303 	and.w	r3, r3, #3
 801ec98:	4a07      	ldr	r2, [pc, #28]	; (801ecb8 <UART_SetConfig+0x6ac>)
 801ec9a:	fa22 f303 	lsr.w	r3, r2, r3
 801ec9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801eca0:	e01c      	b.n	801ecdc <UART_SetConfig+0x6d0>
 801eca2:	bf00      	nop
 801eca4:	40011400 	.word	0x40011400
 801eca8:	58024400 	.word	0x58024400
 801ecac:	40007800 	.word	0x40007800
 801ecb0:	40007c00 	.word	0x40007c00
 801ecb4:	58000c00 	.word	0x58000c00
 801ecb8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 801ecbc:	4b9d      	ldr	r3, [pc, #628]	; (801ef34 <UART_SetConfig+0x928>)
 801ecbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801ecc0:	e00c      	b.n	801ecdc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801ecc2:	4b9d      	ldr	r3, [pc, #628]	; (801ef38 <UART_SetConfig+0x92c>)
 801ecc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801ecc6:	e009      	b.n	801ecdc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801ecc8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801eccc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801ecce:	e005      	b.n	801ecdc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 801ecd0:	2300      	movs	r3, #0
 801ecd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801ecd4:	2301      	movs	r3, #1
 801ecd6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801ecda:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801ecdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ecde:	2b00      	cmp	r3, #0
 801ece0:	f000 81de 	beq.w	801f0a0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801ece4:	697b      	ldr	r3, [r7, #20]
 801ece6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ece8:	4a94      	ldr	r2, [pc, #592]	; (801ef3c <UART_SetConfig+0x930>)
 801ecea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801ecee:	461a      	mov	r2, r3
 801ecf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ecf2:	fbb3 f3f2 	udiv	r3, r3, r2
 801ecf6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801ecf8:	697b      	ldr	r3, [r7, #20]
 801ecfa:	685a      	ldr	r2, [r3, #4]
 801ecfc:	4613      	mov	r3, r2
 801ecfe:	005b      	lsls	r3, r3, #1
 801ed00:	4413      	add	r3, r2
 801ed02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ed04:	429a      	cmp	r2, r3
 801ed06:	d305      	bcc.n	801ed14 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801ed08:	697b      	ldr	r3, [r7, #20]
 801ed0a:	685b      	ldr	r3, [r3, #4]
 801ed0c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801ed0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ed10:	429a      	cmp	r2, r3
 801ed12:	d903      	bls.n	801ed1c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 801ed14:	2301      	movs	r3, #1
 801ed16:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801ed1a:	e1c1      	b.n	801f0a0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801ed1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ed1e:	2200      	movs	r2, #0
 801ed20:	60bb      	str	r3, [r7, #8]
 801ed22:	60fa      	str	r2, [r7, #12]
 801ed24:	697b      	ldr	r3, [r7, #20]
 801ed26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ed28:	4a84      	ldr	r2, [pc, #528]	; (801ef3c <UART_SetConfig+0x930>)
 801ed2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801ed2e:	b29b      	uxth	r3, r3
 801ed30:	2200      	movs	r2, #0
 801ed32:	603b      	str	r3, [r7, #0]
 801ed34:	607a      	str	r2, [r7, #4]
 801ed36:	e9d7 2300 	ldrd	r2, r3, [r7]
 801ed3a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801ed3e:	f7e1 fd3b 	bl	80007b8 <__aeabi_uldivmod>
 801ed42:	4602      	mov	r2, r0
 801ed44:	460b      	mov	r3, r1
 801ed46:	4610      	mov	r0, r2
 801ed48:	4619      	mov	r1, r3
 801ed4a:	f04f 0200 	mov.w	r2, #0
 801ed4e:	f04f 0300 	mov.w	r3, #0
 801ed52:	020b      	lsls	r3, r1, #8
 801ed54:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801ed58:	0202      	lsls	r2, r0, #8
 801ed5a:	6979      	ldr	r1, [r7, #20]
 801ed5c:	6849      	ldr	r1, [r1, #4]
 801ed5e:	0849      	lsrs	r1, r1, #1
 801ed60:	2000      	movs	r0, #0
 801ed62:	460c      	mov	r4, r1
 801ed64:	4605      	mov	r5, r0
 801ed66:	eb12 0804 	adds.w	r8, r2, r4
 801ed6a:	eb43 0905 	adc.w	r9, r3, r5
 801ed6e:	697b      	ldr	r3, [r7, #20]
 801ed70:	685b      	ldr	r3, [r3, #4]
 801ed72:	2200      	movs	r2, #0
 801ed74:	469a      	mov	sl, r3
 801ed76:	4693      	mov	fp, r2
 801ed78:	4652      	mov	r2, sl
 801ed7a:	465b      	mov	r3, fp
 801ed7c:	4640      	mov	r0, r8
 801ed7e:	4649      	mov	r1, r9
 801ed80:	f7e1 fd1a 	bl	80007b8 <__aeabi_uldivmod>
 801ed84:	4602      	mov	r2, r0
 801ed86:	460b      	mov	r3, r1
 801ed88:	4613      	mov	r3, r2
 801ed8a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801ed8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ed8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801ed92:	d308      	bcc.n	801eda6 <UART_SetConfig+0x79a>
 801ed94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ed96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801ed9a:	d204      	bcs.n	801eda6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 801ed9c:	697b      	ldr	r3, [r7, #20]
 801ed9e:	681b      	ldr	r3, [r3, #0]
 801eda0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801eda2:	60da      	str	r2, [r3, #12]
 801eda4:	e17c      	b.n	801f0a0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 801eda6:	2301      	movs	r3, #1
 801eda8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801edac:	e178      	b.n	801f0a0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801edae:	697b      	ldr	r3, [r7, #20]
 801edb0:	69db      	ldr	r3, [r3, #28]
 801edb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801edb6:	f040 80c5 	bne.w	801ef44 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 801edba:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801edbe:	2b20      	cmp	r3, #32
 801edc0:	dc48      	bgt.n	801ee54 <UART_SetConfig+0x848>
 801edc2:	2b00      	cmp	r3, #0
 801edc4:	db7b      	blt.n	801eebe <UART_SetConfig+0x8b2>
 801edc6:	2b20      	cmp	r3, #32
 801edc8:	d879      	bhi.n	801eebe <UART_SetConfig+0x8b2>
 801edca:	a201      	add	r2, pc, #4	; (adr r2, 801edd0 <UART_SetConfig+0x7c4>)
 801edcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801edd0:	0801ee5b 	.word	0x0801ee5b
 801edd4:	0801ee63 	.word	0x0801ee63
 801edd8:	0801eebf 	.word	0x0801eebf
 801eddc:	0801eebf 	.word	0x0801eebf
 801ede0:	0801ee6b 	.word	0x0801ee6b
 801ede4:	0801eebf 	.word	0x0801eebf
 801ede8:	0801eebf 	.word	0x0801eebf
 801edec:	0801eebf 	.word	0x0801eebf
 801edf0:	0801ee7b 	.word	0x0801ee7b
 801edf4:	0801eebf 	.word	0x0801eebf
 801edf8:	0801eebf 	.word	0x0801eebf
 801edfc:	0801eebf 	.word	0x0801eebf
 801ee00:	0801eebf 	.word	0x0801eebf
 801ee04:	0801eebf 	.word	0x0801eebf
 801ee08:	0801eebf 	.word	0x0801eebf
 801ee0c:	0801eebf 	.word	0x0801eebf
 801ee10:	0801ee8b 	.word	0x0801ee8b
 801ee14:	0801eebf 	.word	0x0801eebf
 801ee18:	0801eebf 	.word	0x0801eebf
 801ee1c:	0801eebf 	.word	0x0801eebf
 801ee20:	0801eebf 	.word	0x0801eebf
 801ee24:	0801eebf 	.word	0x0801eebf
 801ee28:	0801eebf 	.word	0x0801eebf
 801ee2c:	0801eebf 	.word	0x0801eebf
 801ee30:	0801eebf 	.word	0x0801eebf
 801ee34:	0801eebf 	.word	0x0801eebf
 801ee38:	0801eebf 	.word	0x0801eebf
 801ee3c:	0801eebf 	.word	0x0801eebf
 801ee40:	0801eebf 	.word	0x0801eebf
 801ee44:	0801eebf 	.word	0x0801eebf
 801ee48:	0801eebf 	.word	0x0801eebf
 801ee4c:	0801eebf 	.word	0x0801eebf
 801ee50:	0801eeb1 	.word	0x0801eeb1
 801ee54:	2b40      	cmp	r3, #64	; 0x40
 801ee56:	d02e      	beq.n	801eeb6 <UART_SetConfig+0x8aa>
 801ee58:	e031      	b.n	801eebe <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801ee5a:	f7fc fcd5 	bl	801b808 <HAL_RCC_GetPCLK1Freq>
 801ee5e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801ee60:	e033      	b.n	801eeca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801ee62:	f7fc fce7 	bl	801b834 <HAL_RCC_GetPCLK2Freq>
 801ee66:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801ee68:	e02f      	b.n	801eeca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801ee6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801ee6e:	4618      	mov	r0, r3
 801ee70:	f7fd ff16 	bl	801cca0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801ee74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ee76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801ee78:	e027      	b.n	801eeca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801ee7a:	f107 0318 	add.w	r3, r7, #24
 801ee7e:	4618      	mov	r0, r3
 801ee80:	f7fe f862 	bl	801cf48 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801ee84:	69fb      	ldr	r3, [r7, #28]
 801ee86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801ee88:	e01f      	b.n	801eeca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801ee8a:	4b2d      	ldr	r3, [pc, #180]	; (801ef40 <UART_SetConfig+0x934>)
 801ee8c:	681b      	ldr	r3, [r3, #0]
 801ee8e:	f003 0320 	and.w	r3, r3, #32
 801ee92:	2b00      	cmp	r3, #0
 801ee94:	d009      	beq.n	801eeaa <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801ee96:	4b2a      	ldr	r3, [pc, #168]	; (801ef40 <UART_SetConfig+0x934>)
 801ee98:	681b      	ldr	r3, [r3, #0]
 801ee9a:	08db      	lsrs	r3, r3, #3
 801ee9c:	f003 0303 	and.w	r3, r3, #3
 801eea0:	4a24      	ldr	r2, [pc, #144]	; (801ef34 <UART_SetConfig+0x928>)
 801eea2:	fa22 f303 	lsr.w	r3, r2, r3
 801eea6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801eea8:	e00f      	b.n	801eeca <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 801eeaa:	4b22      	ldr	r3, [pc, #136]	; (801ef34 <UART_SetConfig+0x928>)
 801eeac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801eeae:	e00c      	b.n	801eeca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801eeb0:	4b21      	ldr	r3, [pc, #132]	; (801ef38 <UART_SetConfig+0x92c>)
 801eeb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801eeb4:	e009      	b.n	801eeca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801eeb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801eeba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801eebc:	e005      	b.n	801eeca <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 801eebe:	2300      	movs	r3, #0
 801eec0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801eec2:	2301      	movs	r3, #1
 801eec4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801eec8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801eeca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801eecc:	2b00      	cmp	r3, #0
 801eece:	f000 80e7 	beq.w	801f0a0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801eed2:	697b      	ldr	r3, [r7, #20]
 801eed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801eed6:	4a19      	ldr	r2, [pc, #100]	; (801ef3c <UART_SetConfig+0x930>)
 801eed8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801eedc:	461a      	mov	r2, r3
 801eede:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801eee0:	fbb3 f3f2 	udiv	r3, r3, r2
 801eee4:	005a      	lsls	r2, r3, #1
 801eee6:	697b      	ldr	r3, [r7, #20]
 801eee8:	685b      	ldr	r3, [r3, #4]
 801eeea:	085b      	lsrs	r3, r3, #1
 801eeec:	441a      	add	r2, r3
 801eeee:	697b      	ldr	r3, [r7, #20]
 801eef0:	685b      	ldr	r3, [r3, #4]
 801eef2:	fbb2 f3f3 	udiv	r3, r2, r3
 801eef6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801eef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801eefa:	2b0f      	cmp	r3, #15
 801eefc:	d916      	bls.n	801ef2c <UART_SetConfig+0x920>
 801eefe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ef00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801ef04:	d212      	bcs.n	801ef2c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801ef06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ef08:	b29b      	uxth	r3, r3
 801ef0a:	f023 030f 	bic.w	r3, r3, #15
 801ef0e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801ef10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ef12:	085b      	lsrs	r3, r3, #1
 801ef14:	b29b      	uxth	r3, r3
 801ef16:	f003 0307 	and.w	r3, r3, #7
 801ef1a:	b29a      	uxth	r2, r3
 801ef1c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801ef1e:	4313      	orrs	r3, r2
 801ef20:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 801ef22:	697b      	ldr	r3, [r7, #20]
 801ef24:	681b      	ldr	r3, [r3, #0]
 801ef26:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801ef28:	60da      	str	r2, [r3, #12]
 801ef2a:	e0b9      	b.n	801f0a0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 801ef2c:	2301      	movs	r3, #1
 801ef2e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801ef32:	e0b5      	b.n	801f0a0 <UART_SetConfig+0xa94>
 801ef34:	03d09000 	.word	0x03d09000
 801ef38:	003d0900 	.word	0x003d0900
 801ef3c:	08072a28 	.word	0x08072a28
 801ef40:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 801ef44:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801ef48:	2b20      	cmp	r3, #32
 801ef4a:	dc49      	bgt.n	801efe0 <UART_SetConfig+0x9d4>
 801ef4c:	2b00      	cmp	r3, #0
 801ef4e:	db7c      	blt.n	801f04a <UART_SetConfig+0xa3e>
 801ef50:	2b20      	cmp	r3, #32
 801ef52:	d87a      	bhi.n	801f04a <UART_SetConfig+0xa3e>
 801ef54:	a201      	add	r2, pc, #4	; (adr r2, 801ef5c <UART_SetConfig+0x950>)
 801ef56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ef5a:	bf00      	nop
 801ef5c:	0801efe7 	.word	0x0801efe7
 801ef60:	0801efef 	.word	0x0801efef
 801ef64:	0801f04b 	.word	0x0801f04b
 801ef68:	0801f04b 	.word	0x0801f04b
 801ef6c:	0801eff7 	.word	0x0801eff7
 801ef70:	0801f04b 	.word	0x0801f04b
 801ef74:	0801f04b 	.word	0x0801f04b
 801ef78:	0801f04b 	.word	0x0801f04b
 801ef7c:	0801f007 	.word	0x0801f007
 801ef80:	0801f04b 	.word	0x0801f04b
 801ef84:	0801f04b 	.word	0x0801f04b
 801ef88:	0801f04b 	.word	0x0801f04b
 801ef8c:	0801f04b 	.word	0x0801f04b
 801ef90:	0801f04b 	.word	0x0801f04b
 801ef94:	0801f04b 	.word	0x0801f04b
 801ef98:	0801f04b 	.word	0x0801f04b
 801ef9c:	0801f017 	.word	0x0801f017
 801efa0:	0801f04b 	.word	0x0801f04b
 801efa4:	0801f04b 	.word	0x0801f04b
 801efa8:	0801f04b 	.word	0x0801f04b
 801efac:	0801f04b 	.word	0x0801f04b
 801efb0:	0801f04b 	.word	0x0801f04b
 801efb4:	0801f04b 	.word	0x0801f04b
 801efb8:	0801f04b 	.word	0x0801f04b
 801efbc:	0801f04b 	.word	0x0801f04b
 801efc0:	0801f04b 	.word	0x0801f04b
 801efc4:	0801f04b 	.word	0x0801f04b
 801efc8:	0801f04b 	.word	0x0801f04b
 801efcc:	0801f04b 	.word	0x0801f04b
 801efd0:	0801f04b 	.word	0x0801f04b
 801efd4:	0801f04b 	.word	0x0801f04b
 801efd8:	0801f04b 	.word	0x0801f04b
 801efdc:	0801f03d 	.word	0x0801f03d
 801efe0:	2b40      	cmp	r3, #64	; 0x40
 801efe2:	d02e      	beq.n	801f042 <UART_SetConfig+0xa36>
 801efe4:	e031      	b.n	801f04a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801efe6:	f7fc fc0f 	bl	801b808 <HAL_RCC_GetPCLK1Freq>
 801efea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801efec:	e033      	b.n	801f056 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801efee:	f7fc fc21 	bl	801b834 <HAL_RCC_GetPCLK2Freq>
 801eff2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801eff4:	e02f      	b.n	801f056 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801eff6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801effa:	4618      	mov	r0, r3
 801effc:	f7fd fe50 	bl	801cca0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801f000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f002:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801f004:	e027      	b.n	801f056 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801f006:	f107 0318 	add.w	r3, r7, #24
 801f00a:	4618      	mov	r0, r3
 801f00c:	f7fd ff9c 	bl	801cf48 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801f010:	69fb      	ldr	r3, [r7, #28]
 801f012:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801f014:	e01f      	b.n	801f056 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801f016:	4b2d      	ldr	r3, [pc, #180]	; (801f0cc <UART_SetConfig+0xac0>)
 801f018:	681b      	ldr	r3, [r3, #0]
 801f01a:	f003 0320 	and.w	r3, r3, #32
 801f01e:	2b00      	cmp	r3, #0
 801f020:	d009      	beq.n	801f036 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801f022:	4b2a      	ldr	r3, [pc, #168]	; (801f0cc <UART_SetConfig+0xac0>)
 801f024:	681b      	ldr	r3, [r3, #0]
 801f026:	08db      	lsrs	r3, r3, #3
 801f028:	f003 0303 	and.w	r3, r3, #3
 801f02c:	4a28      	ldr	r2, [pc, #160]	; (801f0d0 <UART_SetConfig+0xac4>)
 801f02e:	fa22 f303 	lsr.w	r3, r2, r3
 801f032:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801f034:	e00f      	b.n	801f056 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 801f036:	4b26      	ldr	r3, [pc, #152]	; (801f0d0 <UART_SetConfig+0xac4>)
 801f038:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801f03a:	e00c      	b.n	801f056 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801f03c:	4b25      	ldr	r3, [pc, #148]	; (801f0d4 <UART_SetConfig+0xac8>)
 801f03e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801f040:	e009      	b.n	801f056 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801f042:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801f046:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801f048:	e005      	b.n	801f056 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 801f04a:	2300      	movs	r3, #0
 801f04c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801f04e:	2301      	movs	r3, #1
 801f050:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801f054:	bf00      	nop
    }

    if (pclk != 0U)
 801f056:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f058:	2b00      	cmp	r3, #0
 801f05a:	d021      	beq.n	801f0a0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801f05c:	697b      	ldr	r3, [r7, #20]
 801f05e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f060:	4a1d      	ldr	r2, [pc, #116]	; (801f0d8 <UART_SetConfig+0xacc>)
 801f062:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801f066:	461a      	mov	r2, r3
 801f068:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f06a:	fbb3 f2f2 	udiv	r2, r3, r2
 801f06e:	697b      	ldr	r3, [r7, #20]
 801f070:	685b      	ldr	r3, [r3, #4]
 801f072:	085b      	lsrs	r3, r3, #1
 801f074:	441a      	add	r2, r3
 801f076:	697b      	ldr	r3, [r7, #20]
 801f078:	685b      	ldr	r3, [r3, #4]
 801f07a:	fbb2 f3f3 	udiv	r3, r2, r3
 801f07e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801f080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f082:	2b0f      	cmp	r3, #15
 801f084:	d909      	bls.n	801f09a <UART_SetConfig+0xa8e>
 801f086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f088:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801f08c:	d205      	bcs.n	801f09a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801f08e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f090:	b29a      	uxth	r2, r3
 801f092:	697b      	ldr	r3, [r7, #20]
 801f094:	681b      	ldr	r3, [r3, #0]
 801f096:	60da      	str	r2, [r3, #12]
 801f098:	e002      	b.n	801f0a0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 801f09a:	2301      	movs	r3, #1
 801f09c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801f0a0:	697b      	ldr	r3, [r7, #20]
 801f0a2:	2201      	movs	r2, #1
 801f0a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 801f0a8:	697b      	ldr	r3, [r7, #20]
 801f0aa:	2201      	movs	r2, #1
 801f0ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801f0b0:	697b      	ldr	r3, [r7, #20]
 801f0b2:	2200      	movs	r2, #0
 801f0b4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 801f0b6:	697b      	ldr	r3, [r7, #20]
 801f0b8:	2200      	movs	r2, #0
 801f0ba:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 801f0bc:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 801f0c0:	4618      	mov	r0, r3
 801f0c2:	3748      	adds	r7, #72	; 0x48
 801f0c4:	46bd      	mov	sp, r7
 801f0c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801f0ca:	bf00      	nop
 801f0cc:	58024400 	.word	0x58024400
 801f0d0:	03d09000 	.word	0x03d09000
 801f0d4:	003d0900 	.word	0x003d0900
 801f0d8:	08072a28 	.word	0x08072a28

0801f0dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801f0dc:	b480      	push	{r7}
 801f0de:	b083      	sub	sp, #12
 801f0e0:	af00      	add	r7, sp, #0
 801f0e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801f0e4:	687b      	ldr	r3, [r7, #4]
 801f0e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f0e8:	f003 0301 	and.w	r3, r3, #1
 801f0ec:	2b00      	cmp	r3, #0
 801f0ee:	d00a      	beq.n	801f106 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801f0f0:	687b      	ldr	r3, [r7, #4]
 801f0f2:	681b      	ldr	r3, [r3, #0]
 801f0f4:	685b      	ldr	r3, [r3, #4]
 801f0f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801f0fa:	687b      	ldr	r3, [r7, #4]
 801f0fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801f0fe:	687b      	ldr	r3, [r7, #4]
 801f100:	681b      	ldr	r3, [r3, #0]
 801f102:	430a      	orrs	r2, r1
 801f104:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801f106:	687b      	ldr	r3, [r7, #4]
 801f108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f10a:	f003 0302 	and.w	r3, r3, #2
 801f10e:	2b00      	cmp	r3, #0
 801f110:	d00a      	beq.n	801f128 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801f112:	687b      	ldr	r3, [r7, #4]
 801f114:	681b      	ldr	r3, [r3, #0]
 801f116:	685b      	ldr	r3, [r3, #4]
 801f118:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801f11c:	687b      	ldr	r3, [r7, #4]
 801f11e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801f120:	687b      	ldr	r3, [r7, #4]
 801f122:	681b      	ldr	r3, [r3, #0]
 801f124:	430a      	orrs	r2, r1
 801f126:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801f128:	687b      	ldr	r3, [r7, #4]
 801f12a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f12c:	f003 0304 	and.w	r3, r3, #4
 801f130:	2b00      	cmp	r3, #0
 801f132:	d00a      	beq.n	801f14a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801f134:	687b      	ldr	r3, [r7, #4]
 801f136:	681b      	ldr	r3, [r3, #0]
 801f138:	685b      	ldr	r3, [r3, #4]
 801f13a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801f13e:	687b      	ldr	r3, [r7, #4]
 801f140:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801f142:	687b      	ldr	r3, [r7, #4]
 801f144:	681b      	ldr	r3, [r3, #0]
 801f146:	430a      	orrs	r2, r1
 801f148:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801f14a:	687b      	ldr	r3, [r7, #4]
 801f14c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f14e:	f003 0308 	and.w	r3, r3, #8
 801f152:	2b00      	cmp	r3, #0
 801f154:	d00a      	beq.n	801f16c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801f156:	687b      	ldr	r3, [r7, #4]
 801f158:	681b      	ldr	r3, [r3, #0]
 801f15a:	685b      	ldr	r3, [r3, #4]
 801f15c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801f160:	687b      	ldr	r3, [r7, #4]
 801f162:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801f164:	687b      	ldr	r3, [r7, #4]
 801f166:	681b      	ldr	r3, [r3, #0]
 801f168:	430a      	orrs	r2, r1
 801f16a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801f16c:	687b      	ldr	r3, [r7, #4]
 801f16e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f170:	f003 0310 	and.w	r3, r3, #16
 801f174:	2b00      	cmp	r3, #0
 801f176:	d00a      	beq.n	801f18e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801f178:	687b      	ldr	r3, [r7, #4]
 801f17a:	681b      	ldr	r3, [r3, #0]
 801f17c:	689b      	ldr	r3, [r3, #8]
 801f17e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801f182:	687b      	ldr	r3, [r7, #4]
 801f184:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801f186:	687b      	ldr	r3, [r7, #4]
 801f188:	681b      	ldr	r3, [r3, #0]
 801f18a:	430a      	orrs	r2, r1
 801f18c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801f18e:	687b      	ldr	r3, [r7, #4]
 801f190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f192:	f003 0320 	and.w	r3, r3, #32
 801f196:	2b00      	cmp	r3, #0
 801f198:	d00a      	beq.n	801f1b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801f19a:	687b      	ldr	r3, [r7, #4]
 801f19c:	681b      	ldr	r3, [r3, #0]
 801f19e:	689b      	ldr	r3, [r3, #8]
 801f1a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801f1a4:	687b      	ldr	r3, [r7, #4]
 801f1a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801f1a8:	687b      	ldr	r3, [r7, #4]
 801f1aa:	681b      	ldr	r3, [r3, #0]
 801f1ac:	430a      	orrs	r2, r1
 801f1ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801f1b0:	687b      	ldr	r3, [r7, #4]
 801f1b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f1b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801f1b8:	2b00      	cmp	r3, #0
 801f1ba:	d01a      	beq.n	801f1f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801f1bc:	687b      	ldr	r3, [r7, #4]
 801f1be:	681b      	ldr	r3, [r3, #0]
 801f1c0:	685b      	ldr	r3, [r3, #4]
 801f1c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801f1c6:	687b      	ldr	r3, [r7, #4]
 801f1c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801f1ca:	687b      	ldr	r3, [r7, #4]
 801f1cc:	681b      	ldr	r3, [r3, #0]
 801f1ce:	430a      	orrs	r2, r1
 801f1d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801f1d2:	687b      	ldr	r3, [r7, #4]
 801f1d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f1d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801f1da:	d10a      	bne.n	801f1f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801f1dc:	687b      	ldr	r3, [r7, #4]
 801f1de:	681b      	ldr	r3, [r3, #0]
 801f1e0:	685b      	ldr	r3, [r3, #4]
 801f1e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801f1e6:	687b      	ldr	r3, [r7, #4]
 801f1e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801f1ea:	687b      	ldr	r3, [r7, #4]
 801f1ec:	681b      	ldr	r3, [r3, #0]
 801f1ee:	430a      	orrs	r2, r1
 801f1f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801f1f2:	687b      	ldr	r3, [r7, #4]
 801f1f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f1f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801f1fa:	2b00      	cmp	r3, #0
 801f1fc:	d00a      	beq.n	801f214 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801f1fe:	687b      	ldr	r3, [r7, #4]
 801f200:	681b      	ldr	r3, [r3, #0]
 801f202:	685b      	ldr	r3, [r3, #4]
 801f204:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801f208:	687b      	ldr	r3, [r7, #4]
 801f20a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801f20c:	687b      	ldr	r3, [r7, #4]
 801f20e:	681b      	ldr	r3, [r3, #0]
 801f210:	430a      	orrs	r2, r1
 801f212:	605a      	str	r2, [r3, #4]
  }
}
 801f214:	bf00      	nop
 801f216:	370c      	adds	r7, #12
 801f218:	46bd      	mov	sp, r7
 801f21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f21e:	4770      	bx	lr

0801f220 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801f220:	b580      	push	{r7, lr}
 801f222:	b098      	sub	sp, #96	; 0x60
 801f224:	af02      	add	r7, sp, #8
 801f226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801f228:	687b      	ldr	r3, [r7, #4]
 801f22a:	2200      	movs	r2, #0
 801f22c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801f230:	f7f6 fe4e 	bl	8015ed0 <HAL_GetTick>
 801f234:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801f236:	687b      	ldr	r3, [r7, #4]
 801f238:	681b      	ldr	r3, [r3, #0]
 801f23a:	681b      	ldr	r3, [r3, #0]
 801f23c:	f003 0308 	and.w	r3, r3, #8
 801f240:	2b08      	cmp	r3, #8
 801f242:	d12f      	bne.n	801f2a4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801f244:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801f248:	9300      	str	r3, [sp, #0]
 801f24a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801f24c:	2200      	movs	r2, #0
 801f24e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801f252:	6878      	ldr	r0, [r7, #4]
 801f254:	f000 f88e 	bl	801f374 <UART_WaitOnFlagUntilTimeout>
 801f258:	4603      	mov	r3, r0
 801f25a:	2b00      	cmp	r3, #0
 801f25c:	d022      	beq.n	801f2a4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801f25e:	687b      	ldr	r3, [r7, #4]
 801f260:	681b      	ldr	r3, [r3, #0]
 801f262:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801f264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f266:	e853 3f00 	ldrex	r3, [r3]
 801f26a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801f26c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f26e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801f272:	653b      	str	r3, [r7, #80]	; 0x50
 801f274:	687b      	ldr	r3, [r7, #4]
 801f276:	681b      	ldr	r3, [r3, #0]
 801f278:	461a      	mov	r2, r3
 801f27a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801f27c:	647b      	str	r3, [r7, #68]	; 0x44
 801f27e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801f280:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801f282:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801f284:	e841 2300 	strex	r3, r2, [r1]
 801f288:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801f28a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f28c:	2b00      	cmp	r3, #0
 801f28e:	d1e6      	bne.n	801f25e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 801f290:	687b      	ldr	r3, [r7, #4]
 801f292:	2220      	movs	r2, #32
 801f294:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 801f298:	687b      	ldr	r3, [r7, #4]
 801f29a:	2200      	movs	r2, #0
 801f29c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801f2a0:	2303      	movs	r3, #3
 801f2a2:	e063      	b.n	801f36c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801f2a4:	687b      	ldr	r3, [r7, #4]
 801f2a6:	681b      	ldr	r3, [r3, #0]
 801f2a8:	681b      	ldr	r3, [r3, #0]
 801f2aa:	f003 0304 	and.w	r3, r3, #4
 801f2ae:	2b04      	cmp	r3, #4
 801f2b0:	d149      	bne.n	801f346 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801f2b2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801f2b6:	9300      	str	r3, [sp, #0]
 801f2b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801f2ba:	2200      	movs	r2, #0
 801f2bc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801f2c0:	6878      	ldr	r0, [r7, #4]
 801f2c2:	f000 f857 	bl	801f374 <UART_WaitOnFlagUntilTimeout>
 801f2c6:	4603      	mov	r3, r0
 801f2c8:	2b00      	cmp	r3, #0
 801f2ca:	d03c      	beq.n	801f346 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801f2cc:	687b      	ldr	r3, [r7, #4]
 801f2ce:	681b      	ldr	r3, [r3, #0]
 801f2d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801f2d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f2d4:	e853 3f00 	ldrex	r3, [r3]
 801f2d8:	623b      	str	r3, [r7, #32]
   return(result);
 801f2da:	6a3b      	ldr	r3, [r7, #32]
 801f2dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801f2e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 801f2e2:	687b      	ldr	r3, [r7, #4]
 801f2e4:	681b      	ldr	r3, [r3, #0]
 801f2e6:	461a      	mov	r2, r3
 801f2e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801f2ea:	633b      	str	r3, [r7, #48]	; 0x30
 801f2ec:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801f2ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801f2f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801f2f2:	e841 2300 	strex	r3, r2, [r1]
 801f2f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801f2f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f2fa:	2b00      	cmp	r3, #0
 801f2fc:	d1e6      	bne.n	801f2cc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801f2fe:	687b      	ldr	r3, [r7, #4]
 801f300:	681b      	ldr	r3, [r3, #0]
 801f302:	3308      	adds	r3, #8
 801f304:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801f306:	693b      	ldr	r3, [r7, #16]
 801f308:	e853 3f00 	ldrex	r3, [r3]
 801f30c:	60fb      	str	r3, [r7, #12]
   return(result);
 801f30e:	68fb      	ldr	r3, [r7, #12]
 801f310:	f023 0301 	bic.w	r3, r3, #1
 801f314:	64bb      	str	r3, [r7, #72]	; 0x48
 801f316:	687b      	ldr	r3, [r7, #4]
 801f318:	681b      	ldr	r3, [r3, #0]
 801f31a:	3308      	adds	r3, #8
 801f31c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801f31e:	61fa      	str	r2, [r7, #28]
 801f320:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801f322:	69b9      	ldr	r1, [r7, #24]
 801f324:	69fa      	ldr	r2, [r7, #28]
 801f326:	e841 2300 	strex	r3, r2, [r1]
 801f32a:	617b      	str	r3, [r7, #20]
   return(result);
 801f32c:	697b      	ldr	r3, [r7, #20]
 801f32e:	2b00      	cmp	r3, #0
 801f330:	d1e5      	bne.n	801f2fe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801f332:	687b      	ldr	r3, [r7, #4]
 801f334:	2220      	movs	r2, #32
 801f336:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 801f33a:	687b      	ldr	r3, [r7, #4]
 801f33c:	2200      	movs	r2, #0
 801f33e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801f342:	2303      	movs	r3, #3
 801f344:	e012      	b.n	801f36c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801f346:	687b      	ldr	r3, [r7, #4]
 801f348:	2220      	movs	r2, #32
 801f34a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801f34e:	687b      	ldr	r3, [r7, #4]
 801f350:	2220      	movs	r2, #32
 801f352:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801f356:	687b      	ldr	r3, [r7, #4]
 801f358:	2200      	movs	r2, #0
 801f35a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801f35c:	687b      	ldr	r3, [r7, #4]
 801f35e:	2200      	movs	r2, #0
 801f360:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 801f362:	687b      	ldr	r3, [r7, #4]
 801f364:	2200      	movs	r2, #0
 801f366:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801f36a:	2300      	movs	r3, #0
}
 801f36c:	4618      	mov	r0, r3
 801f36e:	3758      	adds	r7, #88	; 0x58
 801f370:	46bd      	mov	sp, r7
 801f372:	bd80      	pop	{r7, pc}

0801f374 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801f374:	b580      	push	{r7, lr}
 801f376:	b084      	sub	sp, #16
 801f378:	af00      	add	r7, sp, #0
 801f37a:	60f8      	str	r0, [r7, #12]
 801f37c:	60b9      	str	r1, [r7, #8]
 801f37e:	603b      	str	r3, [r7, #0]
 801f380:	4613      	mov	r3, r2
 801f382:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801f384:	e049      	b.n	801f41a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801f386:	69bb      	ldr	r3, [r7, #24]
 801f388:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f38c:	d045      	beq.n	801f41a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801f38e:	f7f6 fd9f 	bl	8015ed0 <HAL_GetTick>
 801f392:	4602      	mov	r2, r0
 801f394:	683b      	ldr	r3, [r7, #0]
 801f396:	1ad3      	subs	r3, r2, r3
 801f398:	69ba      	ldr	r2, [r7, #24]
 801f39a:	429a      	cmp	r2, r3
 801f39c:	d302      	bcc.n	801f3a4 <UART_WaitOnFlagUntilTimeout+0x30>
 801f39e:	69bb      	ldr	r3, [r7, #24]
 801f3a0:	2b00      	cmp	r3, #0
 801f3a2:	d101      	bne.n	801f3a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 801f3a4:	2303      	movs	r3, #3
 801f3a6:	e048      	b.n	801f43a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801f3a8:	68fb      	ldr	r3, [r7, #12]
 801f3aa:	681b      	ldr	r3, [r3, #0]
 801f3ac:	681b      	ldr	r3, [r3, #0]
 801f3ae:	f003 0304 	and.w	r3, r3, #4
 801f3b2:	2b00      	cmp	r3, #0
 801f3b4:	d031      	beq.n	801f41a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801f3b6:	68fb      	ldr	r3, [r7, #12]
 801f3b8:	681b      	ldr	r3, [r3, #0]
 801f3ba:	69db      	ldr	r3, [r3, #28]
 801f3bc:	f003 0308 	and.w	r3, r3, #8
 801f3c0:	2b08      	cmp	r3, #8
 801f3c2:	d110      	bne.n	801f3e6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801f3c4:	68fb      	ldr	r3, [r7, #12]
 801f3c6:	681b      	ldr	r3, [r3, #0]
 801f3c8:	2208      	movs	r2, #8
 801f3ca:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 801f3cc:	68f8      	ldr	r0, [r7, #12]
 801f3ce:	f000 f839 	bl	801f444 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 801f3d2:	68fb      	ldr	r3, [r7, #12]
 801f3d4:	2208      	movs	r2, #8
 801f3d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 801f3da:	68fb      	ldr	r3, [r7, #12]
 801f3dc:	2200      	movs	r2, #0
 801f3de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 801f3e2:	2301      	movs	r3, #1
 801f3e4:	e029      	b.n	801f43a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801f3e6:	68fb      	ldr	r3, [r7, #12]
 801f3e8:	681b      	ldr	r3, [r3, #0]
 801f3ea:	69db      	ldr	r3, [r3, #28]
 801f3ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801f3f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801f3f4:	d111      	bne.n	801f41a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801f3f6:	68fb      	ldr	r3, [r7, #12]
 801f3f8:	681b      	ldr	r3, [r3, #0]
 801f3fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801f3fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801f400:	68f8      	ldr	r0, [r7, #12]
 801f402:	f000 f81f 	bl	801f444 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801f406:	68fb      	ldr	r3, [r7, #12]
 801f408:	2220      	movs	r2, #32
 801f40a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801f40e:	68fb      	ldr	r3, [r7, #12]
 801f410:	2200      	movs	r2, #0
 801f412:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 801f416:	2303      	movs	r3, #3
 801f418:	e00f      	b.n	801f43a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801f41a:	68fb      	ldr	r3, [r7, #12]
 801f41c:	681b      	ldr	r3, [r3, #0]
 801f41e:	69da      	ldr	r2, [r3, #28]
 801f420:	68bb      	ldr	r3, [r7, #8]
 801f422:	4013      	ands	r3, r2
 801f424:	68ba      	ldr	r2, [r7, #8]
 801f426:	429a      	cmp	r2, r3
 801f428:	bf0c      	ite	eq
 801f42a:	2301      	moveq	r3, #1
 801f42c:	2300      	movne	r3, #0
 801f42e:	b2db      	uxtb	r3, r3
 801f430:	461a      	mov	r2, r3
 801f432:	79fb      	ldrb	r3, [r7, #7]
 801f434:	429a      	cmp	r2, r3
 801f436:	d0a6      	beq.n	801f386 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801f438:	2300      	movs	r3, #0
}
 801f43a:	4618      	mov	r0, r3
 801f43c:	3710      	adds	r7, #16
 801f43e:	46bd      	mov	sp, r7
 801f440:	bd80      	pop	{r7, pc}
	...

0801f444 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801f444:	b480      	push	{r7}
 801f446:	b095      	sub	sp, #84	; 0x54
 801f448:	af00      	add	r7, sp, #0
 801f44a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801f44c:	687b      	ldr	r3, [r7, #4]
 801f44e:	681b      	ldr	r3, [r3, #0]
 801f450:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801f452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f454:	e853 3f00 	ldrex	r3, [r3]
 801f458:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801f45a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f45c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801f460:	64fb      	str	r3, [r7, #76]	; 0x4c
 801f462:	687b      	ldr	r3, [r7, #4]
 801f464:	681b      	ldr	r3, [r3, #0]
 801f466:	461a      	mov	r2, r3
 801f468:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801f46a:	643b      	str	r3, [r7, #64]	; 0x40
 801f46c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801f46e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801f470:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801f472:	e841 2300 	strex	r3, r2, [r1]
 801f476:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801f478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f47a:	2b00      	cmp	r3, #0
 801f47c:	d1e6      	bne.n	801f44c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801f47e:	687b      	ldr	r3, [r7, #4]
 801f480:	681b      	ldr	r3, [r3, #0]
 801f482:	3308      	adds	r3, #8
 801f484:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801f486:	6a3b      	ldr	r3, [r7, #32]
 801f488:	e853 3f00 	ldrex	r3, [r3]
 801f48c:	61fb      	str	r3, [r7, #28]
   return(result);
 801f48e:	69fa      	ldr	r2, [r7, #28]
 801f490:	4b1e      	ldr	r3, [pc, #120]	; (801f50c <UART_EndRxTransfer+0xc8>)
 801f492:	4013      	ands	r3, r2
 801f494:	64bb      	str	r3, [r7, #72]	; 0x48
 801f496:	687b      	ldr	r3, [r7, #4]
 801f498:	681b      	ldr	r3, [r3, #0]
 801f49a:	3308      	adds	r3, #8
 801f49c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801f49e:	62fa      	str	r2, [r7, #44]	; 0x2c
 801f4a0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801f4a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801f4a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801f4a6:	e841 2300 	strex	r3, r2, [r1]
 801f4aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801f4ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f4ae:	2b00      	cmp	r3, #0
 801f4b0:	d1e5      	bne.n	801f47e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801f4b2:	687b      	ldr	r3, [r7, #4]
 801f4b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801f4b6:	2b01      	cmp	r3, #1
 801f4b8:	d118      	bne.n	801f4ec <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801f4ba:	687b      	ldr	r3, [r7, #4]
 801f4bc:	681b      	ldr	r3, [r3, #0]
 801f4be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801f4c0:	68fb      	ldr	r3, [r7, #12]
 801f4c2:	e853 3f00 	ldrex	r3, [r3]
 801f4c6:	60bb      	str	r3, [r7, #8]
   return(result);
 801f4c8:	68bb      	ldr	r3, [r7, #8]
 801f4ca:	f023 0310 	bic.w	r3, r3, #16
 801f4ce:	647b      	str	r3, [r7, #68]	; 0x44
 801f4d0:	687b      	ldr	r3, [r7, #4]
 801f4d2:	681b      	ldr	r3, [r3, #0]
 801f4d4:	461a      	mov	r2, r3
 801f4d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801f4d8:	61bb      	str	r3, [r7, #24]
 801f4da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801f4dc:	6979      	ldr	r1, [r7, #20]
 801f4de:	69ba      	ldr	r2, [r7, #24]
 801f4e0:	e841 2300 	strex	r3, r2, [r1]
 801f4e4:	613b      	str	r3, [r7, #16]
   return(result);
 801f4e6:	693b      	ldr	r3, [r7, #16]
 801f4e8:	2b00      	cmp	r3, #0
 801f4ea:	d1e6      	bne.n	801f4ba <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801f4ec:	687b      	ldr	r3, [r7, #4]
 801f4ee:	2220      	movs	r2, #32
 801f4f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801f4f4:	687b      	ldr	r3, [r7, #4]
 801f4f6:	2200      	movs	r2, #0
 801f4f8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801f4fa:	687b      	ldr	r3, [r7, #4]
 801f4fc:	2200      	movs	r2, #0
 801f4fe:	675a      	str	r2, [r3, #116]	; 0x74
}
 801f500:	bf00      	nop
 801f502:	3754      	adds	r7, #84	; 0x54
 801f504:	46bd      	mov	sp, r7
 801f506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f50a:	4770      	bx	lr
 801f50c:	effffffe 	.word	0xeffffffe

0801f510 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801f510:	b480      	push	{r7}
 801f512:	b085      	sub	sp, #20
 801f514:	af00      	add	r7, sp, #0
 801f516:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801f518:	687b      	ldr	r3, [r7, #4]
 801f51a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801f51e:	2b01      	cmp	r3, #1
 801f520:	d101      	bne.n	801f526 <HAL_UARTEx_DisableFifoMode+0x16>
 801f522:	2302      	movs	r3, #2
 801f524:	e027      	b.n	801f576 <HAL_UARTEx_DisableFifoMode+0x66>
 801f526:	687b      	ldr	r3, [r7, #4]
 801f528:	2201      	movs	r2, #1
 801f52a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801f52e:	687b      	ldr	r3, [r7, #4]
 801f530:	2224      	movs	r2, #36	; 0x24
 801f532:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801f536:	687b      	ldr	r3, [r7, #4]
 801f538:	681b      	ldr	r3, [r3, #0]
 801f53a:	681b      	ldr	r3, [r3, #0]
 801f53c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801f53e:	687b      	ldr	r3, [r7, #4]
 801f540:	681b      	ldr	r3, [r3, #0]
 801f542:	681a      	ldr	r2, [r3, #0]
 801f544:	687b      	ldr	r3, [r7, #4]
 801f546:	681b      	ldr	r3, [r3, #0]
 801f548:	f022 0201 	bic.w	r2, r2, #1
 801f54c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801f54e:	68fb      	ldr	r3, [r7, #12]
 801f550:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801f554:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801f556:	687b      	ldr	r3, [r7, #4]
 801f558:	2200      	movs	r2, #0
 801f55a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801f55c:	687b      	ldr	r3, [r7, #4]
 801f55e:	681b      	ldr	r3, [r3, #0]
 801f560:	68fa      	ldr	r2, [r7, #12]
 801f562:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801f564:	687b      	ldr	r3, [r7, #4]
 801f566:	2220      	movs	r2, #32
 801f568:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801f56c:	687b      	ldr	r3, [r7, #4]
 801f56e:	2200      	movs	r2, #0
 801f570:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801f574:	2300      	movs	r3, #0
}
 801f576:	4618      	mov	r0, r3
 801f578:	3714      	adds	r7, #20
 801f57a:	46bd      	mov	sp, r7
 801f57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f580:	4770      	bx	lr

0801f582 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801f582:	b580      	push	{r7, lr}
 801f584:	b084      	sub	sp, #16
 801f586:	af00      	add	r7, sp, #0
 801f588:	6078      	str	r0, [r7, #4]
 801f58a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801f58c:	687b      	ldr	r3, [r7, #4]
 801f58e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801f592:	2b01      	cmp	r3, #1
 801f594:	d101      	bne.n	801f59a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801f596:	2302      	movs	r3, #2
 801f598:	e02d      	b.n	801f5f6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801f59a:	687b      	ldr	r3, [r7, #4]
 801f59c:	2201      	movs	r2, #1
 801f59e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801f5a2:	687b      	ldr	r3, [r7, #4]
 801f5a4:	2224      	movs	r2, #36	; 0x24
 801f5a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801f5aa:	687b      	ldr	r3, [r7, #4]
 801f5ac:	681b      	ldr	r3, [r3, #0]
 801f5ae:	681b      	ldr	r3, [r3, #0]
 801f5b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801f5b2:	687b      	ldr	r3, [r7, #4]
 801f5b4:	681b      	ldr	r3, [r3, #0]
 801f5b6:	681a      	ldr	r2, [r3, #0]
 801f5b8:	687b      	ldr	r3, [r7, #4]
 801f5ba:	681b      	ldr	r3, [r3, #0]
 801f5bc:	f022 0201 	bic.w	r2, r2, #1
 801f5c0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801f5c2:	687b      	ldr	r3, [r7, #4]
 801f5c4:	681b      	ldr	r3, [r3, #0]
 801f5c6:	689b      	ldr	r3, [r3, #8]
 801f5c8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 801f5cc:	687b      	ldr	r3, [r7, #4]
 801f5ce:	681b      	ldr	r3, [r3, #0]
 801f5d0:	683a      	ldr	r2, [r7, #0]
 801f5d2:	430a      	orrs	r2, r1
 801f5d4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801f5d6:	6878      	ldr	r0, [r7, #4]
 801f5d8:	f000 f850 	bl	801f67c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801f5dc:	687b      	ldr	r3, [r7, #4]
 801f5de:	681b      	ldr	r3, [r3, #0]
 801f5e0:	68fa      	ldr	r2, [r7, #12]
 801f5e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801f5e4:	687b      	ldr	r3, [r7, #4]
 801f5e6:	2220      	movs	r2, #32
 801f5e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801f5ec:	687b      	ldr	r3, [r7, #4]
 801f5ee:	2200      	movs	r2, #0
 801f5f0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801f5f4:	2300      	movs	r3, #0
}
 801f5f6:	4618      	mov	r0, r3
 801f5f8:	3710      	adds	r7, #16
 801f5fa:	46bd      	mov	sp, r7
 801f5fc:	bd80      	pop	{r7, pc}

0801f5fe <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801f5fe:	b580      	push	{r7, lr}
 801f600:	b084      	sub	sp, #16
 801f602:	af00      	add	r7, sp, #0
 801f604:	6078      	str	r0, [r7, #4]
 801f606:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801f608:	687b      	ldr	r3, [r7, #4]
 801f60a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801f60e:	2b01      	cmp	r3, #1
 801f610:	d101      	bne.n	801f616 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801f612:	2302      	movs	r3, #2
 801f614:	e02d      	b.n	801f672 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801f616:	687b      	ldr	r3, [r7, #4]
 801f618:	2201      	movs	r2, #1
 801f61a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801f61e:	687b      	ldr	r3, [r7, #4]
 801f620:	2224      	movs	r2, #36	; 0x24
 801f622:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801f626:	687b      	ldr	r3, [r7, #4]
 801f628:	681b      	ldr	r3, [r3, #0]
 801f62a:	681b      	ldr	r3, [r3, #0]
 801f62c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801f62e:	687b      	ldr	r3, [r7, #4]
 801f630:	681b      	ldr	r3, [r3, #0]
 801f632:	681a      	ldr	r2, [r3, #0]
 801f634:	687b      	ldr	r3, [r7, #4]
 801f636:	681b      	ldr	r3, [r3, #0]
 801f638:	f022 0201 	bic.w	r2, r2, #1
 801f63c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801f63e:	687b      	ldr	r3, [r7, #4]
 801f640:	681b      	ldr	r3, [r3, #0]
 801f642:	689b      	ldr	r3, [r3, #8]
 801f644:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 801f648:	687b      	ldr	r3, [r7, #4]
 801f64a:	681b      	ldr	r3, [r3, #0]
 801f64c:	683a      	ldr	r2, [r7, #0]
 801f64e:	430a      	orrs	r2, r1
 801f650:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801f652:	6878      	ldr	r0, [r7, #4]
 801f654:	f000 f812 	bl	801f67c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801f658:	687b      	ldr	r3, [r7, #4]
 801f65a:	681b      	ldr	r3, [r3, #0]
 801f65c:	68fa      	ldr	r2, [r7, #12]
 801f65e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801f660:	687b      	ldr	r3, [r7, #4]
 801f662:	2220      	movs	r2, #32
 801f664:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801f668:	687b      	ldr	r3, [r7, #4]
 801f66a:	2200      	movs	r2, #0
 801f66c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801f670:	2300      	movs	r3, #0
}
 801f672:	4618      	mov	r0, r3
 801f674:	3710      	adds	r7, #16
 801f676:	46bd      	mov	sp, r7
 801f678:	bd80      	pop	{r7, pc}
	...

0801f67c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801f67c:	b480      	push	{r7}
 801f67e:	b085      	sub	sp, #20
 801f680:	af00      	add	r7, sp, #0
 801f682:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801f684:	687b      	ldr	r3, [r7, #4]
 801f686:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801f688:	2b00      	cmp	r3, #0
 801f68a:	d108      	bne.n	801f69e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801f68c:	687b      	ldr	r3, [r7, #4]
 801f68e:	2201      	movs	r2, #1
 801f690:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 801f694:	687b      	ldr	r3, [r7, #4]
 801f696:	2201      	movs	r2, #1
 801f698:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801f69c:	e031      	b.n	801f702 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801f69e:	2310      	movs	r3, #16
 801f6a0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801f6a2:	2310      	movs	r3, #16
 801f6a4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801f6a6:	687b      	ldr	r3, [r7, #4]
 801f6a8:	681b      	ldr	r3, [r3, #0]
 801f6aa:	689b      	ldr	r3, [r3, #8]
 801f6ac:	0e5b      	lsrs	r3, r3, #25
 801f6ae:	b2db      	uxtb	r3, r3
 801f6b0:	f003 0307 	and.w	r3, r3, #7
 801f6b4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801f6b6:	687b      	ldr	r3, [r7, #4]
 801f6b8:	681b      	ldr	r3, [r3, #0]
 801f6ba:	689b      	ldr	r3, [r3, #8]
 801f6bc:	0f5b      	lsrs	r3, r3, #29
 801f6be:	b2db      	uxtb	r3, r3
 801f6c0:	f003 0307 	and.w	r3, r3, #7
 801f6c4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801f6c6:	7bbb      	ldrb	r3, [r7, #14]
 801f6c8:	7b3a      	ldrb	r2, [r7, #12]
 801f6ca:	4911      	ldr	r1, [pc, #68]	; (801f710 <UARTEx_SetNbDataToProcess+0x94>)
 801f6cc:	5c8a      	ldrb	r2, [r1, r2]
 801f6ce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801f6d2:	7b3a      	ldrb	r2, [r7, #12]
 801f6d4:	490f      	ldr	r1, [pc, #60]	; (801f714 <UARTEx_SetNbDataToProcess+0x98>)
 801f6d6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801f6d8:	fb93 f3f2 	sdiv	r3, r3, r2
 801f6dc:	b29a      	uxth	r2, r3
 801f6de:	687b      	ldr	r3, [r7, #4]
 801f6e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801f6e4:	7bfb      	ldrb	r3, [r7, #15]
 801f6e6:	7b7a      	ldrb	r2, [r7, #13]
 801f6e8:	4909      	ldr	r1, [pc, #36]	; (801f710 <UARTEx_SetNbDataToProcess+0x94>)
 801f6ea:	5c8a      	ldrb	r2, [r1, r2]
 801f6ec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801f6f0:	7b7a      	ldrb	r2, [r7, #13]
 801f6f2:	4908      	ldr	r1, [pc, #32]	; (801f714 <UARTEx_SetNbDataToProcess+0x98>)
 801f6f4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801f6f6:	fb93 f3f2 	sdiv	r3, r3, r2
 801f6fa:	b29a      	uxth	r2, r3
 801f6fc:	687b      	ldr	r3, [r7, #4]
 801f6fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801f702:	bf00      	nop
 801f704:	3714      	adds	r7, #20
 801f706:	46bd      	mov	sp, r7
 801f708:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f70c:	4770      	bx	lr
 801f70e:	bf00      	nop
 801f710:	08072a40 	.word	0x08072a40
 801f714:	08072a48 	.word	0x08072a48

0801f718 <_ZdlPvj>:
 801f718:	f000 b80f 	b.w	801f73a <_ZdlPv>

0801f71c <__cxa_guard_acquire>:
 801f71c:	6803      	ldr	r3, [r0, #0]
 801f71e:	07db      	lsls	r3, r3, #31
 801f720:	d406      	bmi.n	801f730 <__cxa_guard_acquire+0x14>
 801f722:	7843      	ldrb	r3, [r0, #1]
 801f724:	b103      	cbz	r3, 801f728 <__cxa_guard_acquire+0xc>
 801f726:	deff      	udf	#255	; 0xff
 801f728:	2301      	movs	r3, #1
 801f72a:	7043      	strb	r3, [r0, #1]
 801f72c:	4618      	mov	r0, r3
 801f72e:	4770      	bx	lr
 801f730:	2000      	movs	r0, #0
 801f732:	4770      	bx	lr

0801f734 <__cxa_guard_release>:
 801f734:	2301      	movs	r3, #1
 801f736:	6003      	str	r3, [r0, #0]
 801f738:	4770      	bx	lr

0801f73a <_ZdlPv>:
 801f73a:	f000 b9c5 	b.w	801fac8 <free>
	...

0801f740 <frexp>:
 801f740:	2200      	movs	r2, #0
 801f742:	ee10 1a90 	vmov	r1, s1
 801f746:	6002      	str	r2, [r0, #0]
 801f748:	4a17      	ldr	r2, [pc, #92]	; (801f7a8 <frexp+0x68>)
 801f74a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801f74e:	4293      	cmp	r3, r2
 801f750:	dc23      	bgt.n	801f79a <frexp+0x5a>
 801f752:	ee10 2a10 	vmov	r2, s0
 801f756:	431a      	orrs	r2, r3
 801f758:	d01f      	beq.n	801f79a <frexp+0x5a>
 801f75a:	4a14      	ldr	r2, [pc, #80]	; (801f7ac <frexp+0x6c>)
 801f75c:	400a      	ands	r2, r1
 801f75e:	b952      	cbnz	r2, 801f776 <frexp+0x36>
 801f760:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 801f7a0 <frexp+0x60>
 801f764:	ee20 0b07 	vmul.f64	d0, d0, d7
 801f768:	ee10 1a90 	vmov	r1, s1
 801f76c:	f06f 0235 	mvn.w	r2, #53	; 0x35
 801f770:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801f774:	6002      	str	r2, [r0, #0]
 801f776:	6802      	ldr	r2, [r0, #0]
 801f778:	151b      	asrs	r3, r3, #20
 801f77a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801f77e:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 801f782:	441a      	add	r2, r3
 801f784:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 801f788:	6002      	str	r2, [r0, #0]
 801f78a:	ec53 2b10 	vmov	r2, r3, d0
 801f78e:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
 801f792:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801f796:	ec43 2b10 	vmov	d0, r2, r3
 801f79a:	4770      	bx	lr
 801f79c:	f3af 8000 	nop.w
 801f7a0:	00000000 	.word	0x00000000
 801f7a4:	43500000 	.word	0x43500000
 801f7a8:	7fefffff 	.word	0x7fefffff
 801f7ac:	7ff00000 	.word	0x7ff00000

0801f7b0 <expf>:
 801f7b0:	ee10 2a10 	vmov	r2, s0
 801f7b4:	f240 412a 	movw	r1, #1066	; 0x42a
 801f7b8:	f3c2 530a 	ubfx	r3, r2, #20, #11
 801f7bc:	428b      	cmp	r3, r1
 801f7be:	b430      	push	{r4, r5}
 801f7c0:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 801f7c4:	d92a      	bls.n	801f81c <expf+0x6c>
 801f7c6:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 801f7ca:	d058      	beq.n	801f87e <expf+0xce>
 801f7cc:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 801f7d0:	d303      	bcc.n	801f7da <expf+0x2a>
 801f7d2:	ee30 0a00 	vadd.f32	s0, s0, s0
 801f7d6:	bc30      	pop	{r4, r5}
 801f7d8:	4770      	bx	lr
 801f7da:	eddf 7a2a 	vldr	s15, [pc, #168]	; 801f884 <expf+0xd4>
 801f7de:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801f7e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f7e6:	dd03      	ble.n	801f7f0 <expf+0x40>
 801f7e8:	bc30      	pop	{r4, r5}
 801f7ea:	2000      	movs	r0, #0
 801f7ec:	f000 b876 	b.w	801f8dc <__math_oflowf>
 801f7f0:	eddf 7a25 	vldr	s15, [pc, #148]	; 801f888 <expf+0xd8>
 801f7f4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801f7f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f7fc:	d503      	bpl.n	801f806 <expf+0x56>
 801f7fe:	bc30      	pop	{r4, r5}
 801f800:	2000      	movs	r0, #0
 801f802:	f000 b85f 	b.w	801f8c4 <__math_uflowf>
 801f806:	eddf 7a21 	vldr	s15, [pc, #132]	; 801f88c <expf+0xdc>
 801f80a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801f80e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f812:	d503      	bpl.n	801f81c <expf+0x6c>
 801f814:	bc30      	pop	{r4, r5}
 801f816:	2000      	movs	r0, #0
 801f818:	f000 b85a 	b.w	801f8d0 <__math_may_uflowf>
 801f81c:	4b1c      	ldr	r3, [pc, #112]	; (801f890 <expf+0xe0>)
 801f81e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801f822:	ed93 5b4a 	vldr	d5, [r3, #296]	; 0x128
 801f826:	ed93 4b48 	vldr	d4, [r3, #288]	; 0x120
 801f82a:	eeb0 7b44 	vmov.f64	d7, d4
 801f82e:	eea5 7b06 	vfma.f64	d7, d5, d6
 801f832:	ee17 0a10 	vmov	r0, s14
 801f836:	ee37 7b44 	vsub.f64	d7, d7, d4
 801f83a:	f000 021f 	and.w	r2, r0, #31
 801f83e:	ee95 7b06 	vfnms.f64	d7, d5, d6
 801f842:	ed93 5b4c 	vldr	d5, [r3, #304]	; 0x130
 801f846:	ee27 4b07 	vmul.f64	d4, d7, d7
 801f84a:	ed93 6b4e 	vldr	d6, [r3, #312]	; 0x138
 801f84e:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 801f852:	eea5 6b07 	vfma.f64	d6, d5, d7
 801f856:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 801f85a:	684d      	ldr	r5, [r1, #4]
 801f85c:	ed93 5b50 	vldr	d5, [r3, #320]	; 0x140
 801f860:	2100      	movs	r1, #0
 801f862:	190a      	adds	r2, r1, r4
 801f864:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 801f868:	eea5 0b07 	vfma.f64	d0, d5, d7
 801f86c:	ec43 2b17 	vmov	d7, r2, r3
 801f870:	eea6 0b04 	vfma.f64	d0, d6, d4
 801f874:	ee20 0b07 	vmul.f64	d0, d0, d7
 801f878:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801f87c:	e7ab      	b.n	801f7d6 <expf+0x26>
 801f87e:	ed9f 0a05 	vldr	s0, [pc, #20]	; 801f894 <expf+0xe4>
 801f882:	e7a8      	b.n	801f7d6 <expf+0x26>
 801f884:	42b17217 	.word	0x42b17217
 801f888:	c2cff1b4 	.word	0xc2cff1b4
 801f88c:	c2ce8ecf 	.word	0xc2ce8ecf
 801f890:	08072a50 	.word	0x08072a50
 801f894:	00000000 	.word	0x00000000

0801f898 <with_errnof>:
 801f898:	b513      	push	{r0, r1, r4, lr}
 801f89a:	4604      	mov	r4, r0
 801f89c:	ed8d 0a01 	vstr	s0, [sp, #4]
 801f8a0:	f000 ff58 	bl	8020754 <__errno>
 801f8a4:	ed9d 0a01 	vldr	s0, [sp, #4]
 801f8a8:	6004      	str	r4, [r0, #0]
 801f8aa:	b002      	add	sp, #8
 801f8ac:	bd10      	pop	{r4, pc}

0801f8ae <xflowf>:
 801f8ae:	b130      	cbz	r0, 801f8be <xflowf+0x10>
 801f8b0:	eef1 7a40 	vneg.f32	s15, s0
 801f8b4:	ee27 0a80 	vmul.f32	s0, s15, s0
 801f8b8:	2022      	movs	r0, #34	; 0x22
 801f8ba:	f7ff bfed 	b.w	801f898 <with_errnof>
 801f8be:	eef0 7a40 	vmov.f32	s15, s0
 801f8c2:	e7f7      	b.n	801f8b4 <xflowf+0x6>

0801f8c4 <__math_uflowf>:
 801f8c4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801f8cc <__math_uflowf+0x8>
 801f8c8:	f7ff bff1 	b.w	801f8ae <xflowf>
 801f8cc:	10000000 	.word	0x10000000

0801f8d0 <__math_may_uflowf>:
 801f8d0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801f8d8 <__math_may_uflowf+0x8>
 801f8d4:	f7ff bfeb 	b.w	801f8ae <xflowf>
 801f8d8:	1a200000 	.word	0x1a200000

0801f8dc <__math_oflowf>:
 801f8dc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801f8e4 <__math_oflowf+0x8>
 801f8e0:	f7ff bfe5 	b.w	801f8ae <xflowf>
 801f8e4:	70000000 	.word	0x70000000

0801f8e8 <floor>:
 801f8e8:	ee10 1a90 	vmov	r1, s1
 801f8ec:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801f8f0:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 801f8f4:	2b13      	cmp	r3, #19
 801f8f6:	b530      	push	{r4, r5, lr}
 801f8f8:	ee10 0a10 	vmov	r0, s0
 801f8fc:	ee10 5a10 	vmov	r5, s0
 801f900:	dc31      	bgt.n	801f966 <floor+0x7e>
 801f902:	2b00      	cmp	r3, #0
 801f904:	da15      	bge.n	801f932 <floor+0x4a>
 801f906:	ed9f 7b30 	vldr	d7, [pc, #192]	; 801f9c8 <floor+0xe0>
 801f90a:	ee30 0b07 	vadd.f64	d0, d0, d7
 801f90e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801f912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f916:	dd07      	ble.n	801f928 <floor+0x40>
 801f918:	2900      	cmp	r1, #0
 801f91a:	da4e      	bge.n	801f9ba <floor+0xd2>
 801f91c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801f920:	4308      	orrs	r0, r1
 801f922:	d04d      	beq.n	801f9c0 <floor+0xd8>
 801f924:	492a      	ldr	r1, [pc, #168]	; (801f9d0 <floor+0xe8>)
 801f926:	2000      	movs	r0, #0
 801f928:	460b      	mov	r3, r1
 801f92a:	4602      	mov	r2, r0
 801f92c:	ec43 2b10 	vmov	d0, r2, r3
 801f930:	e020      	b.n	801f974 <floor+0x8c>
 801f932:	4a28      	ldr	r2, [pc, #160]	; (801f9d4 <floor+0xec>)
 801f934:	411a      	asrs	r2, r3
 801f936:	ea01 0402 	and.w	r4, r1, r2
 801f93a:	4304      	orrs	r4, r0
 801f93c:	d01a      	beq.n	801f974 <floor+0x8c>
 801f93e:	ed9f 7b22 	vldr	d7, [pc, #136]	; 801f9c8 <floor+0xe0>
 801f942:	ee30 0b07 	vadd.f64	d0, d0, d7
 801f946:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801f94a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f94e:	ddeb      	ble.n	801f928 <floor+0x40>
 801f950:	2900      	cmp	r1, #0
 801f952:	bfbe      	ittt	lt
 801f954:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 801f958:	fa40 f303 	asrlt.w	r3, r0, r3
 801f95c:	18c9      	addlt	r1, r1, r3
 801f95e:	ea21 0102 	bic.w	r1, r1, r2
 801f962:	2000      	movs	r0, #0
 801f964:	e7e0      	b.n	801f928 <floor+0x40>
 801f966:	2b33      	cmp	r3, #51	; 0x33
 801f968:	dd05      	ble.n	801f976 <floor+0x8e>
 801f96a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801f96e:	d101      	bne.n	801f974 <floor+0x8c>
 801f970:	ee30 0b00 	vadd.f64	d0, d0, d0
 801f974:	bd30      	pop	{r4, r5, pc}
 801f976:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 801f97a:	f04f 32ff 	mov.w	r2, #4294967295
 801f97e:	40e2      	lsrs	r2, r4
 801f980:	4210      	tst	r0, r2
 801f982:	d0f7      	beq.n	801f974 <floor+0x8c>
 801f984:	ed9f 7b10 	vldr	d7, [pc, #64]	; 801f9c8 <floor+0xe0>
 801f988:	ee30 0b07 	vadd.f64	d0, d0, d7
 801f98c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801f990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f994:	ddc8      	ble.n	801f928 <floor+0x40>
 801f996:	2900      	cmp	r1, #0
 801f998:	da02      	bge.n	801f9a0 <floor+0xb8>
 801f99a:	2b14      	cmp	r3, #20
 801f99c:	d103      	bne.n	801f9a6 <floor+0xbe>
 801f99e:	3101      	adds	r1, #1
 801f9a0:	ea20 0002 	bic.w	r0, r0, r2
 801f9a4:	e7c0      	b.n	801f928 <floor+0x40>
 801f9a6:	2401      	movs	r4, #1
 801f9a8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801f9ac:	fa04 f303 	lsl.w	r3, r4, r3
 801f9b0:	4418      	add	r0, r3
 801f9b2:	4285      	cmp	r5, r0
 801f9b4:	bf88      	it	hi
 801f9b6:	1909      	addhi	r1, r1, r4
 801f9b8:	e7f2      	b.n	801f9a0 <floor+0xb8>
 801f9ba:	2000      	movs	r0, #0
 801f9bc:	4601      	mov	r1, r0
 801f9be:	e7b3      	b.n	801f928 <floor+0x40>
 801f9c0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801f9c4:	e7b0      	b.n	801f928 <floor+0x40>
 801f9c6:	bf00      	nop
 801f9c8:	8800759c 	.word	0x8800759c
 801f9cc:	7e37e43c 	.word	0x7e37e43c
 801f9d0:	bff00000 	.word	0xbff00000
 801f9d4:	000fffff 	.word	0x000fffff

0801f9d8 <round>:
 801f9d8:	ee10 1a90 	vmov	r1, s1
 801f9dc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801f9e0:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 801f9e4:	2b13      	cmp	r3, #19
 801f9e6:	b510      	push	{r4, lr}
 801f9e8:	ee10 4a10 	vmov	r4, s0
 801f9ec:	dc19      	bgt.n	801fa22 <round+0x4a>
 801f9ee:	2b00      	cmp	r3, #0
 801f9f0:	da09      	bge.n	801fa06 <round+0x2e>
 801f9f2:	3301      	adds	r3, #1
 801f9f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 801f9f8:	d103      	bne.n	801fa02 <round+0x2a>
 801f9fa:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 801f9fe:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 801fa02:	2000      	movs	r0, #0
 801fa04:	e025      	b.n	801fa52 <round+0x7a>
 801fa06:	4815      	ldr	r0, [pc, #84]	; (801fa5c <round+0x84>)
 801fa08:	4118      	asrs	r0, r3
 801fa0a:	ea01 0200 	and.w	r2, r1, r0
 801fa0e:	4322      	orrs	r2, r4
 801fa10:	d00e      	beq.n	801fa30 <round+0x58>
 801fa12:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801fa16:	fa42 f303 	asr.w	r3, r2, r3
 801fa1a:	440b      	add	r3, r1
 801fa1c:	ea23 0100 	bic.w	r1, r3, r0
 801fa20:	e7ef      	b.n	801fa02 <round+0x2a>
 801fa22:	2b33      	cmp	r3, #51	; 0x33
 801fa24:	dd05      	ble.n	801fa32 <round+0x5a>
 801fa26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801fa2a:	d101      	bne.n	801fa30 <round+0x58>
 801fa2c:	ee30 0b00 	vadd.f64	d0, d0, d0
 801fa30:	bd10      	pop	{r4, pc}
 801fa32:	f2a2 4013 	subw	r0, r2, #1043	; 0x413
 801fa36:	f04f 32ff 	mov.w	r2, #4294967295
 801fa3a:	40c2      	lsrs	r2, r0
 801fa3c:	4222      	tst	r2, r4
 801fa3e:	d0f7      	beq.n	801fa30 <round+0x58>
 801fa40:	f1c3 0333 	rsb	r3, r3, #51	; 0x33
 801fa44:	2001      	movs	r0, #1
 801fa46:	4098      	lsls	r0, r3
 801fa48:	1900      	adds	r0, r0, r4
 801fa4a:	bf28      	it	cs
 801fa4c:	3101      	addcs	r1, #1
 801fa4e:	ea20 0002 	bic.w	r0, r0, r2
 801fa52:	460b      	mov	r3, r1
 801fa54:	4602      	mov	r2, r0
 801fa56:	ec43 2b10 	vmov	d0, r2, r3
 801fa5a:	e7e9      	b.n	801fa30 <round+0x58>
 801fa5c:	000fffff 	.word	0x000fffff

0801fa60 <abort>:
 801fa60:	b508      	push	{r3, lr}
 801fa62:	2006      	movs	r0, #6
 801fa64:	f000 fe04 	bl	8020670 <raise>
 801fa68:	2001      	movs	r0, #1
 801fa6a:	f7f6 f84b 	bl	8015b04 <_exit>
	...

0801fa70 <__assert_func>:
 801fa70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801fa72:	4614      	mov	r4, r2
 801fa74:	461a      	mov	r2, r3
 801fa76:	4b09      	ldr	r3, [pc, #36]	; (801fa9c <__assert_func+0x2c>)
 801fa78:	681b      	ldr	r3, [r3, #0]
 801fa7a:	4605      	mov	r5, r0
 801fa7c:	68d8      	ldr	r0, [r3, #12]
 801fa7e:	b14c      	cbz	r4, 801fa94 <__assert_func+0x24>
 801fa80:	4b07      	ldr	r3, [pc, #28]	; (801faa0 <__assert_func+0x30>)
 801fa82:	9100      	str	r1, [sp, #0]
 801fa84:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801fa88:	4906      	ldr	r1, [pc, #24]	; (801faa4 <__assert_func+0x34>)
 801fa8a:	462b      	mov	r3, r5
 801fa8c:	f000 fc52 	bl	8020334 <fiprintf>
 801fa90:	f7ff ffe6 	bl	801fa60 <abort>
 801fa94:	4b04      	ldr	r3, [pc, #16]	; (801faa8 <__assert_func+0x38>)
 801fa96:	461c      	mov	r4, r3
 801fa98:	e7f3      	b.n	801fa82 <__assert_func+0x12>
 801fa9a:	bf00      	nop
 801fa9c:	2400006c 	.word	0x2400006c
 801faa0:	08072b98 	.word	0x08072b98
 801faa4:	08072ba5 	.word	0x08072ba5
 801faa8:	08072bd3 	.word	0x08072bd3

0801faac <atexit>:
 801faac:	2300      	movs	r3, #0
 801faae:	4601      	mov	r1, r0
 801fab0:	461a      	mov	r2, r3
 801fab2:	4618      	mov	r0, r3
 801fab4:	f000 be8a 	b.w	80207cc <__register_exitproc>

0801fab8 <malloc>:
 801fab8:	4b02      	ldr	r3, [pc, #8]	; (801fac4 <malloc+0xc>)
 801faba:	4601      	mov	r1, r0
 801fabc:	6818      	ldr	r0, [r3, #0]
 801fabe:	f000 b82b 	b.w	801fb18 <_malloc_r>
 801fac2:	bf00      	nop
 801fac4:	2400006c 	.word	0x2400006c

0801fac8 <free>:
 801fac8:	4b02      	ldr	r3, [pc, #8]	; (801fad4 <free+0xc>)
 801faca:	4601      	mov	r1, r0
 801facc:	6818      	ldr	r0, [r3, #0]
 801face:	f000 bedb 	b.w	8020888 <_free_r>
 801fad2:	bf00      	nop
 801fad4:	2400006c 	.word	0x2400006c

0801fad8 <sbrk_aligned>:
 801fad8:	b570      	push	{r4, r5, r6, lr}
 801fada:	4e0e      	ldr	r6, [pc, #56]	; (801fb14 <sbrk_aligned+0x3c>)
 801fadc:	460c      	mov	r4, r1
 801fade:	6831      	ldr	r1, [r6, #0]
 801fae0:	4605      	mov	r5, r0
 801fae2:	b911      	cbnz	r1, 801faea <sbrk_aligned+0x12>
 801fae4:	f000 fe14 	bl	8020710 <_sbrk_r>
 801fae8:	6030      	str	r0, [r6, #0]
 801faea:	4621      	mov	r1, r4
 801faec:	4628      	mov	r0, r5
 801faee:	f000 fe0f 	bl	8020710 <_sbrk_r>
 801faf2:	1c43      	adds	r3, r0, #1
 801faf4:	d00a      	beq.n	801fb0c <sbrk_aligned+0x34>
 801faf6:	1cc4      	adds	r4, r0, #3
 801faf8:	f024 0403 	bic.w	r4, r4, #3
 801fafc:	42a0      	cmp	r0, r4
 801fafe:	d007      	beq.n	801fb10 <sbrk_aligned+0x38>
 801fb00:	1a21      	subs	r1, r4, r0
 801fb02:	4628      	mov	r0, r5
 801fb04:	f000 fe04 	bl	8020710 <_sbrk_r>
 801fb08:	3001      	adds	r0, #1
 801fb0a:	d101      	bne.n	801fb10 <sbrk_aligned+0x38>
 801fb0c:	f04f 34ff 	mov.w	r4, #4294967295
 801fb10:	4620      	mov	r0, r4
 801fb12:	bd70      	pop	{r4, r5, r6, pc}
 801fb14:	2404efec 	.word	0x2404efec

0801fb18 <_malloc_r>:
 801fb18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801fb1c:	1ccd      	adds	r5, r1, #3
 801fb1e:	f025 0503 	bic.w	r5, r5, #3
 801fb22:	3508      	adds	r5, #8
 801fb24:	2d0c      	cmp	r5, #12
 801fb26:	bf38      	it	cc
 801fb28:	250c      	movcc	r5, #12
 801fb2a:	2d00      	cmp	r5, #0
 801fb2c:	4607      	mov	r7, r0
 801fb2e:	db01      	blt.n	801fb34 <_malloc_r+0x1c>
 801fb30:	42a9      	cmp	r1, r5
 801fb32:	d905      	bls.n	801fb40 <_malloc_r+0x28>
 801fb34:	230c      	movs	r3, #12
 801fb36:	603b      	str	r3, [r7, #0]
 801fb38:	2600      	movs	r6, #0
 801fb3a:	4630      	mov	r0, r6
 801fb3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801fb40:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801fc14 <_malloc_r+0xfc>
 801fb44:	f000 f868 	bl	801fc18 <__malloc_lock>
 801fb48:	f8d8 3000 	ldr.w	r3, [r8]
 801fb4c:	461c      	mov	r4, r3
 801fb4e:	bb5c      	cbnz	r4, 801fba8 <_malloc_r+0x90>
 801fb50:	4629      	mov	r1, r5
 801fb52:	4638      	mov	r0, r7
 801fb54:	f7ff ffc0 	bl	801fad8 <sbrk_aligned>
 801fb58:	1c43      	adds	r3, r0, #1
 801fb5a:	4604      	mov	r4, r0
 801fb5c:	d155      	bne.n	801fc0a <_malloc_r+0xf2>
 801fb5e:	f8d8 4000 	ldr.w	r4, [r8]
 801fb62:	4626      	mov	r6, r4
 801fb64:	2e00      	cmp	r6, #0
 801fb66:	d145      	bne.n	801fbf4 <_malloc_r+0xdc>
 801fb68:	2c00      	cmp	r4, #0
 801fb6a:	d048      	beq.n	801fbfe <_malloc_r+0xe6>
 801fb6c:	6823      	ldr	r3, [r4, #0]
 801fb6e:	4631      	mov	r1, r6
 801fb70:	4638      	mov	r0, r7
 801fb72:	eb04 0903 	add.w	r9, r4, r3
 801fb76:	f000 fdcb 	bl	8020710 <_sbrk_r>
 801fb7a:	4581      	cmp	r9, r0
 801fb7c:	d13f      	bne.n	801fbfe <_malloc_r+0xe6>
 801fb7e:	6821      	ldr	r1, [r4, #0]
 801fb80:	1a6d      	subs	r5, r5, r1
 801fb82:	4629      	mov	r1, r5
 801fb84:	4638      	mov	r0, r7
 801fb86:	f7ff ffa7 	bl	801fad8 <sbrk_aligned>
 801fb8a:	3001      	adds	r0, #1
 801fb8c:	d037      	beq.n	801fbfe <_malloc_r+0xe6>
 801fb8e:	6823      	ldr	r3, [r4, #0]
 801fb90:	442b      	add	r3, r5
 801fb92:	6023      	str	r3, [r4, #0]
 801fb94:	f8d8 3000 	ldr.w	r3, [r8]
 801fb98:	2b00      	cmp	r3, #0
 801fb9a:	d038      	beq.n	801fc0e <_malloc_r+0xf6>
 801fb9c:	685a      	ldr	r2, [r3, #4]
 801fb9e:	42a2      	cmp	r2, r4
 801fba0:	d12b      	bne.n	801fbfa <_malloc_r+0xe2>
 801fba2:	2200      	movs	r2, #0
 801fba4:	605a      	str	r2, [r3, #4]
 801fba6:	e00f      	b.n	801fbc8 <_malloc_r+0xb0>
 801fba8:	6822      	ldr	r2, [r4, #0]
 801fbaa:	1b52      	subs	r2, r2, r5
 801fbac:	d41f      	bmi.n	801fbee <_malloc_r+0xd6>
 801fbae:	2a0b      	cmp	r2, #11
 801fbb0:	d917      	bls.n	801fbe2 <_malloc_r+0xca>
 801fbb2:	1961      	adds	r1, r4, r5
 801fbb4:	42a3      	cmp	r3, r4
 801fbb6:	6025      	str	r5, [r4, #0]
 801fbb8:	bf18      	it	ne
 801fbba:	6059      	strne	r1, [r3, #4]
 801fbbc:	6863      	ldr	r3, [r4, #4]
 801fbbe:	bf08      	it	eq
 801fbc0:	f8c8 1000 	streq.w	r1, [r8]
 801fbc4:	5162      	str	r2, [r4, r5]
 801fbc6:	604b      	str	r3, [r1, #4]
 801fbc8:	4638      	mov	r0, r7
 801fbca:	f104 060b 	add.w	r6, r4, #11
 801fbce:	f000 f829 	bl	801fc24 <__malloc_unlock>
 801fbd2:	f026 0607 	bic.w	r6, r6, #7
 801fbd6:	1d23      	adds	r3, r4, #4
 801fbd8:	1af2      	subs	r2, r6, r3
 801fbda:	d0ae      	beq.n	801fb3a <_malloc_r+0x22>
 801fbdc:	1b9b      	subs	r3, r3, r6
 801fbde:	50a3      	str	r3, [r4, r2]
 801fbe0:	e7ab      	b.n	801fb3a <_malloc_r+0x22>
 801fbe2:	42a3      	cmp	r3, r4
 801fbe4:	6862      	ldr	r2, [r4, #4]
 801fbe6:	d1dd      	bne.n	801fba4 <_malloc_r+0x8c>
 801fbe8:	f8c8 2000 	str.w	r2, [r8]
 801fbec:	e7ec      	b.n	801fbc8 <_malloc_r+0xb0>
 801fbee:	4623      	mov	r3, r4
 801fbf0:	6864      	ldr	r4, [r4, #4]
 801fbf2:	e7ac      	b.n	801fb4e <_malloc_r+0x36>
 801fbf4:	4634      	mov	r4, r6
 801fbf6:	6876      	ldr	r6, [r6, #4]
 801fbf8:	e7b4      	b.n	801fb64 <_malloc_r+0x4c>
 801fbfa:	4613      	mov	r3, r2
 801fbfc:	e7cc      	b.n	801fb98 <_malloc_r+0x80>
 801fbfe:	230c      	movs	r3, #12
 801fc00:	603b      	str	r3, [r7, #0]
 801fc02:	4638      	mov	r0, r7
 801fc04:	f000 f80e 	bl	801fc24 <__malloc_unlock>
 801fc08:	e797      	b.n	801fb3a <_malloc_r+0x22>
 801fc0a:	6025      	str	r5, [r4, #0]
 801fc0c:	e7dc      	b.n	801fbc8 <_malloc_r+0xb0>
 801fc0e:	605b      	str	r3, [r3, #4]
 801fc10:	deff      	udf	#255	; 0xff
 801fc12:	bf00      	nop
 801fc14:	2404efe8 	.word	0x2404efe8

0801fc18 <__malloc_lock>:
 801fc18:	4801      	ldr	r0, [pc, #4]	; (801fc20 <__malloc_lock+0x8>)
 801fc1a:	f000 bdc6 	b.w	80207aa <__retarget_lock_acquire_recursive>
 801fc1e:	bf00      	nop
 801fc20:	2404f131 	.word	0x2404f131

0801fc24 <__malloc_unlock>:
 801fc24:	4801      	ldr	r0, [pc, #4]	; (801fc2c <__malloc_unlock+0x8>)
 801fc26:	f000 bdc1 	b.w	80207ac <__retarget_lock_release_recursive>
 801fc2a:	bf00      	nop
 801fc2c:	2404f131 	.word	0x2404f131

0801fc30 <__sfputc_r>:
 801fc30:	6893      	ldr	r3, [r2, #8]
 801fc32:	3b01      	subs	r3, #1
 801fc34:	2b00      	cmp	r3, #0
 801fc36:	b410      	push	{r4}
 801fc38:	6093      	str	r3, [r2, #8]
 801fc3a:	da08      	bge.n	801fc4e <__sfputc_r+0x1e>
 801fc3c:	6994      	ldr	r4, [r2, #24]
 801fc3e:	42a3      	cmp	r3, r4
 801fc40:	db01      	blt.n	801fc46 <__sfputc_r+0x16>
 801fc42:	290a      	cmp	r1, #10
 801fc44:	d103      	bne.n	801fc4e <__sfputc_r+0x1e>
 801fc46:	f85d 4b04 	ldr.w	r4, [sp], #4
 801fc4a:	f000 bc1f 	b.w	802048c <__swbuf_r>
 801fc4e:	6813      	ldr	r3, [r2, #0]
 801fc50:	1c58      	adds	r0, r3, #1
 801fc52:	6010      	str	r0, [r2, #0]
 801fc54:	7019      	strb	r1, [r3, #0]
 801fc56:	4608      	mov	r0, r1
 801fc58:	f85d 4b04 	ldr.w	r4, [sp], #4
 801fc5c:	4770      	bx	lr

0801fc5e <__sfputs_r>:
 801fc5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fc60:	4606      	mov	r6, r0
 801fc62:	460f      	mov	r7, r1
 801fc64:	4614      	mov	r4, r2
 801fc66:	18d5      	adds	r5, r2, r3
 801fc68:	42ac      	cmp	r4, r5
 801fc6a:	d101      	bne.n	801fc70 <__sfputs_r+0x12>
 801fc6c:	2000      	movs	r0, #0
 801fc6e:	e007      	b.n	801fc80 <__sfputs_r+0x22>
 801fc70:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fc74:	463a      	mov	r2, r7
 801fc76:	4630      	mov	r0, r6
 801fc78:	f7ff ffda 	bl	801fc30 <__sfputc_r>
 801fc7c:	1c43      	adds	r3, r0, #1
 801fc7e:	d1f3      	bne.n	801fc68 <__sfputs_r+0xa>
 801fc80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801fc84 <_vfiprintf_r>:
 801fc84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fc88:	460d      	mov	r5, r1
 801fc8a:	b09d      	sub	sp, #116	; 0x74
 801fc8c:	4614      	mov	r4, r2
 801fc8e:	4698      	mov	r8, r3
 801fc90:	4606      	mov	r6, r0
 801fc92:	b118      	cbz	r0, 801fc9c <_vfiprintf_r+0x18>
 801fc94:	6a03      	ldr	r3, [r0, #32]
 801fc96:	b90b      	cbnz	r3, 801fc9c <_vfiprintf_r+0x18>
 801fc98:	f000 fb34 	bl	8020304 <__sinit>
 801fc9c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801fc9e:	07d9      	lsls	r1, r3, #31
 801fca0:	d405      	bmi.n	801fcae <_vfiprintf_r+0x2a>
 801fca2:	89ab      	ldrh	r3, [r5, #12]
 801fca4:	059a      	lsls	r2, r3, #22
 801fca6:	d402      	bmi.n	801fcae <_vfiprintf_r+0x2a>
 801fca8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801fcaa:	f000 fd7e 	bl	80207aa <__retarget_lock_acquire_recursive>
 801fcae:	89ab      	ldrh	r3, [r5, #12]
 801fcb0:	071b      	lsls	r3, r3, #28
 801fcb2:	d501      	bpl.n	801fcb8 <_vfiprintf_r+0x34>
 801fcb4:	692b      	ldr	r3, [r5, #16]
 801fcb6:	b99b      	cbnz	r3, 801fce0 <_vfiprintf_r+0x5c>
 801fcb8:	4629      	mov	r1, r5
 801fcba:	4630      	mov	r0, r6
 801fcbc:	f000 fc24 	bl	8020508 <__swsetup_r>
 801fcc0:	b170      	cbz	r0, 801fce0 <_vfiprintf_r+0x5c>
 801fcc2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801fcc4:	07dc      	lsls	r4, r3, #31
 801fcc6:	d504      	bpl.n	801fcd2 <_vfiprintf_r+0x4e>
 801fcc8:	f04f 30ff 	mov.w	r0, #4294967295
 801fccc:	b01d      	add	sp, #116	; 0x74
 801fcce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fcd2:	89ab      	ldrh	r3, [r5, #12]
 801fcd4:	0598      	lsls	r0, r3, #22
 801fcd6:	d4f7      	bmi.n	801fcc8 <_vfiprintf_r+0x44>
 801fcd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801fcda:	f000 fd67 	bl	80207ac <__retarget_lock_release_recursive>
 801fcde:	e7f3      	b.n	801fcc8 <_vfiprintf_r+0x44>
 801fce0:	2300      	movs	r3, #0
 801fce2:	9309      	str	r3, [sp, #36]	; 0x24
 801fce4:	2320      	movs	r3, #32
 801fce6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801fcea:	f8cd 800c 	str.w	r8, [sp, #12]
 801fcee:	2330      	movs	r3, #48	; 0x30
 801fcf0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801fea4 <_vfiprintf_r+0x220>
 801fcf4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801fcf8:	f04f 0901 	mov.w	r9, #1
 801fcfc:	4623      	mov	r3, r4
 801fcfe:	469a      	mov	sl, r3
 801fd00:	f813 2b01 	ldrb.w	r2, [r3], #1
 801fd04:	b10a      	cbz	r2, 801fd0a <_vfiprintf_r+0x86>
 801fd06:	2a25      	cmp	r2, #37	; 0x25
 801fd08:	d1f9      	bne.n	801fcfe <_vfiprintf_r+0x7a>
 801fd0a:	ebba 0b04 	subs.w	fp, sl, r4
 801fd0e:	d00b      	beq.n	801fd28 <_vfiprintf_r+0xa4>
 801fd10:	465b      	mov	r3, fp
 801fd12:	4622      	mov	r2, r4
 801fd14:	4629      	mov	r1, r5
 801fd16:	4630      	mov	r0, r6
 801fd18:	f7ff ffa1 	bl	801fc5e <__sfputs_r>
 801fd1c:	3001      	adds	r0, #1
 801fd1e:	f000 80a9 	beq.w	801fe74 <_vfiprintf_r+0x1f0>
 801fd22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801fd24:	445a      	add	r2, fp
 801fd26:	9209      	str	r2, [sp, #36]	; 0x24
 801fd28:	f89a 3000 	ldrb.w	r3, [sl]
 801fd2c:	2b00      	cmp	r3, #0
 801fd2e:	f000 80a1 	beq.w	801fe74 <_vfiprintf_r+0x1f0>
 801fd32:	2300      	movs	r3, #0
 801fd34:	f04f 32ff 	mov.w	r2, #4294967295
 801fd38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801fd3c:	f10a 0a01 	add.w	sl, sl, #1
 801fd40:	9304      	str	r3, [sp, #16]
 801fd42:	9307      	str	r3, [sp, #28]
 801fd44:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801fd48:	931a      	str	r3, [sp, #104]	; 0x68
 801fd4a:	4654      	mov	r4, sl
 801fd4c:	2205      	movs	r2, #5
 801fd4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fd52:	4854      	ldr	r0, [pc, #336]	; (801fea4 <_vfiprintf_r+0x220>)
 801fd54:	f7e0 fad4 	bl	8000300 <memchr>
 801fd58:	9a04      	ldr	r2, [sp, #16]
 801fd5a:	b9d8      	cbnz	r0, 801fd94 <_vfiprintf_r+0x110>
 801fd5c:	06d1      	lsls	r1, r2, #27
 801fd5e:	bf44      	itt	mi
 801fd60:	2320      	movmi	r3, #32
 801fd62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801fd66:	0713      	lsls	r3, r2, #28
 801fd68:	bf44      	itt	mi
 801fd6a:	232b      	movmi	r3, #43	; 0x2b
 801fd6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801fd70:	f89a 3000 	ldrb.w	r3, [sl]
 801fd74:	2b2a      	cmp	r3, #42	; 0x2a
 801fd76:	d015      	beq.n	801fda4 <_vfiprintf_r+0x120>
 801fd78:	9a07      	ldr	r2, [sp, #28]
 801fd7a:	4654      	mov	r4, sl
 801fd7c:	2000      	movs	r0, #0
 801fd7e:	f04f 0c0a 	mov.w	ip, #10
 801fd82:	4621      	mov	r1, r4
 801fd84:	f811 3b01 	ldrb.w	r3, [r1], #1
 801fd88:	3b30      	subs	r3, #48	; 0x30
 801fd8a:	2b09      	cmp	r3, #9
 801fd8c:	d94d      	bls.n	801fe2a <_vfiprintf_r+0x1a6>
 801fd8e:	b1b0      	cbz	r0, 801fdbe <_vfiprintf_r+0x13a>
 801fd90:	9207      	str	r2, [sp, #28]
 801fd92:	e014      	b.n	801fdbe <_vfiprintf_r+0x13a>
 801fd94:	eba0 0308 	sub.w	r3, r0, r8
 801fd98:	fa09 f303 	lsl.w	r3, r9, r3
 801fd9c:	4313      	orrs	r3, r2
 801fd9e:	9304      	str	r3, [sp, #16]
 801fda0:	46a2      	mov	sl, r4
 801fda2:	e7d2      	b.n	801fd4a <_vfiprintf_r+0xc6>
 801fda4:	9b03      	ldr	r3, [sp, #12]
 801fda6:	1d19      	adds	r1, r3, #4
 801fda8:	681b      	ldr	r3, [r3, #0]
 801fdaa:	9103      	str	r1, [sp, #12]
 801fdac:	2b00      	cmp	r3, #0
 801fdae:	bfbb      	ittet	lt
 801fdb0:	425b      	neglt	r3, r3
 801fdb2:	f042 0202 	orrlt.w	r2, r2, #2
 801fdb6:	9307      	strge	r3, [sp, #28]
 801fdb8:	9307      	strlt	r3, [sp, #28]
 801fdba:	bfb8      	it	lt
 801fdbc:	9204      	strlt	r2, [sp, #16]
 801fdbe:	7823      	ldrb	r3, [r4, #0]
 801fdc0:	2b2e      	cmp	r3, #46	; 0x2e
 801fdc2:	d10c      	bne.n	801fdde <_vfiprintf_r+0x15a>
 801fdc4:	7863      	ldrb	r3, [r4, #1]
 801fdc6:	2b2a      	cmp	r3, #42	; 0x2a
 801fdc8:	d134      	bne.n	801fe34 <_vfiprintf_r+0x1b0>
 801fdca:	9b03      	ldr	r3, [sp, #12]
 801fdcc:	1d1a      	adds	r2, r3, #4
 801fdce:	681b      	ldr	r3, [r3, #0]
 801fdd0:	9203      	str	r2, [sp, #12]
 801fdd2:	2b00      	cmp	r3, #0
 801fdd4:	bfb8      	it	lt
 801fdd6:	f04f 33ff 	movlt.w	r3, #4294967295
 801fdda:	3402      	adds	r4, #2
 801fddc:	9305      	str	r3, [sp, #20]
 801fdde:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801feb4 <_vfiprintf_r+0x230>
 801fde2:	7821      	ldrb	r1, [r4, #0]
 801fde4:	2203      	movs	r2, #3
 801fde6:	4650      	mov	r0, sl
 801fde8:	f7e0 fa8a 	bl	8000300 <memchr>
 801fdec:	b138      	cbz	r0, 801fdfe <_vfiprintf_r+0x17a>
 801fdee:	9b04      	ldr	r3, [sp, #16]
 801fdf0:	eba0 000a 	sub.w	r0, r0, sl
 801fdf4:	2240      	movs	r2, #64	; 0x40
 801fdf6:	4082      	lsls	r2, r0
 801fdf8:	4313      	orrs	r3, r2
 801fdfa:	3401      	adds	r4, #1
 801fdfc:	9304      	str	r3, [sp, #16]
 801fdfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fe02:	4829      	ldr	r0, [pc, #164]	; (801fea8 <_vfiprintf_r+0x224>)
 801fe04:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801fe08:	2206      	movs	r2, #6
 801fe0a:	f7e0 fa79 	bl	8000300 <memchr>
 801fe0e:	2800      	cmp	r0, #0
 801fe10:	d03f      	beq.n	801fe92 <_vfiprintf_r+0x20e>
 801fe12:	4b26      	ldr	r3, [pc, #152]	; (801feac <_vfiprintf_r+0x228>)
 801fe14:	bb1b      	cbnz	r3, 801fe5e <_vfiprintf_r+0x1da>
 801fe16:	9b03      	ldr	r3, [sp, #12]
 801fe18:	3307      	adds	r3, #7
 801fe1a:	f023 0307 	bic.w	r3, r3, #7
 801fe1e:	3308      	adds	r3, #8
 801fe20:	9303      	str	r3, [sp, #12]
 801fe22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fe24:	443b      	add	r3, r7
 801fe26:	9309      	str	r3, [sp, #36]	; 0x24
 801fe28:	e768      	b.n	801fcfc <_vfiprintf_r+0x78>
 801fe2a:	fb0c 3202 	mla	r2, ip, r2, r3
 801fe2e:	460c      	mov	r4, r1
 801fe30:	2001      	movs	r0, #1
 801fe32:	e7a6      	b.n	801fd82 <_vfiprintf_r+0xfe>
 801fe34:	2300      	movs	r3, #0
 801fe36:	3401      	adds	r4, #1
 801fe38:	9305      	str	r3, [sp, #20]
 801fe3a:	4619      	mov	r1, r3
 801fe3c:	f04f 0c0a 	mov.w	ip, #10
 801fe40:	4620      	mov	r0, r4
 801fe42:	f810 2b01 	ldrb.w	r2, [r0], #1
 801fe46:	3a30      	subs	r2, #48	; 0x30
 801fe48:	2a09      	cmp	r2, #9
 801fe4a:	d903      	bls.n	801fe54 <_vfiprintf_r+0x1d0>
 801fe4c:	2b00      	cmp	r3, #0
 801fe4e:	d0c6      	beq.n	801fdde <_vfiprintf_r+0x15a>
 801fe50:	9105      	str	r1, [sp, #20]
 801fe52:	e7c4      	b.n	801fdde <_vfiprintf_r+0x15a>
 801fe54:	fb0c 2101 	mla	r1, ip, r1, r2
 801fe58:	4604      	mov	r4, r0
 801fe5a:	2301      	movs	r3, #1
 801fe5c:	e7f0      	b.n	801fe40 <_vfiprintf_r+0x1bc>
 801fe5e:	ab03      	add	r3, sp, #12
 801fe60:	9300      	str	r3, [sp, #0]
 801fe62:	462a      	mov	r2, r5
 801fe64:	4b12      	ldr	r3, [pc, #72]	; (801feb0 <_vfiprintf_r+0x22c>)
 801fe66:	a904      	add	r1, sp, #16
 801fe68:	4630      	mov	r0, r6
 801fe6a:	f3af 8000 	nop.w
 801fe6e:	4607      	mov	r7, r0
 801fe70:	1c78      	adds	r0, r7, #1
 801fe72:	d1d6      	bne.n	801fe22 <_vfiprintf_r+0x19e>
 801fe74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801fe76:	07d9      	lsls	r1, r3, #31
 801fe78:	d405      	bmi.n	801fe86 <_vfiprintf_r+0x202>
 801fe7a:	89ab      	ldrh	r3, [r5, #12]
 801fe7c:	059a      	lsls	r2, r3, #22
 801fe7e:	d402      	bmi.n	801fe86 <_vfiprintf_r+0x202>
 801fe80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801fe82:	f000 fc93 	bl	80207ac <__retarget_lock_release_recursive>
 801fe86:	89ab      	ldrh	r3, [r5, #12]
 801fe88:	065b      	lsls	r3, r3, #25
 801fe8a:	f53f af1d 	bmi.w	801fcc8 <_vfiprintf_r+0x44>
 801fe8e:	9809      	ldr	r0, [sp, #36]	; 0x24
 801fe90:	e71c      	b.n	801fccc <_vfiprintf_r+0x48>
 801fe92:	ab03      	add	r3, sp, #12
 801fe94:	9300      	str	r3, [sp, #0]
 801fe96:	462a      	mov	r2, r5
 801fe98:	4b05      	ldr	r3, [pc, #20]	; (801feb0 <_vfiprintf_r+0x22c>)
 801fe9a:	a904      	add	r1, sp, #16
 801fe9c:	4630      	mov	r0, r6
 801fe9e:	f000 f883 	bl	801ffa8 <_printf_i>
 801fea2:	e7e4      	b.n	801fe6e <_vfiprintf_r+0x1ea>
 801fea4:	08072bd4 	.word	0x08072bd4
 801fea8:	08072bde 	.word	0x08072bde
 801feac:	00000000 	.word	0x00000000
 801feb0:	0801fc5f 	.word	0x0801fc5f
 801feb4:	08072bda 	.word	0x08072bda

0801feb8 <vfiprintf>:
 801feb8:	4613      	mov	r3, r2
 801feba:	460a      	mov	r2, r1
 801febc:	4601      	mov	r1, r0
 801febe:	4802      	ldr	r0, [pc, #8]	; (801fec8 <vfiprintf+0x10>)
 801fec0:	6800      	ldr	r0, [r0, #0]
 801fec2:	f7ff bedf 	b.w	801fc84 <_vfiprintf_r>
 801fec6:	bf00      	nop
 801fec8:	2400006c 	.word	0x2400006c

0801fecc <_printf_common>:
 801fecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fed0:	4616      	mov	r6, r2
 801fed2:	4699      	mov	r9, r3
 801fed4:	688a      	ldr	r2, [r1, #8]
 801fed6:	690b      	ldr	r3, [r1, #16]
 801fed8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801fedc:	4293      	cmp	r3, r2
 801fede:	bfb8      	it	lt
 801fee0:	4613      	movlt	r3, r2
 801fee2:	6033      	str	r3, [r6, #0]
 801fee4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801fee8:	4607      	mov	r7, r0
 801feea:	460c      	mov	r4, r1
 801feec:	b10a      	cbz	r2, 801fef2 <_printf_common+0x26>
 801feee:	3301      	adds	r3, #1
 801fef0:	6033      	str	r3, [r6, #0]
 801fef2:	6823      	ldr	r3, [r4, #0]
 801fef4:	0699      	lsls	r1, r3, #26
 801fef6:	bf42      	ittt	mi
 801fef8:	6833      	ldrmi	r3, [r6, #0]
 801fefa:	3302      	addmi	r3, #2
 801fefc:	6033      	strmi	r3, [r6, #0]
 801fefe:	6825      	ldr	r5, [r4, #0]
 801ff00:	f015 0506 	ands.w	r5, r5, #6
 801ff04:	d106      	bne.n	801ff14 <_printf_common+0x48>
 801ff06:	f104 0a19 	add.w	sl, r4, #25
 801ff0a:	68e3      	ldr	r3, [r4, #12]
 801ff0c:	6832      	ldr	r2, [r6, #0]
 801ff0e:	1a9b      	subs	r3, r3, r2
 801ff10:	42ab      	cmp	r3, r5
 801ff12:	dc26      	bgt.n	801ff62 <_printf_common+0x96>
 801ff14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801ff18:	1e13      	subs	r3, r2, #0
 801ff1a:	6822      	ldr	r2, [r4, #0]
 801ff1c:	bf18      	it	ne
 801ff1e:	2301      	movne	r3, #1
 801ff20:	0692      	lsls	r2, r2, #26
 801ff22:	d42b      	bmi.n	801ff7c <_printf_common+0xb0>
 801ff24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801ff28:	4649      	mov	r1, r9
 801ff2a:	4638      	mov	r0, r7
 801ff2c:	47c0      	blx	r8
 801ff2e:	3001      	adds	r0, #1
 801ff30:	d01e      	beq.n	801ff70 <_printf_common+0xa4>
 801ff32:	6823      	ldr	r3, [r4, #0]
 801ff34:	6922      	ldr	r2, [r4, #16]
 801ff36:	f003 0306 	and.w	r3, r3, #6
 801ff3a:	2b04      	cmp	r3, #4
 801ff3c:	bf02      	ittt	eq
 801ff3e:	68e5      	ldreq	r5, [r4, #12]
 801ff40:	6833      	ldreq	r3, [r6, #0]
 801ff42:	1aed      	subeq	r5, r5, r3
 801ff44:	68a3      	ldr	r3, [r4, #8]
 801ff46:	bf0c      	ite	eq
 801ff48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801ff4c:	2500      	movne	r5, #0
 801ff4e:	4293      	cmp	r3, r2
 801ff50:	bfc4      	itt	gt
 801ff52:	1a9b      	subgt	r3, r3, r2
 801ff54:	18ed      	addgt	r5, r5, r3
 801ff56:	2600      	movs	r6, #0
 801ff58:	341a      	adds	r4, #26
 801ff5a:	42b5      	cmp	r5, r6
 801ff5c:	d11a      	bne.n	801ff94 <_printf_common+0xc8>
 801ff5e:	2000      	movs	r0, #0
 801ff60:	e008      	b.n	801ff74 <_printf_common+0xa8>
 801ff62:	2301      	movs	r3, #1
 801ff64:	4652      	mov	r2, sl
 801ff66:	4649      	mov	r1, r9
 801ff68:	4638      	mov	r0, r7
 801ff6a:	47c0      	blx	r8
 801ff6c:	3001      	adds	r0, #1
 801ff6e:	d103      	bne.n	801ff78 <_printf_common+0xac>
 801ff70:	f04f 30ff 	mov.w	r0, #4294967295
 801ff74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ff78:	3501      	adds	r5, #1
 801ff7a:	e7c6      	b.n	801ff0a <_printf_common+0x3e>
 801ff7c:	18e1      	adds	r1, r4, r3
 801ff7e:	1c5a      	adds	r2, r3, #1
 801ff80:	2030      	movs	r0, #48	; 0x30
 801ff82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801ff86:	4422      	add	r2, r4
 801ff88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801ff8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801ff90:	3302      	adds	r3, #2
 801ff92:	e7c7      	b.n	801ff24 <_printf_common+0x58>
 801ff94:	2301      	movs	r3, #1
 801ff96:	4622      	mov	r2, r4
 801ff98:	4649      	mov	r1, r9
 801ff9a:	4638      	mov	r0, r7
 801ff9c:	47c0      	blx	r8
 801ff9e:	3001      	adds	r0, #1
 801ffa0:	d0e6      	beq.n	801ff70 <_printf_common+0xa4>
 801ffa2:	3601      	adds	r6, #1
 801ffa4:	e7d9      	b.n	801ff5a <_printf_common+0x8e>
	...

0801ffa8 <_printf_i>:
 801ffa8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801ffac:	7e0f      	ldrb	r7, [r1, #24]
 801ffae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801ffb0:	2f78      	cmp	r7, #120	; 0x78
 801ffb2:	4691      	mov	r9, r2
 801ffb4:	4680      	mov	r8, r0
 801ffb6:	460c      	mov	r4, r1
 801ffb8:	469a      	mov	sl, r3
 801ffba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801ffbe:	d807      	bhi.n	801ffd0 <_printf_i+0x28>
 801ffc0:	2f62      	cmp	r7, #98	; 0x62
 801ffc2:	d80a      	bhi.n	801ffda <_printf_i+0x32>
 801ffc4:	2f00      	cmp	r7, #0
 801ffc6:	f000 80d4 	beq.w	8020172 <_printf_i+0x1ca>
 801ffca:	2f58      	cmp	r7, #88	; 0x58
 801ffcc:	f000 80c0 	beq.w	8020150 <_printf_i+0x1a8>
 801ffd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801ffd4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801ffd8:	e03a      	b.n	8020050 <_printf_i+0xa8>
 801ffda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801ffde:	2b15      	cmp	r3, #21
 801ffe0:	d8f6      	bhi.n	801ffd0 <_printf_i+0x28>
 801ffe2:	a101      	add	r1, pc, #4	; (adr r1, 801ffe8 <_printf_i+0x40>)
 801ffe4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801ffe8:	08020041 	.word	0x08020041
 801ffec:	08020055 	.word	0x08020055
 801fff0:	0801ffd1 	.word	0x0801ffd1
 801fff4:	0801ffd1 	.word	0x0801ffd1
 801fff8:	0801ffd1 	.word	0x0801ffd1
 801fffc:	0801ffd1 	.word	0x0801ffd1
 8020000:	08020055 	.word	0x08020055
 8020004:	0801ffd1 	.word	0x0801ffd1
 8020008:	0801ffd1 	.word	0x0801ffd1
 802000c:	0801ffd1 	.word	0x0801ffd1
 8020010:	0801ffd1 	.word	0x0801ffd1
 8020014:	08020159 	.word	0x08020159
 8020018:	08020081 	.word	0x08020081
 802001c:	08020113 	.word	0x08020113
 8020020:	0801ffd1 	.word	0x0801ffd1
 8020024:	0801ffd1 	.word	0x0801ffd1
 8020028:	0802017b 	.word	0x0802017b
 802002c:	0801ffd1 	.word	0x0801ffd1
 8020030:	08020081 	.word	0x08020081
 8020034:	0801ffd1 	.word	0x0801ffd1
 8020038:	0801ffd1 	.word	0x0801ffd1
 802003c:	0802011b 	.word	0x0802011b
 8020040:	682b      	ldr	r3, [r5, #0]
 8020042:	1d1a      	adds	r2, r3, #4
 8020044:	681b      	ldr	r3, [r3, #0]
 8020046:	602a      	str	r2, [r5, #0]
 8020048:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802004c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8020050:	2301      	movs	r3, #1
 8020052:	e09f      	b.n	8020194 <_printf_i+0x1ec>
 8020054:	6820      	ldr	r0, [r4, #0]
 8020056:	682b      	ldr	r3, [r5, #0]
 8020058:	0607      	lsls	r7, r0, #24
 802005a:	f103 0104 	add.w	r1, r3, #4
 802005e:	6029      	str	r1, [r5, #0]
 8020060:	d501      	bpl.n	8020066 <_printf_i+0xbe>
 8020062:	681e      	ldr	r6, [r3, #0]
 8020064:	e003      	b.n	802006e <_printf_i+0xc6>
 8020066:	0646      	lsls	r6, r0, #25
 8020068:	d5fb      	bpl.n	8020062 <_printf_i+0xba>
 802006a:	f9b3 6000 	ldrsh.w	r6, [r3]
 802006e:	2e00      	cmp	r6, #0
 8020070:	da03      	bge.n	802007a <_printf_i+0xd2>
 8020072:	232d      	movs	r3, #45	; 0x2d
 8020074:	4276      	negs	r6, r6
 8020076:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802007a:	485a      	ldr	r0, [pc, #360]	; (80201e4 <_printf_i+0x23c>)
 802007c:	230a      	movs	r3, #10
 802007e:	e012      	b.n	80200a6 <_printf_i+0xfe>
 8020080:	682b      	ldr	r3, [r5, #0]
 8020082:	6820      	ldr	r0, [r4, #0]
 8020084:	1d19      	adds	r1, r3, #4
 8020086:	6029      	str	r1, [r5, #0]
 8020088:	0605      	lsls	r5, r0, #24
 802008a:	d501      	bpl.n	8020090 <_printf_i+0xe8>
 802008c:	681e      	ldr	r6, [r3, #0]
 802008e:	e002      	b.n	8020096 <_printf_i+0xee>
 8020090:	0641      	lsls	r1, r0, #25
 8020092:	d5fb      	bpl.n	802008c <_printf_i+0xe4>
 8020094:	881e      	ldrh	r6, [r3, #0]
 8020096:	4853      	ldr	r0, [pc, #332]	; (80201e4 <_printf_i+0x23c>)
 8020098:	2f6f      	cmp	r7, #111	; 0x6f
 802009a:	bf0c      	ite	eq
 802009c:	2308      	moveq	r3, #8
 802009e:	230a      	movne	r3, #10
 80200a0:	2100      	movs	r1, #0
 80200a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80200a6:	6865      	ldr	r5, [r4, #4]
 80200a8:	60a5      	str	r5, [r4, #8]
 80200aa:	2d00      	cmp	r5, #0
 80200ac:	bfa2      	ittt	ge
 80200ae:	6821      	ldrge	r1, [r4, #0]
 80200b0:	f021 0104 	bicge.w	r1, r1, #4
 80200b4:	6021      	strge	r1, [r4, #0]
 80200b6:	b90e      	cbnz	r6, 80200bc <_printf_i+0x114>
 80200b8:	2d00      	cmp	r5, #0
 80200ba:	d04b      	beq.n	8020154 <_printf_i+0x1ac>
 80200bc:	4615      	mov	r5, r2
 80200be:	fbb6 f1f3 	udiv	r1, r6, r3
 80200c2:	fb03 6711 	mls	r7, r3, r1, r6
 80200c6:	5dc7      	ldrb	r7, [r0, r7]
 80200c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80200cc:	4637      	mov	r7, r6
 80200ce:	42bb      	cmp	r3, r7
 80200d0:	460e      	mov	r6, r1
 80200d2:	d9f4      	bls.n	80200be <_printf_i+0x116>
 80200d4:	2b08      	cmp	r3, #8
 80200d6:	d10b      	bne.n	80200f0 <_printf_i+0x148>
 80200d8:	6823      	ldr	r3, [r4, #0]
 80200da:	07de      	lsls	r6, r3, #31
 80200dc:	d508      	bpl.n	80200f0 <_printf_i+0x148>
 80200de:	6923      	ldr	r3, [r4, #16]
 80200e0:	6861      	ldr	r1, [r4, #4]
 80200e2:	4299      	cmp	r1, r3
 80200e4:	bfde      	ittt	le
 80200e6:	2330      	movle	r3, #48	; 0x30
 80200e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80200ec:	f105 35ff 	addle.w	r5, r5, #4294967295
 80200f0:	1b52      	subs	r2, r2, r5
 80200f2:	6122      	str	r2, [r4, #16]
 80200f4:	f8cd a000 	str.w	sl, [sp]
 80200f8:	464b      	mov	r3, r9
 80200fa:	aa03      	add	r2, sp, #12
 80200fc:	4621      	mov	r1, r4
 80200fe:	4640      	mov	r0, r8
 8020100:	f7ff fee4 	bl	801fecc <_printf_common>
 8020104:	3001      	adds	r0, #1
 8020106:	d14a      	bne.n	802019e <_printf_i+0x1f6>
 8020108:	f04f 30ff 	mov.w	r0, #4294967295
 802010c:	b004      	add	sp, #16
 802010e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020112:	6823      	ldr	r3, [r4, #0]
 8020114:	f043 0320 	orr.w	r3, r3, #32
 8020118:	6023      	str	r3, [r4, #0]
 802011a:	4833      	ldr	r0, [pc, #204]	; (80201e8 <_printf_i+0x240>)
 802011c:	2778      	movs	r7, #120	; 0x78
 802011e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8020122:	6823      	ldr	r3, [r4, #0]
 8020124:	6829      	ldr	r1, [r5, #0]
 8020126:	061f      	lsls	r7, r3, #24
 8020128:	f851 6b04 	ldr.w	r6, [r1], #4
 802012c:	d402      	bmi.n	8020134 <_printf_i+0x18c>
 802012e:	065f      	lsls	r7, r3, #25
 8020130:	bf48      	it	mi
 8020132:	b2b6      	uxthmi	r6, r6
 8020134:	07df      	lsls	r7, r3, #31
 8020136:	bf48      	it	mi
 8020138:	f043 0320 	orrmi.w	r3, r3, #32
 802013c:	6029      	str	r1, [r5, #0]
 802013e:	bf48      	it	mi
 8020140:	6023      	strmi	r3, [r4, #0]
 8020142:	b91e      	cbnz	r6, 802014c <_printf_i+0x1a4>
 8020144:	6823      	ldr	r3, [r4, #0]
 8020146:	f023 0320 	bic.w	r3, r3, #32
 802014a:	6023      	str	r3, [r4, #0]
 802014c:	2310      	movs	r3, #16
 802014e:	e7a7      	b.n	80200a0 <_printf_i+0xf8>
 8020150:	4824      	ldr	r0, [pc, #144]	; (80201e4 <_printf_i+0x23c>)
 8020152:	e7e4      	b.n	802011e <_printf_i+0x176>
 8020154:	4615      	mov	r5, r2
 8020156:	e7bd      	b.n	80200d4 <_printf_i+0x12c>
 8020158:	682b      	ldr	r3, [r5, #0]
 802015a:	6826      	ldr	r6, [r4, #0]
 802015c:	6961      	ldr	r1, [r4, #20]
 802015e:	1d18      	adds	r0, r3, #4
 8020160:	6028      	str	r0, [r5, #0]
 8020162:	0635      	lsls	r5, r6, #24
 8020164:	681b      	ldr	r3, [r3, #0]
 8020166:	d501      	bpl.n	802016c <_printf_i+0x1c4>
 8020168:	6019      	str	r1, [r3, #0]
 802016a:	e002      	b.n	8020172 <_printf_i+0x1ca>
 802016c:	0670      	lsls	r0, r6, #25
 802016e:	d5fb      	bpl.n	8020168 <_printf_i+0x1c0>
 8020170:	8019      	strh	r1, [r3, #0]
 8020172:	2300      	movs	r3, #0
 8020174:	6123      	str	r3, [r4, #16]
 8020176:	4615      	mov	r5, r2
 8020178:	e7bc      	b.n	80200f4 <_printf_i+0x14c>
 802017a:	682b      	ldr	r3, [r5, #0]
 802017c:	1d1a      	adds	r2, r3, #4
 802017e:	602a      	str	r2, [r5, #0]
 8020180:	681d      	ldr	r5, [r3, #0]
 8020182:	6862      	ldr	r2, [r4, #4]
 8020184:	2100      	movs	r1, #0
 8020186:	4628      	mov	r0, r5
 8020188:	f7e0 f8ba 	bl	8000300 <memchr>
 802018c:	b108      	cbz	r0, 8020192 <_printf_i+0x1ea>
 802018e:	1b40      	subs	r0, r0, r5
 8020190:	6060      	str	r0, [r4, #4]
 8020192:	6863      	ldr	r3, [r4, #4]
 8020194:	6123      	str	r3, [r4, #16]
 8020196:	2300      	movs	r3, #0
 8020198:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802019c:	e7aa      	b.n	80200f4 <_printf_i+0x14c>
 802019e:	6923      	ldr	r3, [r4, #16]
 80201a0:	462a      	mov	r2, r5
 80201a2:	4649      	mov	r1, r9
 80201a4:	4640      	mov	r0, r8
 80201a6:	47d0      	blx	sl
 80201a8:	3001      	adds	r0, #1
 80201aa:	d0ad      	beq.n	8020108 <_printf_i+0x160>
 80201ac:	6823      	ldr	r3, [r4, #0]
 80201ae:	079b      	lsls	r3, r3, #30
 80201b0:	d413      	bmi.n	80201da <_printf_i+0x232>
 80201b2:	68e0      	ldr	r0, [r4, #12]
 80201b4:	9b03      	ldr	r3, [sp, #12]
 80201b6:	4298      	cmp	r0, r3
 80201b8:	bfb8      	it	lt
 80201ba:	4618      	movlt	r0, r3
 80201bc:	e7a6      	b.n	802010c <_printf_i+0x164>
 80201be:	2301      	movs	r3, #1
 80201c0:	4632      	mov	r2, r6
 80201c2:	4649      	mov	r1, r9
 80201c4:	4640      	mov	r0, r8
 80201c6:	47d0      	blx	sl
 80201c8:	3001      	adds	r0, #1
 80201ca:	d09d      	beq.n	8020108 <_printf_i+0x160>
 80201cc:	3501      	adds	r5, #1
 80201ce:	68e3      	ldr	r3, [r4, #12]
 80201d0:	9903      	ldr	r1, [sp, #12]
 80201d2:	1a5b      	subs	r3, r3, r1
 80201d4:	42ab      	cmp	r3, r5
 80201d6:	dcf2      	bgt.n	80201be <_printf_i+0x216>
 80201d8:	e7eb      	b.n	80201b2 <_printf_i+0x20a>
 80201da:	2500      	movs	r5, #0
 80201dc:	f104 0619 	add.w	r6, r4, #25
 80201e0:	e7f5      	b.n	80201ce <_printf_i+0x226>
 80201e2:	bf00      	nop
 80201e4:	08072be5 	.word	0x08072be5
 80201e8:	08072bf6 	.word	0x08072bf6

080201ec <std>:
 80201ec:	2300      	movs	r3, #0
 80201ee:	b510      	push	{r4, lr}
 80201f0:	4604      	mov	r4, r0
 80201f2:	e9c0 3300 	strd	r3, r3, [r0]
 80201f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80201fa:	6083      	str	r3, [r0, #8]
 80201fc:	8181      	strh	r1, [r0, #12]
 80201fe:	6643      	str	r3, [r0, #100]	; 0x64
 8020200:	81c2      	strh	r2, [r0, #14]
 8020202:	6183      	str	r3, [r0, #24]
 8020204:	4619      	mov	r1, r3
 8020206:	2208      	movs	r2, #8
 8020208:	305c      	adds	r0, #92	; 0x5c
 802020a:	f000 f9ef 	bl	80205ec <memset>
 802020e:	4b0d      	ldr	r3, [pc, #52]	; (8020244 <std+0x58>)
 8020210:	6263      	str	r3, [r4, #36]	; 0x24
 8020212:	4b0d      	ldr	r3, [pc, #52]	; (8020248 <std+0x5c>)
 8020214:	62a3      	str	r3, [r4, #40]	; 0x28
 8020216:	4b0d      	ldr	r3, [pc, #52]	; (802024c <std+0x60>)
 8020218:	62e3      	str	r3, [r4, #44]	; 0x2c
 802021a:	4b0d      	ldr	r3, [pc, #52]	; (8020250 <std+0x64>)
 802021c:	6323      	str	r3, [r4, #48]	; 0x30
 802021e:	4b0d      	ldr	r3, [pc, #52]	; (8020254 <std+0x68>)
 8020220:	6224      	str	r4, [r4, #32]
 8020222:	429c      	cmp	r4, r3
 8020224:	d006      	beq.n	8020234 <std+0x48>
 8020226:	f103 0268 	add.w	r2, r3, #104	; 0x68
 802022a:	4294      	cmp	r4, r2
 802022c:	d002      	beq.n	8020234 <std+0x48>
 802022e:	33d0      	adds	r3, #208	; 0xd0
 8020230:	429c      	cmp	r4, r3
 8020232:	d105      	bne.n	8020240 <std+0x54>
 8020234:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8020238:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802023c:	f000 bab4 	b.w	80207a8 <__retarget_lock_init_recursive>
 8020240:	bd10      	pop	{r4, pc}
 8020242:	bf00      	nop
 8020244:	08020395 	.word	0x08020395
 8020248:	080203b7 	.word	0x080203b7
 802024c:	080203ef 	.word	0x080203ef
 8020250:	08020413 	.word	0x08020413
 8020254:	2404eff0 	.word	0x2404eff0

08020258 <stdio_exit_handler>:
 8020258:	4a02      	ldr	r2, [pc, #8]	; (8020264 <stdio_exit_handler+0xc>)
 802025a:	4903      	ldr	r1, [pc, #12]	; (8020268 <stdio_exit_handler+0x10>)
 802025c:	4803      	ldr	r0, [pc, #12]	; (802026c <stdio_exit_handler+0x14>)
 802025e:	f000 b87b 	b.w	8020358 <_fwalk_sglue>
 8020262:	bf00      	nop
 8020264:	24000014 	.word	0x24000014
 8020268:	08020d3d 	.word	0x08020d3d
 802026c:	24000020 	.word	0x24000020

08020270 <cleanup_stdio>:
 8020270:	6841      	ldr	r1, [r0, #4]
 8020272:	4b0c      	ldr	r3, [pc, #48]	; (80202a4 <cleanup_stdio+0x34>)
 8020274:	4299      	cmp	r1, r3
 8020276:	b510      	push	{r4, lr}
 8020278:	4604      	mov	r4, r0
 802027a:	d001      	beq.n	8020280 <cleanup_stdio+0x10>
 802027c:	f000 fd5e 	bl	8020d3c <_fflush_r>
 8020280:	68a1      	ldr	r1, [r4, #8]
 8020282:	4b09      	ldr	r3, [pc, #36]	; (80202a8 <cleanup_stdio+0x38>)
 8020284:	4299      	cmp	r1, r3
 8020286:	d002      	beq.n	802028e <cleanup_stdio+0x1e>
 8020288:	4620      	mov	r0, r4
 802028a:	f000 fd57 	bl	8020d3c <_fflush_r>
 802028e:	68e1      	ldr	r1, [r4, #12]
 8020290:	4b06      	ldr	r3, [pc, #24]	; (80202ac <cleanup_stdio+0x3c>)
 8020292:	4299      	cmp	r1, r3
 8020294:	d004      	beq.n	80202a0 <cleanup_stdio+0x30>
 8020296:	4620      	mov	r0, r4
 8020298:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802029c:	f000 bd4e 	b.w	8020d3c <_fflush_r>
 80202a0:	bd10      	pop	{r4, pc}
 80202a2:	bf00      	nop
 80202a4:	2404eff0 	.word	0x2404eff0
 80202a8:	2404f058 	.word	0x2404f058
 80202ac:	2404f0c0 	.word	0x2404f0c0

080202b0 <global_stdio_init.part.0>:
 80202b0:	b510      	push	{r4, lr}
 80202b2:	4b0b      	ldr	r3, [pc, #44]	; (80202e0 <global_stdio_init.part.0+0x30>)
 80202b4:	4c0b      	ldr	r4, [pc, #44]	; (80202e4 <global_stdio_init.part.0+0x34>)
 80202b6:	4a0c      	ldr	r2, [pc, #48]	; (80202e8 <global_stdio_init.part.0+0x38>)
 80202b8:	601a      	str	r2, [r3, #0]
 80202ba:	4620      	mov	r0, r4
 80202bc:	2200      	movs	r2, #0
 80202be:	2104      	movs	r1, #4
 80202c0:	f7ff ff94 	bl	80201ec <std>
 80202c4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80202c8:	2201      	movs	r2, #1
 80202ca:	2109      	movs	r1, #9
 80202cc:	f7ff ff8e 	bl	80201ec <std>
 80202d0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80202d4:	2202      	movs	r2, #2
 80202d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80202da:	2112      	movs	r1, #18
 80202dc:	f7ff bf86 	b.w	80201ec <std>
 80202e0:	2404f128 	.word	0x2404f128
 80202e4:	2404eff0 	.word	0x2404eff0
 80202e8:	08020259 	.word	0x08020259

080202ec <__sfp_lock_acquire>:
 80202ec:	4801      	ldr	r0, [pc, #4]	; (80202f4 <__sfp_lock_acquire+0x8>)
 80202ee:	f000 ba5c 	b.w	80207aa <__retarget_lock_acquire_recursive>
 80202f2:	bf00      	nop
 80202f4:	2404f132 	.word	0x2404f132

080202f8 <__sfp_lock_release>:
 80202f8:	4801      	ldr	r0, [pc, #4]	; (8020300 <__sfp_lock_release+0x8>)
 80202fa:	f000 ba57 	b.w	80207ac <__retarget_lock_release_recursive>
 80202fe:	bf00      	nop
 8020300:	2404f132 	.word	0x2404f132

08020304 <__sinit>:
 8020304:	b510      	push	{r4, lr}
 8020306:	4604      	mov	r4, r0
 8020308:	f7ff fff0 	bl	80202ec <__sfp_lock_acquire>
 802030c:	6a23      	ldr	r3, [r4, #32]
 802030e:	b11b      	cbz	r3, 8020318 <__sinit+0x14>
 8020310:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020314:	f7ff bff0 	b.w	80202f8 <__sfp_lock_release>
 8020318:	4b04      	ldr	r3, [pc, #16]	; (802032c <__sinit+0x28>)
 802031a:	6223      	str	r3, [r4, #32]
 802031c:	4b04      	ldr	r3, [pc, #16]	; (8020330 <__sinit+0x2c>)
 802031e:	681b      	ldr	r3, [r3, #0]
 8020320:	2b00      	cmp	r3, #0
 8020322:	d1f5      	bne.n	8020310 <__sinit+0xc>
 8020324:	f7ff ffc4 	bl	80202b0 <global_stdio_init.part.0>
 8020328:	e7f2      	b.n	8020310 <__sinit+0xc>
 802032a:	bf00      	nop
 802032c:	08020271 	.word	0x08020271
 8020330:	2404f128 	.word	0x2404f128

08020334 <fiprintf>:
 8020334:	b40e      	push	{r1, r2, r3}
 8020336:	b503      	push	{r0, r1, lr}
 8020338:	4601      	mov	r1, r0
 802033a:	ab03      	add	r3, sp, #12
 802033c:	4805      	ldr	r0, [pc, #20]	; (8020354 <fiprintf+0x20>)
 802033e:	f853 2b04 	ldr.w	r2, [r3], #4
 8020342:	6800      	ldr	r0, [r0, #0]
 8020344:	9301      	str	r3, [sp, #4]
 8020346:	f7ff fc9d 	bl	801fc84 <_vfiprintf_r>
 802034a:	b002      	add	sp, #8
 802034c:	f85d eb04 	ldr.w	lr, [sp], #4
 8020350:	b003      	add	sp, #12
 8020352:	4770      	bx	lr
 8020354:	2400006c 	.word	0x2400006c

08020358 <_fwalk_sglue>:
 8020358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802035c:	4607      	mov	r7, r0
 802035e:	4688      	mov	r8, r1
 8020360:	4614      	mov	r4, r2
 8020362:	2600      	movs	r6, #0
 8020364:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8020368:	f1b9 0901 	subs.w	r9, r9, #1
 802036c:	d505      	bpl.n	802037a <_fwalk_sglue+0x22>
 802036e:	6824      	ldr	r4, [r4, #0]
 8020370:	2c00      	cmp	r4, #0
 8020372:	d1f7      	bne.n	8020364 <_fwalk_sglue+0xc>
 8020374:	4630      	mov	r0, r6
 8020376:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802037a:	89ab      	ldrh	r3, [r5, #12]
 802037c:	2b01      	cmp	r3, #1
 802037e:	d907      	bls.n	8020390 <_fwalk_sglue+0x38>
 8020380:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8020384:	3301      	adds	r3, #1
 8020386:	d003      	beq.n	8020390 <_fwalk_sglue+0x38>
 8020388:	4629      	mov	r1, r5
 802038a:	4638      	mov	r0, r7
 802038c:	47c0      	blx	r8
 802038e:	4306      	orrs	r6, r0
 8020390:	3568      	adds	r5, #104	; 0x68
 8020392:	e7e9      	b.n	8020368 <_fwalk_sglue+0x10>

08020394 <__sread>:
 8020394:	b510      	push	{r4, lr}
 8020396:	460c      	mov	r4, r1
 8020398:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802039c:	f000 f992 	bl	80206c4 <_read_r>
 80203a0:	2800      	cmp	r0, #0
 80203a2:	bfab      	itete	ge
 80203a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80203a6:	89a3      	ldrhlt	r3, [r4, #12]
 80203a8:	181b      	addge	r3, r3, r0
 80203aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80203ae:	bfac      	ite	ge
 80203b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80203b2:	81a3      	strhlt	r3, [r4, #12]
 80203b4:	bd10      	pop	{r4, pc}

080203b6 <__swrite>:
 80203b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80203ba:	461f      	mov	r7, r3
 80203bc:	898b      	ldrh	r3, [r1, #12]
 80203be:	05db      	lsls	r3, r3, #23
 80203c0:	4605      	mov	r5, r0
 80203c2:	460c      	mov	r4, r1
 80203c4:	4616      	mov	r6, r2
 80203c6:	d505      	bpl.n	80203d4 <__swrite+0x1e>
 80203c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80203cc:	2302      	movs	r3, #2
 80203ce:	2200      	movs	r2, #0
 80203d0:	f000 f966 	bl	80206a0 <_lseek_r>
 80203d4:	89a3      	ldrh	r3, [r4, #12]
 80203d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80203da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80203de:	81a3      	strh	r3, [r4, #12]
 80203e0:	4632      	mov	r2, r6
 80203e2:	463b      	mov	r3, r7
 80203e4:	4628      	mov	r0, r5
 80203e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80203ea:	f000 b9a1 	b.w	8020730 <_write_r>

080203ee <__sseek>:
 80203ee:	b510      	push	{r4, lr}
 80203f0:	460c      	mov	r4, r1
 80203f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80203f6:	f000 f953 	bl	80206a0 <_lseek_r>
 80203fa:	1c43      	adds	r3, r0, #1
 80203fc:	89a3      	ldrh	r3, [r4, #12]
 80203fe:	bf15      	itete	ne
 8020400:	6560      	strne	r0, [r4, #84]	; 0x54
 8020402:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8020406:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802040a:	81a3      	strheq	r3, [r4, #12]
 802040c:	bf18      	it	ne
 802040e:	81a3      	strhne	r3, [r4, #12]
 8020410:	bd10      	pop	{r4, pc}

08020412 <__sclose>:
 8020412:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020416:	f000 b933 	b.w	8020680 <_close_r>

0802041a <_vsniprintf_r>:
 802041a:	b530      	push	{r4, r5, lr}
 802041c:	4614      	mov	r4, r2
 802041e:	2c00      	cmp	r4, #0
 8020420:	b09b      	sub	sp, #108	; 0x6c
 8020422:	4605      	mov	r5, r0
 8020424:	461a      	mov	r2, r3
 8020426:	da05      	bge.n	8020434 <_vsniprintf_r+0x1a>
 8020428:	238b      	movs	r3, #139	; 0x8b
 802042a:	6003      	str	r3, [r0, #0]
 802042c:	f04f 30ff 	mov.w	r0, #4294967295
 8020430:	b01b      	add	sp, #108	; 0x6c
 8020432:	bd30      	pop	{r4, r5, pc}
 8020434:	f44f 7302 	mov.w	r3, #520	; 0x208
 8020438:	f8ad 300c 	strh.w	r3, [sp, #12]
 802043c:	bf14      	ite	ne
 802043e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8020442:	4623      	moveq	r3, r4
 8020444:	9302      	str	r3, [sp, #8]
 8020446:	9305      	str	r3, [sp, #20]
 8020448:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802044c:	9100      	str	r1, [sp, #0]
 802044e:	9104      	str	r1, [sp, #16]
 8020450:	f8ad 300e 	strh.w	r3, [sp, #14]
 8020454:	4669      	mov	r1, sp
 8020456:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8020458:	f000 faec 	bl	8020a34 <_svfiprintf_r>
 802045c:	1c43      	adds	r3, r0, #1
 802045e:	bfbc      	itt	lt
 8020460:	238b      	movlt	r3, #139	; 0x8b
 8020462:	602b      	strlt	r3, [r5, #0]
 8020464:	2c00      	cmp	r4, #0
 8020466:	d0e3      	beq.n	8020430 <_vsniprintf_r+0x16>
 8020468:	9b00      	ldr	r3, [sp, #0]
 802046a:	2200      	movs	r2, #0
 802046c:	701a      	strb	r2, [r3, #0]
 802046e:	e7df      	b.n	8020430 <_vsniprintf_r+0x16>

08020470 <vsniprintf>:
 8020470:	b507      	push	{r0, r1, r2, lr}
 8020472:	9300      	str	r3, [sp, #0]
 8020474:	4613      	mov	r3, r2
 8020476:	460a      	mov	r2, r1
 8020478:	4601      	mov	r1, r0
 802047a:	4803      	ldr	r0, [pc, #12]	; (8020488 <vsniprintf+0x18>)
 802047c:	6800      	ldr	r0, [r0, #0]
 802047e:	f7ff ffcc 	bl	802041a <_vsniprintf_r>
 8020482:	b003      	add	sp, #12
 8020484:	f85d fb04 	ldr.w	pc, [sp], #4
 8020488:	2400006c 	.word	0x2400006c

0802048c <__swbuf_r>:
 802048c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802048e:	460e      	mov	r6, r1
 8020490:	4614      	mov	r4, r2
 8020492:	4605      	mov	r5, r0
 8020494:	b118      	cbz	r0, 802049e <__swbuf_r+0x12>
 8020496:	6a03      	ldr	r3, [r0, #32]
 8020498:	b90b      	cbnz	r3, 802049e <__swbuf_r+0x12>
 802049a:	f7ff ff33 	bl	8020304 <__sinit>
 802049e:	69a3      	ldr	r3, [r4, #24]
 80204a0:	60a3      	str	r3, [r4, #8]
 80204a2:	89a3      	ldrh	r3, [r4, #12]
 80204a4:	071a      	lsls	r2, r3, #28
 80204a6:	d525      	bpl.n	80204f4 <__swbuf_r+0x68>
 80204a8:	6923      	ldr	r3, [r4, #16]
 80204aa:	b31b      	cbz	r3, 80204f4 <__swbuf_r+0x68>
 80204ac:	6823      	ldr	r3, [r4, #0]
 80204ae:	6922      	ldr	r2, [r4, #16]
 80204b0:	1a98      	subs	r0, r3, r2
 80204b2:	6963      	ldr	r3, [r4, #20]
 80204b4:	b2f6      	uxtb	r6, r6
 80204b6:	4283      	cmp	r3, r0
 80204b8:	4637      	mov	r7, r6
 80204ba:	dc04      	bgt.n	80204c6 <__swbuf_r+0x3a>
 80204bc:	4621      	mov	r1, r4
 80204be:	4628      	mov	r0, r5
 80204c0:	f000 fc3c 	bl	8020d3c <_fflush_r>
 80204c4:	b9e0      	cbnz	r0, 8020500 <__swbuf_r+0x74>
 80204c6:	68a3      	ldr	r3, [r4, #8]
 80204c8:	3b01      	subs	r3, #1
 80204ca:	60a3      	str	r3, [r4, #8]
 80204cc:	6823      	ldr	r3, [r4, #0]
 80204ce:	1c5a      	adds	r2, r3, #1
 80204d0:	6022      	str	r2, [r4, #0]
 80204d2:	701e      	strb	r6, [r3, #0]
 80204d4:	6962      	ldr	r2, [r4, #20]
 80204d6:	1c43      	adds	r3, r0, #1
 80204d8:	429a      	cmp	r2, r3
 80204da:	d004      	beq.n	80204e6 <__swbuf_r+0x5a>
 80204dc:	89a3      	ldrh	r3, [r4, #12]
 80204de:	07db      	lsls	r3, r3, #31
 80204e0:	d506      	bpl.n	80204f0 <__swbuf_r+0x64>
 80204e2:	2e0a      	cmp	r6, #10
 80204e4:	d104      	bne.n	80204f0 <__swbuf_r+0x64>
 80204e6:	4621      	mov	r1, r4
 80204e8:	4628      	mov	r0, r5
 80204ea:	f000 fc27 	bl	8020d3c <_fflush_r>
 80204ee:	b938      	cbnz	r0, 8020500 <__swbuf_r+0x74>
 80204f0:	4638      	mov	r0, r7
 80204f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80204f4:	4621      	mov	r1, r4
 80204f6:	4628      	mov	r0, r5
 80204f8:	f000 f806 	bl	8020508 <__swsetup_r>
 80204fc:	2800      	cmp	r0, #0
 80204fe:	d0d5      	beq.n	80204ac <__swbuf_r+0x20>
 8020500:	f04f 37ff 	mov.w	r7, #4294967295
 8020504:	e7f4      	b.n	80204f0 <__swbuf_r+0x64>
	...

08020508 <__swsetup_r>:
 8020508:	b538      	push	{r3, r4, r5, lr}
 802050a:	4b2a      	ldr	r3, [pc, #168]	; (80205b4 <__swsetup_r+0xac>)
 802050c:	4605      	mov	r5, r0
 802050e:	6818      	ldr	r0, [r3, #0]
 8020510:	460c      	mov	r4, r1
 8020512:	b118      	cbz	r0, 802051c <__swsetup_r+0x14>
 8020514:	6a03      	ldr	r3, [r0, #32]
 8020516:	b90b      	cbnz	r3, 802051c <__swsetup_r+0x14>
 8020518:	f7ff fef4 	bl	8020304 <__sinit>
 802051c:	89a3      	ldrh	r3, [r4, #12]
 802051e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8020522:	0718      	lsls	r0, r3, #28
 8020524:	d422      	bmi.n	802056c <__swsetup_r+0x64>
 8020526:	06d9      	lsls	r1, r3, #27
 8020528:	d407      	bmi.n	802053a <__swsetup_r+0x32>
 802052a:	2309      	movs	r3, #9
 802052c:	602b      	str	r3, [r5, #0]
 802052e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8020532:	81a3      	strh	r3, [r4, #12]
 8020534:	f04f 30ff 	mov.w	r0, #4294967295
 8020538:	e034      	b.n	80205a4 <__swsetup_r+0x9c>
 802053a:	0758      	lsls	r0, r3, #29
 802053c:	d512      	bpl.n	8020564 <__swsetup_r+0x5c>
 802053e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8020540:	b141      	cbz	r1, 8020554 <__swsetup_r+0x4c>
 8020542:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020546:	4299      	cmp	r1, r3
 8020548:	d002      	beq.n	8020550 <__swsetup_r+0x48>
 802054a:	4628      	mov	r0, r5
 802054c:	f000 f99c 	bl	8020888 <_free_r>
 8020550:	2300      	movs	r3, #0
 8020552:	6363      	str	r3, [r4, #52]	; 0x34
 8020554:	89a3      	ldrh	r3, [r4, #12]
 8020556:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802055a:	81a3      	strh	r3, [r4, #12]
 802055c:	2300      	movs	r3, #0
 802055e:	6063      	str	r3, [r4, #4]
 8020560:	6923      	ldr	r3, [r4, #16]
 8020562:	6023      	str	r3, [r4, #0]
 8020564:	89a3      	ldrh	r3, [r4, #12]
 8020566:	f043 0308 	orr.w	r3, r3, #8
 802056a:	81a3      	strh	r3, [r4, #12]
 802056c:	6923      	ldr	r3, [r4, #16]
 802056e:	b94b      	cbnz	r3, 8020584 <__swsetup_r+0x7c>
 8020570:	89a3      	ldrh	r3, [r4, #12]
 8020572:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8020576:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802057a:	d003      	beq.n	8020584 <__swsetup_r+0x7c>
 802057c:	4621      	mov	r1, r4
 802057e:	4628      	mov	r0, r5
 8020580:	f000 fc2a 	bl	8020dd8 <__smakebuf_r>
 8020584:	89a0      	ldrh	r0, [r4, #12]
 8020586:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802058a:	f010 0301 	ands.w	r3, r0, #1
 802058e:	d00a      	beq.n	80205a6 <__swsetup_r+0x9e>
 8020590:	2300      	movs	r3, #0
 8020592:	60a3      	str	r3, [r4, #8]
 8020594:	6963      	ldr	r3, [r4, #20]
 8020596:	425b      	negs	r3, r3
 8020598:	61a3      	str	r3, [r4, #24]
 802059a:	6923      	ldr	r3, [r4, #16]
 802059c:	b943      	cbnz	r3, 80205b0 <__swsetup_r+0xa8>
 802059e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80205a2:	d1c4      	bne.n	802052e <__swsetup_r+0x26>
 80205a4:	bd38      	pop	{r3, r4, r5, pc}
 80205a6:	0781      	lsls	r1, r0, #30
 80205a8:	bf58      	it	pl
 80205aa:	6963      	ldrpl	r3, [r4, #20]
 80205ac:	60a3      	str	r3, [r4, #8]
 80205ae:	e7f4      	b.n	802059a <__swsetup_r+0x92>
 80205b0:	2000      	movs	r0, #0
 80205b2:	e7f7      	b.n	80205a4 <__swsetup_r+0x9c>
 80205b4:	2400006c 	.word	0x2400006c

080205b8 <memmove>:
 80205b8:	4288      	cmp	r0, r1
 80205ba:	b510      	push	{r4, lr}
 80205bc:	eb01 0402 	add.w	r4, r1, r2
 80205c0:	d902      	bls.n	80205c8 <memmove+0x10>
 80205c2:	4284      	cmp	r4, r0
 80205c4:	4623      	mov	r3, r4
 80205c6:	d807      	bhi.n	80205d8 <memmove+0x20>
 80205c8:	1e43      	subs	r3, r0, #1
 80205ca:	42a1      	cmp	r1, r4
 80205cc:	d008      	beq.n	80205e0 <memmove+0x28>
 80205ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80205d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80205d6:	e7f8      	b.n	80205ca <memmove+0x12>
 80205d8:	4402      	add	r2, r0
 80205da:	4601      	mov	r1, r0
 80205dc:	428a      	cmp	r2, r1
 80205de:	d100      	bne.n	80205e2 <memmove+0x2a>
 80205e0:	bd10      	pop	{r4, pc}
 80205e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80205e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80205ea:	e7f7      	b.n	80205dc <memmove+0x24>

080205ec <memset>:
 80205ec:	4402      	add	r2, r0
 80205ee:	4603      	mov	r3, r0
 80205f0:	4293      	cmp	r3, r2
 80205f2:	d100      	bne.n	80205f6 <memset+0xa>
 80205f4:	4770      	bx	lr
 80205f6:	f803 1b01 	strb.w	r1, [r3], #1
 80205fa:	e7f9      	b.n	80205f0 <memset+0x4>

080205fc <strncmp>:
 80205fc:	b510      	push	{r4, lr}
 80205fe:	b16a      	cbz	r2, 802061c <strncmp+0x20>
 8020600:	3901      	subs	r1, #1
 8020602:	1884      	adds	r4, r0, r2
 8020604:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020608:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 802060c:	429a      	cmp	r2, r3
 802060e:	d103      	bne.n	8020618 <strncmp+0x1c>
 8020610:	42a0      	cmp	r0, r4
 8020612:	d001      	beq.n	8020618 <strncmp+0x1c>
 8020614:	2a00      	cmp	r2, #0
 8020616:	d1f5      	bne.n	8020604 <strncmp+0x8>
 8020618:	1ad0      	subs	r0, r2, r3
 802061a:	bd10      	pop	{r4, pc}
 802061c:	4610      	mov	r0, r2
 802061e:	e7fc      	b.n	802061a <strncmp+0x1e>

08020620 <_raise_r>:
 8020620:	291f      	cmp	r1, #31
 8020622:	b538      	push	{r3, r4, r5, lr}
 8020624:	4604      	mov	r4, r0
 8020626:	460d      	mov	r5, r1
 8020628:	d904      	bls.n	8020634 <_raise_r+0x14>
 802062a:	2316      	movs	r3, #22
 802062c:	6003      	str	r3, [r0, #0]
 802062e:	f04f 30ff 	mov.w	r0, #4294967295
 8020632:	bd38      	pop	{r3, r4, r5, pc}
 8020634:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8020636:	b112      	cbz	r2, 802063e <_raise_r+0x1e>
 8020638:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802063c:	b94b      	cbnz	r3, 8020652 <_raise_r+0x32>
 802063e:	4620      	mov	r0, r4
 8020640:	f000 f864 	bl	802070c <_getpid_r>
 8020644:	462a      	mov	r2, r5
 8020646:	4601      	mov	r1, r0
 8020648:	4620      	mov	r0, r4
 802064a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802064e:	f000 b84b 	b.w	80206e8 <_kill_r>
 8020652:	2b01      	cmp	r3, #1
 8020654:	d00a      	beq.n	802066c <_raise_r+0x4c>
 8020656:	1c59      	adds	r1, r3, #1
 8020658:	d103      	bne.n	8020662 <_raise_r+0x42>
 802065a:	2316      	movs	r3, #22
 802065c:	6003      	str	r3, [r0, #0]
 802065e:	2001      	movs	r0, #1
 8020660:	e7e7      	b.n	8020632 <_raise_r+0x12>
 8020662:	2400      	movs	r4, #0
 8020664:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8020668:	4628      	mov	r0, r5
 802066a:	4798      	blx	r3
 802066c:	2000      	movs	r0, #0
 802066e:	e7e0      	b.n	8020632 <_raise_r+0x12>

08020670 <raise>:
 8020670:	4b02      	ldr	r3, [pc, #8]	; (802067c <raise+0xc>)
 8020672:	4601      	mov	r1, r0
 8020674:	6818      	ldr	r0, [r3, #0]
 8020676:	f7ff bfd3 	b.w	8020620 <_raise_r>
 802067a:	bf00      	nop
 802067c:	2400006c 	.word	0x2400006c

08020680 <_close_r>:
 8020680:	b538      	push	{r3, r4, r5, lr}
 8020682:	4d06      	ldr	r5, [pc, #24]	; (802069c <_close_r+0x1c>)
 8020684:	2300      	movs	r3, #0
 8020686:	4604      	mov	r4, r0
 8020688:	4608      	mov	r0, r1
 802068a:	602b      	str	r3, [r5, #0]
 802068c:	f7f5 fa7d 	bl	8015b8a <_close>
 8020690:	1c43      	adds	r3, r0, #1
 8020692:	d102      	bne.n	802069a <_close_r+0x1a>
 8020694:	682b      	ldr	r3, [r5, #0]
 8020696:	b103      	cbz	r3, 802069a <_close_r+0x1a>
 8020698:	6023      	str	r3, [r4, #0]
 802069a:	bd38      	pop	{r3, r4, r5, pc}
 802069c:	2404f12c 	.word	0x2404f12c

080206a0 <_lseek_r>:
 80206a0:	b538      	push	{r3, r4, r5, lr}
 80206a2:	4d07      	ldr	r5, [pc, #28]	; (80206c0 <_lseek_r+0x20>)
 80206a4:	4604      	mov	r4, r0
 80206a6:	4608      	mov	r0, r1
 80206a8:	4611      	mov	r1, r2
 80206aa:	2200      	movs	r2, #0
 80206ac:	602a      	str	r2, [r5, #0]
 80206ae:	461a      	mov	r2, r3
 80206b0:	f7f5 fa92 	bl	8015bd8 <_lseek>
 80206b4:	1c43      	adds	r3, r0, #1
 80206b6:	d102      	bne.n	80206be <_lseek_r+0x1e>
 80206b8:	682b      	ldr	r3, [r5, #0]
 80206ba:	b103      	cbz	r3, 80206be <_lseek_r+0x1e>
 80206bc:	6023      	str	r3, [r4, #0]
 80206be:	bd38      	pop	{r3, r4, r5, pc}
 80206c0:	2404f12c 	.word	0x2404f12c

080206c4 <_read_r>:
 80206c4:	b538      	push	{r3, r4, r5, lr}
 80206c6:	4d07      	ldr	r5, [pc, #28]	; (80206e4 <_read_r+0x20>)
 80206c8:	4604      	mov	r4, r0
 80206ca:	4608      	mov	r0, r1
 80206cc:	4611      	mov	r1, r2
 80206ce:	2200      	movs	r2, #0
 80206d0:	602a      	str	r2, [r5, #0]
 80206d2:	461a      	mov	r2, r3
 80206d4:	f7f5 fa20 	bl	8015b18 <_read>
 80206d8:	1c43      	adds	r3, r0, #1
 80206da:	d102      	bne.n	80206e2 <_read_r+0x1e>
 80206dc:	682b      	ldr	r3, [r5, #0]
 80206de:	b103      	cbz	r3, 80206e2 <_read_r+0x1e>
 80206e0:	6023      	str	r3, [r4, #0]
 80206e2:	bd38      	pop	{r3, r4, r5, pc}
 80206e4:	2404f12c 	.word	0x2404f12c

080206e8 <_kill_r>:
 80206e8:	b538      	push	{r3, r4, r5, lr}
 80206ea:	4d07      	ldr	r5, [pc, #28]	; (8020708 <_kill_r+0x20>)
 80206ec:	2300      	movs	r3, #0
 80206ee:	4604      	mov	r4, r0
 80206f0:	4608      	mov	r0, r1
 80206f2:	4611      	mov	r1, r2
 80206f4:	602b      	str	r3, [r5, #0]
 80206f6:	f7f5 f9f5 	bl	8015ae4 <_kill>
 80206fa:	1c43      	adds	r3, r0, #1
 80206fc:	d102      	bne.n	8020704 <_kill_r+0x1c>
 80206fe:	682b      	ldr	r3, [r5, #0]
 8020700:	b103      	cbz	r3, 8020704 <_kill_r+0x1c>
 8020702:	6023      	str	r3, [r4, #0]
 8020704:	bd38      	pop	{r3, r4, r5, pc}
 8020706:	bf00      	nop
 8020708:	2404f12c 	.word	0x2404f12c

0802070c <_getpid_r>:
 802070c:	f7f5 b9e2 	b.w	8015ad4 <_getpid>

08020710 <_sbrk_r>:
 8020710:	b538      	push	{r3, r4, r5, lr}
 8020712:	4d06      	ldr	r5, [pc, #24]	; (802072c <_sbrk_r+0x1c>)
 8020714:	2300      	movs	r3, #0
 8020716:	4604      	mov	r4, r0
 8020718:	4608      	mov	r0, r1
 802071a:	602b      	str	r3, [r5, #0]
 802071c:	f7f5 fa6a 	bl	8015bf4 <_sbrk>
 8020720:	1c43      	adds	r3, r0, #1
 8020722:	d102      	bne.n	802072a <_sbrk_r+0x1a>
 8020724:	682b      	ldr	r3, [r5, #0]
 8020726:	b103      	cbz	r3, 802072a <_sbrk_r+0x1a>
 8020728:	6023      	str	r3, [r4, #0]
 802072a:	bd38      	pop	{r3, r4, r5, pc}
 802072c:	2404f12c 	.word	0x2404f12c

08020730 <_write_r>:
 8020730:	b538      	push	{r3, r4, r5, lr}
 8020732:	4d07      	ldr	r5, [pc, #28]	; (8020750 <_write_r+0x20>)
 8020734:	4604      	mov	r4, r0
 8020736:	4608      	mov	r0, r1
 8020738:	4611      	mov	r1, r2
 802073a:	2200      	movs	r2, #0
 802073c:	602a      	str	r2, [r5, #0]
 802073e:	461a      	mov	r2, r3
 8020740:	f7f5 fa07 	bl	8015b52 <_write>
 8020744:	1c43      	adds	r3, r0, #1
 8020746:	d102      	bne.n	802074e <_write_r+0x1e>
 8020748:	682b      	ldr	r3, [r5, #0]
 802074a:	b103      	cbz	r3, 802074e <_write_r+0x1e>
 802074c:	6023      	str	r3, [r4, #0]
 802074e:	bd38      	pop	{r3, r4, r5, pc}
 8020750:	2404f12c 	.word	0x2404f12c

08020754 <__errno>:
 8020754:	4b01      	ldr	r3, [pc, #4]	; (802075c <__errno+0x8>)
 8020756:	6818      	ldr	r0, [r3, #0]
 8020758:	4770      	bx	lr
 802075a:	bf00      	nop
 802075c:	2400006c 	.word	0x2400006c

08020760 <__libc_init_array>:
 8020760:	b570      	push	{r4, r5, r6, lr}
 8020762:	4d0d      	ldr	r5, [pc, #52]	; (8020798 <__libc_init_array+0x38>)
 8020764:	4c0d      	ldr	r4, [pc, #52]	; (802079c <__libc_init_array+0x3c>)
 8020766:	1b64      	subs	r4, r4, r5
 8020768:	10a4      	asrs	r4, r4, #2
 802076a:	2600      	movs	r6, #0
 802076c:	42a6      	cmp	r6, r4
 802076e:	d109      	bne.n	8020784 <__libc_init_array+0x24>
 8020770:	4d0b      	ldr	r5, [pc, #44]	; (80207a0 <__libc_init_array+0x40>)
 8020772:	4c0c      	ldr	r4, [pc, #48]	; (80207a4 <__libc_init_array+0x44>)
 8020774:	f000 fb96 	bl	8020ea4 <_init>
 8020778:	1b64      	subs	r4, r4, r5
 802077a:	10a4      	asrs	r4, r4, #2
 802077c:	2600      	movs	r6, #0
 802077e:	42a6      	cmp	r6, r4
 8020780:	d105      	bne.n	802078e <__libc_init_array+0x2e>
 8020782:	bd70      	pop	{r4, r5, r6, pc}
 8020784:	f855 3b04 	ldr.w	r3, [r5], #4
 8020788:	4798      	blx	r3
 802078a:	3601      	adds	r6, #1
 802078c:	e7ee      	b.n	802076c <__libc_init_array+0xc>
 802078e:	f855 3b04 	ldr.w	r3, [r5], #4
 8020792:	4798      	blx	r3
 8020794:	3601      	adds	r6, #1
 8020796:	e7f2      	b.n	802077e <__libc_init_array+0x1e>
 8020798:	08072c10 	.word	0x08072c10
 802079c:	08072c10 	.word	0x08072c10
 80207a0:	08072c10 	.word	0x08072c10
 80207a4:	08072c14 	.word	0x08072c14

080207a8 <__retarget_lock_init_recursive>:
 80207a8:	4770      	bx	lr

080207aa <__retarget_lock_acquire_recursive>:
 80207aa:	4770      	bx	lr

080207ac <__retarget_lock_release_recursive>:
 80207ac:	4770      	bx	lr

080207ae <memcpy>:
 80207ae:	440a      	add	r2, r1
 80207b0:	4291      	cmp	r1, r2
 80207b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80207b6:	d100      	bne.n	80207ba <memcpy+0xc>
 80207b8:	4770      	bx	lr
 80207ba:	b510      	push	{r4, lr}
 80207bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80207c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80207c4:	4291      	cmp	r1, r2
 80207c6:	d1f9      	bne.n	80207bc <memcpy+0xe>
 80207c8:	bd10      	pop	{r4, pc}
	...

080207cc <__register_exitproc>:
 80207cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80207d0:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8020884 <__register_exitproc+0xb8>
 80207d4:	4606      	mov	r6, r0
 80207d6:	f8d8 0000 	ldr.w	r0, [r8]
 80207da:	461f      	mov	r7, r3
 80207dc:	460d      	mov	r5, r1
 80207de:	4691      	mov	r9, r2
 80207e0:	f7ff ffe3 	bl	80207aa <__retarget_lock_acquire_recursive>
 80207e4:	4b23      	ldr	r3, [pc, #140]	; (8020874 <__register_exitproc+0xa8>)
 80207e6:	681c      	ldr	r4, [r3, #0]
 80207e8:	b934      	cbnz	r4, 80207f8 <__register_exitproc+0x2c>
 80207ea:	4c23      	ldr	r4, [pc, #140]	; (8020878 <__register_exitproc+0xac>)
 80207ec:	601c      	str	r4, [r3, #0]
 80207ee:	4b23      	ldr	r3, [pc, #140]	; (802087c <__register_exitproc+0xb0>)
 80207f0:	b113      	cbz	r3, 80207f8 <__register_exitproc+0x2c>
 80207f2:	681b      	ldr	r3, [r3, #0]
 80207f4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80207f8:	6863      	ldr	r3, [r4, #4]
 80207fa:	2b1f      	cmp	r3, #31
 80207fc:	dd07      	ble.n	802080e <__register_exitproc+0x42>
 80207fe:	f8d8 0000 	ldr.w	r0, [r8]
 8020802:	f7ff ffd3 	bl	80207ac <__retarget_lock_release_recursive>
 8020806:	f04f 30ff 	mov.w	r0, #4294967295
 802080a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802080e:	b32e      	cbz	r6, 802085c <__register_exitproc+0x90>
 8020810:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8020814:	b968      	cbnz	r0, 8020832 <__register_exitproc+0x66>
 8020816:	4b1a      	ldr	r3, [pc, #104]	; (8020880 <__register_exitproc+0xb4>)
 8020818:	2b00      	cmp	r3, #0
 802081a:	d0f0      	beq.n	80207fe <__register_exitproc+0x32>
 802081c:	f44f 7084 	mov.w	r0, #264	; 0x108
 8020820:	f7ff f94a 	bl	801fab8 <malloc>
 8020824:	2800      	cmp	r0, #0
 8020826:	d0ea      	beq.n	80207fe <__register_exitproc+0x32>
 8020828:	2300      	movs	r3, #0
 802082a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 802082e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8020832:	6863      	ldr	r3, [r4, #4]
 8020834:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8020838:	2201      	movs	r2, #1
 802083a:	409a      	lsls	r2, r3
 802083c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8020840:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8020844:	4313      	orrs	r3, r2
 8020846:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 802084a:	2e02      	cmp	r6, #2
 802084c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8020850:	bf02      	ittt	eq
 8020852:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8020856:	4313      	orreq	r3, r2
 8020858:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 802085c:	6863      	ldr	r3, [r4, #4]
 802085e:	f8d8 0000 	ldr.w	r0, [r8]
 8020862:	1c5a      	adds	r2, r3, #1
 8020864:	3302      	adds	r3, #2
 8020866:	6062      	str	r2, [r4, #4]
 8020868:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 802086c:	f7ff ff9e 	bl	80207ac <__retarget_lock_release_recursive>
 8020870:	2000      	movs	r0, #0
 8020872:	e7ca      	b.n	802080a <__register_exitproc+0x3e>
 8020874:	2404f1c0 	.word	0x2404f1c0
 8020878:	2404f134 	.word	0x2404f134
 802087c:	00000000 	.word	0x00000000
 8020880:	0801fab9 	.word	0x0801fab9
 8020884:	24000070 	.word	0x24000070

08020888 <_free_r>:
 8020888:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802088a:	2900      	cmp	r1, #0
 802088c:	d044      	beq.n	8020918 <_free_r+0x90>
 802088e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8020892:	9001      	str	r0, [sp, #4]
 8020894:	2b00      	cmp	r3, #0
 8020896:	f1a1 0404 	sub.w	r4, r1, #4
 802089a:	bfb8      	it	lt
 802089c:	18e4      	addlt	r4, r4, r3
 802089e:	f7ff f9bb 	bl	801fc18 <__malloc_lock>
 80208a2:	4a1e      	ldr	r2, [pc, #120]	; (802091c <_free_r+0x94>)
 80208a4:	9801      	ldr	r0, [sp, #4]
 80208a6:	6813      	ldr	r3, [r2, #0]
 80208a8:	b933      	cbnz	r3, 80208b8 <_free_r+0x30>
 80208aa:	6063      	str	r3, [r4, #4]
 80208ac:	6014      	str	r4, [r2, #0]
 80208ae:	b003      	add	sp, #12
 80208b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80208b4:	f7ff b9b6 	b.w	801fc24 <__malloc_unlock>
 80208b8:	42a3      	cmp	r3, r4
 80208ba:	d908      	bls.n	80208ce <_free_r+0x46>
 80208bc:	6825      	ldr	r5, [r4, #0]
 80208be:	1961      	adds	r1, r4, r5
 80208c0:	428b      	cmp	r3, r1
 80208c2:	bf01      	itttt	eq
 80208c4:	6819      	ldreq	r1, [r3, #0]
 80208c6:	685b      	ldreq	r3, [r3, #4]
 80208c8:	1949      	addeq	r1, r1, r5
 80208ca:	6021      	streq	r1, [r4, #0]
 80208cc:	e7ed      	b.n	80208aa <_free_r+0x22>
 80208ce:	461a      	mov	r2, r3
 80208d0:	685b      	ldr	r3, [r3, #4]
 80208d2:	b10b      	cbz	r3, 80208d8 <_free_r+0x50>
 80208d4:	42a3      	cmp	r3, r4
 80208d6:	d9fa      	bls.n	80208ce <_free_r+0x46>
 80208d8:	6811      	ldr	r1, [r2, #0]
 80208da:	1855      	adds	r5, r2, r1
 80208dc:	42a5      	cmp	r5, r4
 80208de:	d10b      	bne.n	80208f8 <_free_r+0x70>
 80208e0:	6824      	ldr	r4, [r4, #0]
 80208e2:	4421      	add	r1, r4
 80208e4:	1854      	adds	r4, r2, r1
 80208e6:	42a3      	cmp	r3, r4
 80208e8:	6011      	str	r1, [r2, #0]
 80208ea:	d1e0      	bne.n	80208ae <_free_r+0x26>
 80208ec:	681c      	ldr	r4, [r3, #0]
 80208ee:	685b      	ldr	r3, [r3, #4]
 80208f0:	6053      	str	r3, [r2, #4]
 80208f2:	440c      	add	r4, r1
 80208f4:	6014      	str	r4, [r2, #0]
 80208f6:	e7da      	b.n	80208ae <_free_r+0x26>
 80208f8:	d902      	bls.n	8020900 <_free_r+0x78>
 80208fa:	230c      	movs	r3, #12
 80208fc:	6003      	str	r3, [r0, #0]
 80208fe:	e7d6      	b.n	80208ae <_free_r+0x26>
 8020900:	6825      	ldr	r5, [r4, #0]
 8020902:	1961      	adds	r1, r4, r5
 8020904:	428b      	cmp	r3, r1
 8020906:	bf04      	itt	eq
 8020908:	6819      	ldreq	r1, [r3, #0]
 802090a:	685b      	ldreq	r3, [r3, #4]
 802090c:	6063      	str	r3, [r4, #4]
 802090e:	bf04      	itt	eq
 8020910:	1949      	addeq	r1, r1, r5
 8020912:	6021      	streq	r1, [r4, #0]
 8020914:	6054      	str	r4, [r2, #4]
 8020916:	e7ca      	b.n	80208ae <_free_r+0x26>
 8020918:	b003      	add	sp, #12
 802091a:	bd30      	pop	{r4, r5, pc}
 802091c:	2404efe8 	.word	0x2404efe8

08020920 <_realloc_r>:
 8020920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020924:	4680      	mov	r8, r0
 8020926:	4614      	mov	r4, r2
 8020928:	460e      	mov	r6, r1
 802092a:	b921      	cbnz	r1, 8020936 <_realloc_r+0x16>
 802092c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8020930:	4611      	mov	r1, r2
 8020932:	f7ff b8f1 	b.w	801fb18 <_malloc_r>
 8020936:	b92a      	cbnz	r2, 8020944 <_realloc_r+0x24>
 8020938:	f7ff ffa6 	bl	8020888 <_free_r>
 802093c:	4625      	mov	r5, r4
 802093e:	4628      	mov	r0, r5
 8020940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020944:	f000 faa6 	bl	8020e94 <_malloc_usable_size_r>
 8020948:	4284      	cmp	r4, r0
 802094a:	4607      	mov	r7, r0
 802094c:	d802      	bhi.n	8020954 <_realloc_r+0x34>
 802094e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8020952:	d812      	bhi.n	802097a <_realloc_r+0x5a>
 8020954:	4621      	mov	r1, r4
 8020956:	4640      	mov	r0, r8
 8020958:	f7ff f8de 	bl	801fb18 <_malloc_r>
 802095c:	4605      	mov	r5, r0
 802095e:	2800      	cmp	r0, #0
 8020960:	d0ed      	beq.n	802093e <_realloc_r+0x1e>
 8020962:	42bc      	cmp	r4, r7
 8020964:	4622      	mov	r2, r4
 8020966:	4631      	mov	r1, r6
 8020968:	bf28      	it	cs
 802096a:	463a      	movcs	r2, r7
 802096c:	f7ff ff1f 	bl	80207ae <memcpy>
 8020970:	4631      	mov	r1, r6
 8020972:	4640      	mov	r0, r8
 8020974:	f7ff ff88 	bl	8020888 <_free_r>
 8020978:	e7e1      	b.n	802093e <_realloc_r+0x1e>
 802097a:	4635      	mov	r5, r6
 802097c:	e7df      	b.n	802093e <_realloc_r+0x1e>

0802097e <__ssputs_r>:
 802097e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020982:	688e      	ldr	r6, [r1, #8]
 8020984:	461f      	mov	r7, r3
 8020986:	42be      	cmp	r6, r7
 8020988:	680b      	ldr	r3, [r1, #0]
 802098a:	4682      	mov	sl, r0
 802098c:	460c      	mov	r4, r1
 802098e:	4690      	mov	r8, r2
 8020990:	d82c      	bhi.n	80209ec <__ssputs_r+0x6e>
 8020992:	898a      	ldrh	r2, [r1, #12]
 8020994:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8020998:	d026      	beq.n	80209e8 <__ssputs_r+0x6a>
 802099a:	6965      	ldr	r5, [r4, #20]
 802099c:	6909      	ldr	r1, [r1, #16]
 802099e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80209a2:	eba3 0901 	sub.w	r9, r3, r1
 80209a6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80209aa:	1c7b      	adds	r3, r7, #1
 80209ac:	444b      	add	r3, r9
 80209ae:	106d      	asrs	r5, r5, #1
 80209b0:	429d      	cmp	r5, r3
 80209b2:	bf38      	it	cc
 80209b4:	461d      	movcc	r5, r3
 80209b6:	0553      	lsls	r3, r2, #21
 80209b8:	d527      	bpl.n	8020a0a <__ssputs_r+0x8c>
 80209ba:	4629      	mov	r1, r5
 80209bc:	f7ff f8ac 	bl	801fb18 <_malloc_r>
 80209c0:	4606      	mov	r6, r0
 80209c2:	b360      	cbz	r0, 8020a1e <__ssputs_r+0xa0>
 80209c4:	6921      	ldr	r1, [r4, #16]
 80209c6:	464a      	mov	r2, r9
 80209c8:	f7ff fef1 	bl	80207ae <memcpy>
 80209cc:	89a3      	ldrh	r3, [r4, #12]
 80209ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80209d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80209d6:	81a3      	strh	r3, [r4, #12]
 80209d8:	6126      	str	r6, [r4, #16]
 80209da:	6165      	str	r5, [r4, #20]
 80209dc:	444e      	add	r6, r9
 80209de:	eba5 0509 	sub.w	r5, r5, r9
 80209e2:	6026      	str	r6, [r4, #0]
 80209e4:	60a5      	str	r5, [r4, #8]
 80209e6:	463e      	mov	r6, r7
 80209e8:	42be      	cmp	r6, r7
 80209ea:	d900      	bls.n	80209ee <__ssputs_r+0x70>
 80209ec:	463e      	mov	r6, r7
 80209ee:	6820      	ldr	r0, [r4, #0]
 80209f0:	4632      	mov	r2, r6
 80209f2:	4641      	mov	r1, r8
 80209f4:	f7ff fde0 	bl	80205b8 <memmove>
 80209f8:	68a3      	ldr	r3, [r4, #8]
 80209fa:	1b9b      	subs	r3, r3, r6
 80209fc:	60a3      	str	r3, [r4, #8]
 80209fe:	6823      	ldr	r3, [r4, #0]
 8020a00:	4433      	add	r3, r6
 8020a02:	6023      	str	r3, [r4, #0]
 8020a04:	2000      	movs	r0, #0
 8020a06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020a0a:	462a      	mov	r2, r5
 8020a0c:	f7ff ff88 	bl	8020920 <_realloc_r>
 8020a10:	4606      	mov	r6, r0
 8020a12:	2800      	cmp	r0, #0
 8020a14:	d1e0      	bne.n	80209d8 <__ssputs_r+0x5a>
 8020a16:	6921      	ldr	r1, [r4, #16]
 8020a18:	4650      	mov	r0, sl
 8020a1a:	f7ff ff35 	bl	8020888 <_free_r>
 8020a1e:	230c      	movs	r3, #12
 8020a20:	f8ca 3000 	str.w	r3, [sl]
 8020a24:	89a3      	ldrh	r3, [r4, #12]
 8020a26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020a2a:	81a3      	strh	r3, [r4, #12]
 8020a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8020a30:	e7e9      	b.n	8020a06 <__ssputs_r+0x88>
	...

08020a34 <_svfiprintf_r>:
 8020a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020a38:	4698      	mov	r8, r3
 8020a3a:	898b      	ldrh	r3, [r1, #12]
 8020a3c:	061b      	lsls	r3, r3, #24
 8020a3e:	b09d      	sub	sp, #116	; 0x74
 8020a40:	4607      	mov	r7, r0
 8020a42:	460d      	mov	r5, r1
 8020a44:	4614      	mov	r4, r2
 8020a46:	d50e      	bpl.n	8020a66 <_svfiprintf_r+0x32>
 8020a48:	690b      	ldr	r3, [r1, #16]
 8020a4a:	b963      	cbnz	r3, 8020a66 <_svfiprintf_r+0x32>
 8020a4c:	2140      	movs	r1, #64	; 0x40
 8020a4e:	f7ff f863 	bl	801fb18 <_malloc_r>
 8020a52:	6028      	str	r0, [r5, #0]
 8020a54:	6128      	str	r0, [r5, #16]
 8020a56:	b920      	cbnz	r0, 8020a62 <_svfiprintf_r+0x2e>
 8020a58:	230c      	movs	r3, #12
 8020a5a:	603b      	str	r3, [r7, #0]
 8020a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8020a60:	e0d0      	b.n	8020c04 <_svfiprintf_r+0x1d0>
 8020a62:	2340      	movs	r3, #64	; 0x40
 8020a64:	616b      	str	r3, [r5, #20]
 8020a66:	2300      	movs	r3, #0
 8020a68:	9309      	str	r3, [sp, #36]	; 0x24
 8020a6a:	2320      	movs	r3, #32
 8020a6c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8020a70:	f8cd 800c 	str.w	r8, [sp, #12]
 8020a74:	2330      	movs	r3, #48	; 0x30
 8020a76:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8020c1c <_svfiprintf_r+0x1e8>
 8020a7a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8020a7e:	f04f 0901 	mov.w	r9, #1
 8020a82:	4623      	mov	r3, r4
 8020a84:	469a      	mov	sl, r3
 8020a86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020a8a:	b10a      	cbz	r2, 8020a90 <_svfiprintf_r+0x5c>
 8020a8c:	2a25      	cmp	r2, #37	; 0x25
 8020a8e:	d1f9      	bne.n	8020a84 <_svfiprintf_r+0x50>
 8020a90:	ebba 0b04 	subs.w	fp, sl, r4
 8020a94:	d00b      	beq.n	8020aae <_svfiprintf_r+0x7a>
 8020a96:	465b      	mov	r3, fp
 8020a98:	4622      	mov	r2, r4
 8020a9a:	4629      	mov	r1, r5
 8020a9c:	4638      	mov	r0, r7
 8020a9e:	f7ff ff6e 	bl	802097e <__ssputs_r>
 8020aa2:	3001      	adds	r0, #1
 8020aa4:	f000 80a9 	beq.w	8020bfa <_svfiprintf_r+0x1c6>
 8020aa8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020aaa:	445a      	add	r2, fp
 8020aac:	9209      	str	r2, [sp, #36]	; 0x24
 8020aae:	f89a 3000 	ldrb.w	r3, [sl]
 8020ab2:	2b00      	cmp	r3, #0
 8020ab4:	f000 80a1 	beq.w	8020bfa <_svfiprintf_r+0x1c6>
 8020ab8:	2300      	movs	r3, #0
 8020aba:	f04f 32ff 	mov.w	r2, #4294967295
 8020abe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8020ac2:	f10a 0a01 	add.w	sl, sl, #1
 8020ac6:	9304      	str	r3, [sp, #16]
 8020ac8:	9307      	str	r3, [sp, #28]
 8020aca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8020ace:	931a      	str	r3, [sp, #104]	; 0x68
 8020ad0:	4654      	mov	r4, sl
 8020ad2:	2205      	movs	r2, #5
 8020ad4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020ad8:	4850      	ldr	r0, [pc, #320]	; (8020c1c <_svfiprintf_r+0x1e8>)
 8020ada:	f7df fc11 	bl	8000300 <memchr>
 8020ade:	9a04      	ldr	r2, [sp, #16]
 8020ae0:	b9d8      	cbnz	r0, 8020b1a <_svfiprintf_r+0xe6>
 8020ae2:	06d0      	lsls	r0, r2, #27
 8020ae4:	bf44      	itt	mi
 8020ae6:	2320      	movmi	r3, #32
 8020ae8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020aec:	0711      	lsls	r1, r2, #28
 8020aee:	bf44      	itt	mi
 8020af0:	232b      	movmi	r3, #43	; 0x2b
 8020af2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020af6:	f89a 3000 	ldrb.w	r3, [sl]
 8020afa:	2b2a      	cmp	r3, #42	; 0x2a
 8020afc:	d015      	beq.n	8020b2a <_svfiprintf_r+0xf6>
 8020afe:	9a07      	ldr	r2, [sp, #28]
 8020b00:	4654      	mov	r4, sl
 8020b02:	2000      	movs	r0, #0
 8020b04:	f04f 0c0a 	mov.w	ip, #10
 8020b08:	4621      	mov	r1, r4
 8020b0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8020b0e:	3b30      	subs	r3, #48	; 0x30
 8020b10:	2b09      	cmp	r3, #9
 8020b12:	d94d      	bls.n	8020bb0 <_svfiprintf_r+0x17c>
 8020b14:	b1b0      	cbz	r0, 8020b44 <_svfiprintf_r+0x110>
 8020b16:	9207      	str	r2, [sp, #28]
 8020b18:	e014      	b.n	8020b44 <_svfiprintf_r+0x110>
 8020b1a:	eba0 0308 	sub.w	r3, r0, r8
 8020b1e:	fa09 f303 	lsl.w	r3, r9, r3
 8020b22:	4313      	orrs	r3, r2
 8020b24:	9304      	str	r3, [sp, #16]
 8020b26:	46a2      	mov	sl, r4
 8020b28:	e7d2      	b.n	8020ad0 <_svfiprintf_r+0x9c>
 8020b2a:	9b03      	ldr	r3, [sp, #12]
 8020b2c:	1d19      	adds	r1, r3, #4
 8020b2e:	681b      	ldr	r3, [r3, #0]
 8020b30:	9103      	str	r1, [sp, #12]
 8020b32:	2b00      	cmp	r3, #0
 8020b34:	bfbb      	ittet	lt
 8020b36:	425b      	neglt	r3, r3
 8020b38:	f042 0202 	orrlt.w	r2, r2, #2
 8020b3c:	9307      	strge	r3, [sp, #28]
 8020b3e:	9307      	strlt	r3, [sp, #28]
 8020b40:	bfb8      	it	lt
 8020b42:	9204      	strlt	r2, [sp, #16]
 8020b44:	7823      	ldrb	r3, [r4, #0]
 8020b46:	2b2e      	cmp	r3, #46	; 0x2e
 8020b48:	d10c      	bne.n	8020b64 <_svfiprintf_r+0x130>
 8020b4a:	7863      	ldrb	r3, [r4, #1]
 8020b4c:	2b2a      	cmp	r3, #42	; 0x2a
 8020b4e:	d134      	bne.n	8020bba <_svfiprintf_r+0x186>
 8020b50:	9b03      	ldr	r3, [sp, #12]
 8020b52:	1d1a      	adds	r2, r3, #4
 8020b54:	681b      	ldr	r3, [r3, #0]
 8020b56:	9203      	str	r2, [sp, #12]
 8020b58:	2b00      	cmp	r3, #0
 8020b5a:	bfb8      	it	lt
 8020b5c:	f04f 33ff 	movlt.w	r3, #4294967295
 8020b60:	3402      	adds	r4, #2
 8020b62:	9305      	str	r3, [sp, #20]
 8020b64:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8020c2c <_svfiprintf_r+0x1f8>
 8020b68:	7821      	ldrb	r1, [r4, #0]
 8020b6a:	2203      	movs	r2, #3
 8020b6c:	4650      	mov	r0, sl
 8020b6e:	f7df fbc7 	bl	8000300 <memchr>
 8020b72:	b138      	cbz	r0, 8020b84 <_svfiprintf_r+0x150>
 8020b74:	9b04      	ldr	r3, [sp, #16]
 8020b76:	eba0 000a 	sub.w	r0, r0, sl
 8020b7a:	2240      	movs	r2, #64	; 0x40
 8020b7c:	4082      	lsls	r2, r0
 8020b7e:	4313      	orrs	r3, r2
 8020b80:	3401      	adds	r4, #1
 8020b82:	9304      	str	r3, [sp, #16]
 8020b84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020b88:	4825      	ldr	r0, [pc, #148]	; (8020c20 <_svfiprintf_r+0x1ec>)
 8020b8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8020b8e:	2206      	movs	r2, #6
 8020b90:	f7df fbb6 	bl	8000300 <memchr>
 8020b94:	2800      	cmp	r0, #0
 8020b96:	d038      	beq.n	8020c0a <_svfiprintf_r+0x1d6>
 8020b98:	4b22      	ldr	r3, [pc, #136]	; (8020c24 <_svfiprintf_r+0x1f0>)
 8020b9a:	bb1b      	cbnz	r3, 8020be4 <_svfiprintf_r+0x1b0>
 8020b9c:	9b03      	ldr	r3, [sp, #12]
 8020b9e:	3307      	adds	r3, #7
 8020ba0:	f023 0307 	bic.w	r3, r3, #7
 8020ba4:	3308      	adds	r3, #8
 8020ba6:	9303      	str	r3, [sp, #12]
 8020ba8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020baa:	4433      	add	r3, r6
 8020bac:	9309      	str	r3, [sp, #36]	; 0x24
 8020bae:	e768      	b.n	8020a82 <_svfiprintf_r+0x4e>
 8020bb0:	fb0c 3202 	mla	r2, ip, r2, r3
 8020bb4:	460c      	mov	r4, r1
 8020bb6:	2001      	movs	r0, #1
 8020bb8:	e7a6      	b.n	8020b08 <_svfiprintf_r+0xd4>
 8020bba:	2300      	movs	r3, #0
 8020bbc:	3401      	adds	r4, #1
 8020bbe:	9305      	str	r3, [sp, #20]
 8020bc0:	4619      	mov	r1, r3
 8020bc2:	f04f 0c0a 	mov.w	ip, #10
 8020bc6:	4620      	mov	r0, r4
 8020bc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020bcc:	3a30      	subs	r2, #48	; 0x30
 8020bce:	2a09      	cmp	r2, #9
 8020bd0:	d903      	bls.n	8020bda <_svfiprintf_r+0x1a6>
 8020bd2:	2b00      	cmp	r3, #0
 8020bd4:	d0c6      	beq.n	8020b64 <_svfiprintf_r+0x130>
 8020bd6:	9105      	str	r1, [sp, #20]
 8020bd8:	e7c4      	b.n	8020b64 <_svfiprintf_r+0x130>
 8020bda:	fb0c 2101 	mla	r1, ip, r1, r2
 8020bde:	4604      	mov	r4, r0
 8020be0:	2301      	movs	r3, #1
 8020be2:	e7f0      	b.n	8020bc6 <_svfiprintf_r+0x192>
 8020be4:	ab03      	add	r3, sp, #12
 8020be6:	9300      	str	r3, [sp, #0]
 8020be8:	462a      	mov	r2, r5
 8020bea:	4b0f      	ldr	r3, [pc, #60]	; (8020c28 <_svfiprintf_r+0x1f4>)
 8020bec:	a904      	add	r1, sp, #16
 8020bee:	4638      	mov	r0, r7
 8020bf0:	f3af 8000 	nop.w
 8020bf4:	1c42      	adds	r2, r0, #1
 8020bf6:	4606      	mov	r6, r0
 8020bf8:	d1d6      	bne.n	8020ba8 <_svfiprintf_r+0x174>
 8020bfa:	89ab      	ldrh	r3, [r5, #12]
 8020bfc:	065b      	lsls	r3, r3, #25
 8020bfe:	f53f af2d 	bmi.w	8020a5c <_svfiprintf_r+0x28>
 8020c02:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020c04:	b01d      	add	sp, #116	; 0x74
 8020c06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020c0a:	ab03      	add	r3, sp, #12
 8020c0c:	9300      	str	r3, [sp, #0]
 8020c0e:	462a      	mov	r2, r5
 8020c10:	4b05      	ldr	r3, [pc, #20]	; (8020c28 <_svfiprintf_r+0x1f4>)
 8020c12:	a904      	add	r1, sp, #16
 8020c14:	4638      	mov	r0, r7
 8020c16:	f7ff f9c7 	bl	801ffa8 <_printf_i>
 8020c1a:	e7eb      	b.n	8020bf4 <_svfiprintf_r+0x1c0>
 8020c1c:	08072bd4 	.word	0x08072bd4
 8020c20:	08072bde 	.word	0x08072bde
 8020c24:	00000000 	.word	0x00000000
 8020c28:	0802097f 	.word	0x0802097f
 8020c2c:	08072bda 	.word	0x08072bda

08020c30 <__sflush_r>:
 8020c30:	898a      	ldrh	r2, [r1, #12]
 8020c32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020c36:	4605      	mov	r5, r0
 8020c38:	0710      	lsls	r0, r2, #28
 8020c3a:	460c      	mov	r4, r1
 8020c3c:	d458      	bmi.n	8020cf0 <__sflush_r+0xc0>
 8020c3e:	684b      	ldr	r3, [r1, #4]
 8020c40:	2b00      	cmp	r3, #0
 8020c42:	dc05      	bgt.n	8020c50 <__sflush_r+0x20>
 8020c44:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8020c46:	2b00      	cmp	r3, #0
 8020c48:	dc02      	bgt.n	8020c50 <__sflush_r+0x20>
 8020c4a:	2000      	movs	r0, #0
 8020c4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020c50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8020c52:	2e00      	cmp	r6, #0
 8020c54:	d0f9      	beq.n	8020c4a <__sflush_r+0x1a>
 8020c56:	2300      	movs	r3, #0
 8020c58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8020c5c:	682f      	ldr	r7, [r5, #0]
 8020c5e:	6a21      	ldr	r1, [r4, #32]
 8020c60:	602b      	str	r3, [r5, #0]
 8020c62:	d032      	beq.n	8020cca <__sflush_r+0x9a>
 8020c64:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8020c66:	89a3      	ldrh	r3, [r4, #12]
 8020c68:	075a      	lsls	r2, r3, #29
 8020c6a:	d505      	bpl.n	8020c78 <__sflush_r+0x48>
 8020c6c:	6863      	ldr	r3, [r4, #4]
 8020c6e:	1ac0      	subs	r0, r0, r3
 8020c70:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8020c72:	b10b      	cbz	r3, 8020c78 <__sflush_r+0x48>
 8020c74:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8020c76:	1ac0      	subs	r0, r0, r3
 8020c78:	2300      	movs	r3, #0
 8020c7a:	4602      	mov	r2, r0
 8020c7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8020c7e:	6a21      	ldr	r1, [r4, #32]
 8020c80:	4628      	mov	r0, r5
 8020c82:	47b0      	blx	r6
 8020c84:	1c43      	adds	r3, r0, #1
 8020c86:	89a3      	ldrh	r3, [r4, #12]
 8020c88:	d106      	bne.n	8020c98 <__sflush_r+0x68>
 8020c8a:	6829      	ldr	r1, [r5, #0]
 8020c8c:	291d      	cmp	r1, #29
 8020c8e:	d82b      	bhi.n	8020ce8 <__sflush_r+0xb8>
 8020c90:	4a29      	ldr	r2, [pc, #164]	; (8020d38 <__sflush_r+0x108>)
 8020c92:	410a      	asrs	r2, r1
 8020c94:	07d6      	lsls	r6, r2, #31
 8020c96:	d427      	bmi.n	8020ce8 <__sflush_r+0xb8>
 8020c98:	2200      	movs	r2, #0
 8020c9a:	6062      	str	r2, [r4, #4]
 8020c9c:	04d9      	lsls	r1, r3, #19
 8020c9e:	6922      	ldr	r2, [r4, #16]
 8020ca0:	6022      	str	r2, [r4, #0]
 8020ca2:	d504      	bpl.n	8020cae <__sflush_r+0x7e>
 8020ca4:	1c42      	adds	r2, r0, #1
 8020ca6:	d101      	bne.n	8020cac <__sflush_r+0x7c>
 8020ca8:	682b      	ldr	r3, [r5, #0]
 8020caa:	b903      	cbnz	r3, 8020cae <__sflush_r+0x7e>
 8020cac:	6560      	str	r0, [r4, #84]	; 0x54
 8020cae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8020cb0:	602f      	str	r7, [r5, #0]
 8020cb2:	2900      	cmp	r1, #0
 8020cb4:	d0c9      	beq.n	8020c4a <__sflush_r+0x1a>
 8020cb6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020cba:	4299      	cmp	r1, r3
 8020cbc:	d002      	beq.n	8020cc4 <__sflush_r+0x94>
 8020cbe:	4628      	mov	r0, r5
 8020cc0:	f7ff fde2 	bl	8020888 <_free_r>
 8020cc4:	2000      	movs	r0, #0
 8020cc6:	6360      	str	r0, [r4, #52]	; 0x34
 8020cc8:	e7c0      	b.n	8020c4c <__sflush_r+0x1c>
 8020cca:	2301      	movs	r3, #1
 8020ccc:	4628      	mov	r0, r5
 8020cce:	47b0      	blx	r6
 8020cd0:	1c41      	adds	r1, r0, #1
 8020cd2:	d1c8      	bne.n	8020c66 <__sflush_r+0x36>
 8020cd4:	682b      	ldr	r3, [r5, #0]
 8020cd6:	2b00      	cmp	r3, #0
 8020cd8:	d0c5      	beq.n	8020c66 <__sflush_r+0x36>
 8020cda:	2b1d      	cmp	r3, #29
 8020cdc:	d001      	beq.n	8020ce2 <__sflush_r+0xb2>
 8020cde:	2b16      	cmp	r3, #22
 8020ce0:	d101      	bne.n	8020ce6 <__sflush_r+0xb6>
 8020ce2:	602f      	str	r7, [r5, #0]
 8020ce4:	e7b1      	b.n	8020c4a <__sflush_r+0x1a>
 8020ce6:	89a3      	ldrh	r3, [r4, #12]
 8020ce8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020cec:	81a3      	strh	r3, [r4, #12]
 8020cee:	e7ad      	b.n	8020c4c <__sflush_r+0x1c>
 8020cf0:	690f      	ldr	r7, [r1, #16]
 8020cf2:	2f00      	cmp	r7, #0
 8020cf4:	d0a9      	beq.n	8020c4a <__sflush_r+0x1a>
 8020cf6:	0793      	lsls	r3, r2, #30
 8020cf8:	680e      	ldr	r6, [r1, #0]
 8020cfa:	bf08      	it	eq
 8020cfc:	694b      	ldreq	r3, [r1, #20]
 8020cfe:	600f      	str	r7, [r1, #0]
 8020d00:	bf18      	it	ne
 8020d02:	2300      	movne	r3, #0
 8020d04:	eba6 0807 	sub.w	r8, r6, r7
 8020d08:	608b      	str	r3, [r1, #8]
 8020d0a:	f1b8 0f00 	cmp.w	r8, #0
 8020d0e:	dd9c      	ble.n	8020c4a <__sflush_r+0x1a>
 8020d10:	6a21      	ldr	r1, [r4, #32]
 8020d12:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8020d14:	4643      	mov	r3, r8
 8020d16:	463a      	mov	r2, r7
 8020d18:	4628      	mov	r0, r5
 8020d1a:	47b0      	blx	r6
 8020d1c:	2800      	cmp	r0, #0
 8020d1e:	dc06      	bgt.n	8020d2e <__sflush_r+0xfe>
 8020d20:	89a3      	ldrh	r3, [r4, #12]
 8020d22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020d26:	81a3      	strh	r3, [r4, #12]
 8020d28:	f04f 30ff 	mov.w	r0, #4294967295
 8020d2c:	e78e      	b.n	8020c4c <__sflush_r+0x1c>
 8020d2e:	4407      	add	r7, r0
 8020d30:	eba8 0800 	sub.w	r8, r8, r0
 8020d34:	e7e9      	b.n	8020d0a <__sflush_r+0xda>
 8020d36:	bf00      	nop
 8020d38:	dfbffffe 	.word	0xdfbffffe

08020d3c <_fflush_r>:
 8020d3c:	b538      	push	{r3, r4, r5, lr}
 8020d3e:	690b      	ldr	r3, [r1, #16]
 8020d40:	4605      	mov	r5, r0
 8020d42:	460c      	mov	r4, r1
 8020d44:	b913      	cbnz	r3, 8020d4c <_fflush_r+0x10>
 8020d46:	2500      	movs	r5, #0
 8020d48:	4628      	mov	r0, r5
 8020d4a:	bd38      	pop	{r3, r4, r5, pc}
 8020d4c:	b118      	cbz	r0, 8020d56 <_fflush_r+0x1a>
 8020d4e:	6a03      	ldr	r3, [r0, #32]
 8020d50:	b90b      	cbnz	r3, 8020d56 <_fflush_r+0x1a>
 8020d52:	f7ff fad7 	bl	8020304 <__sinit>
 8020d56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020d5a:	2b00      	cmp	r3, #0
 8020d5c:	d0f3      	beq.n	8020d46 <_fflush_r+0xa>
 8020d5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8020d60:	07d0      	lsls	r0, r2, #31
 8020d62:	d404      	bmi.n	8020d6e <_fflush_r+0x32>
 8020d64:	0599      	lsls	r1, r3, #22
 8020d66:	d402      	bmi.n	8020d6e <_fflush_r+0x32>
 8020d68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020d6a:	f7ff fd1e 	bl	80207aa <__retarget_lock_acquire_recursive>
 8020d6e:	4628      	mov	r0, r5
 8020d70:	4621      	mov	r1, r4
 8020d72:	f7ff ff5d 	bl	8020c30 <__sflush_r>
 8020d76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020d78:	07da      	lsls	r2, r3, #31
 8020d7a:	4605      	mov	r5, r0
 8020d7c:	d4e4      	bmi.n	8020d48 <_fflush_r+0xc>
 8020d7e:	89a3      	ldrh	r3, [r4, #12]
 8020d80:	059b      	lsls	r3, r3, #22
 8020d82:	d4e1      	bmi.n	8020d48 <_fflush_r+0xc>
 8020d84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020d86:	f7ff fd11 	bl	80207ac <__retarget_lock_release_recursive>
 8020d8a:	e7dd      	b.n	8020d48 <_fflush_r+0xc>

08020d8c <__swhatbuf_r>:
 8020d8c:	b570      	push	{r4, r5, r6, lr}
 8020d8e:	460c      	mov	r4, r1
 8020d90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020d94:	2900      	cmp	r1, #0
 8020d96:	b096      	sub	sp, #88	; 0x58
 8020d98:	4615      	mov	r5, r2
 8020d9a:	461e      	mov	r6, r3
 8020d9c:	da0d      	bge.n	8020dba <__swhatbuf_r+0x2e>
 8020d9e:	89a3      	ldrh	r3, [r4, #12]
 8020da0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8020da4:	f04f 0100 	mov.w	r1, #0
 8020da8:	bf0c      	ite	eq
 8020daa:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8020dae:	2340      	movne	r3, #64	; 0x40
 8020db0:	2000      	movs	r0, #0
 8020db2:	6031      	str	r1, [r6, #0]
 8020db4:	602b      	str	r3, [r5, #0]
 8020db6:	b016      	add	sp, #88	; 0x58
 8020db8:	bd70      	pop	{r4, r5, r6, pc}
 8020dba:	466a      	mov	r2, sp
 8020dbc:	f000 f848 	bl	8020e50 <_fstat_r>
 8020dc0:	2800      	cmp	r0, #0
 8020dc2:	dbec      	blt.n	8020d9e <__swhatbuf_r+0x12>
 8020dc4:	9901      	ldr	r1, [sp, #4]
 8020dc6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8020dca:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8020dce:	4259      	negs	r1, r3
 8020dd0:	4159      	adcs	r1, r3
 8020dd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8020dd6:	e7eb      	b.n	8020db0 <__swhatbuf_r+0x24>

08020dd8 <__smakebuf_r>:
 8020dd8:	898b      	ldrh	r3, [r1, #12]
 8020dda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8020ddc:	079d      	lsls	r5, r3, #30
 8020dde:	4606      	mov	r6, r0
 8020de0:	460c      	mov	r4, r1
 8020de2:	d507      	bpl.n	8020df4 <__smakebuf_r+0x1c>
 8020de4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8020de8:	6023      	str	r3, [r4, #0]
 8020dea:	6123      	str	r3, [r4, #16]
 8020dec:	2301      	movs	r3, #1
 8020dee:	6163      	str	r3, [r4, #20]
 8020df0:	b002      	add	sp, #8
 8020df2:	bd70      	pop	{r4, r5, r6, pc}
 8020df4:	ab01      	add	r3, sp, #4
 8020df6:	466a      	mov	r2, sp
 8020df8:	f7ff ffc8 	bl	8020d8c <__swhatbuf_r>
 8020dfc:	9900      	ldr	r1, [sp, #0]
 8020dfe:	4605      	mov	r5, r0
 8020e00:	4630      	mov	r0, r6
 8020e02:	f7fe fe89 	bl	801fb18 <_malloc_r>
 8020e06:	b948      	cbnz	r0, 8020e1c <__smakebuf_r+0x44>
 8020e08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020e0c:	059a      	lsls	r2, r3, #22
 8020e0e:	d4ef      	bmi.n	8020df0 <__smakebuf_r+0x18>
 8020e10:	f023 0303 	bic.w	r3, r3, #3
 8020e14:	f043 0302 	orr.w	r3, r3, #2
 8020e18:	81a3      	strh	r3, [r4, #12]
 8020e1a:	e7e3      	b.n	8020de4 <__smakebuf_r+0xc>
 8020e1c:	89a3      	ldrh	r3, [r4, #12]
 8020e1e:	6020      	str	r0, [r4, #0]
 8020e20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020e24:	81a3      	strh	r3, [r4, #12]
 8020e26:	9b00      	ldr	r3, [sp, #0]
 8020e28:	6163      	str	r3, [r4, #20]
 8020e2a:	9b01      	ldr	r3, [sp, #4]
 8020e2c:	6120      	str	r0, [r4, #16]
 8020e2e:	b15b      	cbz	r3, 8020e48 <__smakebuf_r+0x70>
 8020e30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020e34:	4630      	mov	r0, r6
 8020e36:	f000 f81d 	bl	8020e74 <_isatty_r>
 8020e3a:	b128      	cbz	r0, 8020e48 <__smakebuf_r+0x70>
 8020e3c:	89a3      	ldrh	r3, [r4, #12]
 8020e3e:	f023 0303 	bic.w	r3, r3, #3
 8020e42:	f043 0301 	orr.w	r3, r3, #1
 8020e46:	81a3      	strh	r3, [r4, #12]
 8020e48:	89a3      	ldrh	r3, [r4, #12]
 8020e4a:	431d      	orrs	r5, r3
 8020e4c:	81a5      	strh	r5, [r4, #12]
 8020e4e:	e7cf      	b.n	8020df0 <__smakebuf_r+0x18>

08020e50 <_fstat_r>:
 8020e50:	b538      	push	{r3, r4, r5, lr}
 8020e52:	4d07      	ldr	r5, [pc, #28]	; (8020e70 <_fstat_r+0x20>)
 8020e54:	2300      	movs	r3, #0
 8020e56:	4604      	mov	r4, r0
 8020e58:	4608      	mov	r0, r1
 8020e5a:	4611      	mov	r1, r2
 8020e5c:	602b      	str	r3, [r5, #0]
 8020e5e:	f7f4 fea0 	bl	8015ba2 <_fstat>
 8020e62:	1c43      	adds	r3, r0, #1
 8020e64:	d102      	bne.n	8020e6c <_fstat_r+0x1c>
 8020e66:	682b      	ldr	r3, [r5, #0]
 8020e68:	b103      	cbz	r3, 8020e6c <_fstat_r+0x1c>
 8020e6a:	6023      	str	r3, [r4, #0]
 8020e6c:	bd38      	pop	{r3, r4, r5, pc}
 8020e6e:	bf00      	nop
 8020e70:	2404f12c 	.word	0x2404f12c

08020e74 <_isatty_r>:
 8020e74:	b538      	push	{r3, r4, r5, lr}
 8020e76:	4d06      	ldr	r5, [pc, #24]	; (8020e90 <_isatty_r+0x1c>)
 8020e78:	2300      	movs	r3, #0
 8020e7a:	4604      	mov	r4, r0
 8020e7c:	4608      	mov	r0, r1
 8020e7e:	602b      	str	r3, [r5, #0]
 8020e80:	f7f4 fe9f 	bl	8015bc2 <_isatty>
 8020e84:	1c43      	adds	r3, r0, #1
 8020e86:	d102      	bne.n	8020e8e <_isatty_r+0x1a>
 8020e88:	682b      	ldr	r3, [r5, #0]
 8020e8a:	b103      	cbz	r3, 8020e8e <_isatty_r+0x1a>
 8020e8c:	6023      	str	r3, [r4, #0]
 8020e8e:	bd38      	pop	{r3, r4, r5, pc}
 8020e90:	2404f12c 	.word	0x2404f12c

08020e94 <_malloc_usable_size_r>:
 8020e94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8020e98:	1f18      	subs	r0, r3, #4
 8020e9a:	2b00      	cmp	r3, #0
 8020e9c:	bfbc      	itt	lt
 8020e9e:	580b      	ldrlt	r3, [r1, r0]
 8020ea0:	18c0      	addlt	r0, r0, r3
 8020ea2:	4770      	bx	lr

08020ea4 <_init>:
 8020ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020ea6:	bf00      	nop
 8020ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020eaa:	bc08      	pop	{r3}
 8020eac:	469e      	mov	lr, r3
 8020eae:	4770      	bx	lr

08020eb0 <_fini>:
 8020eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020eb2:	bf00      	nop
 8020eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020eb6:	bc08      	pop	{r3}
 8020eb8:	469e      	mov	lr, r3
 8020eba:	4770      	bx	lr
